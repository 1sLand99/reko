// fn0800_0150
// Return size: 2
void fn0800_0150()
fn0800_0150_entry:
	// succ:  l0800_0150
l0800_0150:
	sp = fp
	es = Mem0[0x0800:0x025A:selector]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	si = 0x2714
	di = 0x2714
	call fn0800_01E6 (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0150_exit
fn0800_0150_exit:


// fn0800_0163
// Return size: 2
void fn0800_0163()
fn0800_0163_entry:
	// succ:  l0800_0163
l0800_0163:
	sp = fp
	return
	// succ:  fn0800_0163_exit
fn0800_0163_exit:


// fn0800_0164
// Return size: 0
void fn0800_0164()
fn0800_0164_entry:
	// succ:  l0800_0164
l0800_0164:
	sp = fp
	bp = sp
	ah = 0x4C
	al = Mem0[ss:bp + 0x0002:byte]
	msdos_terminate(al)
	// succ:  fn0800_0164_exit
fn0800_0164_exit:


// fn0800_01B9
// Return size: 2
void fn0800_01B9()
fn0800_01B9_entry:
	// succ:  l0800_01B9
l0800_01B9:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2500
	ds_dx = Mem0[ds:0x005B:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2504
	ds_dx = Mem0[ds:0x005F:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2505
	ds_dx = Mem0[ds:0x0063:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2506
	ds_dx = Mem0[ds:0x0067:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	return
	// succ:  fn0800_01B9_exit
fn0800_01B9_exit:


// fn0800_01E6
// Return size: 2
void fn0800_01E6()
fn0800_01E6_entry:
	// succ:  l0800_01E6
l0800_01E6:
	sp = fp
	SCZO = cond(si - 0x26FC)
	branch Test(EQ,Z) l0800_01F0
	// succ:  l0800_01EC l0800_01F0
l0800_01EC:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	goto l0800_01F2
	// succ:  l0800_01F2
l0800_01F0:
	ah = 0xFF
	// succ:  l0800_01F2
l0800_01F2:
	dx = di
	bx = si
	// succ:  l0800_01F6
l0800_01F6:
	SCZO = cond(bx - di)
	branch Test(EQ,Z) l0800_021D
	// succ:  l0800_01FA l0800_021D
l0800_01FA:
	SCZO = cond(Mem0[es:bx:byte] - 0xFF)
	branch Test(EQ,Z) l0800_0218
	// succ:  l0800_0200 l0800_0218
l0800_0200:
	SCZO = cond(si - 0x26FC)
	branch Test(EQ,Z) l0800_020C
	// succ:  l0800_0206 l0800_020C
l0800_0206:
	SCZO = cond(ah - Mem0[es:bx + 0x0001:byte])
	goto l0800_0210
	// succ:  l0800_0210
l0800_020C:
	SCZO = cond(Mem0[es:bx + 0x0001:byte] - ah)
	// succ:  l0800_0210
l0800_0210:
	branch Test(UGT,CZ) l0800_0218
	// succ:  l0800_0212 l0800_0218
l0800_0212:
	ah = Mem0[es:bx + 0x0001:byte]
	dx = bx
	// succ:  l0800_0218
l0800_0218:
	bx = bx + 0x0006
	SCZO = cond(bx)
	goto l0800_01F6
	// succ:  l0800_01F6
l0800_021D:
	SCZO = cond(dx - di)
	branch Test(EQ,Z) l0800_023C
	// succ:  l0800_0221 l0800_023C
l0800_0221:
	bx = dx
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	Mem0[es:bx:byte] = 0xFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	branch Test(EQ,Z) l0800_0235
	// succ:  l0800_022E l0800_0235
l0800_022E:
	call Mem0[es:bx + 0x0002:ptr32] (retsize: 4;)
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	goto l0800_01E6
	// succ:  l0800_01E6
l0800_0235:
	call SEQ(cs, Mem0[es:bx + 0x0002:word16]) (retsize: 2;)
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	goto l0800_01E6
	// succ:  l0800_01E6
l0800_023C:
	return
	// succ:  fn0800_01E6_exit
fn0800_01E6_exit:


// main
// Return size: 2
void main()
main_entry:
	// succ:  l0800_025E
l0800_025E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ds:0x2A27:word16] = 0x0001
	Mem0[ds:0x2E4D:word16] = 0x0000
	Mem0[ds:0x2A1F:word16] = 0x0000
	Mem0[ds:0x2E4F:word16] = 0x0000
	Mem0[ds:0x2A1D:word16] = 0x0000
	Mem0[ds:0x2A17:word16] = 0x0000
	Mem0[ds:0x2A1B:word16] = 0x0000
	Mem0[ds:0x2A11:word16] = 0x0000
	Mem0[ds:0x2A0F:word16] = 0x0000
	Mem0[ds:0x2A0D:word16] = 0x0000
	Mem0[ds:0x2A0B:word16] = 0x3000
	Mem0[ds:0x2E31:word16] = 0x8000
	Mem0[ds:0x2E2F:word16] = 0x1000
	Mem0[ds:0x2A21:word16] = 0x0001
	Mem0[ds:0x29F5:word16] = 0x0000
	Mem0[ds:0x29F3:word16] = 0x0000
	Mem0[ds:0x29F1:word16] = 0x0000
	Mem0[ds:0x29EF:word16] = 0x0000
	Mem0[ds:0x2A13:word16] = 0x0000
	Mem0[ds:0x2A23:word16] = 0x0001
	call fn0800_2C9A (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x0094
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x07E8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	call fn0800_0402 (retsize: 2;)
	call fn0800_0541 (retsize: 2;)
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_2DBF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_9764 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ds:0x2A25:word16]
	SCZO = cond(bx - 0x0008)
	branch Test(UGT,CZ) l0800_0338
	// succ:  l0800_031A l0800_0338
l0800_031A:
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_0321 l0800_0330 l0800_0330 l0800_0326 l0800_0326 l0800_032B l0800_0335 l0800_0335 l0800_0335 }
	// succ:  l0800_0321 l0800_0330 l0800_0330 l0800_0326 l0800_0326 l0800_032B l0800_0335 l0800_0335 l0800_0335
l0800_0321:
l0800_0326:
l0800_032B:
l0800_0330:
l0800_0335:
l0800_0338:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_9764 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29F1:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29EF:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29F5:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29F3:word16]
	call fn0800_0B79 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	si = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x003C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_8BCA (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x003C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = 0x0E10
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_8BCA (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8BBB (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0E10
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = 0x5180
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_8BCA (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8BBB (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si
	bx = 0x0064
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = si
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29F1:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29EF:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29F5:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29F3:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x05DC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x2A13:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x07EB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0024
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  main_exit
main_exit:


// fn0800_0402
// Return size: 2
void fn0800_0402()
fn0800_0402_entry:
	// succ:  l0800_0402
l0800_0402:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_0410
	// succ:  l0800_040D l0800_0410
l0800_040D:
	call fn0800_0DCE (retsize: 2;)
	// succ:  l0800_0410
l0800_0410:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx:word16]
	call fn0800_BFC7 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l0800_044D
	// succ:  l0800_042F l0800_044D
l0800_042F:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_044D
l0800_044D:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	al = Mem0[es:bx:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x0829
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0C29 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ds:0x2A25:word16] = ax
	SCZO = cond(ax - 0x0009)
	branch Test(LT,SO) l0800_0492
	// succ:  l0800_0474 l0800_0492
l0800_0474:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_0492
l0800_0492:
	v16 = Mem0[ds:0x2A27:word16] + 0x0001
	Mem0[ds:0x2A27:word16] = v16
	SZO = cond(v16)
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0002)
	branch Test(GT,SZO) l0800_04A0
	// succ:  l0800_049D l0800_04A0
l0800_049D:
	goto l0800_053E
	// succ:  l0800_053E
l0800_04A0:
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_04AC
	// succ:  l0800_04A9 l0800_04AC
l0800_04A9:
	call fn0800_0DCE (retsize: 2;)
	// succ:  l0800_04AC
l0800_04AC:
	ax = Mem0[ds:0x2A27:word16]
	v18 = Mem0[ds:0x2A27:word16] + 0x0001
	Mem0[ds:0x2A27:word16] = v18
	SZO = cond(v18)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0C6C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = 0x4348
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_04E4
l0800_04E4:
	branch cx == 0x0000 l0800_04E6
	// succ:  l0800_04E4_1 l0800_04E6
l0800_04E4_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_04E4
	// succ:  l0800_04E6 l0800_04E4
l0800_04E6:
	cx = ~cx
	ax = 0x002E
	di = di - 0x0001
	SZO = cond(di)
	D = true
	// succ:  l0800_04ED
l0800_04ED:
	branch cx == 0x0000 l0800_04EF
	// succ:  l0800_04ED_2 l0800_04EF
l0800_04ED_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di - 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_04ED
	// succ:  l0800_04EF l0800_04ED
l0800_04EF:
	branch Test(EQ,Z) l0800_04F8
	// succ:  l0800_04F1 l0800_04F8
l0800_04F1:
	di = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_04F8
l0800_04F8:
	di = di + 0x0001
	SZO = cond(di)
	D = false
	ax = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = 0x4348
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0507
l0800_0507:
	branch cx == 0x0000 l0800_0509
	// succ:  l0800_0507_1 l0800_0509
l0800_0507_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0507
	// succ:  l0800_0509 l0800_0507
l0800_0509:
	cx = ~cx
	ax = 0x005C
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_0510
l0800_0510:
	branch cx == 0x0000 l0800_0512
	// succ:  l0800_0510_2 l0800_0512
l0800_0510_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0510
	// succ:  l0800_0512 l0800_0510
l0800_0512:
	branch Test(EQ,Z) l0800_051B
	// succ:  l0800_0514 l0800_051B
l0800_0514:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_051B
l0800_051B:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l0800_0538
	// succ:  l0800_0523 l0800_0538
l0800_0523:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = 0x4348
	si = 0x0833
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0530
l0800_0530:
	branch cx == 0x0000 l0800_0532
	// succ:  l0800_0530_1 l0800_0532
l0800_0530_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0530
	// succ:  l0800_0532 l0800_0530
l0800_0532:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0005
	// succ:  l0800_0536
l0800_0536:
	branch cx == 0x0000 l0800_0538
	// succ:  l0800_0536_2 l0800_0538
l0800_0536_2:
	v22 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v22
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0536
	// succ:  l0800_0536
l0800_0538:
	Mem0[ds:0x2A19:word16] = 0x0001
	// succ:  l0800_053E
l0800_053E:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0402_exit
fn0800_0402_exit:


// fn0800_0541
// Return size: 2
void fn0800_0541()
fn0800_0541_entry:
	// succ:  l0800_0541
l0800_0541:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_0555
	// succ:  l0800_0552 l0800_0555
l0800_0552:
	goto l0800_0987
	// succ:  l0800_0987
l0800_0555:
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2D)
	branch Test(NE,Z) l0800_056B
	// succ:  l0800_0568 l0800_056B
l0800_0568:
	goto l0800_086D
	// succ:  l0800_086D
l0800_056B:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2F)
	branch Test(NE,Z) l0800_0584
	// succ:  l0800_0581 l0800_0584
l0800_0581:
	goto l0800_086D
	// succ:  l0800_086D
l0800_0584:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0541_exit
l0800_058A:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	al = Mem0[es:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x0838
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0C29 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = ax
	SCZO = cond(ax - 0x000B)
	branch Test(LT,SO) l0800_05CF
	// succ:  l0800_05B1 l0800_05CF
l0800_05B1:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_05CF
l0800_05CF:
	SCZO = cond(si - 0x0006)
	branch Test(LT,SO) l0800_05D7
	// succ:  l0800_05D4 l0800_05D7
l0800_05D4:
	goto l0800_0659
	// succ:  l0800_0659
l0800_05D7:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx:word16]
	call fn0800_BFC7 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0002)
	branch Test(NE,Z) l0800_0622
	// succ:  l0800_05F6 l0800_0622
l0800_05F6:
	v26 = Mem0[ds:0x2A27:word16] + 0x0001
	Mem0[ds:0x2A27:word16] = v26
	SZO = cond(v26)
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_0606
	// succ:  l0800_0603 l0800_0606
l0800_0603:
	call fn0800_0DCE (retsize: 2;)
	// succ:  l0800_0606
l0800_0606:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[es:bx + 0x0002:word16]
	dx = Mem0[es:bx:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_063F
	// succ:  l0800_063F
l0800_0622:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[es:bx + 0x0002:word16]
	dx = Mem0[es:bx:word16]
	dx = dx + 0x0002
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0800_063F
l0800_063F:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0659
	// succ:  l0800_064A l0800_0659
l0800_064A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x05DC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_0659
l0800_0659:
	bx = si
	SCZO = cond(bx - 0x000A)
	branch Test(ULE,CZ) l0800_0663
	// succ:  l0800_0660 l0800_0663
l0800_0660:
	goto l0800_0869
	// succ:  l0800_0869
l0800_0663:
	bx = bx << 0x0001
	SCZO = cond(bx)
	call Mem0[0x0800:bx + 0x098D:word16] (retsize: 4;)
	return
	// succ:  fn0800_0541_exit
l0800_0869:
	v21 = Mem0[ds:0x2A27:word16] + 0x0001
	Mem0[ds:0x2A27:word16] = v21
	SZO = cond(v21)
	// succ:  l0800_086D
l0800_086D:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2D)
	branch Test(NE,Z) l0800_0886
	// succ:  l0800_0883 l0800_0886
l0800_0883:
	goto l0800_058A
	// succ:  l0800_058A
l0800_0886:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2F)
	branch Test(NE,Z) l0800_089F
	// succ:  l0800_089C l0800_089F
l0800_089C:
	goto l0800_058A
	// succ:  l0800_058A
l0800_089F:
	ax = Mem0[ds:0x2A21:word16]
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_08AE
	// succ:  l0800_08A7 l0800_08AE
l0800_08A7:
	SCZO = cond(ax - 0x0002)
	branch Test(EQ,Z) l0800_08D9
	// succ:  l0800_08AC l0800_08D9
l0800_08AC:
	goto l0800_0902
	// succ:  l0800_0902
l0800_08AE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = 0x4271
	si = 0x085B
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_08BB
l0800_08BB:
	branch cx == 0x0000 l0800_08BD
	// succ:  l0800_08BB_1 l0800_08BD
l0800_08BB_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_08BB
	// succ:  l0800_08BD l0800_08BB
l0800_08BD:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_08C1
l0800_08C1:
	branch cx == 0x0000 l0800_08C3
	// succ:  l0800_08C1_2 l0800_08C3
l0800_08C1_2:
	v25 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v25
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_08C1
	// succ:  l0800_08C1
l0800_08C3:
	SCZO = cond(Mem0[ds:0x2E31:word16] - 0x8000)
	branch Test(ULE,CZ) l0800_08D1
	// succ:  l0800_08CB l0800_08D1
l0800_08CB:
	Mem0[ds:0x2E31:word16] = 0x8000
	// succ:  l0800_08D1
l0800_08D1:
	Mem0[ds:0x2E2F:word16] = 0x1000
	goto l0800_0902
	// succ:  l0800_0902
l0800_08D9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = 0x4271
	si = 0x085D
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_08E6
l0800_08E6:
	branch cx == 0x0000 l0800_08E8
	// succ:  l0800_08E6_1 l0800_08E8
l0800_08E6_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_08E6
	// succ:  l0800_08E8 l0800_08E6
l0800_08E8:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_08EC
l0800_08EC:
	branch cx == 0x0000 l0800_08EE
	// succ:  l0800_08EC_2 l0800_08EE
l0800_08EC_2:
	v20 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_08EC
	// succ:  l0800_08EC
l0800_08EE:
	SCZO = cond(Mem0[ds:0x2E31:word16] - 0x1000)
	branch Test(ULE,CZ) l0800_08FC
	// succ:  l0800_08F6 l0800_08FC
l0800_08F6:
	Mem0[ds:0x2E31:word16] = 0x1000
	// succ:  l0800_08FC
l0800_08FC:
	Mem0[ds:0x2E2F:word16] = 0x00FF
	// succ:  l0800_0902
l0800_0902:
	SCZO = cond(Mem0[ds:0x2A23:word16] - 0x0002)
	branch Test(NE,Z) l0800_0911
	// succ:  l0800_0909 l0800_0911
l0800_0909:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2A1D:word16] = ax
	Mem0[ds:0x2E4F:word16] = ax
	// succ:  l0800_0911
l0800_0911:
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_092D
	// succ:  l0800_0918 l0800_092D
l0800_0918:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = 0x4271
	si = 0x0653
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0925
l0800_0925:
	branch cx == 0x0000 l0800_0927
	// succ:  l0800_0925_1 l0800_0927
l0800_0925_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0925
	// succ:  l0800_0927 l0800_0925
l0800_0927:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_092B
l0800_092B:
	branch cx == 0x0000 l0800_092D
	// succ:  l0800_092B_2 l0800_092D
l0800_092B_2:
	v22 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v22
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_092B
	// succ:  l0800_092B
l0800_092D:
	SCZO = cond(Mem0[ds:0x2A1D:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0949
	// succ:  l0800_0934 l0800_0949
l0800_0934:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = 0x4271
	si = 0x085F
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0941
l0800_0941:
	branch cx == 0x0000 l0800_0943
	// succ:  l0800_0941_1 l0800_0943
l0800_0941_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0941
	// succ:  l0800_0943 l0800_0941
l0800_0943:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_0947
l0800_0947:
	branch cx == 0x0000 l0800_0949
	// succ:  l0800_0947_2 l0800_0949
l0800_0947_2:
	v23 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0947
	// succ:  l0800_0947
l0800_0949:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = 0x4271
	si = 0x0861
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0956
l0800_0956:
	branch cx == 0x0000 l0800_0958
	// succ:  l0800_0956_1 l0800_0958
l0800_0956_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0956
	// succ:  l0800_0958 l0800_0956
l0800_0958:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0005
	// succ:  l0800_095C
l0800_095C:
	branch cx == 0x0000 l0800_095E
	// succ:  l0800_095C_2 l0800_095E
l0800_095C_2:
	v24 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v24
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_095C
	// succ:  l0800_095C
l0800_095E:
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0000)
	branch Test(NE,Z) l0800_0987
	// succ:  l0800_0965 l0800_0987
l0800_0965:
	bx = Mem0[ds:0x2A23:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0545:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_0987
	// succ:  l0800_0977 l0800_0987
l0800_0977:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2E75
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x4271
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_09A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_0987
l0800_0987:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0541_exit
fn0800_0541_exit:


// fn0800_09A3
// Return size: 2
void fn0800_09A3()
fn0800_09A3_entry:
	// succ:  l0800_09A3
l0800_09A3:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:0x0A72:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x0A73:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x0A74:byte]
	ax = (int16) al
	ax = ax << cl
	SCZO = cond(ax)
	bl = Mem0[ds:0x0A75:byte]
	bh = 0x00
	ax = ax + bx
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	dx = dx + 0x0020
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x0A6E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0800_867A (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_0A4F
	// succ:  l0800_0A4F
l0800_09FF:
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A07
l0800_0A07:
	branch cx == 0x0000 l0800_0A09
	// succ:  l0800_0A07_1 l0800_0A09
l0800_0A07_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0A07
	// succ:  l0800_0A09 l0800_0A07
l0800_0A09:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + cx
	SCZO = cond(ax)
	bx = ax
	al = Mem0[es:bx + 0x0001:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	di = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A25
l0800_0A25:
	branch cx == 0x0000 l0800_0A27
	// succ:  l0800_0A25_2 l0800_0A27
l0800_0A25_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0A25
	// succ:  l0800_0A27 l0800_0A25
l0800_0A27:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + cx
	SCZO = cond(ax)
	bx = ax
	al = Mem0[es:bx + 0x0002:byte]
	ah = 0x00
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = dx + ax
	SCZO = cond(dx)
	di = Mem0[ss:bp - 0x0008:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A42
l0800_0A42:
	branch cx == 0x0000 l0800_0A44
	// succ:  l0800_0A42_3 l0800_0A44
l0800_0A42_3:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0A42
	// succ:  l0800_0A44 l0800_0A42
l0800_0A44:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	dx = dx + cx
	SCZO = cond(dx)
	dx = dx + 0x0003
	SCZO = cond(dx)
	v27 = Mem0[ss:bp - 0x0008:word16] + dx
	Mem0[ss:bp - 0x0008:word16] = v27
	SCZO = cond(v27)
	// succ:  l0800_0A4F
l0800_0A4F:
	si = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = Mem0[ss:bp + 0x0006:selector]
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A5E
l0800_0A5E:
	branch cx == 0x0000 l0800_0A60
	// succ:  l0800_0A5E_1 l0800_0A60
l0800_0A5E_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0A5E
	// succ:  l0800_0A60 l0800_0A5E
l0800_0A60:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_0A64
l0800_0A64:
	branch cx == 0x0000 l0800_0A66
	// succ:  l0800_0A64_2 l0800_0A66
l0800_0A64_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0A64
	// succ:  l0800_0A66 l0800_0A64
l0800_0A66:
	branch Test(EQ,Z) l0800_0A6D
	// succ:  l0800_0A68 l0800_0A6D
l0800_0A68:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_0A6D
l0800_0A6D:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_09FF
	// succ:  l0800_0A72 l0800_09FF
l0800_0A72:
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A7A
l0800_0A7A:
	branch cx == 0x0000 l0800_0A7C
	// succ:  l0800_0A7A_1 l0800_0A7C
l0800_0A7A_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0A7A
	// succ:  l0800_0A7C l0800_0A7A
l0800_0A7C:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx + 0x0001
	SZO = cond(cx)
	v24 = Mem0[ss:bp - 0x0008:word16] + cx
	Mem0[ss:bp - 0x0008:word16] = v24
	SCZO = cond(v24)
	es_bx = Mem0[ss:bp - 0x0008:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 0x0002
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn0800_B0F3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_09A3_exit
fn0800_09A3_exit:


// fn0800_0B79
// Return size: 2
void fn0800_0B79()
fn0800_0B79_entry:
	// succ:  l0800_0B79
l0800_0B79:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0B9E
	// succ:  l0800_0B84 l0800_0B9E
l0800_0B84:
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | Mem0[ss:bp + 0x000A:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0B9E
	// succ:  l0800_0B8C l0800_0B9E
l0800_0B8C:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x000A:word16])
	branch Test(UGT,CZ) l0800_0BCE
	// succ:  l0800_0B97 l0800_0BCE
l0800_0B97:
	branch Test(NE,Z) l0800_0B9E
	// succ:  l0800_0B99 l0800_0B9E
l0800_0B99:
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l0800_0BCE
	// succ:  l0800_0B9E l0800_0BCE
l0800_0B9E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0B79_exit
l0800_0BA2:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8BC2 (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn0800_8BC2 (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ss:bp + 0x000A:word16] = dx
	Mem0[ss:bp + 0x0008:word16] = ax
	// succ:  l0800_0BCE
l0800_0BCE:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	dx = dx - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp + 0x000A:word16] - C
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0006)
	branch Test(UGT,CZ) l0800_0BA2
	// succ:  l0800_0BDF l0800_0BA2
l0800_0BDF:
	branch Test(NE,Z) l0800_0BE7
	// succ:  l0800_0BE1 l0800_0BE7
l0800_0BE1:
	SCZO = cond(dx - 0x8DB8)
	branch Test(UGT,CZ) l0800_0BA2
	// succ:  l0800_0BE7 l0800_0BA2
l0800_0BE7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx)
	cx = cx - Mem0[ss:bp + 0x000A:word16] - C
	SCZO = cond(cx)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x2710
	call fn0800_8F18 (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8BC2 (retsize: 2;)
	sp = sp + 0x0008
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0B79_exit
fn0800_0B79_exit:


// fn0800_0C29
// Return size: 2
void fn0800_0C29()
fn0800_0C29_entry:
	// succ:  l0800_0C29
l0800_0C29:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	cl = Mem0[ss:bp + 0x0008:byte]
	al = cl
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_97CC (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	cl = al
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_0C4F
	// succ:  l0800_0C4F
l0800_0C4C:
	v16 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v16
	SZO = cond(v16)
	// succ:  l0800_0C4F
l0800_0C4F:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_0C5D
	// succ:  l0800_0C58 l0800_0C5D
l0800_0C58:
	SCZO = cond(Mem0[es:bx:byte] - cl)
	branch Test(NE,Z) l0800_0C4C
	// succ:  l0800_0C5D l0800_0C4C
l0800_0C5D:
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0C29_exit
fn0800_0C29_exit:


// fn0800_0C6C
// Return size: 2
void fn0800_0C6C()
fn0800_0C6C_entry:
	// succ:  l0800_0C6C
l0800_0C6C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	goto l0800_0C88
	// succ:  l0800_0C88
l0800_0C71:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_97CC (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:byte] = al
	v12 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v12
	SZO = cond(v12)
	// succ:  l0800_0C88
l0800_0C88:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(NE,Z) l0800_0C71
	// succ:  l0800_0C91 l0800_0C71
l0800_0C91:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0C6C_exit
fn0800_0C6C_exit:


// fn0800_0D24
// Return size: 2
void fn0800_0D24()
fn0800_0D24_entry:
	// succ:  l0800_0D24
l0800_0D24:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x4477
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29DD:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29DB:word16]
	call fn0800_0DA9 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x4412
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29D9:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29D7:word16]
	call fn0800_0DA9 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x43AD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29D5:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29D3:word16]
	call fn0800_0DA9 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x055F:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x055D:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x08A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_0D92
	// succ:  l0800_0D83 l0800_0D92
l0800_0D83:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x08A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_0D92
l0800_0D92:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x0827
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8B5A (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0D24_exit
fn0800_0D24_exit:


// fn0800_0DA9
// Return size: 2
void fn0800_0DA9()
fn0800_0DA9_entry:
	// succ:  l0800_0DA9
l0800_0DA9:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0DCC
	// succ:  l0800_0DB4 l0800_0DCC
l0800_0DB4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_0DCC
l0800_0DCC:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0DA9_exit
fn0800_0DA9_exit:


// fn0800_0DCE
// Return size: 2
void fn0800_0DCE()
fn0800_0DCE_entry:
	// succ:  l0800_0DCE
l0800_0DCE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x0121
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x07E8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8B5A (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	return
	// succ:  fn0800_0DCE_exit
fn0800_0DCE_exit:


// fn006B_A326
// Return size: 2
void fn006B_A326()
fn006B_A326_entry:
	// succ:  l006B_A326
l006B_A326:
	sp = fp
	ax = Mem0[ds:0x45AA:word16]
	ax = ax | Mem0[ds:0x45AC:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l006B_A357
	// succ:  l006B_A32F l006B_A357
l006B_A32F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn006B_A732 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l006B_A346
	// succ:  l006B_A33E l006B_A346
l006B_A33E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn006B_A326_exit
l006B_A346:
l006B_A357:
fn006B_A326_exit:


// fn0800_2C9A
// Return size: 2
void fn0800_2C9A()
fn0800_2C9A_entry:
	// succ:  l0800_2C9A
l0800_2C9A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	si = 0x2A29
	// succ:  l0800_2CA0
l0800_2CA0:
	dx = cx
	bx = 0x0008
	goto l0800_2CBD
	// succ:  l0800_2CBD
l0800_2CA7:
	SZO = cond(dx & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_2CB6
	// succ:  l0800_2CAD l0800_2CB6
l0800_2CAD:
	ax = dx
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax ^ 0xA001
	SZO = cond(ax)
	C = false
	goto l0800_2CBA
	// succ:  l0800_2CBA
l0800_2CB6:
	ax = dx
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	// succ:  l0800_2CBA
l0800_2CBA:
	dx = ax
	bx = bx - 0x0001
	SZO = cond(bx)
	// succ:  l0800_2CBD
l0800_2CBD:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l0800_2CA7
	// succ:  l0800_2CC1 l0800_2CA7
l0800_2CC1:
	Mem0[ds:si:word16] = dx
	si = si + 0x0002
	SCZO = cond(si)
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - 0x0100)
	branch Test(ULT,C) l0800_2CA0
	// succ:  l0800_2CCD l0800_2CA0
l0800_2CCD:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_2C9A_exit
fn0800_2C9A_exit:


// fn0800_2DBF
// Return size: 2
void fn0800_2DBF()
fn0800_2DBF_entry:
	// succ:  l0800_2DBF
l0800_2DBF:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	Mem0[ds:0x4656:word16] = 0xFFFF
	Mem0[ds:0x4654:word16] = 0x0000
	ax = Mem0[ds:0x2A27:word16]
	Mem0[ds:0x4652:word16] = ax
	ax = Mem0[ss:bp + 0x0004:word16]
	Mem0[ds:0x4650:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x464E:word16] = ax
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_2DBF_exit
fn0800_2DBF_exit:


// fn006B_A732
// Return size: 0
void fn006B_A732()
fn006B_A732_entry:
	// succ:  l006B_A732
l006B_A732:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ds:0x4654:word16] - 0x0000)
	branch Test(NE,Z) l006B_A761
	// succ:  l006B_A741 l006B_A761
l006B_A741:
	ax = Mem0[ds:0x4652:word16]
	SCZO = cond(ax - Mem0[ds:0x4656:word16])
	branch Test(NE,Z) l006B_A761
	// succ:  l006B_A74A l006B_A761
l006B_A74A:
	SCZO = cond(Mem0[ds:0x464E:word16] - 0x0000)
	branch Test(EQ,Z) l006B_A761
	// succ:  l006B_A751 l006B_A761
l006B_A751:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn006B_ADC9 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = ax
	// succ:  l006B_A761
l006B_A761:
fn006B_A732_exit:


// fn006B_ADC9
// Return size: 2
void fn006B_ADC9()
fn006B_ADC9_entry:
	// succ:  l006B_ADC9
l006B_ADC9:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x4623
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn006B_219A (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l006B_ADE4
	// succ:  l006B_ADDD l006B_ADE4
l006B_ADDD:
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn006B_ADC9_exit
l006B_ADE4:
fn006B_ADC9_exit:


// fn0010_B850
// Return size: 2
void fn0010_B850()
fn0010_B850_entry:
	// succ:  l0010_B850
l0010_B850:
	sp = fp
	ax = ax - 0x8356
	SCZO = cond(ax)
	es_ax = Mem0[ds:si + 0x0000:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0010_B850_exit
fn0010_B850_exit:


// fn04C4_6ECA
// Return size: 0
void fn04C4_6ECA()
fn04C4_6ECA_entry:
	// succ:  l04C4_6ECA
l04C4_6ECA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax | Mem0[ss:bp + 0x000E:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l04C4_6EDB
	// succ:  l04C4_6ED8 l04C4_6EDB
l04C4_6ED8:
	goto l04C4_6F7F
	// succ:  l04C4_6F7F
l04C4_6EDB:
l04C4_6F7F:
fn04C4_6ECA_exit:


// fn04C4_718F
// Return size: 0
void fn04C4_718F()
fn04C4_718F_entry:
	// succ:  l04C4_718F
l04C4_718F:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v10 = Mem0[es:bx:word16] - 0x0001
	Mem0[es:bx:word16] = v10
	SZO = cond(v10)
	branch Test(LT,SO) l04C4_71B3
	// succ:  l04C4_719E l04C4_71B3
l04C4_719E:
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v14 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v14
	SZO = cond(v14)
	es = ax
	al = Mem0[es:si:byte]
	ah = 0x00
	goto l04C4_71BF
	// succ:  l04C4_71BF
l04C4_71B3:
l04C4_71BF:
fn04C4_718F_exit:


// fn04C4_71E7
// Return size: 2
void fn04C4_71E7()
fn04C4_71E7_entry:
	// succ:  l04C4_71E7
l04C4_71E7:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn04C4_718F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	Mem0[ss:bp - 0x0002:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn04C4_718F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn04C4_71E7_exit
fn04C4_71E7_exit:


// fn04C4_721D
// Return size: 2
void fn04C4_721D()
fn04C4_721D_entry:
	// succ:  l04C4_721D
l04C4_721D:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn04C4_71E7 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn04C4_71E7 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0004:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn04C4_721D_exit
fn04C4_721D_exit:


// fn04C4_73DE
// Return size: 2
void fn04C4_73DE()
fn04C4_73DE_entry:
	// succ:  l04C4_73DE
l04C4_73DE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn04C4_7407 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ss:bp + 0x0004:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn04C4_7407 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn04C4_73DE_exit
fn04C4_73DE_exit:


// fn04C4_7407
// Return size: 0
void fn04C4_7407()
fn04C4_7407_entry:
	// succ:  l04C4_7407
l04C4_7407:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = Mem0[ss:bp + 0x0004:byte]
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	v10 = Mem0[es:bx:word16] + 0x0001
	Mem0[es:bx:word16] = v10
	SZO = cond(v10)
	branch Test(GE,SO) l04C4_742F
	// succ:  l04C4_7416 l04C4_742F
l04C4_7416:
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v14 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v14
	SZO = cond(v14)
	dl = cl
	es = ax
	Mem0[es:si:byte] = dl
	al = dl
	ah = 0x00
	goto l04C4_743C
	// succ:  l04C4_743C
l04C4_742F:
l04C4_743C:
fn04C4_7407_exit:


// fn04C4_745C
// Return size: 2
void fn04C4_745C()
fn04C4_745C_entry:
	// succ:  l04C4_745C
l04C4_745C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn04C4_73DE (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn04C4_73DE (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn04C4_745C_exit
fn04C4_745C_exit:


// fn0800_4311
// Return size: 2
void fn0800_4311()
fn0800_4311_entry:
	// succ:  l0800_4311
l0800_4311:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_9F89 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_433C
	// succ:  l0800_432D l0800_433C
l0800_432D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x0A6C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_433C
l0800_433C:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_4311_exit
fn0800_4311_exit:


// fn0800_4346
// Return size: 2
void fn0800_4346()
fn0800_4346_entry:
	// succ:  l0800_4346
l0800_4346:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_9E75 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_4346_exit
fn0800_4346_exit:


// fn04C4_83F6
// Return size: 0
void fn04C4_83F6()
fn04C4_83F6_entry:
	// succ:  l04C4_83F6
l04C4_83F6:
	sp = fp
	ax = __inw(0x29)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29E3:word16]
	call fn04C4_721D (retsize: 2;)
	// succ:  l04C4_83FC_thunk_fn04C4_83FF
l04C4_83FC_thunk_fn04C4_83FF:
	call fn04C4_83FF (retsize: 0;)
	return
	// succ:  fn04C4_83F6_exit
fn04C4_83F6_exit:


// fn04C4_83FE
// Return size: 0
void fn04C4_83FE()
fn04C4_83FE_entry:
	// succ:  l04C4_83FE
l04C4_83FE:
	sp = fp
	__outb(dx, al)
	goto l04C4_83FF
	// succ:  l04C4_83FF
l04C4_8422:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29E5:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29E3:word16]
	call fn04C4_721D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - 0x0001
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0008:word16] = dx
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29E1:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29DF:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn04C4_745C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	cl = 0x02
	call fn0800_8C69 (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29E1:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29DF:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29E5:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29E3:word16]
	call fn04C4_6ECA (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	// succ:  l04C4_8471
l04C4_8471:
	sp = fp
fn04C4_83FE_exit:


// fn04C4_83FF
// Return size: 0
void fn04C4_83FF()
fn04C4_83FF_entry:
	// succ:  l04C4_83FF
l04C4_83FF:
	sp = fp
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29E1:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x29DF:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn04C4_745C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax | Mem0[ss:bp - 0x0004:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l04C4_8420_thunk_fn04C4_8471
	// succ:  l04C4_8420_thunk_fn04C4_8422 l04C4_8420_thunk_fn04C4_8471
l04C4_8420_thunk_fn04C4_8422:
	call fn04C4_8422 (retsize: 0;)
	return
	// succ:  fn04C4_83FF_exit
l04C4_8420_thunk_fn04C4_8471:
	call fn04C4_8471 (retsize: 0;)
	return
	// succ:  fn04C4_83FF_exit
fn04C4_83FF_exit:


// fn04C4_8422
// Return size: 0
void fn04C4_8422()
fn04C4_8422_entry:
	goto l04C4_8422
	// succ:  l04C4_8422
fn04C4_8422_exit:


// fn04C4_8471
// Return size: 0
void fn04C4_8471()
fn04C4_8471_entry:
	goto l04C4_8471
	// succ:  l04C4_8471
fn04C4_8471_exit:


// fn0800_867A
// Return size: 4
void fn0800_867A()
fn0800_867A_entry:
	// succ:  l0800_867A
l0800_867A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	D = false
	si = Mem0[ss:bp + 0x0006:word16]
	ds = Mem0[ss:bp + 0x0008:selector]
	di = Mem0[ss:bp + 0x000A:word16]
	es = Mem0[ss:bp + 0x000C:selector]
	si = si + 0x0004
	SCZO = cond(si)
	call fn0800_87EF (retsize: 2;)
	sp = sp + 0xFFFE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	si = si + 0x000A
	SCZO = cond(si)
	C = true
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	al = al + al
	SCZO = cond(al)
	goto l0800_8745
	// succ:  l0800_8745
l0800_86A1:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_86AD
	// succ:  l0800_86AD
l0800_86A7:
	cl = 0x04
	// succ:  l0800_86A9
l0800_86A9:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86A1
	// succ:  l0800_86AD l0800_86A1
l0800_86AD:
	bh = bh + bh + C
	SCZO = cond(bh)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_86A9
	// succ:  l0800_86B1 l0800_86A9
l0800_86B1:
	cl = 0x03
	cl = cl + bh
	SCZO = cond(cl)
	cl = cl + cl
	SCZO = cond(cl)
	// succ:  l0800_86B7
l0800_86B7:
	branch cx == 0x0000 l0800_86B9
	// succ:  l0800_86B7_1 l0800_86B9
l0800_86B7_1:
	v22 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v22
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_86B7
	// succ:  l0800_86B7
l0800_86B9:
	goto l0800_8745
	// succ:  l0800_8745
l0800_86BC:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_86EA
	// succ:  l0800_86EA
l0800_86C2:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_86F0
	// succ:  l0800_86F0
l0800_86C8:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_86F9
	// succ:  l0800_86F9
l0800_86CE:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8705
	// succ:  l0800_8705
l0800_86D4:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_870E
	// succ:  l0800_870E
l0800_86DA:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8714
	// succ:  l0800_8714
l0800_86E0:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8726
	// succ:  l0800_8726
l0800_86E6:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86BC
	// succ:  l0800_86EA l0800_86BC
l0800_86EA:
	cl = cl + cl + C
	SCZO = cond(cl)
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86C2
	// succ:  l0800_86F0 l0800_86C2
l0800_86F0:
	branch Test(UGE,C) l0800_8701
	// succ:  l0800_86F2 l0800_8701
l0800_86F2:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86C8
	// succ:  l0800_86F9 l0800_86C8
l0800_86F9:
	cx = cx - 0x0001
	SZO = cond(cx)
	cl = cl + cl + C
	SCZO = cond(cl)
	SCZO = cond(cl - 0x09)
	branch Test(EQ,Z) l0800_86A7
	// succ:  l0800_8701 l0800_86A7
l0800_8701:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86CE
	// succ:  l0800_8705 l0800_86CE
l0800_8705:
	branch Test(UGE,C) l0800_8728
	// succ:  l0800_8707 l0800_8728
l0800_8707:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86D4
	// succ:  l0800_870E l0800_86D4
l0800_870E:
	bh = bh + bh + C
	SCZO = cond(bh)
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86DA
	// succ:  l0800_8714 l0800_86DA
l0800_8714:
	branch Test(ULT,C) l0800_8784
	// succ:  l0800_8716 l0800_8784
l0800_8716:
	bh = bh | bh
	SZO = cond(bh)
	C = false
	branch Test(NE,Z) l0800_8728
	// succ:  l0800_871D l0800_8728
l0800_871D:
	bh = bh + 0x01
	SZO = cond(bh)
	// succ:  l0800_8722
l0800_8722:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86E0
	// succ:  l0800_8726 l0800_86E0
l0800_8726:
	bh = bh + bh + C
	SCZO = cond(bh)
	// succ:  l0800_8728
l0800_8728:
	bl = Mem0[ds:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	bp = si
	si = di
	si = si - 0x0001
	SZO = cond(si)
	si = si - bx
	SCZO = cond(si)
	__cli()
	// succ:  l0800_8733
l0800_8733:
	branch cx == 0x0000 l0800_8736
	// succ:  l0800_8733_1 l0800_8736
l0800_8733_1:
	v24 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v24
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_8733
	// succ:  l0800_8733
l0800_8736:
	__sti()
	si = bp
	goto l0800_8745
	// succ:  l0800_8745
l0800_873C:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	branch Test(ULT,C) l0800_8753
	// succ:  l0800_8741 l0800_8753
l0800_8741:
	// succ:  l0800_8744
l0800_8744:
	v25 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v25
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l0800_8745
l0800_8745:
	al = al + al
	SCZO = cond(al)
	branch Test(ULT,C) l0800_8751
	// succ:  l0800_8749 l0800_8751
l0800_8749:
	v15 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v15
	si = si + 0x0001
	di = di + 0x0001
	al = al + al
	SCZO = cond(al)
	branch Test(UGE,C) l0800_8744
	// succ:  l0800_8751 l0800_8744
l0800_8751:
	branch Test(EQ,Z) l0800_873C
	// succ:  l0800_8753 l0800_873C
l0800_8753:
	cx = 0x0002
	bh = bh - bh
	SCZO = cond(bh)
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_879B
	// succ:  l0800_875C l0800_879B
l0800_875C:
	// succ:  l0800_875F
l0800_875F:
	branch Test(UGE,C) l0800_86E6
	// succ:  l0800_8761 l0800_86E6
l0800_8761:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_87A0
	// succ:  l0800_8765 l0800_87A0
l0800_8765:
	// succ:  l0800_8768
l0800_8768:
	branch Test(UGE,C) l0800_8728
	// succ:  l0800_876A l0800_8728
l0800_876A:
	cx = cx + 0x0001
	SZO = cond(cx)
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_87A5
	// succ:  l0800_876F l0800_87A5
l0800_876F:
	// succ:  l0800_8772
l0800_8772:
	branch Test(UGE,C) l0800_8701
	// succ:  l0800_8774 l0800_8701
l0800_8774:
	cl = Mem0[ds:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	cl = cl | cl
	SZO = cond(cl)
	C = false
	branch Test(EQ,Z) l0800_87B4
	// succ:  l0800_877B l0800_87B4
l0800_877B:
	cx = cx + 0x0008
	SCZO = cond(cx)
	goto l0800_8701
	// succ:  l0800_8701
l0800_8784:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_87AA
	// succ:  l0800_8788 l0800_87AA
l0800_8788:
	// succ:  l0800_878B
l0800_878B:
	bh = bh + bh + C
	SCZO = cond(bh)
	bh = bh | 0x04
	SZO = cond(bh)
	C = false
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_87AF
	// succ:  l0800_8794 l0800_87AF
l0800_8794:
	// succ:  l0800_8797
l0800_8797:
	branch Test(ULT,C) l0800_8728
	// succ:  l0800_8799 l0800_8728
l0800_8799:
	goto l0800_8722
	// succ:  l0800_8722
l0800_879B:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_875F
	// succ:  l0800_875F
l0800_87A0:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8768
	// succ:  l0800_8768
l0800_87A5:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8772
	// succ:  l0800_8772
l0800_87AA:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_878B
	// succ:  l0800_878B
l0800_87AF:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8797
	// succ:  l0800_8797
l0800_87B4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = di
	di = di & 0x000F
	SZO = cond(di)
	C = false
	di = di + 0x8000
	SCZO = cond(di)
	cl = 0x04
	bx = bx >>u cl
	SCZO = cond(bx)
	ax = es
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax - 0x0800
	SCZO = cond(ax)
	es = ax
	bx = si
	si = si & 0x000F
	SZO = cond(si)
	C = false
	bx = bx >>u cl
	SCZO = cond(bx)
	ax = ds
	ax = ax + bx
	SCZO = cond(ax)
	ds = ax
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	al = al + al
	SCZO = cond(al)
	branch Test(NE,Z) l0800_87E3
	// succ:  l0800_87DD l0800_87E3
l0800_87DD:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	// succ:  l0800_87E3
l0800_87E3:
	branch Test(UGE,C) l0800_87E8
	// succ:  l0800_87E5 l0800_87E8
l0800_87E5:
	goto l0800_8745
	// succ:  l0800_8745
l0800_87E8:
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_867A_exit
fn0800_867A_exit:


// fn0800_87EF
// Return size: 2
void fn0800_87EF()
fn0800_87EF_entry:
	// succ:  l0800_87EF
l0800_87EF:
	sp = fp
	call fn0800_87F4 (retsize: 2;)
	bx = ax
	// succ:  l0800_87F2_thunk_fn0800_87F4
l0800_87F2_thunk_fn0800_87F4:
	call fn0800_87F4 (retsize: 2;)
	return
	// succ:  fn0800_87EF_exit
fn0800_87EF_exit:


// fn0800_87F4
// Return size: 2
void fn0800_87F4()
fn0800_87F4_entry:
	// succ:  l0800_87F4
l0800_87F4:
	sp = fp
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	v6 = al
	al = ah
	ah = v6
	return
	// succ:  fn0800_87F4_exit
fn0800_87F4_exit:


// fn0800_8B0D
// Return size: 2
void fn0800_8B0D()
fn0800_8B0D_entry:
	// succ:  l0800_8B0D
l0800_8B0D:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_8B36
	// succ:  l0800_8B18 l0800_8B36
l0800_8B18:
	goto l0800_8B28
	// succ:  l0800_8B28
l0800_8B1A:
	v13 = Mem0[ds:0x224E:word16] - 0x0001
	Mem0[ds:0x224E:word16] = v13
	SZO = cond(v13)
	bx = Mem0[ds:0x224E:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	call SEQ(cs, Mem0[ds:bx + 0x4E96:word16]) (retsize: 2;)
	// succ:  l0800_8B28
l0800_8B28:
	SCZO = cond(Mem0[ds:0x224E:word16] - 0x0000)
	branch Test(NE,Z) l0800_8B1A
	// succ:  l0800_8B2F l0800_8B1A
l0800_8B2F:
	call fn0800_0150 (retsize: 2;)
	call SEQ(cs, Mem0[ds:0x2352:word16]) (retsize: 2;)
	// succ:  l0800_8B36
l0800_8B36:
	call fn0800_01B9 (retsize: 2;)
	call fn0800_0163 (retsize: 2;)
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0800_8B55
	// succ:  l0800_8B42 l0800_8B55
l0800_8B42:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_8B4E
	// succ:  l0800_8B46 l0800_8B4E
l0800_8B46:
	call SEQ(cs, Mem0[ds:0x2354:word16]) (retsize: 2;)
	call SEQ(cs, Mem0[ds:0x2356:word16]) (retsize: 2;)
	// succ:  l0800_8B4E
l0800_8B4E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_0164 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_8B55
l0800_8B55:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8B0D_exit
fn0800_8B0D_exit:


// fn0800_8B5A
// Return size: 2
void fn0800_8B5A()
fn0800_8B5A_entry:
	// succ:  l0800_8B5A
l0800_8B5A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8B0D (retsize: 2;)
	sp = sp + 0x0006
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8B5A_exit
fn0800_8B5A_exit:


// fn0800_8B95
// Return size: 2
void fn0800_8B95()
fn0800_8B95_entry:
	// succ:  l0800_8B95
l0800_8B95:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x2A
	dl = msdos_get_system_date(out dh, out cx)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = cx
	Mem0[es:bx + 0x0002:word16] = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8B95_exit
fn0800_8B95_exit:


// fn0800_8BA8
// Return size: 2
void fn0800_8BA8()
fn0800_8BA8_entry:
	// succ:  l0800_8BA8
l0800_8BA8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x2C
	cl = msdos_get_system_time(out ch, out dh, out dl)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = cx
	Mem0[es:bx + 0x0002:word16] = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8BA8_exit
fn0800_8BA8_exit:


// fn0800_8BBB
// Return size: 0
void fn0800_8BBB()
fn0800_8BBB_entry:
	// succ:  l0800_8BBB
l0800_8BBB:
	sp = fp
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l0800_8BC0_thunk_fn0800_8BD8
l0800_8BC0_thunk_fn0800_8BD8:
	call fn0800_8BD8 (retsize: 0;)
	return
	// succ:  fn0800_8BBB_exit
fn0800_8BBB_exit:


// fn0800_8BC2
// Return size: 4
void fn0800_8BC2()
fn0800_8BC2_entry:
	// succ:  l0800_8BC2
l0800_8BC2:
	sp = fp
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	// succ:  l0800_8BC5_thunk_fn0800_8BD8
l0800_8BC5_thunk_fn0800_8BD8:
	call fn0800_8BD8 (retsize: 0;)
	return
	// succ:  fn0800_8BC2_exit
fn0800_8BC2_exit:


// fn0800_8BCA
// Return size: 0
void fn0800_8BCA()
fn0800_8BCA_entry:
	// succ:  l0800_8BCA
l0800_8BCA:
	sp = fp
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0002
	// succ:  l0800_8BD0_thunk_fn0800_8BD8
l0800_8BD0_thunk_fn0800_8BD8:
	call fn0800_8BD8 (retsize: 0;)
	return
	// succ:  fn0800_8BCA_exit
fn0800_8BCA_exit:


// fn0800_8BD8
// Return size: 0
void fn0800_8BD8()
fn0800_8BD8_entry:
	// succ:  l0800_8BD8
l0800_8BD8:
	sp = v3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bp = sp
	di = cx
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x000C:word16]
	bx = Mem0[ss:bp + 0x000E:word16]
	cx = Mem0[ss:bp + 0x0010:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l0800_8BF7
	// succ:  l0800_8BEF l0800_8BF7
l0800_8BEF:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_8C5C
	// succ:  l0800_8BF3 l0800_8C5C
l0800_8BF3:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0800_8C5C
	// succ:  l0800_8BF7 l0800_8C5C
l0800_8BF7:
	SZO = cond(di & 0x0001)
	C = false
	branch Test(NE,Z) l0800_8C19
	// succ:  l0800_8BFD l0800_8C19
l0800_8BFD:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NS,S) l0800_8C0B
	// succ:  l0800_8C01 l0800_8C0B
l0800_8C01:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	di = di | 0x000C
	SZO = cond(di)
	C = false
	// succ:  l0800_8C0B
l0800_8C0B:
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NS,S) l0800_8C19
	// succ:  l0800_8C0F l0800_8C19
l0800_8C0F:
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	bx = -bx
	SCZO = cond(bx)
	C = bx == 0x0000
	cx = cx - 0x00 - C
	SCZO = cond(cx)
	di = di ^ 0x0004
	SZO = cond(di)
	C = false
	// succ:  l0800_8C19
l0800_8C19:
	bp = cx
	cx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	si = si ^ si
	SZO = cond(si)
	C = false
	// succ:  l0800_8C23
l0800_8C23:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v17 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v17
	v18 = (si & 0x0001 << 0x10 - 0x01) != 0x0000
	si = __rcl(si, 0x01, C)
	C = v18
	v19 = (di & 0x0001 << 0x10 - 0x01) != 0x0000
	di = __rcl(di, 0x01, C)
	C = v19
	SCZO = cond(di - bp)
	branch Test(ULT,C) l0800_8C3A
	// succ:  l0800_8C2F l0800_8C3A
l0800_8C2F:
	branch Test(UGT,CZ) l0800_8C35
	// succ:  l0800_8C31 l0800_8C35
l0800_8C31:
	SCZO = cond(si - bx)
	branch Test(ULT,C) l0800_8C3A
	// succ:  l0800_8C35 l0800_8C3A
l0800_8C35:
	si = si - bx
	SCZO = cond(si)
	di = di - bp - C
	SCZO = cond(di)
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l0800_8C3A
l0800_8C3A:
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_8C23
	// succ:  l0800_8C3C l0800_8C23
l0800_8C3C:
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SZO = cond(bx & 0x0002)
	C = false
	branch Test(EQ,Z) l0800_8C49
	// succ:  l0800_8C43 l0800_8C49
l0800_8C43:
	ax = si
	dx = di
	bx = bx >>u 0x0001
	SCZO = cond(bx)
	// succ:  l0800_8C49
l0800_8C49:
	SZO = cond(bx & 0x0004)
	C = false
	branch Test(EQ,Z) l0800_8C56
	// succ:  l0800_8C4F l0800_8C56
l0800_8C4F:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l0800_8C56
l0800_8C56:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8BD8_exit
l0800_8C5C:
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l0800_8C65
	// succ:  l0800_8C64 l0800_8C65
l0800_8C64:
	v22 = ax
	ax = dx
	dx = v22
	// succ:  l0800_8C65
l0800_8C65:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	goto l0800_8C56
	// succ:  l0800_8C56
fn0800_8BD8_exit:


// fn0800_8C69
// Return size: 4
void fn0800_8C69()
fn0800_8C69_entry:
	// succ:  l0800_8C69
l0800_8C69:
	sp = fp
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	SCZO = cond(cl - 0x10)
	branch Test(UGE,C) l0800_8C81
	// succ:  l0800_8C71 l0800_8C81
l0800_8C71:
	bx = ax
	ax = ax << cl
	SCZO = cond(ax)
	dx = dx << cl
	SCZO = cond(dx)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl + 0x10
	SCZO = cond(cl)
	bx = bx >>u cl
	SCZO = cond(bx)
	dx = dx | bx
	SZO = cond(dx)
	C = false
	return
	// succ:  fn0800_8C69_exit
l0800_8C81:
	cl = cl - 0x10
	SCZO = cond(cl)
	v12 = ax
	ax = dx
	dx = v12
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = dx << cl
	SCZO = cond(dx)
	return
	// succ:  fn0800_8C69_exit
fn0800_8C69_exit:


// fn0800_8CCB
// Return size: 4
void fn0800_8CCB()
fn0800_8CCB_entry:
	// succ:  l0800_8CCB
l0800_8CCB:
	sp = fp
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0800_8CDE
	// succ:  l0800_8CD2 l0800_8CDE
l0800_8CD2:
	bx = ~bx
	cx = ~cx
	bx = bx + 0x0001
	SCZO = cond(bx)
	cx = cx + 0x00 + C
	SCZO = cond(cx)
	goto l0800_8D0D
	// succ:  l0800_8D0D
l0800_8CDE:
	ax = ax + bx
	SCZO = cond(ax)
	branch Test(UGE,C) l0800_8CE6
	// succ:  l0800_8CE2 l0800_8CE6
l0800_8CE2:
	dx = dx + 0x1000
	SCZO = cond(dx)
	// succ:  l0800_8CE6
l0800_8CE6:
	ch = cl
	cl = 0x04
	ch = ch << cl
	SCZO = cond(ch)
	dh = dh + ch
	SCZO = cond(dh)
	ch = al
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	al = ch
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_8CCB_exit
l0800_8D0D:
	ax = ax - bx
	SCZO = cond(ax)
	branch Test(UGE,C) l0800_8D15
	// succ:  l0800_8D11 l0800_8D15
l0800_8D11:
	dx = dx - 0x1000
	SCZO = cond(dx)
	// succ:  l0800_8D15
l0800_8D15:
	bh = cl
	cl = 0x04
	bh = bh << cl
	SCZO = cond(bh)
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	dx = dx - bx
	SCZO = cond(dx)
	ch = al
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	al = ch
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_8CCB_exit
fn0800_8CCB_exit:


// fn0800_8D2B
// Return size: 2
void fn0800_8D2B()
fn0800_8D2B_entry:
	// succ:  l0800_8D2B
l0800_8D2B:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LT,SO) l0800_8D4B
	// succ:  l0800_8D36 l0800_8D4B
l0800_8D36:
	SCZO = cond(si - 0x0058)
	branch Test(LE,SZO) l0800_8D3E
	// succ:  l0800_8D3B l0800_8D3E
l0800_8D3B:
	si = 0x0057
	// succ:  l0800_8D3E
l0800_8D3E:
	Mem0[ds:0x2516:word16] = si
	al = Mem0[ds:si + 0x2518:byte]
	ax = (int16) al
	si = ax
	goto l0800_8D58
	// succ:  l0800_8D58
l0800_8D4B:
	si = -si
	SCZO = cond(si)
	C = si == 0x0000
	SCZO = cond(si - 0x0023)
	branch Test(GT,SZO) l0800_8D3B
	// succ:  l0800_8D52 l0800_8D3B
l0800_8D52:
	Mem0[ds:0x2516:word16] = 0xFFFF
	// succ:  l0800_8D58
l0800_8D58:
	Mem0[ds:0x007F:word16] = si
	ax = 0xFFFF
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8D2B_exit
fn0800_8D2B_exit:


// fn0800_8D87
// Return size: 2
void fn0800_8D87()
fn0800_8D87_entry:
	// succ:  l0800_8D87
l0800_8D87:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0022
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es_di = Mem0[ss:bp + 0x000A:segptr32]
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx - 0x0024)
	branch Test(UGT,CZ) l0800_8DF7
	// succ:  l0800_8D9B l0800_8DF7
l0800_8D9B:
	SCZO = cond(bl - 0x02)
	branch Test(ULT,C) l0800_8DF7
	// succ:  l0800_8DA0 l0800_8DF7
l0800_8DA0:
	ax = Mem0[ss:bp + 0x000E:word16]
	cx = Mem0[ss:bp + 0x0010:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0800_8DBC
	// succ:  l0800_8DAA l0800_8DBC
l0800_8DAA:
	SCZO = cond(Mem0[ss:bp + 0x0006:byte] - 0x00)
	branch Test(EQ,Z) l0800_8DBC
	// succ:  l0800_8DB0 l0800_8DBC
l0800_8DB0:
	Mem0[es:di:byte] = 0x2D
	di = di + 0x0001
	SZO = cond(di)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	cx = cx - 0x00 - C
	SCZO = cond(cx)
	// succ:  l0800_8DBC
l0800_8DBC:
	si = bp - 0x0022
	branch cx == 0x0000 l0800_8DD1
	// succ:  l0800_8DC1 l0800_8DD1
l0800_8DC1:
	v21 = ax
	ax = cx
	cx = v21
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	v23 = ax
	ax = cx
	cx = v23
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	Mem0[ss:si:byte] = dl
	si = si + 0x0001
	SZO = cond(si)
	branch cx == 0x0000 l0800_8DD9
	// succ:  l0800_8DCF l0800_8DD9
l0800_8DCF:
	goto l0800_8DC1
	// succ:  l0800_8DC1
l0800_8DD1:
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	Mem0[ss:si:byte] = dl
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_8DD9
l0800_8DD9:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_8DD1
	// succ:  l0800_8DDD l0800_8DD1
l0800_8DDD:
	cx = bp - 0x0022
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	cx = cx + si
	SCZO = cond(cx)
	D = false
	// succ:  l0800_8DE5
l0800_8DE5:
	si = si - 0x0001
	SZO = cond(si)
	al = Mem0[ss:si:byte]
	al = al - 0x0A
	SCZO = cond(al)
	branch Test(UGE,C) l0800_8DF1
	// succ:  l0800_8DED l0800_8DF1
l0800_8DED:
	al = al + 0x3A
	SCZO = cond(al)
	goto l0800_8DF4
	// succ:  l0800_8DF4
l0800_8DF1:
	al = al + Mem0[ss:bp + 0x0004:byte]
	SCZO = cond(al)
	// succ:  l0800_8DF4
l0800_8DF4:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_8DE5
	// succ:  l0800_8DF7 l0800_8DE5
l0800_8DF7:
	al = 0x00
	Mem0[es:di:byte] = al
	di = di + 0x0001
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	al = 0x00
	Mem0[es:di:byte] = al
	di = di + 0x0001
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8D87_exit fn0800_8D87_exit
fn0800_8D87_exit:


// fn0800_8E09
// Return size: 2
void fn0800_8E09()
fn0800_8E09_entry:
	// succ:  l0800_8E09
l0800_8E09:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = 0x61
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8D87 (retsize: 2;)
	sp = sp + 0x000E
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8E09_exit
fn0800_8E09_exit:


// fn0800_8E29
// Return size: 2
void fn0800_8E29()
fn0800_8E29_entry:
	// succ:  l0800_8E29
l0800_8E29:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v8 = Mem0[ds:bx + 0x24EA:word16] & 0xFDFF
	Mem0[ds:bx + 0x24EA:word16] = v8
	SZO = cond(Mem0[ds:bx + 0x24EA:word16])
	C = false
	ah = 0x42
	al = Mem0[ss:bp + 0x000A:byte]
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	branch Test(ULT,C) l0800_8E4B
	// succ:  l0800_8E49 l0800_8E4B
l0800_8E49:
	goto l0800_8E50
	// succ:  l0800_8E50
l0800_8E4B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	dx_ax = (word32) ax
	// succ:  l0800_8E50
l0800_8E50:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8E29_exit
fn0800_8E29_exit:


// fn0800_8E6A
// Return size: 2
void fn0800_8E6A()
fn0800_8E6A_entry:
	// succ:  l0800_8E6A
l0800_8E6A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax | Mem0[ss:bp + 0x000C:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_8E7D
	// succ:  l0800_8E75 l0800_8E7D
l0800_8E75:
	Mem0[ss:bp + 0x000C:word16] = ds
	Mem0[ss:bp + 0x000A:word16] = 0x4ED6
	// succ:  l0800_8E7D
l0800_8E7D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax | Mem0[ss:bp + 0x0008:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_8E8F
	// succ:  l0800_8E88 l0800_8E8F
l0800_8E88:
	dx = ds
	ax = 0x2572
	goto l0800_8E95
	// succ:  l0800_8E95
l0800_8E8F:
	dx = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0800_8E95
l0800_8E95:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0800_9CE6 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8E09 (retsize: 2;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2576
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0800_BF5F (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8E6A_exit
fn0800_8E6A_exit:


// fn0800_8F18
// Return size: 2
void fn0800_8F18()
fn0800_8F18_entry:
	// succ:  l0800_8F18
l0800_8F18:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	v5 = ax
	ax = si
	si = v5
	v7 = ax
	ax = dx
	dx = v7
	SZO = cond(ax & ax)
	C = false
	branch Test(EQ,Z) l0800_8F21
	// succ:  l0800_8F1F l0800_8F21
l0800_8F1F:
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	// succ:  l0800_8F21
l0800_8F21:
	branch cx == 0x0000 l0800_8F28
	// succ:  l0800_8F23 l0800_8F28
l0800_8F23:
	v16 = ax
	ax = cx
	cx = v16
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	ax = ax + cx
	SCZO = cond(ax)
	// succ:  l0800_8F28
l0800_8F28:
	v17 = ax
	ax = si
	si = v17
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	dx = dx + si
	SCZO = cond(dx)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8F18_exit
fn0800_8F18_exit:


// fn0800_8F2F
// Return size: 2
void fn0800_8F2F()
fn0800_8F2F_entry:
	// succ:  l0800_8F2F
l0800_8F2F:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ch = al
	cl = 0x04
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	al = ch
	ah = bl
	bx = bx >>u cl
	SCZO = cond(bx)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = cx + bx
	SCZO = cond(cx)
	bl = ah
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	bx = bx & 0x000F
	SZO = cond(bx)
	C = false
	SCZO = cond(dx - cx)
	branch Test(NE,Z) l0800_8F4F
	// succ:  l0800_8F4D l0800_8F4F
l0800_8F4D:
	SCZO = cond(ax - bx)
	// succ:  l0800_8F4F
l0800_8F4F:
	return
	// succ:  fn0800_8F2F_exit
fn0800_8F2F_exit:


// fn0800_8F7F
// Return size: 2
void fn0800_8F7F()
fn0800_8F7F_entry:
	// succ:  l0800_8F7F
l0800_8F7F:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ah = 0x41
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	C = msdos_delete_file(ds, dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	branch Test(ULT,C) l0800_8F91
	// succ:  l0800_8F8D l0800_8F91
l0800_8F8D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_8F95
	// succ:  l0800_8F95
l0800_8F91:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_8F95
l0800_8F95:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_8F7F_exit
fn0800_8F7F_exit:


// fn027F_E7BB
// Return size: 2
void fn027F_E7BB()
fn027F_E7BB_entry:
	// succ:  l027F_E7BB
l027F_E7BB:
	sp = fp
	es_di = Mem0[ss:bp + 0x0010:segptr32]
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l027F_E7CC
	// succ:  l027F_E7C4 l027F_E7CC
l027F_E7C4:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	v12 = Mem0[ss:bp + 0x0010:word16] + 0x0004
	Mem0[ss:bp + 0x0010:word16] = v12
	SCZO = cond(v12)
	return
	// succ:  fn027F_E7BB_exit
l027F_E7CC:
fn027F_E7BB_exit:


// fn08C4_83FB
// Return size: 0
void fn08C4_83FB()
fn08C4_83FB_entry:
	// succ:  l08C4_83FB
l08C4_83FB:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v6 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v6
	SZO = cond(v6)
	// succ:  l08C4_877E
l08C4_877E:
fn08C4_83FB_exit:


// fn027F_E902
// Return size: 0
void fn027F_E902()
fn027F_E902_entry:
	// succ:  l027F_E902
l027F_E902:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn027F_ECC0 (retsize: 2;)
	sp = sp + 0x0014
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(LE,SZO) l027F_E92F
	// succ:  l027F_E917 l027F_E92F
l027F_E917:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l027F_E92C
	// succ:  l027F_E91D l027F_E92C
l027F_E91D:
	v9 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v9
	SZO = cond(v9)
	call fn027F_E7BB (retsize: 2;)
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l027F_E92C
	// succ:  l027F_E92A l027F_E92C
l027F_E92A:
	v13 = ax
	ax = dx
	dx = v13
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	// succ:  l027F_E92C
l027F_E92C:
l027F_E92F:
fn027F_E902_exit:


// fn027F_ECC0
// Return size: 0
void fn027F_ECC0()
fn027F_ECC0_entry:
	// succ:  l027F_ECC0
l027F_ECC0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0001:byte] = 0x00
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	// succ:  l027F_ECD6
l027F_ECD6:
	v8 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v8
	SZO = cond(v8)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call SEQ(cs, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l027F_ED59
	// succ:  l027F_ECE8 l027F_ED59
l027F_ECE8:
	ax = (int16) al
	v16 = ax
	ax = bx
	bx = v16
	SZO = cond(bl & 0x80)
	C = false
	branch Test(NE,Z) l027F_ECF7
	// succ:  l027F_ECEF l027F_ECF7
l027F_ECEF:
	di = 0x2251
	SZO = cond(Mem0[ds:bx + di:byte] & 0x01)
	C = false
	branch Test(NE,Z) l027F_ECD6
	// succ:  l027F_ECF7 l027F_ECD6
l027F_ECF7:
	v21 = ax
	ax = bx
	bx = v21
	v22 = Mem0[ss:bp + 0x000E:word16] - 0x0001
	Mem0[ss:bp + 0x000E:word16] = v22
	SZO = cond(v22)
	branch Test(LT,SO) l027F_ED60
	// succ:  l027F_ECFD l027F_ED60
l027F_ECFD:
	SCZO = cond(al - 0x2B)
	branch Test(EQ,Z) l027F_ED08
	// succ:  l027F_ED01 l027F_ED08
l027F_ED01:
	SCZO = cond(al - 0x2D)
	branch Test(NE,Z) l027F_ED1F
	// succ:  l027F_ED05 l027F_ED1F
l027F_ED05:
	v23 = Mem0[ss:bp - 0x0001:byte] + 0x01
	Mem0[ss:bp - 0x0001:byte] = v23
	SZO = cond(v23)
	// succ:  l027F_ED08
l027F_ED08:
l027F_ED1F:
l027F_ED59:
l027F_ED60:
fn027F_ECC0_exit:


// fn0800_9764
// Return size: 2
void fn0800_9764()
fn0800_9764_entry:
	// succ:  l0800_9764
l0800_9764:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8B95 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8BA8 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_C04F (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_97AC
	// succ:  l0800_979C l0800_97AC
l0800_979C:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x000C:word16]
	Mem0[es:bx + 0x0002:word16] = ax
	Mem0[es:bx:word16] = dx
	// succ:  l0800_97AC
l0800_97AC:
	dx = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ss:bp - 0x000C:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_9764_exit
fn0800_9764_exit:


// fn0800_97CC
// Return size: 2
void fn0800_97CC()
fn0800_97CC_entry:
	// succ:  l0800_97CC
l0800_97CC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_97DC
	// succ:  l0800_97D7 l0800_97DC
l0800_97D7:
	ax = 0xFFFF
	goto l0800_97F6
	// succ:  l0800_97F6
l0800_97DC:
	al = dl
	ah = 0x00
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x2251:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l0800_97F2
	// succ:  l0800_97E9 l0800_97F2
l0800_97E9:
	al = dl
	ah = 0x00
	ax = ax + 0xFFE0
	SCZO = cond(ax)
	goto l0800_97F6
	// succ:  l0800_97F6
l0800_97F2:
	al = dl
	ah = 0x00
	// succ:  l0800_97F6
l0800_97F6:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_97CC_exit
fn0800_97CC_exit:


// fn0800_97F8
// Return size: 2
void fn0800_97F8()
fn0800_97F8_entry:
	// succ:  l0800_97F8
l0800_97F8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ah = 0x41
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	C = msdos_delete_file(ds, dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	branch Test(ULT,C) l0800_980A
	// succ:  l0800_9806 l0800_980A
l0800_9806:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_980E
	// succ:  l0800_980E
l0800_980A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_980E
l0800_980E:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_97F8_exit
fn0800_97F8_exit:


// fn0800_9828
// Return size: 2
void fn0800_9828()
fn0800_9828_entry:
	// succ:  l0800_9828
l0800_9828:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0096
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0012:word16] = 0x0000
	Mem0[ss:bp - 0x0014:word16] = 0x0050
	Mem0[ss:bp - 0x0016:word16] = 0x0000
	// succ:  l0800_988C
l0800_988C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	D = false
	di = bp - 0x0096
	Mem0[ss:bp - 0x0004:word16] = di
	di = Mem0[ss:bp - 0x0004:word16]
	es_si = Mem0[ss:bp + 0x0006:segptr32]
	// succ:  l0800_989B
l0800_989B:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_98B3
	// succ:  l0800_98A1 l0800_98B3
l0800_98A1:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_98B6
	// succ:  l0800_98A5 l0800_98B6
l0800_98A5:
	Mem0[ss:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v16 = Mem0[ss:bp - 0x0014:byte] - 0x01
	Mem0[ss:bp - 0x0014:byte] = v16
	SZO = cond(v16)
	branch Test(GT,SZO) l0800_989B
	// succ:  l0800_98AE l0800_989B
l0800_98AE:
	call fn0800_9858 (retsize: 2;)
	goto l0800_989B
	// succ:  l0800_989B
l0800_98B3:
	goto l0800_9C96
	// succ:  l0800_9C96
l0800_98B6:
	Mem0[ss:bp - 0x0010:word16] = si
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_98A5
	// succ:  l0800_98BF l0800_98A5
l0800_98BF:
	Mem0[ss:bp - 0x0004:word16] = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	Mem0[ss:bp - 0x000E:word16] = cx
	Mem0[ss:bp - 0x0002:word16] = 0x0020
	Mem0[ss:bp - 0x000B:byte] = cl
	Mem0[ss:bp - 0x0008:word16] = 0xFFFF
	Mem0[ss:bp - 0x000A:word16] = 0xFFFF
	goto l0800_98DD
	// succ:  l0800_98DD
l0800_98DB:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	// succ:  l0800_98DD
l0800_98DD:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	dx = ax
	bx = ax
	bl = bl - 0x20
	SCZO = cond(bl)
	SCZO = cond(bl - 0x60)
	branch Test(UGE,C) l0800_98FE
	// succ:  l0800_98EB l0800_98FE
l0800_98EB:
	bl = Mem0[ds:bx + 0x2605:byte]
	SCZO = cond(bx - 0x0017)
	branch Test(ULE,CZ) l0800_98F7
	// succ:  l0800_98F4 l0800_98F7
l0800_98F4:
	goto l0800_9C82
	// succ:  l0800_9C82
l0800_98F7:
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_9917 }
	goto l0800_9917
	// succ:  l0800_9917
l0800_98FE:
	goto l0800_9C82
	// succ:  l0800_9C82
l0800_9917:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_98FE
	// succ:  l0800_991C l0800_98FE
l0800_991C:
	SCZO = cond(Mem0[ss:bp - 0x000B:byte] - 0x2B)
	branch Test(EQ,Z) l0800_9925
	// succ:  l0800_9922 l0800_9925
l0800_9922:
	Mem0[ss:bp - 0x000B:byte] = dl
	// succ:  l0800_9925
l0800_9925:
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_9C82:
	si = Mem0[ss:bp - 0x0010:word16]
	es = Mem0[ss:bp + 0x0008:selector]
	di = Mem0[ss:bp - 0x0004:word16]
	al = 0x25
	// succ:  l0800_9C8D
l0800_9C8D:
	call fn0800_984F (retsize: 2;)
	sp = sp + 0xFFFE
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_9C8D
	// succ:  l0800_9C96 l0800_9C8D
l0800_9C96:
	SCZO = cond(Mem0[ss:bp - 0x0014:byte] - 0x50)
	branch Test(GE,SO) l0800_9C9F
	SCZO = cond(Mem0[ss:bp - 0x0014:byte] - 0x50)
	branch Test(GE,SO) l0800_9C9F
	// succ:  l0800_9C9C l0800_9C9F l0800_9C9C l0800_9C9F
l0800_9C9C:
	call fn0800_9858 (retsize: 2;)
	call fn0800_9858 (retsize: 2;)
	// succ:  l0800_9C9F
l0800_9C9F:
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0x0000)
	branch Test(EQ,Z) l0800_9CAB
	// succ:  l0800_9CA6 l0800_9CAB
l0800_9CA6:
	ax = 0xFFFF
	goto l0800_9CAE
	// succ:  l0800_9CAE
l0800_9CAB:
	ax = Mem0[ss:bp - 0x0012:word16]
	// succ:  l0800_9CAE
l0800_9CAE:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_9828_exit
fn0800_9828_exit:


// fn0800_984F
// Return size: 2
void fn0800_984F()
fn0800_984F_entry:
	// succ:  l0800_984F
l0800_984F:
	sp = fp
	Mem0[ss:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v8 = Mem0[ss:bp - 0x0014:byte] - 0x01
	Mem0[ss:bp - 0x0014:byte] = v8
	SZO = cond(v8)
	branch Test(NE,Z) l0800_988B_in_fn0800_984F
	// succ:  l0800_9856_thunk_fn0800_9858 l0800_988B_in_fn0800_984F
l0800_9856_thunk_fn0800_9858:
	call fn0800_9858 (retsize: 2;)
	return
	// succ:  fn0800_984F_exit
l0800_988B_in_fn0800_984F:
	return
	// succ:  fn0800_984F_exit
fn0800_984F_exit:


// fn0800_9858
// Return size: 2
void fn0800_9858()
fn0800_9858_entry:
	// succ:  l0800_9858
l0800_9858:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	ax = bp - 0x0096
	di = di - ax
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0096
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call SEQ(cs, Mem0[ss:bp + 0x000E:word16]) (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_987B
	// succ:  l0800_9876 l0800_987B
l0800_9876:
	Mem0[ss:bp - 0x0016:word16] = 0x0001
	// succ:  l0800_987B
l0800_987B:
	Mem0[ss:bp - 0x0014:word16] = 0x0050
	v16 = Mem0[ss:bp - 0x0012:word16] + di
	Mem0[ss:bp - 0x0012:word16] = v16
	SCZO = cond(v16)
	di = bp - 0x0096
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_988B
l0800_988B:
	return
	// succ:  fn0800_9858_exit
fn0800_9858_exit:


// fn0800_9CE6
// Return size: 2
void fn0800_9CE6()
fn0800_9CE6_entry:
	// succ:  l0800_9CE6
l0800_9CE6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn0800_BFC7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_B03B (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_9CE6_exit
fn0800_9CE6_exit:


// fn0800_9D41
// Return size: 2
void fn0800_9D41()
fn0800_9D41_entry:
	// succ:  l0800_9D41
l0800_9D41:
	sp = fp
	SCZO = cond(dx - Mem0[0x0800:0x9D35:word16])
	branch Test(EQ,Z) l0800_9D7F
	// succ:  l0800_9D48 l0800_9D7F
l0800_9D48:
	ds = dx
	ds = Mem0[ds:0x0002:selector]
	SCZO = cond(Mem0[ds:0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_9D5C
	// succ:  l0800_9D55 l0800_9D5C
l0800_9D55:
	Mem0[0x0800:0x9D37:word16] = ds
	goto l0800_9D94
	// succ:  l0800_9D94
l0800_9D5C:
	ax = ds
	SCZO = cond(ax - Mem0[0x0800:0x9D35:word16])
	branch Test(EQ,Z) l0800_9D7A
	// succ:  l0800_9D65 l0800_9D7A
l0800_9D65:
	ax = Mem0[ds:0x0008:word16]
	Mem0[0x0800:0x9D37:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_9E15 (retsize: 2;)
	ds = Mem0[0x0800:0x9D3B:selector]
	goto l0800_9D9D
	// succ:  l0800_9D9D
l0800_9D7A:
	dx = Mem0[0x0800:0x9D35:word16]
	// succ:  l0800_9D7F
l0800_9D7F:
	Mem0[0x0800:0x9D35:word16] = 0x0000
	Mem0[0x0800:0x9D37:word16] = 0x0000
	Mem0[0x0800:0x9D39:word16] = 0x0000
	// succ:  l0800_9D94
l0800_9D94:
	ds = Mem0[0x0800:0x9D3B:selector]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0800_9D9D
l0800_9D9D:
	call fn0800_A1D6 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	return
	// succ:  fn0800_9D41_exit
fn0800_9D41_exit:


// fn0800_9DA4
// Return size: 2
void fn0800_9DA4()
fn0800_9DA4_entry:
	// succ:  l0800_9DA4
l0800_9DA4:
	sp = fp
	ds = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ds:0x0002:selector]
	Mem0[ds:0x0002:word16] = 0x0000
	Mem0[ds:0x0008:word16] = es
	SCZO = cond(dx - Mem0[0x0800:0x9D35:word16])
	branch Test(EQ,Z) l0800_9DEA
	// succ:  l0800_9DBC l0800_9DEA
l0800_9DBC:
	SCZO = cond(Mem0[es:0x0002:word16] - 0x0000)
	branch Test(NE,Z) l0800_9DEA
	// succ:  l0800_9DC4 l0800_9DEA
l0800_9DC4:
	ax = Mem0[ds:0x0000:word16]
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v11 = Mem0[es:0x0000:word16] + ax
	Mem0[es:0x0000:word16] = v11
	SCZO = cond(v11)
	cx = es
	dx = dx + ax
	SCZO = cond(dx)
	es = dx
	SCZO = cond(Mem0[es:0x0002:word16] - 0x0000)
	branch Test(NE,Z) l0800_9DE3
	// succ:  l0800_9DDC l0800_9DE3
l0800_9DDC:
	Mem0[es:0x0008:word16] = cx
	goto l0800_9DED
	// succ:  l0800_9DED
l0800_9DE3:
	Mem0[es:0x0002:word16] = cx
	goto l0800_9DED
	// succ:  l0800_9DED
l0800_9DEA:
	call fn0800_9E3E (retsize: 2;)
	// succ:  l0800_9DED
l0800_9DED:
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = es
	ax = ax + Mem0[es:0x0000:word16]
	SCZO = cond(ax)
	ds = ax
	SCZO = cond(Mem0[ds:0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_9DFF
	// succ:  l0800_9DFE l0800_9DFF
l0800_9DFE:
	return
	// succ:  fn0800_9DA4_exit
l0800_9DFF:
	ax = Mem0[ds:0x0000:word16]
	v13 = Mem0[es:0x0000:word16] + ax
	Mem0[es:0x0000:word16] = v13
	SCZO = cond(v13)
	ax = es
	bx = ds
	bx = bx + Mem0[ds:0x0000:word16]
	SCZO = cond(bx)
	es = bx
	Mem0[es:0x0002:word16] = ax
	// succ:  l0800_9E11_thunk_fn0800_9E15
l0800_9E11_thunk_fn0800_9E15:
	call fn0800_9E15 (retsize: 2;)
	return
	// succ:  fn0800_9DA4_exit
fn0800_9DA4_exit:


// fn0800_9E15
// Return size: 2
void fn0800_9E15()
fn0800_9E15_entry:
	// succ:  l0800_9E15
l0800_9E15:
	sp = fp
	bx = ds
	SCZO = cond(bx - Mem0[ds:0x0006:word16])
	branch Test(EQ,Z) l0800_9E36
	// succ:  l0800_9E1D l0800_9E36
l0800_9E1D:
	es = Mem0[ds:0x0006:selector]
	ds = Mem0[ds:0x0004:selector]
	Mem0[ds:0x0006:word16] = es
	Mem0[es:0x0004:word16] = ds
	Mem0[0x0800:0x9D39:word16] = ds
	ds = bx
	return
	// succ:  fn0800_9E15_exit
l0800_9E36:
	Mem0[0x0800:0x9D39:word16] = 0x0000
	return
	// succ:  fn0800_9E15_exit
fn0800_9E15_exit:


// fn0800_9E3E
// Return size: 2
void fn0800_9E3E()
fn0800_9E3E_entry:
	// succ:  l0800_9E3E
l0800_9E3E:
	sp = fp
	ax = Mem0[0x0800:0x9D39:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_9E67
	// succ:  l0800_9E46 l0800_9E67
l0800_9E46:
	bx = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = SCZDOP
	__cli()
	ss = ax
	es = Mem0[ss:0x0006:selector]
	Mem0[ss:0x0006:word16] = ds
	Mem0[ds:0x0004:word16] = ss
	ss = bx
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	Mem0[es:0x0004:word16] = ds
	Mem0[ds:0x0006:word16] = es
	return
	// succ:  fn0800_9E3E_exit
l0800_9E67:
	Mem0[0x0800:0x9D39:word16] = ds
	Mem0[ds:0x0004:word16] = ds
	Mem0[ds:0x0006:word16] = ds
	return
	// succ:  fn0800_9E3E_exit
fn0800_9E3E_exit:


// fn0800_9E75
// Return size: 2
void fn0800_9E75()
fn0800_9E75_entry:
	// succ:  l0800_9E75
l0800_9E75:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[0x0800:0x9D3B:word16] = ds
	dx = Mem0[ss:bp + 0x0006:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_9E95
	// succ:  l0800_9E86 l0800_9E95
l0800_9E86:
	SCZO = cond(dx - Mem0[0x0800:0x9D37:word16])
	branch Test(NE,Z) l0800_9E92
	// succ:  l0800_9E8D l0800_9E92
l0800_9E8D:
	call fn0800_9D41 (retsize: 2;)
	goto l0800_9E95
	// succ:  l0800_9E95
l0800_9E92:
	call fn0800_9DA4 (retsize: 2;)
	// succ:  l0800_9E95
l0800_9E95:
	ds = Mem0[0x0800:0x9D3B:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_9E75_exit
fn0800_9E75_exit:


// fn0800_9E9E
// Return size: 2
void fn0800_9E9E()
fn0800_9E9E_entry:
	// succ:  l0800_9E9E
l0800_9E9E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ds = Mem0[0x0800:0x9D3B:selector]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_9EC7
	// succ:  l0800_9EB3 l0800_9EC7
l0800_9EB3:
	dx = 0x0010
	dx = dx - ax
	SCZO = cond(dx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ds = Mem0[0x0800:0x9D3B:selector]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_9EC7
l0800_9EC7:
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	bl = ah
	cl = 0x04
	bx = bx >>u cl
	SCZO = cond(bx)
	ax = ax << cl
	SCZO = cond(ax)
	ds = Mem0[0x0800:0x9D3B:selector]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l0800_9EFE
	// succ:  l0800_9EE6 l0800_9EFE
l0800_9EE6:
	Mem0[0x0800:0x9D35:word16] = dx
	Mem0[0x0800:0x9D37:word16] = dx
	ds = dx
	Mem0[ds:0x0000:word16] = bx
	Mem0[ds:0x0002:word16] = dx
	ax = 0x0004
	return
	// succ:  fn0800_9E9E_exit
l0800_9EFE:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	return
	// succ:  fn0800_9E9E_exit
fn0800_9E9E_exit:


// fn0800_9F02
// Return size: 2
void fn0800_9F02()
fn0800_9F02_entry:
	// succ:  l0800_9F02
l0800_9F02:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	bl = ah
	cl = 0x04
	bx = bx >>u cl
	SCZO = cond(bx)
	ax = ax << cl
	SCZO = cond(ax)
	ds = Mem0[0x0800:0x9D3B:selector]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l0800_9F58
	// succ:  l0800_9F20 l0800_9F58
l0800_9F20:
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_9F3D
	// succ:  l0800_9F25 l0800_9F3D
l0800_9F25:
	cx = Mem0[0x0800:0x9D37:word16]
	Mem0[0x0800:0x9D37:word16] = dx
	ds = dx
	Mem0[ds:0x0000:word16] = bx
	Mem0[ds:0x0002:word16] = cx
	ax = 0x0004
	return
	// succ:  fn0800_9F02_exit
l0800_9F3D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax + 0x0010
	SCZO = cond(ax)
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l0800_9F58
	// succ:  l0800_9F55 l0800_9F58
l0800_9F55:
	dx = dx + 0x0001
	SZO = cond(dx)
	goto l0800_9F25
	// succ:  l0800_9F25
l0800_9F58:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	return
	// succ:  fn0800_9F02_exit
fn0800_9F02_exit:


// fn0800_9F5C
// Return size: 2
void fn0800_9F5C()
fn0800_9F5C_entry:
	// succ:  l0800_9F5C
l0800_9F5C:
	sp = fp
	bx = dx
	v7 = Mem0[ds:0x0000:word16] - ax
	Mem0[ds:0x0000:word16] = v7
	SCZO = cond(v7)
	dx = dx + Mem0[ds:0x0000:word16]
	SCZO = cond(dx)
	ds = dx
	Mem0[ds:0x0000:word16] = ax
	Mem0[ds:0x0002:word16] = bx
	bx = dx
	bx = bx + Mem0[ds:0x0000:word16]
	SCZO = cond(bx)
	ds = bx
	Mem0[ds:0x0002:word16] = dx
	ax = 0x0004
	return
	// succ:  fn0800_9F5C_exit
fn0800_9F5C_exit:


// fn0800_9F89
// Return size: 2
void fn0800_9F89()
fn0800_9F89_entry:
	// succ:  l0800_9F89
l0800_9F89:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	cx = ax
	cx = cx | dx
	SZO = cond(cx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[0x0800:0x9D3B:word16] = ds
	branch Test(EQ,Z) l0800_9FFD
	// succ:  l0800_9F9F l0800_9FFD
l0800_9F9F:
	ax = ax + 0x0013
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	branch Test(ULT,C) l0800_9FE8
	// succ:  l0800_9FA7 l0800_9FE8
l0800_9FA7:
	SZO = cond(dx & 0xFFF0)
	C = false
	branch Test(NE,Z) l0800_9FE8
	// succ:  l0800_9FAD l0800_9FE8
l0800_9FAD:
	cl = 0x04
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx << cl
	SCZO = cond(dx)
	ah = ah | dl
	SZO = cond(ah)
	C = false
	dx = Mem0[0x0800:0x9D35:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_9FDE
	// succ:  l0800_9FBE l0800_9FDE
l0800_9FBE:
	dx = Mem0[0x0800:0x9D39:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_9FD9
	// succ:  l0800_9FC7 l0800_9FD9
l0800_9FC7:
	bx = dx
	// succ:  l0800_9FC9
l0800_9FC9:
	ds = dx
	SCZO = cond(Mem0[ds:0x0000:word16] - ax)
	branch Test(UGE,C) l0800_9FED
	// succ:  l0800_9FD1 l0800_9FED
l0800_9FD1:
	dx = Mem0[ds:0x0006:word16]
	SCZO = cond(dx - bx)
	branch Test(NE,Z) l0800_9FC9
	// succ:  l0800_9FD9 l0800_9FC9
l0800_9FD9:
	call fn0800_9F02 (retsize: 2;)
	goto l0800_9FFD
	// succ:  l0800_9FFD
l0800_9FDE:
	call fn0800_9E9E (retsize: 2;)
	goto l0800_9FFD
	// succ:  l0800_9FFD
l0800_9FE3:
	call fn0800_9F5C (retsize: 2;)
	goto l0800_9FFD
	// succ:  l0800_9FFD
l0800_9FE8:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	goto l0800_9FFD
	// succ:  l0800_9FFD
l0800_9FED:
	branch Test(UGT,CZ) l0800_9FE3
	// succ:  l0800_9FEF l0800_9FE3
l0800_9FEF:
	call fn0800_9E15 (retsize: 2;)
	bx = Mem0[ds:0x0008:word16]
	Mem0[ds:0x0002:word16] = bx
	ax = 0x0004
	// succ:  l0800_9FFD
l0800_9FFD:
	ds = Mem0[0x0800:0x9D3B:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_9F89_exit
fn0800_9F89_exit:


// fn0800_A162
// Return size: 2
void fn0800_A162()
fn0800_A162_entry:
	// succ:  l0800_A162
l0800_A162:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	si = si + 0x0001
	SZO = cond(si)
	si = si - Mem0[ds:0x007B:word16]
	SCZO = cond(si)
	si = si + 0x003F
	SCZO = cond(si)
	cl = 0x06
	si = si >>u cl
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ds:0x2698:word16])
	branch Test(NE,Z) l0800_A18D
	// succ:  l0800_A17B l0800_A18D
l0800_A17B:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ds:0x008D:word16] = ax
	Mem0[ds:0x008B:word16] = dx
	ax = 0x0001
	goto l0800_A1D1
	// succ:  l0800_A1D1
l0800_A18D:
	cl = 0x06
	si = si << cl
	SCZO = cond(si)
	dx = Mem0[ds:0x0091:word16]
	ax = si
	ax = ax + Mem0[ds:0x007B:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - dx)
	branch Test(ULE,CZ) l0800_A1A5
	// succ:  l0800_A19F l0800_A1A5
l0800_A19F:
	si = dx
	si = si - Mem0[ds:0x007B:word16]
	SCZO = cond(si)
	// succ:  l0800_A1A5
l0800_A1A5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x007B:word16]
	call fn0800_A401 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = ax
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_A1C1
	// succ:  l0800_A1B6 l0800_A1C1
l0800_A1B6:
	ax = si
	cl = 0x06
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ds:0x2698:word16] = ax
	goto l0800_A17B
	// succ:  l0800_A17B
l0800_A1C1:
	ax = Mem0[ds:0x007B:word16]
	ax = ax + dx
	SCZO = cond(ax)
	Mem0[ds:0x0091:word16] = ax
	Mem0[ds:0x008F:word16] = 0x0000
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_A1D1
l0800_A1D1:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A162_exit
fn0800_A162_exit:


// fn0800_A1D6
// Return size: 2
void fn0800_A1D6()
fn0800_A1D6_entry:
	// succ:  l0800_A1D6
l0800_A1D6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	cx = Mem0[ds:0x0089:word16]
	bx = Mem0[ds:0x0087:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(ULT,C) l0800_A20C
	// succ:  l0800_A1EC l0800_A20C
l0800_A1EC:
	cx = Mem0[ds:0x0091:word16]
	bx = Mem0[ds:0x008F:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(UGT,CZ) l0800_A20C
	// succ:  l0800_A1FF l0800_A20C
l0800_A1FF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_A162 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_A211
	// succ:  l0800_A20C l0800_A211
l0800_A20C:
	ax = 0xFFFF
	goto l0800_A213
	// succ:  l0800_A213
l0800_A211:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_A213
l0800_A213:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A1D6_exit
fn0800_A1D6_exit:


// fn0800_A215
// Return size: 2
void fn0800_A215()
fn0800_A215_entry:
	// succ:  l0800_A215
l0800_A215:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	ax = Mem0[ds:0x008D:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	cl = 0x04
	call fn0800_8C69 (retsize: 2;)
	ax = ax + Mem0[ds:0x008B:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp + 0x0006:word16] + C
	SCZO = cond(dx)
	SCZO = cond(dx - 0x000F)
	branch Test(LT,SO) l0800_A246
	// succ:  l0800_A237 l0800_A246
l0800_A237:
	branch Test(GT,SZO) l0800_A23E
	// succ:  l0800_A239 l0800_A23E
l0800_A239:
	SCZO = cond(ax - 0xFFFF)
	branch Test(ULE,CZ) l0800_A246
	// succ:  l0800_A23E l0800_A246
l0800_A23E:
	dx = 0xFFFF
	ax = 0xFFFF
	goto l0800_A29F
	// succ:  l0800_A29F
l0800_A246:
	dx = Mem0[ds:0x008D:word16]
	ax = Mem0[ds:0x008B:word16]
	cx = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8CCB (retsize: 2;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	cx = Mem0[ds:0x0089:word16]
	bx = Mem0[ds:0x0087:word16]
	dx = Mem0[ss:bp - 0x0002:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(ULT,C) l0800_A23E
	// succ:  l0800_A26C l0800_A23E
l0800_A26C:
	cx = Mem0[ds:0x0091:word16]
	bx = Mem0[ds:0x008F:word16]
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(UGT,CZ) l0800_A23E
	// succ:  l0800_A27F l0800_A23E
l0800_A27F:
	ax = Mem0[ds:0x008D:word16]
	dx = Mem0[ds:0x008B:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_A162 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_A23E
	// succ:  l0800_A299 l0800_A23E
l0800_A299:
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0800_A29F
l0800_A29F:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A215_exit
fn0800_A215_exit:


// fn0800_A401
// Return size: 2
void fn0800_A401()
fn0800_A401_entry:
	// succ:  l0800_A401
l0800_A401:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x4A
	bx = Mem0[ss:bp + 0x0006:word16]
	es = Mem0[ss:bp + 0x0004:selector]
	C = msdos_resize_memory_block(es, bx, out bx)
	branch Test(ULT,C) l0800_A415
	// succ:  l0800_A410 l0800_A415
l0800_A410:
	ax = 0xFFFF
	goto l0800_A41B
	// succ:  l0800_A41B
l0800_A415:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_A41B
l0800_A41B:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A401_exit
fn0800_A401_exit:


// fn0800_A471
// Return size: 2
void fn0800_A471()
fn0800_A471_entry:
	// succ:  l0800_A471
l0800_A471:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	es_si = Mem0[ss:bp + 0x0004:segptr32]
	D = false
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	cx = 0x000A
	bh = 0x00
	di = 0x2251
	// succ:  l0800_A487
l0800_A487:
	bl = Mem0[es:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	SZO = cond(Mem0[ds:bx + di:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_A487
	// succ:  l0800_A490 l0800_A487
l0800_A490:
	bp = 0x0000
	SCZO = cond(bl - 0x2B)
	branch Test(EQ,Z) l0800_A49E
	// succ:  l0800_A498 l0800_A49E
l0800_A498:
	SCZO = cond(bl - 0x2D)
	branch Test(NE,Z) l0800_A4A2
	// succ:  l0800_A49D l0800_A4A2
l0800_A49D:
	bp = bp + 0x0001
	SZO = cond(bp)
	// succ:  l0800_A49E
l0800_A49E:
	bl = Mem0[es:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_A4A2
l0800_A4A2:
	SCZO = cond(bl - 0x39)
	branch Test(UGT,CZ) l0800_A4D6
	// succ:  l0800_A4A7 l0800_A4D6
l0800_A4A7:
	bl = bl - 0x30
	SCZO = cond(bl)
	branch Test(ULT,C) l0800_A4D6
	// succ:  l0800_A4AC l0800_A4D6
l0800_A4AC:
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	ax = ax + bx
	SCZO = cond(ax)
	dl = dl + dh + C
	SCZO = cond(dl)
	branch Test(EQ,Z) l0800_A49E
	// succ:  l0800_A4B4 l0800_A49E
l0800_A4B4:
	goto l0800_A4C8
	// succ:  l0800_A4C8
l0800_A4B6:
	di = dx
	cx = 0x000A
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	v26 = ax
	ax = di
	di = v26
	v27 = cx
	cx = dx
	dx = v27
	dx_ax = dx *u ax
	SCZO = cond(dx_ax)
	v28 = ax
	ax = dx
	dx = v28
	v29 = ax
	ax = di
	di = v29
	ax = ax + bx
	SCZO = cond(ax)
	dx = dx + cx + C
	SCZO = cond(dx)
	// succ:  l0800_A4C8
l0800_A4C8:
	bl = Mem0[es:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(bl - 0x39)
	branch Test(UGT,CZ) l0800_A4D6
	// succ:  l0800_A4D1 l0800_A4D6
l0800_A4D1:
	bl = bl - 0x30
	SCZO = cond(bl)
	branch Test(UGE,C) l0800_A4B6
	// succ:  l0800_A4D6 l0800_A4B6
l0800_A4D6:
	bp = bp - 0x0001
	SZO = cond(bp)
	branch Test(LT,SO) l0800_A4E0
	bp = bp - 0x0001
	SZO = cond(bp)
	branch Test(LT,SO) l0800_A4E0
	// succ:  l0800_A4D9 l0800_A4E0 l0800_A4D9 l0800_A4E0
l0800_A4D9:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l0800_A4E0
l0800_A4E0:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A471_exit
fn0800_A471_exit:


// fn0800_A559
// Return size: 2
void fn0800_A559()
fn0800_A559_entry:
	// succ:  l0800_A559
l0800_A559:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(dx - Mem0[ds:0x24E8:word16])
	branch Test(ULT,C) l0800_A56E
	// succ:  l0800_A565 l0800_A56E
l0800_A565:
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	goto l0800_A57D
	// succ:  l0800_A57D
l0800_A56E:
	bx = dx
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x24EA:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn0800_A57F (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_A57D
l0800_A57D:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A559_exit
fn0800_A559_exit:


// fn0800_A57F
// Return size: 2
void fn0800_A57F()
fn0800_A57F_entry:
	// succ:  l0800_A57F
l0800_A57F:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x3E
	bx = Mem0[ss:bp + 0x0004:word16]
	C = msdos_close_file(bx)
	branch Test(ULT,C) l0800_A597
	// succ:  l0800_A58B l0800_A597
l0800_A58B:
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x24EA:word16] = 0x0000
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_A59B
	// succ:  l0800_A59B
l0800_A597:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_A59B
l0800_A59B:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A57F_exit
fn0800_A57F_exit:


// fn0800_A614
// Return size: 2
void fn0800_A614()
fn0800_A614_entry:
	// succ:  l0800_A614
l0800_A614:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0xFFFF
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0012:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0004:word16])
	branch Test(EQ,Z) l0800_A62A
	// succ:  l0800_A627 l0800_A62A
l0800_A627:
	goto l0800_A6B2
	// succ:  l0800_A6B2
l0800_A62A:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_A65F
	// succ:  l0800_A634 l0800_A65F
l0800_A634:
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(GE,SO) l0800_A647
	// succ:  l0800_A63A l0800_A647
l0800_A63A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_A6B2
	// succ:  l0800_A647 l0800_A6B2
l0800_A647:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0004)
	C = false
	branch Test(EQ,Z) l0800_A65F
	// succ:  l0800_A652 l0800_A65F
l0800_A652:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x0008:word16]
	call fn0800_9E75 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_A65F
l0800_A65F:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + 0x0004:byte] - 0x00)
	branch Test(LT,SO) l0800_A675
	// succ:  l0800_A669 l0800_A675
l0800_A669:
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_A559 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = ax
	// succ:  l0800_A675
l0800_A675:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx + 0x0002:word16] = 0x0000
	Mem0[es:bx + 0x0006:word16] = 0x0000
	Mem0[es:bx:word16] = 0x0000
	Mem0[es:bx + 0x0004:byte] = 0xFF
	SCZO = cond(Mem0[es:bx + 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l0800_A6B2
	// succ:  l0800_A695 l0800_A6B2
l0800_A695:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx + 0x0010:word16]
	call fn0800_8E6A (retsize: 2;)
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_97F8 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx + 0x0010:word16] = 0x0000
	// succ:  l0800_A6B2
l0800_A6B2:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A614_exit
fn0800_A614_exit:


// fn0800_A6B7
// Return size: 2
void fn0800_A6B7()
fn0800_A6B7_entry:
	// succ:  l0800_A6B7
l0800_A6B7:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_A6C9
	// succ:  l0800_A6C3 l0800_A6C9
l0800_A6C3:
	call fn0800_A877 (retsize: 2;)
	goto l0800_A778
	// succ:  l0800_A778
l0800_A6C9:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0012:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0004:word16])
	branch Test(EQ,Z) l0800_A6DB
	// succ:  l0800_A6D5 l0800_A6DB
l0800_A6D5:
	ax = 0xFFFF
	goto l0800_A77A
	// succ:  l0800_A77A
l0800_A6DB:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(LT,SO) l0800_A732
	// succ:  l0800_A6E4 l0800_A732
l0800_A6E4:
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0008)
	C = false
	branch Test(NE,Z) l0800_A701
	// succ:  l0800_A6EC l0800_A701
l0800_A6EC:
	ax = Mem0[es:bx + 0x000E:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	dx = dx + 0x0005
	SCZO = cond(dx)
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A6FB l0800_A778
l0800_A6FB:
	SCZO = cond(Mem0[es:bx + 0x000C:word16] - dx)
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A701 l0800_A778
l0800_A701:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = 0x0000
	ax = Mem0[es:bx + 0x000E:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	dx = dx + 0x0005
	SCZO = cond(dx)
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A718 l0800_A778
l0800_A718:
	SCZO = cond(Mem0[es:bx + 0x000C:word16] - dx)
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A71E l0800_A778
l0800_A71E:
	ax = Mem0[es:bx + 0x000A:word16]
	dx = Mem0[es:bx + 0x0008:word16]
	Mem0[es:bx + 0x000E:word16] = ax
	Mem0[es:bx + 0x000C:word16] = dx
	goto l0800_A778
	// succ:  l0800_A778
l0800_A732:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0006:word16]
	ax = ax + Mem0[es:bx:word16]
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	si = ax
	v16 = Mem0[es:bx:word16] - si
	Mem0[es:bx:word16] = v16
	SCZO = cond(v16)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[es:bx + 0x000A:word16]
	dx = Mem0[es:bx + 0x0008:word16]
	Mem0[es:bx + 0x000E:word16] = ax
	Mem0[es:bx + 0x000C:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_C632 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0800_A778
	// succ:  l0800_A765 l0800_A778
l0800_A765:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0200)
	C = false
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A770 l0800_A778
l0800_A770:
	v18 = Mem0[es:bx + 0x0002:word16] | 0x0010
	Mem0[es:bx + 0x0002:word16] = v18
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	goto l0800_A6D5
	// succ:  l0800_A6D5
l0800_A778:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_A77A
l0800_A77A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A6B7_exit
fn0800_A6B7_exit:


// fn0800_A877
// Return size: 2
void fn0800_A877()
fn0800_A877_entry:
	// succ:  l0800_A877
l0800_A877:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	si = Mem0[ds:0x24E8:word16]
	Mem0[ss:bp - 0x0002:word16] = ds
	Mem0[ss:bp - 0x0004:word16] = 0x2358
	goto l0800_A8A8
	// succ:  l0800_A8A8
l0800_A88F:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0003)
	C = false
	branch Test(EQ,Z) l0800_A8A4
	// succ:  l0800_A89A l0800_A8A4
l0800_A89A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l0800_A8A4
l0800_A8A4:
	v17 = Mem0[ss:bp - 0x0004:word16] + 0x0014
	Mem0[ss:bp - 0x0004:word16] = v17
	SCZO = cond(v17)
	// succ:  l0800_A8A8
l0800_A8A8:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_A88F
	// succ:  l0800_A8AF l0800_A88F
l0800_A8AF:
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_A877_exit
fn0800_A877_exit:


// fn0800_AFCB
// Return size: 2
void fn0800_AFCB()
fn0800_AFCB_entry:
	// succ:  l0800_AFCB
l0800_AFCB:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = es
	ax = ax | di
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_AFFC
	// succ:  l0800_AFDC l0800_AFFC
l0800_AFDC:
	al = 0x00
	ah = Mem0[es:di:byte]
	cx = 0xFFFF
	D = false
	// succ:  l0800_AFE5
l0800_AFE5:
	branch cx == 0x0000 l0800_AFE7
	// succ:  l0800_AFE5_1 l0800_AFE7
l0800_AFE5_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_AFE5
	// succ:  l0800_AFE7 l0800_AFE5
l0800_AFE7:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	branch Test(EQ,Z) l0800_AFFC
	// succ:  l0800_AFEC l0800_AFFC
l0800_AFEC:
	es_di = Mem0[ds:0x26AA:segptr32]
	Mem0[ss:bp - 0x0002:word16] = es
	bx = es
	bx = bx | di
	SZO = cond(bx)
	C = false
	Mem0[ss:bp - 0x0004:word16] = di
	branch Test(NE,Z) l0800_B009
	// succ:  l0800_AFFC l0800_B009
l0800_AFFC:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_B035
	// succ:  l0800_B035
l0800_B002:
	v23 = Mem0[ss:bp - 0x0004:word16] + 0x0004
	Mem0[ss:bp - 0x0004:word16] = v23
	SCZO = cond(v23)
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	// succ:  l0800_B009
l0800_B009:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	bx = es
	bx = bx | di
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0800_AFFC
	// succ:  l0800_B012 l0800_AFFC
l0800_B012:
	al = Mem0[es:di:byte]
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_AFFC
	// succ:  l0800_B019 l0800_AFFC
l0800_B019:
	SCZO = cond(ah - al)
	branch Test(NE,Z) l0800_B002
	// succ:  l0800_B01D l0800_B002
l0800_B01D:
	bx = cx
	SCZO = cond(Mem0[es:bx + di:byte] - 0x3D)
	branch Test(NE,Z) l0800_B002
	// succ:  l0800_B025 l0800_B002
l0800_B025:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds_si = Mem0[ss:bp + 0x0004:segptr32]
	// succ:  l0800_B029
l0800_B029:
	branch cx == 0x0000 l0800_B02B
	// succ:  l0800_B029_1 l0800_B02B
l0800_B029_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_B029
	// succ:  l0800_B02B l0800_B029
l0800_B02B:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v22 = bx
	bx = cx
	cx = v22
	branch Test(NE,Z) l0800_B002
	// succ:  l0800_B030 l0800_B002
l0800_B030:
	di = di + 0x0001
	SZO = cond(di)
	ax = di
	dx = es
	// succ:  l0800_B035
l0800_B035:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_AFCB_exit
fn0800_AFCB_exit:


// fn0800_B03B
// Return size: 2
void fn0800_B03B()
fn0800_B03B_entry:
	// succ:  l0800_B03B
l0800_B03B:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dx = ds
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ds_si = Mem0[ss:bp + 0x0008:segptr32]
	cx = Mem0[ss:bp + 0x000C:word16]
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	D = false
	// succ:  l0800_B04E
l0800_B04E:
	branch cx == 0x0000 l0800_B050
	// succ:  l0800_B04E_1 l0800_B050
l0800_B04E_1:
	v15 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v15
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_B04E
	// succ:  l0800_B04E
l0800_B050:
	branch Test(UGE,C) l0800_B053
	// succ:  l0800_B052 l0800_B053
l0800_B052:
	v17 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v17
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l0800_B053
l0800_B053:
	ds = dx
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_B03B_exit
fn0800_B03B_exit:


// fn0800_B05F
// Return size: 2
void fn0800_B05F()
fn0800_B05F_entry:
	// succ:  l0800_B05F
l0800_B05F:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	cx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ss:bp + 0x000A:byte]
	ah = al
	D = false
	SZO = cond(di & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_B079
	// succ:  l0800_B075 l0800_B079
l0800_B075:
	branch cx == 0x0000 l0800_B080
	// succ:  l0800_B077 l0800_B080
l0800_B077:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_B079
l0800_B079:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0800_B07B
l0800_B07B:
	branch cx == 0x0000 l0800_B07D
	// succ:  l0800_B07B_1 l0800_B07D
l0800_B07B_1:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_B07B
	// succ:  l0800_B07B
l0800_B07D:
	branch Test(UGE,C) l0800_B080
	// succ:  l0800_B07F l0800_B080
l0800_B07F:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_B080
l0800_B080:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_B05F_exit
fn0800_B05F_exit:


// fn0800_B083
// Return size: 2
void fn0800_B083()
fn0800_B083_entry:
	// succ:  l0800_B083
l0800_B083:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	al = Mem0[ss:bp + 0x0008:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_B05F (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_B083_exit
fn0800_B083_exit:


// fn0800_B0A1
// Return size: 2
void fn0800_B0A1()
fn0800_B0A1_entry:
	// succ:  l0800_B0A1
l0800_B0A1:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	cx = Mem0[ss:bp + 0x000A:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(UGE,C) l0800_B0BE
	// succ:  l0800_B0B8 l0800_B0BE
l0800_B0B8:
	D = true
	ax = 0x0001
	goto l0800_B0C1
	// succ:  l0800_B0C1
l0800_B0BE:
	D = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_B0C1
l0800_B0C1:
	ds_si = Mem0[ss:bp + 0x0004:segptr32]
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	cx = Mem0[ss:bp + 0x000C:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_B0D4
	// succ:  l0800_B0CE l0800_B0D4
l0800_B0CE:
	si = si + cx
	SCZO = cond(si)
	si = si - 0x0001
	SZO = cond(si)
	di = di + cx
	SCZO = cond(di)
	di = di - 0x0001
	SZO = cond(di)
	// succ:  l0800_B0D4
l0800_B0D4:
	SZO = cond(di & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_B0DE
	// succ:  l0800_B0DA l0800_B0DE
l0800_B0DA:
	branch cx == 0x0000 l0800_B0ED
	// succ:  l0800_B0DC l0800_B0ED
l0800_B0DC:
	v20 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_B0DE
l0800_B0DE:
	si = si - ax
	SCZO = cond(si)
	di = di - ax
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0800_B0E4
l0800_B0E4:
	branch cx == 0x0000 l0800_B0E6
	// succ:  l0800_B0E4_1 l0800_B0E6
l0800_B0E4_1:
	v21 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v21
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_B0E4
	// succ:  l0800_B0E4
l0800_B0E6:
	branch Test(UGE,C) l0800_B0ED
	// succ:  l0800_B0E8 l0800_B0ED
l0800_B0E8:
	si = si + ax
	SCZO = cond(si)
	di = di + ax
	SCZO = cond(di)
	v22 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v22
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l0800_B0ED
l0800_B0ED:
	D = false
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_B0A1_exit
fn0800_B0A1_exit:


// fn0800_B0F3
// Return size: 2
void fn0800_B0F3()
fn0800_B0F3_entry:
	// succ:  l0800_B0F3
l0800_B0F3:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn0800_B0A1 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_B0F3_exit
fn0800_B0F3_exit:


// fn0800_B2EF
// Return size: 2
void fn0800_B2EF()
fn0800_B2EF_entry:
	// succ:  l0800_B2EF
l0800_B2EF:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0xB4BE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x236C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_9828 (retsize: 2;)
	sp = sp + 0x000C
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_B2EF_exit
fn0800_B2EF_exit:


// fn0800_BF5F
// Return size: 2
void fn0800_BF5F()
fn0800_BF5F_entry:
	// succ:  l0800_BF5F
l0800_BF5F:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	D = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	dx = di
	al = al ^ al
	SZO = cond(al)
	C = false
	cx = 0xFFFF
	// succ:  l0800_BF70
l0800_BF70:
	branch cx == 0x0000 l0800_BF72
	// succ:  l0800_BF70_1 l0800_BF72
l0800_BF70_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_BF70
	// succ:  l0800_BF72 l0800_BF70
l0800_BF72:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	si = di - 0x0001
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	cx = 0xFFFF
	// succ:  l0800_BF7C
l0800_BF7C:
	branch cx == 0x0000 l0800_BF7E
	// succ:  l0800_BF7C_2 l0800_BF7E
l0800_BF7C_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_BF7C
	// succ:  l0800_BF7E l0800_BF7C
l0800_BF7E:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v18 = di
	di = si
	si = v18
	SZO = cond(si & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_BF8F
	// succ:  l0800_BF8D l0800_BF8F
l0800_BF8D:
	v19 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_BF8F
l0800_BF8F:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0800_BF91
l0800_BF91:
	branch cx == 0x0000 l0800_BF93
	// succ:  l0800_BF91_1 l0800_BF93
l0800_BF91_1:
	v20 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v20
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_BF91
	// succ:  l0800_BF91
l0800_BF93:
	branch Test(UGE,C) l0800_BF96
	// succ:  l0800_BF95 l0800_BF96
l0800_BF95:
	v21 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l0800_BF96
l0800_BF96:
	v22 = ax
	ax = dx
	dx = v22
	dx = es
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_BF5F_exit
fn0800_BF5F_exit:


// fn0800_BF9E
// Return size: 2
void fn0800_BF9E()
fn0800_BF9E_entry:
	// succ:  l0800_BF9E
l0800_BF9E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	D = false
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	si = di
	al = al ^ al
	SZO = cond(al)
	C = false
	cx = 0xFFFF
	// succ:  l0800_BFAE
l0800_BFAE:
	branch cx == 0x0000 l0800_BFB0
	// succ:  l0800_BFAE_1 l0800_BFB0
l0800_BFAE_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_BFAE
	// succ:  l0800_BFB0 l0800_BFAE
l0800_BFB0:
	cx = ~cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = es
	ds = ax
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	// succ:  l0800_BFBA
l0800_BFBA:
	branch cx == 0x0000 l0800_BFBC
	// succ:  l0800_BFBA_2 l0800_BFBC
l0800_BFBA_2:
	v18 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v18
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_BFBA
	// succ:  l0800_BFBA
l0800_BFBC:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_BF9E_exit
fn0800_BF9E_exit:


// fn0800_BFC7
// Return size: 2
void fn0800_BFC7()
fn0800_BFC7_entry:
	// succ:  l0800_BFC7
l0800_BFC7:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_BFD9
	// succ:  l0800_BFD5 l0800_BFD9
l0800_BFD5:
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_BFE3
	// succ:  l0800_BFD9 l0800_BFE3
l0800_BFD9:
	D = false
	cx = 0xFFFF
	// succ:  l0800_BFDD
l0800_BFDD:
	branch cx == 0x0000 l0800_BFDF
	// succ:  l0800_BFDD_1 l0800_BFDF
l0800_BFDD_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_BFDD
	// succ:  l0800_BFDF l0800_BFDD
l0800_BFDF:
	v16 = ax
	ax = cx
	cx = v16
	ax = ~ax
	ax = ax - 0x0001
	SZO = cond(ax)
	// succ:  l0800_BFE3
l0800_BFE3:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_BFC7_exit
fn0800_BFC7_exit:


// fn0800_C01E
// Return size: 2
void fn0800_C01E()
fn0800_C01E_entry:
	// succ:  l0800_C01E
l0800_C01E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	D = false
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	si = di
	al = al ^ al
	SZO = cond(al)
	C = false
	bx = Mem0[ss:bp + 0x000C:word16]
	cx = bx
	// succ:  l0800_C030
l0800_C030:
	branch cx == 0x0000 l0800_C032
	// succ:  l0800_C030_1 l0800_C032
l0800_C030_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_C030
	// succ:  l0800_C032 l0800_C030
l0800_C032:
	bx = bx - cx
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	di = es
	ds = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	v18 = bx
	bx = cx
	cx = v18
	// succ:  l0800_C03E
l0800_C03E:
	branch cx == 0x0000 l0800_C040
	// succ:  l0800_C03E_2 l0800_C040
l0800_C03E_2:
	v19 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_C03E
	// succ:  l0800_C03E
l0800_C040:
	cx = bx
	// succ:  l0800_C042
l0800_C042:
	branch cx == 0x0000 l0800_C044
	// succ:  l0800_C042_1 l0800_C044
l0800_C042_1:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_C042
	// succ:  l0800_C042
l0800_C044:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_C01E_exit
fn0800_C01E_exit:


// fn0800_C04F
// Return size: 2
void fn0800_C04F()
fn0800_C04F_entry:
	// succ:  l0800_C04F
l0800_C04F:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0800_C379 (retsize: 2;)
	ax = Mem0[ds:0x26E4:word16]
	dx = Mem0[ds:0x26E2:word16]
	dx = dx + 0xA600
	SCZO = cond(dx)
	ax = ax + 0x12CE + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	si = Mem0[es:bx:word16]
	si = si + 0xF844
	SCZO = cond(si)
	ax = si
	ax = ax >> 0x0001
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = 0x0786
	ax = 0x1F80
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	call fn0800_8F18 (retsize: 2;)
	v16 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ss:bp - 0x0002:word16] + dx + C
	Mem0[ss:bp - 0x0002:word16] = v17
	SCZO = cond(v17)
	ax = si
	ax = ax & 0x0003
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = 0x01E1
	ax = 0x3380
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	call fn0800_8F18 (retsize: 2;)
	v19 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ss:bp - 0x0002:word16] + dx + C
	Mem0[ss:bp - 0x0002:word16] = v20
	SCZO = cond(v20)
	SZO = cond(si & 0x0003)
	C = false
	branch Test(EQ,Z) l0800_C0B9
	// succ:  l0800_C0B0 l0800_C0B9
l0800_C0B0:
	v22 = Mem0[ss:bp - 0x0004:word16] + 0x5180
	Mem0[ss:bp - 0x0004:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0002:word16] + 0x01 + C
	Mem0[ss:bp - 0x0002:word16] = v23
	SCZO = cond(v23)
	// succ:  l0800_C0B9
l0800_C0B9:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0003:byte]
	ax = (int16) al
	ax = ax - 0x0001
	SZO = cond(ax)
	si = ax
	goto l0800_C0D0
	// succ:  l0800_C0D0
l0800_C0C8:
	si = si - 0x0001
	SZO = cond(si)
	al = Mem0[ds:si + 0x26B4:byte]
	ax = (int16) al
	cx = cx + ax
	SCZO = cond(cx)
	// succ:  l0800_C0D0
l0800_C0D0:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GT,SZO) l0800_C0C8
	// succ:  l0800_C0D4 l0800_C0C8
l0800_C0D4:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0002:byte]
	ax = (int16) al
	ax = ax - 0x0001
	SZO = cond(ax)
	cx = cx + ax
	SCZO = cond(cx)
	SCZO = cond(Mem0[es:bx + 0x0003:byte] - 0x02)
	branch Test(LE,SZO) l0800_C0EE
	// succ:  l0800_C0E6 l0800_C0EE
l0800_C0E6:
	SZO = cond(Mem0[es:bx:word16] & 0x0003)
	C = false
	branch Test(NE,Z) l0800_C0EE
	// succ:  l0800_C0ED l0800_C0EE
l0800_C0ED:
	cx = cx + 0x0001
	SZO = cond(cx)
	// succ:  l0800_C0EE
l0800_C0EE:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	al = Mem0[es:bx + 0x0001:byte]
	ah = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = cx
	dx = 0x0018
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax + dx
	SCZO = cond(ax)
	si = ax
	SCZO = cond(Mem0[ds:0x26E6:word16] - 0x0000)
	branch Test(EQ,Z) l0800_C128
	// succ:  l0800_C10B l0800_C128
l0800_C10B:
	al = Mem0[es:bx + 0x0001:byte]
	ah = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax + 0xF84E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_C553 (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_C128
	// succ:  l0800_C127 l0800_C128
l0800_C127:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0800_C128
l0800_C128:
	ax = si
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x0E10
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	call fn0800_8F18 (retsize: 2;)
	v26 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v26
	SCZO = cond(v26)
	v27 = Mem0[ss:bp - 0x0002:word16] + dx + C
	Mem0[ss:bp - 0x0002:word16] = v27
	SCZO = cond(v27)
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	al = Mem0[es:bx:byte]
	ah = 0x00
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x003C
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	call fn0800_8F18 (retsize: 2;)
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	bl = Mem0[es:bx + 0x0003:byte]
	bh = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx_ax = (int32) ax
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	v30 = Mem0[ss:bp - 0x0004:word16] + cx
	Mem0[ss:bp - 0x0004:word16] = v30
	SCZO = cond(v30)
	v31 = Mem0[ss:bp - 0x0002:word16] + bx + C
	Mem0[ss:bp - 0x0002:word16] = v31
	SCZO = cond(v31)
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_C04F_exit
fn0800_C04F_exit:


// fn0800_C379
// Return size: 2
void fn0800_C379()
fn0800_C379_entry:
	// succ:  l0800_C379
l0800_C379:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x26E8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_AFCB (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_C397
	// succ:  l0800_C394 l0800_C397
l0800_C394:
	goto l0800_C42C
	// succ:  l0800_C42C
l0800_C397:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_BFC7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - 0x0004)
	branch Test(UGE,C) l0800_C3AA
	// succ:  l0800_C3A7 l0800_C3AA
l0800_C3A7:
	goto l0800_C42C
	// succ:  l0800_C42C
l0800_C3AA:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C42C
	// succ:  l0800_C3BD l0800_C42C
l0800_C3BD:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[es:bx + 0x0001:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C42C
	// succ:  l0800_C3D1 l0800_C42C
l0800_C3D1:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[es:bx + 0x0002:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C42C
	// succ:  l0800_C3E5 l0800_C42C
l0800_C3E5:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[es:bx + 0x0003:byte] - 0x2D)
	branch Test(EQ,Z) l0800_C404
	// succ:  l0800_C3EF l0800_C404
l0800_C3EF:
	SCZO = cond(Mem0[es:bx + 0x0003:byte] - 0x2B)
	branch Test(EQ,Z) l0800_C404
	// succ:  l0800_C3F6 l0800_C404
l0800_C3F6:
	al = Mem0[es:bx + 0x0003:byte]
	ax = (int16) al
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x2251:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0800_C42C
	// succ:  l0800_C404 l0800_C42C
l0800_C404:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx + 0x0003:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x0002)
	C = false
	branch Test(NE,Z) l0800_C467
	// succ:  l0800_C418 l0800_C467
l0800_C418:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x0002)
	C = false
	branch Test(NE,Z) l0800_C467
	// succ:  l0800_C42C l0800_C467
l0800_C42C:
	Mem0[ds:0x26E6:word16] = 0x0001
	Mem0[ds:0x26E4:word16] = 0x0000
	Mem0[ds:0x26E2:word16] = 0x4650
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x26EB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DC:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DA:word16]
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x26EF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26E0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DE:word16]
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x26E6:word16] = 0x0001
	Mem0[ds:0x26E4:word16] = 0x0000
	Mem0[ds:0x26E2:word16] = 0x4650
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x26EB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DC:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DA:word16]
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x26EF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26E0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DE:word16]
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_C54E
	// succ:  l0800_C54E
l0800_C467:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26E0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DE:word16]
	call fn0800_B083 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DC:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DA:word16]
	call fn0800_C01E (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x26DA:segptr32]
	Mem0[es:bx + 0x0003:byte] = 0x00
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_A471 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x0E10
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	call fn0800_8F18 (retsize: 2;)
	Mem0[ds:0x26E4:word16] = dx
	Mem0[ds:0x26E2:word16] = ax
	Mem0[ds:0x26E6:word16] = 0x0000
	si = 0x0003
	goto l0800_C542
	// succ:  l0800_C542
l0800_C4CA:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx + si:byte]
	ax = (int16) al
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x2251:byte] & 0x0C)
	C = false
	branch Test(EQ,Z) l0800_C541
	// succ:  l0800_C4DA l0800_C541
l0800_C4DA:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_BFC7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - 0x0003)
	branch Test(ULT,C) l0800_C54E
	// succ:  l0800_C4ED l0800_C54E
l0800_C4ED:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx + 0x0001 + si:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C54E
	// succ:  l0800_C501 l0800_C54E
l0800_C501:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[es:bx + 0x0002 + si:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C54E
	// succ:  l0800_C515 l0800_C54E
l0800_C515:
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26E0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x26DE:word16]
	call fn0800_C01E (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x26DE:segptr32]
	Mem0[es:bx + 0x0003:byte] = 0x00
	Mem0[ds:0x26E6:word16] = 0x0001
	goto l0800_C54E
	// succ:  l0800_C54E
l0800_C541:
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_C542
l0800_C542:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + si:byte] - 0x00)
	branch Test(EQ,Z) l0800_C54E
	// succ:  l0800_C54B l0800_C54E
l0800_C54B:
	goto l0800_C4CA
	// succ:  l0800_C4CA
l0800_C54E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_C379_exit
fn0800_C379_exit:


// fn0800_C553
// Return size: 2
void fn0800_C553()
fn0800_C553_entry:
	// succ:  l0800_C553
l0800_C553:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0800_C589
	// succ:  l0800_C55D l0800_C589
l0800_C55D:
	si = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x003B)
	branch Test(ULT,C) l0800_C572
	// succ:  l0800_C566 l0800_C572
l0800_C566:
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0046
	SCZO = cond(ax)
	SZO = cond(ax & 0x0003)
	C = false
	branch Test(NE,Z) l0800_C572
	// succ:  l0800_C571 l0800_C572
l0800_C571:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0800_C572
l0800_C572:
	Mem0[ss:bp + 0x0006:word16] = 0x0000
	goto l0800_C57C
	// succ:  l0800_C57C
l0800_C579:
	v20 = Mem0[ss:bp + 0x0006:word16] + 0x0001
	Mem0[ss:bp + 0x0006:word16] = v20
	SZO = cond(v20)
	// succ:  l0800_C57C
l0800_C57C:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x26C0:word16] - si)
	branch Test(ULE,CZ) l0800_C579
	// succ:  l0800_C587 l0800_C579
l0800_C587:
	goto l0800_C5AA
	// succ:  l0800_C5AA
l0800_C589:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0003)
	branch Test(ULT,C) l0800_C59A
	// succ:  l0800_C58F l0800_C59A
l0800_C58F:
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0046
	SCZO = cond(ax)
	SZO = cond(ax & 0x0003)
	C = false
	branch Test(EQ,Z) l0800_C59D
	// succ:  l0800_C59A l0800_C59D
l0800_C59A:
	v11 = Mem0[ss:bp + 0x0008:word16] - 0x0001
	Mem0[ss:bp + 0x0008:word16] = v11
	SZO = cond(v11)
	// succ:  l0800_C59D
l0800_C59D:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx - 0x0001
	SZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x26C0:word16]
	v14 = Mem0[ss:bp + 0x0008:word16] + ax
	Mem0[ss:bp + 0x0008:word16] = v14
	SCZO = cond(v14)
	// succ:  l0800_C5AA
l0800_C5AA:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0004)
	branch Test(ULT,C) l0800_C62B
	// succ:  l0800_C5B0 l0800_C62B
l0800_C5B0:
	branch Test(EQ,Z) l0800_C5BA
	// succ:  l0800_C5B2 l0800_C5BA
l0800_C5B2:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x000A)
	branch Test(UGT,CZ) l0800_C62B
	// succ:  l0800_C5B8 l0800_C62B
l0800_C5B8:
	branch Test(NE,Z) l0800_C626
	// succ:  l0800_C5BA l0800_C626
l0800_C5BA:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x0010)
	branch Test(LE,SZO) l0800_C5D4
	// succ:  l0800_C5C5 l0800_C5D4
l0800_C5C5:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0004)
	branch Test(NE,Z) l0800_C5D4
	// succ:  l0800_C5CB l0800_C5D4
l0800_C5CB:
	cx = Mem0[ds:bx + 0x26BE:word16]
	cx = cx + 0x0007
	SCZO = cond(cx)
	goto l0800_C5D8
	// succ:  l0800_C5D8
l0800_C5D4:
	cx = Mem0[ds:bx + 0x26C0:word16]
	// succ:  l0800_C5D8
l0800_C5D8:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + 0x07B2
	SCZO = cond(bx)
	SZO = cond(bl & 0x03)
	C = false
	branch Test(EQ,Z) l0800_C5E5
	// succ:  l0800_C5E4 l0800_C5E5
l0800_C5E4:
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_C5E5
l0800_C5E5:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx >> 0x0001
	SCZO = cond(bx)
	bx = bx >> 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	ax = 0x016D
	dx_ax = Mem0[ss:bp + 0x0004:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	bx = 0x0007
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	cx = cx - dx
	SCZO = cond(cx)
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0004)
	branch Test(NE,Z) l0800_C61A
	// succ:  l0800_C60C l0800_C61A
l0800_C60C:
	SCZO = cond(ax - cx)
	branch Test(UGT,CZ) l0800_C626
	// succ:  l0800_C610 l0800_C626
l0800_C610:
	branch Test(NE,Z) l0800_C62B
	// succ:  l0800_C612 l0800_C62B
l0800_C612:
	SCZO = cond(Mem0[ss:bp + 0x000A:byte] - 0x02)
	branch Test(ULT,C) l0800_C62B
	// succ:  l0800_C618 l0800_C62B
l0800_C618:
	goto l0800_C626
	// succ:  l0800_C626
l0800_C61A:
	SCZO = cond(ax - cx)
	branch Test(ULT,C) l0800_C626
	// succ:  l0800_C61E l0800_C626
l0800_C61E:
	branch Test(NE,Z) l0800_C62B
	// succ:  l0800_C620 l0800_C62B
l0800_C620:
	SCZO = cond(Mem0[ss:bp + 0x000A:byte] - 0x01)
	branch Test(UGT,CZ) l0800_C62B
	// succ:  l0800_C626 l0800_C62B
l0800_C626:
	ax = 0x0001
	ax = 0x0001
	goto l0800_C62D
	// succ:  l0800_C62D
l0800_C62B:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_C62D
l0800_C62D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_C553_exit
fn0800_C553_exit:


// fn0800_C632
// Return size: 2
void fn0800_C632()
fn0800_C632_entry:
	// succ:  l0800_C632
l0800_C632:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x008E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(di - Mem0[ds:0x24E8:word16])
	branch Test(ULT,C) l0800_C64E
	// succ:  l0800_C644 l0800_C64E
l0800_C644:
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	goto l0800_C773
	// succ:  l0800_C773
l0800_C64E:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0002)
	branch Test(UGE,C) l0800_C65C
	// succ:  l0800_C657 l0800_C65C
l0800_C657:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_C773
	// succ:  l0800_C773
l0800_C65C:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0800)
	C = false
	branch Test(EQ,Z) l0800_C677
	// succ:  l0800_C668 l0800_C677
l0800_C668:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_8E29 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_C677
l0800_C677:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x4000)
	C = false
	branch Test(NE,Z) l0800_C696
	// succ:  l0800_C683 l0800_C696
l0800_C683:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_C773
	// succ:  l0800_C773
l0800_C696:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	v14 = Mem0[ds:bx + 0x24EA:word16] & 0xFDFF
	Mem0[ds:bx + 0x24EA:word16] = v14
	SZO = cond(Mem0[ds:bx + 0x24EA:word16])
	C = false
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l0800_C727
	// succ:  l0800_C727
l0800_C6B4:
	v17 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v17
	SZO = cond(v17)
	es_bx = Mem0[ss:bp - 0x000C:segptr32]
	v20 = Mem0[ss:bp - 0x000C:word16] + 0x0001
	Mem0[ss:bp - 0x000C:word16] = v20
	SZO = cond(v20)
	al = Mem0[es:bx:byte]
	Mem0[ss:bp - 0x0007:byte] = al
	SCZO = cond(al - 0x0A)
	branch Test(NE,Z) l0800_C6D1
	// succ:  l0800_C6C7 l0800_C6D1
l0800_C6C7:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx:byte] = 0x0D
	v22 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v22
	SZO = cond(v22)
	// succ:  l0800_C6D1
l0800_C6D1:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[ss:bp - 0x0007:byte]
	Mem0[es:bx:byte] = al
	v23 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v23
	SZO = cond(v23)
	ax = bp - 0x008E
	dx = Mem0[ss:bp - 0x0004:word16]
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	dx = dx - ax
	SCZO = cond(dx)
	bx = bx - 0x00 - C
	SCZO = cond(bx)
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(LT,SO) l0800_C731
	// succ:  l0800_C6EF l0800_C731
l0800_C6EF:
	branch Test(NE,Z) l0800_C6F7
	// succ:  l0800_C6F1 l0800_C6F7
l0800_C6F1:
	SCZO = cond(dx - 0x0080)
	branch Test(ULT,C) l0800_C731
	// succ:  l0800_C6F7 l0800_C731
l0800_C6F7:
	ax = bp - 0x008E
	si = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	si = si - ax
	SCZO = cond(si)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = ax
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0800_C727
	// succ:  l0800_C715 l0800_C727
l0800_C715:
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_C71F
	// succ:  l0800_C71A l0800_C71F
l0800_C71A:
	ax = 0xFFFF
	ax = 0xFFFF
	goto l0800_C76E
	// succ:  l0800_C76E
l0800_C71F:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	goto l0800_C76A
	// succ:  l0800_C76A
l0800_C727:
	ax = bp - 0x008E
	Mem0[ss:bp - 0x0002:word16] = ss
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l0800_C731
l0800_C731:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_C73A
	// succ:  l0800_C737 l0800_C73A
l0800_C737:
	goto l0800_C6B4
	// succ:  l0800_C6B4
l0800_C73A:
	ax = bp - 0x008E
	si = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	si = si - ax
	SCZO = cond(si)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	ax = si
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(ULE,CZ) l0800_C770
	// succ:  l0800_C74E l0800_C770
l0800_C74E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x008E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = ax
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0800_C770
	// succ:  l0800_C762 l0800_C770
l0800_C762:
	SCZO = cond(dx - 0xFFFF)
	branch Test(EQ,Z) l0800_C71A
	// succ:  l0800_C767 l0800_C71A
l0800_C767:
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0800_C76A
l0800_C76A:
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax - si
	SCZO = cond(ax)
l0800_C76E:
	goto l0800_C773
	// succ:  l0800_C773
l0800_C770:
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0800_C773
l0800_C773:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_C632_exit
fn0800_C632_exit:


// fn0800_C779
// Return size: 2
void fn0800_C779()
fn0800_C779_entry:
	// succ:  l0800_C779
l0800_C779:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_C78F
	// succ:  l0800_C789 l0800_C78F
l0800_C789:
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0800_C7B0
	// succ:  l0800_C7B0
l0800_C78F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ah = 0x40
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x000A:word16]
	ds_dx = Mem0[ss:bp + 0x0006:segptr32]
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	branch Test(ULT,C) l0800_C7AF
	// succ:  l0800_C7A0 l0800_C7AF
l0800_C7A0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v16 = Mem0[ds:bx + 0x24EA:word16] | 0x1000
	Mem0[ds:bx + 0x24EA:word16] = v16
	SZO = cond(Mem0[ds:bx + 0x24EA:word16])
	C = false
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0800_C7B3
	// succ:  l0800_C7B3
l0800_C7AF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0800_C7B0
l0800_C7B0:
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_C7B3
l0800_C7B3:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_C779_exit
fn0800_C779_exit:


