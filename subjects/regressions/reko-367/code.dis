// fn80000000
// Return size: 4
define fn80000000
fn80000000_entry:
	// succ:  l80000000
l80000000:
	a7 = fp
	call fn800003CC (retsize: 4;)
	return
	// succ:  fn80000000_exit
fn80000000_exit:


// fn80000132
// Return size: 4
define fn80000132
fn80000132_entry:
	// succ:  l80000132
l80000132:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x00000010
	a7 = a7 - 0x00000004
	v5 = d2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	fp0 = (real80) Mem0[0x800004FC:real96]
	fpsr = cond(fp0)
	v9 = (real96) fp0
	Mem0[a6 + -12:real96] = v9
	fpsr = cond(v9)
	Mem0[a6 + -16:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l8000014A
l8000014A:
	fp0 = (real80) Mem0[a6 + -16:int32]
	fpsr = cond(fp0)
	fpsr = cond((real96) fp0 - Mem0[a6 + 20:real96])
	branch Test(GE,fpsr) l80000172
	// succ:  l8000015A l80000172
l8000015A:
	fp0 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp0)
	fp0 = fp0 * Mem0[a6 + 8:real96]
	fpsr = cond(fp0)
	v16 = (real96) fp0
	Mem0[a6 + -12:real96] = v16
	fpsr = cond(v16)
	v17 = Mem0[a6 + -16:word32] + 0x00000001
	Mem0[a6 + -16:word32] = v17
	CVZNX = cond(v17)
	goto l8000014A
	// succ:  l8000014A
l80000172:
	d0 = Mem0[a6 + -12:word32]
	CVZN = cond(d0)
	d1 = Mem0[a6 + -8:word32]
	CVZN = cond(d1)
	d2 = Mem0[a6 + -4:word32]
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v21 = d2
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	a7 = a7 - 0x00000004
	v22 = d1
	Mem0[a7:word32] = v22
	CVZN = cond(v22)
	a7 = a7 - 0x00000004
	v23 = d0
	Mem0[a7:word32] = v23
	CVZN = cond(v23)
	v24 = Mem0[a7:real96]
	a7 = a7 + 0x0000000C
	fp0 = (real80) v24
	fpsr = cond(fp0)
	v25 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v25
	CVZN = cond(d2)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn80000132_exit
fn80000132_exit:


// fn8000018E
// Return size: 4
define fn8000018E
fn8000018E_entry:
	// succ:  l8000018E
l8000018E:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x00000010
	a7 = a7 - 0x00000004
	v5 = d2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	fp0 = (real80) Mem0[0x80000508:real96]
	fpsr = cond(fp0)
	v9 = (real96) fp0
	Mem0[a6 + -12:real96] = v9
	fpsr = cond(v9)
	d0 = 1
	CVZN = cond(d0)
	v11 = d0
	Mem0[a6 + -16:word32] = v11
	CVZN = cond(v11)
	// succ:  l800001A8
l800001A8:
	fp0 = (real80) Mem0[a6 + -16:int32]
	fpsr = cond(fp0)
	fpsr = cond((real96) fp0 - Mem0[a6 + 8:real96])
	branch Test(GT,fpsr) l800001D4
	// succ:  l800001B8 l800001D4
l800001B8:
	fp0 = (real80) Mem0[a6 + -16:int32]
	fpsr = cond(fp0)
	fp1 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp1)
	fp1 = fp1 * fp0
	fpsr = cond(fp1)
	v14 = (real96) fp1
	Mem0[a6 + -12:real96] = v14
	fpsr = cond(v14)
	v15 = Mem0[a6 + -16:word32] + 0x00000001
	Mem0[a6 + -16:word32] = v15
	CVZNX = cond(v15)
	goto l800001A8
	// succ:  l800001A8
l800001D4:
	d0 = Mem0[a6 + -12:word32]
	CVZN = cond(d0)
	d1 = Mem0[a6 + -8:word32]
	CVZN = cond(d1)
	d2 = Mem0[a6 + -4:word32]
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v18 = d2
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	a7 = a7 - 0x00000004
	v19 = d1
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	a7 = a7 - 0x00000004
	v20 = d0
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	v21 = Mem0[a7:real96]
	a7 = a7 + 0x0000000C
	fp0 = (real80) v21
	fpsr = cond(fp0)
	v22 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v22
	CVZN = cond(d2)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn8000018E_exit
fn8000018E_exit:


// fn800001F2
// Return size: 4
define fn800001F2
fn800001F2_entry:
	// succ:  l800001F2
l800001F2:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x0000001C
	a7 = a7 - 0x0000000C
	Mem0[a7:real96] = fp2
	a7 = a7 - 0x00000004
	v6 = d2
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	fp0 = (real80) Mem0[a6 + 8:real96]
	fpsr = cond(fp0)
	v10 = (real96) fp0
	Mem0[a6 + -12:real96] = v10
	fpsr = cond(v10)
	fp1 = (real80) Mem0[0x80000514:real96]
	fpsr = cond(fp1)
	v12 = (real96) fp1
	Mem0[a6 + -24:real96] = v12
	fpsr = cond(v12)
	d0 = 3
	CVZN = cond(d0)
	v14 = d0
	Mem0[a6 + -28:word32] = v14
	CVZN = cond(v14)
	// succ:  l8000021C
l8000021C:
	d0 = 100
	CVZN = cond(d0)
	v15 = d0 - Mem0[a6 + -28:word32]
	CVZN = cond(v15)
	branch Test(LT,CZ) l8000028A
	// succ:  l80000224 l8000028A
l80000224:
	fp0 = (real80) Mem0[a6 + -28:int32]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v17 = (real96) fp0
	Mem0[a7:real96] = v17
	fpsr = cond(v17)
	fp0 = (real80) Mem0[a6 + 8:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v18 = (real96) fp0
	Mem0[a7:real96] = v18
	fpsr = cond(v18)
	call fn80000132 (retsize: 4;)
	a7 = a7 + 24
	fp2 = fp0
	fpsr = cond(fp2)
	fp0 = (real80) Mem0[a6 + -28:int32]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v19 = (real96) fp0
	Mem0[a7:real96] = v19
	fpsr = cond(v19)
	call fn8000018E (retsize: 4;)
	a7 = a7 + 12
	fp1 = fp2
	fpsr = cond(fp1)
	fp1 = fp1 / fp0
	fpsr = cond(fp1)
	fp0 = fp1
	fpsr = cond(fp0)
	fp0 = fp0 * Mem0[a6 + -24:real96]
	fpsr = cond(fp0)
	fp1 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp1)
	fp1 = fp1 + fp0
	fpsr = cond(fp1)
	v20 = (real96) fp1
	Mem0[a6 + -12:real96] = v20
	fpsr = cond(v20)
	v21 = -Mem0[a6 + -24:real96]
	Mem0[a6 + -24:real96] = v21
	fpsr = cond(v21)
	v22 = (real96) fp0
	Mem0[a6 + -24:real96] = v22
	fpsr = cond(v22)
	v23 = Mem0[a6 + -28:word32] + 0x00000002
	Mem0[a6 + -28:word32] = v23
	CVZNX = cond(v23)
	goto l8000021C
	// succ:  l8000021C
l8000028A:
	d0 = Mem0[a6 + -12:word32]
	CVZN = cond(d0)
	d1 = Mem0[a6 + -8:word32]
	CVZN = cond(d1)
	d2 = Mem0[a6 + -4:word32]
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v26 = d2
	Mem0[a7:word32] = v26
	CVZN = cond(v26)
	a7 = a7 - 0x00000004
	v27 = d1
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	a7 = a7 - 0x00000004
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	v29 = Mem0[a7:real96]
	a7 = a7 + 0x0000000C
	fp0 = (real80) v29
	fpsr = cond(fp0)
	d2 = Mem0[a6 + -44:word32]
	CVZN = cond(d2)
	v30 = a6 + -40
	fp2 = Mem0[v30:real96]
	v30 = v30 + 0x0000000C
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn800001F2_exit
fn800001F2_exit:


// fn800002AE
// Return size: 4
define fn800002AE
fn800002AE_entry:
	// succ:  l800002AE
l800002AE:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x0000001C
	a7 = a7 - 0x0000000C
	Mem0[a7:real96] = fp2
	a7 = a7 - 0x00000004
	v6 = d2
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	fp0 = (real80) Mem0[0x80000520:real96]
	fpsr = cond(fp0)
	v10 = (real96) fp0
	Mem0[a6 + -12:real96] = v10
	fpsr = cond(v10)
	fp1 = (real80) Mem0[0x8000052C:real96]
	fpsr = cond(fp1)
	v12 = (real96) fp1
	Mem0[a6 + -24:real96] = v12
	fpsr = cond(v12)
	d0 = 2
	CVZN = cond(d0)
	v14 = d0
	Mem0[a6 + -28:word32] = v14
	CVZN = cond(v14)
	// succ:  l800002DA
l800002DA:
	d0 = 100
	CVZN = cond(d0)
	v15 = d0 - Mem0[a6 + -28:word32]
	CVZN = cond(v15)
	branch Test(LT,CZ) l80000348
	// succ:  l800002E2 l80000348
l800002E2:
	fp0 = (real80) Mem0[a6 + -28:int32]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v17 = (real96) fp0
	Mem0[a7:real96] = v17
	fpsr = cond(v17)
	fp0 = (real80) Mem0[a6 + 8:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v18 = (real96) fp0
	Mem0[a7:real96] = v18
	fpsr = cond(v18)
	call fn80000132 (retsize: 4;)
	a7 = a7 + 24
	fp2 = fp0
	fpsr = cond(fp2)
	fp0 = (real80) Mem0[a6 + -28:int32]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v19 = (real96) fp0
	Mem0[a7:real96] = v19
	fpsr = cond(v19)
	call fn8000018E (retsize: 4;)
	a7 = a7 + 12
	fp1 = fp2
	fpsr = cond(fp1)
	fp1 = fp1 / fp0
	fpsr = cond(fp1)
	fp0 = fp1
	fpsr = cond(fp0)
	fp0 = fp0 * Mem0[a6 + -24:real96]
	fpsr = cond(fp0)
	fp1 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp1)
	fp1 = fp1 + fp0
	fpsr = cond(fp1)
	v20 = (real96) fp1
	Mem0[a6 + -12:real96] = v20
	fpsr = cond(v20)
	v21 = -Mem0[a6 + -24:real96]
	Mem0[a6 + -24:real96] = v21
	fpsr = cond(v21)
	v22 = (real96) fp0
	Mem0[a6 + -24:real96] = v22
	fpsr = cond(v22)
	v23 = Mem0[a6 + -28:word32] + 0x00000002
	Mem0[a6 + -28:word32] = v23
	CVZNX = cond(v23)
	goto l800002DA
	// succ:  l800002DA
l80000348:
	d0 = Mem0[a6 + -12:word32]
	CVZN = cond(d0)
	d1 = Mem0[a6 + -8:word32]
	CVZN = cond(d1)
	d2 = Mem0[a6 + -4:word32]
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v26 = d2
	Mem0[a7:word32] = v26
	CVZN = cond(v26)
	a7 = a7 - 0x00000004
	v27 = d1
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	a7 = a7 - 0x00000004
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	v29 = Mem0[a7:real96]
	a7 = a7 + 0x0000000C
	fp0 = (real80) v29
	fpsr = cond(fp0)
	d2 = Mem0[a6 + -44:word32]
	CVZN = cond(d2)
	v30 = a6 + -40
	fp2 = Mem0[v30:real96]
	v30 = v30 + 0x0000000C
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn800002AE_exit
fn800002AE_exit:


// fn8000036C
// Return size: 4
define fn8000036C
fn8000036C_entry:
	// succ:  l8000036C
l8000036C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 0x0000000C
	Mem0[a7:real96] = fp2
	a7 = a7 - 0x00000004
	v6 = d2
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	fp0 = (real80) Mem0[a6 + 8:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v10 = (real96) fp0
	Mem0[a7:real96] = v10
	fpsr = cond(v10)
	call fn800001F2 (retsize: 4;)
	a7 = a7 + 12
	fp2 = fp0
	fpsr = cond(fp2)
	fp1 = (real80) Mem0[a6 + 8:real96]
	fpsr = cond(fp1)
	a7 = a7 - 0x0000000C
	v12 = (real96) fp1
	Mem0[a7:real96] = v12
	fpsr = cond(v12)
	call fn800002AE (retsize: 4;)
	a7 = a7 + 12
	fp1 = fp2
	fpsr = cond(fp1)
	fp1 = fp1 / fp0
	fpsr = cond(fp1)
	fp0 = fp1
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v13 = (real96) fp0
	Mem0[a7:real96] = v13
	fpsr = cond(v13)
	v14 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v14
	CVZN = cond(d0)
	v16 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v16
	CVZN = cond(d1)
	v18 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v18
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v19 = d2
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	a7 = a7 - 0x00000004
	v20 = d1
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	a7 = a7 - 0x00000004
	v21 = d0
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	v22 = Mem0[a7:real96]
	a7 = a7 + 0x0000000C
	fp0 = (real80) v22
	fpsr = cond(fp0)
	d2 = Mem0[a6 + -16:word32]
	CVZN = cond(d2)
	v23 = a6 + -12
	fp2 = Mem0[v23:real96]
	v23 = v23 + 0x0000000C
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn8000036C_exit
fn8000036C_exit:


// fn800003CC
// Return size: 4
define fn800003CC
fn800003CC_entry:
	// succ:  l800003CC
l800003CC:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x0000000C
	fp0 = (real80) Mem0[0x80000538:real96]
	fpsr = cond(fp0)
	v6 = (real96) fp0
	Mem0[a6 + -12:real96] = v6
	fpsr = cond(v6)
	fp0 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v7 = (real96) fp0
	Mem0[a7:real96] = v7
	fpsr = cond(v7)
	fp0 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v8 = (real96) fp0
	Mem0[a7:real96] = v8
	fpsr = cond(v8)
	call fn80000132 (retsize: 4;)
	a7 = a7 + 24
	fp0 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v9 = (real96) fp0
	Mem0[a7:real96] = v9
	fpsr = cond(v9)
	call fn8000018E (retsize: 4;)
	a7 = a7 + 12
	fp0 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v10 = (real96) fp0
	Mem0[a7:real96] = v10
	fpsr = cond(v10)
	call fn800001F2 (retsize: 4;)
	a7 = a7 + 12
	fp0 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v11 = (real96) fp0
	Mem0[a7:real96] = v11
	fpsr = cond(v11)
	call fn800002AE (retsize: 4;)
	a7 = a7 + 12
	fp0 = (real80) Mem0[a6 + -12:real96]
	fpsr = cond(fp0)
	a7 = a7 - 0x0000000C
	v12 = (real96) fp0
	Mem0[a7:real96] = v12
	fpsr = cond(v12)
	call fn8000036C (retsize: 4;)
	a7 = a7 + 12
	d0 = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn800003CC_exit
fn800003CC_exit:


