word32 deregister_tm_clones(word32 a6, ptr32 & d1Out, ptr32 & a6Out, ptr32 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a6:[0..31]
// LiveOut: a6 a7 d0 d1
// Trashed: CVZNX a0 a6 a7 d0 d1
// Preserved:
deregister_tm_clones_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000080:
	word32 a6_23 = fp - 0x00000004
	word32 d0_24 = 0x00000003
	word32 d1_11 = 6
	branch true l800000AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000096:
	branch null == 0x00000000 l800000AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000A0:
	call null (retsize: 4;)
		uses: a0:null,a6:fp - 0x00000004,a7:fp - 0x00000008,d0:0x00000003,d1:6,Stack +0004:0x80002724,Stack +0008:a6
		defs: a6:a6_23,d0:d0_24,d1:d1_25
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000AA:
	word32 a6_32 = Mem31[a6_23:word32]
	d1Out = d1_11
	a6Out = a6_32
	a7Out = a6_23 + 0x00000004
	return d0_24
// DataOut:
// DataOut (flags):
// SymbolicIn:

deregister_tm_clones_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void register_tm_clones(word32 a6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a6:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a6 a7 d0
// Preserved:
register_tm_clones_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000AE:
	word32 d0_12 = 0
	branch false l800000C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000C4:
	d0_12 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000C6:
	word32 d0_18 = d0_12 >> 0x00000001
	branch d0_18 == 0x00000000 l800000E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000CA:
	branch null == 0x00000000 l800000E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000D4:
	call null (retsize: 4;)
		uses: a0:null,a6:fp - 0x00000004,a7:fp - 0x0000000C,d0:d0_18,Stack +0004:0x80002724,Stack +0008:d0_18,Stack +000C:a6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000E0:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

register_tm_clones_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __do_global_dtors_aux(word32 d1, word32 d2, word32 a2, word32 a6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a6:[0..31] d1:[0..31] d2:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a2 a6 a7 d0 d1 d2
// Preserved:
__do_global_dtors_aux_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000E4:
	word32 a6_40 = fp - 0x00000004
	word32 a7_12 = fp - 0x0000000C
	branch Mem15[0x80002724:byte] != 0x00 l8000014C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800000F4:
	word32 d0_21 = Mem15[0x80002726:word32]
	word32 a2_20 = 0x80002714
	word32 d2_25 = 0x00000000
	branch d0_21 >=u 0x00000000 l8000012C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000114:
	word32 d0_31 = d0_21 + 0x00000001
	Mem34[0x80002726:word32] = d0_31
	word32 a0_37 = Mem34[a2_20 + d0_31 * 4:word32]
	call a0_37 (retsize: 4;)
		uses: a0:a0_37,a2:a2_36,a6:a6_40,a7:a7_38,d0:d0_31,d1:d1_96,d2:d2_43,Stack +0000:a6,Stack +FFFFFFF8:d2,Stack +FFFFFFFC:a2
		defs: a2:a2_42,a6:a6_41,a7:a7_39,d1:d1_97,d2:d2_44
	d0_21 = Mem34[0x80002726:word32]
	branch d2_25 - d0_21 >u 0x00000000 l80000114
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000012C:
	word32 d1_54
	word32 a6_56
	word32 a7_57
	word32 d0_53 = deregister_tm_clones(a6_40, out d1_54, out a6_56, out a7_57)
	branch null == 0x00000000 l80000144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000013A:
	Mem69[a7_57 - 0x00000004:word32] = 0x8000065C
	call null (retsize: 4;)
		uses: a0:null,a2:a2_72,a6:a6_56,a7:a7_57 - 0x00000004,d0:d0_53,d1:d1_54,d2:d2_74,Stack +0000:a6,Stack +FFFFFFF8:d2,Stack +FFFFFFFC:a2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000144:
	Mem82[0x80002724:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000014C:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

__do_global_dtors_aux_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void call___do_global_dtors_aux()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a6 a7
call___do_global_dtors_aux_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000158:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

call___do_global_dtors_aux_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void frame_dummy(word32 d0, word32 a1, word32 a6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a6:[0..31] d0:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a6 a7 d0
// Preserved:
frame_dummy_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000160:
	word32 a6_18 = fp - 0x00000004
	word32 a7_25 = fp - 0x00000004
	branch null == 0x00000000 l8000017E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000016E:
	word32 a7_17
	call null (retsize: 4;)
		uses: a0:null,a1:a1,a6:fp - 0x00000004,a7:fp - 0x0000000C,d0:d0,Stack +0004:0x8000065C,Stack +0008:0x8000272A,Stack +000C:a6
		defs: a6:a6_18,a7:a7_17,d0:d0_23
	dwLoc08 = 0x8000272A
	dwLoc0C = 0x8000065C
	a7_25 = a7_17 + 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000017E:
	branch Mem27[0x8000271C:word32] != 0x00000000 l8000018E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000018E:
	branch null == 0x00000000 l80000188
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000198:
	word32 a7_38 = a7_25 - 4
	Mem40[a7_38:word32] = 0x8000271C
	word32 a6_44
	call null (retsize: 4;)
		uses: a0:0x8000271C,a1:null,a6:a6_43,a7:a7_38,d0:d0_47,Stack +0000:a6,Stack +FFFFFFF8:dwLoc0C_82,Stack +FFFFFFFC:dwLoc08_80
		defs: a6:a6_44
	word32 a6_51 = Mem40[a6_44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800001A0_thunk_register_tm_clones:
	register_tm_clones(a6_51)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000188:
	word32 a6_65 = Mem27[a6_18:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000018A_thunk_register_tm_clones:
	register_tm_clones(a6_65)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

frame_dummy_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void call_frame_dummy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a6 a7
call_frame_dummy_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800001A4:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

call_frame_dummy_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void sine_taylor(real64 rArg04)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..63]
// LiveOut:
// Trashed:
// Preserved:
_Z11sine_taylord_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800001AC:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

_Z11sine_taylord_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void factorial(int32 dwArg04)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed:
// Preserved:
_ZL9factoriali_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000033C:
	word32 dwLoc08_35 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000034C:
	branch dwLoc08_35 - dwArg04 > 0x00000000 l8000036A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000036A:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

_ZL9factoriali_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000356:
	dwLoc08_35 = dwLoc08_35 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:



void pow_int(real64 rArg04, int32 dwArg0C)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..63] Stack +000C:[0..31]
// LiveOut:
// Trashed:
// Preserved:
_ZL7pow_intdi_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000372:
	word32 dwLoc08_49 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000386:
	branch dwLoc08_49 - dwArg0C >= 0x00000000 l800003A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800003A8:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

_ZL7pow_intdi_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000390:
	dwLoc08_49 = dwLoc08_49 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:



void sine_taylor(real64 rArg04, int32 dwArg0C)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fp0:[0..79] Stack +0004:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed:
// Preserved:
_Z11sine_taylordi_entry:
	word32 dwArg04_123 = SLICE(rArg04, word32, 0)
	word32 dwArg08_125 = SLICE(rArg04, word32, 32)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800003BC:
	word32 dwLoc08_127 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800003D6:
	branch dwLoc08_127 - dwArg0C > 0x00000000 l80000428
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000428:
	word32 dwLoc08_130 = 5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000042E:
	branch dwLoc08_130 - dwArg0C > 0x00000000 l80000480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000480:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

_Z11sine_taylordi_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000438:
	pow_int(SEQ(dwArg04_123, dwArg08_125), dwLoc08_130)
	factorial(dwLoc08_130)
	dwLoc08_130 = dwLoc08_130 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800003E0:
	pow_int(SEQ(dwArg04_123, dwArg08_125), dwLoc08_127)
	factorial(dwLoc08_127)
	dwLoc08_127 = dwLoc08_127 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:



void main()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZNX d0
// Preserved: a6 a7
main_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000049A:
	sine_taylor(1374396351.0)
	_sin(1374396351.0, 1.8446744072626e+19, fp - 0x00000008)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

main_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void _sin(real64 rArg04, real64 rArg0C, int32 & tArg14)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +000C:[0..63] Stack +0014:[0..31]
// LiveOut:
// Trashed:
// Preserved:
_Z4_sinddRi_entry:
	word32 dwArg04_110 = SLICE(rArg04, word32, 0)
	word32 dwArg08_112 = SLICE(rArg04, word32, 32)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l800004DE:
	real64 v9_14 = (real64) ((real96) SEQ(dwArg04_110, dwArg08_112) * SEQ(dwArg04_110, dwArg08_112))
	word32 dwLoc20_121 = 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000051A:
	real64 rLoc14_123
	real64 rLoc0C_122
	branch (real64) ((real96) rLoc0C_122 / rLoc14_123) < rArg0C l8000060E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000060E:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

_Z4_sinddRi_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000530:
	Mem106[tArg14:word32] = Mem98[tArg14:word32] + 0x00000001
	word32 v23_57 = dwLoc20_121 + 0x00000000
	rLoc0C_122 = (real64) ((real96) (real64) ((real96) rLoc0C_122 * v9_14) * v9_14)
	dwLoc20_121 = v23_57 + 0x00000003
	rLoc14_123 = (real64) ((real96) (real64) ((real96) (real64) ((real96) (real64) ((real96) rLoc14_123 * (real80) ((real96) v23_57)) * (real80) ((real96) (v23_57 + 0x00000001))) * (real80) ((real96) (v23_57 + 0x00000002))) * (real80) ((real96) (v23_57 + 0x00000003)))
	rLoc0C_122 = SEQ(dwArg04_110, dwArg08_112) (alias)
	rLoc14_123 = 0x000000003FF00000 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __do_global_ctors_aux(word32 a2, word32 a6)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a6:[0..31]
// LiveOut:
// Trashed: CVZN a0 a2 a6 a7 d0
// Preserved:
__do_global_ctors_aux_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000624:
	word32 a0_12 = Mem11[0x8000270C:word32]
	word32 a6_21 = fp - 0x00000004
	word32 a7_19 = fp - 0x00000008
	word32 a2_13 = 0x8000270C
	branch a0_12 == -1 l80000646
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000063C:
	word32 a2_24
	call a0_12 (retsize: 4;)
		uses: a0:a0_18,a2:a2_23,a6:a6_21,a7:a7_19,d0:-1,Stack +0000:a6,Stack +FFFFFFFC:a2
		defs: a2:a2_24,a6:a6_22,a7:a7_20
	a0_12 = Mem11[a2_24 - 4:word32]
	a2_13 = a2_24 - 4
	branch a0_12 != -1 l8000063C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l80000646:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

__do_global_ctors_aux_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void call___do_global_ctors_aux()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a6 a7
call___do_global_ctors_aux_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l8000064E:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

call___do_global_ctors_aux_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



