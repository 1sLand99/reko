// _init
// Return size: 8
define _init
_init_entry:
	// succ:  l00000000004003E0
l00000000004003E0:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000600FF8:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004003F5
	// succ:  l00000000004003F0 l00000000004003F5
l00000000004003F0:
	call __gmon_start__ (retsize: 8;)
	// succ:  l00000000004003F5
l00000000004003F5:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  _init_exit
_init_exit:


// _start
// Return size: 0
define _start
_start_entry:
	// succ:  l0000000000400440
l0000000000400440:
	rsp = fp
	rbp = (uint64) (ebp ^ ebp)
	SZO = cond(ebp)
	C = false
	r9 = rdx
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = rsp
	__align(rsp)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rax
	v11 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v11
	r8 = 0x00000000004005C0
	rcx = 0x0000000000400550
	rdi = 0x000000000040053D
	rax = DPB(rax, __libc_start_main(rdi, rsi, rdx, rcx, r8, r9, Mem0[rsp:(ptr void)]), 0)
	__hlt()
_start_exit:


// deregister_tm_clones
// Return size: 8
define deregister_tm_clones
deregister_tm_clones_entry:
	// succ:  l0000000000400470
l0000000000400470:
	rsp = fp
	rax = (uint64) 0x00601047
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r8 = r8 - 6295616
	SCZO = cond(r8)
	SCZO = cond(rax - 0x000000000000000E)
	rbp = rsp
	branch Test(UGT,CZ) l0000000000400487
	// succ:  l0000000000400485 l0000000000400487
l0000000000400485:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  deregister_tm_clones_exit
l0000000000400487:
	rax = (uint64) 0x00000000
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000400485
	// succ:  l0000000000400491 l0000000000400485
l0000000000400491:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = (uint64) 0x00601040
	call eax (retsize: 4;)
	return
	// succ:  deregister_tm_clones_exit
deregister_tm_clones_exit:


// register_tm_clones
// Return size: 0
define register_tm_clones
register_tm_clones_entry:
	// succ:  l00000000004004A0
l00000000004004A0:
	rsp = fp
	rax = (uint64) 0x00601040
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r8 = r8 - 6295616
	SCZO = cond(r8)
	rax = rax >> 0x0000000000000003
	SCZO = cond(rax)
	rbp = rsp
	rdx = rax
	rdx = rdx >>u 0x000000000000003F
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	rax = rax >> 0x0000000000000001
	SCZO = cond(rax)
	branch Test(NE,Z) l00000000004004C4
	// succ:  l00000000004004C2 l00000000004004C4
l00000000004004C2:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  register_tm_clones_exit
l00000000004004C4:
	rdx = (uint64) 0x00000000
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004004C2
	// succ:  l00000000004004CE l00000000004004C2
l00000000004004CE:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rax
	rdi = (uint64) 0x00601040
	call edx (retsize: 4;)
	return
	// succ:  register_tm_clones_exit
register_tm_clones_exit:


// __do_global_dtors_aux
// Return size: 8
define __do_global_dtors_aux
__do_global_dtors_aux_entry:
	// succ:  l00000000004004E0
l00000000004004E0:
	rsp = fp
	SCZO = cond(Mem0[0x0000000000601040:byte] - 0x00)
	branch Test(NE,Z) l00000000004004FA
	// succ:  l00000000004004E9 l00000000004004FA
l00000000004004E9:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	call deregister_tm_clones (retsize: 8;)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	Mem0[0x0000000000601040:byte] = 0x01
	// succ:  l00000000004004FA
l00000000004004FA:
	return
	// succ:  __do_global_dtors_aux_exit
__do_global_dtors_aux_exit:


// frame_dummy
// Return size: 8
define frame_dummy
frame_dummy_entry:
	// succ:  l0000000000400500
l0000000000400500:
	rsp = fp
	SCZO = cond(Mem0[0x0000000000600E20:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000400528
	// succ:  l000000000040050A l0000000000400528
l000000000040050A:
	rax = (uint64) 0x00000000
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000400528
	// succ:  l0000000000400514 l0000000000400528
l0000000000400514:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rdi = (uint64) 0x00600E20
	rbp = rsp
	call eax (retsize: 4;)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	// succ:  l000000000040051F_thunk_register_tm_clones
l000000000040051F_thunk_register_tm_clones:
	call register_tm_clones (retsize: 0;)
	return
	// succ:  frame_dummy_exit
l0000000000400528:
	call register_tm_clones (retsize: 0;)
	return
	// succ:  l00000000004004A0 frame_dummy_exit
frame_dummy_exit:


// f
// Return size: 8
define f
f_entry:
	// succ:  l000000000040052D
l000000000040052D:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rdi = (uint64) 0x00000078
	rax = DPB(rax, putchar(rdi), 0)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  f_exit
f_exit:


// main
// Return size: 8
define main
main_entry:
	// succ:  l000000000040053D
l000000000040053D:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rax = (uint64) 0x00000000
	call f (retsize: 8;)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  main_exit
main_exit:


// __libc_csu_init
// Return size: 8
define __libc_csu_init
__libc_csu_init_entry:
	// succ:  l0000000000400550
l0000000000400550:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15 = (uint64) edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rdx
	v12 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v12
	r12 = 0x0000000000600E10
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = 0x0000000000600E18
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbp = rbp - r12
	SCZO = cond(rbp)
	rbx = (uint64) (ebx ^ ebx)
	SZO = cond(ebx)
	C = false
	rbp = rbp >> 0x0000000000000003
	SCZO = cond(rbp)
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	call _init (retsize: 8;)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l00000000004005A6
	// succ:  l0000000000400588 l00000000004005A6
l0000000000400588:
	// succ:  l0000000000400590
l0000000000400590:
	rdx = r13
	rsi = r14
	rdi = (uint64) r15d
	call Mem0[r12 + rbx * 0x0000000000000008:word32] (retsize: 4;)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(rbx - rbp)
	branch Test(NE,Z) l0000000000400590
	// succ:  l00000000004005A6 l0000000000400590
l00000000004005A6:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  __libc_csu_init_exit
__libc_csu_init_exit:


// __libc_csu_fini
// Return size: 8
define __libc_csu_fini
__libc_csu_fini_entry:
	// succ:  l00000000004005C0
l00000000004005C0:
	rsp = fp
	return
	// succ:  __libc_csu_fini_exit
__libc_csu_fini_exit:


// _fini
// Return size: 8
define _fini
_fini_entry:
	// succ:  l00000000004005C4
l00000000004005C4:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  _fini_exit
_fini_exit:


