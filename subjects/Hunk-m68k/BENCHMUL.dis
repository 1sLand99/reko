void fn00001000(word32 d0, word32 d7, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31] d7:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d7
// Preserved:
fn00001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001000:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000100A:
	word32 a6_9 = Mem0[0x00000004:word32]
	word32 d2_102 = d0
	word32 a2_196 = a0
	branch Mem0[a6_9 + 20:word16] >=u 0x0024 l00001036
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001020:
	word32 a0_13 = 0x000040F8
	word32 d0_16 = 0x0000C11E >>u 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001030:
	Mem19[a0_13:word32] = 0x00000000
	a0_13 = a0_13 + 4
	d0_16 = d0_16 - 0x00000001
	branch d0_16 != 0x00000000 l00001030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001036:
	Mem30[0x000040F8:word32] = fp
	Mem34[0x000040FC:word32] = a6_9
	word32 d0_37 = FindTask(0x00000000)
	word32 a1_255 = 0x000012BC
	word32 d0_112 = OpenLibrary(0x000012BC, 0)
	branch d0_112 == 0x00000000 l00001226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001226:
	Alert(0x00038007)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001056:
	word32 d4_75
	Mem68[0x00004100:word32] = d0_112
	branch Mem68[d0_37 + 172:word32] != 0x00000000 l00001066
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001066:
	word32 a0_74 = a0
	d4_75 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000106A:
	branch Mem68[a0_728:byte] != 0x20 l00001072
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001070:
	d4_75 = DPB(d4_75, (word16) d4_75 + 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001072:
	a0_74 = a0_728 + 1
	a0_728 = a0_74
	branch Mem68[a0_728:byte] != 0x00 l0000106A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001060:
	d4_75 = 2
	d2_102 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001076:
	word32 d0_100 = d4_75 << 0x00000002
	word32 d0_107 = d0_100 + d2_102
	word32 d1_111 = 0x00010001
	d0_112 = AllocMem(d0_107 + 0x00000011, 0x00010001)
	branch d0_112 == 0x00000000 l0000123E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000123E:
	CloseLibrary(Mem68[0x00004100:word32])
	Alert(0x00010000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000125C:
	branch Mem153[d0_37 + 172:word32] != 0x00000000 l00001268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001262:
	fn00001214(d0_37)
	fn0000126C(d0_112)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001268:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001096:
	word32 a6_235
	word32 a0_436
	word32 dwLoc0C_596
	Mem169[d0_112:word32] = d0_107 + 0x00000011
	Mem173[d0_112 + 12:word32] = d4_75 - 0x00000001
	Mem177[d0_112 + 8:word32] = d0_112 + 16 + d0_100
	Mem179[0x00000000:word32] = 0x00000000
	word32 d0_180 = Mem179[d0_37 + 172:word32]
	branch d0_180 == 0x00000000 l00001190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001190:
	fn00001214(d0_37)
	Mem187[0x00004104:word32] = d0_180
	Mem189[0x00004108:word32] = d0_180
	Mem194[0x00000000:word32] = 0x00000000
	dwLoc0C_596 = d0_180
	a2_196 = d0_180
	word32 d0_197 = Mem194[d0_180 + 36:word32]
	branch d0_197 == 0x00000000 l000011B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011AE:
	Enable()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011B6:
	Supervisor(d0_112)
	Mem209[d0_112 + 4:word32] = d0_197
	d1_111 = 0x000012C8
	d2_102 = 0x000003ED
	branch d0_197 != 0x00000000 l000011D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011D2:
	Mem214[0x0000410C:word32] = d0_197
	Mem216[0x00004110:word32] = d0_197
	Mem218[0x00004114:word32] = d0_197
	Mem221[d0_37 + 156:word32] = d0_197
	Mem223[d0_37 + 160:word32] = d0_197
	word32 d0_227 = Mem223[(d0_197 << 0x00000002) + 8:word32]
	branch d0_227 == 0x00000000 l000011F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F0:
	Mem231[d0_37 + 164:word32] = d0_227
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F4:
	a6_235 = Mem234[0x000040FC:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CE_thunk_fn0000127C:
	fn0000127C(20, out a1_722, out a4_723, out a5_724)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010B6:
	word32 d0_252 = Mem179[(d0_180 << 0x00000002) + 16:word32]
	a1_255 = Mem179[d0_112 + 8:word32]
	word32 a0_260 = (d0_252 << 0x00000002) + 1
	word32 d0_261 = (int32) Mem179[d0_252 << 0x00000002:byte]
	Mem262[a0_260 + d0_261:byte] = 0x00
	Mem264[d0_112 + 16:word32] = a0_260
	word32 a6_265 = d0_112 + 20
	word32 d3_266 = 1
	word32 a0_271 = a0 + d2_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DA:
	a0_271 = a0_271 - 1
	branch Mem264[a0_271:byte] >u 0x20 l000010E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DE_1:
	d2_102 = d2_102 - 0x00000001
	branch d2_102 != 0xFFFFFFFF l000010DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E2:
	Mem281[a0_271 + 1:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E6:
	byte v37_288 = Mem287[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v37_288, 0)
	branch v37_288 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010EA:
	branch v37_288 == 0x20 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F0:
	branch v37_288 == 0x09 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F6:
	branch d3_266 - Mem287[d0_112 + 12:word32] == 0x00000000 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010FC:
	Mem308[a6_265:word32] = a1_255
	a6_265 = a6_265 + 4
	d3_266 = DPB(d3_266, (word16) d3_266 + 0x0001, 0)
	branch v37_288 == 0x22 l0000111A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111A:
	byte v64_318 = Mem317[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v64_318, 0)
	branch v64_318 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111E:
	branch v64_318 == 0x22 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001124:
	branch v64_318 != 0x2A l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000112A:
	byte v67_330 = Mem317[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v67_330, 0)
	d2_102 = DPB(d2_102, v67_330 & 0xDF, 0)
	branch (v67_330 & 0xDF) != 0x4E l0000113C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000113C:
	branch (v67_330 & 0xDF) != 0x45 l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001142:
	d1_111 = 27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001138:
	d1_111 = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001144:
	Mem352[a1_255:byte] = (byte) d1_111
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001106:
	Mem356[a1_255:byte] = v37_288
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001108:
	byte v45_361 = Mem360[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v45_361, 0)
	branch v45_361 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001148:
	Mem369[a1_255:byte] = 0x00
	Mem374[a6_265:word32] = 0x00000000
	execPrivate4()
	Mem405[0x0000410C:word32] = d0_261
	execPrivate5()
	Mem407[0x00004110:word32] = d0_261
	a6_235 = Mem407[0x000040FC:word32]
	dwLoc0C_596 = d0_112 + 16
	dwLoc10 = d3_266
	branch Mem407[a6_235 + 20:word16] <u 0x0024 l0000117A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001172:
	word32 v81_417 = Mem407[d0_37 + 224:word32]
	Mem418[0x00004114:word32] = v81_417
	branch v81_417 != 0x00000000 l0000117E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117A:
	Mem424[0x00004114:word32] = d0_261
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117E:
	branch Mem428[d0_37 + 8:byte] != 0x0D l000011F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F8:
	a0_436 = Mem434[d0_37 + 58:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001186:
	word32 a0_439 = Mem428[d0_37 + 176:word32]
	a0_436 = a0_439 + 4 - Mem428[a0_439:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001202:
	Mem450[0x00004120:word32] = a0_436
	Mem458[0x00004124:word32] = fp - 16
	fn00001354(d1_111, d2_102, d7, a0_436, a1_255, a2_196, d0_37, 0x0000C0EE, d0_112, a6_235, dwLoc10, dwLoc0C_596)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001212_thunk_fn0000127C:
	fn0000127C(0, out a1_725, out a4_726, out a5_727)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000110C:
	branch v45_361 == 0x20 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001116:
	Mem542[a1_255:byte] = 0x00
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001112:
	Mem549[a1_255:byte] = v45_361
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001214_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000126C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001278(word32 dwArg04, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1 d2
// Preserved:
fn00001278_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278_thunk_fn0000127C:
	word32 a1_6
	word32 a4_8
	word32 a5_9
	word32 d1_13 = fn0000127C(dwArg04, out a1_6, out a4_8, out a5_9)
	a1Out = a1_6
	a4Out = a4_8
	a5Out = a5_9
	return d1_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001278_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000127C(word32 d2, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000127C:
	word32 a7_4 = Mem0[0x000040F8:word32]
	word32 v8_9 = Mem0[a7_4 - 4:word32]
	word32 v6_6 = Mem0[a7_4 - 8:word32]
	word32 d1_12 = Mem0[v8_9 + 4:word32]
	branch d1_12 == 0x00000000 l0000129E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001296:
	execPrivate1()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000129E:
	CloseLibrary(Mem0[0x00004100:word32])
	branch v6_6 == 0x00000000 l000012B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012AE:
	fn0000126C(v6_6)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012B0:
	FreeMem(v8_9, Mem0[v8_9:word32])
	a1Out = v8_9
	a4Out = 0x0000C0EE
	a5Out = v8_9
	return d1_12
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000127C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000012D0(word32 d1, word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012D0:
	branch 0x00004240 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012E2:
	word32 d2_16 = 1
	branch Mem11[0x00004244:word32] == 0x00000000 l000012F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012EA:
	d2_16 = d2_16 + 0x00000001
	branch Mem11[0x00004240 + (d2_16 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012F6:
	word32 d2_33 = d2_16 - 0x00000001
	branch d2_33 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012FA:
	word32 d0_38 = d2_33 << 0x00000002
	word32 a2_42 = Mem11[0x00004240 + d0_38:word32]
	call a2_42 (retsize: 4;)
		uses: a1:a1,a2:a2_42,a3:0x00004240,a4:a4,a5:a5,a6:a6,a7:fp - 12,d0:d0_38,d1:d1,d2:d2_36,Stack +0000:dwLoc10,Stack +0004:d2,Stack +0008:a2,Stack +000C:a3,Stack +0014:dwArg04
	d2_33 = d2_33 - 0x00000001
	branch d2_33 != 0x00000000 l000012FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001308:
	word32 a1_59
	word32 a4_61
	word32 a5_62
	word32 d1_66 = fn00001278(dwArg04, out a1_59, out a4_61, out a5_62)
	a1Out = a1_59
	a4Out = a4_61
	a5Out = a5_62
	return d1_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000012D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000131C(word32 d1, word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000131C:
	branch Mem8[0x00004128:word32] != 0x00000000 l0000134E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001328:
	word32 a3_13 = Mem8[0x00004250:word32]
	Mem16[0x00004128:word32] = 1
	word32 d0_17 = a3_13
	branch a3_13 == 0x00000000 l00001346
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000133A:
	a2 = Mem16[a3_13 + 4:word32]
	call a2 (retsize: 4;)
		uses: a1:a1,a2:a2_22,a3:a3_20,a4:a4,a5:a5,a6:a6,a7:fp - 8,d0:d0_24,d1:d1,d2:d2,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04
	a3_13 = Mem16[a3_13:word32]
	d0_17 = a3_13
	branch a3_13 != 0x00000000 l0000133A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001346:
	d1 = fn000012D0(d1, d2, a1, a2, a3_13, a4, a5, a6, dwArg04, out a1, out a4, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000134E:
	a1Out = a1
	a4Out = a4
	a5Out = a5
	return d1
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000131C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001354(word32 d1, word32 d2, word32 d7, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] d7:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1 d7
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001354:
	word32 a3_17 = 0x00004238
	word32 d0_10 = 0x00004234
	branch 0x00004234 == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001366:
	branch Mem8[0x00004238:word32] == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000136A:
	word32 v11_19 = Mem8[a3_17:word32]
	a3_17 = a3_17 + 4
	call v11_19 (retsize: 4;)
		uses: a0:a0_87,a1:a1,a2:v11_19,a3:a3_20,a4:a4,a5:a5,a6:a6,a7:fp - 8,d0:d0_23,d1:d1,d2:d2,d7:d7,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04,Stack +0014:dwArg08,Stack +FFFFFFF8:dwLoc14,Stack +FFFFFFFC:dwLoc10
		defs: a0:a0_88,d0:d0_24
	branch Mem8[a3_17:word32] != 0x00000000 l0000136A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001372:
	word32 a1_49
	word32 a2_50
	word32 a3_51
	word32 a4_52
	word32 a5_53
	word32 a6_54
	word32 d1_56
	fn0000131C(d1_56, d2, a1_49, a2_50, a3_51, a4_52, a5_53, a6_54, fn00001390(a3_17, a4, a5, out d1_56, out a1_49, out a2_50, out a3_51, out a4_52, out a5_53, out a6_54), out a1_118, out a4_119, out a5_120)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001354_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001390(word32 a3, word32 a4, word32 a5, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] a4:[0..31] a5:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d7
// Preserved: a7 d2 d3 d4 d5 d6
fn00001390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001390:
	word32 a1_26
	word32 a5_27
	word32 d1_28
	word32 a1_42
	word32 a3_44
	word32 a1_69
	word32 a3_71
	word32 a5_73
	word32 d1_76
	word32 a1_96
	word32 a3_98
	word32 a5_100
	word32 d1_103
	word32 a1_123
	word32 a3_125
	word32 d0_129 = fn00002E40(fn00002E40(fn000016FC(fn00002E40(fn00004068(a3, a4, a5, 0x000016B0, out d1_28, out a1_26, out a5_27), d1_28, a1_26, a3, a5_27, 0x000016CC, out d1_578, out a1_42, out a3_44, out a5_579), a1_42, a3_44, 0x000016D0, out d1_76, out a1_69, out a2_580, out a3_71, out a4_581, out a5_73, out a6_582), d1_76, a1_69, a3_71, a5_73, 0x000016EC, out d1_103, out a1_96, out a3_98, out a5_100), d1_103, a1_96, a3_98, a5_100, 0x000016F0, out d1_583, out a1_123, out a3_125, out a5_584)
	word32 d3_142 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000168E:
	branch d3_142 - dwLoc04 <= 0x00000000 l000013EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013EA:
	word32 d2_151 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001684:
	d0_129 = 40
	branch 40 - d2_151 >= 0x00000000 l000013F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013F0:
	word32 d4_166 = __swap(3) *u (word16) dwLoc14
	word32 d0_173 = (word16) dwLoc14 *u 3 + DPB(__swap(DPB(d4_166, (word16) (d4_166 + __swap(dwLoc14) *u 0x0003), 0)), 0x0000, 0)
	word32 d4_179 = __swap(d0_173) *u (word16) dwLoc14
	word32 d0_186 = d0_173 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_179, (word16) (d4_179 + __swap(dwLoc14) *u (word16) d0_173), 0)), 0x0000, 0)
	word32 d4_192 = __swap(d0_186) *u (word16) dwLoc14
	word32 d0_199 = d0_186 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_192, (word16) (d4_192 + __swap(dwLoc14) *u (word16) d0_186), 0)), 0x0000, 0)
	word32 d4_205 = __swap(d0_199) *u (word16) dwLoc14
	word32 d0_212 = d0_199 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_205, (word16) (d4_205 + __swap(dwLoc14) *u (word16) d0_199), 0)), 0x0000, 0)
	word32 d4_218 = __swap(d0_212) *u (word16) dwLoc14
	word32 d0_225 = d0_212 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_218, (word16) (d4_218 + __swap(dwLoc14) *u (word16) d0_212), 0)), 0x0000, 0)
	word32 d4_231 = __swap(d0_225) *u (word16) dwLoc14
	word32 d0_238 = d0_225 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_231, (word16) (d4_231 + __swap(dwLoc14) *u (word16) d0_225), 0)), 0x0000, 0)
	word32 d4_244 = __swap(d0_238) *u (word16) dwLoc14
	word32 d0_251 = d0_238 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_244, (word16) (d4_244 + __swap(dwLoc14) *u (word16) d0_238), 0)), 0x0000, 0)
	word32 d4_257 = __swap(d0_251) *u (word16) dwLoc14
	word32 d0_264 = d0_251 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_257, (word16) (d4_257 + __swap(dwLoc14) *u (word16) d0_251), 0)), 0x0000, 0)
	word32 d4_270 = __swap(d0_264) *u (word16) dwLoc14
	word32 d0_277 = d0_264 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_270, (word16) (d4_270 + __swap(dwLoc14) *u (word16) d0_264), 0)), 0x0000, 0)
	word32 d4_283 = __swap(d0_277) *u (word16) dwLoc14
	word32 d0_290 = d0_277 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_283, (word16) (d4_283 + __swap(dwLoc14) *u (word16) d0_277), 0)), 0x0000, 0)
	word32 d4_296 = __swap(d0_290) *u (word16) dwLoc14
	word32 d0_303 = d0_290 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_296, (word16) (d4_296 + __swap(dwLoc14) *u (word16) d0_290), 0)), 0x0000, 0)
	word32 d4_309 = __swap(d0_303) *u (word16) dwLoc14
	word32 d0_316 = d0_303 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_309, (word16) (d4_309 + __swap(dwLoc14) *u (word16) d0_303), 0)), 0x0000, 0)
	word32 d4_322 = __swap(d0_316) *u (word16) dwLoc14
	word32 d0_329 = d0_316 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_322, (word16) (d4_322 + __swap(dwLoc14) *u (word16) d0_316), 0)), 0x0000, 0)
	word32 d4_335 = __swap(d0_329) *u (word16) dwLoc14
	word32 d0_342 = d0_329 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_335, (word16) (d4_335 + __swap(dwLoc14) *u (word16) d0_329), 0)), 0x0000, 0)
	word32 d4_348 = __swap(d0_342) *u (word16) dwLoc14
	word32 d0_355 = d0_342 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_348, (word16) (d4_348 + __swap(dwLoc14) *u (word16) d0_342), 0)), 0x0000, 0)
	word32 d4_361 = __swap(d0_355) *u (word16) dwLoc14
	word32 d0_368 = d0_355 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_361, (word16) (d4_361 + __swap(dwLoc14) *u (word16) d0_355), 0)), 0x0000, 0)
	word32 d4_374 = __swap(d0_368) *u (word16) dwLoc14
	word32 d0_381 = d0_368 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_374, (word16) (d4_374 + __swap(dwLoc14) *u (word16) d0_368), 0)), 0x0000, 0)
	word32 d4_387 = __swap(d0_381) *u (word16) dwLoc14
	word32 d0_394 = d0_381 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_387, (word16) (d4_387 + __swap(dwLoc14) *u (word16) d0_381), 0)), 0x0000, 0)
	word32 d4_400 = __swap(d0_394) *u (word16) dwLoc14
	word32 d0_407 = d0_394 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_400, (word16) (d4_400 + __swap(dwLoc14) *u (word16) d0_394), 0)), 0x0000, 0)
	word32 d4_413 = __swap(d0_407) *u (word16) dwLoc14
	word32 d0_420 = d0_407 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_413, (word16) (d4_413 + __swap(dwLoc14) *u (word16) d0_407), 0)), 0x0000, 0)
	word32 d4_426 = __swap(d0_420) *u (word16) dwLoc14
	word32 d0_433 = d0_420 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_426, (word16) (d4_426 + __swap(dwLoc14) *u (word16) d0_420), 0)), 0x0000, 0)
	word32 d4_439 = __swap(d0_433) *u (word16) dwLoc14
	word32 d0_446 = d0_433 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_439, (word16) (d4_439 + __swap(dwLoc14) *u (word16) d0_433), 0)), 0x0000, 0)
	word32 d4_452 = __swap(d0_446) *u (word16) dwLoc14
	word32 d0_459 = d0_446 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_452, (word16) (d4_452 + __swap(dwLoc14) *u (word16) d0_446), 0)), 0x0000, 0)
	word32 d4_465 = __swap(d0_459) *u (word16) dwLoc14
	word32 d0_472 = d0_459 *u (word16) dwLoc14 + DPB(__swap(DPB(d4_465, (word16) (d4_465 + __swap(dwLoc14) *u (word16) d0_459), 0)), 0x0000, 0)
	word32 d5_479 = __swap(d0_472) *u (word16) dwLoc14
	dwLoc14 = d0_472 *u (word16) dwLoc14 + DPB(__swap(DPB(d5_479, (word16) (d5_479 + __swap(dwLoc14) *u (word16) d0_472), 0)), 0x0000, 0)
	d2_151 = d2_151 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000168C:
	d3_142 = d3_142 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001696:
	word32 a1_507
	word32 a2_508
	word32 a3_509
	word32 a4_510
	word32 a5_511
	word32 a6_512
	word32 d1_514
	word32 d0_513 = fn000016FC(d0_129, a1_123, a3_125, 0x000016F4, out d1_514, out a1_507, out a2_508, out a3_509, out a4_510, out a5_511, out a6_512)
	d1Out = d1_514
	a1Out = a1_507
	a2Out = a2_508
	a3Out = a3_509
	a4Out = a4_510
	a5Out = a5_511
	a6Out = a6_512
	return d0_513
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000016FC(word32 d0, word32 a1, word32 a3, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] d0:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a7
fn000016FC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016FC:
	word32 a2_19
	word32 a3_20
	word32 a4_21
	word32 a5_22
	word32 a6_23
	word32 a1_32
	word32 d1_33
	word32 d0_25 = fn00001718(d0, a1, a3, Mem10[0x00004258:word32], dwArg04, fp + 8, out d1_33, out a1_32, out a2_19, out a3_20, out a4_21, out a5_22, out a6_23)
	d1Out = d1_33
	a1Out = a1_32
	a2Out = a2_19
	a3Out = a3_20
	a4Out = a4_21
	a5Out = a5_22
	a6Out = a6_23
	return d0_25
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000016FC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001718(word32 d0, word32 a1, word32 a3, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn00001718_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001718:
	word32 d0_1935
	word32 a7_1578 = fp + -112
	word32 d3_1453 = dwArg0C
	word32 a5_1550 = dwArg04
	word32 a4_1605 = dwArg08
	word32 d6_1451 = 0
	branch Mem36[dwArg08:byte] == 0x00 l0000205E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001734:
	branch Mem46[a4_1605:byte] != 0x25 l00002038
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002038:
	word32 a7_51 = a7_1578 - 4
	Mem54[a7_51:word32] = a5_1550
	Mem63[a7_51 - 4:word32] = (int32) (int16) Mem54[a4_1605:byte]
	a4_1605 = a4_1605 + 1
	d0 = fn00002098(a1, a3, a4_1605, a5_1550, Mem63[a7_51 - 4:word32], Mem63[a7_51:word32], out d1, out a0_67, out a1, out a5_1550)
	a7_1578 = a7_51 + 4
	branch d0 != 0xFFFFFFFF l00002056
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002056:
	d6_1451 = d6_1451 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002052:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000173C:
	Mem86[a7_1578 + 64:word32] = 0x00000000
	Mem88[a7_1578 + 72:word32] = 0x00000000
	Mem92[a7_1578 + 102:word32] = 0x00000000
	word32 d5_249 = -1
	word32 d4_361 = 105
	a3 = a7_1578 + 76
	word32 d7_1001 = 0
	word32 a2_135 = a4_1605 + 1
	word32 d2_130 = Mem92[a7_1578 + 72:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000175A:
	word32 d1_104 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000175C:
	word32 a7_100 = a7_1578 - 4
	Mem103[a7_100:word32] = d0
	d0 = Mem103[a7_100:word32]
	branch Mem103[0x00002070 + d1_104:byte] - Mem103[a2_135:byte] != 0x00 l00001780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001780:
	d1_104 = d1_104 + 0x00000001
	branch d1_104 <u 0x00000005 l0000175C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000176E:
	Mem121[a7_100:word32] = d1_104
	word32 d1_123 = 1 << d1_104
	d0 = d1_123
	d1_104 = Mem121[a7_100:word32]
	d2_130 = d2_130 | d1_123
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000178A:
	branch d1_104 <u 0x00000005 l0000175A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001792:
	word32 a0_1418
	word32 d0_157
	Mem143[a7_1578 + 72:word32] = d2_130
	branch Mem143[a2_135:byte] != 0x2A l000017D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017D0:
	a0_1418 = 0x00002B15 + (DPB(d0, Mem143[a2_135:byte], 0) & 0x000000FF)
	word32 d0_156 = (int32) Mem143[a0_1418:byte]
	d0_157 = d0_156 & 0x00000004
	branch (d0_156 & 0x00000004) == 0x00000000 l0000183C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017EC:
	d2_130 = Mem143[a7_1578 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017F0:
	Mem169[a7_1578 - 4:word32] = d3_1453
	word32 d1_175 = __swap(10) *u (word16) d2_130
	word32 d0_182 = (word16) d2_130 *u 10 + DPB(__swap(DPB(d1_175, (word16) (d1_175 + __swap(d2_130) *u 0x000A), 0)), 0x0000, 0)
	a2_135 = a2_135 + 1
	a0_1418 = 0x00002B15 + (DPB(d0_182, Mem169[a2_135:byte], 0) & 0x000000FF)
	word32 d1_191 = (int32) (int16) Mem169[a2_135:byte]
	word32 d0_203 = (int32) Mem169[a0_1418:byte]
	d3_1453 = Mem169[a7_1578 - 4:word32]
	d1_104 = d1_191 - 0x00000030
	d2_130 = d1_191 - 0x00000030 + d0_182
	d0_157 = d0_203 & 0x00000004
	branch (d0_203 & 0x00000004) != 0x00000000 l000017F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001838:
	Mem210[a7_1578 + 64:word32] = d2_130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000179C:
	d0_157 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v36_225 = Mem143[d0_157:word32]
	Mem226[a7_1578 + 44:word32] = v36_225
	a2_135 = a2_135 + 1
	d3_1453 = d0_157 + 0x00000004
	a0_1418 = d0_157 + 0x00000004
	branch v36_225 >= 0x00000000 l000017C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017C8:
	Mem230[a7_1578 + 64:word32] = Mem226[a7_1578 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017B4:
	Mem233[a7_1578 + 72:word32] = Mem226[a7_1578 + 72:word32] | 0x00000004
	d0_157 = -Mem233[a7_1578 + 44:word32]
	Mem238[a7_1578 + 64:word32] = d0_157
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000183C:
	branch Mem241[a2_135:byte] != 0x2E l000018D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001844:
	a2_135 = a2_135 + 1
	branch Mem241[a2_135:byte] != 0x2A l0000186A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000186A:
	a0_1418 = 0x00002B15 + (DPB(d0_157, Mem241[a2_135:byte], 0) & 0x000000FF)
	word32 d0_258 = (int32) Mem241[a0_1418:byte]
	d5_249 = 0
	d0_157 = d0_258 & 0x00000004
	branch (d0_258 & 0x00000004) == 0x00000000 l000018D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001888:
	word32 a7_266 = a7_1578 - 4
	Mem269[a7_266:word32] = d2_130
	word32 d1_275 = __swap(10) *u (word16) d5_249
	word32 d0_282 = (word16) d5_249 *u 10 + DPB(__swap(DPB(d1_275, (word16) (d1_275 + __swap(d5_249) *u 0x000A), 0)), 0x0000, 0)
	a2_135 = a2_135 + 1
	a0_1418 = 0x00002B15 + (DPB(d0_282, Mem269[a2_135:byte], 0) & 0x000000FF)
	word32 d1_291 = (int32) (int16) Mem269[a2_135:byte]
	word32 d0_303 = (int32) Mem269[a0_1418:byte]
	d2_130 = Mem269[a7_266:word32]
	d1_104 = d1_291 - 0x00000030
	d5_249 = d1_291 - 0x00000030 + d0_282
	d0_157 = d0_303 & 0x00000004
	branch (d0_303 & 0x00000004) != 0x00000000 l00001888
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000184C:
	d0_157 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v44_319 = Mem241[d0_157:word32]
	Mem321[a7_1578 + 44:word32] = v44_319
	a2_135 = a2_135 + 1
	d3_1453 = d0_157 + 0x00000004
	a0_1418 = d0_157 + 0x00000004
	branch v44_319 < 0x00000000 l000018D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001864:
	d5_249 = Mem321[a7_1578 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018D0:
	word32 a7_1436 = a7_1578
	branch Mem327[a2_135:byte] == 0x68 l000018F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018D6:
	branch Mem327[a2_135:byte] == 0x6C l000018F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018DC:
	branch Mem327[a2_135:byte] == 0x4C l000018F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018E2:
	branch Mem327[a2_135:byte] == 0x6A l000018F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018E8:
	branch Mem327[a2_135:byte] == 0x7A l000018F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018EE:
	branch Mem327[a2_135:byte] != 0x74 l000018FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018F4:
	a2_135 = a2_135 + 1
	d4_361 = (int32) (int16) Mem327[a2_135:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018FA:
	branch d4_361 != 0x00000068 l0000190C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001902:
	branch Mem327[a2_135:byte] != 0x68 l0000190C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001908:
	d4_361 = 2
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000190C:
	branch d4_361 != 0x0000006C l0000191E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001914:
	branch Mem327[a2_135:byte] != 0x6C l0000191E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000191A:
	d4_361 = 1
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000191E:
	branch d4_361 != 0x0000006A l00001928
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001926:
	d4_361 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001928:
	branch d4_361 != 0x0000007A l00001932
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001930:
	d4_361 = 108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001932:
	branch d4_361 != 0x00000074 l0000193C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000193A:
	d4_361 = 105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000193C:
	word32 d5_1452
	byte v84_413 = Mem327[a2_135:byte]
	word32 a2_1875 = a2_135 + 1
	d1 = DPB(d1_104, v84_413, 0)
	word32 d0_1442 = DPB(d0_157, v84_413, 0)
	branch v84_413 == 0x25 l00001DC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DC4:
	Mem448[a7_1578 + 102:word32] = 0x00000001
	a3 = 0x0000206C
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001948:
	branch v84_413 == 0x58 l00001996
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000194E:
	branch v84_413 == 0x63 l00001D44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D44:
	branch d4_361 != 0x0000006C l00001D60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D60:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem493[a3:byte] = Mem327[d0_1442 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D4C:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem504[a3:byte] = Mem327[d0_1442 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D72:
	a0_1418 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1453 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem508[a7_1578 + 102:word32] = 0x00000001
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001956:
	branch v84_413 == 0x64 l00001996
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000195C:
	branch v84_413 == 0x69 l00001996
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001962:
	Mem518[a7_1578 + 44:byte] = v84_413
	branch v84_413 == 0x6E l00001DD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD6:
	branch d4_361 != 0x00000001 l00001DF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DF8:
	branch d4_361 != 0x0000006C l00001E16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E16:
	branch d4_361 != 0x00000068 l00001E34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E34:
	branch d4_361 != 0x00000002 l00001E52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E52:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem558[a0_1418:word32] = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E3C:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem570[a0_1418:byte] = (byte) d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E1E:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem582[a0_1418:word16] = (word16) d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E00:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem594[a0_1418:word32] = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DDE:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem606[a0_1418 + 4:word32] = d6_1451
	Mem607[a0_1418:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E66:
	d3_1453 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem614[a7_1578 + 64:word32] = 0x00000000
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000196E:
	branch Mem518[a7_1578 + 44:byte] <=u 0x70 l00001996
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000197C:
	byte v97_627 = Mem518[a7_1578 + 44:byte]
	branch v97_627 == 0x73 l00001D80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D80:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3 = Mem518[d0_1442:word32]
	Mem642[a7_1578 + 102:word32] = 0x00000000
	d3_1453 = d0_1442 + 0x00000004
	a0_1418 = d0_1442 + 0x00000004
	a1 = a3
	branch d5_249 == 0x00000000 l00001DA2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D9C:
	branch d5_249 - Mem642[a7_1578 + 102:word32] <=u 0x00000000 l00001DBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA2:
	branch Mem642[a3:byte] == 0x00 l00001DBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA6:
	d0_1442 = Mem642[a7_1578 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DAA:
	d0_1442 = d0_1442 + 0x00000001
	a1 = a1 + 1
	branch d5_249 <=u 0x00000000 l00001DB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DB2:
	branch d5_249 - d0_1442 <=u 0x00000000 l00001DBA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DB6:
	branch Mem642[a1:byte] != 0x00 l00001DAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DBA:
	Mem700[a7_1578 + 102:word32] = d0_1442
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DBE:
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001988:
	branch v97_627 == 0x75 l00001996
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000198E:
	branch v97_627 != 0x78 l00001E6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E6E:
	branch v84_413 != 0x00 l00001E74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E72:
	a2_1875 = a2_1875 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E74:
	d0_1442 = a2_1875 - a4_1605
	Mem737[a7_1578 + 102:word32] = d0_1442
	Mem739[a7_1578 + 64:word32] = 0x00000000
	a3 = a4_1605
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001996:
	branch v84_413 != 0x70 l000019A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000199C:
	Mem753[a7_1578 + 72:word32] = Mem751[a7_1578 + 72:word32] | 0x00000001
	d4_361 = 108
	d1 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019A8:
	word32 d3_1027
	word32 a7_1173
	branch (byte) d1 == 0x64 l000019B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019AE:
	branch (byte) d1 != 0x69 l00001B00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B00:
	branch d4_361 != 0x00000001 l00001B24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B24:
	branch d4_361 != 0x0000006C l00001B46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B46:
	word32 d0_777 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem785[a7_1578 + 60:word32] = Mem782[d0_777:word32]
	Mem786[a7_1578 + 56:word32] = 0x00000000
	d3_1027 = d0_777 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2C:
	word32 d0_794 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem800[a7_1578 + 60:word32] = Mem782[d0_794:word32]
	Mem801[a7_1578 + 56:word32] = 0x00000000
	d3_1027 = d0_794 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B08:
	word32 d0_809 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem815[a7_1578 + 60:word32] = Mem782[d0_809 + 0x00000004:word32]
	Mem817[a7_1578 + 56:word32] = Mem815[d0_809:word32]
	d3_1027 = d0_809 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B5E:
	branch d4_361 != 0x00000068 l00001B7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B66:
	word16 v230_825 = Mem824[a7_1578 + 62:word16]
	word32 a7_828 = a7_1578 - 4
	Mem831[a7_828:word32] = d1
	Mem836[a7_828 + 64:word32] = (int32) v230_825
	Mem837[a7_828 + 60:word32] = 0x00000000
	d1 = Mem837[a7_828:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B7A:
	branch d4_361 != 0x00000002 l00001B96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B82:
	byte v243_848 = Mem847[a7_1578 + 63:byte]
	word32 a7_851 = a7_1578 - 4
	Mem854[a7_851:word32] = d1
	Mem859[a7_851 + 64:word32] = (int32) v243_848
	Mem860[a7_851 + 60:word32] = 0x00000000
	d1 = Mem860[a7_851:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B96:
	word32 d0_868 = Mem867[a7_1578 + 72:word32] & 1
	Mem871[a7_1578 + 44:byte] = (byte) d1
	a7_1173 = a7_1578
	branch d0_868 == 0x00000000 l00001C34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BA6:
	branch (byte) d1 != 0x6F l00001BE2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BAC:
	branch d5_249 != 0x00000000 l00001BD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BB0:
	word32 a7_888 = a7_1578 - 4
	Mem890[a7_888:word32] = d0_868
	Mem893[a7_888 - 4:word32] = d1
	word32 d0_894 = Mem893[a7_888 + 64:word32]
	word32 d1_895 = Mem893[a7_888 + 60:word32]
	Mem912[a7_888 - 8:word32] = d2_130
	d2_130 = Mem912[a7_888 - 8:word32]
	d1 = Mem912[a7_888 - 4:word32]
	d0_868 = Mem912[a7_888:word32]
	branch d1_895 - (d0_894 <u 0x00000000) == 0x00000000 l00001BE2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BD6:
	Mem952[a7_1578 + 106:byte] = 0x30
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BE2:
	a7_1173 = a7_1578
	branch (byte) d1 == 0x78 l00001BF2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BE8:
	Mem961[a7_1578 + 44:byte] = (byte) d1
	branch (byte) d1 != 0x58 l00001C34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BF2:
	Mem968[a7_1578 + 44:byte] = (byte) d1
	word32 a7_969 = a7_1578 - 4
	Mem974[a7_969:word32] = d0_868
	Mem977[a7_969 - 4:word32] = d1
	word32 d0_978 = Mem977[a7_969 + 64:word32]
	word32 d1_979 = Mem977[a7_969 + 60:word32]
	Mem985[a7_969 - 8:word32] = d2_130
	word32 d1_994 = Mem985[a7_969 - 4:word32]
	a7_1173 = a7_969 + 4
	branch d1_979 - (d0_978 <u 0x00000000) == 0x00000000 l00001C34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C1C:
	Mem1005[a7_969 + 110 + d7_1001:byte] = 0x30
	word32 d7_1003 = d7_1001 + 0x00000001
	Mem1010[a7_969 + 110 + d7_1003:byte] = (byte) d1_994
	Mem1012[a7_969 + 48:byte] = (byte) d1_994
	d7_1001 = d7_1003 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019B6:
	word32 d0_1039
	branch d4_361 != 0x00000001 l000019DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019DC:
	branch d4_361 != 0x0000006C l00001A08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A08:
	word32 d0_1025 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1030 = Mem782[d0_1025:word32]
	Mem1033[a7_1578 + 52:word32] = d0_1030
	word32 a7_1034 = a7_1578 - 4
	Mem1037[a7_1034:word32] = d1
	Mem1042[a7_1034 + 52:word32] = d0_1030 >> 31
	word32 v207_1043 = Mem1042[a7_1034:word32]
	d3_1027 = d0_1025 + 0x00000004
	d0_1039 = d0_1030 >> 31
	d1 = v207_1043
	branch d4_361 != 0x00000068 l00001A4E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A32:
	word16 v209_1049 = Mem1042[a7_1034 + 58:word16]
	Mem1053[a7_1034:word32] = v207_1043
	word32 d1_1056 = (int32) v209_1049
	Mem1058[a7_1034 + 56:word32] = d1_1056
	Mem1061[a7_1034 - 4:word32] = DPB(d0_1030 >> 31, v209_1049, 0)
	Mem1066[a7_1034 + 52:word32] = d1_1056 >> 31
	d1 = Mem1066[a7_1034 - 4:word32]
	d0_1039 = Mem1066[a7_1034:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A4E:
	branch d4_361 != 0x00000002 l00001A74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A56:
	byte v218_1080 = Mem1079[a7_1578 + 55:byte]
	word32 a7_1083 = a7_1578 - 4
	Mem1086[a7_1083:word32] = d1
	word32 d1_1090 = (int32) (int16) v218_1080
	Mem1092[a7_1083 + 56:word32] = d1_1090
	Mem1095[a7_1083 - 4:word32] = DPB(d0_1039, v218_1080, 0)
	Mem1100[a7_1083 + 52:word32] = d1_1090 >> 31
	d1 = Mem1100[a7_1083 - 4:word32]
	d0_1039 = Mem1100[a7_1083:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019E4:
	word32 d0_1111 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1115 = Mem782[d0_1111:word32]
	Mem1117[a7_1578 + 52:word32] = d0_1115
	word32 a7_1118 = a7_1578 - 4
	Mem1120[a7_1118:word32] = d1
	Mem1125[a7_1118 + 52:word32] = d0_1115 >> 31
	d3_1027 = d0_1111 + 0x00000004
	d0_1039 = d0_1115 >> 31
	d1 = Mem1125[a7_1118:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019BE:
	d0_1039 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1139[a7_1578 + 52:word32] = Mem782[d0_1039 + 0x00000004:word32]
	Mem1141[a7_1578 + 48:word32] = Mem1139[d0_1039:word32]
	d3_1027 = d0_1039 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A74:
	Mem1146[a7_1578 + 44:byte] = (byte) d1
	word32 a7_1147 = a7_1578 - 4
	Mem1150[a7_1147:word32] = d0_1039
	Mem1153[a7_1147 - 4:word32] = d1
	word32 d0_1154 = Mem1153[a7_1147 + 56:word32]
	word32 d1_1155 = Mem1153[a7_1147 + 52:word32]
	Mem1161[a7_1147 - 8:word32] = d2_130
	a7_1173 = a7_1147 + 4
	branch d1_1155 - (d0_1154 <u 0x00000000) >= 0x00000000 l00001ABE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ABE:
	byte v141_1175 = Mem1161[a7_1147 + 48:byte]
	branch (Mem1161[a7_1147 + 76:word32] & 16) == 0x00000000 l00001AD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AD8:
	branch (Mem1161[a7_1147 + 76:word32] & 8) == 0x00000000 l00001AEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AE0:
	Mem1197[a7_1147 + 110:byte] = 0x20
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ACA:
	Mem1204[a7_1147 + 110:byte] = 0x2B
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AEC:
	Mem1209[a7_1147 + 64:word32] = Mem1207[a7_1147 + 56:word32]
	Mem1211[a7_1147 + 60:word32] = Mem1209[a7_1147 + 52:word32]
	Mem1214[a7_1147 + 48:byte] = v141_1175
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A9E:
	Mem1220[a7_1147 + 110:byte] = 0x2D
	d7_1001 = 0x00000001
	a7_1173 = Mem1220[a7_1147 + 0x00000040:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C34:
	byte v130_1238 = Mem1237[a7_1173 + 44:byte]
	a3 = a7_1173 + 98
	branch v130_1238 == 0x78 l00001C48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C42:
	branch v130_1238 != 0x58 l00001C52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C52:
	branch v130_1238 != 0x6F l00001C62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C62:
	Mem1252[a7_1173 + 48:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C58:
	Mem1255[a7_1173 + 48:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C6A:
	Mem1260[a7_1173 + 44:word32] = Mem1258[a7_1173 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C48:
	Mem1264[a7_1173 + 44:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C70:
	word32 a6_1276
	Mem1269[a7_1173 + 108:word32] = Mem1267[a7_1173 + 44:word32]
	branch v130_1238 == 0x58 l00001C82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C82:
	a6_1276 = 0x00002088
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C7C:
	a6_1276 = 0x00002078
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C86:
	Mem1281[a7_1173 + 44:word32] = a6_1276
	Mem1297[a7_1173 + 124:word32] = d3_1027
	Mem1311[a7_1173 + 68:word32] = d5_249
	Mem1330[a7_1173 + 48:word32] = d6_1451
	Mem1338[a7_1173 + 98:word32] = d7_1001
	word32 v163_1339 = a7_1173 + 56
	word32 d6_1340 = Mem1338[v163_1339:word32]
	word32 d7_1342 = Mem1338[v163_1339 + 4:word32]
	word32 d3_1344 = Mem1338[a7_1173 + 102:word32]
	a1 = Mem1338[a7_1173 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA8:
	word32 d1_1349 = Mem1348[a7_1173 + 108:word32]
	word32 a7_1354 = a7_1173 - 4
	Mem1356[a7_1354:word32] = d1_1349 >> 31
	Mem1359[a7_1354 - 4:word32] = d1_1349
	Mem1363[a7_1354 - 8:word32] = a1
	Mem1366[a7_1354 - 12:word32] = d1_1349
	Mem1368[a7_1354 - 16:word32] = d1_1349 >> 31
	Mem1371[a7_1354 - 20:word32] = d7_1342
	Mem1374[a7_1354 - 24:word32] = d6_1340
	word32 d1_1377 = fn00002A00(Mem1374[a7_1354 - 24:word32], Mem1374[a7_1354 - 20:word32], Mem1374[a7_1354 - 16:word32], Mem1374[a7_1354 - 12:word32])
	word32 v167_1385 = Mem1374[a7_1354 - 8:word32]
	word32 d1_1390 = Mem1374[a7_1354 - 4:word32]
	word32 d0_1392 = Mem1374[a7_1354:word32]
	a3 = a3 - 1
	Mem1399[a3:byte] = Mem1374[v167_1385 + d1_1377:byte]
	Mem1402[a7_1354:word32] = d0_1392
	Mem1405[a7_1354 - 4:word32] = d1_1390
	Mem1408[a7_1354 - 8:word32] = v167_1385
	Mem1411[a7_1354 - 12:word32] = d1_1390
	Mem1413[a7_1354 - 16:word32] = d0_1392
	Mem1415[a7_1354 - 20:word32] = d7_1342
	Mem1417[a7_1354 - 24:word32] = d6_1340
	word32 d1_1421
	word32 d0_1420 = fn000026B8(Mem1417[a7_1354 - 24:word32], Mem1417[a7_1354 - 20:word32], Mem1417[a7_1354 - 16:word32], Mem1417[a7_1354 - 12:word32], out d1_1421, out a0_1418)
	a1 = Mem1417[a7_1354 - 8:word32]
	d6_1340 = d0_1420
	d7_1342 = d1_1421
	a7_1436 = a7_1354 + 4
	d3_1344 = d3_1344 + 0x00000001
	d0_1442 = d1_1421
	d1 = d0_1420 - (d1_1421 <u 0x00000000)
	branch d1 != 0x00000000 l00001CA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D16:
	Mem1449[a7_1354 + 106:word32] = d3_1344
	d7_1001 = Mem1449[a7_1354 + 102:word32]
	d6_1451 = Mem1449[a7_1354 + 52:word32]
	d5_1452 = Mem1449[a7_1354 + 72:word32]
	d3_1453 = Mem1449[a7_1354 + 128:word32]
	branch d5_1452 != 0xFFFFFFFF l00001D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D38:
	Mem1458[a7_1354 + 76:word32] = Mem1449[a7_1354 + 76:word32] & 0xFFFFFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D32:
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E84:
	branch d5_1452 - Mem1467[a7_1436 + 102:word32] >u 0x00000000 l00001E92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E92:
	Mem1473[a7_1436 + 44:word32] = d5_1452
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E8A:
	Mem1476[a7_1436 + 44:word32] = Mem1467[a7_1436 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E96:
	word32 a7_1479 = a7_1436 - 4
	Mem1487[a7_1479:word32] = d0_1442
	Mem1502[a7_1479 + 52:word32] = Mem1487[a7_1479 + 48:word32] + d7_1001
	Mem1508[a7_1479:word32] = Mem1502[a7_1479:word32]
	word32 d0_1512 = Mem1508[a7_1479:word32]
	branch Mem1508[a7_1479 + 52:word32] - Mem1508[a7_1479 + 68:word32] <u 0x00000000 l00001EBA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EBA:
	Mem1517[a7_1479:word32] = d0_1512
	Mem1522[a7_1479 + 48:word32] = Mem1517[a7_1479 + 68:word32] - Mem1517[a7_1479 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB4:
	Mem1527[a7_1479 + 48:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ECA:
	Mem1535[a7_1436 + 48:word32] = Mem1533[a7_1436 + 44:word32]
	branch (Mem1535[a7_1436 + 72:word32] & 2) == 0x00000000 l00001F0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED8:
	word32 d2_1542 = 0
	branch d7_1001 == 0x00000000 l00001F0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EDE:
	word32 a7_1549 = a7_1436 - 4
	Mem1552[a7_1549:word32] = a5_1550
	Mem1563[a7_1549 - 4:word32] = (int32) (int16) Mem1552[a7_1549 + 110 + d2_1542:byte]
	a7_1578 = a7_1549 + 4
	branch fn00002098(a1, a3, a4_1605, a5_1550, Mem1563[a7_1549 - 4:word32], Mem1563[a7_1549:word32], out d1, out a0_1418, out a1, out a5_1550) != 0xFFFFFFFF l00001F04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F04:
	d2_1542 = d2_1542 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d7_1001 - d2_1542 >u 0x00000000 l00001EDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F0C:
	branch (Mem1592[a7_1436 + 72:word32] & 4) != 0x00000000 l00001F5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F14:
	word32 d2_1598 = 0
	branch Mem1592[a7_1436 + 48:word32] == 0x00000000 l00001F5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F1C:
	word32 d4_1603 = Mem1592[a7_1436 + 72:word32]
	a4_1605 = Mem1592[a7_1436 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F24:
	word32 a0_1619
	word32 a7_1607 = a7_1436 - 4
	Mem1610[a7_1607:word32] = a5_1550
	branch (d4_1603 & 2) == 0x00000000 l00001F32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F32:
	a0_1619 = DPB(a0_1418, 0x0020, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F2C:
	a0_1619 = DPB(a0_1418, 0x0030, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F36:
	Mem1625[a7_1436 - 8:word32] = a0_1619
	a7_1578 = a7_1436
	branch fn00002098(a1, a3, a4_1605, a5_1550, Mem1625[a7_1436 - 8:word32], Mem1625[a7_1436 - 4:word32], out d1, out a0_1418, out a1, out a5_1550) != 0xFFFFFFFF l00001F4E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F4E:
	d2_1598 = d2_1598 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a4_1605 - d2_1598 >u 0x00000000 l00001F24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F56:
	Mem1659[a7_1607 + 52:word32] = a4_1605
	Mem1662[a7_1607 + 76:word32] = d4_1603
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F5E:
	branch (Mem1666[a7_1436 + 72:word32] & 2) != 0x00000000 l00001F9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F66:
	word32 d2_1672 = 0
	branch d7_1001 == 0x00000000 l00001F9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F6C:
	word32 a7_1682 = a7_1436 - 4
	Mem1685[a7_1682:word32] = a5_1550
	Mem1696[a7_1682 - 4:word32] = (int32) (int16) Mem1685[a7_1682 + 110 + d2_1672:byte]
	a7_1578 = a7_1682 + 4
	branch fn00002098(a1, a3, a4_1605, a5_1550, Mem1696[a7_1682 - 4:word32], Mem1696[a7_1682:word32], out d1, out a0_2278, out a1, out a5_1550) != 0xFFFFFFFF l00001F92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F92:
	d2_1672 = d2_1672 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d7_1001 - d2_1672 >u 0x00000000 l00001F6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F9A:
	word32 d2_1725 = Mem1724[a7_1436 + 102:word32]
	branch d5_1452 - Mem1724[a7_1436 + 102:word32] <=u 0x00000000 l00001FC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FA4:
	word32 a7_1739 = a7_1436 - 4
	Mem1742[a7_1739:word32] = a5_1550
	Mem1745[a7_1739 - 0x00000004:word32] = 0x00000030
	a7_1578 = a7_1739 + 0x00000004
	branch fn00002098(a1, a3, a4_1605, a5_1550, Mem1745[a7_1739 - 0x00000004:word32], Mem1745[a7_1739:word32], out d1, out a0_2279, out a1, out a5_1550) != 0xFFFFFFFF l00001FC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC0:
	d2_1725 = d2_1725 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d5_1452 - d2_1725 >u 0x00000000 l00001FA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC8:
	word32 d2_1772 = 0
	branch Mem1774[a7_1436 + 102:word32] == 0x00000000 l00001FFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FD0:
	a4_1605 = Mem1774[a7_1436 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FD4:
	word32 a7_1781 = a7_1436 - 4
	Mem1784[a7_1781:word32] = a5_1550
	Mem1795[a7_1781 - 4:word32] = (int32) (int16) Mem1784[a3 + d2_1772:byte]
	a7_1578 = a7_1781 + 4
	branch fn00002098(a1, a3, a4_1605, a5_1550, Mem1795[a7_1781 - 4:word32], Mem1795[a7_1781:word32], out d1, out a0_2280, out a1, out a5_1550) != 0xFFFFFFFF l00001FF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF6:
	d2_1772 = d2_1772 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a4_1605 - d2_1772 >u 0x00000000 l00001FD4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FFE:
	d0 = Mem1822[a7_1436 + 72:word32] & 4
	branch d0 == 0x00000000 l00002034
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002006:
	word32 d2_1828 = 0
	branch Mem1822[a7_1436 + 48:word32] == 0x00000000 l00002034
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000200E:
	a3 = Mem1822[a7_1436 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002012:
	word32 a7_1835 = a7_1436 - 4
	Mem1838[a7_1835:word32] = a5_1550
	Mem1841[a7_1835 - 0x00000004:word32] = 0x00000020
	d0 = fn00002098(a1, a3, a4_1605, a5_1550, Mem1841[a7_1835 - 0x00000004:word32], Mem1841[a7_1835:word32], out d1, out a0_2281, out a1, out a5_1550)
	a7_1578 = a7_1835 + 0x00000004
	branch d0 != 0xFFFFFFFF l0000202C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000202C:
	d2_1828 = d2_1828 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a3 - d2_1828 >u 0x00000000 l00002012
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002034:
	a7_1578 = a7_1436
	a4_1605 = a2_1875
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002058:
	branch Mem1910[a4_1605:byte] != 0x00 l00001734
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000205E:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002028:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF2:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FBA:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F8C:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F48:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EFE:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002060:
	word32 a7_1956 = a7_1578 + 4
	word32 a2_1967 = Mem1953[a7_1956 + 20:word32]
	word32 a3_1969 = Mem1953[a7_1956 + 24:word32]
	word32 a4_1971 = Mem1953[a7_1956 + 28:word32]
	word32 a5_1973 = Mem1953[a7_1956 + 32:word32]
	word32 a6_1975 = Mem1953[a7_1956 + 36:word32]
	d1Out = d1
	a1Out = a1
	a2Out = a2_1967
	a3Out = a3_1969
	a4Out = a4_1971
	a5Out = a5_1973
	a6Out = a6_1975
	return d0_1935
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001718_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002098(word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00002098_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002098:
	word32 a1_110
	word32 a0_109
	word32 d1_60
	Mem17[dwArg08 + 24:word32] = Mem11[dwArg08 + 24:word32] | 2
	word32 v13_19 = Mem17[dwArg08 + 20:word32] - 0x00000001
	Mem20[dwArg08 + 20:word32] = v13_19
	branch v13_19 < 0x00000000 l000020DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020B4:
	branch 10 - dwArg04 != 0x00000000 l000020C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020BA:
	branch (Mem20[dwArg08 + 24:word32] & 0x00000080) != 0x00000000 l000020DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020DC:
	d1_60 = fn000020F4(dwArg04, a1, a3, a4, a5, dwArg04, dwArg08, out a0_109, out a1_110, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020C6:
	a0_109 = Mem20[dwArg08 + 4:word32]
	Mem70[dwArg08 + 4:word32] = a0_109 + 1
	Mem73[a0_109:byte] = (byte) dwArg04
	a1_110 = dwArg08 + 4
	d1_60 = (int32) Mem73[a0_109:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020EA:
	d1Out = d1_60
	a0Out = a0_109
	a1Out = a1_110
	a5Out = a5
	return d1_60
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002098_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000020F4(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn000020F4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020F4:
	word32 d0_111
	word32 a5_132
	word32 a1_130
	fn00002688(d2, a1, dwArg08, a3, a4, a5, out a1_130, out a4_342, out a5_132)
	branch dwArg08 != 0x00000000 l00002110
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002110:
	branch 64 - (Mem29[dwArg08 + 24:word32] & 73) == 0x00000000 l00002122
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002122:
	branch Mem29[dwArg08 + 28:word32] != 0x00000000 l00002140
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002128:
	branch (Mem29[dwArg08 + 24:word32] & 4) == 0x00000000 l00002138
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002138:
	Mem64[dwArg08 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002130:
	Mem68[dwArg08 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002140:
	branch Mem71[dwArg08 + 8:word32] != 0x00000000 l00002180
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002180:
	branch Mem71[dwArg08:word32] == 0x00000000 l000021DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021DA:
	d0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002184:
	word32 d0_103 = Mem71[dwArg08 + 24:word32] & 0x00000080
	branch d0_103 == 0x00000000 l000021B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002190:
	d0_103 = 10
	branch 10 - dwArg04 != 0x00000000 l000021B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B0:
	word32 d4_97 = Mem71[dwArg08 + 4:word32] - Mem71[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_97 - d0_103 == 0x00000000 l000021DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021CE:
	Mem110[dwArg08 + 24:word32] = Mem71[dwArg08 + 24:word32] | 16
	a0 = dwArg08 + 24
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002196:
	word32 a0_114 = Mem71[dwArg08 + 4:word32]
	Mem118[dwArg08 + 4:word32] = a0_114 + 1
	Mem120[a0_114:byte] = (byte) dwArg04
	d0_111 = fn00002208(d2, dwArg08 + 4, a3, a0_114 + 1, a5_132, dwArg08, out a0, out a1_130, out a4_343, out a5_132)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002146:
	word32 d4_148
	branch (Mem71[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l0000215A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000215A:
	d4_148 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002156:
	d4_148 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000215C:
	word32 d0_165 = fn000022B4(d4_148 + Mem71[dwArg08 + 28:word32], out d1_166, out a0, out a1_130)
	branch d0_165 != 0x00000000 l00002176
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002176:
	Mem179[dwArg08 + 8:word32] = d0_165 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021DE:
	Mem186[dwArg08 + 24:word32] = Mem184[dwArg08 + 24:word32] | 2
	a0 = Mem186[dwArg08 + 8:word32]
	Mem193[a0:byte] = (byte) dwArg04
	word32 a1_194 = Mem193[dwArg08 + 8:word32]
	Mem197[dwArg08 + 4:word32] = a1_194 + 1
	Mem202[dwArg08 + 20:word32] = Mem197[dwArg08 + 28:word32] - 0x00000001
	a1_130 = a1_194 + 1
	d0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002170:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000211C:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000210A:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002202:
	a0Out = a0
	a1Out = a1_130
	a5Out = a5_132
	return d0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000020F4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002208(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a0 a1 a4 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn00002208_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002208:
	word32 d0_100
	word32 a1_25
	word32 a4_26
	word32 a5_27
	fn00002688(d2, a1, dwArg04, a3, a4, a5, out a1_25, out a4_26, out a5_27)
	branch dwArg04 != 0x00000000 l0000221E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000221E:
	branch Mem17[dwArg04 + 28:word32] != 0x00000000 l0000223C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002224:
	branch (Mem17[dwArg04 + 24:word32] & 4) == 0x00000000 l00002234
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002234:
	Mem46[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000222C:
	Mem50[dwArg04 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000223C:
	branch Mem53[dwArg04 + 8:word32] != 0x00000000 l00002246
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002246:
	word32 d0_59 = Mem53[dwArg04 + 24:word32] & 2
	branch d0_59 == 0x00000000 l0000228C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000224E:
	branch Mem53[dwArg04:word32] == 0x00000000 l0000227C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000227C:
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002252:
	word32 d4_72 = Mem53[dwArg04 + 4:word32] - Mem53[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_72 - d0_59 == 0x00000000 l00002280
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002280:
	Mem82[dwArg04 + 4:word32] = Mem53[dwArg04 + 8:word32]
	Mem84[dwArg04 + 20:word32] = Mem82[dwArg04 + 28:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000228C:
	Mem91[dwArg04 + 24:word32] = Mem89[dwArg04 + 24:word32] & -4
	a0 = dwArg04 + 24
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002270:
	Mem97[dwArg04 + 24:word32] = Mem53[dwArg04 + 24:word32] | 16
	a0 = dwArg04 + 24
	d0_100 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002242:
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000221A:
	d0_100 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002296:
	a0Out = a0
	a1Out = a1_25
	a4Out = a4_26
	a5Out = a5_27
	return d0_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002208_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000022B4(word32 dwArg04, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn000022B4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022B4:
	word32 d0_106
	branch dwArg04 != 0x00000000 l000022C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022C2:
	branch Mem5[0x00004130:word32] != 0x00000000 l000022E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022CA:
	word32 a0_13 = Mem5[0x0000412C:word32]
	Mem21[0x00000000:word32] = 0x00000000
	Mem36[0x00004130:word32] = fn000025A8(dwLoc10, a0_13, a0_13, out d1, out a0, out a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E6:
	branch Mem39[0x00004130:word32] != 0x00000000 l000022F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022F2:
	word32 d0_58 = fn00002484(Mem51[0x00004130:word32], dwArg04 + 4, out d1, out a0)
	a1 = d0_58
	branch d0_58 != 0x00000000 l00002310
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002310:
	Mem72[d0_58:word32] = dwArg04
	a0 = d0_58 + 4
	d0_106 = d0_58 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000230C:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022EE:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022BE:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002318:
	d1Out = d1
	a0Out = a0
	a1Out = a1
	return d0_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000022B4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002320(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00002320_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002320:
	branch dwArg04 == 0x00000000 l0000234A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000232A:
	branch Mem0[0x00004130:word32] == 0x00000000 l0000234A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002332:
	fn000023E8(Mem23[0x00004130:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000234A:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002320_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000023E8(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn000023E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023E8:
	branch Mem20[Mem20[0x000040FC:word32] + 20:word16] <u 0x0027 l00002418
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002418:
	branch dwArg04 == 0x00000000 l0000247C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000241C:
	branch dwArg08 == 0x00000000 l0000247C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002420:
	word32 a3_36 = dwArg08 + -12
	branch dwArg0C - Mem20[dwArg04 + 20:word32] >=u 0x00000000 l00002462
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000242C:
	word32 a2_40 = dwArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000242E:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0x00000000 l0000247C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002434:
	branch Mem20[a2_40 + 8:byte] == 0x00 l0000242E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000243A:
	branch dwArg08 - Mem20[a2_40 + 20:word32] <u 0x00000000 l0000242E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002440:
	branch dwArg08 - Mem20[a2_40 + 24:word32] >=u 0x00000000 l0000242E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002446:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28:word32] - Mem20[dwArg04 + 16:word32] != 0x00000000 l0000247C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002460:
	a3_36 = a2_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002462:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4
	FreeMem(a3_74, Mem20[a3_74:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002406:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000247C:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000023E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002484(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn00002484_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002484:
	word32 d0_159
	word32 a0_116 = Mem26[0x000040FC:word32]
	branch Mem26[a0_116 + 20:word16] <u 0x0027 l000024B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024B0:
	word32 a3_121 = 0x00000000
	branch dwArg04 == 0x00000000 l000025A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024B8:
	branch dwArg08 == 0x00000000 l000025A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024BE:
	branch dwArg08 - Mem26[dwArg04 + 20:word32] >=u 0x00000000 l00002572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002572:
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_51 = AllocMem(dwArg08 + 16, d1)
	a3_121 = d0_51
	branch d0_51 == 0x00000000 l000025A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000258C:
	Mem57[d0_51:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_51 + 4)
	Mem63[d0_51 + 12:word32] = 0x00000000
	a0_116 = dwArg04
	a3_121 = d0_51 + 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C6:
	word32 a5_163 = Mem26[dwArg04:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C8:
	branch Mem26[a5_163:word32] == 0x00000000 l000024EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024EA:
	word32 d3_78 = Mem26[dwArg04 + 16:word32] + 40
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_83 = AllocMem(d3_78, d1)
	a3_121 = d0_83
	branch d0_83 == 0x00000000 l000025A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002508:
	Mem89[d0_83:word32] = d3_78
	Mem92[d0_83 + 12:byte] = 0x0A
	Mem96[d0_83 + 20:word32] = d0_83 + 40
	Mem98[d0_83 + 24:word32] = d0_83 + 40
	Mem100[Mem98[d0_83 + 20:word32]:word32] = 0x00000000
	word32 a2_101 = Mem100[d0_83 + 20:word32]
	Mem104[a2_101 + 4:word32] = Mem100[dwArg04 + 16:word32]
	Mem107[d0_83 + 32:word32] = Mem104[a2_101 + 4:word32]
	Mem111[d0_83 + 28:word32] = Mem107[d0_83 + 32:word32] + Mem107[d0_83 + 20:word32]
	AddHead(dwArg04, d0_83 + 4)
	a0_116 = d0_83 + 4
	a3_121 = Allocate(d0_83 + 4, dwArg08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024CC:
	branch Mem26[a5_163 + 8:byte] == 0x00 l000024E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024D2:
	word32 d0_129 = Allocate(a5_163, dwArg08)
	a0_116 = a5_163
	a3_121 = d0_129
	branch d0_129 != 0x00000000 l00002556
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002556:
	branch (Mem136[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l000025A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002562:
	word32 a2_143 = a3_121
	word32 d2_146 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002568:
	Mem149[a2_143:word32] = 0x00000000
	word32 a2_150 = a2_143 + 4
	Mem151[a2_150:word32] = 0x00000000
	a2_143 = a2_150 + 4
	d2_146 = d2_146 - 0x00000001
	branch d2_146 != 0x00000000 l00002568
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002570:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A0:
	d0_159 = a3_121
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024E6:
	a5_163 = Mem26[a5_163:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000249E:
	a0_116 = dwArg04
	d0_159 = AllocPooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A2:
	d1Out = d1
	a0Out = a0_116
	return d0_159
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002484_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000025A8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn000025A8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A8:
	word32 d0_52
	word32 a0_17 = Mem14[0x000040FC:word32]
	branch Mem14[a0_17 + 20:word16] <u 0x0027 l000025D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025D6:
	a1 = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l00002610
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025DC:
	word32 d0_31 = AllocMem(24, 0)
	d1 = 0
	a1 = d0_31
	branch d0_31 == 0x00000000 l00002610
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025F2:
	Mem38[d0_31:word32] = d0_31 + 4
	Mem39[d0_31 + 4:word32] = 0x00000000
	Mem41[d0_31 + 8:word32] = d0_31
	Mem43[d0_31 + 12:word32] = dwArg04
	Mem47[d0_31 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem49[d0_31 + 20:word32] = dwArg0C
	a0_17 = d0_31 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002610:
	d0_52 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025C2:
	d1 = dwArg08
	d0_52 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002612:
	d1Out = d1
	a0Out = a0_17
	a1Out = a1
	return d0_52
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000025A8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002618(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn00002618_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002618:
	branch Mem11[Mem11[0x000040FC:word32] + 20:word16] <u 0x0027 l0000263C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000263C:
	branch dwArg04 == 0x00000000 l00002680
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002640:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0x00000000 l00002672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002652:
	word32 a2_29 = a2_24 - 4
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0x00000000 l00002652
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002672:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000262E:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002680:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002618_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002688(word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn00002688_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002688:
	word32 a6_6 = Mem5[0x000040FC:word32]
	SetSignal(0, 0x00001000)
	word32 d1_27 = 0x00001000
	branch 0x00000000 == 0x00000000 l000026B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026A6:
	d1_27 = fn0000131C(0x00001000, d2, a1, a2, a3, a4, a5, a6_6, 0x00000014, out a1, out a4, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026B2:
	a1Out = a1
	a4Out = a4
	a5Out = a5
	return d1_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002688_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000026B8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn000026B8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026B8:
	word32 d0_188
	word32 d1_133 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_158 = dwArg10
	branch dwArg0C != 0x00000000 l0000270E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000270E:
	branch dwArg04 - dwArg0C >=u 0x00000000 l00002718
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002718:
	word32 d4_29 = 24
	word32 d6_30 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_30 != 0x00 l00002736
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002722:
	d4_29 = 16
	d6_30 = __rol(d6_30, 0x00000008)
	branch (byte) d6_30 != 0x00 l00002736
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000272A:
	d4_29 = 8
	d6_30 = __rol(d6_30, 0x00000008)
	branch (byte) d6_30 != 0x00 l00002736
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002732:
	d4_29 = 0
	d6_30 = DPB(d6_30, (byte) dwArg0C, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002736:
	word32 d4_58 = DPB(d4_29, (byte) d4_29 + Mem17[0x00004134 + (int32) ((word16) d6_30 & 0x00FF):byte], 0)
	word32 d5_60 = 32 - d4_58
	branch d5_60 != 0x00000000 l00002756
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002756:
	word32 d1_83
	word32 d0_82 = fn000027BC(dwArg04 >>u d4_58, dwArg04 << d5_60 | dwArg08 >>u d4_58, dwArg0C << d5_60 | dwArg10 >>u d4_58, out d1_83, out d2_314)
	word32 d3_69 = dwArg10 << d5_60
	word32 d5_98 = __swap(d0_82)
	word32 d6_100 = __swap(d3_69)
	word32 d3_99 = d3_69 *u (word16) d5_98
	word32 d2_104 = __swap(d0_82 *u (word16) d3_69)
	word16 v31_105 = (word16) (d2_104 + d3_99)
	word32 d4_101 = d0_82 *u (word16) d6_100
	word16 v34_111 = (word16) (DPB(d2_104, v31_105, 0) + d4_101)
	word32 d6_79 = dwArg08 << d5_60
	word32 d2_117 = __swap(DPB(d2_104, v34_111, 0))
	word32 d5_102 = d5_98 *u (word16) d6_100
	a0_20 = d6_79
	d1_133 = d0_82
	word32 v39_125 = d1_83 - ((__swap(DPB(d3_99, 0x0000, 0)) + __swap(DPB(d4_101, 0x0000, 0))) + DPB(d5_102, ((word16) d5_102 + (v31_105 <u 0x0000)) + (v34_111 <u 0x0000), 0))
	branch v39_125 <u 0x00000000 l000027B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027AC:
	branch v39_125 != 0x00000000 l000027B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027AE:
	branch d6_79 - d2_117 >=u 0x00000000 l000027B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027B2:
	d1_133 = d0_82 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000274A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002752
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000274E:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002712
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002752:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002712:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D0:
	branch dwArg04 - dwArg10 >=u 0x00000000 l000026E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E2:
	branch dwArg10 != 0x00000000 l000026EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E6:
	d3_158 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026EE:
	word32 d1_167
	word32 d2_168
	word32 d0_166 = fn000027BC(0, dwArg04, d3_158, out d1_167, out d2_168)
	d1_133 = fn000027BC(d1_167, dwArg08, d2_168, out d1_312, out d2_313)
	d0_188 = d0_166
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D4:
	d1_133 = fn000027BC(dwArg04, dwArg08, dwArg10, out d1_310, out d2_311)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027B4:
	d0_188 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027B6:
	d1Out = d1_133
	a0Out = a0_20
	return d0_188
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000026B8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000027BC(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn000027BC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027BC:
	word32 d7_13 = d2
	branch d2 == 0x00000000 l000027D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027C4:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0x00000000 l000027E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027E4:
	word32 d2_22 = __swap(d2)
	branch (word16) d2_22 != 0x0000 l0000280C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000280C:
	byte bLoc26_337 = 0x00
	word32 d0_44 = 0
	branch d2 < 0x00000000 l00002828
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000281E:
	d6_17 = d6_17 * 0x00000002
	d0_44 = DPB(d0_44, (word16) d0_44 + 0x0001, 0)
	d5_19 = d5_19 * 0x00000002 + (d6_17 <u 0x00000000)
	d7_13 = d7_13 * 0x00000002
	branch d7_13 > 0x00000000 l0000281E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002828:
	word16 v35_63 = (word16) d0_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000282A:
	word32 d1_101
	word32 d2_72 = __swap(d5_19)
	word32 d3_73 = __swap(d7_13)
	branch (word16) (d2_72 - d3_73) != 0x0000 l0000283C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000283C:
	d1_101 = __swap(DPB(__swap(DPB(DPB(d5_19, (uint16) (d5_19 % (uint16) d3_73), 16), (uint16) (d5_19 /u (uint16) d3_73), 0)), 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002836:
	d1_101 = 65535
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002846:
	word32 d6_95 = __swap(DPB(d6_17, 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000284C:
	word32 d4_110 = __swap(d5_19 - __swap(d7_13) *u (word16) d1_101)
	word32 d2_103 = d1_101 *u (word16) d7_13
	word32 d4_116 = DPB(d4_110, (word16) d6_95, 0)
	branch (word16) d4_110 != 0x0000 l0000286C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002864:
	branch d2_103 - d4_116 <=u 0x00000000 l0000286C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000286C:
	word32 d6_128 = __swap(d1_101)
	word32 d3_135 = __swap(d6_128)
	word32 d4_137 = __swap(d7_13)
	word32 d5_136 = d7_13 *u (word16) d3_135
	word32 d6_141 = __swap(d6_128 *u (word16) d7_13)
	word16 v45_142 = (word16) (d6_141 + d5_136)
	word32 d2_138 = d6_128 *u (word16) d4_137
	word16 v47_148 = (word16) (DPB(d6_141, v45_142, 0) + d2_138)
	word32 d3_139 = d3_135 *u (word16) d4_137
	word32 d6_167 = d6_17 - __swap(DPB(d6_141, v47_148, 0))
	word32 d5_170 = d5_19 - ((__swap(DPB(d5_136, 0x0000, 0)) + __swap(DPB(d2_138, 0x0000, 0))) + DPB(d3_139, ((word16) d3_139 + (v45_142 <u 0x0000)) + (v47_148 <u 0x0000), 0)) - (d6_167 <u 0x00000000)
	branch d5_170 >=u 0x00000000 l000028C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028AE:
	d6_167 = d6_167 + DPB(__swap(d7_13), 0x0000, 0)
	d1_101 = d1_101 - 0x00000001
	d5_170 = d5_170 + (d6_167 <u 0x00000000) + __swap(DPB(d7_13, 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028C4:
	branch bLoc26_337 != 0x00 l000028E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028E0:
	word32 d6_205 = __swap(DPB(d6_167, (word16) d5_170, 0))
	d0 = DPB(dwLoc24, (word16) d1_101, 0)
	word32 d5_206 = __swap(d5_170)
	branch v35_63 == 0x0000 l000028FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028F0:
	word32 d7_213 = DPB(d7_13, v35_63 - 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028F2:
	d5_206 = d5_206 >>u 0x00000001
	d6_205 = __rcr(d6_205, 0x00000001, SLICE(cond(d5_206), bool, 4))
	d7_213 = d7_213 - 0x00000001
	branch d7_213 != 0xFFFFFFFF l000028F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028FA:
	d1 = d6_205
	d2 = d2_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028CA:
	word32 d5_246 = __swap(d5_170)
	word32 d6_247 = __swap(d6_167)
	d5_19 = DPB(d5_246, (word16) d6_247, 0)
	d6_17 = DPB(d6_247, 0x0000, 0)
	bLoc26_337 = true
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002868:
	d1_101 = d1_101 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027EA:
	word32 d0_259 = __swap(d0)
	word32 d1_260 = __swap(d1)
	word32 d0_262 = DPB(d0_259, (word16) d1_260, 0)
	word32 d0_271 = DPB(DPB(d0_262, (uint16) (d0_262 % (uint16) d2), 16), (word16) __swap(d1_260), 0)
	d2 = DPB(__swap((int32) (uint16) (d0_262 /u (uint16) d2)), (uint16) (d0_271 /u (uint16) d2), 0)
	d1 = __swap(DPB(DPB(d0_271, (uint16) (d0_271 % (uint16) d2), 16), 0x0000, 0))
	d0 = d2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027CA:
	branch d1 == 0x00000000 l00002902
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027D0:
	branch d2 - d1 >u 0x00000000 l00002902
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027D6:
	d0 = fn0000297A(d1, d2, d2, out d1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002902:
	d1Out = d1
	d2Out = d2
	return d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000027BC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002948(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn00002948_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002948:
	branch dwArg04 > 0x00000000 l00002968
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002968:
	branch dwArg08 > 0x00000000 l0000296A_thunk_fn0000297A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000296A_thunk_fn0000297A:
	return fn0000297A(dwArg04, dwArg08, d2, out d1_88)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000296C:
	return -fn0000297A(dwArg04, -dwArg08, d2, out d1_89)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002952:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0x00000000 l00002960
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002960:
	return -fn0000297A(d0_36, dwArg08, d2, out d1_43)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002958:
	return fn0000297A(d0_36, -dwArg08, d2, out d1_55)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002948_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000297A(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn0000297A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000297A:
	word32 d1_21 = __swap(d1)
	word16 v10_9 = (word16) d1_21
	word32 d2_10 = DPB(d2, v10_9, 0)
	branch v10_9 != 0x0000 l000029A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029A0:
	word32 d3_17 = 16
	branch (word16) d1_21 >=u 0x0080 l000029AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029AA:
	d1_21 = __rol(d1_21, 0x00000008)
	d3_17 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029AE:
	branch (word16) d1_21 >=u 0x0800 l000029B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029B4:
	d1_21 = __rol(d1_21, 0x00000004)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0004, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029B8:
	branch (word16) d1_21 >=u 0x2000 l000029C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029BE:
	d1_21 = __rol(d1_21, 0x00000002)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0002, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029C2:
	branch (word16) d1_21 < 0x0000 l000029CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029C6:
	d1_21 = __rol(d1_21, 0x00000001)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029CA:
	word32 d2_68 = DPB(__swap(DPB(d2, (word16) d0, 0)), 0x0000, 0) >>u d3_17
	word32 d0_65 = d0 >>u d3_17
	word32 d3_69 = __swap(d3_17)
	uint16 v39_72 = (uint16) (d0_65 /u (uint16) d1_21)
	word32 d1_81 = __swap(d1_21)
	word32 d3_76 = DPB(d3_69, v39_72, 0)
	word32 d0_83 = DPB(DPB(d0_65, (uint16) (d0_65 % (uint16) d1_21), 16), (word16) d2_68, 0) - DPB(d2_68, v39_72, 0) *u (word16) d1_81
	branch d0_83 >=u 0x00000000 l000029EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029E6:
	d3_76 = DPB(d3_69, v39_72 - 0x0001, 0)
	d0_83 = d0_83 + d1_81
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029EA:
	branch d0_83 >=u 0x00000000 l000029EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000029EC:
	d1Out = __swap(__rol(d0_83, __swap(d3_76)))
	return (int32) (word16) d3_76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002982:
	word32 d0_123 = __swap(d0)
	word32 d1_124 = __swap(d1_21)
	word16 v13_126 = (word16) d0_123
	word32 d2_127 = DPB(__swap(d2_10), v13_126, 0)
	branch v13_126 == 0x0000 l00002990
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000298C:
	uint16 v15_131 = (uint16) (d2_127 /u (uint16) d1_124)
	d2_127 = DPB(DPB(d2_127, (uint16) (d2_127 % (uint16) d1_124), 16), v15_131, 0)
	d0_123 = DPB(d0_123, v15_131, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002990:
	word32 d0_138 = __swap(d0_123)
	word32 d2_141 = DPB(d2_127, (word16) d0_138, 0)
	uint16 v28_144 = (uint16) (d2_141 /u (uint16) d1_124)
	d1Out = DPB(d1_124, (word16) __swap(DPB(DPB(d2_141, (uint16) (d2_141 % (uint16) d1_124), 16), v28_144, 0)), 0)
	return DPB(d0_138, v28_144, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000297A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002A00(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn00002A00_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A00:
	word32 d1_162 = dwArg08
	word32 d3_194 = dwArg10
	branch dwArg0C != 0x00000000 l00002A52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A52:
	branch dwArg04 - dwArg0C <u 0x00000000 l00002B0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A58:
	word32 d4_32 = 24
	word32 d6_33 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002A76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A62:
	d4_32 = 16
	d6_33 = __rol(d6_33, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002A76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A6A:
	d4_32 = 8
	d6_33 = __rol(d6_33, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002A76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A72:
	d4_32 = 0
	d6_33 = DPB(d6_33, (byte) dwArg0C, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A76:
	word32 d4_61 = DPB(d4_32, (byte) d4_32 + Mem20[0x00004134 + (int32) ((word16) d6_33 & 0x00FF):byte], 0)
	word32 d5_63 = 32 - d4_61
	branch d5_63 != 0x00000000 l00002A98
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A98:
	word32 d1_86
	word32 d2_87
	word32 d0_85 = fn000027BC(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_87)
	word32 d3_72 = dwArg10 << d5_63
	word32 d7_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u (word16) d7_101
	word32 d2_107 = __swap(d0_85 *u (word16) d3_72)
	word16 v33_108 = (word16) (d2_107 + d3_102)
	word32 d4_104 = d0_85 *u (word16) d6_103
	word16 v35_114 = (word16) (DPB(d2_107, v33_108, 0) + d4_104)
	word32 d2_120 = __swap(DPB(d2_107, v35_114, 0))
	word32 d7_105 = d7_101 *u (word16) d6_103
	word32 d6_82 = dwArg08 << d5_63
	word32 d3_126 = __swap(DPB(d3_102, 0x0000, 0)) + __swap(DPB(d4_104, 0x0000, 0)) + DPB(d7_105, ((word16) d7_105 + (v33_108 <u 0x0000)) + (v35_114 <u 0x0000), 0)
	word32 v40_128 = d1_86 - d2_120
	branch v40_128 <u 0x00000000 l00002AF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AEE:
	branch v40_128 != 0x00000000 l00002AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AF0:
	branch d6_82 - d3_126 >=u 0x00000000 l00002AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AF4:
	d3_126 = d3_126 - d3_72
	d2_120 = d2_120 - d2_87 - (d3_126 <u 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AF8:
	word32 d6_148 = d6_82 - d3_126
	d1_162 = d1_86 - d2_120 - (d6_148 <u 0x00000000) << 32 - d5_63 | d6_148 >>u d5_63
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A8A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002A92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A8E:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002B0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A92:
	d1_162 = dwArg08 - dwArg10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A18:
	branch dwArg04 - dwArg10 >=u 0x00000000 l00002A2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A2A:
	branch dwArg10 != 0x00000000 l00002A36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A2E:
	d3_194 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A36:
	word32 d1_203
	word32 d2_204
	fn000027BC(0, dwArg04, d3_194, out d1_203, out d2_204)
	fn000027BC(d1_203, dwArg08, d2_204, out d1_162, out d2_347)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A1C:
	fn000027BC(dwArg04, dwArg08, dwArg10, out d1_162, out d2_346)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B0C:
	return d1_162
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002A00_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002DFC(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002DFC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DFC:
	branch dwArg04 == 0x00000000 l00002E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E14:
	word32 a2_10 = Mem5[0x00004260:word32]
	branch a2_10 == 0x00000000 l00002E3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E1E:
	branch (Mem16[a2_10 + 24:word32] & 2) == 0x00000000 l00002E30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E26:
	fn00002208(d2, a1, a3, a4, a5, a2_10, out a0_109, out a1, out a4, out a5)
	Mem46 = Mem25
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E30:
	a2_10 = Mem46[a2_10 + 12:word32]
	branch a2_10 != 0x00000000 l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E08:
	fn00002208(d2, a1, a3, a4, a5, dwArg04, out a0_60, out a1_61, out a4_62, out a5_63)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E3A:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002DFC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002E40(word32 d0, word32 d1, word32 a1, word32 a3, word32 a5, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[0..31] d1:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a3 a5 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a7
fn00002E40_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E40:
	word32 a3_22
	word32 a5_24
	word32 a1_34
	word32 d1_35
	word32 d0_27 = fn00002E8C(d0, d1, a1, a3, a5, Mem10[0x00004254:word32], dwArg04, fp + 8, out d1_35, out a1_34, out a3_22, out a5_24)
	d1Out = d1_35
	a1Out = a1_34
	a3Out = a3_22
	a5Out = a5_24
	return d0_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002E40_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002E5C(byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0007:[0..7] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 d0
// Preserved: a2 a7
fn00002E5C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E5C:
	word32 d0_10 = dwArg08
	branch dwArg08 == 0x00000000 l00002E86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E68:
	d0_10 = Mem5[dwArg08 + 4:word32]
	branch d0_10 - Mem5[dwArg08 + 8:word32] >=u 0x00000000 l00002E7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E72:
	Mem16[Mem5[dwArg08 + 4:word32]:byte] = bArg07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E7A:
	Mem22[dwArg08 + 20:word32] = Mem20[dwArg08 + 20:word32] + 0x00000001
	Mem25[dwArg08 + 4:word32] = Mem22[dwArg08 + 4:word32] - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E86:
	return d0_10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002E5C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002E8C(word32 d0, word32 d1, word32 a1, word32 a3, word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[8..31] d1:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a1 a3 a5 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn00002E8C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E8C:
	word32 a7_1373 = fp + -120
	word32 d2_1012 = dwArg0C
	word32 a4_273 = dwArg08
	word32 a2_1057 = dwArg04
	word32 d4_132 = 0
	word32 d5_1085 = 0
	branch Mem40[dwArg08:byte] == 0x00 l00003E8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EAE:
	word32 d3_130
	word32 d3_1907 = 0
	branch Mem49[a4_273:byte] != 0x25 l00003D8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D8C:
	word32 d0_61 = (int32) Mem49[0x00002B15 + (DPB(d0, Mem49[a4_273:byte], 0) & 0x000000FF):byte]
	d0 = d0_61 & 0x00000008
	branch (d0_61 & 0x00000008) == 0x00000000 l00003E18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E18:
	word32 a0_68 = a2_1057 + 24
	Mem70[a0_68:word32] = Mem49[a0_68:word32] | 0x00000001
	word32 a0_71 = a2_1057 + 20
	word32 v103_72 = Mem70[a0_71:word32] - 0x00000001
	Mem73[a0_71:word32] = v103_72
	branch v103_72 < 0x00000000 l00003E4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E4A:
	word32 a7_77 = a7_1373 - 4
	Mem79[a7_77:word32] = a2_1057
	Mem96[a7_77 + 48:word32] = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem79[a7_77:word32], out d1, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E2A:
	a1 = a2_1057 + 4
	word32 a0_100 = Mem73[a1:word32]
	word32 a7_101 = a7_1373 - 4
	Mem103[a7_101:word32] = a2_1057
	Mem107[a1:word32] = a0_100 + 1
	a2_1057 = Mem107[a7_101:word32]
	byte v107_111 = Mem107[a0_100:byte]
	Mem116[a7_101:word32] = d1
	Mem121[a7_101 + 48:word32] = (int32) v107_111
	d1 = Mem121[a7_101:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E58:
	d0 = (int32) (int16) Mem127[a4_273:byte]
	d5_1085 = Mem127[a7_1373 + 44:word32]
	d3_130 = 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch d0 - Mem127[a7_1373 + 44:word32] == 0x00000000 l00003E82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E6C:
	branch d5_1085 == 0xFFFFFFFF l00003E7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E74:
	word32 a7_147 = a7_1373 - 4
	Mem150[a7_147:word32] = a2_1057
	Mem153[a7_147 - 4:word32] = d5_1085
	d0 = fn00002E5C(Mem153[a7_147 - 1:byte], Mem153[a7_147:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E7E:
	d3_130 = 0x00000000
	d4_132 = d4_132 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DA8:
	word32 d0_191
	word32 a0_169 = a2_1057 + 24
	Mem172[a0_169:word32] = Mem170[a0_169:word32] | 0x00000001
	word32 a0_173 = a2_1057 + 20
	word32 v88_174 = Mem172[a0_173:word32] - 0x00000001
	Mem175[a0_173:word32] = v88_174
	branch v88_174 < 0x00000000 l00003DD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DD2:
	word32 a7_179 = a7_1373 - 4
	Mem181[a7_179:word32] = a2_1057
	d0_191 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem181[a7_179:word32], out d1_4137, out a1, out a5)
	d1 = d0_191
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DBA:
	a1 = a2_1057 + 4
	word32 a0_202 = Mem175[a1:word32]
	word32 a7_203 = a7_1373 - 4
	Mem205[a7_203:word32] = a2_1057
	Mem209[a1:word32] = a0_202 + 1
	byte v92_213 = Mem209[a0_202:byte]
	a2_1057 = Mem209[a7_203:word32]
	d0_191 = DPB(d0, v92_213, 0)
	d1 = (int32) v92_213
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DDE:
	word32 d0_238 = (int32) Mem236[0x00002B15 + (DPB(d0_191, (byte) d1, 0) & 0x000000FF):byte]
	d5_1085 = d1
	d4_132 = d4_132 + 0x00000001
	d0 = d0_238 & 0x00000008
	branch (d0_238 & 0x00000008) != 0x00000000 l00003DA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E00:
	branch d1 == 0xFFFFFFFF l00003E12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E08:
	word32 a7_248 = a7_1373 - 4
	Mem251[a7_248:word32] = a2_1057
	Mem254[a7_248 - 4:word32] = d1
	d0 = fn00002E5C(Mem254[a7_248 - 1:byte], Mem254[a7_248:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E12:
	d4_132 = d4_132 - 0x00000001
	d3_130 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E82:
	a4_273 = a4_273 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EB8:
	Mem276[a7_1373 + 72:byte] = 0x69
	Mem277[a7_1373 + 73:byte] = 0x00
	word32 a3_278 = a4_273 + 1
	word32 d0_286 = (int32) Mem277[0x00002B15 + (int32) Mem277[a3_278:byte]:byte]
	word32 d6_1172 = -1
	d0 = d0_286 & 0x00000004
	branch (d0_286 & 0x00000004) == 0x00000000 l00002F3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE0:
	word32 d0_300 = (int32) Mem277[0x00002B15 + (int32) Mem277[a3_278:byte]:byte]
	d6_1172 = 0
	d0 = d0_300 & 0x00000004
	branch (d0_300 & 0x00000004) == 0x00000000 l00002F3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EFA:
	word32 a7_308 = a7_1373 - 4
	Mem311[a7_308:word32] = d2_1012
	word32 d1_317 = __swap(10) *u (word16) d6_1172
	word32 d0_324 = (word16) d6_1172 *u 10 + DPB(__swap(DPB(d1_317, (word16) (d1_317 + __swap(d6_1172) *u 0x000A), 0)), 0x0000, 0)
	a3_278 = a3_278 + 1
	word32 d1_332 = (int32) Mem311[a3_278:byte]
	word32 d0_344 = (int32) Mem311[0x00002B15 + (int32) Mem311[a3_278:byte]:byte]
	d2_1012 = Mem311[a7_308:word32]
	d1 = d1_332 - 0x00000030
	d6_1172 = d1_332 - 0x00000030 + d0_324
	d0 = d0_344 & 0x00000004
	branch (d0_344 & 0x00000004) != 0x00000000 l00002EFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F3C:
	branch Mem351[a3_278:byte] == 0x68 l00002F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F42:
	branch Mem351[a3_278:byte] == 0x6C l00002F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F48:
	branch Mem351[a3_278:byte] == 0x4C l00002F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F4E:
	branch Mem351[a3_278:byte] == 0x7A l00002F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F54:
	branch Mem351[a3_278:byte] == 0x6A l00002F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F5A:
	branch Mem351[a3_278:byte] == 0x74 l00002F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F60:
	branch Mem351[a3_278:byte] != 0x2A l00002FCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F66:
	d7 = DPB(d7, Mem351[a7_1373 + 73:byte], 0)
	d1 = DPB(d1, Mem351[a7_1373 + 72:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F6E:
	branch Mem351[a3_278:byte] != 0x2A l00002F78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F78:
	branch (byte) d1 != 0x68 l00002F88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F7E:
	branch Mem351[a3_278:byte] != 0x68 l00002F88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F88:
	branch (byte) d1 != 0x6C l00002F98
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F8E:
	branch Mem351[a3_278:byte] != 0x6C l00002F98
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F98:
	d1 = DPB(d1, Mem351[a3_278:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F94:
	d1 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F84:
	d1 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F74:
	d7 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F9A:
	a3_278 = a3_278 + 1
	branch Mem351[a3_278:byte] == 0x68 l00002F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FA2:
	branch Mem351[a3_278:byte] == 0x6C l00002F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FA8:
	branch Mem351[a3_278:byte] == 0x4C l00002F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FAE:
	branch Mem351[a3_278:byte] == 0x7A l00002F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FB4:
	branch Mem351[a3_278:byte] == 0x6A l00002F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FBA:
	branch Mem351[a3_278:byte] == 0x74 l00002F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FC0:
	branch Mem351[a3_278:byte] == 0x2A l00002F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FC6:
	Mem450[a7_1373 + 72:byte] = (byte) d1
	Mem456[a7_1373 + 73:byte] = (byte) d7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FCE:
	branch Mem459[a7_1373 + 72:byte] != 0x6A l00002FDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FD6:
	Mem464[a7_1373 + 72:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FDC:
	branch Mem467[a7_1373 + 72:byte] != 0x74 l00002FEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FE4:
	Mem472[a7_1373 + 72:byte] = 0x69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FEA:
	branch Mem475[a7_1373 + 72:byte] != 0x7A l00002FF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FF2:
	Mem480[a7_1373 + 72:byte] = 0x6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FF8:
	byte v71_487 = Mem486[a3_278:byte]
	a3 = a3_278 + 1
	d7 = DPB(d7, v71_487, 0)
	branch v71_487 == 0x00 l0000306E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FFC:
	branch v71_487 == 0x25 l0000306E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003002:
	branch v71_487 == 0x63 l0000306E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003008:
	branch v71_487 == 0x6E l0000306E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000300E:
	branch v71_487 == 0x5B l0000306E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003014:
	word32 d0_531
	word32 a0_509 = a2_1057 + 24
	Mem512[a0_509:word32] = Mem510[a0_509:word32] | 0x00000001
	word32 a0_513 = a2_1057 + 20
	word32 v77_514 = Mem512[a0_513:word32] - 0x00000001
	Mem515[a0_513:word32] = v77_514
	branch v77_514 < 0x00000000 l0000303E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000303E:
	word32 a7_519 = a7_1373 - 4
	Mem521[a7_519:word32] = a2_1057
	d0_531 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem521[a7_519:word32], out d1_4136, out a1, out a5)
	d1 = d0_531
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003026:
	a1 = a2_1057 + 4
	word32 a0_542 = Mem515[a1:word32]
	word32 a7_543 = a7_1373 - 4
	Mem545[a7_543:word32] = a2_1057
	Mem549[a1:word32] = a0_542 + 1
	byte v83_553 = Mem549[a0_542:byte]
	a2_1057 = Mem549[a7_543:word32]
	d0_531 = DPB(d0, v83_553, 0)
	d1 = (int32) v83_553
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000304A:
	word32 d0_578 = (int32) Mem576[0x00002B15 + (DPB(d0_531, (byte) d1, 0) & 0x000000FF):byte]
	d5_1085 = d1
	d4_132 = d4_132 + 0x00000001
	d0 = d0_578 & 0x00000008
	branch (d0_578 & 0x00000008) != 0x00000000 l00003014
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000306C:
	d3_1907 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000306E:
	word32 d1_597 = DPB(d1, v71_487 - 0x25, 0)
	branch v71_487 == 0x25 l000034BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034BA:
	word32 a0_613 = a2_1057 + 24
	Mem616[a0_613:word32] = Mem614[a0_613:word32] | 0x00000001
	word32 a0_617 = a2_1057 + 20
	word32 v127_618 = Mem616[a0_617:word32] - 0x00000001
	Mem619[a0_617:word32] = v127_618
	branch v127_618 < 0x00000000 l000034EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034EC:
	word32 a7_625 = a7_1373 - 4
	Mem627[a7_625:word32] = a2_1057
	d0 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem627[a7_625:word32], out d1, out a1, out a5)
	Mem693[a7_625 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034CC:
	a1 = a2_1057 + 4
	word32 a0_697 = Mem619[a1:word32]
	word32 a7_698 = a7_1373 - 4
	Mem700[a7_698:word32] = a2_1057
	Mem704[a1:word32] = a0_697 + 1
	byte v131_708 = Mem704[a0_697:byte]
	a2_1057 = Mem704[a7_698:word32]
	Mem723[a7_698:word32] = d1_597
	Mem728[a7_698 + 48:word32] = (int32) v131_708
	d0 = DPB(d0, v131_708, 0)
	d1 = Mem728[a7_698:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034FA:
	d5_1085 = Mem734[a7_1373 + 44:word32]
	d3_130 = d3_1907 + 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch Mem734[a7_1373 + 44:word32] == 0x00000025 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000350E:
	branch d5_1085 == 0xFFFFFFFF l00003520
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003516:
	word32 a7_771 = a7_1373 - 4
	Mem774[a7_771:word32] = a2_1057
	Mem777[a7_771 - 4:word32] = d5_1085
	d0 = fn00002E5C(Mem777[a7_771 - 1:byte], Mem777[a7_771:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003520:
	d3_130 = d3_130 - 0x00000001
	d4_132 = d4_132 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003078:
	branch v71_487 == 0x5B l000031B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031B6:
	Mem796[a7_1373 + 44:byte] = 0x00
	branch Mem796[a3:byte] != 0x5E l000031C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031C0:
	Mem801[a7_1373 + 44:byte] = 0x01
	a3 = a3 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031C8:
	Mem805[a7_1373 + 52:word32] = 0x00000000
	byte v455_806 = Mem805[a7_1373 + 44:byte]
	d7 = DPB(d7, v455_806, 0)
	word32 d1_1069 = Mem805[a7_1373 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031D4:
	word32 d5_816
	branch v455_806 == 0x00 l000031E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031E0:
	d5_816 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031D8:
	d5_816 = 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031E2:
	Mem829[a5 + d1_1069:byte] = (byte) d5_816
	d1_1069 = d1_1069 + 0x00000001
	branch d1_1069 <u 0x00000020 l000031D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031F4:
	Mem839[a7_1373 + 132:word32] = d2_1012
	Mem842[a7_1373 + 44:byte] = v455_806
	byte v464_843 = Mem842[a7_1373 + 44:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003200:
	branch Mem847[a3:byte] == 0x00 l00003276
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003204:
	byte v465_852 = Mem847[a3:byte]
	a3 = a3 + 1
	d1_1069 = DPB(d1_1069, v465_852, 0)
	branch Mem847[a3:byte] != 0x2D l00003218
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000320C:
	branch v465_852 - Mem847[a3 + 1:byte] >=u 0x00 l00003218
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003218:
	d7 = DPB(d7, v465_852, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003212:
	a3 = a3 + 2
	d7 = DPB(d7, Mem847[a3 + 1:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000321A:
	word32 d5_876 = (int32) v465_852
	d0 = (int32) (byte) d7
	branch d0 - d5_876 <u 0x00000000 l00003270
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003226:
	branch v464_843 == 0x00 l0000324A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000324A:
	word32 a0_894 = a7_1373 + 78 + (d5_876 >>u 0x00000003)
	d1_1069 = (int32) Mem902[a0_894:byte]
	Mem907[a0_894:byte] = (byte) (1 << (d5_876 & 7) | d1_1069)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000322A:
	word32 a0_912 = a7_1373 + 78 + (d5_876 >>u 0x00000003)
	d1_1069 = (int32) Mem902[a0_912:byte]
	Mem925[a0_912:byte] = (byte) (~(1 << (d5_876 & 7)) & d1_1069)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003266:
	d5_876 = d5_876 + 0x00000001
	d0 = (int32) (byte) d7
	branch d0 - d5_876 >=u 0x00000000 l00003226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003270:
	branch Mem943[a3:byte] != 0x5D l00003200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003276:
	word32 a6_1202
	d2_1012 = Mem956[a7_1373 + 132:word32]
	a3 = a3 + 1
	branch Mem956[a7_1373 + 73:byte] != 0x00 l00003296
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003296:
	a6_1202 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003282:
	word32 d0_968 = d2_1012 + 0x00000003 >>u 0x00000002
	d2_1012 = (d0_968 << 0x00000002) + 0x00000004
	d0 = d0_968 << 0x00000002
	a6_1202 = Mem956[d2_1012 + -4:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003298:
	word32 a0_986 = a2_1057 + 24
	Mem989[a0_986:word32] = Mem956[a0_986:word32] | 0x00000001
	word32 a0_990 = a2_1057 + 20
	word32 v482_991 = Mem989[a0_990:word32] - 0x00000001
	Mem992[a0_990:word32] = v482_991
	branch v482_991 < 0x00000000 l000032CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032CA:
	word32 a7_996 = a7_1373 - 4
	Mem998[a7_996:word32] = a2_1057
	d0 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem998[a7_996:word32], out d1, out a1, out a5)
	Mem1043[a7_996 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032AA:
	a1 = a2_1057 + 4
	word32 a0_1047 = Mem992[a1:word32]
	word32 a7_1048 = a7_1373 - 4
	Mem1050[a7_1048:word32] = a2_1057
	Mem1054[a1:word32] = a0_1047 + 1
	byte v486_1058 = Mem1054[a0_1047:byte]
	a2_1057 = Mem1054[a7_1048:word32]
	Mem1073[a7_1048:word32] = d1_1069
	Mem1078[a7_1048 + 48:word32] = (int32) v486_1058
	d0 = DPB(d0, v486_1058, 0)
	d1 = Mem1078[a7_1048:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032D8:
	d5_1085 = Mem1084[a7_1373 + 44:word32]
	word32 d3_1098 = d3_1907 + 0x00000001
	word32 d4_1111 = d4_132 + 0x00000001
	branch Mem1084[a7_1373 + 44:word32] == 0xFFFFFFFF l000033A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032EC:
	word32 a7_1117 = a7_1373 - 4
	Mem1119[a7_1117:word32] = a7_1373 + 78
	Mem1123[a7_1117 - 4:word32] = a1
	Mem1125[a7_1117 - 0x00000008:word32] = 0x00000008
	Mem1128[a7_1117 - 0x0000000C:word32] = d5_1085
	d1 = (int32) Mem1128[Mem1128[a7_1117:word32] + fn00002948(d2_1012, Mem1128[a7_1117 - 0x0000000C:word32], Mem1128[a7_1117 - 0x00000008:word32]):byte]
	a1 = Mem1128[a7_1117 - 0x00000004:word32]
	d0 = 1 << (d5_1085 & 7) & d1
	branch d0 == 0x00000000 l000033A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000331C:
	branch d6_1172 - d3_1098 <u 0x00000000 l000033A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003322:
	byte v499_1188 = Mem1128[a7_1117 + 77:byte]
	d7 = DPB(d7, v499_1188, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003326:
	branch v499_1188 != 0x00 l0000332C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000332A:
	Mem1203[a6_1202:byte] = (byte) d5_1085
	a6_1202 = a6_1202 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000332C:
	word32 a0_1208 = a2_1057 + 24
	Mem1212[a0_1208:word32] = Mem1209[a0_1208:word32] | 0x00000001
	word32 a0_1213 = a2_1057 + 20
	word32 v504_1214 = Mem1212[a0_1213:word32] - 0x00000001
	Mem1215[a0_1213:word32] = v504_1214
	branch v504_1214 < 0x00000000 l00003356
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003356:
	word32 a7_1220 = a7_1373 - 4
	Mem1222[a7_1220:word32] = a2_1057
	d0 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem1222[a7_1220:word32], out d1_4142, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000333E:
	a1 = a2_1057 + 4
	word32 a0_1248 = Mem1215[a1:word32]
	word32 a7_1249 = a7_1373 - 4
	Mem1251[a7_1249:word32] = a2_1057
	Mem1255[a1:word32] = a0_1248 + 1
	byte v508_1259 = Mem1255[a0_1248:byte]
	a2_1057 = Mem1255[a7_1249:word32]
	d0 = DPB(d0, v508_1259, 0)
	d1 = (int32) v508_1259
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003362:
	d5_1085 = d1
	d3_1098 = d3_1098 + 0x00000001
	d4_1111 = d4_1111 + 0x00000001
	branch d1 == 0xFFFFFFFF l000033A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003370:
	word32 a7_1283 = a7_1373 - 4
	Mem1285[a7_1283:word32] = a7_1373 + 78
	Mem1289[a7_1283 - 4:word32] = a1
	Mem1291[a7_1283 - 0x00000008:word32] = 0x00000008
	Mem1294[a7_1283 - 0x0000000C:word32] = d1
	d1 = (int32) Mem1294[Mem1294[a7_1283:word32] + fn00002948(d2_1012, Mem1294[a7_1283 - 0x0000000C:word32], Mem1294[a7_1283 - 0x00000008:word32]):byte]
	a1 = Mem1294[a7_1283 - 0x00000004:word32]
	d0 = 1 << (d1 & 7) & d1
	branch d0 == 0x00000000 l000033A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000339E:
	branch d6_1172 - d3_1098 >=u 0x00000000 l00003326
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033A2:
	Mem1337[a7_1373 + 73:byte] = v499_1188
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033A6:
	branch d5_1085 == 0xFFFFFFFF l000033B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033AE:
	word32 a7_1345 = a7_1373 - 4
	Mem1351[a7_1345:word32] = a2_1057
	Mem1354[a7_1345 - 4:word32] = d5_1085
	d0 = fn00002E5C(Mem1354[a7_1345 - 1:byte], Mem1354[a7_1345:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033B8:
	d3_130 = d3_1098 - 0x00000001
	d4_132 = d4_1111 - 0x00000001
	branch Mem1374[a7_1373 + 73:byte] != 0x00 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033C4:
	branch d3_130 == 0x00000000 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033CA:
	Mem1391[a6_1202:byte] = 0x00
	Mem1394[a7_1373 + 60:word32] = Mem1391[a7_1373 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003080:
	word32 d1_1397 = DPB(d1, v71_487 - 0x63, 0)
	branch v71_487 == 0x63 l00003096
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003096:
	branch d6_1172 != 0xFFFFFFFF l000030A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000309E:
	d6_1172 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030A0:
	word32 a1_1411
	branch Mem614[a7_1373 + 73:byte] != 0x00 l000030BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030BA:
	a1_1411 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030A6:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1012 = d0 + 0x00000004
	a1_1411 = Mem614[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030BC:
	word32 a0_1425 = a2_1057 + 24
	Mem1428[a0_1425:word32] = Mem614[a0_1425:word32] | 0x00000001
	word32 a0_1429 = a2_1057 + 20
	Mem1431[a0_1429:word32] = Mem1428[a0_1429:word32] - 0x00000001
	Mem1436[a7_1373 + 44:word32] = a1_1411
	branch Mem1436[a0_1429:word32] < 0x00000000 l000030F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030F4:
	word32 a1_1442 = Mem1436[a7_1373 + 44:word32]
	word32 a7_1443 = a7_1373 - 4
	Mem1445[a7_1443:word32] = a2_1057
	Mem1447[a7_1443 + 48:word32] = a1_1442
	d0 = fn00003F30(d2_1012, a1_1442, a3, a4_273, a5, Mem1447[a7_1443:word32], out d1, out a1_4139, out a5)
	Mem1467[a7_1443 + 56:word32] = d0
	Mem1470[a7_1443 + 48:word32] = Mem1467[a7_1443 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030D4:
	word32 a1_1473 = a2_1057 + 4
	word32 a0_1474 = Mem1436[a1_1473:word32]
	word32 a7_1475 = a7_1373 - 4
	Mem1477[a7_1475:word32] = a2_1057
	Mem1481[a1_1473:word32] = a0_1474 + 1
	byte v235_1485 = Mem1481[a0_1474:byte]
	a2_1057 = Mem1481[a7_1475:word32]
	Mem1493[a7_1475:word32] = d1_1397
	Mem1498[a7_1475 + 56:word32] = (int32) v235_1485
	d0 = DPB(d0, v235_1485, 0)
	d1 = Mem1498[a7_1475:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003112:
	a1 = Mem1504[a7_1373 + 44:word32]
	d5_1085 = Mem1504[a7_1373 + 52:word32]
	word32 d3_1510 = d3_1907 + 0x00000001
	word32 d4_1514 = d4_132 + 0x00000001
	branch Mem1504[a7_1373 + 52:word32] == 0xFFFFFFFF l0000318A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003128:
	Mem1520[a7_1373 + 44:word32] = a1
	branch d6_1172 - d3_1510 <u 0x00000000 l0000318A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003130:
	byte v249_1527 = Mem1520[a7_1373 + 73:byte]
	d7 = DPB(d7, v249_1527, 0)
	word32 a4_1533 = Mem1520[a7_1373 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003138:
	branch v249_1527 != 0x00 l0000313E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000313C:
	Mem1542[a4_1533:byte] = (byte) d5_1085
	a4_1533 = a4_1533 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000313E:
	word32 a0_1547 = a2_1057 + 24
	Mem1551[a0_1547:word32] = Mem1548[a0_1547:word32] | 0x00000001
	word32 a0_1552 = a2_1057 + 20
	word32 v256_1553 = Mem1551[a0_1552:word32] - 0x00000001
	Mem1554[a0_1552:word32] = v256_1553
	branch v256_1553 < 0x00000000 l00003168
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003168:
	word32 a7_1559 = a7_1373 - 4
	Mem1561[a7_1559:word32] = a2_1057
	d0 = fn00003F30(d2_1012, a1, a3, a4_1533, a5, Mem1561[a7_1559:word32], out d1_4140, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003150:
	a1 = a2_1057 + 4
	word32 a0_1586 = Mem1554[a1:word32]
	word32 a7_1587 = a7_1373 - 4
	Mem1589[a7_1587:word32] = a2_1057
	Mem1593[a1:word32] = a0_1586 + 1
	byte v260_1597 = Mem1593[a0_1586:byte]
	a2_1057 = Mem1593[a7_1587:word32]
	d0 = DPB(d0, v260_1597, 0)
	d1 = (int32) v260_1597
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003174:
	d5_1085 = d1
	d3_1510 = d3_1510 + 0x00000001
	d4_1514 = d4_1514 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003186
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003182:
	branch d6_1172 - d3_1510 >=u 0x00000000 l00003138
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003186:
	Mem1631[a7_1373 + 73:byte] = v249_1527
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000318A:
	branch d5_1085 == 0xFFFFFFFF l0000319C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003192:
	word32 a7_1639 = a7_1373 - 4
	Mem1645[a7_1639:word32] = a2_1057
	Mem1648[a7_1639 - 4:word32] = d5_1085
	d0 = fn00002E5C(Mem1648[a7_1639 - 1:byte], Mem1648[a7_1639:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000319C:
	d3_130 = d3_1510 - 0x00000001
	d4_132 = d4_1514 - 0x00000001
	branch Mem1668[a7_1373 + 73:byte] != 0x00 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031A8:
	branch d3_130 == 0x00000000 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031AE:
	Mem1679[a7_1373 + 60:word32] = Mem1668[a7_1373 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003084:
	d1 = DPB(d1, v71_487 - 0x6E, 0)
	branch v71_487 == 0x6E l00003528
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003528:
	branch Mem614[a7_1373 + 73:byte] != 0x00 l000035C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003530:
	branch Mem614[a7_1373 + 72:byte] != 0x01 l00003552
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003552:
	branch Mem614[a7_1373 + 72:byte] != 0x6C l00003570
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003570:
	branch Mem614[a7_1373 + 72:byte] != 0x68 l0000358E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000358E:
	branch Mem614[a7_1373 + 72:byte] != 0x02 l000035AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035AC:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1711[Mem614[d0:word32]:word32] = d4_132
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003596:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1723[Mem614[d0:word32]:byte] = (byte) d4_132
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003578:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1735[Mem614[d0:word32]:word16] = (word16) d4_132
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000355A:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1747[Mem614[d0:word32]:word32] = d4_132
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003538:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 a0_1757 = Mem614[d0:word32]
	Mem1759[a0_1757 + 4:word32] = d4_132
	Mem1760[a0_1757:word32] = 0x00000000
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035C0:
	Mem1769[a7_1373 + 60:word32] = Mem1767[a7_1373 + 60:word32] + 0x00000001
	d3_130 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000308C:
	d1 = DPB(d1, v71_487 - 0x73, 0)
	branch v71_487 == 0x73 l000033D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033D4:
	branch Mem614[a7_1373 + 73:byte] != 0x00 l000033EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033EE:
	a5 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033DA:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1012 = d0 + 0x00000004
	a5 = Mem614[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033F0:
	branch d5_1085 == 0xFFFFFFFF l0000348C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033FA:
	word32 d0_1816 = (int32) Mem614[0x00002B15 + (DPB(d0, (byte) d5_1085, 0) & 0x000000FF):byte]
	d0 = d0_1816 & 0x00000008
	branch (d0_1816 & 0x00000008) != 0x00000000 l0000348C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003416:
	branch d6_1172 - d3_1907 <u 0x00000000 l0000348C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000341A:
	byte v154_1828 = Mem614[a7_1373 + 73:byte]
	d7 = DPB(d7, v154_1828, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000341E:
	branch v154_1828 != 0x00 l00003424
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003422:
	Mem1840[a5:byte] = (byte) d5_1085
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003424:
	word32 a0_1845 = a2_1057 + 24
	Mem1849[a0_1845:word32] = Mem1846[a0_1845:word32] | 0x00000001
	word32 a0_1850 = a2_1057 + 20
	word32 v160_1851 = Mem1849[a0_1850:word32] - 0x00000001
	Mem1852[a0_1850:word32] = v160_1851
	branch v160_1851 < 0x00000000 l0000344E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000344E:
	word32 a7_1857 = a7_1373 - 4
	Mem1859[a7_1857:word32] = a2_1057
	d0 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem1859[a7_1857:word32], out d1_4138, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003436:
	a1 = a2_1057 + 4
	word32 a0_1884 = Mem1852[a1:word32]
	word32 a7_1885 = a7_1373 - 4
	Mem1887[a7_1885:word32] = a2_1057
	Mem1891[a1:word32] = a0_1884 + 1
	byte v164_1895 = Mem1891[a0_1884:byte]
	a2_1057 = Mem1891[a7_1885:word32]
	d0 = DPB(d0, v164_1895, 0)
	d1 = (int32) v164_1895
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000345A:
	d5_1085 = d1
	d3_1907 = d3_1907 + 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003488
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003468:
	word32 d0_1926 = (int32) Mem1924[0x00002B15 + (DPB(d0, (byte) d1, 0) & 0x000000FF):byte]
	d0 = d0_1926 & 0x00000008
	branch (d0_1926 & 0x00000008) != 0x00000000 l00003488
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003484:
	branch d6_1172 - d3_1907 >=u 0x00000000 l0000341E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003488:
	Mem1944[a7_1373 + 73:byte] = v154_1828
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000348C:
	branch d5_1085 == 0xFFFFFFFF l0000349E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003494:
	word32 a7_1952 = a7_1373 - 4
	Mem1958[a7_1952:word32] = a2_1057
	Mem1961[a7_1952 - 4:word32] = d5_1085
	d0 = fn00002E5C(Mem1961[a7_1952 - 1:byte], Mem1961[a7_1952:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000349E:
	d3_130 = d3_1907 - 0x00000001
	d4_132 = d4_132 - 0x00000001
	branch Mem1982[a7_1373 + 73:byte] != 0x00 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034AA:
	branch d3_130 == 0x00000000 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034B0:
	Mem1997[a5:byte] = 0x00
	Mem2000[a7_1373 + 60:word32] = Mem1997[a7_1373 + 60:word32] + 0x00000001
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003092:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035CA:
	Mem2002[a7_1373 + 48:word32] = 0x00000000
	Mem2003[a7_1373 + 44:word32] = 0x00000000
	Mem2004[a7_1373 + 110:word32] = 0x00000000
	branch v71_487 != 0x00 l000035DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035DA:
	a3 = a3 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035DC:
	branch v71_487 != 0x70 l000035EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035E2:
	Mem2016[a7_1373 + 72:byte] = 0x6C
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035EA:
	branch d5_1085 != 0x0000002D l000035F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035F2:
	branch (byte) d7 != 0x75 l00003600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035F8:
	branch d5_1085 != 0x0000002B l00003650
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003600:
	branch d6_1172 - d3_1907 <u 0x00000000 l00003650
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003604:
	Mem2048[a7_1373 + 110:word32] = d5_1085
	word32 a0_2053 = a2_1057 + 24
	Mem2055[a0_2053:word32] = Mem2048[a0_2053:word32] | 0x00000001
	word32 a0_2056 = a2_1057 + 20
	word32 v186_2057 = Mem2055[a0_2056:word32] - 0x00000001
	Mem2058[a0_2056:word32] = v186_2057
	branch v186_2057 < 0x00000000 l0000363A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000363A:
	word32 a7_2061 = a7_1373 - 4
	Mem2063[a7_2061:word32] = a2_1057
	d0 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem2063[a7_2061:word32], out d1, out a1, out a5)
	Mem2096[a7_2061 + 56:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000361A:
	a1 = a2_1057 + 4
	word32 a0_2100 = Mem2058[a1:word32]
	word32 a7_2101 = a7_1373 - 4
	Mem2103[a7_2101:word32] = a2_1057
	Mem2107[a1:word32] = a0_2100 + 1
	byte v190_2111 = Mem2107[a0_2100:byte]
	a2_1057 = Mem2107[a7_2101:word32]
	Mem2123[a7_2101:word32] = d1
	Mem2128[a7_2101 + 56:word32] = (int32) v190_2111
	d0 = DPB(d0, v190_2111, 0)
	d1 = Mem2128[a7_2101:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003648:
	d5_1085 = Mem2134[a7_1373 + 52:word32]
	d3_1907 = d3_1907 + 0x00000001
	d4_132 = d4_132 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003650:
	branch (byte) d7 != 0x69 l000037C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003658:
	branch d5_1085 != 0x00000030 l00003784
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003662:
	branch d6_1172 - d3_1907 <u 0x00000000 l00003784
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003784:
	word32 d0_2179 = (int32) Mem2173[0x00002B15 + (DPB(d0, (byte) d5_1085, 0) & 0x000000FF):byte]
	d0 = d0_2179 & 0x00000004
	branch (d0_2179 & 0x00000004) != 0x00000000 l000037C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037A0:
	word32 d0_2192 = (int32) Mem2173[0x00002B15 + (DPB(d0_2179 & 0x00000004, (byte) d5_1085, 0) & 0x000000FF):byte]
	d0 = d0_2192 & 0x00000044
	branch (d0_2192 & 0x00000044) == 0x00000000 l000037C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037BC:
	branch d6_1172 - d3_1907 <u 0x00000000 l000037C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037C0:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003668:
	word32 d0_2233
	word32 a0_2207 = a2_1057 + 24
	Mem2209[a0_2207:word32] = Mem2173[a0_2207:word32] | 0x00000001
	word32 a0_2210 = a2_1057 + 20
	word32 v202_2211 = Mem2209[a0_2210:word32] - 0x00000001
	Mem2212[a0_2210:word32] = v202_2211
	branch v202_2211 < 0x00000000 l0000369A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000369A:
	word32 a7_2216 = a7_1373 - 4
	Mem2218[a7_2216:word32] = a2_1057
	d0_2233 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem2218[a7_2216:word32], out d1, out a1, out a5)
	Mem2241[a7_2216 + 56:word32] = d0_2233
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000367A:
	a1 = a2_1057 + 4
	word32 a0_2245 = Mem2212[a1:word32]
	word32 a7_2246 = a7_1373 - 4
	Mem2248[a7_2246:word32] = a2_1057
	Mem2252[a1:word32] = a0_2245 + 1
	byte v206_2256 = Mem2252[a0_2245:byte]
	a2_1057 = Mem2252[a7_2246:word32]
	Mem2262[a7_2246:word32] = d1
	Mem2267[a7_2246 + 56:word32] = (int32) v206_2256
	d0_2233 = DPB(d0, v206_2256, 0)
	d1 = Mem2267[a7_2246:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036A8:
	Mem2275[a7_1373 + 64:word32] = Mem2273[a7_1373 + 52:word32]
	word32 d0_2284 = DPB(d0_2233, Mem2275[a7_1373 + 55:byte], 0)
	word32 d3_2277 = d3_1907 + 0x00000001
	d0 = d0_2284 & 0x000000FF
	branch __btst(Mem2275[0x00002B15 + (int32) ((int16) (d0_2284 & 0x000000FF)):byte], 0x0000) l000036CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036CA:
	d0 = DPB(d0_2284 & 0x000000FF, (byte) (d0_2284 & 0x000000FF) | 0x20, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036CE:
	branch d0 != 0x00000078 l00003766
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036D8:
	branch d6_1172 - d3_2277 <u 0x00000000 l00003766
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003766:
	d7 = 111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036DE:
	word32 d0_2337
	word32 a0_2310 = a2_1057 + 24
	Mem2313[a0_2310:word32] = Mem2275[a0_2310:word32] | 0x00000001
	word32 a0_2314 = a2_1057 + 20
	word32 v220_2315 = Mem2313[a0_2314:word32] - 0x00000001
	Mem2316[a0_2314:word32] = v220_2315
	branch v220_2315 < 0x00000000 l00003710
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003710:
	word32 a7_2320 = a7_1373 - 4
	Mem2322[a7_2320:word32] = a2_1057
	d0_2337 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem2322[a7_2320:word32], out d1, out a1, out a5)
	Mem2345[a7_2320 + 56:word32] = d0_2337
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036F0:
	a1 = a2_1057 + 4
	word32 a0_2349 = Mem2316[a1:word32]
	word32 a7_2350 = a7_1373 - 4
	Mem2352[a7_2350:word32] = a2_1057
	Mem2356[a1:word32] = a0_2349 + 1
	byte v224_2360 = Mem2356[a0_2349:byte]
	a2_1057 = Mem2356[a7_2350:word32]
	Mem2366[a7_2350:word32] = d1
	Mem2371[a7_2350 + 56:word32] = (int32) v224_2360
	d0_2337 = DPB(d0, v224_2360, 0)
	d1 = Mem2371[a7_2350:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000371E:
	Mem2379[a7_1373 + 74:word32] = Mem2377[a7_1373 + 52:word32]
	word32 d0_2397 = (int32) Mem2379[0x00002B15 + (DPB(d0_2337, (byte) d5_1085, 0) & 0x000000FF):byte]
	d0 = d0_2397 & 0x00000044
	branch (d0_2397 & 0x00000044) == 0x00000000 l0000374A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003744:
	branch d6_1172 - (d3_2277 + 0x00000001) <u 0x00000000 l0000374A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003748:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000374A:
	branch Mem2379[a7_1373 + 74:word32] == 0xFFFFFFFF l00003760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003754:
	word32 a7_2414 = a7_1373 - 4
	Mem2418[a7_2414:word32] = a2_1057
	Mem2422[a7_2414 - 4:word32] = Mem2418[a7_2414 + 78:word32]
	d0 = fn00002E5C(Mem2422[a7_2414 - 1:byte], Mem2422[a7_2414:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003760:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003768:
	branch Mem2442[a7_1373 + 64:word32] == 0xFFFFFFFF l0000377E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003772:
	word32 a7_2448 = a7_1373 - 4
	Mem2453[a7_2448:word32] = a2_1057
	Mem2457[a7_2448 - 4:word32] = Mem2453[a7_2448 + 68:word32]
	d0 = fn00002E5C(Mem2457[a7_2448 - 1:byte], Mem2457[a7_2448:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000377E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037C2:
	word32 d4_2628 = d4_132
	word32 d3_2503 = d3_1907
	branch (byte) d7 != 0x78 l000038F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037CA:
	branch d5_1085 != 0x00000030 l000038F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037D4:
	branch d6_1172 - d3_1907 <u 0x00000000 l000038F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037DA:
	word32 d0_2570
	word32 a0_2510 = a2_1057 + 24
	Mem2514[a0_2510:word32] = Mem2511[a0_2510:word32] | 0x00000001
	word32 a0_2515 = a2_1057 + 20
	word32 v287_2516 = Mem2514[a0_2515:word32] - 0x00000001
	Mem2517[a0_2515:word32] = v287_2516
	branch v287_2516 < 0x00000000 l0000380C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000380C:
	word32 a7_2523 = a7_1373 - 4
	Mem2525[a7_2523:word32] = a2_1057
	d0_2570 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem2525[a7_2523:word32], out d1, out a1, out a5)
	Mem2578[a7_2523 + 56:word32] = d0_2570
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037EC:
	a1 = a2_1057 + 4
	word32 a0_2582 = Mem2517[a1:word32]
	word32 a7_2583 = a7_1373 - 4
	Mem2585[a7_2583:word32] = a2_1057
	Mem2589[a1:word32] = a0_2582 + 1
	byte v291_2593 = Mem2589[a0_2582:byte]
	a2_1057 = Mem2589[a7_2583:word32]
	Mem2611[a7_2583:word32] = d1
	Mem2616[a7_2583 + 56:word32] = (int32) v291_2593
	d0_2570 = DPB(d0, v291_2593, 0)
	d1 = Mem2616[a7_2583:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000381A:
	Mem2624[a7_1373 + 64:word32] = Mem2622[a7_1373 + 52:word32]
	word32 d0_2634 = DPB(d0_2570, Mem2624[a7_1373 + 55:byte], 0)
	word32 d3_2626 = d3_1907 + 0x00000001
	word32 d4_2630 = d4_132 + 0x00000001
	d0 = d0_2634 & 0x000000FF
	branch __btst(Mem2624[0x00002B15 + (int32) ((int16) (d0_2634 & 0x000000FF)):byte], 0x0000) l00003840
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000383C:
	d0 = DPB(d0_2634 & 0x000000FF, (byte) (d0_2634 & 0x000000FF) | 0x20, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003840:
	branch d0 != 0x00000078 l000038DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000384A:
	branch d6_1172 - d3_2626 <u 0x00000000 l000038DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003850:
	word32 d0_2685
	word32 a0_2658 = a2_1057 + 24
	Mem2661[a0_2658:word32] = Mem2624[a0_2658:word32] | 0x00000001
	word32 a0_2662 = a2_1057 + 20
	word32 v304_2663 = Mem2661[a0_2662:word32] - 0x00000001
	Mem2664[a0_2662:word32] = v304_2663
	branch v304_2663 < 0x00000000 l00003882
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003882:
	word32 a7_2668 = a7_1373 - 4
	Mem2670[a7_2668:word32] = a2_1057
	d0_2685 = fn00003F30(d2_1012, a1, a3, a4_273, a5, Mem2670[a7_2668:word32], out d1, out a1, out a5)
	Mem2693[a7_2668 + 56:word32] = d0_2685
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003862:
	a1 = a2_1057 + 4
	word32 a0_2697 = Mem2664[a1:word32]
	word32 a7_2698 = a7_1373 - 4
	Mem2700[a7_2698:word32] = a2_1057
	Mem2704[a1:word32] = a0_2697 + 1
	byte v308_2708 = Mem2704[a0_2697:byte]
	a2_1057 = Mem2704[a7_2698:word32]
	Mem2714[a7_2698:word32] = d1
	Mem2719[a7_2698 + 56:word32] = (int32) v308_2708
	d0_2685 = DPB(d0, v308_2708, 0)
	d1 = Mem2719[a7_2698:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003890:
	Mem2727[a7_1373 + 74:word32] = Mem2725[a7_1373 + 52:word32]
	word32 d0_2742 = (int32) Mem2727[0x00002B15 + (DPB(d0_2685, Mem2727[a7_1373 + 55:byte], 0) & 0x000000FF):byte]
	d3_2503 = d3_2626 + 0x00000001
	d4_2628 = d4_2630 + 0x00000001
	d0 = d0_2742 & 0x00000044
	branch (d0_2742 & 0x00000044) == 0x00000000 l000038C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038B8:
	branch d6_1172 - (d3_2626 + 0x00000001) <u 0x00000000 l000038C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038C2:
	branch Mem2727[a7_1373 + 74:word32] == 0xFFFFFFFF l000038D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038CC:
	word32 a7_2757 = a7_1373 - 4
	Mem2761[a7_2757:word32] = a2_1057
	Mem2765[a7_2757 - 4:word32] = Mem2761[a7_2757 + 78:word32]
	d0 = fn00002E5C(Mem2765[a7_2757 - 1:byte], Mem2765[a7_2757:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038DC:
	branch Mem2784[a7_1373 + 64:word32] == 0xFFFFFFFF l000038F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038E6:
	word32 a7_2789 = a7_1373 - 4
	Mem2793[a7_2789:word32] = a2_1057
	Mem2797[a7_2789 - 4:word32] = Mem2793[a7_2789 + 68:word32]
	d0 = fn00002E5C(Mem2797[a7_2789 - 1:byte], Mem2797[a7_2789:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038F2:
	d3_2503 = d3_2626 - 0x00000001
	d4_2628 = d4_2630 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038BC:
	d5_1085 = Mem2727[a7_1373 + 74:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038F6:
	branch (byte) d7 == 0x78 l00003902
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038FC:
	branch (byte) d7 != 0x58 l0000390C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000390C:
	branch (byte) d7 != 0x6F l0000391C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000391C:
	Mem2836[a7_1373 + 52:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003912:
	Mem2839[a7_1373 + 52:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003924:
	Mem2844[a7_1373 + 64:word32] = Mem2842[a7_1373 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003902:
	Mem2848[a7_1373 + 64:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000392A:
	Mem2853[a7_1373 + 114:word32] = Mem2851[a7_1373 + 64:word32]
	word32 d0_2880 = (int32) Mem2853[0x00002B15 + (DPB(d0, (byte) d5_1085, 0) & 0x000000FF):byte]
	Mem2892[a7_1373 + 132:word32] = d2_1012
	Mem2898[a7_1373 + 52:word32] = d4_2628
	Mem2903[a7_1373 + 74:byte] = (byte) d7
	d0 = d0_2880 & 0x00000044
	branch (d0_2880 & 0x00000044) == 0x00000000 l00003B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000395C:
	branch Mem2903[a7_1373 + 114:word32] != 0x0000000A l00003992
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003966:
	word32 d0_2918 = (int32) Mem2903[0x00002B15 + (DPB(d0_2880 & 0x00000044, (byte) d5_1085, 0) & 0x000000FF):byte]
	Mem2921[a7_1373 + 132:word32] = d2_1012
	Mem2923[a7_1373 + 52:word32] = d4_2628
	Mem2925[a7_1373 + 74:byte] = (byte) d7
	d0 = d0_2918 & 0x00000004
	branch (d0_2918 & 0x00000004) == 0x00000000 l00003B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003992:
	branch Mem2931[a7_1373 + 114:word32] != 0x00000008 l000039B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000399C:
	Mem2937[a7_1373 + 132:word32] = d2_1012
	Mem2940[a7_1373 + 52:word32] = d4_2628
	Mem2943[a7_1373 + 74:byte] = (byte) d7
	branch d5_1085 > 0x00000037 l00003B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039B2:
	Mem2951[a7_1373 + 132:word32] = d2_1012
	Mem2954[a7_1373 + 52:word32] = d4_2628
	Mem2966[a7_1373 + 64:word32] = d6_1172
	Mem2969[a7_1373 + 74:byte] = (byte) d7
	branch d6_1172 - d3_2503 <u 0x00000000 l00003B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039C8:
	d7 = Mem2969[a7_1373 + 114:word32]
	word32 a4_2981 = Mem2969[a7_1373 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039D0:
	word32 a7_2986 = a7_1373 - 4
	Mem2989[a7_2986:word32] = d2_1012
	word32 v347_2993 = Mem2989[a7_2986:word32]
	Mem2998[a7_2986:word32] = d7 >> 31
	Mem3001[a7_2986 - 4:word32] = d7
	Mem3005[a7_2986 - 8:word32] = a1
	Mem3009[a7_2986 - 12:word32] = Mem3005[a7_2986 + 52:word32]
	Mem3013[a7_2986 - 16:word32] = Mem3009[a7_2986 + 48:word32]
	Mem3016[a7_2986 - 20:word32] = d7
	Mem3018[a7_2986 - 24:word32] = d7 >> 31
	word32 d1_3021
	word32 d0_3020 = fn00003EB0(d4_2628, Mem3018[a7_2986 - 24:word32], Mem3018[a7_2986 - 20:word32], Mem3018[a7_2986 - 16:word32], Mem3018[a7_2986 - 12:word32], out d1_3021)
	word32 v355_3028 = Mem3018[a7_2986 - 8:word32]
	Mem3032[a7_2986 + 68:word32] = d0_3020
	Mem3034[a7_2986 + 72:word32] = d1_3021
	branch ((int32) Mem3034[0x00002B15 + (DPB(Mem3034[a7_2986:word32], (byte) d5_1085, 0) & 0x000000FF):byte] & 0x00000004) == 0x00000000 l00003A30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A30:
	d4_2628 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A26:
	d4_2628 = d5_1085 - 0x00000030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A32:
	word32 d6_3111
	Mem3065[a7_1373 - 4:word32] = v347_2993
	Mem3073[a7_1373 - 4:word32] = Mem3065[a7_1373 - 4:word32]
	word32 d2_3075 = d4_2628 + Mem3073[a7_1373 + 68:word32]
	Mem3078[a7_1373 + 48:word32] = d2_3075
	Mem3084[a7_1373 - 8:word32] = d3_2503
	word32 d0_3067 = d4_2628 >> 31
	Mem3090[a7_1373 + 44:word32] = Mem3084[a7_1373 + 64:word32] + d0_3067 + (d2_3075 <u 0x00000000)
	word32 v367_3091 = Mem3090[a7_1373 - 8:word32]
	word32 v368_3094 = Mem3090[a7_1373 - 4:word32]
	branch ((int32) Mem3090[0x00002B15 + (DPB(d0_3067, (byte) d5_1085, 0) & 0x000000FF):byte] & 0x00000001) == 0x00000000 l00003A82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A82:
	d6_3111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A78:
	d6_3111 = d5_1085 - 0x00000037
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A84:
	word32 d2_3168
	Mem3123[a7_1373 - 4:word32] = v368_3094
	Mem3131[a7_1373 - 4:word32] = Mem3123[a7_1373 - 4:word32]
	word32 d2_3133 = d6_3111 + Mem3131[a7_1373 + 48:word32]
	Mem3136[a7_1373 + 68:word32] = d2_3133
	Mem3141[a7_1373 - 8:word32] = v367_3091
	word32 d0_3125 = d6_3111 >> 31
	Mem3147[a7_1373 + 64:word32] = Mem3141[a7_1373 + 44:word32] + d0_3125 + (d2_3133 <u 0x00000000)
	word32 v377_3148 = Mem3147[a7_1373 - 8:word32]
	branch ((int32) Mem3147[0x00002B15 + (DPB(d0_3125, (byte) d5_1085, 0) & 0x000000FF):byte] & 0x00000002) == 0x00000000 l00003AD4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AD4:
	d2_3168 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003ACA:
	d2_3168 = d5_1085 - 0x00000057
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AD6:
	word32 d0_3244
	Mem3179[a7_1373 - 4:word32] = d2_3168
	Mem3187[a7_1373 - 4:word32] = Mem3179[a7_1373 - 4:word32]
	word32 d2_3189 = d2_3168 + Mem3187[a7_1373 + 68:word32]
	Mem3192[a7_1373 + 48:word32] = d2_3189
	Mem3197[a7_1373 - 8:word32] = v377_3148
	Mem3202[a7_1373 + 44:word32] = Mem3197[a7_1373 + 64:word32] + (d2_3168 >> 31) + (d2_3189 <u 0x00000000)
	word32 v388_3206 = Mem3202[a7_1373 - 4:word32]
	word32 a0_3213 = a2_1057 + 24
	word32 v387_3203 = Mem3202[a7_1373 - 8:word32]
	Mem3216[a0_3213:word32] = Mem3202[a0_3213:word32] | 1
	word32 a0_3217 = a2_1057 + 20
	word32 v390_3218 = Mem3216[a0_3217:word32] - 0x00000001
	Mem3219[a0_3217:word32] = v390_3218
	d2_1012 = v388_3206
	branch v390_3218 < 0x00000000 l00003B28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B28:
	Mem3224[a7_1373 - 4:word32] = a2_1057
	d0_3244 = fn00003F30(v388_3206, v355_3028, a3, a4_2981, a5, Mem3224[a7_1373 - 4:word32], out d1_4141, out a1, out a5)
	d1 = d0_3244
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B10:
	a1 = a2_1057 + 4
	word32 a0_3255 = Mem3219[a1:word32]
	Mem3258[a7_1373 - 4:word32] = a2_1057
	Mem3262[a1:word32] = a0_3255 + 1
	byte v394_3266 = Mem3262[a0_3255:byte]
	a2_1057 = Mem3262[a7_1373 - 4:word32]
	d0_3244 = DPB(1, v394_3266, 0)
	d1 = (int32) v394_3266
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B34:
	Mem3279[a7_1373 + 52:word32] = Mem3277[a7_1373 + 52:word32] + 0x00000001
	word32 d0_3289 = (int32) Mem3279[0x00002B15 + (DPB(d0_3244, (byte) d1, 0) & 0x000000FF):byte]
	d5_1085 = d1
	d3_2503 = v387_3203 + 0x00000001
	d0 = d0_3289 & 0x00000044
	branch (d0_3289 & 0x00000044) == 0x00000000 l00003B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B58:
	branch d7 != 0x0000000A l00003B7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B60:
	word32 d0_3309 = (int32) Mem3279[0x00002B15 + (DPB(d0_3289 & 0x00000044, (byte) d1, 0) & 0x000000FF):byte]
	d0 = d0_3309 & 0x00000004
	branch (d0_3309 & 0x00000004) == 0x00000000 l00003B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B7C:
	branch d7 != 0x00000008 l00003B8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B84:
	branch d1 > 0x00000037 l00003B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B8C:
	branch a4_2981 - (v387_3203 + 0x00000001) >=u 0x00000000 l000039D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B92:
	byte v396_3337 = Mem3334[a7_1373 + 74:byte]
	d7 = DPB(d7, v396_3337, 0)
	word32 d4_3341 = Mem3334[a7_1373 + 52:word32]
	d2_1012 = Mem3334[a7_1373 + 132:word32]
	branch Mem3334[a7_1373 + 110:word32] == 0x00000000 l00003BC6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BA4:
	branch d3_2503 != 0x00000002 l00003BC6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BAC:
	branch d5_1085 == 0xFFFFFFFF l00003BBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BB4:
	word32 a7_3357 = a7_1373 - 4
	Mem3370[a7_3357:word32] = a2_1057
	Mem3373[a7_3357 - 4:word32] = d5_1085
	d0 = fn00002E5C(Mem3373[a7_3357 - 1:byte], Mem3373[a7_3357:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BBE:
	d3_2503 = d3_2503 - 0x00000001
	d4_3341 = d4_3341 - 0x00000001
	d5_1085 = Mem3389[a7_1373 + 110:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BC6:
	branch d5_1085 == 0xFFFFFFFF l00003BD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BCE:
	word32 a7_3397 = a7_1373 - 4
	Mem3401[a7_3397:word32] = a2_1057
	Mem3404[a7_3397 - 4:word32] = d5_1085
	d0 = fn00002E5C(Mem3404[a7_3397 - 1:byte], Mem3404[a7_3397:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BD8:
	d3_130 = d3_2503 - 0x00000001
	d4_132 = d4_3341 - 0x00000001
	branch Mem3422[a7_1373 + 73:byte] != 0x00 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BE4:
	branch d3_130 == 0x00000000 l00003D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BEA:
	branch v396_3337 != 0x75 l00003CAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CAC:
	branch Mem3422[a7_1373 + 110:word32] != 0x0000002D l00003CC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CC8:
	Mem3442[a7_1373 + 56:word32] = Mem3422[a7_1373 + 48:word32]
	Mem3444[a7_1373 + 52:word32] = Mem3442[a7_1373 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CB6:
	word32 v441_3446 = a7_1373 + 44
	d1 = -Mem3422[v441_3446 + 4:word32]
	d0 = -Mem3422[v441_3446:word32] - (d1 <u 0x00000000)
	a7_1373 = Mem3422[a7_1373 + 0x00000038:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CD4:
	word32 a7_3462 = a7_1373 - 4
	Mem3473[a7_3462:word32] = d0
	Mem3480[a7_3462 + 48:byte] = Mem3473[a7_3462 + 76:byte] - 0x01
	a7_1373 = a7_3462 + 4
	branch Mem3480[a7_3462 + 48:byte] == 0x00 l00003CFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CFE:
	word32 d0_3494 = d2_1012 + 0x00000003 >>u 0x00000002
	d2_1012 = (d0_3494 << 0x00000002) + 0x00000004
	word32 a0_3500 = Mem3480[d2_1012 + -4:word32]
	Mem3502[a0_3500 + 4:word32] = Mem3480[a7_3462 + 60:word32]
	Mem3504[a0_3500:word32] = Mem3502[a7_3462 + 56:word32]
	d0 = d0_3494 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CE8:
	byte v451_3506 = Mem3480[a7_3462 + 48:byte] - 0x01
	Mem3507[a7_3462 + 48:byte] = v451_3506
	branch v451_3506 == 0x00 l00003D50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D50:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3507[a7_3462 + 60:word32]
	Mem3521[Mem3507[d2_1012 + -4:word32]:byte] = (byte) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CEE:
	byte v452_3523 = Mem3507[a7_3462 + 48:byte] - 0x66
	Mem3524[a7_3462 + 48:byte] = v452_3523
	branch v452_3523 == 0x00 l00003D36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D36:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3524[a7_3462 + 60:word32]
	Mem3538[Mem3524[d2_1012 + -4:word32]:word16] = (word16) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF6:
	byte v453_3540 = Mem3524[a7_3462 + 48:byte] - 0x04
	Mem3541[a7_3462 + 48:byte] = v453_3540
	branch v453_3540 == 0x00 l00003D1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D1C:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3541[a7_3462 + 60:word32]
	Mem3555[Mem3541[d2_1012 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CFC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D6A:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3541[a7_3462 + 60:word32]
	Mem3568[Mem3541[d2_1012 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BF2:
	word32 a7_3570 = a7_1373 - 4
	Mem3572[a7_3570:word32] = d0
	Mem3579[a7_3570 + 56:byte] = Mem3572[a7_3570 + 76:byte] - 0x01
	a7_1373 = a7_3570 + 4
	branch Mem3579[a7_3570 + 56:byte] == 0x00 l00003C1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C1C:
	word32 d0_3589 = d2_1012 + 0x00000003 >>u 0x00000002
	d2_1012 = (d0_3589 << 0x00000002) + 0x00000004
	word32 a0_3595 = Mem3579[d2_1012 + -4:word32]
	Mem3597[a0_3595 + 4:word32] = Mem3579[a7_3570 + 52:word32]
	Mem3599[a0_3595:word32] = Mem3597[a7_3570 + 48:word32]
	d0 = d0_3589 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C06:
	byte v430_3601 = Mem3579[a7_3570 + 56:byte] - 0x01
	Mem3602[a7_3570 + 56:byte] = v430_3601
	branch v430_3601 == 0x00 l00003C74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C74:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3602[a7_3570 + 52:word32]
	Mem3616[Mem3602[d2_1012 + -4:word32]:byte] = (byte) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C0C:
	byte v431_3618 = Mem3602[a7_3570 + 56:byte] - 0x66
	Mem3619[a7_3570 + 56:byte] = v431_3618
	branch v431_3618 == 0x00 l00003C58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C58:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3619[a7_3570 + 52:word32]
	Mem3633[Mem3619[d2_1012 + -4:word32]:word16] = (word16) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C14:
	byte v432_3635 = Mem3619[a7_3570 + 56:byte] - 0x04
	Mem3636[a7_3570 + 56:byte] = v432_3635
	branch v432_3635 == 0x00 l00003C3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C3C:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3636[a7_3570 + 52:word32]
	Mem3650[Mem3636[d2_1012 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C1A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C90:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3636[a7_3570 + 52:word32]
	Mem3663[Mem3636[d2_1012 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D82:
	Mem3668[a7_1373 + 60:word32] = Mem3666[a7_1373 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D86:
	a4_273 = a3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E84:
	branch d3_130 == 0x00000000 l00003E8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E88:
	branch Mem3720[a4_273:byte] != 0x00 l00002EAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E8E:
	word32 d0_3761
	branch d5_1085 != 0xFFFFFFFF l00003EA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E96:
	branch Mem3754[a7_1373 + 60:word32] != 0x00000000 l00003EA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003EA0:
	d0_3761 = Mem3754[a7_1373 + 60:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E9C:
	d0_3761 = d5_1085
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003EA4:
	word32 a7_3768 = a7_1373 + 4
	word32 a3_3781 = Mem3754[a7_3768 + 24:word32]
	word32 a5_3785 = Mem3754[a7_3768 + 32:word32]
	d1Out = d1
	a1Out = a1
	a3Out = a3_3781
	a5Out = a5_3785
	return d0_3761
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002E8C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003EB0(word32 d4, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d4:[16..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00003EB0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003EB0:
	word32 d0_23 = __swap(dwArg08)
	word32 d1_25 = __swap(dwArg10)
	word32 d4_28 = DPB(d4, (word16) dwArg08, 0) *u (word16) dwArg10
	word32 d1_31 = d1_25 *u (word16) d0_23
	word32 d2_37 = dwArg08 *u (word16) d1_25 + __swap(DPB(d4_28, (word16) d4_28 ^ (word16) d4_28, 0)) + dwArg10 *u (word16) d0_23
	branch d2_37 >=u 0x00000000 l00003EE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003EDE:
	d1_31 = d1_31 + 0x00010000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003EE4:
	word32 d2_43 = __swap(d2_37)
	word32 d3_61 = __swap(dwArg0C) *u (word16) dwArg08
	word32 d3_66 = __swap(DPB(d3_61, (word16) (d3_61 + __swap(dwArg08) *u (word16) dwArg0C), 0))
	word32 d3_77 = __swap(dwArg04) *u (word16) dwArg10
	word32 d3_82 = __swap(DPB(d3_77, (word16) (d3_77 + __swap(dwArg10) *u (word16) dwArg04), 0))
	d1Out = DPB(d2_43, (word16) d4_28, 0)
	return (int32) (word16) d2_43 + d1_31 + (dwArg0C *u (word16) dwArg08 + DPB(d3_66, (word16) d3_66 ^ (word16) d3_66, 0)) + (dwArg04 *u (word16) dwArg10 + DPB(d3_82, (word16) d3_82 ^ (word16) d3_82, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003EB0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003F30(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5
fn00003F30_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F30:
	word32 d0_162
	word32 a4_33
	word32 a5_280
	word32 a1_118
	word32 d1_120 = fn00002688(d2, a1, dwArg04, a3, a4, a5, out a1_118, out a4_33, out a5_280)
	branch dwArg04 != 0x00000000 l00003F48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F48:
	branch 32 - (Mem26[dwArg04 + 24:word32] & 42) == 0x00000000 l00003F5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F5A:
	Mem51[dwArg04 + 24:word32] = Mem26[dwArg04 + 24:word32] | 1
	word32 d0_127 = Mem51[dwArg04 + 24:word32] & 0x00000200
	branch d0_127 == 0x00000000 l00003F72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F6C:
	d0_127 = fn0000402C(d2, a1_118, a3, a4_33, a5_280, out a1_118, out a5_280)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F72:
	branch Mem51[dwArg04 + 28:word32] != 0x00000000 l00003F90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F78:
	d0_127 = Mem51[dwArg04 + 24:word32] & 4
	branch d0_127 == 0x00000000 l00003F88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F88:
	Mem81[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F80:
	Mem85[dwArg04 + 28:word32] = 1
	d0_127 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F90:
	branch Mem88[dwArg04 + 8:word32] != 0x00000000 l00003FCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F96:
	word32 d4_100
	branch (Mem88[dwArg04 + 24:word32] & 0x00000080) == 0x00000000 l00003FAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003FAA:
	d4_100 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003FA6:
	d4_100 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003FAC:
	word32 d0_119 = fn000022B4(d4_100 + Mem88[dwArg04 + 28:word32], out d1_120, out a0_319, out a1_118)
	d0_127 = d0_119
	branch d0_119 != 0x00000000 l00003FC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003FC4:
	Mem133[dwArg04 + 8:word32] = d0_119 + 1
	a1_118 = d0_119 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003FCC:
	Mem139[dwArg04 + 4:word32] = Mem137[dwArg04 + 8:word32]
	d1_120 = Mem139[dwArg04:word32]
	execPrivate2()
	Mem149[dwArg04 + 20:word32] = d0_127
	word32 v26_150 = Mem149[dwArg04 + 20:word32] - 0x00000001
	Mem151[dwArg04 + 20:word32] = v26_150
	branch v26_150 >= 0x00000000 l00004012
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00004012:
	word32 a0_155 = Mem151[dwArg04 + 4:word32]
	Mem159[dwArg04 + 4:word32] = a0_155 + 1
	a1_118 = dwArg04 + 4
	d0_162 = DPB(d0_127, Mem159[a0_155:byte], 0) & 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003FF0:
	branch -1 - Mem151[dwArg04 + 20:word32] != 0x00000000 l00004002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00004002:
	Mem173[dwArg04 + 24:word32] = Mem151[dwArg04 + 24:word32] | 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003FF8:
	Mem180[dwArg04 + 24:word32] = Mem151[dwArg04 + 24:word32] | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000400A:
	Mem185[dwArg04 + 20:word32] = 0x00000000
	d0_162 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003FC0:
	d0_162 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F54:
	d0_162 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003F42:
	d0_162 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00004026:
	d1Out = d1_120
	a1Out = a1_118
	a5Out = a5_280
	return d0_162
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003F30_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000402C(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31]
// LiveOut: a1 a5 d0
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn0000402C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000402C:
	word32 a2_11 = Mem5[0x00004260:word32]
	word32 d0_47 = a2_11
	branch a2_11 == 0x00000000 l00004064
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000403A:
	branch (Mem12[a2_11 + 24:word32] & 0x00000202) != 0x00000202 l0000405A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000404C:
	branch Mem12[a2_11:word32] == 0x00000000 l0000405A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00004050:
	fn00002208(d2, a1, a3, a4, a5, a2_11, out a0_97, out a1, out a4, out a5)
	Mem45 = Mem24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000405A:
	a2_11 = Mem45[a2_11 + 12:word32]
	d0_47 = a2_11
	branch a2_11 != 0x00000000 l0000403A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00004064:
	a1Out = a1
	a5Out = a5
	return d0_47
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000402C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00004068(word32 a3, word32 a4, word32 a5, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] a4:[0..31] a5:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00004068_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00004068:
	word32 d0_114
	word32 a2_103 = dwArg04
	word32 d2_106 = 0
	branch Mem11[dwArg04:byte] == 0x00 l000040E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00004076:
	word32 a0_19 = Mem18[0x00004258:word32]
	Mem23[a0_19 + 24:word32] = Mem18[a0_19 + 24:word32] | 2
	word32 v15_25 = Mem23[a0_19 + 20:word32] - 0x00000001
	Mem26[a0_19 + 20:word32] = v15_25
	branch v15_25 < 0x00000000 l000040BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000408C:
	branch Mem26[a2_103:byte] != 0x0A l000040A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00004092:
	branch (Mem26[Mem26[0x00004258:word32] + 24:word32] & 0x00000080) != 0x00000000 l000040BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000040BE:
	d1 = fn000020F4(d2_106, a0_19 + 24, a3, a4, a5, (int32) (int16) Mem46[a2_103:byte], Mem26[0x00004258:word32], out a0_70, out a1, out a5)
	Mem108 = Mem55
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000040A4:
	word32 a1_80 = Mem26[0x00004258:word32]
	word32 a0_82 = Mem26[a1_80 + 4:word32]
	Mem86[a1_80 + 4:word32] = a0_82 + 1
	Mem89[a0_82:byte] = Mem86[a2_103:byte]
	a1 = a1_80 + 4
	a3 = a0_82 + 1
	d1 = (int32) Mem89[a0_82:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000040D6:
	branch -1 - d1 != 0x00000000 l000040E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000040E0:
	a2_103 = a2_103 + 1
	d2_106 = d2_106 + 0x00000001
	branch Mem108[a2_103:byte] != 0x00 l00004076
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000040E8:
	d0_114 = d2_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000040DC:
	d0_114 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000040EA:
	d1Out = d1
	a1Out = a1
	a5Out = a5
	return d0_114
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00004068_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



