void fn00001000(word32 d0, word32 d6, word32 d7, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31] d6:[0..31] d7:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn00001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001000:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000100A:
	word32 a6_9 = Mem0[0x00000004:word32]
	word32 d2_102 = d0
	word32 a2_196 = a0
	branch Mem0[a6_9 + 20:word16] >=u 0x0024 l00001036
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001020:
	word32 a0_13 = 0x00003E20
	word32 d0_16 = 0x0000BE46 >>u 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001030:
	Mem19[a0_13:word32] = 0x00000000
	a0_13 = a0_13 + 4
	d0_16 = d0_16 - 0x00000001
	branch d0_16 != 0x00000000 l00001030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001036:
	Mem30[0x00003E20:word32] = fp
	Mem34[0x00003E24:word32] = a6_9
	word32 d0_37 = FindTask(0x00000000)
	word32 a1_255 = 0x000012BC
	word32 d0_112 = OpenLibrary(0x000012BC, 0)
	branch d0_112 == 0x00000000 l00001226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001226:
	Alert(0x00038007)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001056:
	word32 d4_75
	Mem68[0x00003E28:word32] = d0_112
	branch Mem68[d0_37 + 172:word32] != 0x00000000 l00001066
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001066:
	word32 a0_74 = a0
	d4_75 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000106A:
	branch Mem68[a0_756:byte] != 0x20 l00001072
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001070:
	d4_75 = DPB(d4_75, (word16) d4_75 + 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001072:
	a0_74 = a0_756 + 1
	a0_756 = a0_74
	branch Mem68[a0_756:byte] != 0x00 l0000106A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001060:
	d4_75 = 2
	d2_102 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001076:
	word32 d0_100 = d4_75 << 0x00000002
	word32 d0_107 = d0_100 + d2_102
	word32 d1_111 = 0x00010001
	d0_112 = AllocMem(d0_107 + 0x00000011, 0x00010001)
	branch d0_112 == 0x00000000 l0000123E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000123E:
	CloseLibrary(Mem68[0x00003E28:word32])
	Alert(0x00010000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000125C:
	branch Mem153[d0_37 + 172:word32] != 0x00000000 l00001268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001262:
	fn00001214(d0_37)
	fn0000126C(d0_112)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001268:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001096:
	word32 dwLoc0C_649
	word32 a6_235
	word32 a0_438
	Mem169[d0_112:word32] = d0_107 + 0x00000011
	word32 d4_170 = d4_75 - 0x00000001
	Mem173[d0_112 + 12:word32] = d4_170
	Mem177[d0_112 + 8:word32] = d0_112 + 16 + d0_100
	Mem179[0x00000000:word32] = 0x00000000
	word32 d0_180 = Mem179[d0_37 + 172:word32]
	branch d0_180 == 0x00000000 l00001190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001190:
	fn00001214(d0_37)
	Mem187[0x00003E2C:word32] = d0_180
	Mem189[0x00003E30:word32] = d0_180
	Mem194[0x00000000:word32] = 0x00000000
	dwLoc0C_649 = d0_180
	a2_196 = d0_180
	word32 d0_197 = Mem194[d0_180 + 36:word32]
	branch d0_197 == 0x00000000 l000011B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011AE:
	Enable()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011B6:
	Supervisor(d0_112)
	Mem209[d0_112 + 4:word32] = d0_197
	d1_111 = 0x000012C8
	d2_102 = 0x000003ED
	branch d0_197 != 0x00000000 l000011D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011D2:
	Mem214[0x00003E34:word32] = d0_197
	Mem216[0x00003E38:word32] = d0_197
	Mem218[0x00003E3C:word32] = d0_197
	Mem221[d0_37 + 156:word32] = d0_197
	Mem223[d0_37 + 160:word32] = d0_197
	word32 d0_227 = Mem223[(d0_197 << 0x00000002) + 8:word32]
	branch d0_227 == 0x00000000 l000011F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F0:
	Mem231[d0_37 + 164:word32] = d0_227
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F4:
	a6_235 = Mem234[0x00003E24:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CE_thunk_fn0000127C:
	fn0000127C(20, out a1_750, out a4_751, out a5_752)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010B6:
	word32 d0_252 = Mem179[(d0_180 << 0x00000002) + 16:word32]
	a1_255 = Mem179[d0_112 + 8:word32]
	word32 a0_260 = (d0_252 << 0x00000002) + 1
	word32 d0_261 = (int32) Mem179[d0_252 << 0x00000002:byte]
	Mem262[a0_260 + d0_261:byte] = 0x00
	Mem264[d0_112 + 16:word32] = a0_260
	word32 a6_265 = d0_112 + 20
	word32 d3_266 = 1
	word32 a0_271 = a0 + d2_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DA:
	a0_271 = a0_271 - 1
	branch Mem264[a0_271:byte] >u 0x20 l000010E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DE_1:
	word16 v36_279 = SLICE(d2_102, word16, 0)
	d2_102 = DPB(d2_102, v36_279 - 1, 0)
	branch v36_279 != 0x0000 l000010DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E2:
	Mem283[a0_271 + 1:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E6:
	byte v38_290 = Mem289[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v38_290, 0)
	branch v38_290 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010EA:
	branch v38_290 == 0x20 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F0:
	branch v38_290 == 0x09 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F6:
	branch d3_266 - Mem289[d0_112 + 12:word32] == 0x00000000 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010FC:
	Mem310[a6_265:word32] = a1_255
	a6_265 = a6_265 + 4
	d3_266 = DPB(d3_266, (word16) d3_266 + 0x0001, 0)
	branch v38_290 == 0x22 l0000111A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111A:
	byte v65_320 = Mem319[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v65_320, 0)
	branch v65_320 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111E:
	branch v65_320 == 0x22 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001124:
	branch v65_320 != 0x2A l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000112A:
	byte v68_332 = Mem319[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v68_332, 0)
	d2_102 = DPB(d2_102, v68_332 & 0xDF, 0)
	branch (v68_332 & 0xDF) != 0x4E l0000113C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000113C:
	branch (v68_332 & 0xDF) != 0x45 l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001142:
	d1_111 = 27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001138:
	d1_111 = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001144:
	Mem354[a1_255:byte] = (byte) d1_111
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001106:
	Mem358[a1_255:byte] = v38_290
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001108:
	byte v46_363 = Mem362[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v46_363, 0)
	branch v46_363 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001148:
	Mem371[a1_255:byte] = 0x00
	Mem376[a6_265:word32] = 0x00000000
	execPrivate4()
	Mem407[0x00003E34:word32] = d0_261
	execPrivate5()
	Mem409[0x00003E38:word32] = d0_261
	a6_235 = Mem409[0x00003E24:word32]
	dwLoc0C_649 = d0_112 + 16
	dwLoc10 = d3_266
	branch Mem409[a6_235 + 20:word16] <u 0x0024 l0000117A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001172:
	word32 v82_419 = Mem409[d0_37 + 224:word32]
	Mem420[0x00003E3C:word32] = v82_419
	branch v82_419 != 0x00000000 l0000117E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117A:
	Mem426[0x00003E3C:word32] = d0_261
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117E:
	branch Mem430[d0_37 + 8:byte] != 0x0D l000011F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F8:
	a0_438 = Mem436[d0_37 + 58:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001186:
	word32 a0_441 = Mem430[d0_37 + 176:word32]
	a0_438 = a0_441 + 4 - Mem430[a0_441:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001202:
	Mem452[0x00003E48:word32] = a0_438
	Mem460[0x00003E4C:word32] = fp - 16
	fn00001354(d1_111, d2_102, d4_170, d0_100, d6, d7, a0_438, a1_255, a2_196, d0_37, 0x0000BE16, d0_112, a6_235, dwLoc10, dwLoc0C_649)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001212_thunk_fn0000127C:
	fn0000127C(0, out a1_753, out a4_754, out a5_755)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000110C:
	branch v46_363 == 0x20 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001116:
	Mem586[a1_255:byte] = 0x00
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001112:
	Mem593[a1_255:byte] = v46_363
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001214_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000126C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001278(word32 dwArg04, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1 d2
// Preserved:
fn00001278_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278_thunk_fn0000127C:
	word32 a1_6
	word32 a4_8
	word32 a5_9
	word32 d1_13 = fn0000127C(dwArg04, out a1_6, out a4_8, out a5_9)
	a1Out = a1_6
	a4Out = a4_8
	a5Out = a5_9
	return d1_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001278_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000127C(word32 d2, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000127C:
	word32 a7_4 = Mem0[0x00003E20:word32]
	word32 v8_9 = Mem0[a7_4 - 4:word32]
	word32 v6_6 = Mem0[a7_4 - 8:word32]
	word32 d1_12 = Mem0[v8_9 + 4:word32]
	branch d1_12 == 0x00000000 l0000129E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001296:
	execPrivate1()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000129E:
	CloseLibrary(Mem0[0x00003E28:word32])
	branch v6_6 == 0x00000000 l000012B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012AE:
	fn0000126C(v6_6)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012B0:
	FreeMem(v8_9, Mem0[v8_9:word32])
	a1Out = v8_9
	a4Out = 0x0000BE16
	a5Out = v8_9
	return d1_12
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000127C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000012D0(word32 d1, word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012D0:
	branch 0x00003F68 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012E2:
	word32 d2_16 = 1
	branch Mem11[0x00003F6C:word32] == 0x00000000 l000012F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012EA:
	d2_16 = d2_16 + 0x00000001
	branch Mem11[0x00003F68 + (d2_16 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012F6:
	word32 d2_33 = d2_16 - 0x00000001
	branch d2_33 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012FA:
	word32 d0_38 = d2_33 << 0x00000002
	word32 a2_42 = Mem11[0x00003F68 + d0_38:word32]
	call a2_42 (retsize: 4;)
		uses: a1:a1,a2:a2_42,a3:0x00003F68,a4:a4,a5:a5,a6:a6,a7:fp - 12,d0:d0_38,d1:d1,d2:d2_36,Stack +0000:dwLoc10,Stack +0004:d2,Stack +0008:a2,Stack +000C:a3,Stack +0014:dwArg04
	d2_33 = d2_33 - 0x00000001
	branch d2_33 != 0x00000000 l000012FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001308:
	word32 a1_59
	word32 a4_61
	word32 a5_62
	word32 d1_66 = fn00001278(dwArg04, out a1_59, out a4_61, out a5_62)
	a1Out = a1_59
	a4Out = a4_61
	a5Out = a5_62
	return d1_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000012D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000131C(word32 d1, word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000131C:
	branch Mem8[0x00003E50:word32] != 0x00000000 l0000134E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001328:
	word32 a3_13 = Mem8[0x00003F78:word32]
	Mem16[0x00003E50:word32] = 1
	word32 d0_17 = a3_13
	branch a3_13 == 0x00000000 l00001346
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000133A:
	a2 = Mem16[a3_13 + 4:word32]
	call a2 (retsize: 4;)
		uses: a1:a1,a2:a2_22,a3:a3_20,a4:a4,a5:a5,a6:a6,a7:fp - 8,d0:d0_24,d1:d1,d2:d2,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04
	a3_13 = Mem16[a3_13:word32]
	d0_17 = a3_13
	branch a3_13 != 0x00000000 l0000133A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001346:
	d1 = fn000012D0(d1, d2, a1, a2, a3_13, a4, a5, a6, dwArg04, out a1, out a4, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000134E:
	a1Out = a1
	a4Out = a4
	a5Out = a5
	return d1
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000131C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001354(word32 d1, word32 d2, word32 d4, word32 d5, word32 d6, word32 d7, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] d4:[0..31] d5:[0..31] d6:[0..31] d7:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1 d4 d5 d6 d7
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001354:
	word32 a3_17 = 0x00003F60
	word32 d0_10 = 0x00003F5C
	branch 0x00003F5C == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001366:
	branch Mem8[0x00003F60:word32] == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000136A:
	word32 v11_19 = Mem8[a3_17:word32]
	a3_17 = a3_17 + 4
	call v11_19 (retsize: 4;)
		uses: a0:a0_94,a1:a1,a2:v11_19,a3:a3_20,a4:a4,a5:a5,a6:a6,a7:fp - 8,d0:d0_23,d1:d1,d2:d2,d4:d4,d5:d5,d6:d6,d7:d7,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04,Stack +0014:dwArg08,Stack +FFFFFFF8:dwLoc14,Stack +FFFFFFFC:dwLoc10
		defs: a0:a0_95,d0:d0_24
	branch Mem8[a3_17:word32] != 0x00000000 l0000136A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001372:
	word32 a1_53
	word32 a2_54
	word32 a3_55
	word32 a4_56
	word32 a5_57
	word32 a6_58
	word32 d1_60
	fn0000131C(d1_60, d2, a1_53, a2_54, a3_55, a4_56, a5_57, a6_58, fn00001390(d0_10, d1, a1, a3_17, a5, out d1_60, out a1_53, out a2_54, out a3_55, out a4_56, out a5_57, out a6_58), out a1_129, out a4_130, out a5_131)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001354_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001390(word32 d0, word32 d1, word32 a1, word32 a3, word32 a5, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[0..31] d1:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d4 d5 d6 d7
// Preserved: a7 d2 d3
fn00001390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001390:
	word32 a1_23
	word32 a3_25
	word32 a1_50
	word32 a3_52
	word32 a5_54
	word32 d1_57
	word32 a1_77
	word32 a3_79
	word32 a5_81
	word32 d1_84
	word32 a1_104
	word32 a3_106
	word32 d0_110 = fn00002BF0(fn00002BF0(fn000015A4(fn00002BF0(d0, d1, a1, a3, a5, 0x0000147C, out d1_317, out a1_23, out a3_25, out a5_318), a1_23, a3_25, 0x00001480, out d1_57, out a1_50, out a2_319, out a3_52, out a4_320, out a5_54, out a6_321), d1_57, a1_50, a3_52, a5_54, 0x0000149C, out d1_84, out a1_77, out a3_79, out a5_81), d1_84, a1_77, a3_79, a5_81, 0x000014A0, out d1_322, out a1_104, out a3_106, out a5_323)
	word32 d3_123 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000145A:
	branch d3_123 - dwLoc04 <= 0x00000000 l000013DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013DE:
	word32 d2_132 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001452:
	d0_110 = 40
	branch 40 - d2_132 >= 0x00000000 l000013E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013E2:
	word32 d0_172
	word32 d1_144 = dwLoc14 + dwLoc10 + d2_132
	fn000014AC(d2_132, d1_144 >> 0x00000001, 0x0000000A)
	branch d2_132 - (d1_144 >> 0x00000001) == 0x00000000 l0000141A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000141A:
	d0_172 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001416:
	d0_172 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000141C:
	word32 d0_187
	branch (d0_172 | d2_132) != 0x00000000 l00001430
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001430:
	d0_187 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000142C:
	d0_187 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001432:
	word32 d0_204
	word32 d0_197 = d0_187 + d2_132
	dwLoc10 = d0_197
	branch d2_132 - d0_197 < 0x00000000 l0000144A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000144A:
	d0_204 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001446:
	d0_204 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000144C:
	dwLoc14 = d0_204
	d2_132 = d2_132 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001458:
	d3_123 = d3_123 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001462:
	word32 a1_240
	word32 a2_241
	word32 a3_242
	word32 a4_243
	word32 a5_244
	word32 a6_245
	word32 d1_247
	word32 d0_246 = fn000015A4(d0_110, a1_104, a3_106, 0x000014A4, out d1_247, out a1_240, out a2_241, out a3_242, out a4_243, out a5_244, out a6_245)
	d1Out = d1_247
	a1Out = a1_240
	a2Out = a2_241
	a3Out = a3_242
	a4Out = a4_243
	a5Out = a5_244
	a6Out = a6_245
	return d0_246
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000014AC(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX d0 d1
// Preserved: a7
fn000014AC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014AC:
	branch dwArg08 < 0x00000000 l000014C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014C0:
	word32 d1_13 = -dwArg08
	branch dwArg04 < 0x00000000 l000014D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D6:
	fn0000151E(-dwArg04, d1_13, d2, out d1_23)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014C6:
	fn0000151E(dwArg04, d1_13, d2, out d1_34)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014B6:
	branch dwArg04 < 0x00000000 l000014CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014CC:
	fn0000151E(-dwArg04, dwArg08, d2, out d1_49)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014BA:
	fn0000151E(dwArg04, dwArg08, d2, out d1_60)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000014AC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000014EC(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn000014EC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014EC:
	branch dwArg04 > 0x00000000 l0000150C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000150C:
	branch dwArg08 > 0x00000000 l0000150E_thunk_fn0000151E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000150E_thunk_fn0000151E:
	return fn0000151E(dwArg04, dwArg08, d2, out d1_88)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001510:
	return -fn0000151E(dwArg04, -dwArg08, d2, out d1_89)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014F6:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0x00000000 l00001504
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001504:
	return -fn0000151E(d0_36, dwArg08, d2, out d1_43)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014FC:
	return fn0000151E(d0_36, -dwArg08, d2, out d1_55)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000014EC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000151E(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn0000151E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000151E:
	word32 d1_21 = __swap(d1)
	word16 v10_9 = (word16) d1_21
	word32 d2_10 = DPB(d2, v10_9, 0)
	branch v10_9 != 0x0000 l00001544
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001544:
	word32 d3_17 = 16
	branch (word16) d1_21 >=u 0x0080 l00001552
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000154E:
	d1_21 = __rol(d1_21, 0x00000008)
	d3_17 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001552:
	branch (word16) d1_21 >=u 0x0800 l0000155C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001558:
	d1_21 = __rol(d1_21, 0x00000004)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0004, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000155C:
	branch (word16) d1_21 >=u 0x2000 l00001566
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001562:
	d1_21 = __rol(d1_21, 0x00000002)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0002, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001566:
	branch (word16) d1_21 < 0x0000 l0000156E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000156A:
	d1_21 = __rol(d1_21, 0x00000001)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000156E:
	word32 d2_68 = DPB(__swap(DPB(d2, (word16) d0, 0)), 0x0000, 0) >>u d3_17
	word32 d0_65 = d0 >>u d3_17
	word32 d3_69 = __swap(d3_17)
	uint16 v39_72 = (uint16) (d0_65 /u (uint16) d1_21)
	word32 d1_81 = __swap(d1_21)
	word32 d3_76 = DPB(d3_69, v39_72, 0)
	word32 d0_83 = DPB(DPB(d0_65, (uint16) (d0_65 % (uint16) d1_21), 16), (word16) d2_68, 0) - DPB(d2_68, v39_72, 0) *u (word16) d1_81
	branch d0_83 >=u 0x00000000 l00001590
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000158A:
	d3_76 = DPB(d3_69, v39_72 - 0x0001, 0)
	d0_83 = d0_83 + d1_81
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000158E:
	branch d0_83 >=u 0x00000000 l0000158E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001590:
	d1Out = __swap(__rol(d0_83, __swap(d3_76)))
	return (int32) (word16) d3_76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001526:
	word32 d0_123 = __swap(d0)
	word32 d1_124 = __swap(d1_21)
	word16 v13_126 = (word16) d0_123
	word32 d2_127 = DPB(__swap(d2_10), v13_126, 0)
	branch v13_126 == 0x0000 l00001534
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001530:
	uint16 v15_131 = (uint16) (d2_127 /u (uint16) d1_124)
	d2_127 = DPB(DPB(d2_127, (uint16) (d2_127 % (uint16) d1_124), 16), v15_131, 0)
	d0_123 = DPB(d0_123, v15_131, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001534:
	word32 d0_138 = __swap(d0_123)
	word32 d2_141 = DPB(d2_127, (word16) d0_138, 0)
	uint16 v28_144 = (uint16) (d2_141 /u (uint16) d1_124)
	d1Out = DPB(d1_124, (word16) __swap(DPB(DPB(d2_141, (uint16) (d2_141 % (uint16) d1_124), 16), v28_144, 0)), 0)
	return DPB(d0_138, v28_144, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000151E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000015A4(word32 d0, word32 a1, word32 a3, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] d0:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a7
fn000015A4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015A4:
	word32 a2_19
	word32 a3_20
	word32 a4_21
	word32 a5_22
	word32 a6_23
	word32 a1_32
	word32 d1_33
	word32 d0_25 = fn000015C0(d0, a1, a3, Mem10[0x00003F80:word32], dwArg04, fp + 8, out d1_33, out a1_32, out a2_19, out a3_20, out a4_21, out a5_22, out a6_23)
	d1Out = d1_33
	a1Out = a1_32
	a2Out = a2_19
	a3Out = a3_20
	a4Out = a4_21
	a5Out = a5_22
	a6Out = a6_23
	return d0_25
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000015A4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000015C0(word32 d0, word32 a1, word32 a3, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn000015C0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015C0:
	word32 d0_1935
	word32 a7_1578 = fp + -112
	word32 d3_1453 = dwArg0C
	word32 a5_1550 = dwArg04
	word32 a4_1605 = dwArg08
	word32 d6_1451 = 0
	branch Mem36[dwArg08:byte] == 0x00 l00001F06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015DC:
	branch Mem46[a4_1605:byte] != 0x25 l00001EE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EE0:
	word32 a7_51 = a7_1578 - 4
	Mem54[a7_51:word32] = a5_1550
	Mem63[a7_51 - 4:word32] = (int32) (int16) Mem54[a4_1605:byte]
	a4_1605 = a4_1605 + 1
	d0 = fn00001F40(a1, a3, a4_1605, a5_1550, Mem63[a7_51 - 4:word32], Mem63[a7_51:word32], out d1, out a0_67, out a1, out a5_1550)
	a7_1578 = a7_51 + 4
	branch d0 != 0xFFFFFFFF l00001EFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EFE:
	d6_1451 = d6_1451 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EFA:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015E4:
	Mem86[a7_1578 + 64:word32] = 0x00000000
	Mem88[a7_1578 + 72:word32] = 0x00000000
	Mem92[a7_1578 + 102:word32] = 0x00000000
	word32 d5_249 = -1
	word32 d4_361 = 105
	a3 = a7_1578 + 76
	word32 d7_1001 = 0
	word32 a2_135 = a4_1605 + 1
	word32 d2_130 = Mem92[a7_1578 + 72:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001602:
	word32 d1_104 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001604:
	word32 a7_100 = a7_1578 - 4
	Mem103[a7_100:word32] = d0
	d0 = Mem103[a7_100:word32]
	branch Mem103[0x00001F18 + d1_104:byte] - Mem103[a2_135:byte] != 0x00 l00001628
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001628:
	d1_104 = d1_104 + 0x00000001
	branch d1_104 <u 0x00000005 l00001604
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001616:
	Mem121[a7_100:word32] = d1_104
	word32 d1_123 = 1 << d1_104
	d0 = d1_123
	d1_104 = Mem121[a7_100:word32]
	d2_130 = d2_130 | d1_123
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001632:
	branch d1_104 <u 0x00000005 l00001602
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000163A:
	word32 a0_1418
	word32 d0_157
	Mem143[a7_1578 + 72:word32] = d2_130
	branch Mem143[a2_135:byte] != 0x2A l00001678
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001678:
	a0_1418 = 0x000028C5 + (DPB(d0, Mem143[a2_135:byte], 0) & 0x000000FF)
	word32 d0_156 = (int32) Mem143[a0_1418:byte]
	d0_157 = d0_156 & 0x00000004
	branch (d0_156 & 0x00000004) == 0x00000000 l000016E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001694:
	d2_130 = Mem143[a7_1578 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001698:
	Mem169[a7_1578 - 4:word32] = d3_1453
	word32 d1_175 = __swap(10) *u (word16) d2_130
	word32 d0_182 = (word16) d2_130 *u 10 + DPB(__swap(DPB(d1_175, (word16) (d1_175 + __swap(d2_130) *u 0x000A), 0)), 0x0000, 0)
	a2_135 = a2_135 + 1
	a0_1418 = 0x000028C5 + (DPB(d0_182, Mem169[a2_135:byte], 0) & 0x000000FF)
	word32 d1_191 = (int32) (int16) Mem169[a2_135:byte]
	word32 d0_203 = (int32) Mem169[a0_1418:byte]
	d3_1453 = Mem169[a7_1578 - 4:word32]
	d1_104 = d1_191 - 0x00000030
	d2_130 = d1_191 - 0x00000030 + d0_182
	d0_157 = d0_203 & 0x00000004
	branch (d0_203 & 0x00000004) != 0x00000000 l00001698
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E0:
	Mem210[a7_1578 + 64:word32] = d2_130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001644:
	d0_157 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v36_225 = Mem143[d0_157:word32]
	Mem226[a7_1578 + 44:word32] = v36_225
	a2_135 = a2_135 + 1
	d3_1453 = d0_157 + 0x00000004
	a0_1418 = d0_157 + 0x00000004
	branch v36_225 >= 0x00000000 l00001670
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001670:
	Mem230[a7_1578 + 64:word32] = Mem226[a7_1578 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165C:
	Mem233[a7_1578 + 72:word32] = Mem226[a7_1578 + 72:word32] | 0x00000004
	d0_157 = -Mem233[a7_1578 + 44:word32]
	Mem238[a7_1578 + 64:word32] = d0_157
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E4:
	branch Mem241[a2_135:byte] != 0x2E l00001778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016EC:
	a2_135 = a2_135 + 1
	branch Mem241[a2_135:byte] != 0x2A l00001712
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001712:
	a0_1418 = 0x000028C5 + (DPB(d0_157, Mem241[a2_135:byte], 0) & 0x000000FF)
	word32 d0_258 = (int32) Mem241[a0_1418:byte]
	d5_249 = 0
	d0_157 = d0_258 & 0x00000004
	branch (d0_258 & 0x00000004) == 0x00000000 l00001778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001730:
	word32 a7_266 = a7_1578 - 4
	Mem269[a7_266:word32] = d2_130
	word32 d1_275 = __swap(10) *u (word16) d5_249
	word32 d0_282 = (word16) d5_249 *u 10 + DPB(__swap(DPB(d1_275, (word16) (d1_275 + __swap(d5_249) *u 0x000A), 0)), 0x0000, 0)
	a2_135 = a2_135 + 1
	a0_1418 = 0x000028C5 + (DPB(d0_282, Mem269[a2_135:byte], 0) & 0x000000FF)
	word32 d1_291 = (int32) (int16) Mem269[a2_135:byte]
	word32 d0_303 = (int32) Mem269[a0_1418:byte]
	d2_130 = Mem269[a7_266:word32]
	d1_104 = d1_291 - 0x00000030
	d5_249 = d1_291 - 0x00000030 + d0_282
	d0_157 = d0_303 & 0x00000004
	branch (d0_303 & 0x00000004) != 0x00000000 l00001730
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016F4:
	d0_157 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v44_319 = Mem241[d0_157:word32]
	Mem321[a7_1578 + 44:word32] = v44_319
	a2_135 = a2_135 + 1
	d3_1453 = d0_157 + 0x00000004
	a0_1418 = d0_157 + 0x00000004
	branch v44_319 < 0x00000000 l00001778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000170C:
	d5_249 = Mem321[a7_1578 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001778:
	word32 a7_1436 = a7_1578
	branch Mem327[a2_135:byte] == 0x68 l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000177E:
	branch Mem327[a2_135:byte] == 0x6C l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001784:
	branch Mem327[a2_135:byte] == 0x4C l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000178A:
	branch Mem327[a2_135:byte] == 0x6A l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001790:
	branch Mem327[a2_135:byte] == 0x7A l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001796:
	branch Mem327[a2_135:byte] != 0x74 l000017A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000179C:
	a2_135 = a2_135 + 1
	d4_361 = (int32) (int16) Mem327[a2_135:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017A2:
	branch d4_361 != 0x00000068 l000017B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017AA:
	branch Mem327[a2_135:byte] != 0x68 l000017B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017B0:
	d4_361 = 2
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017B4:
	branch d4_361 != 0x0000006C l000017C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017BC:
	branch Mem327[a2_135:byte] != 0x6C l000017C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017C2:
	d4_361 = 1
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017C6:
	branch d4_361 != 0x0000006A l000017D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017CE:
	d4_361 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017D0:
	branch d4_361 != 0x0000007A l000017DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017D8:
	d4_361 = 108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017DA:
	branch d4_361 != 0x00000074 l000017E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017E2:
	d4_361 = 105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017E4:
	word32 d5_1452
	byte v84_413 = Mem327[a2_135:byte]
	word32 a2_1875 = a2_135 + 1
	d1 = DPB(d1_104, v84_413, 0)
	word32 d0_1442 = DPB(d0_157, v84_413, 0)
	branch v84_413 == 0x25 l00001C6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C6C:
	Mem448[a7_1578 + 102:word32] = 0x00000001
	a3 = 0x00001F14
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017F0:
	branch v84_413 == 0x58 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017F6:
	branch v84_413 == 0x63 l00001BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BEC:
	branch d4_361 != 0x0000006C l00001C08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C08:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem493[a3:byte] = Mem327[d0_1442 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BF4:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem504[a3:byte] = Mem327[d0_1442 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C1A:
	a0_1418 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1453 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem508[a7_1578 + 102:word32] = 0x00000001
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017FE:
	branch v84_413 == 0x64 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001804:
	branch v84_413 == 0x69 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000180A:
	Mem518[a7_1578 + 44:byte] = v84_413
	branch v84_413 == 0x6E l00001C7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C7E:
	branch d4_361 != 0x00000001 l00001CA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA0:
	branch d4_361 != 0x0000006C l00001CBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CBE:
	branch d4_361 != 0x00000068 l00001CDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CDC:
	branch d4_361 != 0x00000002 l00001CFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CFA:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem558[a0_1418:word32] = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CE4:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem570[a0_1418:byte] = (byte) d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CC6:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem582[a0_1418:word16] = (word16) d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA8:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem594[a0_1418:word32] = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C86:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem606[a0_1418 + 4:word32] = d6_1451
	Mem607[a0_1418:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D0E:
	d3_1453 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem614[a7_1578 + 64:word32] = 0x00000000
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001816:
	branch Mem518[a7_1578 + 44:byte] <=u 0x70 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001824:
	byte v97_627 = Mem518[a7_1578 + 44:byte]
	branch v97_627 == 0x73 l00001C28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C28:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3 = Mem518[d0_1442:word32]
	Mem642[a7_1578 + 102:word32] = 0x00000000
	d3_1453 = d0_1442 + 0x00000004
	a0_1418 = d0_1442 + 0x00000004
	a1 = a3
	branch d5_249 == 0x00000000 l00001C4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C44:
	branch d5_249 - Mem642[a7_1578 + 102:word32] <=u 0x00000000 l00001C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C4A:
	branch Mem642[a3:byte] == 0x00 l00001C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C4E:
	d0_1442 = Mem642[a7_1578 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C52:
	d0_1442 = d0_1442 + 0x00000001
	a1 = a1 + 1
	branch d5_249 <=u 0x00000000 l00001C5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C5A:
	branch d5_249 - d0_1442 <=u 0x00000000 l00001C62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C5E:
	branch Mem642[a1:byte] != 0x00 l00001C52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C62:
	Mem700[a7_1578 + 102:word32] = d0_1442
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C66:
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001830:
	branch v97_627 == 0x75 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001836:
	branch v97_627 != 0x78 l00001D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D16:
	branch v84_413 != 0x00 l00001D1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D1A:
	a2_1875 = a2_1875 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D1C:
	d0_1442 = a2_1875 - a4_1605
	Mem737[a7_1578 + 102:word32] = d0_1442
	Mem739[a7_1578 + 64:word32] = 0x00000000
	a3 = a4_1605
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000183E:
	branch v84_413 != 0x70 l00001850
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001844:
	Mem753[a7_1578 + 72:word32] = Mem751[a7_1578 + 72:word32] | 0x00000001
	d4_361 = 108
	d1 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001850:
	word32 d3_1027
	word32 a7_1173
	branch (byte) d1 == 0x64 l0000185E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001856:
	branch (byte) d1 != 0x69 l000019A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019A8:
	branch d4_361 != 0x00000001 l000019CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019CC:
	branch d4_361 != 0x0000006C l000019EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019EE:
	word32 d0_777 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem785[a7_1578 + 60:word32] = Mem782[d0_777:word32]
	Mem786[a7_1578 + 56:word32] = 0x00000000
	d3_1027 = d0_777 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019D4:
	word32 d0_794 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem800[a7_1578 + 60:word32] = Mem782[d0_794:word32]
	Mem801[a7_1578 + 56:word32] = 0x00000000
	d3_1027 = d0_794 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019B0:
	word32 d0_809 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem815[a7_1578 + 60:word32] = Mem782[d0_809 + 0x00000004:word32]
	Mem817[a7_1578 + 56:word32] = Mem815[d0_809:word32]
	d3_1027 = d0_809 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A06:
	branch d4_361 != 0x00000068 l00001A22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A0E:
	word16 v231_825 = Mem824[a7_1578 + 62:word16]
	word32 a7_828 = a7_1578 - 4
	Mem831[a7_828:word32] = d1
	Mem836[a7_828 + 64:word32] = (int32) v231_825
	Mem837[a7_828 + 60:word32] = 0x00000000
	d1 = Mem837[a7_828:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A22:
	branch d4_361 != 0x00000002 l00001A3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A2A:
	byte v244_848 = Mem847[a7_1578 + 63:byte]
	word32 a7_851 = a7_1578 - 4
	Mem854[a7_851:word32] = d1
	Mem859[a7_851 + 64:word32] = (int32) v244_848
	Mem860[a7_851 + 60:word32] = 0x00000000
	d1 = Mem860[a7_851:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A3E:
	word32 d0_868 = Mem867[a7_1578 + 72:word32] & 1
	Mem871[a7_1578 + 44:byte] = (byte) d1
	a7_1173 = a7_1578
	branch d0_868 == 0x00000000 l00001ADC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A4E:
	branch (byte) d1 != 0x6F l00001A8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A54:
	branch d5_249 != 0x00000000 l00001A7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A58:
	word32 a7_888 = a7_1578 - 4
	Mem890[a7_888:word32] = d0_868
	Mem893[a7_888 - 4:word32] = d1
	word32 d0_894 = Mem893[a7_888 + 64:word32]
	word32 d1_895 = Mem893[a7_888 + 60:word32]
	Mem912[a7_888 - 8:word32] = d2_130
	d2_130 = Mem912[a7_888 - 8:word32]
	d1 = Mem912[a7_888 - 4:word32]
	d0_868 = Mem912[a7_888:word32]
	branch d1_895 - (d0_894 <u 0x00000000) == 0x00000000 l00001A8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A7E:
	Mem952[a7_1578 + 106:byte] = 0x30
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A8A:
	a7_1173 = a7_1578
	branch (byte) d1 == 0x78 l00001A9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A90:
	Mem961[a7_1578 + 44:byte] = (byte) d1
	branch (byte) d1 != 0x58 l00001ADC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A9A:
	Mem968[a7_1578 + 44:byte] = (byte) d1
	word32 a7_969 = a7_1578 - 4
	Mem974[a7_969:word32] = d0_868
	Mem977[a7_969 - 4:word32] = d1
	word32 d0_978 = Mem977[a7_969 + 64:word32]
	word32 d1_979 = Mem977[a7_969 + 60:word32]
	Mem985[a7_969 - 8:word32] = d2_130
	word32 d1_994 = Mem985[a7_969 - 4:word32]
	a7_1173 = a7_969 + 4
	branch d1_979 - (d0_978 <u 0x00000000) == 0x00000000 l00001ADC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AC4:
	Mem1005[a7_969 + 110 + d7_1001:byte] = 0x30
	word32 d7_1003 = d7_1001 + 0x00000001
	Mem1010[a7_969 + 110 + d7_1003:byte] = (byte) d1_994
	Mem1012[a7_969 + 48:byte] = (byte) d1_994
	d7_1001 = d7_1003 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000185E:
	word32 d0_1039
	branch d4_361 != 0x00000001 l00001884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001884:
	branch d4_361 != 0x0000006C l000018B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018B0:
	word32 d0_1025 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1030 = Mem782[d0_1025:word32]
	Mem1033[a7_1578 + 52:word32] = d0_1030
	word32 a7_1034 = a7_1578 - 4
	Mem1037[a7_1034:word32] = d1
	Mem1042[a7_1034 + 52:word32] = d0_1030 >> 31
	word32 v208_1043 = Mem1042[a7_1034:word32]
	d3_1027 = d0_1025 + 0x00000004
	d0_1039 = d0_1030 >> 31
	d1 = v208_1043
	branch d4_361 != 0x00000068 l000018F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018DA:
	word16 v210_1049 = Mem1042[a7_1034 + 58:word16]
	Mem1053[a7_1034:word32] = v208_1043
	word32 d1_1056 = (int32) v210_1049
	Mem1058[a7_1034 + 56:word32] = d1_1056
	Mem1061[a7_1034 - 4:word32] = DPB(d0_1030 >> 31, v210_1049, 0)
	Mem1066[a7_1034 + 52:word32] = d1_1056 >> 31
	d1 = Mem1066[a7_1034 - 4:word32]
	d0_1039 = Mem1066[a7_1034:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018F6:
	branch d4_361 != 0x00000002 l0000191C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018FE:
	byte v219_1080 = Mem1079[a7_1578 + 55:byte]
	word32 a7_1083 = a7_1578 - 4
	Mem1086[a7_1083:word32] = d1
	word32 d1_1090 = (int32) (int16) v219_1080
	Mem1092[a7_1083 + 56:word32] = d1_1090
	Mem1095[a7_1083 - 4:word32] = DPB(d0_1039, v219_1080, 0)
	Mem1100[a7_1083 + 52:word32] = d1_1090 >> 31
	d1 = Mem1100[a7_1083 - 4:word32]
	d0_1039 = Mem1100[a7_1083:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000188C:
	word32 d0_1111 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1115 = Mem782[d0_1111:word32]
	Mem1117[a7_1578 + 52:word32] = d0_1115
	word32 a7_1118 = a7_1578 - 4
	Mem1120[a7_1118:word32] = d1
	Mem1125[a7_1118 + 52:word32] = d0_1115 >> 31
	d3_1027 = d0_1111 + 0x00000004
	d0_1039 = d0_1115 >> 31
	d1 = Mem1125[a7_1118:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001866:
	d0_1039 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1139[a7_1578 + 52:word32] = Mem782[d0_1039 + 0x00000004:word32]
	Mem1141[a7_1578 + 48:word32] = Mem1139[d0_1039:word32]
	d3_1027 = d0_1039 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000191C:
	Mem1146[a7_1578 + 44:byte] = (byte) d1
	word32 a7_1147 = a7_1578 - 4
	Mem1150[a7_1147:word32] = d0_1039
	Mem1153[a7_1147 - 4:word32] = d1
	word32 d0_1154 = Mem1153[a7_1147 + 56:word32]
	word32 d1_1155 = Mem1153[a7_1147 + 52:word32]
	Mem1161[a7_1147 - 8:word32] = d2_130
	a7_1173 = a7_1147 + 4
	branch d1_1155 - (d0_1154 <u 0x00000000) >= 0x00000000 l00001966
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001966:
	byte v142_1175 = Mem1161[a7_1147 + 48:byte]
	branch (Mem1161[a7_1147 + 76:word32] & 16) == 0x00000000 l00001980
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001980:
	branch (Mem1161[a7_1147 + 76:word32] & 8) == 0x00000000 l00001994
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001988:
	Mem1197[a7_1147 + 110:byte] = 0x20
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001972:
	Mem1204[a7_1147 + 110:byte] = 0x2B
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001994:
	Mem1209[a7_1147 + 64:word32] = Mem1207[a7_1147 + 56:word32]
	Mem1211[a7_1147 + 60:word32] = Mem1209[a7_1147 + 52:word32]
	Mem1214[a7_1147 + 48:byte] = v142_1175
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001946:
	Mem1220[a7_1147 + 110:byte] = 0x2D
	d7_1001 = 0x00000001
	a7_1173 = Mem1220[a7_1147 + 0x00000040:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ADC:
	byte v131_1238 = Mem1237[a7_1173 + 44:byte]
	a3 = a7_1173 + 98
	branch v131_1238 == 0x78 l00001AF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AEA:
	branch v131_1238 != 0x58 l00001AFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AFA:
	branch v131_1238 != 0x6F l00001B0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B0A:
	Mem1252[a7_1173 + 48:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B00:
	Mem1255[a7_1173 + 48:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B12:
	Mem1260[a7_1173 + 44:word32] = Mem1258[a7_1173 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF0:
	Mem1264[a7_1173 + 44:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B18:
	word32 a6_1276
	Mem1269[a7_1173 + 108:word32] = Mem1267[a7_1173 + 44:word32]
	branch v131_1238 == 0x58 l00001B2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2A:
	a6_1276 = 0x00001F30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B24:
	a6_1276 = 0x00001F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2E:
	Mem1281[a7_1173 + 44:word32] = a6_1276
	Mem1297[a7_1173 + 124:word32] = d3_1027
	Mem1311[a7_1173 + 68:word32] = d5_249
	Mem1330[a7_1173 + 48:word32] = d6_1451
	Mem1338[a7_1173 + 98:word32] = d7_1001
	word32 v164_1339 = a7_1173 + 56
	word32 d6_1340 = Mem1338[v164_1339:word32]
	word32 d7_1342 = Mem1338[v164_1339 + 4:word32]
	word32 d3_1344 = Mem1338[a7_1173 + 102:word32]
	a1 = Mem1338[a7_1173 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B50:
	word32 d1_1349 = Mem1348[a7_1173 + 108:word32]
	word32 a7_1354 = a7_1173 - 4
	Mem1356[a7_1354:word32] = d1_1349 >> 31
	Mem1359[a7_1354 - 4:word32] = d1_1349
	Mem1363[a7_1354 - 8:word32] = a1
	Mem1366[a7_1354 - 12:word32] = d1_1349
	Mem1368[a7_1354 - 16:word32] = d1_1349 >> 31
	Mem1371[a7_1354 - 20:word32] = d7_1342
	Mem1374[a7_1354 - 24:word32] = d6_1340
	word32 d1_1377 = fn000027B0(Mem1374[a7_1354 - 24:word32], Mem1374[a7_1354 - 20:word32], Mem1374[a7_1354 - 16:word32], Mem1374[a7_1354 - 12:word32])
	word32 v168_1385 = Mem1374[a7_1354 - 8:word32]
	word32 d1_1390 = Mem1374[a7_1354 - 4:word32]
	word32 d0_1392 = Mem1374[a7_1354:word32]
	a3 = a3 - 1
	Mem1399[a3:byte] = Mem1374[v168_1385 + d1_1377:byte]
	Mem1402[a7_1354:word32] = d0_1392
	Mem1405[a7_1354 - 4:word32] = d1_1390
	Mem1408[a7_1354 - 8:word32] = v168_1385
	Mem1411[a7_1354 - 12:word32] = d1_1390
	Mem1413[a7_1354 - 16:word32] = d0_1392
	Mem1415[a7_1354 - 20:word32] = d7_1342
	Mem1417[a7_1354 - 24:word32] = d6_1340
	word32 d1_1421
	word32 d0_1420 = fn00002560(Mem1417[a7_1354 - 24:word32], Mem1417[a7_1354 - 20:word32], Mem1417[a7_1354 - 16:word32], Mem1417[a7_1354 - 12:word32], out d1_1421, out a0_1418)
	a1 = Mem1417[a7_1354 - 8:word32]
	d6_1340 = d0_1420
	d7_1342 = d1_1421
	a7_1436 = a7_1354 + 4
	d3_1344 = d3_1344 + 0x00000001
	d0_1442 = d1_1421
	d1 = d0_1420 - (d1_1421 <u 0x00000000)
	branch d1 != 0x00000000 l00001B50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BBE:
	Mem1449[a7_1354 + 106:word32] = d3_1344
	d7_1001 = Mem1449[a7_1354 + 102:word32]
	d6_1451 = Mem1449[a7_1354 + 52:word32]
	d5_1452 = Mem1449[a7_1354 + 72:word32]
	d3_1453 = Mem1449[a7_1354 + 128:word32]
	branch d5_1452 != 0xFFFFFFFF l00001BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BE0:
	Mem1458[a7_1354 + 76:word32] = Mem1449[a7_1354 + 76:word32] & 0xFFFFFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BDA:
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D2C:
	branch d5_1452 - Mem1467[a7_1436 + 102:word32] >u 0x00000000 l00001D3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D3A:
	Mem1473[a7_1436 + 44:word32] = d5_1452
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D32:
	Mem1476[a7_1436 + 44:word32] = Mem1467[a7_1436 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D3E:
	word32 a7_1479 = a7_1436 - 4
	Mem1487[a7_1479:word32] = d0_1442
	Mem1502[a7_1479 + 52:word32] = Mem1487[a7_1479 + 48:word32] + d7_1001
	Mem1508[a7_1479:word32] = Mem1502[a7_1479:word32]
	word32 d0_1512 = Mem1508[a7_1479:word32]
	branch Mem1508[a7_1479 + 52:word32] - Mem1508[a7_1479 + 68:word32] <u 0x00000000 l00001D62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D62:
	Mem1517[a7_1479:word32] = d0_1512
	Mem1522[a7_1479 + 48:word32] = Mem1517[a7_1479 + 68:word32] - Mem1517[a7_1479 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D5C:
	Mem1527[a7_1479 + 48:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D72:
	Mem1535[a7_1436 + 48:word32] = Mem1533[a7_1436 + 44:word32]
	branch (Mem1535[a7_1436 + 72:word32] & 2) == 0x00000000 l00001DB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D80:
	word32 d2_1542 = 0
	branch d7_1001 == 0x00000000 l00001DB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D86:
	word32 a7_1549 = a7_1436 - 4
	Mem1552[a7_1549:word32] = a5_1550
	Mem1563[a7_1549 - 4:word32] = (int32) (int16) Mem1552[a7_1549 + 110 + d2_1542:byte]
	a7_1578 = a7_1549 + 4
	branch fn00001F40(a1, a3, a4_1605, a5_1550, Mem1563[a7_1549 - 4:word32], Mem1563[a7_1549:word32], out d1, out a0_1418, out a1, out a5_1550) != 0xFFFFFFFF l00001DAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DAC:
	d2_1542 = d2_1542 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d7_1001 - d2_1542 >u 0x00000000 l00001D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DB4:
	branch (Mem1592[a7_1436 + 72:word32] & 4) != 0x00000000 l00001E06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DBC:
	word32 d2_1598 = 0
	branch Mem1592[a7_1436 + 48:word32] == 0x00000000 l00001E06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DC4:
	word32 d4_1603 = Mem1592[a7_1436 + 72:word32]
	a4_1605 = Mem1592[a7_1436 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DCC:
	word32 a0_1619
	word32 a7_1607 = a7_1436 - 4
	Mem1610[a7_1607:word32] = a5_1550
	branch (d4_1603 & 2) == 0x00000000 l00001DDA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DDA:
	a0_1619 = DPB(a0_1418, 0x0020, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD4:
	a0_1619 = DPB(a0_1418, 0x0030, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DDE:
	Mem1625[a7_1436 - 8:word32] = a0_1619
	a7_1578 = a7_1436
	branch fn00001F40(a1, a3, a4_1605, a5_1550, Mem1625[a7_1436 - 8:word32], Mem1625[a7_1436 - 4:word32], out d1, out a0_1418, out a1, out a5_1550) != 0xFFFFFFFF l00001DF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DF6:
	d2_1598 = d2_1598 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a4_1605 - d2_1598 >u 0x00000000 l00001DCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DFE:
	Mem1659[a7_1607 + 52:word32] = a4_1605
	Mem1662[a7_1607 + 76:word32] = d4_1603
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E06:
	branch (Mem1666[a7_1436 + 72:word32] & 2) != 0x00000000 l00001E42
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E0E:
	word32 d2_1672 = 0
	branch d7_1001 == 0x00000000 l00001E42
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E14:
	word32 a7_1682 = a7_1436 - 4
	Mem1685[a7_1682:word32] = a5_1550
	Mem1696[a7_1682 - 4:word32] = (int32) (int16) Mem1685[a7_1682 + 110 + d2_1672:byte]
	a7_1578 = a7_1682 + 4
	branch fn00001F40(a1, a3, a4_1605, a5_1550, Mem1696[a7_1682 - 4:word32], Mem1696[a7_1682:word32], out d1, out a0_2278, out a1, out a5_1550) != 0xFFFFFFFF l00001E3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E3A:
	d2_1672 = d2_1672 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d7_1001 - d2_1672 >u 0x00000000 l00001E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E42:
	word32 d2_1725 = Mem1724[a7_1436 + 102:word32]
	branch d5_1452 - Mem1724[a7_1436 + 102:word32] <=u 0x00000000 l00001E70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E4C:
	word32 a7_1739 = a7_1436 - 4
	Mem1742[a7_1739:word32] = a5_1550
	Mem1745[a7_1739 - 0x00000004:word32] = 0x00000030
	a7_1578 = a7_1739 + 0x00000004
	branch fn00001F40(a1, a3, a4_1605, a5_1550, Mem1745[a7_1739 - 0x00000004:word32], Mem1745[a7_1739:word32], out d1, out a0_2279, out a1, out a5_1550) != 0xFFFFFFFF l00001E68
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E68:
	d2_1725 = d2_1725 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d5_1452 - d2_1725 >u 0x00000000 l00001E4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E70:
	word32 d2_1772 = 0
	branch Mem1774[a7_1436 + 102:word32] == 0x00000000 l00001EA6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E78:
	a4_1605 = Mem1774[a7_1436 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E7C:
	word32 a7_1781 = a7_1436 - 4
	Mem1784[a7_1781:word32] = a5_1550
	Mem1795[a7_1781 - 4:word32] = (int32) (int16) Mem1784[a3 + d2_1772:byte]
	a7_1578 = a7_1781 + 4
	branch fn00001F40(a1, a3, a4_1605, a5_1550, Mem1795[a7_1781 - 4:word32], Mem1795[a7_1781:word32], out d1, out a0_2280, out a1, out a5_1550) != 0xFFFFFFFF l00001E9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9E:
	d2_1772 = d2_1772 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a4_1605 - d2_1772 >u 0x00000000 l00001E7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EA6:
	d0 = Mem1822[a7_1436 + 72:word32] & 4
	branch d0 == 0x00000000 l00001EDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EAE:
	word32 d2_1828 = 0
	branch Mem1822[a7_1436 + 48:word32] == 0x00000000 l00001EDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB6:
	a3 = Mem1822[a7_1436 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EBA:
	word32 a7_1835 = a7_1436 - 4
	Mem1838[a7_1835:word32] = a5_1550
	Mem1841[a7_1835 - 0x00000004:word32] = 0x00000020
	d0 = fn00001F40(a1, a3, a4_1605, a5_1550, Mem1841[a7_1835 - 0x00000004:word32], Mem1841[a7_1835:word32], out d1, out a0_2281, out a1, out a5_1550)
	a7_1578 = a7_1835 + 0x00000004
	branch d0 != 0xFFFFFFFF l00001ED4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED4:
	d2_1828 = d2_1828 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a3 - d2_1828 >u 0x00000000 l00001EBA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EDC:
	a7_1578 = a7_1436
	a4_1605 = a2_1875
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F00:
	branch Mem1910[a4_1605:byte] != 0x00 l000015DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F06:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED0:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9A:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E62:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E34:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DF0:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA6:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F08:
	word32 a7_1956 = a7_1578 + 4
	word32 a2_1967 = Mem1953[a7_1956 + 20:word32]
	word32 a3_1969 = Mem1953[a7_1956 + 24:word32]
	word32 a4_1971 = Mem1953[a7_1956 + 28:word32]
	word32 a5_1973 = Mem1953[a7_1956 + 32:word32]
	word32 a6_1975 = Mem1953[a7_1956 + 36:word32]
	d1Out = d1
	a1Out = a1
	a2Out = a2_1967
	a3Out = a3_1969
	a4Out = a4_1971
	a5Out = a5_1973
	a6Out = a6_1975
	return d0_1935
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000015C0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F40(word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00001F40_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F40:
	word32 a1_110
	word32 a0_109
	word32 d1_60
	Mem17[dwArg08 + 24:word32] = Mem11[dwArg08 + 24:word32] | 2
	word32 v13_19 = Mem17[dwArg08 + 20:word32] - 0x00000001
	Mem20[dwArg08 + 20:word32] = v13_19
	branch v13_19 < 0x00000000 l00001F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F5C:
	branch 10 - dwArg04 != 0x00000000 l00001F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F62:
	branch (Mem20[dwArg08 + 24:word32] & 0x00000080) != 0x00000000 l00001F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F84:
	d1_60 = fn00001F9C(dwArg04, a1, a3, a4, a5, dwArg04, dwArg08, out a0_109, out a1_110, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F6E:
	a0_109 = Mem20[dwArg08 + 4:word32]
	Mem70[dwArg08 + 4:word32] = a0_109 + 1
	Mem73[a0_109:byte] = (byte) dwArg04
	a1_110 = dwArg08 + 4
	d1_60 = (int32) Mem73[a0_109:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F92:
	d1Out = d1_60
	a0Out = a0_109
	a1Out = a1_110
	a5Out = a5
	return d1_60
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F40_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F9C(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn00001F9C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F9C:
	word32 d0_111
	word32 a5_132
	word32 a1_130
	fn00002530(d2, a1, dwArg08, a3, a4, a5, out a1_130, out a4_342, out a5_132)
	branch dwArg08 != 0x00000000 l00001FB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB8:
	branch 64 - (Mem29[dwArg08 + 24:word32] & 73) == 0x00000000 l00001FCA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FCA:
	branch Mem29[dwArg08 + 28:word32] != 0x00000000 l00001FE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FD0:
	branch (Mem29[dwArg08 + 24:word32] & 4) == 0x00000000 l00001FE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FE0:
	Mem64[dwArg08 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FD8:
	Mem68[dwArg08 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FE8:
	branch Mem71[dwArg08 + 8:word32] != 0x00000000 l00002028
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002028:
	branch Mem71[dwArg08:word32] == 0x00000000 l00002082
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002082:
	d0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000202C:
	word32 d0_103 = Mem71[dwArg08 + 24:word32] & 0x00000080
	branch d0_103 == 0x00000000 l00002058
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002038:
	d0_103 = 10
	branch 10 - dwArg04 != 0x00000000 l00002058
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002058:
	word32 d4_97 = Mem71[dwArg08 + 4:word32] - Mem71[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_97 - d0_103 == 0x00000000 l00002086
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002076:
	Mem110[dwArg08 + 24:word32] = Mem71[dwArg08 + 24:word32] | 16
	a0 = dwArg08 + 24
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000203E:
	word32 a0_114 = Mem71[dwArg08 + 4:word32]
	Mem118[dwArg08 + 4:word32] = a0_114 + 1
	Mem120[a0_114:byte] = (byte) dwArg04
	d0_111 = fn000020B0(d2, dwArg08 + 4, a3, a0_114 + 1, a5_132, dwArg08, out a0, out a1_130, out a4_343, out a5_132)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FEE:
	word32 d4_148
	branch (Mem71[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l00002002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002002:
	d4_148 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FFE:
	d4_148 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002004:
	word32 d0_165 = fn0000215C(d4_148 + Mem71[dwArg08 + 28:word32], out d1_166, out a0, out a1_130)
	branch d0_165 != 0x00000000 l0000201E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000201E:
	Mem179[dwArg08 + 8:word32] = d0_165 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002086:
	Mem186[dwArg08 + 24:word32] = Mem184[dwArg08 + 24:word32] | 2
	a0 = Mem186[dwArg08 + 8:word32]
	Mem193[a0:byte] = (byte) dwArg04
	word32 a1_194 = Mem193[dwArg08 + 8:word32]
	Mem197[dwArg08 + 4:word32] = a1_194 + 1
	Mem202[dwArg08 + 20:word32] = Mem197[dwArg08 + 28:word32] - 0x00000001
	a1_130 = a1_194 + 1
	d0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002018:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC4:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB2:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020AA:
	a0Out = a0
	a1Out = a1_130
	a5Out = a5_132
	return d0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F9C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000020B0(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a0 a1 a4 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn000020B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020B0:
	word32 d0_100
	word32 a1_25
	word32 a4_26
	word32 a5_27
	fn00002530(d2, a1, dwArg04, a3, a4, a5, out a1_25, out a4_26, out a5_27)
	branch dwArg04 != 0x00000000 l000020C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020C6:
	branch Mem17[dwArg04 + 28:word32] != 0x00000000 l000020E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020CC:
	branch (Mem17[dwArg04 + 24:word32] & 4) == 0x00000000 l000020DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020DC:
	Mem46[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020D4:
	Mem50[dwArg04 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020E4:
	branch Mem53[dwArg04 + 8:word32] != 0x00000000 l000020EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020EE:
	word32 d0_59 = Mem53[dwArg04 + 24:word32] & 2
	branch d0_59 == 0x00000000 l00002134
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020F6:
	branch Mem53[dwArg04:word32] == 0x00000000 l00002124
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002124:
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020FA:
	word32 d4_72 = Mem53[dwArg04 + 4:word32] - Mem53[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_72 - d0_59 == 0x00000000 l00002128
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002128:
	Mem82[dwArg04 + 4:word32] = Mem53[dwArg04 + 8:word32]
	Mem84[dwArg04 + 20:word32] = Mem82[dwArg04 + 28:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002134:
	Mem91[dwArg04 + 24:word32] = Mem89[dwArg04 + 24:word32] & -4
	a0 = dwArg04 + 24
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002118:
	Mem97[dwArg04 + 24:word32] = Mem53[dwArg04 + 24:word32] | 16
	a0 = dwArg04 + 24
	d0_100 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020EA:
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020C2:
	d0_100 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000213E:
	a0Out = a0
	a1Out = a1_25
	a4Out = a4_26
	a5Out = a5_27
	return d0_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000020B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000215C(word32 dwArg04, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn0000215C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000215C:
	word32 d0_106
	branch dwArg04 != 0x00000000 l0000216A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000216A:
	branch Mem5[0x00003E58:word32] != 0x00000000 l0000218E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002172:
	word32 a0_13 = Mem5[0x00003E54:word32]
	Mem21[0x00000000:word32] = 0x00000000
	Mem36[0x00003E58:word32] = fn00002450(dwLoc10, a0_13, a0_13, out d1, out a0, out a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000218E:
	branch Mem39[0x00003E58:word32] != 0x00000000 l0000219A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000219A:
	word32 d0_58 = fn0000232C(Mem51[0x00003E58:word32], dwArg04 + 4, out d1, out a0)
	a1 = d0_58
	branch d0_58 != 0x00000000 l000021B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B8:
	Mem72[d0_58:word32] = dwArg04
	a0 = d0_58 + 4
	d0_106 = d0_58 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B4:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002196:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002166:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021C0:
	d1Out = d1
	a0Out = a0
	a1Out = a1
	return d0_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000215C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000021C8(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn000021C8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021C8:
	branch dwArg04 == 0x00000000 l000021F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021D2:
	branch Mem0[0x00003E58:word32] == 0x00000000 l000021F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021DA:
	fn00002290(Mem23[0x00003E58:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021F2:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000021C8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002290(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn00002290_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002290:
	branch Mem20[Mem20[0x00003E24:word32] + 20:word16] <u 0x0027 l000022C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022C0:
	branch dwArg04 == 0x00000000 l00002324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022C4:
	branch dwArg08 == 0x00000000 l00002324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022C8:
	word32 a3_36 = dwArg08 + -12
	branch dwArg0C - Mem20[dwArg04 + 20:word32] >=u 0x00000000 l0000230A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022D4:
	word32 a2_40 = dwArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022D6:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0x00000000 l00002324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022DC:
	branch Mem20[a2_40 + 8:byte] == 0x00 l000022D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E2:
	branch dwArg08 - Mem20[a2_40 + 20:word32] <u 0x00000000 l000022D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E8:
	branch dwArg08 - Mem20[a2_40 + 24:word32] >=u 0x00000000 l000022D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022EE:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28:word32] - Mem20[dwArg04 + 16:word32] != 0x00000000 l00002324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002308:
	a3_36 = a2_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000230A:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4
	FreeMem(a3_74, Mem20[a3_74:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022AE:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002324:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002290_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000232C(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn0000232C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000232C:
	word32 d0_159
	word32 a0_116 = Mem26[0x00003E24:word32]
	branch Mem26[a0_116 + 20:word16] <u 0x0027 l00002358
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002358:
	word32 a3_121 = 0x00000000
	branch dwArg04 == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002360:
	branch dwArg08 == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002366:
	branch dwArg08 - Mem26[dwArg04 + 20:word32] >=u 0x00000000 l0000241A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000241A:
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_51 = AllocMem(dwArg08 + 16, d1)
	a3_121 = d0_51
	branch d0_51 == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002434:
	Mem57[d0_51:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_51 + 4)
	Mem63[d0_51 + 12:word32] = 0x00000000
	a0_116 = dwArg04
	a3_121 = d0_51 + 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000236E:
	word32 a5_163 = Mem26[dwArg04:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002370:
	branch Mem26[a5_163:word32] == 0x00000000 l00002392
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002392:
	word32 d3_78 = Mem26[dwArg04 + 16:word32] + 40
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_83 = AllocMem(d3_78, d1)
	a3_121 = d0_83
	branch d0_83 == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B0:
	Mem89[d0_83:word32] = d3_78
	Mem92[d0_83 + 12:byte] = 0x0A
	Mem96[d0_83 + 20:word32] = d0_83 + 40
	Mem98[d0_83 + 24:word32] = d0_83 + 40
	Mem100[Mem98[d0_83 + 20:word32]:word32] = 0x00000000
	word32 a2_101 = Mem100[d0_83 + 20:word32]
	Mem104[a2_101 + 4:word32] = Mem100[dwArg04 + 16:word32]
	Mem107[d0_83 + 32:word32] = Mem104[a2_101 + 4:word32]
	Mem111[d0_83 + 28:word32] = Mem107[d0_83 + 32:word32] + Mem107[d0_83 + 20:word32]
	AddHead(dwArg04, d0_83 + 4)
	a0_116 = d0_83 + 4
	a3_121 = Allocate(d0_83 + 4, dwArg08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002374:
	branch Mem26[a5_163 + 8:byte] == 0x00 l0000238E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000237A:
	word32 d0_129 = Allocate(a5_163, dwArg08)
	a0_116 = a5_163
	a3_121 = d0_129
	branch d0_129 != 0x00000000 l000023FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023FE:
	branch (Mem136[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000240A:
	word32 a2_143 = a3_121
	word32 d2_146 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002410:
	Mem149[a2_143:word32] = 0x00000000
	word32 a2_150 = a2_143 + 4
	Mem151[a2_150:word32] = 0x00000000
	a2_143 = a2_150 + 4
	d2_146 = d2_146 - 0x00000001
	branch d2_146 != 0x00000000 l00002410
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002418:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002448:
	d0_159 = a3_121
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000238E:
	a5_163 = Mem26[a5_163:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002346:
	a0_116 = dwArg04
	d0_159 = AllocPooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000244A:
	d1Out = d1
	a0Out = a0_116
	return d0_159
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000232C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002450(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn00002450_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002450:
	word32 d0_52
	word32 a0_17 = Mem14[0x00003E24:word32]
	branch Mem14[a0_17 + 20:word16] <u 0x0027 l0000247E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000247E:
	a1 = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l000024B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002484:
	word32 d0_31 = AllocMem(24, 0)
	d1 = 0
	a1 = d0_31
	branch d0_31 == 0x00000000 l000024B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000249A:
	Mem38[d0_31:word32] = d0_31 + 4
	Mem39[d0_31 + 4:word32] = 0x00000000
	Mem41[d0_31 + 8:word32] = d0_31
	Mem43[d0_31 + 12:word32] = dwArg04
	Mem47[d0_31 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem49[d0_31 + 20:word32] = dwArg0C
	a0_17 = d0_31 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024B8:
	d0_52 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000246A:
	d1 = dwArg08
	d0_52 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024BA:
	d1Out = d1
	a0Out = a0_17
	a1Out = a1
	return d0_52
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002450_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000024C0(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn000024C0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C0:
	branch Mem11[Mem11[0x00003E24:word32] + 20:word16] <u 0x0027 l000024E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024E4:
	branch dwArg04 == 0x00000000 l00002528
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024E8:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0x00000000 l0000251A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024FA:
	word32 a2_29 = a2_24 - 4
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0x00000000 l000024FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000251A:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024D6:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002528:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000024C0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002530(word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31]
// LiveOut: a1 a4 a5 d1
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn00002530_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002530:
	word32 a6_6 = Mem5[0x00003E24:word32]
	SetSignal(0, 0x00001000)
	word32 d1_27 = 0x00001000
	branch 0x00000000 == 0x00000000 l0000255A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000254E:
	d1_27 = fn0000131C(0x00001000, d2, a1, a2, a3, a4, a5, a6_6, 0x00000014, out a1, out a4, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000255A:
	a1Out = a1
	a4Out = a4
	a5Out = a5
	return d1_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002530_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002560(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00002560_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002560:
	word32 d0_188
	word32 d1_133 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_158 = dwArg10
	branch dwArg0C != 0x00000000 l000025B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025B6:
	branch dwArg04 - dwArg0C >=u 0x00000000 l000025C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025C0:
	word32 d4_29 = 24
	word32 d6_30 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_30 != 0x00 l000025DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025CA:
	d4_29 = 16
	d6_30 = __rol(d6_30, 0x00000008)
	branch (byte) d6_30 != 0x00 l000025DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025D2:
	d4_29 = 8
	d6_30 = __rol(d6_30, 0x00000008)
	branch (byte) d6_30 != 0x00 l000025DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025DA:
	d4_29 = 0
	d6_30 = DPB(d6_30, (byte) dwArg0C, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025DE:
	word32 d4_58 = DPB(d4_29, (byte) d4_29 + Mem17[0x00003E5C + (int32) ((word16) d6_30 & 0x00FF):byte], 0)
	word32 d5_60 = 32 - d4_58
	branch d5_60 != 0x00000000 l000025FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025FE:
	word32 d1_83
	word32 d0_82 = fn00002664(dwArg04 >>u d4_58, dwArg04 << d5_60 | dwArg08 >>u d4_58, dwArg0C << d5_60 | dwArg10 >>u d4_58, out d1_83, out d2_314)
	word32 d3_69 = dwArg10 << d5_60
	word32 d5_98 = __swap(d0_82)
	word32 d6_100 = __swap(d3_69)
	word32 d3_99 = d3_69 *u (word16) d5_98
	word32 d2_104 = __swap(d0_82 *u (word16) d3_69)
	word16 v31_105 = (word16) (d2_104 + d3_99)
	word32 d4_101 = d0_82 *u (word16) d6_100
	word16 v34_111 = (word16) (DPB(d2_104, v31_105, 0) + d4_101)
	word32 d6_79 = dwArg08 << d5_60
	word32 d2_117 = __swap(DPB(d2_104, v34_111, 0))
	word32 d5_102 = d5_98 *u (word16) d6_100
	a0_20 = d6_79
	d1_133 = d0_82
	word32 v39_125 = d1_83 - ((__swap(DPB(d3_99, 0x0000, 0)) + __swap(DPB(d4_101, 0x0000, 0))) + DPB(d5_102, ((word16) d5_102 + (v31_105 <u 0x0000)) + (v34_111 <u 0x0000), 0))
	branch v39_125 <u 0x00000000 l0000265A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002654:
	branch v39_125 != 0x00000000 l0000265C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002656:
	branch d6_79 - d2_117 >=u 0x00000000 l0000265C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000265A:
	d1_133 = d0_82 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025F2:
	branch dwArg0C - dwArg04 <u 0x00000000 l000025FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025F6:
	branch dwArg10 - dwArg08 >u 0x00000000 l000025BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025FA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025BA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002578:
	branch dwArg04 - dwArg10 >=u 0x00000000 l0000258A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000258A:
	branch dwArg10 != 0x00000000 l00002596
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000258E:
	d3_158 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002596:
	word32 d1_167
	word32 d2_168
	word32 d0_166 = fn00002664(0, dwArg04, d3_158, out d1_167, out d2_168)
	d1_133 = fn00002664(d1_167, dwArg08, d2_168, out d1_312, out d2_313)
	d0_188 = d0_166
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000257C:
	d1_133 = fn00002664(dwArg04, dwArg08, dwArg10, out d1_310, out d2_311)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000265C:
	d0_188 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000265E:
	d1Out = d1_133
	a0Out = a0_20
	return d0_188
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002560_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002664(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn00002664_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002664:
	word32 d7_13 = d2
	branch d2 == 0x00000000 l0000267E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000266C:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0x00000000 l0000268C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000268C:
	word32 d2_22 = __swap(d2)
	branch (word16) d2_22 != 0x0000 l000026B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026B4:
	byte bLoc26_339 = 0x00
	word32 d0_44 = 0
	branch d2 < 0x00000000 l000026D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026C6:
	d6_17 = d6_17 * 0x00000002
	d0_44 = DPB(d0_44, (word16) d0_44 + 0x0001, 0)
	d5_19 = d5_19 * 0x00000002 + (d6_17 <u 0x00000000)
	d7_13 = d7_13 * 0x00000002
	branch d7_13 > 0x00000000 l000026C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D0:
	word16 v35_63 = (word16) d0_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D2:
	word32 d1_101
	word32 d2_72 = __swap(d5_19)
	word32 d3_73 = __swap(d7_13)
	branch (word16) (d2_72 - d3_73) != 0x0000 l000026E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E4:
	d1_101 = __swap(DPB(__swap(DPB(DPB(d5_19, (uint16) (d5_19 % (uint16) d3_73), 16), (uint16) (d5_19 /u (uint16) d3_73), 0)), 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026DE:
	d1_101 = 65535
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026EE:
	word32 d6_95 = __swap(DPB(d6_17, 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026F4:
	word32 d4_110 = __swap(d5_19 - __swap(d7_13) *u (word16) d1_101)
	word32 d2_103 = d1_101 *u (word16) d7_13
	word32 d4_116 = DPB(d4_110, (word16) d6_95, 0)
	branch (word16) d4_110 != 0x0000 l00002714
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000270C:
	branch d2_103 - d4_116 <=u 0x00000000 l00002714
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002714:
	word32 d6_128 = __swap(d1_101)
	word32 d3_135 = __swap(d6_128)
	word32 d4_137 = __swap(d7_13)
	word32 d5_136 = d7_13 *u (word16) d3_135
	word32 d6_141 = __swap(d6_128 *u (word16) d7_13)
	word16 v45_142 = (word16) (d6_141 + d5_136)
	word32 d2_138 = d6_128 *u (word16) d4_137
	word16 v47_148 = (word16) (DPB(d6_141, v45_142, 0) + d2_138)
	word32 d3_139 = d3_135 *u (word16) d4_137
	word32 d6_167 = d6_17 - __swap(DPB(d6_141, v47_148, 0))
	word32 d5_170 = d5_19 - ((__swap(DPB(d5_136, 0x0000, 0)) + __swap(DPB(d2_138, 0x0000, 0))) + DPB(d3_139, ((word16) d3_139 + (v45_142 <u 0x0000)) + (v47_148 <u 0x0000), 0)) - (d6_167 <u 0x00000000)
	branch d5_170 >=u 0x00000000 l0000276C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002756:
	d6_167 = d6_167 + DPB(__swap(d7_13), 0x0000, 0)
	d1_101 = d1_101 - 0x00000001
	d5_170 = d5_170 + (d6_167 <u 0x00000000) + __swap(DPB(d7_13, 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000276C:
	branch bLoc26_339 != 0x00 l00002788
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002788:
	word32 d6_205 = __swap(DPB(d6_167, (word16) d5_170, 0))
	d0 = DPB(dwLoc24, (word16) d1_101, 0)
	word32 d5_206 = __swap(d5_170)
	branch v35_63 == 0x0000 l000027A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002798:
	word32 d7_213 = DPB(d7_13, v35_63 - 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000279A:
	d5_206 = d5_206 >>u 0x00000001
	word16 v62_224 = SLICE(d7_213, word16, 0)
	d6_205 = __rcr(d6_205, 0x00000001, SLICE(cond(d5_206), bool, 4))
	d7_213 = DPB(d7_213, v62_224 - 1, 0)
	branch v62_224 != 0x0000 l0000279A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027A2:
	d1 = d6_205
	d2 = d2_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002772:
	word32 d5_248 = __swap(d5_170)
	word32 d6_249 = __swap(d6_167)
	d5_19 = DPB(d5_248, (word16) d6_249, 0)
	d6_17 = DPB(d6_249, 0x0000, 0)
	bLoc26_339 = true
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002710:
	d1_101 = d1_101 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002692:
	word32 d0_261 = __swap(d0)
	word32 d1_262 = __swap(d1)
	word32 d0_264 = DPB(d0_261, (word16) d1_262, 0)
	word32 d0_273 = DPB(DPB(d0_264, (uint16) (d0_264 % (uint16) d2), 16), (word16) __swap(d1_262), 0)
	d2 = DPB(__swap((int32) (uint16) (d0_264 /u (uint16) d2)), (uint16) (d0_273 /u (uint16) d2), 0)
	d1 = __swap(DPB(DPB(d0_273, (uint16) (d0_273 % (uint16) d2), 16), 0x0000, 0))
	d0 = d2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002672:
	branch d1 == 0x00000000 l000027AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002678:
	branch d2 - d1 >u 0x00000000 l000027AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000267E:
	d0 = fn0000151E(d1, d2, d2, out d1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027AA:
	d1Out = d1
	d2Out = d2
	return d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002664_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000027B0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn000027B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027B0:
	word32 d1_162 = dwArg08
	word32 d3_194 = dwArg10
	branch dwArg0C != 0x00000000 l00002802
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002802:
	branch dwArg04 - dwArg0C <u 0x00000000 l000028BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002808:
	word32 d4_32 = 24
	word32 d6_33 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002826
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002812:
	d4_32 = 16
	d6_33 = __rol(d6_33, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002826
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000281A:
	d4_32 = 8
	d6_33 = __rol(d6_33, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002826
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002822:
	d4_32 = 0
	d6_33 = DPB(d6_33, (byte) dwArg0C, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002826:
	word32 d4_61 = DPB(d4_32, (byte) d4_32 + Mem20[0x00003E5C + (int32) ((word16) d6_33 & 0x00FF):byte], 0)
	word32 d5_63 = 32 - d4_61
	branch d5_63 != 0x00000000 l00002848
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002848:
	word32 d1_86
	word32 d2_87
	word32 d0_85 = fn00002664(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_87)
	word32 d3_72 = dwArg10 << d5_63
	word32 d7_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u (word16) d7_101
	word32 d2_107 = __swap(d0_85 *u (word16) d3_72)
	word16 v33_108 = (word16) (d2_107 + d3_102)
	word32 d4_104 = d0_85 *u (word16) d6_103
	word16 v35_114 = (word16) (DPB(d2_107, v33_108, 0) + d4_104)
	word32 d2_120 = __swap(DPB(d2_107, v35_114, 0))
	word32 d7_105 = d7_101 *u (word16) d6_103
	word32 d6_82 = dwArg08 << d5_63
	word32 d3_126 = __swap(DPB(d3_102, 0x0000, 0)) + __swap(DPB(d4_104, 0x0000, 0)) + DPB(d7_105, ((word16) d7_105 + (v33_108 <u 0x0000)) + (v35_114 <u 0x0000), 0)
	word32 v40_128 = d1_86 - d2_120
	branch v40_128 <u 0x00000000 l000028A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000289E:
	branch v40_128 != 0x00000000 l000028A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028A0:
	branch d6_82 - d3_126 >=u 0x00000000 l000028A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028A4:
	d3_126 = d3_126 - d3_72
	d2_120 = d2_120 - d2_87 - (d3_126 <u 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028A8:
	word32 d6_148 = d6_82 - d3_126
	d1_162 = d1_86 - d2_120 - (d6_148 <u 0x00000000) << 32 - d5_63 | d6_148 >>u d5_63
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000283A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002842
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000283E:
	branch dwArg10 - dwArg08 >u 0x00000000 l000028BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002842:
	d1_162 = dwArg08 - dwArg10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027C8:
	branch dwArg04 - dwArg10 >=u 0x00000000 l000027DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027DA:
	branch dwArg10 != 0x00000000 l000027E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027DE:
	d3_194 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027E6:
	word32 d1_203
	word32 d2_204
	fn00002664(0, dwArg04, d3_194, out d1_203, out d2_204)
	fn00002664(d1_203, dwArg08, d2_204, out d1_162, out d2_347)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027CC:
	fn00002664(dwArg04, dwArg08, dwArg10, out d1_162, out d2_346)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028BC:
	return d1_162
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000027B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002BAC(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002BAC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BAC:
	branch dwArg04 == 0x00000000 l00002BC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BC4:
	word32 a2_10 = Mem5[0x00003F88:word32]
	branch a2_10 == 0x00000000 l00002BEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BCE:
	branch (Mem16[a2_10 + 24:word32] & 2) == 0x00000000 l00002BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BD6:
	fn000020B0(d2, a1, a3, a4, a5, a2_10, out a0_109, out a1, out a4, out a5)
	Mem46 = Mem25
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BE0:
	a2_10 = Mem46[a2_10 + 12:word32]
	branch a2_10 != 0x00000000 l00002BCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BB8:
	fn000020B0(d2, a1, a3, a4, a5, dwArg04, out a0_60, out a1_61, out a4_62, out a5_63)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BEA:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002BAC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002BF0(word32 d0, word32 d1, word32 a1, word32 a3, word32 a5, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[0..31] d1:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a3 a5 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a7
fn00002BF0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BF0:
	word32 a3_22
	word32 a5_24
	word32 a1_34
	word32 d1_35
	word32 d0_27 = fn00002C3C(d0, d1, a1, a3, a5, Mem10[0x00003F7C:word32], dwArg04, fp + 8, out d1_35, out a1_34, out a3_22, out a5_24)
	d1Out = d1_35
	a1Out = a1_34
	a3Out = a3_22
	a5Out = a5_24
	return d0_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002BF0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002C0C(byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0007:[0..7] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 d0
// Preserved: a2 a7
fn00002C0C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C0C:
	word32 d0_10 = dwArg08
	branch dwArg08 == 0x00000000 l00002C36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C18:
	d0_10 = Mem5[dwArg08 + 4:word32]
	branch d0_10 - Mem5[dwArg08 + 8:word32] >=u 0x00000000 l00002C2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C22:
	Mem16[Mem5[dwArg08 + 4:word32]:byte] = bArg07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C2A:
	Mem22[dwArg08 + 20:word32] = Mem20[dwArg08 + 20:word32] + 0x00000001
	Mem25[dwArg08 + 4:word32] = Mem22[dwArg08 + 4:word32] - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C36:
	return d0_10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002C0C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002C3C(word32 d0, word32 d1, word32 a1, word32 a3, word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[8..31] d1:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a1 a3 a5 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn00002C3C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C3C:
	word32 a7_1373 = fp + -120
	word32 d2_1012 = dwArg0C
	word32 a4_273 = dwArg08
	word32 a2_1057 = dwArg04
	word32 d4_132 = 0
	word32 d5_1085 = 0
	branch Mem40[dwArg08:byte] == 0x00 l00003C3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C5E:
	word32 d3_130
	word32 d3_1906 = 0
	branch Mem49[a4_273:byte] != 0x25 l00003B3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B3C:
	word32 d0_61 = (int32) Mem49[0x000028C5 + (DPB(d0, Mem49[a4_273:byte], 0) & 0x000000FF):byte]
	d0 = d0_61 & 0x00000008
	branch (d0_61 & 0x00000008) == 0x00000000 l00003BC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BC8:
	word32 a0_68 = a2_1057 + 24
	Mem70[a0_68:word32] = Mem49[a0_68:word32] | 0x00000001
	word32 a0_71 = a2_1057 + 20
	word32 v103_72 = Mem70[a0_71:word32] - 0x00000001
	Mem73[a0_71:word32] = v103_72
	branch v103_72 < 0x00000000 l00003BFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BFA:
	word32 a7_77 = a7_1373 - 4
	Mem79[a7_77:word32] = a2_1057
	Mem96[a7_77 + 48:word32] = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem79[a7_77:word32], out d1, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BDA:
	a1 = a2_1057 + 4
	word32 a0_100 = Mem73[a1:word32]
	word32 a7_101 = a7_1373 - 4
	Mem103[a7_101:word32] = a2_1057
	Mem107[a1:word32] = a0_100 + 1
	a2_1057 = Mem107[a7_101:word32]
	byte v107_111 = Mem107[a0_100:byte]
	Mem116[a7_101:word32] = d1
	Mem121[a7_101 + 48:word32] = (int32) v107_111
	d1 = Mem121[a7_101:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C08:
	d0 = (int32) (int16) Mem127[a4_273:byte]
	d5_1085 = Mem127[a7_1373 + 44:word32]
	d3_130 = 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch d0 - Mem127[a7_1373 + 44:word32] == 0x00000000 l00003C32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C1C:
	branch d5_1085 == 0xFFFFFFFF l00003C2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C24:
	word32 a7_147 = a7_1373 - 4
	Mem150[a7_147:word32] = a2_1057
	Mem153[a7_147 - 4:word32] = d5_1085
	d0 = fn00002C0C(Mem153[a7_147 - 1:byte], Mem153[a7_147:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C2E:
	d3_130 = 0x00000000
	d4_132 = d4_132 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B58:
	word32 d0_191
	word32 a0_169 = a2_1057 + 24
	Mem172[a0_169:word32] = Mem170[a0_169:word32] | 0x00000001
	word32 a0_173 = a2_1057 + 20
	word32 v88_174 = Mem172[a0_173:word32] - 0x00000001
	Mem175[a0_173:word32] = v88_174
	branch v88_174 < 0x00000000 l00003B82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B82:
	word32 a7_179 = a7_1373 - 4
	Mem181[a7_179:word32] = a2_1057
	d0_191 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem181[a7_179:word32], out d1_4136, out a1, out a5)
	d1 = d0_191
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B6A:
	a1 = a2_1057 + 4
	word32 a0_202 = Mem175[a1:word32]
	word32 a7_203 = a7_1373 - 4
	Mem205[a7_203:word32] = a2_1057
	Mem209[a1:word32] = a0_202 + 1
	byte v92_213 = Mem209[a0_202:byte]
	a2_1057 = Mem209[a7_203:word32]
	d0_191 = DPB(d0, v92_213, 0)
	d1 = (int32) v92_213
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B8E:
	word32 d0_238 = (int32) Mem236[0x000028C5 + (DPB(d0_191, (byte) d1, 0) & 0x000000FF):byte]
	d5_1085 = d1
	d4_132 = d4_132 + 0x00000001
	d0 = d0_238 & 0x00000008
	branch (d0_238 & 0x00000008) != 0x00000000 l00003B58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BB0:
	branch d1 == 0xFFFFFFFF l00003BC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BB8:
	word32 a7_248 = a7_1373 - 4
	Mem251[a7_248:word32] = a2_1057
	Mem254[a7_248 - 4:word32] = d1
	d0 = fn00002C0C(Mem254[a7_248 - 1:byte], Mem254[a7_248:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BC2:
	d4_132 = d4_132 - 0x00000001
	d3_130 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C32:
	a4_273 = a4_273 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C68:
	Mem276[a7_1373 + 72:byte] = 0x69
	Mem277[a7_1373 + 73:byte] = 0x00
	word32 a3_278 = a4_273 + 1
	word32 d0_286 = (int32) Mem277[0x000028C5 + (int32) Mem277[a3_278:byte]:byte]
	word32 d6_1172 = -1
	d0 = d0_286 & 0x00000004
	branch (d0_286 & 0x00000004) == 0x00000000 l00002CEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C90:
	word32 d0_300 = (int32) Mem277[0x000028C5 + (int32) Mem277[a3_278:byte]:byte]
	d6_1172 = 0
	d0 = d0_300 & 0x00000004
	branch (d0_300 & 0x00000004) == 0x00000000 l00002CEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CAA:
	word32 a7_308 = a7_1373 - 4
	Mem311[a7_308:word32] = d2_1012
	word32 d1_317 = __swap(10) *u (word16) d6_1172
	word32 d0_324 = (word16) d6_1172 *u 10 + DPB(__swap(DPB(d1_317, (word16) (d1_317 + __swap(d6_1172) *u 0x000A), 0)), 0x0000, 0)
	a3_278 = a3_278 + 1
	word32 d1_332 = (int32) Mem311[a3_278:byte]
	word32 d0_344 = (int32) Mem311[0x000028C5 + (int32) Mem311[a3_278:byte]:byte]
	d2_1012 = Mem311[a7_308:word32]
	d1 = d1_332 - 0x00000030
	d6_1172 = d1_332 - 0x00000030 + d0_324
	d0 = d0_344 & 0x00000004
	branch (d0_344 & 0x00000004) != 0x00000000 l00002CAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CEC:
	branch Mem351[a3_278:byte] == 0x68 l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF2:
	branch Mem351[a3_278:byte] == 0x6C l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF8:
	branch Mem351[a3_278:byte] == 0x4C l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CFE:
	branch Mem351[a3_278:byte] == 0x7A l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D04:
	branch Mem351[a3_278:byte] == 0x6A l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D0A:
	branch Mem351[a3_278:byte] == 0x74 l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D10:
	branch Mem351[a3_278:byte] != 0x2A l00002D7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D16:
	d7 = DPB(d7, Mem351[a7_1373 + 73:byte], 0)
	d1 = DPB(d1, Mem351[a7_1373 + 72:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D1E:
	branch Mem351[a3_278:byte] != 0x2A l00002D28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D28:
	branch (byte) d1 != 0x68 l00002D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D2E:
	branch Mem351[a3_278:byte] != 0x68 l00002D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D38:
	branch (byte) d1 != 0x6C l00002D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D3E:
	branch Mem351[a3_278:byte] != 0x6C l00002D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D48:
	d1 = DPB(d1, Mem351[a3_278:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D44:
	d1 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D34:
	d1 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D24:
	d7 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D4A:
	a3_278 = a3_278 + 1
	branch Mem351[a3_278:byte] == 0x68 l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D52:
	branch Mem351[a3_278:byte] == 0x6C l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D58:
	branch Mem351[a3_278:byte] == 0x4C l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D5E:
	branch Mem351[a3_278:byte] == 0x7A l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D64:
	branch Mem351[a3_278:byte] == 0x6A l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D6A:
	branch Mem351[a3_278:byte] == 0x74 l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D70:
	branch Mem351[a3_278:byte] == 0x2A l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D76:
	Mem450[a7_1373 + 72:byte] = (byte) d1
	Mem456[a7_1373 + 73:byte] = (byte) d7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D7E:
	branch Mem459[a7_1373 + 72:byte] != 0x6A l00002D8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D86:
	Mem464[a7_1373 + 72:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D8C:
	branch Mem467[a7_1373 + 72:byte] != 0x74 l00002D9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D94:
	Mem472[a7_1373 + 72:byte] = 0x69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D9A:
	branch Mem475[a7_1373 + 72:byte] != 0x7A l00002DA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DA2:
	Mem480[a7_1373 + 72:byte] = 0x6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DA8:
	byte v71_487 = Mem486[a3_278:byte]
	a3 = a3_278 + 1
	d7 = DPB(d7, v71_487, 0)
	branch v71_487 == 0x00 l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DAC:
	branch v71_487 == 0x25 l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DB2:
	branch v71_487 == 0x63 l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DB8:
	branch v71_487 == 0x6E l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DBE:
	branch v71_487 == 0x5B l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DC4:
	word32 d0_531
	word32 a0_509 = a2_1057 + 24
	Mem512[a0_509:word32] = Mem510[a0_509:word32] | 0x00000001
	word32 a0_513 = a2_1057 + 20
	word32 v77_514 = Mem512[a0_513:word32] - 0x00000001
	Mem515[a0_513:word32] = v77_514
	branch v77_514 < 0x00000000 l00002DEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DEE:
	word32 a7_519 = a7_1373 - 4
	Mem521[a7_519:word32] = a2_1057
	d0_531 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem521[a7_519:word32], out d1_4135, out a1, out a5)
	d1 = d0_531
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DD6:
	a1 = a2_1057 + 4
	word32 a0_542 = Mem515[a1:word32]
	word32 a7_543 = a7_1373 - 4
	Mem545[a7_543:word32] = a2_1057
	Mem549[a1:word32] = a0_542 + 1
	byte v83_553 = Mem549[a0_542:byte]
	a2_1057 = Mem549[a7_543:word32]
	d0_531 = DPB(d0, v83_553, 0)
	d1 = (int32) v83_553
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DFA:
	word32 d0_578 = (int32) Mem576[0x000028C5 + (DPB(d0_531, (byte) d1, 0) & 0x000000FF):byte]
	d5_1085 = d1
	d4_132 = d4_132 + 0x00000001
	d0 = d0_578 & 0x00000008
	branch (d0_578 & 0x00000008) != 0x00000000 l00002DC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E1C:
	d3_1906 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E1E:
	word32 d1_597 = DPB(d1, v71_487 - 0x25, 0)
	branch v71_487 == 0x25 l0000326A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000326A:
	word32 a0_613 = a2_1057 + 24
	Mem616[a0_613:word32] = Mem614[a0_613:word32] | 0x00000001
	word32 a0_617 = a2_1057 + 20
	word32 v127_618 = Mem616[a0_617:word32] - 0x00000001
	Mem619[a0_617:word32] = v127_618
	branch v127_618 < 0x00000000 l0000329C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000329C:
	word32 a7_625 = a7_1373 - 4
	Mem627[a7_625:word32] = a2_1057
	d0 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem627[a7_625:word32], out d1, out a1, out a5)
	Mem693[a7_625 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000327C:
	a1 = a2_1057 + 4
	word32 a0_697 = Mem619[a1:word32]
	word32 a7_698 = a7_1373 - 4
	Mem700[a7_698:word32] = a2_1057
	Mem704[a1:word32] = a0_697 + 1
	byte v131_708 = Mem704[a0_697:byte]
	a2_1057 = Mem704[a7_698:word32]
	Mem723[a7_698:word32] = d1_597
	Mem728[a7_698 + 48:word32] = (int32) v131_708
	d0 = DPB(d0, v131_708, 0)
	d1 = Mem728[a7_698:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032AA:
	d5_1085 = Mem734[a7_1373 + 44:word32]
	d3_130 = d3_1906 + 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch Mem734[a7_1373 + 44:word32] == 0x00000025 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032BE:
	branch d5_1085 == 0xFFFFFFFF l000032D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032C6:
	word32 a7_771 = a7_1373 - 4
	Mem774[a7_771:word32] = a2_1057
	Mem777[a7_771 - 4:word32] = d5_1085
	d0 = fn00002C0C(Mem777[a7_771 - 1:byte], Mem777[a7_771:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032D0:
	d3_130 = d3_130 - 0x00000001
	d4_132 = d4_132 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E28:
	branch v71_487 == 0x5B l00002F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F66:
	Mem796[a7_1373 + 44:byte] = 0x00
	branch Mem796[a3:byte] != 0x5E l00002F78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F70:
	Mem801[a7_1373 + 44:byte] = 0x01
	a3 = a3 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F78:
	Mem805[a7_1373 + 52:word32] = 0x00000000
	byte v455_806 = Mem805[a7_1373 + 44:byte]
	d7 = DPB(d7, v455_806, 0)
	word32 d1_1069 = Mem805[a7_1373 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F84:
	word32 d5_816
	branch v455_806 == 0x00 l00002F90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F90:
	d5_816 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F88:
	d5_816 = 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F92:
	Mem829[a5 + d1_1069:byte] = (byte) d5_816
	d1_1069 = d1_1069 + 0x00000001
	branch d1_1069 <u 0x00000020 l00002F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FA4:
	Mem839[a7_1373 + 132:word32] = d2_1012
	Mem842[a7_1373 + 44:byte] = v455_806
	byte v464_843 = Mem842[a7_1373 + 44:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FB0:
	branch Mem847[a3:byte] == 0x00 l00003026
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FB4:
	byte v465_852 = Mem847[a3:byte]
	a3 = a3 + 1
	d1_1069 = DPB(d1_1069, v465_852, 0)
	branch Mem847[a3:byte] != 0x2D l00002FC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FBC:
	branch v465_852 - Mem847[a3 + 1:byte] >=u 0x00 l00002FC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FC8:
	d7 = DPB(d7, v465_852, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FC2:
	a3 = a3 + 2
	d7 = DPB(d7, Mem847[a3 + 1:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FCA:
	word32 d5_876 = (int32) v465_852
	d0 = (int32) (byte) d7
	branch d0 - d5_876 <u 0x00000000 l00003020
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FD6:
	branch v464_843 == 0x00 l00002FFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FFA:
	word32 a0_894 = a7_1373 + 78 + (d5_876 >>u 0x00000003)
	d1_1069 = (int32) Mem902[a0_894:byte]
	Mem907[a0_894:byte] = (byte) (1 << (d5_876 & 7) | d1_1069)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FDA:
	word32 a0_912 = a7_1373 + 78 + (d5_876 >>u 0x00000003)
	d1_1069 = (int32) Mem902[a0_912:byte]
	Mem925[a0_912:byte] = (byte) (~(1 << (d5_876 & 7)) & d1_1069)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003016:
	d5_876 = d5_876 + 0x00000001
	d0 = (int32) (byte) d7
	branch d0 - d5_876 >=u 0x00000000 l00002FD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003020:
	branch Mem943[a3:byte] != 0x5D l00002FB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003026:
	word32 a6_1202
	d2_1012 = Mem956[a7_1373 + 132:word32]
	a3 = a3 + 1
	branch Mem956[a7_1373 + 73:byte] != 0x00 l00003046
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003046:
	a6_1202 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003032:
	word32 d0_968 = d2_1012 + 0x00000003 >>u 0x00000002
	d2_1012 = (d0_968 << 0x00000002) + 0x00000004
	d0 = d0_968 << 0x00000002
	a6_1202 = Mem956[d2_1012 + -4:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003048:
	word32 a0_986 = a2_1057 + 24
	Mem989[a0_986:word32] = Mem956[a0_986:word32] | 0x00000001
	word32 a0_990 = a2_1057 + 20
	word32 v482_991 = Mem989[a0_990:word32] - 0x00000001
	Mem992[a0_990:word32] = v482_991
	branch v482_991 < 0x00000000 l0000307A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000307A:
	word32 a7_996 = a7_1373 - 4
	Mem998[a7_996:word32] = a2_1057
	d0 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem998[a7_996:word32], out d1, out a1, out a5)
	Mem1043[a7_996 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000305A:
	a1 = a2_1057 + 4
	word32 a0_1047 = Mem992[a1:word32]
	word32 a7_1048 = a7_1373 - 4
	Mem1050[a7_1048:word32] = a2_1057
	Mem1054[a1:word32] = a0_1047 + 1
	byte v486_1058 = Mem1054[a0_1047:byte]
	a2_1057 = Mem1054[a7_1048:word32]
	Mem1073[a7_1048:word32] = d1_1069
	Mem1078[a7_1048 + 48:word32] = (int32) v486_1058
	d0 = DPB(d0, v486_1058, 0)
	d1 = Mem1078[a7_1048:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003088:
	d5_1085 = Mem1084[a7_1373 + 44:word32]
	word32 d3_1098 = d3_1906 + 0x00000001
	word32 d4_1111 = d4_132 + 0x00000001
	branch Mem1084[a7_1373 + 44:word32] == 0xFFFFFFFF l00003156
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000309C:
	word32 a7_1117 = a7_1373 - 4
	Mem1119[a7_1117:word32] = a7_1373 + 78
	Mem1123[a7_1117 - 4:word32] = a1
	Mem1125[a7_1117 - 0x00000008:word32] = 0x00000008
	Mem1128[a7_1117 - 0x0000000C:word32] = d5_1085
	d1 = (int32) Mem1128[Mem1128[a7_1117:word32] + fn000014EC(d2_1012, Mem1128[a7_1117 - 0x0000000C:word32], Mem1128[a7_1117 - 0x00000008:word32]):byte]
	a1 = Mem1128[a7_1117 - 0x00000004:word32]
	d0 = 1 << (d5_1085 & 7) & d1
	branch d0 == 0x00000000 l00003156
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030CC:
	branch d6_1172 - d3_1098 <u 0x00000000 l00003156
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030D2:
	byte v499_1188 = Mem1128[a7_1117 + 77:byte]
	d7 = DPB(d7, v499_1188, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030D6:
	branch v499_1188 != 0x00 l000030DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030DA:
	Mem1203[a6_1202:byte] = (byte) d5_1085
	a6_1202 = a6_1202 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030DC:
	word32 a0_1208 = a2_1057 + 24
	Mem1212[a0_1208:word32] = Mem1209[a0_1208:word32] | 0x00000001
	word32 a0_1213 = a2_1057 + 20
	word32 v504_1214 = Mem1212[a0_1213:word32] - 0x00000001
	Mem1215[a0_1213:word32] = v504_1214
	branch v504_1214 < 0x00000000 l00003106
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003106:
	word32 a7_1220 = a7_1373 - 4
	Mem1222[a7_1220:word32] = a2_1057
	d0 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem1222[a7_1220:word32], out d1_4141, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030EE:
	a1 = a2_1057 + 4
	word32 a0_1248 = Mem1215[a1:word32]
	word32 a7_1249 = a7_1373 - 4
	Mem1251[a7_1249:word32] = a2_1057
	Mem1255[a1:word32] = a0_1248 + 1
	byte v508_1259 = Mem1255[a0_1248:byte]
	a2_1057 = Mem1255[a7_1249:word32]
	d0 = DPB(d0, v508_1259, 0)
	d1 = (int32) v508_1259
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003112:
	d5_1085 = d1
	d3_1098 = d3_1098 + 0x00000001
	d4_1111 = d4_1111 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003152
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003120:
	word32 a7_1283 = a7_1373 - 4
	Mem1285[a7_1283:word32] = a7_1373 + 78
	Mem1289[a7_1283 - 4:word32] = a1
	Mem1291[a7_1283 - 0x00000008:word32] = 0x00000008
	Mem1294[a7_1283 - 0x0000000C:word32] = d1
	d1 = (int32) Mem1294[Mem1294[a7_1283:word32] + fn000014EC(d2_1012, Mem1294[a7_1283 - 0x0000000C:word32], Mem1294[a7_1283 - 0x00000008:word32]):byte]
	a1 = Mem1294[a7_1283 - 0x00000004:word32]
	d0 = 1 << (d1 & 7) & d1
	branch d0 == 0x00000000 l00003152
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000314E:
	branch d6_1172 - d3_1098 >=u 0x00000000 l000030D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003152:
	Mem1337[a7_1373 + 73:byte] = v499_1188
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003156:
	branch d5_1085 == 0xFFFFFFFF l00003168
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000315E:
	word32 a7_1345 = a7_1373 - 4
	Mem1351[a7_1345:word32] = a2_1057
	Mem1354[a7_1345 - 4:word32] = d5_1085
	d0 = fn00002C0C(Mem1354[a7_1345 - 1:byte], Mem1354[a7_1345:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003168:
	d3_130 = d3_1098 - 0x00000001
	d4_132 = d4_1111 - 0x00000001
	branch Mem1374[a7_1373 + 73:byte] != 0x00 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003174:
	branch d3_130 == 0x00000000 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000317A:
	Mem1391[a6_1202:byte] = 0x00
	Mem1394[a7_1373 + 60:word32] = Mem1391[a7_1373 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E30:
	word32 d1_1397 = DPB(d1, v71_487 - 0x63, 0)
	branch v71_487 == 0x63 l00002E46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E46:
	branch d6_1172 != 0xFFFFFFFF l00002E50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E4E:
	d6_1172 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E50:
	word32 a1_1411
	branch Mem614[a7_1373 + 73:byte] != 0x00 l00002E6A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E6A:
	a1_1411 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E56:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1012 = d0 + 0x00000004
	a1_1411 = Mem614[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E6C:
	word32 a0_1425 = a2_1057 + 24
	Mem1428[a0_1425:word32] = Mem614[a0_1425:word32] | 0x00000001
	word32 a0_1429 = a2_1057 + 20
	Mem1431[a0_1429:word32] = Mem1428[a0_1429:word32] - 0x00000001
	Mem1436[a7_1373 + 44:word32] = a1_1411
	branch Test(LT,false) l00002EA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EA4:
	word32 a1_1441 = Mem1436[a7_1373 + 44:word32]
	word32 a7_1442 = a7_1373 - 4
	Mem1444[a7_1442:word32] = a2_1057
	Mem1446[a7_1442 + 48:word32] = a1_1441
	d0 = fn00003CE0(d2_1012, a1_1441, a3, a4_273, a5, Mem1446[a7_1442:word32], out d1, out a1_4138, out a5)
	Mem1466[a7_1442 + 56:word32] = d0
	Mem1469[a7_1442 + 48:word32] = Mem1466[a7_1442 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E84:
	word32 a1_1472 = a2_1057 + 4
	word32 a0_1473 = Mem1436[a1_1472:word32]
	word32 a7_1474 = a7_1373 - 4
	Mem1476[a7_1474:word32] = a2_1057
	Mem1480[a1_1472:word32] = a0_1473 + 1
	byte v235_1484 = Mem1480[a0_1473:byte]
	a2_1057 = Mem1480[a7_1474:word32]
	Mem1492[a7_1474:word32] = d1_1397
	Mem1497[a7_1474 + 56:word32] = (int32) v235_1484
	d0 = DPB(d0, v235_1484, 0)
	d1 = Mem1497[a7_1474:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EC2:
	a1 = Mem1503[a7_1373 + 44:word32]
	d5_1085 = Mem1503[a7_1373 + 52:word32]
	word32 d3_1509 = d3_1906 + 0x00000001
	word32 d4_1513 = d4_132 + 0x00000001
	branch Mem1503[a7_1373 + 52:word32] == 0xFFFFFFFF l00002F3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002ED8:
	Mem1519[a7_1373 + 44:word32] = a1
	branch d6_1172 - d3_1509 <u 0x00000000 l00002F3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE0:
	byte v249_1526 = Mem1519[a7_1373 + 73:byte]
	d7 = DPB(d7, v249_1526, 0)
	word32 a4_1532 = Mem1519[a7_1373 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE8:
	branch v249_1526 != 0x00 l00002EEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EEC:
	Mem1541[a4_1532:byte] = (byte) d5_1085
	a4_1532 = a4_1532 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EEE:
	word32 a0_1546 = a2_1057 + 24
	Mem1550[a0_1546:word32] = Mem1547[a0_1546:word32] | 0x00000001
	word32 a0_1551 = a2_1057 + 20
	word32 v256_1552 = Mem1550[a0_1551:word32] - 0x00000001
	Mem1553[a0_1551:word32] = v256_1552
	branch v256_1552 < 0x00000000 l00002F18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F18:
	word32 a7_1558 = a7_1373 - 4
	Mem1560[a7_1558:word32] = a2_1057
	d0 = fn00003CE0(d2_1012, a1, a3, a4_1532, a5, Mem1560[a7_1558:word32], out d1_4139, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F00:
	a1 = a2_1057 + 4
	word32 a0_1585 = Mem1553[a1:word32]
	word32 a7_1586 = a7_1373 - 4
	Mem1588[a7_1586:word32] = a2_1057
	Mem1592[a1:word32] = a0_1585 + 1
	byte v260_1596 = Mem1592[a0_1585:byte]
	a2_1057 = Mem1592[a7_1586:word32]
	d0 = DPB(d0, v260_1596, 0)
	d1 = (int32) v260_1596
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F24:
	d5_1085 = d1
	d3_1509 = d3_1509 + 0x00000001
	d4_1513 = d4_1513 + 0x00000001
	branch d1 == 0xFFFFFFFF l00002F36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F32:
	branch d6_1172 - d3_1509 >=u 0x00000000 l00002EE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F36:
	Mem1630[a7_1373 + 73:byte] = v249_1526
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F3A:
	branch d5_1085 == 0xFFFFFFFF l00002F4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F42:
	word32 a7_1638 = a7_1373 - 4
	Mem1644[a7_1638:word32] = a2_1057
	Mem1647[a7_1638 - 4:word32] = d5_1085
	d0 = fn00002C0C(Mem1647[a7_1638 - 1:byte], Mem1647[a7_1638:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F4C:
	d3_130 = d3_1509 - 0x00000001
	d4_132 = d4_1513 - 0x00000001
	branch Mem1667[a7_1373 + 73:byte] != 0x00 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F58:
	branch d3_130 == 0x00000000 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F5E:
	Mem1678[a7_1373 + 60:word32] = Mem1667[a7_1373 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E34:
	d1 = DPB(d1, v71_487 - 0x6E, 0)
	branch v71_487 == 0x6E l000032D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032D8:
	branch Mem614[a7_1373 + 73:byte] != 0x00 l00003370
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032E0:
	branch Mem614[a7_1373 + 72:byte] != 0x01 l00003302
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003302:
	branch Mem614[a7_1373 + 72:byte] != 0x6C l00003320
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003320:
	branch Mem614[a7_1373 + 72:byte] != 0x68 l0000333E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000333E:
	branch Mem614[a7_1373 + 72:byte] != 0x02 l0000335C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000335C:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1710[Mem614[d0:word32]:word32] = d4_132
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003346:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1722[Mem614[d0:word32]:byte] = (byte) d4_132
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003328:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1734[Mem614[d0:word32]:word16] = (word16) d4_132
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000330A:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1746[Mem614[d0:word32]:word32] = d4_132
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032E8:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 a0_1756 = Mem614[d0:word32]
	Mem1758[a0_1756 + 4:word32] = d4_132
	Mem1759[a0_1756:word32] = 0x00000000
	d2_1012 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003370:
	Mem1768[a7_1373 + 60:word32] = Mem1766[a7_1373 + 60:word32] + 0x00000001
	d3_130 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E3C:
	d1 = DPB(d1, v71_487 - 0x73, 0)
	branch v71_487 == 0x73 l00003184
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003184:
	branch Mem614[a7_1373 + 73:byte] != 0x00 l0000319E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000319E:
	a5 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000318A:
	d0 = d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1012 = d0 + 0x00000004
	a5 = Mem614[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031A0:
	branch d5_1085 == 0xFFFFFFFF l0000323C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031AA:
	word32 d0_1815 = (int32) Mem614[0x000028C5 + (DPB(d0, (byte) d5_1085, 0) & 0x000000FF):byte]
	d0 = d0_1815 & 0x00000008
	branch (d0_1815 & 0x00000008) != 0x00000000 l0000323C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031C6:
	branch d6_1172 - d3_1906 <u 0x00000000 l0000323C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031CA:
	byte v154_1827 = Mem614[a7_1373 + 73:byte]
	d7 = DPB(d7, v154_1827, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031CE:
	branch v154_1827 != 0x00 l000031D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031D2:
	Mem1839[a5:byte] = (byte) d5_1085
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031D4:
	word32 a0_1844 = a2_1057 + 24
	Mem1848[a0_1844:word32] = Mem1845[a0_1844:word32] | 0x00000001
	word32 a0_1849 = a2_1057 + 20
	word32 v160_1850 = Mem1848[a0_1849:word32] - 0x00000001
	Mem1851[a0_1849:word32] = v160_1850
	branch v160_1850 < 0x00000000 l000031FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031FE:
	word32 a7_1856 = a7_1373 - 4
	Mem1858[a7_1856:word32] = a2_1057
	d0 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem1858[a7_1856:word32], out d1_4137, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031E6:
	a1 = a2_1057 + 4
	word32 a0_1883 = Mem1851[a1:word32]
	word32 a7_1884 = a7_1373 - 4
	Mem1886[a7_1884:word32] = a2_1057
	Mem1890[a1:word32] = a0_1883 + 1
	byte v164_1894 = Mem1890[a0_1883:byte]
	a2_1057 = Mem1890[a7_1884:word32]
	d0 = DPB(d0, v164_1894, 0)
	d1 = (int32) v164_1894
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000320A:
	d5_1085 = d1
	d3_1906 = d3_1906 + 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003238
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003218:
	word32 d0_1925 = (int32) Mem1923[0x000028C5 + (DPB(d0, (byte) d1, 0) & 0x000000FF):byte]
	d0 = d0_1925 & 0x00000008
	branch (d0_1925 & 0x00000008) != 0x00000000 l00003238
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003234:
	branch d6_1172 - d3_1906 >=u 0x00000000 l000031CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003238:
	Mem1943[a7_1373 + 73:byte] = v154_1827
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000323C:
	branch d5_1085 == 0xFFFFFFFF l0000324E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003244:
	word32 a7_1951 = a7_1373 - 4
	Mem1957[a7_1951:word32] = a2_1057
	Mem1960[a7_1951 - 4:word32] = d5_1085
	d0 = fn00002C0C(Mem1960[a7_1951 - 1:byte], Mem1960[a7_1951:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000324E:
	d3_130 = d3_1906 - 0x00000001
	d4_132 = d4_132 - 0x00000001
	branch Mem1981[a7_1373 + 73:byte] != 0x00 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000325A:
	branch d3_130 == 0x00000000 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003260:
	Mem1996[a5:byte] = 0x00
	Mem1999[a7_1373 + 60:word32] = Mem1996[a7_1373 + 60:word32] + 0x00000001
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E42:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000337A:
	Mem2001[a7_1373 + 48:word32] = 0x00000000
	Mem2002[a7_1373 + 44:word32] = 0x00000000
	Mem2003[a7_1373 + 110:word32] = 0x00000000
	branch v71_487 != 0x00 l0000338C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000338A:
	a3 = a3 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000338C:
	branch v71_487 != 0x70 l0000339A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003392:
	Mem2015[a7_1373 + 72:byte] = 0x6C
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000339A:
	branch d5_1085 != 0x0000002D l000033A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033A2:
	branch (byte) d7 != 0x75 l000033B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033A8:
	branch d5_1085 != 0x0000002B l00003400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033B0:
	branch d6_1172 - d3_1906 <u 0x00000000 l00003400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033B4:
	Mem2047[a7_1373 + 110:word32] = d5_1085
	word32 a0_2052 = a2_1057 + 24
	Mem2054[a0_2052:word32] = Mem2047[a0_2052:word32] | 0x00000001
	word32 a0_2055 = a2_1057 + 20
	word32 v186_2056 = Mem2054[a0_2055:word32] - 0x00000001
	Mem2057[a0_2055:word32] = v186_2056
	branch v186_2056 < 0x00000000 l000033EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033EA:
	word32 a7_2060 = a7_1373 - 4
	Mem2062[a7_2060:word32] = a2_1057
	d0 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem2062[a7_2060:word32], out d1, out a1, out a5)
	Mem2095[a7_2060 + 56:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033CA:
	a1 = a2_1057 + 4
	word32 a0_2099 = Mem2057[a1:word32]
	word32 a7_2100 = a7_1373 - 4
	Mem2102[a7_2100:word32] = a2_1057
	Mem2106[a1:word32] = a0_2099 + 1
	byte v190_2110 = Mem2106[a0_2099:byte]
	a2_1057 = Mem2106[a7_2100:word32]
	Mem2122[a7_2100:word32] = d1
	Mem2127[a7_2100 + 56:word32] = (int32) v190_2110
	d0 = DPB(d0, v190_2110, 0)
	d1 = Mem2127[a7_2100:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033F8:
	d5_1085 = Mem2133[a7_1373 + 52:word32]
	d3_1906 = d3_1906 + 0x00000001
	d4_132 = d4_132 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003400:
	branch (byte) d7 != 0x69 l00003572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003408:
	branch d5_1085 != 0x00000030 l00003534
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003412:
	branch d6_1172 - d3_1906 <u 0x00000000 l00003534
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003534:
	word32 d0_2178 = (int32) Mem2172[0x000028C5 + (DPB(d0, (byte) d5_1085, 0) & 0x000000FF):byte]
	d0 = d0_2178 & 0x00000004
	branch (d0_2178 & 0x00000004) != 0x00000000 l00003572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003550:
	word32 d0_2191 = (int32) Mem2172[0x000028C5 + (DPB(d0_2178 & 0x00000004, (byte) d5_1085, 0) & 0x000000FF):byte]
	d0 = d0_2191 & 0x00000044
	branch (d0_2191 & 0x00000044) == 0x00000000 l00003572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000356C:
	branch d6_1172 - d3_1906 <u 0x00000000 l00003572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003570:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003418:
	word32 d0_2232
	word32 a0_2206 = a2_1057 + 24
	Mem2208[a0_2206:word32] = Mem2172[a0_2206:word32] | 0x00000001
	word32 a0_2209 = a2_1057 + 20
	word32 v202_2210 = Mem2208[a0_2209:word32] - 0x00000001
	Mem2211[a0_2209:word32] = v202_2210
	branch v202_2210 < 0x00000000 l0000344A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000344A:
	word32 a7_2215 = a7_1373 - 4
	Mem2217[a7_2215:word32] = a2_1057
	d0_2232 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem2217[a7_2215:word32], out d1, out a1, out a5)
	Mem2240[a7_2215 + 56:word32] = d0_2232
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000342A:
	a1 = a2_1057 + 4
	word32 a0_2244 = Mem2211[a1:word32]
	word32 a7_2245 = a7_1373 - 4
	Mem2247[a7_2245:word32] = a2_1057
	Mem2251[a1:word32] = a0_2244 + 1
	byte v206_2255 = Mem2251[a0_2244:byte]
	a2_1057 = Mem2251[a7_2245:word32]
	Mem2261[a7_2245:word32] = d1
	Mem2266[a7_2245 + 56:word32] = (int32) v206_2255
	d0_2232 = DPB(d0, v206_2255, 0)
	d1 = Mem2266[a7_2245:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003458:
	Mem2274[a7_1373 + 64:word32] = Mem2272[a7_1373 + 52:word32]
	word32 d0_2283 = DPB(d0_2232, Mem2274[a7_1373 + 55:byte], 0)
	word32 d3_2276 = d3_1906 + 0x00000001
	d0 = d0_2283 & 0x000000FF
	branch __btst(Mem2274[0x000028C5 + (int32) ((int16) (d0_2283 & 0x000000FF)):byte], 0x0000) l0000347E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000347A:
	d0 = DPB(d0_2283 & 0x000000FF, (byte) (d0_2283 & 0x000000FF) | 0x20, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000347E:
	branch d0 != 0x00000078 l00003516
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003488:
	branch d6_1172 - d3_2276 <u 0x00000000 l00003516
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003516:
	d7 = 111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000348E:
	word32 d0_2336
	word32 a0_2309 = a2_1057 + 24
	Mem2312[a0_2309:word32] = Mem2274[a0_2309:word32] | 0x00000001
	word32 a0_2313 = a2_1057 + 20
	word32 v220_2314 = Mem2312[a0_2313:word32] - 0x00000001
	Mem2315[a0_2313:word32] = v220_2314
	branch v220_2314 < 0x00000000 l000034C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034C0:
	word32 a7_2319 = a7_1373 - 4
	Mem2321[a7_2319:word32] = a2_1057
	d0_2336 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem2321[a7_2319:word32], out d1, out a1, out a5)
	Mem2344[a7_2319 + 56:word32] = d0_2336
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034A0:
	a1 = a2_1057 + 4
	word32 a0_2348 = Mem2315[a1:word32]
	word32 a7_2349 = a7_1373 - 4
	Mem2351[a7_2349:word32] = a2_1057
	Mem2355[a1:word32] = a0_2348 + 1
	byte v224_2359 = Mem2355[a0_2348:byte]
	a2_1057 = Mem2355[a7_2349:word32]
	Mem2365[a7_2349:word32] = d1
	Mem2370[a7_2349 + 56:word32] = (int32) v224_2359
	d0_2336 = DPB(d0, v224_2359, 0)
	d1 = Mem2370[a7_2349:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034CE:
	Mem2378[a7_1373 + 74:word32] = Mem2376[a7_1373 + 52:word32]
	word32 d0_2396 = (int32) Mem2378[0x000028C5 + (DPB(d0_2336, (byte) d5_1085, 0) & 0x000000FF):byte]
	d0 = d0_2396 & 0x00000044
	branch (d0_2396 & 0x00000044) == 0x00000000 l000034FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034F4:
	branch d6_1172 - (d3_2276 + 0x00000001) <u 0x00000000 l000034FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034F8:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034FA:
	branch Mem2378[a7_1373 + 74:word32] == 0xFFFFFFFF l00003510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003504:
	word32 a7_2413 = a7_1373 - 4
	Mem2417[a7_2413:word32] = a2_1057
	Mem2421[a7_2413 - 4:word32] = Mem2417[a7_2413 + 78:word32]
	d0 = fn00002C0C(Mem2421[a7_2413 - 1:byte], Mem2421[a7_2413:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003510:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003518:
	branch Mem2441[a7_1373 + 64:word32] == 0xFFFFFFFF l0000352E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003522:
	word32 a7_2447 = a7_1373 - 4
	Mem2452[a7_2447:word32] = a2_1057
	Mem2456[a7_2447 - 4:word32] = Mem2452[a7_2447 + 68:word32]
	d0 = fn00002C0C(Mem2456[a7_2447 - 1:byte], Mem2456[a7_2447:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000352E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003572:
	word32 d4_2627 = d4_132
	word32 d3_2502 = d3_1906
	branch (byte) d7 != 0x78 l000036A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000357A:
	branch d5_1085 != 0x00000030 l000036A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003584:
	branch d6_1172 - d3_1906 <u 0x00000000 l000036A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000358A:
	word32 d0_2569
	word32 a0_2509 = a2_1057 + 24
	Mem2513[a0_2509:word32] = Mem2510[a0_2509:word32] | 0x00000001
	word32 a0_2514 = a2_1057 + 20
	word32 v287_2515 = Mem2513[a0_2514:word32] - 0x00000001
	Mem2516[a0_2514:word32] = v287_2515
	branch v287_2515 < 0x00000000 l000035BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035BC:
	word32 a7_2522 = a7_1373 - 4
	Mem2524[a7_2522:word32] = a2_1057
	d0_2569 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem2524[a7_2522:word32], out d1, out a1, out a5)
	Mem2577[a7_2522 + 56:word32] = d0_2569
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000359C:
	a1 = a2_1057 + 4
	word32 a0_2581 = Mem2516[a1:word32]
	word32 a7_2582 = a7_1373 - 4
	Mem2584[a7_2582:word32] = a2_1057
	Mem2588[a1:word32] = a0_2581 + 1
	byte v291_2592 = Mem2588[a0_2581:byte]
	a2_1057 = Mem2588[a7_2582:word32]
	Mem2610[a7_2582:word32] = d1
	Mem2615[a7_2582 + 56:word32] = (int32) v291_2592
	d0_2569 = DPB(d0, v291_2592, 0)
	d1 = Mem2615[a7_2582:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035CA:
	Mem2623[a7_1373 + 64:word32] = Mem2621[a7_1373 + 52:word32]
	word32 d0_2633 = DPB(d0_2569, Mem2623[a7_1373 + 55:byte], 0)
	word32 d3_2625 = d3_1906 + 0x00000001
	word32 d4_2629 = d4_132 + 0x00000001
	d0 = d0_2633 & 0x000000FF
	branch __btst(Mem2623[0x000028C5 + (int32) ((int16) (d0_2633 & 0x000000FF)):byte], 0x0000) l000035F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035EC:
	d0 = DPB(d0_2633 & 0x000000FF, (byte) (d0_2633 & 0x000000FF) | 0x20, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035F0:
	branch d0 != 0x00000078 l0000368C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035FA:
	branch d6_1172 - d3_2625 <u 0x00000000 l0000368C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003600:
	word32 d0_2684
	word32 a0_2657 = a2_1057 + 24
	Mem2660[a0_2657:word32] = Mem2623[a0_2657:word32] | 0x00000001
	word32 a0_2661 = a2_1057 + 20
	word32 v304_2662 = Mem2660[a0_2661:word32] - 0x00000001
	Mem2663[a0_2661:word32] = v304_2662
	branch v304_2662 < 0x00000000 l00003632
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003632:
	word32 a7_2667 = a7_1373 - 4
	Mem2669[a7_2667:word32] = a2_1057
	d0_2684 = fn00003CE0(d2_1012, a1, a3, a4_273, a5, Mem2669[a7_2667:word32], out d1, out a1, out a5)
	Mem2692[a7_2667 + 56:word32] = d0_2684
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003612:
	a1 = a2_1057 + 4
	word32 a0_2696 = Mem2663[a1:word32]
	word32 a7_2697 = a7_1373 - 4
	Mem2699[a7_2697:word32] = a2_1057
	Mem2703[a1:word32] = a0_2696 + 1
	byte v308_2707 = Mem2703[a0_2696:byte]
	a2_1057 = Mem2703[a7_2697:word32]
	Mem2713[a7_2697:word32] = d1
	Mem2718[a7_2697 + 56:word32] = (int32) v308_2707
	d0_2684 = DPB(d0, v308_2707, 0)
	d1 = Mem2718[a7_2697:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003640:
	Mem2726[a7_1373 + 74:word32] = Mem2724[a7_1373 + 52:word32]
	word32 d0_2741 = (int32) Mem2726[0x000028C5 + (DPB(d0_2684, Mem2726[a7_1373 + 55:byte], 0) & 0x000000FF):byte]
	d3_2502 = d3_2625 + 0x00000001
	d4_2627 = d4_2629 + 0x00000001
	d0 = d0_2741 & 0x00000044
	branch (d0_2741 & 0x00000044) == 0x00000000 l00003672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003668:
	branch d6_1172 - (d3_2625 + 0x00000001) <u 0x00000000 l00003672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003672:
	branch Mem2726[a7_1373 + 74:word32] == 0xFFFFFFFF l00003688
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000367C:
	word32 a7_2756 = a7_1373 - 4
	Mem2760[a7_2756:word32] = a2_1057
	Mem2764[a7_2756 - 4:word32] = Mem2760[a7_2756 + 78:word32]
	d0 = fn00002C0C(Mem2764[a7_2756 - 1:byte], Mem2764[a7_2756:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003688:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000368C:
	branch Mem2783[a7_1373 + 64:word32] == 0xFFFFFFFF l000036A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003696:
	word32 a7_2788 = a7_1373 - 4
	Mem2792[a7_2788:word32] = a2_1057
	Mem2796[a7_2788 - 4:word32] = Mem2792[a7_2788 + 68:word32]
	d0 = fn00002C0C(Mem2796[a7_2788 - 1:byte], Mem2796[a7_2788:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036A2:
	d3_2502 = d3_2625 - 0x00000001
	d4_2627 = d4_2629 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000366C:
	d5_1085 = Mem2726[a7_1373 + 74:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036A6:
	branch (byte) d7 == 0x78 l000036B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036AC:
	branch (byte) d7 != 0x58 l000036BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036BC:
	branch (byte) d7 != 0x6F l000036CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036CC:
	Mem2835[a7_1373 + 52:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036C2:
	Mem2838[a7_1373 + 52:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036D4:
	Mem2843[a7_1373 + 64:word32] = Mem2841[a7_1373 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036B2:
	Mem2847[a7_1373 + 64:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036DA:
	Mem2852[a7_1373 + 114:word32] = Mem2850[a7_1373 + 64:word32]
	word32 d0_2879 = (int32) Mem2852[0x000028C5 + (DPB(d0, (byte) d5_1085, 0) & 0x000000FF):byte]
	Mem2891[a7_1373 + 132:word32] = d2_1012
	Mem2897[a7_1373 + 52:word32] = d4_2627
	Mem2902[a7_1373 + 74:byte] = (byte) d7
	d0 = d0_2879 & 0x00000044
	branch (d0_2879 & 0x00000044) == 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000370C:
	branch Mem2902[a7_1373 + 114:word32] != 0x0000000A l00003742
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003716:
	word32 d0_2917 = (int32) Mem2902[0x000028C5 + (DPB(d0_2879 & 0x00000044, (byte) d5_1085, 0) & 0x000000FF):byte]
	Mem2920[a7_1373 + 132:word32] = d2_1012
	Mem2922[a7_1373 + 52:word32] = d4_2627
	Mem2924[a7_1373 + 74:byte] = (byte) d7
	d0 = d0_2917 & 0x00000004
	branch (d0_2917 & 0x00000004) == 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003742:
	branch Mem2930[a7_1373 + 114:word32] != 0x00000008 l00003762
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000374C:
	Mem2936[a7_1373 + 132:word32] = d2_1012
	Mem2939[a7_1373 + 52:word32] = d4_2627
	Mem2942[a7_1373 + 74:byte] = (byte) d7
	branch d5_1085 > 0x00000037 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003762:
	Mem2950[a7_1373 + 132:word32] = d2_1012
	Mem2953[a7_1373 + 52:word32] = d4_2627
	Mem2965[a7_1373 + 64:word32] = d6_1172
	Mem2968[a7_1373 + 74:byte] = (byte) d7
	branch d6_1172 - d3_2502 <u 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003778:
	d7 = Mem2968[a7_1373 + 114:word32]
	word32 a4_2980 = Mem2968[a7_1373 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003780:
	word32 a7_2985 = a7_1373 - 4
	Mem2988[a7_2985:word32] = d2_1012
	word32 v347_2992 = Mem2988[a7_2985:word32]
	Mem2997[a7_2985:word32] = d7 >> 31
	Mem3000[a7_2985 - 4:word32] = d7
	Mem3004[a7_2985 - 8:word32] = a1
	Mem3008[a7_2985 - 12:word32] = Mem3004[a7_2985 + 52:word32]
	Mem3012[a7_2985 - 16:word32] = Mem3008[a7_2985 + 48:word32]
	Mem3015[a7_2985 - 20:word32] = d7
	Mem3017[a7_2985 - 24:word32] = d7 >> 31
	word32 d1_3020
	word32 d0_3019 = fn00003C60(d4_2627, Mem3017[a7_2985 - 24:word32], Mem3017[a7_2985 - 20:word32], Mem3017[a7_2985 - 16:word32], Mem3017[a7_2985 - 12:word32], out d1_3020)
	word32 v355_3027 = Mem3017[a7_2985 - 8:word32]
	Mem3031[a7_2985 + 68:word32] = d0_3019
	Mem3033[a7_2985 + 72:word32] = d1_3020
	branch ((int32) Mem3033[0x000028C5 + (DPB(Mem3033[a7_2985:word32], (byte) d5_1085, 0) & 0x000000FF):byte] & 0x00000004) == 0x00000000 l000037E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037E0:
	d4_2627 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037D6:
	d4_2627 = d5_1085 - 0x00000030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037E2:
	word32 d6_3110
	Mem3064[a7_1373 - 4:word32] = v347_2992
	Mem3072[a7_1373 - 4:word32] = Mem3064[a7_1373 - 4:word32]
	word32 d2_3074 = d4_2627 + Mem3072[a7_1373 + 68:word32]
	Mem3077[a7_1373 + 48:word32] = d2_3074
	Mem3083[a7_1373 - 8:word32] = d3_2502
	word32 d0_3066 = d4_2627 >> 31
	Mem3089[a7_1373 + 44:word32] = Mem3083[a7_1373 + 64:word32] + d0_3066 + (d2_3074 <u 0x00000000)
	word32 v367_3090 = Mem3089[a7_1373 - 8:word32]
	word32 v368_3093 = Mem3089[a7_1373 - 4:word32]
	branch ((int32) Mem3089[0x000028C5 + (DPB(d0_3066, (byte) d5_1085, 0) & 0x000000FF):byte] & 0x00000001) == 0x00000000 l00003832
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003832:
	d6_3110 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003828:
	d6_3110 = d5_1085 - 0x00000037
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003834:
	word32 d2_3167
	Mem3122[a7_1373 - 4:word32] = v368_3093
	Mem3130[a7_1373 - 4:word32] = Mem3122[a7_1373 - 4:word32]
	word32 d2_3132 = d6_3110 + Mem3130[a7_1373 + 48:word32]
	Mem3135[a7_1373 + 68:word32] = d2_3132
	Mem3140[a7_1373 - 8:word32] = v367_3090
	word32 d0_3124 = d6_3110 >> 31
	Mem3146[a7_1373 + 64:word32] = Mem3140[a7_1373 + 44:word32] + d0_3124 + (d2_3132 <u 0x00000000)
	word32 v377_3147 = Mem3146[a7_1373 - 8:word32]
	branch ((int32) Mem3146[0x000028C5 + (DPB(d0_3124, (byte) d5_1085, 0) & 0x000000FF):byte] & 0x00000002) == 0x00000000 l00003884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003884:
	d2_3167 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000387A:
	d2_3167 = d5_1085 - 0x00000057
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003886:
	word32 d0_3243
	Mem3178[a7_1373 - 4:word32] = d2_3167
	Mem3186[a7_1373 - 4:word32] = Mem3178[a7_1373 - 4:word32]
	word32 d2_3188 = d2_3167 + Mem3186[a7_1373 + 68:word32]
	Mem3191[a7_1373 + 48:word32] = d2_3188
	Mem3196[a7_1373 - 8:word32] = v377_3147
	Mem3201[a7_1373 + 44:word32] = Mem3196[a7_1373 + 64:word32] + (d2_3167 >> 31) + (d2_3188 <u 0x00000000)
	word32 v388_3205 = Mem3201[a7_1373 - 4:word32]
	word32 a0_3212 = a2_1057 + 24
	word32 v387_3202 = Mem3201[a7_1373 - 8:word32]
	Mem3215[a0_3212:word32] = Mem3201[a0_3212:word32] | 1
	word32 a0_3216 = a2_1057 + 20
	word32 v390_3217 = Mem3215[a0_3216:word32] - 0x00000001
	Mem3218[a0_3216:word32] = v390_3217
	d2_1012 = v388_3205
	branch v390_3217 < 0x00000000 l000038D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038D8:
	Mem3223[a7_1373 - 4:word32] = a2_1057
	d0_3243 = fn00003CE0(v388_3205, v355_3027, a3, a4_2980, a5, Mem3223[a7_1373 - 4:word32], out d1_4140, out a1, out a5)
	d1 = d0_3243
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038C0:
	a1 = a2_1057 + 4
	word32 a0_3254 = Mem3218[a1:word32]
	Mem3257[a7_1373 - 4:word32] = a2_1057
	Mem3261[a1:word32] = a0_3254 + 1
	byte v394_3265 = Mem3261[a0_3254:byte]
	a2_1057 = Mem3261[a7_1373 - 4:word32]
	d0_3243 = DPB(1, v394_3265, 0)
	d1 = (int32) v394_3265
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038E4:
	Mem3278[a7_1373 + 52:word32] = Mem3276[a7_1373 + 52:word32] + 0x00000001
	word32 d0_3288 = (int32) Mem3278[0x000028C5 + (DPB(d0_3243, (byte) d1, 0) & 0x000000FF):byte]
	d5_1085 = d1
	d3_2502 = v387_3202 + 0x00000001
	d0 = d0_3288 & 0x00000044
	branch (d0_3288 & 0x00000044) == 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003908:
	branch d7 != 0x0000000A l0000392C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003910:
	word32 d0_3308 = (int32) Mem3278[0x000028C5 + (DPB(d0_3288 & 0x00000044, (byte) d1, 0) & 0x000000FF):byte]
	d0 = d0_3308 & 0x00000004
	branch (d0_3308 & 0x00000004) == 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000392C:
	branch d7 != 0x00000008 l0000393C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003934:
	branch d1 > 0x00000037 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000393C:
	branch a4_2980 - (v387_3202 + 0x00000001) >=u 0x00000000 l00003780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003942:
	byte v396_3336 = Mem3333[a7_1373 + 74:byte]
	d7 = DPB(d7, v396_3336, 0)
	word32 d4_3340 = Mem3333[a7_1373 + 52:word32]
	d2_1012 = Mem3333[a7_1373 + 132:word32]
	branch Mem3333[a7_1373 + 110:word32] == 0x00000000 l00003976
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003954:
	branch d3_2502 != 0x00000002 l00003976
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000395C:
	branch d5_1085 == 0xFFFFFFFF l0000396E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003964:
	word32 a7_3356 = a7_1373 - 4
	Mem3369[a7_3356:word32] = a2_1057
	Mem3372[a7_3356 - 4:word32] = d5_1085
	d0 = fn00002C0C(Mem3372[a7_3356 - 1:byte], Mem3372[a7_3356:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000396E:
	d3_2502 = d3_2502 - 0x00000001
	d4_3340 = d4_3340 - 0x00000001
	d5_1085 = Mem3388[a7_1373 + 110:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003976:
	branch d5_1085 == 0xFFFFFFFF l00003988
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000397E:
	word32 a7_3396 = a7_1373 - 4
	Mem3400[a7_3396:word32] = a2_1057
	Mem3403[a7_3396 - 4:word32] = d5_1085
	d0 = fn00002C0C(Mem3403[a7_3396 - 1:byte], Mem3403[a7_3396:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003988:
	d3_130 = d3_2502 - 0x00000001
	d4_132 = d4_3340 - 0x00000001
	branch Mem3421[a7_1373 + 73:byte] != 0x00 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003994:
	branch d3_130 == 0x00000000 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000399A:
	branch v396_3336 != 0x75 l00003A5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A5C:
	branch Mem3421[a7_1373 + 110:word32] != 0x0000002D l00003A78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A78:
	Mem3441[a7_1373 + 56:word32] = Mem3421[a7_1373 + 48:word32]
	Mem3443[a7_1373 + 52:word32] = Mem3441[a7_1373 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A66:
	word32 v441_3445 = a7_1373 + 44
	d1 = -Mem3421[v441_3445 + 4:word32]
	d0 = -Mem3421[v441_3445:word32] - (d1 <u 0x00000000)
	a7_1373 = Mem3421[a7_1373 + 0x00000038:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A84:
	word32 a7_3461 = a7_1373 - 4
	Mem3472[a7_3461:word32] = d0
	Mem3479[a7_3461 + 48:byte] = Mem3472[a7_3461 + 76:byte] - 0x01
	a7_1373 = a7_3461 + 4
	branch Mem3479[a7_3461 + 48:byte] == 0x00 l00003AAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AAE:
	word32 d0_3493 = d2_1012 + 0x00000003 >>u 0x00000002
	d2_1012 = (d0_3493 << 0x00000002) + 0x00000004
	word32 a0_3499 = Mem3479[d2_1012 + -4:word32]
	Mem3501[a0_3499 + 4:word32] = Mem3479[a7_3461 + 60:word32]
	Mem3503[a0_3499:word32] = Mem3501[a7_3461 + 56:word32]
	d0 = d0_3493 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A98:
	byte v451_3505 = Mem3479[a7_3461 + 48:byte] - 0x01
	Mem3506[a7_3461 + 48:byte] = v451_3505
	branch v451_3505 == 0x00 l00003B00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B00:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3506[a7_3461 + 60:word32]
	Mem3520[Mem3506[d2_1012 + -4:word32]:byte] = (byte) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A9E:
	byte v452_3522 = Mem3506[a7_3461 + 48:byte] - 0x66
	Mem3523[a7_3461 + 48:byte] = v452_3522
	branch v452_3522 == 0x00 l00003AE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AE6:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3523[a7_3461 + 60:word32]
	Mem3537[Mem3523[d2_1012 + -4:word32]:word16] = (word16) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AA6:
	byte v453_3539 = Mem3523[a7_3461 + 48:byte] - 0x04
	Mem3540[a7_3461 + 48:byte] = v453_3539
	branch v453_3539 == 0x00 l00003ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003ACC:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3540[a7_3461 + 60:word32]
	Mem3554[Mem3540[d2_1012 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AAC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B1A:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3540[a7_3461 + 60:word32]
	Mem3567[Mem3540[d2_1012 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039A2:
	word32 a7_3569 = a7_1373 - 4
	Mem3571[a7_3569:word32] = d0
	Mem3578[a7_3569 + 56:byte] = Mem3571[a7_3569 + 76:byte] - 0x01
	a7_1373 = a7_3569 + 4
	branch Mem3578[a7_3569 + 56:byte] == 0x00 l000039CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039CC:
	word32 d0_3588 = d2_1012 + 0x00000003 >>u 0x00000002
	d2_1012 = (d0_3588 << 0x00000002) + 0x00000004
	word32 a0_3594 = Mem3578[d2_1012 + -4:word32]
	Mem3596[a0_3594 + 4:word32] = Mem3578[a7_3569 + 52:word32]
	Mem3598[a0_3594:word32] = Mem3596[a7_3569 + 48:word32]
	d0 = d0_3588 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039B6:
	byte v430_3600 = Mem3578[a7_3569 + 56:byte] - 0x01
	Mem3601[a7_3569 + 56:byte] = v430_3600
	branch v430_3600 == 0x00 l00003A24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A24:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3601[a7_3569 + 52:word32]
	Mem3615[Mem3601[d2_1012 + -4:word32]:byte] = (byte) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039BC:
	byte v431_3617 = Mem3601[a7_3569 + 56:byte] - 0x66
	Mem3618[a7_3569 + 56:byte] = v431_3617
	branch v431_3617 == 0x00 l00003A08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A08:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3618[a7_3569 + 52:word32]
	Mem3632[Mem3618[d2_1012 + -4:word32]:word16] = (word16) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039C4:
	byte v432_3634 = Mem3618[a7_3569 + 56:byte] - 0x04
	Mem3635[a7_3569 + 56:byte] = v432_3634
	branch v432_3634 == 0x00 l000039EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039EC:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3635[a7_3569 + 52:word32]
	Mem3649[Mem3635[d2_1012 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039CA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A40:
	d2_1012 = (d2_1012 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3635[a7_3569 + 52:word32]
	Mem3662[Mem3635[d2_1012 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B32:
	Mem3667[a7_1373 + 60:word32] = Mem3665[a7_1373 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B36:
	a4_273 = a3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C34:
	branch d3_130 == 0x00000000 l00003C3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C38:
	branch Mem3719[a4_273:byte] != 0x00 l00002C5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C3E:
	word32 d0_3760
	branch d5_1085 != 0xFFFFFFFF l00003C50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C46:
	branch Mem3753[a7_1373 + 60:word32] != 0x00000000 l00003C50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C50:
	d0_3760 = Mem3753[a7_1373 + 60:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C4C:
	d0_3760 = d5_1085
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C54:
	word32 a7_3767 = a7_1373 + 4
	word32 a3_3780 = Mem3753[a7_3767 + 24:word32]
	word32 a5_3784 = Mem3753[a7_3767 + 32:word32]
	d1Out = d1
	a1Out = a1
	a3Out = a3_3780
	a5Out = a5_3784
	return d0_3760
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002C3C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003C60(word32 d4, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d4:[16..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00003C60_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C60:
	word32 d0_23 = __swap(dwArg08)
	word32 d1_25 = __swap(dwArg10)
	word32 d4_28 = DPB(d4, (word16) dwArg08, 0) *u (word16) dwArg10
	word32 d1_31 = d1_25 *u (word16) d0_23
	word32 d2_37 = dwArg08 *u (word16) d1_25 + __swap(DPB(d4_28, (word16) d4_28 ^ (word16) d4_28, 0)) + dwArg10 *u (word16) d0_23
	branch d2_37 >=u 0x00000000 l00003C94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C8E:
	d1_31 = d1_31 + 0x00010000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C94:
	word32 d2_43 = __swap(d2_37)
	word32 d3_61 = __swap(dwArg0C) *u (word16) dwArg08
	word32 d3_66 = __swap(DPB(d3_61, (word16) (d3_61 + __swap(dwArg08) *u (word16) dwArg0C), 0))
	word32 d3_77 = __swap(dwArg04) *u (word16) dwArg10
	word32 d3_82 = __swap(DPB(d3_77, (word16) (d3_77 + __swap(dwArg10) *u (word16) dwArg04), 0))
	d1Out = DPB(d2_43, (word16) d4_28, 0)
	return (int32) (word16) d2_43 + d1_31 + (dwArg0C *u (word16) dwArg08 + DPB(d3_66, (word16) d3_66 ^ (word16) d3_66, 0)) + (dwArg04 *u (word16) dwArg10 + DPB(d3_82, (word16) d3_82 ^ (word16) d3_82, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003C60_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003CE0(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5
fn00003CE0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CE0:
	word32 d0_162
	word32 a4_33
	word32 a5_280
	word32 a1_118
	word32 d1_120 = fn00002530(d2, a1, dwArg04, a3, a4, a5, out a1_118, out a4_33, out a5_280)
	branch dwArg04 != 0x00000000 l00003CF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF8:
	branch 32 - (Mem26[dwArg04 + 24:word32] & 42) == 0x00000000 l00003D0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D0A:
	Mem51[dwArg04 + 24:word32] = Mem26[dwArg04 + 24:word32] | 1
	word32 d0_127 = Mem51[dwArg04 + 24:word32] & 0x00000200
	branch d0_127 == 0x00000000 l00003D22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D1C:
	d0_127 = fn00003DDC(d2, a1_118, a3, a4_33, a5_280, out a1_118, out a5_280)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D22:
	branch Mem51[dwArg04 + 28:word32] != 0x00000000 l00003D40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D28:
	d0_127 = Mem51[dwArg04 + 24:word32] & 4
	branch d0_127 == 0x00000000 l00003D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D38:
	Mem81[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D30:
	Mem85[dwArg04 + 28:word32] = 1
	d0_127 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D40:
	branch Mem88[dwArg04 + 8:word32] != 0x00000000 l00003D7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D46:
	word32 d4_100
	branch (Mem88[dwArg04 + 24:word32] & 0x00000080) == 0x00000000 l00003D5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D5A:
	d4_100 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D56:
	d4_100 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D5C:
	word32 d0_119 = fn0000215C(d4_100 + Mem88[dwArg04 + 28:word32], out d1_120, out a0_319, out a1_118)
	d0_127 = d0_119
	branch d0_119 != 0x00000000 l00003D74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D74:
	Mem133[dwArg04 + 8:word32] = d0_119 + 1
	a1_118 = d0_119 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D7C:
	Mem139[dwArg04 + 4:word32] = Mem137[dwArg04 + 8:word32]
	d1_120 = Mem139[dwArg04:word32]
	execPrivate2()
	Mem149[dwArg04 + 20:word32] = d0_127
	word32 v26_150 = Mem149[dwArg04 + 20:word32] - 0x00000001
	Mem151[dwArg04 + 20:word32] = v26_150
	branch v26_150 >= 0x00000000 l00003DC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DC2:
	word32 a0_155 = Mem151[dwArg04 + 4:word32]
	Mem159[dwArg04 + 4:word32] = a0_155 + 1
	a1_118 = dwArg04 + 4
	d0_162 = DPB(d0_127, Mem159[a0_155:byte], 0) & 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DA0:
	branch -1 - Mem151[dwArg04 + 20:word32] != 0x00000000 l00003DB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DB2:
	Mem173[dwArg04 + 24:word32] = Mem151[dwArg04 + 24:word32] | 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DA8:
	Mem180[dwArg04 + 24:word32] = Mem151[dwArg04 + 24:word32] | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DBA:
	Mem185[dwArg04 + 20:word32] = 0x00000000
	d0_162 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D70:
	d0_162 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D04:
	d0_162 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF2:
	d0_162 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DD6:
	d1Out = d1_120
	a1Out = a1_118
	a5Out = a5_280
	return d0_162
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003CE0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003DDC(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31]
// LiveOut: a1 a5 d0
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00003DDC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DDC:
	word32 a2_11 = Mem5[0x00003F88:word32]
	word32 d0_47 = a2_11
	branch a2_11 == 0x00000000 l00003E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DEA:
	branch (Mem12[a2_11 + 24:word32] & 0x00000202) != 0x00000202 l00003E0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DFC:
	branch Mem12[a2_11:word32] == 0x00000000 l00003E0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E00:
	fn000020B0(d2, a1, a3, a4, a5, a2_11, out a0_97, out a1, out a4, out a5)
	Mem45 = Mem24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E0A:
	a2_11 = Mem45[a2_11 + 12:word32]
	d0_47 = a2_11
	branch a2_11 != 0x00000000 l00003DEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E14:
	a1Out = a1
	a5Out = a5
	return d0_47
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003DDC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



