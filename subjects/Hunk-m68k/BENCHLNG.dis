// fn00001000
// Return size: 4
define fn00001000
fn00001000_entry:
	// succ:  l00001000
l00001000:
	a7 = fp
	// succ:  l0000100A
l0000100A:
	d2 = d0
	CVZN = cond(d2)
	a2 = a0
	a4 = 0x0000BE16
	a6 = Mem0[0x00000004:word32]
	v10 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v10)
	branch Test(UGE,C) l00001036
	// succ:  l00001020 l00001036
l00001020:
	a0 = 0x00003E20
	d0 = 0x00000030
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	// succ:  l00001030
l00001030:
	Mem0[a0:word32] = 0x00000000
	a0 = a0 + 4
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00001030
	// succ:  l00001036 l00001030
l00001036:
	v16 = a7
	Mem0[a4 + -32758:word32] = v16
	CVZN = cond(v16)
	v17 = a6
	Mem0[a4 + -32754:word32] = v17
	CVZN = cond(v17)
	a1 = a1 - a1
	CVZNX = cond(a1)
	d0 = FindTask(a1)
	a3 = d0
	d0 = 0
	CVZN = cond(d0)
	a1 = 0x000012BC
	d0 = OpenLibrary(a1, d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001226
	// succ:  l00001056 l00001226
l00001056:
	v21 = d0
	Mem0[a4 + -32750:word32] = v21
	CVZN = cond(v21)
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(NE,Z) l00001066
	// succ:  l00001060 l00001066
l00001060:
	d4 = 2
	CVZN = cond(d4)
	d2 = 8
	CVZN = cond(d2)
	goto l00001076
	// succ:  l00001076
l00001066:
	a0 = a2
	d4 = 3
	CVZN = cond(d4)
	// succ:  l0000106A
l0000106A:
	v48 = Mem0[a0:byte] - 0x20
	CVZN = cond(v48)
	branch Test(NE,Z) l00001072
	// succ:  l00001070 l00001072
l00001070:
	v49 = (word16) d4 + 0x0001
	d4 = DPB(d4, v49, 0)
	CVZNX = cond(v49)
	// succ:  l00001072
l00001072:
	v55 = Mem0[a0:byte]
	a0 = a0 + 1
	ZN = cond(v55 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000106A
	// succ:  l00001076 l0000106A
l00001076:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d0 = d0 + 0x00000011
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000123E
	// succ:  l00001096 l0000123E
l00001096:
	a7 = a7 - 4
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	a5 = d0
	v29 = d3
	Mem0[a5:word32] = v29
	CVZN = cond(v29)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	v30 = d4
	Mem0[a5 + 12:word32] = v30
	CVZN = cond(v30)
	a0 = a5 + 16
	a0 = a0 + d5
	v31 = a0
	Mem0[a5 + 8:word32] = v31
	CVZN = cond(v31)
	a7 = a7 - 4
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	// succ:  l000010B6 l00001190
l000010B6:
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 16:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a1 = Mem0[a5 + 8:word32]
	a6 = a5 + 16
	a0 = d0
	d0 = 0
	CVZN = cond(d0)
	v32 = Mem0[a0:byte]
	a0 = a0 + 1
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	Mem0[a0 + d0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v33 = a0
	Mem0[a6:word32] = v33
	a6 = a6 + 4
	CVZN = cond(v33)
	d3 = 1
	CVZN = cond(d3)
	a0 = a2 + d2
	// succ:  l000010DA
l000010DA:
	a0 = a0 - 1
	v34 = Mem0[a0:byte] - 0x20
	CVZN = cond(v34)
	branch Test(UGT,CZ) l000010E2
	// succ:  l000010DE_1 l000010E2
l000010DE_1:
	d2 = d2 - 0x00000001
	branch d2 != 0xFFFFFFFF l000010DA
	// succ:  l000010E2 l000010DA
l000010E2:
	Mem0[a0 + 1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000010E6
l000010E6:
	v37 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	branch Test(EQ,Z) l00001148
	// succ:  l000010EA l00001148
l000010EA:
	v38 = (byte) d1 - 0x20
	CVZN = cond(v38)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F0 l000010E6
l000010F0:
	v39 = (byte) d1 - 0x09
	CVZN = cond(v39)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F6 l000010E6
l000010F6:
	v40 = d3 - Mem0[a5 + 12:word32]
	CVZN = cond(v40)
	branch Test(EQ,Z) l00001148
	// succ:  l000010FC l00001148
l000010FC:
	v41 = a1
	Mem0[a6:word32] = v41
	a6 = a6 + 4
	CVZN = cond(v41)
	v42 = (word16) d3 + 0x0001
	d3 = DPB(d3, v42, 0)
	CVZNX = cond(v42)
	v43 = (byte) d1 - 0x22
	CVZN = cond(v43)
	branch Test(EQ,Z) l0000111A
	// succ:  l00001106 l0000111A
l00001106:
	v44 = (byte) d1
	Mem0[a1:byte] = v44
	a1 = a1 + 1
	CVZN = cond(v44)
	// succ:  l00001108
l00001108:
	v45 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v45, 0)
	CVZN = cond(v45)
	branch Test(EQ,Z) l00001148
	// succ:  l0000110C l00001148
l0000110C:
	v46 = (byte) d1 - 0x20
	CVZN = cond(v46)
	branch Test(EQ,Z) l00001116
	// succ:  l00001112 l00001116
l00001112:
	v47 = (byte) d1
	Mem0[a1:byte] = v47
	a1 = a1 + 1
	CVZN = cond(v47)
	goto l00001108
	// succ:  l00001108
l00001116:
	Mem0[a1:byte] = 0x00
	a1 = a1 + 1
	Z = true
	C = false
	N = false
	V = false
	goto l000010E6
	// succ:  l000010E6
l0000111A:
	v64 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v64, 0)
	CVZN = cond(v64)
	branch Test(EQ,Z) l00001148
	// succ:  l0000111E l00001148
l0000111E:
	v65 = (byte) d1 - 0x22
	CVZN = cond(v65)
	branch Test(EQ,Z) l00001116
	// succ:  l00001124 l00001116
l00001124:
	v66 = (byte) d1 - 0x2A
	CVZN = cond(v66)
	branch Test(NE,Z) l00001144
	// succ:  l0000112A l00001144
l0000112A:
	v67 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v67, 0)
	CVZN = cond(v67)
	v68 = (byte) d1
	d2 = DPB(d2, v68, 0)
	CVZN = cond(v68)
	v69 = (byte) d2 & 0xDF
	d2 = DPB(d2, v69, 0)
	ZN = cond(v69)
	C = false
	V = false
	v70 = (byte) d2 - 0x4E
	CVZN = cond(v70)
	branch Test(NE,Z) l0000113C
	// succ:  l00001138 l0000113C
l00001138:
	d1 = 10
	CVZN = cond(d1)
	goto l00001144
	// succ:  l00001144
l0000113C:
	v73 = (byte) d2 - 0x45
	CVZN = cond(v73)
	branch Test(NE,Z) l00001144
	// succ:  l00001142 l00001144
l00001142:
	d1 = 27
	CVZN = cond(d1)
	// succ:  l00001144
l00001144:
	v74 = (byte) d1
	Mem0[a1:byte] = v74
	a1 = a1 + 1
	CVZN = cond(v74)
	goto l0000111A
	// succ:  l0000111A
l00001148:
	Mem0[a1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	Mem0[a6:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + 16
	a7 = a7 - 4
	v77 = d3
	Mem0[a7:word32] = v77
	CVZN = cond(v77)
	a6 = Mem0[a4 + -32750:word32]
	execPrivate4()
	v78 = d0
	Mem0[a4 + -32738:word32] = v78
	CVZN = cond(v78)
	execPrivate5()
	v79 = d0
	Mem0[a4 + -32734:word32] = v79
	CVZN = cond(v79)
	a6 = Mem0[a4 + -32754:word32]
	v80 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v80)
	branch Test(ULT,C) l0000117A
	// succ:  l00001172 l0000117A
l00001172:
	v81 = Mem0[a3 + 224:word32]
	Mem0[a4 + -32730:word32] = v81
	CVZN = cond(v81)
	branch Test(NE,Z) l0000117E
	// succ:  l0000117A l0000117E
l0000117A:
	v82 = d0
	Mem0[a4 + -32730:word32] = v82
	CVZN = cond(v82)
	// succ:  l0000117E
l0000117E:
	v83 = Mem0[a3 + 8:byte] - 0x0D
	CVZN = cond(v83)
	branch Test(NE,Z) l000011F8
	// succ:  l00001186 l000011F8
l00001186:
	a0 = Mem0[a3 + 176:word32]
	v84 = Mem0[a0:word32]
	a0 = a0 + 4
	d0 = v84
	CVZN = cond(d0)
	a0 = a0 - d0
	CVZNX = cond(a0)
	goto l00001202
	// succ:  l00001202
l00001190:
	call fn00001214 (retsize: 4;)
	v50 = d0
	Mem0[a7:word32] = v50
	CVZN = cond(v50)
	v51 = d0
	Mem0[a4 + -32746:word32] = v51
	CVZN = cond(v51)
	v52 = d0
	Mem0[a4 + -32742:word32] = v52
	CVZN = cond(v52)
	a7 = a7 - 4
	v53 = d0
	Mem0[a7:word32] = v53
	CVZN = cond(v53)
	a7 = a7 - 4
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a6 = Mem0[a4 + -32750:word32]
	a2 = d0
	d0 = Mem0[a2 + 36:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011B6
	// succ:  l000011AE l000011B6
l000011AE:
	a0 = d0
	d1 = Mem0[a0:word32]
	CVZN = cond(d1)
	Enable()
	// succ:  l000011B6
l000011B6:
	a0 = 0x000012C8
	d1 = a0
	CVZN = cond(d1)
	d2 = 0x000003ED
	CVZN = cond(d2)
	Supervisor(a5)
	v54 = d0
	Mem0[a5 + 4:word32] = v54
	CVZN = cond(v54)
	branch Test(NE,Z) l000011D2
	// succ:  l000011CC l000011D2
l000011CC:
	d2 = 20
	CVZN = cond(d2)
	// succ:  l000011CE_thunk_fn0000127C
l000011CE_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l000011D2:
	v58 = d0
	Mem0[a4 + -32738:word32] = v58
	CVZN = cond(v58)
	v59 = d0
	Mem0[a4 + -32734:word32] = v59
	CVZN = cond(v59)
	v60 = d0
	Mem0[a4 + -32730:word32] = v60
	CVZN = cond(v60)
	v61 = d0
	Mem0[a3 + 156:word32] = v61
	CVZN = cond(v61)
	v62 = d0
	Mem0[a3 + 160:word32] = v62
	CVZN = cond(v62)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 8:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011F4
	// succ:  l000011F0 l000011F4
l000011F0:
	v63 = d0
	Mem0[a3 + 164:word32] = v63
	CVZN = cond(v63)
	// succ:  l000011F4
l000011F4:
	a6 = Mem0[a4 + -32754:word32]
	// succ:  l000011F8
l000011F8:
	d0 = Mem0[a3 + 62:word32]
	CVZN = cond(d0)
	a0 = Mem0[a3 + 58:word32]
	d0 = d0 - a0
	CVZNX = cond(d0)
	// succ:  l00001202
l00001202:
	v71 = a0
	Mem0[a4 + -32718:word32] = v71
	CVZN = cond(v71)
	v72 = a7
	Mem0[a4 + -32714:word32] = v72
	CVZN = cond(v72)
	call fn00001354 (retsize: 4;)
	d2 = 0
	CVZN = cond(d2)
	// succ:  l00001212_thunk_fn0000127C
l00001212_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l00001226:
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	d7 = 0x00038007
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	goto l0000125C
	// succ:  l0000125C
l0000123E:
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	d7 = 0x00010000
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	// succ:  l0000125C
l0000125C:
	ZN = cond(Mem0[a3 + 172:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001268
	// succ:  l00001262 l00001268
l00001262:
	call fn00001214 (retsize: 4;)
	a2 = d0
	call fn0000126C (retsize: 4;)
	// succ:  l00001268
l00001268:
	d0 = 20
	CVZN = cond(d0)
	return
	// succ:  fn00001000_exit
fn00001000_exit:


// fn00001214
// Return size: 4
define fn00001214
fn00001214_entry:
	// succ:  l00001214
l00001214:
	a7 = fp
	a0 = a3 + 92
	WaitPort(a0)
	a0 = a3 + 92
	GetMsg(a0)
	return
	// succ:  fn00001214_exit
fn00001214_exit:


// fn0000126C
// Return size: 4
define fn0000126C
fn0000126C_entry:
	// succ:  l0000126C
l0000126C:
	a7 = fp
	Forbid()
	a1 = a2
	ReplyMsg(a1)
	return
	// succ:  fn0000126C_exit
fn0000126C_exit:


// fn00001278
// Return size: 0
define fn00001278
fn00001278_entry:
	// succ:  l00001278
l00001278:
	a7 = fp
	d2 = Mem0[a7 + 4:word32]
	CVZN = cond(d2)
	// succ:  l00001278_thunk_fn0000127C
l00001278_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001278_exit
fn00001278_exit:


// fn0000127C
// Return size: 4
define fn0000127C
fn0000127C_entry:
	// succ:  l0000127C
l0000127C:
	a7 = v3
	a4 = 0x0000BE16
	a6 = Mem0[a4 + -32754:word32]
	a7 = Mem0[a4 + -32758:word32]
	a7 = a7 - 8
	v6 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v6
	v8 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = v8
	d1 = Mem0[a5 + 4:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l0000129E
	// succ:  l00001296 l0000129E
l00001296:
	a6 = Mem0[a4 + -32750:word32]
	execPrivate1()
	// succ:  l0000129E
l0000129E:
	a6 = Mem0[a4 + -32754:word32]
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l000012B0
	// succ:  l000012AE l000012B0
l000012AE:
	call fn0000126C (retsize: 4;)
	// succ:  l000012B0
l000012B0:
	a1 = a5
	d0 = Mem0[a5:word32]
	CVZN = cond(d0)
	FreeMem(a1, d0)
	d0 = d2
	CVZN = cond(d0)
	return
	// succ:  fn0000127C_exit
fn0000127C_exit:


// fn000012D0
// Return size: 4
define fn000012D0
fn000012D0_entry:
	// succ:  l000012D0
l000012D0:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a3 = 0x00003F68
	d0 = 0x00003F68
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001308
	// succ:  l000012E2 l00001308
l000012E2:
	d2 = 1
	CVZN = cond(d2)
	ZN = cond(Mem0[a3 + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000012F6
	// succ:  l000012EA l000012F6
l000012EA:
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	ZN = cond(Mem0[a3 + d0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000012EA
	// succ:  l000012F6 l000012EA
l000012F6:
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(EQ,Z) l00001308
	// succ:  l000012FA l00001308
l000012FA:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a2 = Mem0[a3 + d0:word32]
	call a2 (retsize: 4;)
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(NE,Z) l000012FA
	// succ:  l00001308 l000012FA
l00001308:
	v13 = Mem0[a7 + 16:word32]
	a7 = a7 - 4
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn00001278 (retsize: 4;)
	a7 = a7 + 4
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn000012D0_exit
fn000012D0_exit:


// fn0000131C
// Return size: 4
define fn0000131C
fn0000131C_entry:
	// succ:  l0000131C
l0000131C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	ZN = cond(Mem0[0x00003E50:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000134E
	// succ:  l00001328 l0000134E
l00001328:
	a3 = Mem0[0x00003F78:word32]
	d0 = 1
	CVZN = cond(d0)
	v11 = d0
	Mem0[0x00003E50:word32] = v11
	CVZN = cond(v11)
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001346
	// succ:  l0000133A l00001346
l0000133A:
	a2 = Mem0[a3 + 4:word32]
	call a2 (retsize: 4;)
	a3 = Mem0[a3:word32]
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l0000133A
	// succ:  l00001346 l0000133A
l00001346:
	v12 = Mem0[a7 + 12:word32]
	a7 = a7 - 4
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn000012D0 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l0000134E
l0000134E:
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn0000131C_exit
fn0000131C_exit:


// fn00001354
// Return size: 4
define fn00001354
fn00001354_entry:
	// succ:  l00001354
l00001354:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a3 = 0x00003F60
	d0 = 0x00003F5C
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001372
	// succ:  l00001366 l00001372
l00001366:
	ZN = cond(Mem0[a3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001372
	// succ:  l0000136A l00001372
l0000136A:
	v11 = Mem0[a3:word32]
	a3 = a3 + 4
	a2 = v11
	call a2 (retsize: 4;)
	ZN = cond(Mem0[a3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000136A
	// succ:  l00001372 l0000136A
l00001372:
	v12 = Mem0[a7 + 16:word32]
	a7 = a7 - 4
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	v14 = Mem0[a7 + 16:word32]
	a7 = a7 - 4
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn00001390 (retsize: 4;)
	a7 = a7 - 4
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	call fn0000131C (retsize: 4;)
	a7 = a7 + 12
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00001354_exit
fn00001354_exit:


// fn00001390
// Return size: 4
define fn00001390
fn00001390_entry:
	// succ:  l00001390
l00001390:
	a7 = fp
	a7 = a7 + -20
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a0 = a7 + 24
	a7 = a7 - 4
	v6 = a0
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000147C
	call fn00002BF0 (retsize: 4;)
	v8 = Mem0[a7 + 32:word32]
	a7 = a7 - 4
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00001480
	call fn000015A4 (retsize: 4;)
	a0 = a7 + 24
	a7 = a7 - 4
	v10 = a0
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000149C
	call fn00002BF0 (retsize: 4;)
	a0 = a7 + 36
	a7 = a7 - 4
	v11 = a0
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000014A0
	call fn00002BF0 (retsize: 4;)
	d3 = 1
	CVZN = cond(d3)
	a7 = a7 + 32
	goto l0000145A
	// succ:  l0000145A
l000013DE:
	d2 = 1
	CVZN = cond(d2)
	goto l00001452
	// succ:  l00001452
l000013E2:
	d0 = Mem0[a7 + 8:word32]
	CVZN = cond(d0)
	d0 = d0 + Mem0[a7 + 12:word32]
	CVZNX = cond(d0)
	d1 = d0
	CVZN = cond(d1)
	d1 = d1 + d2
	CVZNX = cond(d1)
	v21 = d1
	Mem0[a7 + 8:word32] = v21
	CVZN = cond(v21)
	d0 = Mem0[a7 + 8:word32]
	CVZN = cond(d0)
	d0 = d0 >> 0x00000001
	CVZNX = cond(d0)
	v22 = d0
	Mem0[a7 + 12:word32] = v22
	CVZN = cond(v22)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000000A
	v23 = Mem0[a7 + 16:word32]
	a7 = a7 - 4
	v24 = v23
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	call fn000014AC (retsize: 4;)
	a7 = a7 + 8
	v25 = d0
	Mem0[a7 + 8:word32] = v25
	CVZN = cond(v25)
	v26 = d2 - Mem0[a7 + 12:word32]
	CVZN = cond(v26)
	branch Test(EQ,Z) l0000141A
	// succ:  l00001416 l0000141A
l00001416:
	d0 = 0
	CVZN = cond(d0)
	goto l0000141C
	// succ:  l0000141C
l0000141A:
	d0 = 1
	CVZN = cond(d0)
	// succ:  l0000141C
l0000141C:
	v28 = d0
	Mem0[a7 + 8:word32] = v28
	CVZN = cond(v28)
	d0 = Mem0[a7 + 8:word32]
	CVZN = cond(d0)
	d0 = d0 | d2
	ZN = cond(d0)
	C = false
	V = false
	v32 = d0
	Mem0[a7 + 12:word32] = v32
	CVZN = cond(v32)
	branch Test(NE,Z) l00001430
	// succ:  l0000142C l00001430
l0000142C:
	d0 = 1
	CVZN = cond(d0)
	goto l00001432
	// succ:  l00001432
l00001430:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00001432
l00001432:
	v33 = d0
	Mem0[a7 + 8:word32] = v33
	CVZN = cond(v33)
	d0 = Mem0[a7 + 8:word32]
	CVZN = cond(d0)
	d0 = d0 + d2
	CVZNX = cond(d0)
	v34 = d0
	Mem0[a7 + 12:word32] = v34
	CVZN = cond(v34)
	v35 = d2 - Mem0[a7 + 12:word32]
	CVZN = cond(v35)
	branch Test(LT,CZ) l0000144A
	// succ:  l00001446 l0000144A
l00001446:
	d0 = 0
	CVZN = cond(d0)
	goto l0000144C
	// succ:  l0000144C
l0000144A:
	d0 = 1
	CVZN = cond(d0)
	// succ:  l0000144C
l0000144C:
	v37 = d0
	Mem0[a7 + 8:word32] = v37
	CVZN = cond(v37)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	// succ:  l00001452
l00001452:
	d0 = 40
	CVZN = cond(d0)
	v17 = d0 - d2
	CVZN = cond(v17)
	branch Test(GE,VN) l000013E2
	// succ:  l00001458 l000013E2
l00001458:
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	// succ:  l0000145A
l0000145A:
	v12 = d3 - Mem0[a7 + 24:word32]
	CVZN = cond(v12)
	branch Test(LE,VZN) l000013DE
	// succ:  l00001462 l000013DE
l00001462:
	v14 = Mem0[a7 + 8:word32]
	a7 = a7 - 4
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000014A4
	call fn000015A4 (retsize: 4;)
	a7 = a7 + 8
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a7 + 20
	return
	// succ:  fn00001390_exit
fn00001390_exit:


// fn000014AC
// Return size: 4
define fn000014AC
fn000014AC_entry:
	// succ:  l000014AC
l000014AC:
	a7 = fp
	v3 = a7 + 4
	d0 = Mem0[v3:word32]
	v3 = v3 + 4
	d1 = Mem0[v3:word32]
	v3 = v3 + 4
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000014C0
	// succ:  l000014B6 l000014C0
l000014B6:
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000014CC
	// succ:  l000014BA l000014CC
l000014BA:
	call fn0000151E (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn000014AC_exit
l000014C0:
	d1 = -d1
	CVZNX = cond(d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000014D6
	// succ:  l000014C6 l000014D6
l000014C6:
	call fn0000151E (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn000014AC_exit
l000014CC:
	d0 = -d0
	CVZNX = cond(d0)
	call fn0000151E (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn000014AC_exit
l000014D6:
	d0 = -d0
	CVZNX = cond(d0)
	call fn0000151E (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn000014AC_exit
fn000014AC_exit:


// fn000014EC
// Return size: 4
define fn000014EC
fn000014EC_entry:
	// succ:  l000014EC
l000014EC:
	a7 = fp
	v3 = a7 + 4
	d0 = Mem0[v3:word32]
	v3 = v3 + 4
	d1 = Mem0[v3:word32]
	v3 = v3 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l0000150C
	// succ:  l000014F6 l0000150C
l000014F6:
	d0 = -d0
	CVZNX = cond(d0)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00001504
	// succ:  l000014FC l00001504
l000014FC:
	d1 = -d1
	CVZNX = cond(d1)
	call fn0000151E (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn000014EC_exit
l00001504:
	call fn0000151E (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn000014EC_exit
l0000150C:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l0000150E_thunk_fn0000151E
	goto l00001510
	// succ:  l00001510 l0000150E_thunk_fn0000151E
l0000150E_thunk_fn0000151E:
	call fn0000151E (retsize: 0;)
	return
	// succ:  fn000014EC_exit
l00001510:
	d1 = -d1
	CVZNX = cond(d1)
	call fn0000151E (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	return
	// succ:  fn000014EC_exit
fn000014EC_exit:


// fn0000151E
// Return size: 4
define fn0000151E
fn0000151E_entry:
	// succ:  l0000151E
l0000151E:
	a7 = fp
	a7 = a7 - 4
	v4 = d2
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v10 = (word16) d1
	d2 = DPB(d2, v10, 0)
	CVZN = cond(v10)
	branch Test(NE,Z) l00001544
	// succ:  l00001526 l00001544
l00001526:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v13 = (word16) d0
	d2 = DPB(d2, v13, 0)
	CVZN = cond(v13)
	branch Test(EQ,Z) l00001534
	// succ:  l00001530 l00001534
l00001530:
	v14 = (uint16) (d2 % (uint16) d1)
	v15 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v14, 16)
	d2 = DPB(d2, v15, 0)
	VZN = cond(v15)
	C = false
	v17 = (word16) d2
	d0 = DPB(d0, v17, 0)
	CVZN = cond(v17)
	// succ:  l00001534
l00001534:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v26 = (word16) d0
	d2 = DPB(d2, v26, 0)
	CVZN = cond(v26)
	v27 = (uint16) (d2 % (uint16) d1)
	v28 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v27, 16)
	d2 = DPB(d2, v28, 0)
	VZN = cond(v28)
	C = false
	v29 = (word16) d2
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v30 = (word16) d2
	d1 = DPB(d1, v30, 0)
	CVZN = cond(v30)
	v31 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v31
	CVZN = cond(d2)
	return
	// succ:  fn0000151E_exit
l00001544:
	a7 = a7 - 4
	v19 = d3
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	d3 = 16
	CVZN = cond(d3)
	v20 = (word16) d1 - 0x0080
	CVZN = cond(v20)
	branch Test(UGE,C) l00001552
	// succ:  l0000154E l00001552
l0000154E:
	d1 = __rol(d1, 0x00000008)
	CZN = cond(d1)
	V = false
	v22 = (word16) d3 - 0x0008
	d3 = DPB(d3, v22, 0)
	CVZNX = cond(v22)
	// succ:  l00001552
l00001552:
	v24 = (word16) d1 - 0x0800
	CVZN = cond(v24)
	branch Test(UGE,C) l0000155C
	// succ:  l00001558 l0000155C
l00001558:
	d1 = __rol(d1, 0x00000004)
	CZN = cond(d1)
	V = false
	v25 = (word16) d3 - 0x0004
	d3 = DPB(d3, v25, 0)
	CVZNX = cond(v25)
	// succ:  l0000155C
l0000155C:
	v32 = (word16) d1 - 0x2000
	CVZN = cond(v32)
	branch Test(UGE,C) l00001566
	// succ:  l00001562 l00001566
l00001562:
	d1 = __rol(d1, 0x00000002)
	CZN = cond(d1)
	V = false
	v33 = (word16) d3 - 0x0002
	d3 = DPB(d3, v33, 0)
	CVZNX = cond(v33)
	// succ:  l00001566
l00001566:
	ZN = cond((word16) d1 - 0x0000)
	C = false
	V = false
	branch Test(LT,N) l0000156E
	// succ:  l0000156A l0000156E
l0000156A:
	d1 = __rol(d1, 0x00000001)
	CZN = cond(d1)
	V = false
	v35 = (word16) d3 - 0x0001
	d3 = DPB(d3, v35, 0)
	CVZNX = cond(v35)
	// succ:  l0000156E
l0000156E:
	v36 = (word16) d0
	d2 = DPB(d2, v36, 0)
	CVZN = cond(v36)
	d0 = d0 >>u d3
	CVZNX = cond(d0)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 >>u d3
	CVZNX = cond(d2)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v38 = (uint16) (d0 % (uint16) d1)
	v39 = (uint16) (d0 /u (uint16) d1)
	d0 = DPB(d0, v38, 16)
	d0 = DPB(d0, v39, 0)
	VZN = cond(v39)
	C = false
	v40 = (word16) d0
	d3 = DPB(d3, v40, 0)
	CVZN = cond(v40)
	v41 = (word16) d2
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d3
	d2 = DPB(d2, v42, 0)
	CVZN = cond(v42)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d0 = d0 - d2
	CVZNX = cond(d0)
	branch Test(UGE,C) l00001590
	// succ:  l0000158A l00001590
l0000158A:
	v43 = (word16) d3 - 0x0001
	d3 = DPB(d3, v43, 0)
	CVZNX = cond(v43)
	d0 = d0 + d1
	CVZNX = cond(d0)
	// succ:  l0000158E
l0000158E:
	branch Test(UGE,C) l0000158E
	// succ:  l00001590 l0000158E
l00001590:
	d1 = 0
	CVZN = cond(d1)
	v44 = (word16) d3
	d1 = DPB(d1, v44, 0)
	CVZN = cond(v44)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d0 = __rol(d0, d3)
	CZN = cond(d0)
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v45 = d0
	d0 = d1
	d1 = v45
	ZN = cond(d1)
	C = false
	V = false
	v46 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v46
	CVZN = cond(d3)
	v47 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v47
	CVZN = cond(d2)
	return
	// succ:  fn0000151E_exit
fn0000151E_exit:


// fn000015A4
// Return size: 4
define fn000015A4
fn000015A4_entry:
	// succ:  l000015A4
l000015A4:
	a7 = fp
	a0 = a7 + 8
	a7 = a7 - 4
	v4 = a0
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	v6 = Mem0[a7 + 8:word32]
	a7 = a7 - 4
	v7 = v6
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	v8 = Mem0[0x00003F80:word32]
	a7 = a7 - 4
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn000015C0 (retsize: 4;)
	a7 = a7 + 12
	return
	// succ:  fn000015A4_exit
fn000015A4_exit:


// fn000015C0
// Return size: 4
define fn000015C0
fn000015C0_entry:
	// succ:  l000015C0
l000015C0:
	a7 = fp
	a7 = a7 + -68
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d3 = Mem0[a7 + 124:word32]
	CVZN = cond(d3)
	a5 = Mem0[a7 + 116:word32]
	a4 = Mem0[a7 + 120:word32]
	d6 = 0
	CVZN = cond(d6)
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001F06
	// succ:  l000015DC l00001F06
l000015DC:
	v19 = Mem0[a4:byte] - 0x25
	CVZN = cond(v19)
	branch Test(NE,Z) l00001EE0
	// succ:  l000015E4 l00001EE0
l000015E4:
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d5 = -1
	CVZN = cond(d5)
	Mem0[a7 + 72:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d4 = 105
	CVZN = cond(d4)
	a3 = a7 + 76
	d7 = 0
	CVZN = cond(d7)
	Mem0[a7 + 102:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a2 = a4 + 1
	d2 = Mem0[a7 + 72:word32]
	CVZN = cond(d2)
	// succ:  l00001602
l00001602:
	d1 = 0
	CVZN = cond(d1)
	// succ:  l00001604
l00001604:
	a0 = 0x00001F18
	a7 = a7 - 4
	v27 = d0
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	v28 = Mem0[a0 + d1:byte]
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	v29 = (byte) d0 - Mem0[a2:byte]
	CVZN = cond(v29)
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(NE,Z) l00001628
	// succ:  l00001616 l00001628
l00001616:
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v30 = d1
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	v32 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v32
	CVZN = cond(d1)
	d2 = d2 | d0
	ZN = cond(d2)
	C = false
	V = false
	a2 = a2 + 1
	goto l00001632
	// succ:  l00001632
l00001628:
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v40 = d1 - 0x00000005
	CVZN = cond(v40)
	branch Test(ULT,C) l00001604
	// succ:  l00001632 l00001604
l00001632:
	v33 = d1 - 0x00000005
	CVZN = cond(v33)
	branch Test(ULT,C) l00001602
	// succ:  l0000163A l00001602
l0000163A:
	v34 = d2
	Mem0[a7 + 72:word32] = v34
	CVZN = cond(v34)
	v35 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v35)
	branch Test(NE,Z) l00001678
	// succ:  l00001644 l00001678
l00001644:
	a2 = a2 + 1
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v36 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v36
	CVZN = cond(v36)
	branch Test(GE,VN) l00001670
	// succ:  l0000165C l00001670
l0000165C:
	v38 = Mem0[a7 + 72:word32] | 0x00000004
	Mem0[a7 + 72:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	d0 = Mem0[a7 + 44:word32]
	CVZN = cond(d0)
	d0 = -d0
	CVZNX = cond(d0)
	v39 = d0
	Mem0[a7 + 64:word32] = v39
	CVZN = cond(v39)
	goto l000016E4
	// succ:  l000016E4
l00001670:
	v41 = Mem0[a7 + 44:word32]
	Mem0[a7 + 64:word32] = v41
	CVZN = cond(v41)
	goto l000016E4
	// succ:  l000016E4
l00001678:
	v63 = Mem0[a2:byte]
	d0 = DPB(d0, v63, 0)
	CVZN = cond(v63)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v64 = Mem0[a0:byte]
	d0 = DPB(d0, v64, 0)
	CVZN = cond(v64)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000016E4
	// succ:  l00001694 l000016E4
l00001694:
	d2 = Mem0[a7 + 64:word32]
	CVZN = cond(d2)
	// succ:  l00001698
l00001698:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 4
	v65 = d3
	Mem0[a7:word32] = v65
	CVZN = cond(v65)
	d1 = d0
	CVZN = cond(d1)
	d3 = d2
	CVZN = cond(d3)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d1 = d1 *u (word16) d2
	VZN = cond(d1)
	C = false
	d3 = d3 *u (word16) d0
	VZN = cond(d3)
	C = false
	d0 = d0 *u (word16) d2
	VZN = cond(d0)
	C = false
	v66 = (word16) d1 + (word16) d3
	d1 = DPB(d1, v66, 0)
	CVZNX = cond(v66)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v68 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v68
	CVZN = cond(d3)
	v69 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v69, 0)
	CVZN = cond(v69)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + d0
	CVZNX = cond(d2)
	v70 = Mem0[a2:byte]
	d0 = DPB(d0, v70, 0)
	CVZN = cond(v70)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v71 = Mem0[a0:byte]
	d0 = DPB(d0, v71, 0)
	CVZN = cond(v71)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001698
	// succ:  l000016E0 l00001698
l000016E0:
	v72 = d2
	Mem0[a7 + 64:word32] = v72
	CVZN = cond(v72)
	// succ:  l000016E4
l000016E4:
	v42 = Mem0[a2:byte] - 0x2E
	CVZN = cond(v42)
	branch Test(NE,Z) l00001778
	// succ:  l000016EC l00001778
l000016EC:
	a2 = a2 + 1
	v43 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v43)
	branch Test(NE,Z) l00001712
	// succ:  l000016F4 l00001712
l000016F4:
	a2 = a2 + 1
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v44 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v44
	CVZN = cond(v44)
	branch Test(LT,CZ) l00001778
	// succ:  l0000170C l00001778
l0000170C:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	goto l00001778
	// succ:  l00001778
l00001712:
	d5 = 0
	CVZN = cond(d5)
	v46 = Mem0[a2:byte]
	d0 = DPB(d0, v46, 0)
	CVZN = cond(v46)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v47 = Mem0[a0:byte]
	d0 = DPB(d0, v47, 0)
	CVZN = cond(v47)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001778
	// succ:  l00001730 l00001778
l00001730:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 4
	v48 = d2
	Mem0[a7:word32] = v48
	CVZN = cond(v48)
	d1 = d0
	CVZN = cond(d1)
	d2 = d5
	CVZN = cond(d2)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d1 = d1 *u (word16) d5
	VZN = cond(d1)
	C = false
	d2 = d2 *u (word16) d0
	VZN = cond(d2)
	C = false
	d0 = d0 *u (word16) d5
	VZN = cond(d0)
	C = false
	v50 = (word16) d1 + (word16) d2
	d1 = DPB(d1, v50, 0)
	CVZNX = cond(v50)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v52 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v52
	CVZN = cond(d2)
	v53 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v53, 0)
	CVZN = cond(v53)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d5 = d1
	CVZN = cond(d5)
	d5 = d5 + d0
	CVZNX = cond(d5)
	v54 = Mem0[a2:byte]
	d0 = DPB(d0, v54, 0)
	CVZN = cond(v54)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v55 = Mem0[a0:byte]
	d0 = DPB(d0, v55, 0)
	CVZN = cond(v55)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001730
	// succ:  l00001778 l00001730
l00001778:
	v56 = Mem0[a2:byte] - 0x68
	CVZN = cond(v56)
	branch Test(EQ,Z) l0000179C
	// succ:  l0000177E l0000179C
l0000177E:
	v57 = Mem0[a2:byte] - 0x6C
	CVZN = cond(v57)
	branch Test(EQ,Z) l0000179C
	// succ:  l00001784 l0000179C
l00001784:
	v58 = Mem0[a2:byte] - 0x4C
	CVZN = cond(v58)
	branch Test(EQ,Z) l0000179C
	// succ:  l0000178A l0000179C
l0000178A:
	v59 = Mem0[a2:byte] - 0x6A
	CVZN = cond(v59)
	branch Test(EQ,Z) l0000179C
	// succ:  l00001790 l0000179C
l00001790:
	v60 = Mem0[a2:byte] - 0x7A
	CVZN = cond(v60)
	branch Test(EQ,Z) l0000179C
	// succ:  l00001796 l0000179C
l00001796:
	v61 = Mem0[a2:byte] - 0x74
	CVZN = cond(v61)
	branch Test(NE,Z) l000017A2
	// succ:  l0000179C l000017A2
l0000179C:
	v62 = Mem0[a2:byte]
	a2 = a2 + 1
	d4 = DPB(d4, v62, 0)
	CVZN = cond(v62)
	d4 = (int16) (int8) d4
	ZN = cond(d4)
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	// succ:  l000017A2
l000017A2:
	v73 = d4 - 0x00000068
	CVZN = cond(v73)
	branch Test(NE,Z) l000017B4
	// succ:  l000017AA l000017B4
l000017AA:
	v74 = Mem0[a2:byte] - 0x68
	CVZN = cond(v74)
	branch Test(NE,Z) l000017B4
	// succ:  l000017B0 l000017B4
l000017B0:
	d4 = 2
	CVZN = cond(d4)
	a2 = a2 + 1
	// succ:  l000017B4
l000017B4:
	v75 = d4 - 0x0000006C
	CVZN = cond(v75)
	branch Test(NE,Z) l000017C6
	// succ:  l000017BC l000017C6
l000017BC:
	v76 = Mem0[a2:byte] - 0x6C
	CVZN = cond(v76)
	branch Test(NE,Z) l000017C6
	// succ:  l000017C2 l000017C6
l000017C2:
	d4 = 1
	CVZN = cond(d4)
	a2 = a2 + 1
	// succ:  l000017C6
l000017C6:
	v77 = d4 - 0x0000006A
	CVZN = cond(v77)
	branch Test(NE,Z) l000017D0
	// succ:  l000017CE l000017D0
l000017CE:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l000017D0
l000017D0:
	v78 = d4 - 0x0000007A
	CVZN = cond(v78)
	branch Test(NE,Z) l000017DA
	// succ:  l000017D8 l000017DA
l000017D8:
	d4 = 108
	CVZN = cond(d4)
	// succ:  l000017DA
l000017DA:
	v83 = d4 - 0x00000074
	CVZN = cond(v83)
	branch Test(NE,Z) l000017E4
	// succ:  l000017E2 l000017E4
l000017E2:
	d4 = 105
	CVZN = cond(d4)
	// succ:  l000017E4
l000017E4:
	v84 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v84, 0)
	CVZN = cond(v84)
	v85 = (byte) d1
	d0 = DPB(d0, v85, 0)
	CVZN = cond(v85)
	v86 = (byte) d1 - 0x25
	CVZN = cond(v86)
	branch Test(EQ,Z) l00001C6C
	// succ:  l000017F0 l00001C6C
l000017F0:
	v87 = (byte) d0 - 0x58
	CVZN = cond(v87)
	branch Test(EQ,Z) l0000183E
	// succ:  l000017F6 l0000183E
l000017F6:
	v88 = (byte) d0 - 0x63
	CVZN = cond(v88)
	branch Test(EQ,Z) l00001BEC
	// succ:  l000017FE l00001BEC
l000017FE:
	v89 = (byte) d0 - 0x64
	CVZN = cond(v89)
	branch Test(EQ,Z) l0000183E
	// succ:  l00001804 l0000183E
l00001804:
	v90 = (byte) d0 - 0x69
	CVZN = cond(v90)
	branch Test(EQ,Z) l0000183E
	// succ:  l0000180A l0000183E
l0000180A:
	v91 = (byte) d0
	Mem0[a7 + 44:byte] = v91
	CVZN = cond(v91)
	v92 = (byte) d0 - 0x6E
	CVZN = cond(v92)
	branch Test(EQ,Z) l00001C7E
	// succ:  l00001816 l00001C7E
l00001816:
	v93 = Mem0[a7 + 44:byte]
	d0 = DPB(d0, v93, 0)
	CVZN = cond(v93)
	v94 = (byte) d0 - 0x6F
	d0 = DPB(d0, v94, 0)
	CVZNX = cond(v94)
	v95 = (byte) d0 - 0x01
	CVZN = cond(v95)
	branch Test(ULE,VZ) l0000183E
	// succ:  l00001824 l0000183E
l00001824:
	v97 = Mem0[a7 + 44:byte]
	d0 = DPB(d0, v97, 0)
	CVZN = cond(v97)
	v98 = (byte) d0 - 0x73
	CVZN = cond(v98)
	branch Test(EQ,Z) l00001C28
	// succ:  l00001830 l00001C28
l00001830:
	v99 = (byte) d0 - 0x75
	CVZN = cond(v99)
	branch Test(EQ,Z) l0000183E
	// succ:  l00001836 l0000183E
l00001836:
	v100 = (byte) d0 - 0x78
	CVZN = cond(v100)
	branch Test(NE,Z) l00001D16
	// succ:  l0000183E l00001D16
l0000183E:
	v101 = (byte) d1 - 0x70
	CVZN = cond(v101)
	branch Test(NE,Z) l00001850
	// succ:  l00001844 l00001850
l00001844:
	d4 = 108
	CVZN = cond(d4)
	d1 = 120
	CVZN = cond(d1)
	v102 = Mem0[a7 + 72:word32] | 0x00000001
	Mem0[a7 + 72:word32] = v102
	ZN = cond(v102)
	C = false
	V = false
	// succ:  l00001850
l00001850:
	v103 = (byte) d1 - 0x64
	CVZN = cond(v103)
	branch Test(EQ,Z) l0000185E
	// succ:  l00001856 l0000185E
l00001856:
	v104 = (byte) d1 - 0x69
	CVZN = cond(v104)
	branch Test(NE,Z) l000019A8
	// succ:  l0000185E l000019A8
l0000185E:
	v105 = d4 - 0x00000001
	CVZN = cond(v105)
	branch Test(NE,Z) l00001884
	// succ:  l00001866 l00001884
l00001866:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000008
	CVZNX = cond(d3)
	a0 = d3
	v106 = Mem0[a0 + -4:word32]
	Mem0[a7 + 52:word32] = v106
	CVZN = cond(v106)
	v107 = Mem0[a0 + -8:word32]
	Mem0[a7 + 48:word32] = v107
	CVZN = cond(v107)
	goto l0000191C
	// succ:  l0000191C
l00001884:
	v113 = d4 - 0x0000006C
	CVZN = cond(v113)
	branch Test(NE,Z) l000018B0
	// succ:  l0000188C l000018B0
l0000188C:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	d0 = Mem0[a0 + -4:word32]
	CVZN = cond(d0)
	v114 = d0
	Mem0[a7 + 52:word32] = v114
	CVZN = cond(v114)
	a7 = a7 - 4
	v115 = d1
	Mem0[a7:word32] = v115
	CVZN = cond(v115)
	d1 = 31
	CVZN = cond(d1)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v116 = d0
	Mem0[a7 + 52:word32] = v116
	CVZN = cond(v116)
	v117 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v117
	CVZN = cond(d1)
	goto l0000191C
	// succ:  l0000191C
l000018B0:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	d0 = Mem0[a0 + -4:word32]
	CVZN = cond(d0)
	v204 = d0
	Mem0[a7 + 52:word32] = v204
	CVZN = cond(v204)
	a7 = a7 - 4
	v205 = d1
	Mem0[a7:word32] = v205
	CVZN = cond(v205)
	d1 = 31
	CVZN = cond(d1)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v206 = d0
	Mem0[a7 + 52:word32] = v206
	CVZN = cond(v206)
	v207 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v207
	CVZN = cond(d1)
	v208 = d4 - 0x00000068
	CVZN = cond(v208)
	branch Test(NE,Z) l000018F6
	// succ:  l000018DA l000018F6
l000018DA:
	v209 = Mem0[a7 + 54:word16]
	d0 = DPB(d0, v209, 0)
	CVZN = cond(v209)
	a7 = a7 - 4
	v210 = d1
	Mem0[a7:word32] = v210
	CVZN = cond(v210)
	v211 = (word16) d0
	d1 = DPB(d1, v211, 0)
	CVZN = cond(v211)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	v212 = d1
	Mem0[a7 + 56:word32] = v212
	CVZN = cond(v212)
	a7 = a7 - 4
	v213 = d0
	Mem0[a7:word32] = v213
	CVZN = cond(v213)
	d0 = 31
	CVZN = cond(d0)
	d1 = d1 >> d0
	CVZNX = cond(d1)
	v214 = d1
	Mem0[a7 + 56:word32] = v214
	CVZN = cond(v214)
	v215 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v215
	CVZN = cond(d1)
	v216 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v216
	CVZN = cond(d0)
	// succ:  l000018F6
l000018F6:
	v217 = d4 - 0x00000002
	CVZN = cond(v217)
	branch Test(NE,Z) l0000191C
	// succ:  l000018FE l0000191C
l000018FE:
	v218 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v218, 0)
	CVZN = cond(v218)
	a7 = a7 - 4
	v219 = d1
	Mem0[a7:word32] = v219
	CVZN = cond(v219)
	v220 = (byte) d0
	d1 = DPB(d1, v220, 0)
	CVZN = cond(v220)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	v221 = d1
	Mem0[a7 + 56:word32] = v221
	CVZN = cond(v221)
	a7 = a7 - 4
	v222 = d0
	Mem0[a7:word32] = v222
	CVZN = cond(v222)
	d0 = 31
	CVZN = cond(d0)
	d1 = d1 >> d0
	CVZNX = cond(d1)
	v223 = d1
	Mem0[a7 + 56:word32] = v223
	CVZN = cond(v223)
	v224 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v224
	CVZN = cond(d1)
	v225 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v225
	CVZN = cond(d0)
	// succ:  l0000191C
l0000191C:
	v118 = (byte) d1
	Mem0[a7 + 44:byte] = v118
	CVZN = cond(v118)
	a7 = a7 - 4
	v119 = d0
	Mem0[a7:word32] = v119
	CVZN = cond(v119)
	a7 = a7 - 4
	v120 = d1
	Mem0[a7:word32] = v120
	CVZN = cond(v120)
	d0 = Mem0[a7 + 60:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 56:word32]
	CVZN = cond(d1)
	a7 = a7 - 4
	v121 = d2
	Mem0[a7:word32] = v121
	CVZN = cond(v121)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(GE,VN) l00001966
	// succ:  l00001946 l00001966
l00001946:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v123 = 0x2D
	Mem0[a0:byte] = v123
	CVZN = cond(v123)
	v124 = a7 + 48
	d0 = Mem0[v124:word32]
	v124 = v124 + 4
	d1 = Mem0[v124:word32]
	v124 = v124 + 4
	d1 = -d1
	CVZNX = cond(d1)
	d0 = -d0 - X
	CVZNX = cond(d0)
	v125 = a7 + 56
	a6 = Mem0[v125:word32]
	v125 = v125 + 0x00000004
	a7 = Mem0[v125:word32]
	v125 = v125 + 0x00000004
	goto l00001ADC
	// succ:  l00001ADC
l00001966:
	v141 = Mem0[a7 + 44:byte]
	d1 = DPB(d1, v141, 0)
	CVZN = cond(v141)
	d0 = 16
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001980
	// succ:  l00001972 l00001980
l00001972:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v142 = 0x2B
	Mem0[a0:byte] = v142
	CVZN = cond(v142)
	goto l00001994
	// succ:  l00001994
l00001980:
	d0 = 8
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001994
	// succ:  l00001988 l00001994
l00001988:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v202 = 0x20
	Mem0[a0:byte] = v202
	CVZN = cond(v202)
	// succ:  l00001994
l00001994:
	v155 = Mem0[a7 + 52:word32]
	Mem0[a7 + 60:word32] = v155
	CVZN = cond(v155)
	v156 = Mem0[a7 + 48:word32]
	Mem0[a7 + 56:word32] = v156
	CVZN = cond(v156)
	v157 = (byte) d1
	Mem0[a7 + 44:byte] = v157
	CVZN = cond(v157)
	goto l00001ADC
	// succ:  l00001ADC
l000019A8:
	v226 = d4 - 0x00000001
	CVZN = cond(v226)
	branch Test(NE,Z) l000019CC
	// succ:  l000019B0 l000019CC
l000019B0:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000008
	CVZNX = cond(d3)
	a0 = d3
	v227 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v227
	CVZN = cond(v227)
	v228 = Mem0[a0 + -8:word32]
	Mem0[a7 + 56:word32] = v228
	CVZN = cond(v228)
	goto l00001A06
	// succ:  l00001A06
l000019CC:
	v236 = d4 - 0x0000006C
	CVZN = cond(v236)
	branch Test(NE,Z) l000019EE
	// succ:  l000019D4 l000019EE
l000019D4:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v237 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v237
	CVZN = cond(v237)
	Mem0[a7 + 56:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001A06
	// succ:  l00001A06
l000019EE:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v258 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v258
	CVZN = cond(v258)
	Mem0[a7 + 56:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00001A06
l00001A06:
	v229 = d4 - 0x00000068
	CVZN = cond(v229)
	branch Test(NE,Z) l00001A22
	// succ:  l00001A0E l00001A22
l00001A0E:
	v230 = Mem0[a7 + 62:word16]
	d0 = DPB(d0, v230, 0)
	CVZN = cond(v230)
	a7 = a7 - 4
	v231 = d1
	Mem0[a7:word32] = v231
	CVZN = cond(v231)
	d1 = 0
	CVZN = cond(d1)
	v232 = (word16) d0
	d1 = DPB(d1, v232, 0)
	CVZN = cond(v232)
	v233 = d1
	Mem0[a7 + 64:word32] = v233
	CVZN = cond(v233)
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v235 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v235
	CVZN = cond(d1)
	// succ:  l00001A22
l00001A22:
	v242 = d4 - 0x00000002
	CVZN = cond(v242)
	branch Test(NE,Z) l00001A3E
	// succ:  l00001A2A l00001A3E
l00001A2A:
	v243 = Mem0[a7 + 63:byte]
	d0 = DPB(d0, v243, 0)
	CVZN = cond(v243)
	a7 = a7 - 4
	v244 = d1
	Mem0[a7:word32] = v244
	CVZN = cond(v244)
	d1 = 0
	CVZN = cond(d1)
	v245 = (byte) d0
	d1 = DPB(d1, v245, 0)
	CVZN = cond(v245)
	v246 = d1
	Mem0[a7 + 64:word32] = v246
	CVZN = cond(v246)
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v248 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v248
	CVZN = cond(d1)
	// succ:  l00001A3E
l00001A3E:
	d0 = 1
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	v252 = (byte) d1
	Mem0[a7 + 44:byte] = v252
	CVZN = cond(v252)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001ADC
	// succ:  l00001A4E l00001ADC
l00001A4E:
	v253 = (byte) d1 - 0x6F
	CVZN = cond(v253)
	branch Test(NE,Z) l00001A8A
	// succ:  l00001A54 l00001A8A
l00001A54:
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001A7E
	// succ:  l00001A58 l00001A7E
l00001A58:
	a7 = a7 - 4
	v254 = d0
	Mem0[a7:word32] = v254
	CVZN = cond(v254)
	a7 = a7 - 4
	v255 = d1
	Mem0[a7:word32] = v255
	CVZN = cond(v255)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 64:word32]
	CVZN = cond(d1)
	a7 = a7 - 4
	v256 = d2
	Mem0[a7:word32] = v256
	CVZN = cond(v256)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(EQ,Z) l00001A8A
	// succ:  l00001A7E l00001A8A
l00001A7E:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v257 = 0x30
	Mem0[a0:byte] = v257
	CVZN = cond(v257)
	// succ:  l00001A8A
l00001A8A:
	v262 = (byte) d1 - 0x78
	CVZN = cond(v262)
	branch Test(EQ,Z) l00001A9A
	// succ:  l00001A90 l00001A9A
l00001A90:
	v263 = (byte) d1
	Mem0[a7 + 44:byte] = v263
	CVZN = cond(v263)
	v264 = (byte) d1 - 0x58
	CVZN = cond(v264)
	branch Test(NE,Z) l00001ADC
	// succ:  l00001A9A l00001ADC
l00001A9A:
	v265 = (byte) d1
	Mem0[a7 + 44:byte] = v265
	CVZN = cond(v265)
	a7 = a7 - 4
	v266 = d0
	Mem0[a7:word32] = v266
	CVZN = cond(v266)
	a7 = a7 - 4
	v267 = d1
	Mem0[a7:word32] = v267
	CVZN = cond(v267)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 64:word32]
	CVZN = cond(d1)
	a7 = a7 - 4
	v268 = d2
	Mem0[a7:word32] = v268
	CVZN = cond(v268)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(EQ,Z) l00001ADC
	// succ:  l00001AC4 l00001ADC
l00001AC4:
	a0 = a7 + 106
	a1 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v269 = 0x30
	Mem0[a1:byte] = v269
	CVZN = cond(v269)
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v270 = (byte) d1
	Mem0[a0:byte] = v270
	CVZN = cond(v270)
	v271 = (byte) d1
	Mem0[a7 + 44:byte] = v271
	CVZN = cond(v271)
	// succ:  l00001ADC
l00001ADC:
	v130 = Mem0[a7 + 44:byte]
	d1 = DPB(d1, v130, 0)
	CVZN = cond(v130)
	a3 = a7 + 98
	v131 = (byte) d1 - 0x78
	CVZN = cond(v131)
	branch Test(EQ,Z) l00001AF0
	// succ:  l00001AEA l00001AF0
l00001AEA:
	v132 = (byte) d1 - 0x58
	CVZN = cond(v132)
	branch Test(NE,Z) l00001AFA
	// succ:  l00001AF0 l00001AFA
l00001AF0:
	v133 = 0x00000010
	Mem0[a7 + 44:word32] = v133
	CVZN = cond(v133)
	goto l00001B18
	// succ:  l00001B18
l00001AFA:
	v145 = (byte) d1 - 0x6F
	CVZN = cond(v145)
	branch Test(NE,Z) l00001B0A
	// succ:  l00001B00 l00001B0A
l00001B00:
	v146 = 0x00000008
	Mem0[a7 + 48:word32] = v146
	CVZN = cond(v146)
	goto l00001B12
	// succ:  l00001B12
l00001B0A:
	v189 = 0x0000000A
	Mem0[a7 + 48:word32] = v189
	CVZN = cond(v189)
	// succ:  l00001B12
l00001B12:
	v176 = Mem0[a7 + 48:word32]
	Mem0[a7 + 44:word32] = v176
	CVZN = cond(v176)
	// succ:  l00001B18
l00001B18:
	v143 = Mem0[a7 + 44:word32]
	Mem0[a7 + 108:word32] = v143
	CVZN = cond(v143)
	v144 = (byte) d1 - 0x58
	CVZN = cond(v144)
	branch Test(EQ,Z) l00001B2A
	// succ:  l00001B24 l00001B2A
l00001B24:
	a6 = 0x00001F20
	goto l00001B2E
	// succ:  l00001B2E
l00001B2A:
	a6 = 0x00001F30
	// succ:  l00001B2E
l00001B2E:
	v158 = a6
	Mem0[a7 + 44:word32] = v158
	CVZN = cond(v158)
	v159 = d3
	Mem0[a7 + 124:word32] = v159
	CVZN = cond(v159)
	v160 = d5
	Mem0[a7 + 68:word32] = v160
	CVZN = cond(v160)
	v161 = d6
	Mem0[a7 + 48:word32] = v161
	CVZN = cond(v161)
	v162 = d7
	Mem0[a7 + 98:word32] = v162
	CVZN = cond(v162)
	v163 = a7 + 56
	d6 = Mem0[v163:word32]
	v163 = v163 + 4
	d7 = Mem0[v163:word32]
	v163 = v163 + 4
	d3 = Mem0[a7 + 102:word32]
	CVZN = cond(d3)
	a1 = Mem0[a7 + 44:word32]
	// succ:  l00001B50
l00001B50:
	d1 = Mem0[a7 + 108:word32]
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	a7 = a7 - 4
	v164 = d0
	Mem0[a7:word32] = v164
	CVZN = cond(v164)
	a7 = a7 - 4
	v165 = d1
	Mem0[a7:word32] = v165
	CVZN = cond(v165)
	a7 = a7 - 4
	v166 = a1
	Mem0[a7:word32] = v166
	CVZN = cond(v166)
	a7 = a7 - 4
	Mem0[a7:word32] = d1
	a7 = a7 - 4
	Mem0[a7:word32] = d0
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	call fn000027B0 (retsize: 4;)
	a7 = a7 + 16
	v167 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v167
	d4 = d0
	CVZN = cond(d4)
	d5 = d1
	CVZN = cond(d5)
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = d5
	CVZN = cond(d2)
	v168 = Mem0[a1 + d2:byte]
	a3 = a3 - 1
	v169 = v168
	Mem0[a3:byte] = v169
	CVZN = cond(v169)
	a7 = a7 - 4
	v170 = d0
	Mem0[a7:word32] = v170
	CVZN = cond(v170)
	a7 = a7 - 4
	v171 = d1
	Mem0[a7:word32] = v171
	CVZN = cond(v171)
	a7 = a7 - 4
	v172 = a1
	Mem0[a7:word32] = v172
	CVZN = cond(v172)
	a7 = a7 - 4
	Mem0[a7:word32] = d1
	a7 = a7 - 4
	Mem0[a7:word32] = d0
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	call fn00002560 (retsize: 4;)
	a7 = a7 + 16
	v173 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v173
	d6 = d0
	CVZN = cond(d6)
	d7 = d1
	CVZN = cond(d7)
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d0 = d7
	CVZN = cond(d0)
	d1 = d6
	CVZN = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	branch Test(NE,Z) l00001B50
	// succ:  l00001BBE l00001B50
l00001BBE:
	v174 = d3
	Mem0[a7 + 102:word32] = v174
	CVZN = cond(v174)
	d7 = Mem0[a7 + 98:word32]
	CVZN = cond(d7)
	d6 = Mem0[a7 + 48:word32]
	CVZN = cond(d6)
	d5 = Mem0[a7 + 68:word32]
	CVZN = cond(d5)
	d3 = Mem0[a7 + 124:word32]
	CVZN = cond(d3)
	v175 = d5 - 0xFFFFFFFF
	CVZN = cond(v175)
	branch Test(NE,Z) l00001BE0
	// succ:  l00001BDA l00001BE0
l00001BDA:
	d5 = 0
	CVZN = cond(d5)
	goto l00001D2C
	// succ:  l00001D2C
l00001BE0:
	v179 = Mem0[a7 + 72:word32] & 0xFFFFFFFD
	Mem0[a7 + 72:word32] = v179
	ZN = cond(v179)
	C = false
	V = false
	goto l00001D2C
	// succ:  l00001D2C
l00001BEC:
	v275 = d4 - 0x0000006C
	CVZN = cond(v275)
	branch Test(NE,Z) l00001C08
	// succ:  l00001BF4 l00001C08
l00001BF4:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v276 = Mem0[a0 + -1:byte]
	Mem0[a3:byte] = v276
	CVZN = cond(v276)
	goto l00001C1A
	// succ:  l00001C1A
l00001C08:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v277 = Mem0[a0 + -1:byte]
	Mem0[a3:byte] = v277
	CVZN = cond(v277)
	// succ:  l00001C1A
l00001C1A:
	v278 = 0x00000001
	Mem0[a7 + 102:word32] = v278
	CVZN = cond(v278)
	d5 = 0
	CVZN = cond(d5)
	goto l00001D2C
	// succ:  l00001D2C
l00001C28:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a3 = Mem0[a0 + -4:word32]
	a1 = a3
	Mem0[a7 + 102:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001C4A
	// succ:  l00001C44 l00001C4A
l00001C44:
	v110 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v110)
	branch Test(ULE,VZ) l00001C66
	// succ:  l00001C4A l00001C66
l00001C4A:
	ZN = cond(Mem0[a1:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001C66
	// succ:  l00001C4E l00001C66
l00001C4E:
	d0 = Mem0[a7 + 102:word32]
	CVZN = cond(d0)
	// succ:  l00001C52
l00001C52:
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	a1 = a1 + 1
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(ULE,VZ) l00001C5E
	// succ:  l00001C5A l00001C5E
l00001C5A:
	v111 = d5 - d0
	CVZN = cond(v111)
	branch Test(ULE,VZ) l00001C62
	// succ:  l00001C5E l00001C62
l00001C5E:
	ZN = cond(Mem0[a1:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001C52
	// succ:  l00001C62 l00001C52
l00001C62:
	v112 = d0
	Mem0[a7 + 102:word32] = v112
	CVZN = cond(v112)
	// succ:  l00001C66
l00001C66:
	d5 = 0
	CVZN = cond(d5)
	goto l00001D2C
	// succ:  l00001D2C
l00001C6C:
	a3 = 0x00001F14
	v279 = 0x00000001
	Mem0[a7 + 102:word32] = v279
	CVZN = cond(v279)
	d5 = 0
	CVZN = cond(d5)
	goto l00001D2C
	// succ:  l00001D2C
l00001C7E:
	v239 = d4 - 0x00000001
	CVZN = cond(v239)
	branch Test(NE,Z) l00001CA0
	// succ:  l00001C86 l00001CA0
l00001C86:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v240 = d6
	Mem0[a0 + 4:word32] = v240
	CVZN = cond(v240)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001D0E
	// succ:  l00001D0E
l00001CA0:
	v250 = d4 - 0x0000006C
	CVZN = cond(v250)
	branch Test(NE,Z) l00001CBE
	// succ:  l00001CA8 l00001CBE
l00001CA8:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v251 = d6
	Mem0[a0:word32] = v251
	CVZN = cond(v251)
	goto l00001D0E
	// succ:  l00001D0E
l00001CBE:
	v260 = d4 - 0x00000068
	CVZN = cond(v260)
	branch Test(NE,Z) l00001CDC
	// succ:  l00001CC6 l00001CDC
l00001CC6:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v261 = (word16) d6
	Mem0[a0:word16] = v261
	CVZN = cond(v261)
	goto l00001D0E
	// succ:  l00001D0E
l00001CDC:
	v272 = d4 - 0x00000002
	CVZN = cond(v272)
	branch Test(NE,Z) l00001CFA
	// succ:  l00001CE4 l00001CFA
l00001CE4:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v273 = (byte) d6
	Mem0[a0:byte] = v273
	CVZN = cond(v273)
	goto l00001D0E
	// succ:  l00001D0E
l00001CFA:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v274 = d6
	Mem0[a0:word32] = v274
	CVZN = cond(v274)
	// succ:  l00001D0E
l00001D0E:
	d5 = 0
	CVZN = cond(d5)
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001D2C
	// succ:  l00001D2C
l00001D16:
	ZN = cond((byte) d1 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001D1C
	// succ:  l00001D1A l00001D1C
l00001D1A:
	a2 = a2 - 1
	// succ:  l00001D1C
l00001D1C:
	a3 = a4
	d0 = a2
	CVZN = cond(d0)
	d0 = d0 - a4
	CVZNX = cond(d0)
	v126 = d0
	Mem0[a7 + 102:word32] = v126
	CVZN = cond(v126)
	d5 = 0
	CVZN = cond(d5)
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00001D2C
l00001D2C:
	v128 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v128)
	branch Test(UGT,CZ) l00001D3A
	// succ:  l00001D32 l00001D3A
l00001D32:
	v129 = Mem0[a7 + 102:word32]
	Mem0[a7 + 44:word32] = v129
	CVZN = cond(v129)
	goto l00001D3E
	// succ:  l00001D3E
l00001D3A:
	v140 = d5
	Mem0[a7 + 44:word32] = v140
	CVZN = cond(v140)
	// succ:  l00001D3E
l00001D3E:
	a7 = a7 - 4
	v134 = d0
	Mem0[a7:word32] = v134
	CVZN = cond(v134)
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	d0 = d0 + d7
	CVZNX = cond(d0)
	v135 = d0
	Mem0[a7 + 52:word32] = v135
	CVZN = cond(v135)
	v136 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v136
	CVZN = cond(d0)
	a7 = a7 - 4
	v137 = d0
	Mem0[a7:word32] = v137
	CVZN = cond(v137)
	d0 = Mem0[a7 + 52:word32]
	CVZN = cond(d0)
	v138 = d0 - Mem0[a7 + 68:word32]
	CVZN = cond(v138)
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(ULT,C) l00001D62
	// succ:  l00001D5C l00001D62
l00001D5C:
	Mem0[a7 + 44:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001D72
	// succ:  l00001D72
l00001D62:
	a7 = a7 - 4
	v152 = d0
	Mem0[a7:word32] = v152
	CVZN = cond(v152)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d0 = d0 - Mem0[a7 + 52:word32]
	CVZNX = cond(d0)
	v153 = d0
	Mem0[a7 + 48:word32] = v153
	CVZN = cond(v153)
	v154 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v154
	CVZN = cond(d0)
	// succ:  l00001D72
l00001D72:
	v147 = Mem0[a7 + 44:word32]
	Mem0[a7 + 48:word32] = v147
	CVZN = cond(v147)
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001DB4
	// succ:  l00001D80 l00001DB4
l00001D80:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001DB4
	// succ:  l00001D86 l00001DB4
l00001D86:
	a7 = a7 - 4
	v148 = a5
	Mem0[a7:word32] = v148
	CVZN = cond(v148)
	a0 = a7 + 110
	a0 = a0 + d2
	v149 = Mem0[a0:byte]
	d0 = DPB(d0, v149, 0)
	CVZN = cond(v149)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v150 = d0
	Mem0[a7:word32] = v150
	CVZN = cond(v150)
	call fn00001F40 (retsize: 4;)
	a7 = a7 + 8
	v151 = d0 - 0xFFFFFFFF
	CVZN = cond(v151)
	branch Test(NE,Z) l00001DAC
	// succ:  l00001DA6 l00001DAC
l00001DA6:
	d0 = d6
	CVZN = cond(d0)
	goto l00001F08
	// succ:  l00001F08
l00001DAC:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v177 = d7 - d2
	CVZN = cond(v177)
	branch Test(UGT,CZ) l00001D86
	// succ:  l00001DB4 l00001D86
l00001DB4:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001E06
	// succ:  l00001DBC l00001E06
l00001DBC:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001E06
	// succ:  l00001DC4 l00001E06
l00001DC4:
	d4 = Mem0[a7 + 72:word32]
	CVZN = cond(d4)
	a4 = Mem0[a7 + 48:word32]
	// succ:  l00001DCC
l00001DCC:
	a7 = a7 - 4
	v178 = a5
	Mem0[a7:word32] = v178
	CVZN = cond(v178)
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & d4
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001DDA
	// succ:  l00001DD4 l00001DDA
l00001DD4:
	a0 = DPB(a0, 0x0030, 0)
	goto l00001DDE
	// succ:  l00001DDE
l00001DDA:
	a0 = DPB(a0, 0x0020, 0)
	// succ:  l00001DDE
l00001DDE:
	a7 = a7 - 4
	v180 = a0
	Mem0[a7:word32] = v180
	CVZN = cond(v180)
	call fn00001F40 (retsize: 4;)
	a7 = a7 + 8
	v181 = d0 - 0xFFFFFFFF
	CVZN = cond(v181)
	branch Test(NE,Z) l00001DF6
	// succ:  l00001DF0 l00001DF6
l00001DF0:
	d0 = d6
	CVZN = cond(d0)
	goto l00001F08
	// succ:  l00001F08
l00001DF6:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v186 = a4 - d2
	CVZN = cond(v186)
	branch Test(UGT,CZ) l00001DCC
	// succ:  l00001DFE l00001DCC
l00001DFE:
	v187 = a4
	Mem0[a7 + 48:word32] = v187
	CVZN = cond(v187)
	v188 = d4
	Mem0[a7 + 72:word32] = v188
	CVZN = cond(v188)
	// succ:  l00001E06
l00001E06:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001E42
	// succ:  l00001E0E l00001E42
l00001E0E:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001E42
	// succ:  l00001E14 l00001E42
l00001E14:
	a7 = a7 - 4
	v182 = a5
	Mem0[a7:word32] = v182
	CVZN = cond(v182)
	a0 = a7 + 110
	a0 = a0 + d2
	v183 = Mem0[a0:byte]
	d0 = DPB(d0, v183, 0)
	CVZN = cond(v183)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v184 = d0
	Mem0[a7:word32] = v184
	CVZN = cond(v184)
	call fn00001F40 (retsize: 4;)
	a7 = a7 + 8
	v185 = d0 - 0xFFFFFFFF
	CVZN = cond(v185)
	branch Test(NE,Z) l00001E3A
	// succ:  l00001E34 l00001E3A
l00001E34:
	d0 = d6
	CVZN = cond(d0)
	goto l00001F08
	// succ:  l00001F08
l00001E3A:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v190 = d7 - d2
	CVZN = cond(v190)
	branch Test(UGT,CZ) l00001E14
	// succ:  l00001E42 l00001E14
l00001E42:
	d2 = Mem0[a7 + 102:word32]
	CVZN = cond(d2)
	v191 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v191)
	branch Test(ULE,VZ) l00001E70
	// succ:  l00001E4C l00001E70
l00001E4C:
	a7 = a7 - 4
	v192 = a5
	Mem0[a7:word32] = v192
	CVZN = cond(v192)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000030
	call fn00001F40 (retsize: 4;)
	a7 = a7 + 8
	v193 = d0 - 0xFFFFFFFF
	CVZN = cond(v193)
	branch Test(NE,Z) l00001E68
	// succ:  l00001E62 l00001E68
l00001E62:
	d0 = d6
	CVZN = cond(d0)
	goto l00001F08
	// succ:  l00001F08
l00001E68:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v194 = d5 - d2
	CVZN = cond(v194)
	branch Test(UGT,CZ) l00001E4C
	// succ:  l00001E70 l00001E4C
l00001E70:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 102:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001EA6
	// succ:  l00001E78 l00001EA6
l00001E78:
	a4 = Mem0[a7 + 102:word32]
	// succ:  l00001E7C
l00001E7C:
	a7 = a7 - 4
	v195 = a5
	Mem0[a7:word32] = v195
	CVZN = cond(v195)
	a0 = a3 + d2
	v196 = Mem0[a0:byte]
	d0 = DPB(d0, v196, 0)
	CVZN = cond(v196)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v197 = d0
	Mem0[a7:word32] = v197
	CVZN = cond(v197)
	call fn00001F40 (retsize: 4;)
	a7 = a7 + 8
	v198 = d0 - 0xFFFFFFFF
	CVZN = cond(v198)
	branch Test(NE,Z) l00001E9E
	// succ:  l00001E9A l00001E9E
l00001E9A:
	d0 = d6
	CVZN = cond(d0)
	goto l00001F08
	// succ:  l00001F08
l00001E9E:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v199 = a4 - d2
	CVZN = cond(v199)
	branch Test(UGT,CZ) l00001E7C
	// succ:  l00001EA6 l00001E7C
l00001EA6:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001EDC
	// succ:  l00001EAE l00001EDC
l00001EAE:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001EDC
	// succ:  l00001EB6 l00001EDC
l00001EB6:
	a3 = Mem0[a7 + 48:word32]
	// succ:  l00001EBA
l00001EBA:
	a7 = a7 - 4
	v200 = a5
	Mem0[a7:word32] = v200
	CVZN = cond(v200)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000020
	call fn00001F40 (retsize: 4;)
	a7 = a7 + 8
	v201 = d0 - 0xFFFFFFFF
	CVZN = cond(v201)
	branch Test(NE,Z) l00001ED4
	// succ:  l00001ED0 l00001ED4
l00001ED0:
	d0 = d6
	CVZN = cond(d0)
	goto l00001F08
	// succ:  l00001F08
l00001ED4:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v203 = a3 - d2
	CVZN = cond(v203)
	branch Test(UGT,CZ) l00001EBA
	// succ:  l00001EDC l00001EBA
l00001EDC:
	a4 = a2
	goto l00001F00
	// succ:  l00001F00
l00001EE0:
	a7 = a7 - 4
	v79 = a5
	Mem0[a7:word32] = v79
	CVZN = cond(v79)
	v80 = Mem0[a4:byte]
	a4 = a4 + 1
	d0 = DPB(d0, v80, 0)
	CVZN = cond(v80)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v81 = d0
	Mem0[a7:word32] = v81
	CVZN = cond(v81)
	call fn00001F40 (retsize: 4;)
	a7 = a7 + 8
	v82 = d0 - 0xFFFFFFFF
	CVZN = cond(v82)
	branch Test(NE,Z) l00001EFE
	// succ:  l00001EFA l00001EFE
l00001EFA:
	d0 = d6
	CVZN = cond(d0)
	goto l00001F08
	// succ:  l00001F08
l00001EFE:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	// succ:  l00001F00
l00001F00:
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000015DC
	// succ:  l00001F06 l000015DC
l00001F06:
	d0 = d6
	CVZN = cond(d0)
	// succ:  l00001F08
l00001F08:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a7 + 68
	return
	// succ:  fn000015C0_exit
fn000015C0_exit:


// fn00001F40
// Return size: 4
define fn00001F40
fn00001F40_entry:
	// succ:  l00001F40
l00001F40:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 16:word32]
	CVZN = cond(d2)
	a2 = Mem0[a7 + 20:word32]
	a0 = a2 + 24
	d0 = 2
	CVZN = cond(d0)
	v9 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	a0 = a2 + 20
	v13 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v13
	CVZNX = cond(v13)
	branch Test(LT,CZ) l00001F84
	// succ:  l00001F5C l00001F84
l00001F5C:
	d0 = 10
	CVZN = cond(d0)
	v16 = d0 - d2
	CVZN = cond(v16)
	branch Test(NE,Z) l00001F6E
	// succ:  l00001F62 l00001F6E
l00001F62:
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001F84
	// succ:  l00001F6E l00001F84
l00001F6E:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a3 = a0
	a3 = a3 + 1
	v19 = a3
	Mem0[a1:word32] = v19
	CVZN = cond(v19)
	v20 = (byte) d2
	Mem0[a0:byte] = v20
	CVZN = cond(v20)
	v21 = Mem0[a0:byte]
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	d1 = 0
	CVZN = cond(d1)
	v23 = (byte) d0
	d1 = DPB(d1, v23, 0)
	CVZN = cond(v23)
	goto l00001F92
	// succ:  l00001F92
l00001F84:
	a7 = a7 - 4
	v24 = a2
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	a7 = a7 - 4
	v25 = d2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00001F9C (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 8
	// succ:  l00001F92
l00001F92:
	d0 = d1
	CVZN = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00001F40_exit
fn00001F40_exit:


// fn00001F9C
// Return size: 4
define fn00001F9C
fn00001F9C_entry:
	// succ:  l00001F9C
l00001F9C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d5 = Mem0[a7 + 40:word32]
	CVZN = cond(d5)
	a2 = Mem0[a7 + 44:word32]
	call fn00002530 (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00001FB8
	// succ:  l00001FB2 l00001FB8
l00001FB2:
	d0 = -1
	CVZN = cond(d0)
	goto l000020AA
	// succ:  l000020AA
l00001FB8:
	d0 = 73
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	d6 = 64
	CVZN = cond(d6)
	v18 = d6 - d0
	CVZN = cond(v18)
	branch Test(EQ,Z) l00001FCA
	// succ:  l00001FC4 l00001FCA
l00001FC4:
	d0 = -1
	CVZN = cond(d0)
	goto l000020AA
	// succ:  l000020AA
l00001FCA:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001FE8
	// succ:  l00001FD0 l00001FE8
l00001FD0:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001FE0
	// succ:  l00001FD8 l00001FE0
l00001FD8:
	d0 = 1
	CVZN = cond(d0)
	v19 = d0
	Mem0[a2 + 28:word32] = v19
	CVZN = cond(v19)
	goto l00001FE8
	// succ:  l00001FE8
l00001FE0:
	v36 = 0x00000400
	Mem0[a2 + 28:word32] = v36
	CVZN = cond(v36)
	// succ:  l00001FE8
l00001FE8:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002028
	// succ:  l00001FEE l00002028
l00001FEE:
	a1 = a2 + 28
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002002
	// succ:  l00001FFE l00002002
l00001FFE:
	d4 = 2
	CVZN = cond(d4)
	goto l00002004
	// succ:  l00002004
l00002002:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00002004
l00002004:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + Mem0[a1:word32]
	CVZNX = cond(d0)
	a7 = a7 - 4
	v27 = d0
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	call fn0000215C (retsize: 4;)
	a3 = d0
	a7 = a7 + 4
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l0000201E
	// succ:  l00002018 l0000201E
l00002018:
	d0 = -1
	CVZN = cond(d0)
	goto l000020AA
	// succ:  l000020AA
l0000201E:
	a1 = a3 + 1
	v31 = a1
	Mem0[a2 + 8:word32] = v31
	CVZN = cond(v31)
	goto l00002086
	// succ:  l00002086
l00002028:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002082
	// succ:  l0000202C l00002082
l0000202C:
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002058
	// succ:  l00002038 l00002058
l00002038:
	d0 = 10
	CVZN = cond(d0)
	v21 = d0 - d5
	CVZN = cond(v21)
	branch Test(NE,Z) l00002058
	// succ:  l0000203E l00002058
l0000203E:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a4 = a0
	a4 = a4 + 1
	v23 = a4
	Mem0[a1:word32] = v23
	CVZN = cond(v23)
	v24 = (byte) d5
	Mem0[a0:byte] = v24
	CVZN = cond(v24)
	a7 = a7 - 4
	v25 = a2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn000020B0 (retsize: 4;)
	a7 = a7 + 4
	goto l000020AA
	// succ:  l000020AA
l00002058:
	a0 = a2 + 8
	d4 = Mem0[a2 + 4:word32]
	CVZN = cond(d4)
	d4 = d4 - Mem0[a0:word32]
	CVZNX = cond(d4)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E28:word32]
	d3 = d4
	CVZN = cond(d3)
	execPrivate3()
	v29 = d4 - d0
	CVZN = cond(v29)
	branch Test(EQ,Z) l00002086
	// succ:  l00002076 l00002086
l00002076:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v30 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l000020AA
	// succ:  l000020AA
l00002082:
	d0 = 0
	CVZN = cond(d0)
	goto l000020AA
	// succ:  l000020AA
l00002086:
	a0 = a2 + 24
	d0 = 2
	CVZN = cond(d0)
	v32 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	a1 = a2 + 8
	a0 = Mem0[a1:word32]
	v33 = (byte) d5
	Mem0[a0:byte] = v33
	CVZN = cond(v33)
	a1 = Mem0[a1:word32]
	a1 = a1 + 1
	v34 = a1
	Mem0[a2 + 4:word32] = v34
	CVZN = cond(v34)
	d0 = Mem0[a2 + 28:word32]
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	v35 = d0
	Mem0[a2 + 20:word32] = v35
	CVZN = cond(v35)
	d0 = 0
	CVZN = cond(d0)
	// succ:  l000020AA
l000020AA:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00001F9C_exit
fn00001F9C_exit:


// fn000020B0
// Return size: 4
define fn000020B0
fn000020B0_entry:
	// succ:  l000020B0
l000020B0:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a2 = Mem0[a7 + 24:word32]
	call fn00002530 (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l000020C6
	// succ:  l000020C2 l000020C6
l000020C2:
	d0 = -1
	CVZN = cond(d0)
	goto l0000213E
	// succ:  l0000213E
l000020C6:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000020E4
	// succ:  l000020CC l000020E4
l000020CC:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000020DC
	// succ:  l000020D4 l000020DC
l000020D4:
	d0 = 1
	CVZN = cond(d0)
	v14 = d0
	Mem0[a2 + 28:word32] = v14
	CVZN = cond(v14)
	goto l000020E4
	// succ:  l000020E4
l000020DC:
	v15 = 0x00000400
	Mem0[a2 + 28:word32] = v15
	CVZN = cond(v15)
	// succ:  l000020E4
l000020E4:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000020EE
	// succ:  l000020EA l000020EE
l000020EA:
	d0 = 0
	CVZN = cond(d0)
	goto l0000213E
	// succ:  l0000213E
l000020EE:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002134
	// succ:  l000020F6 l00002134
l000020F6:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002124
	// succ:  l000020FA l00002124
l000020FA:
	a0 = a2 + 8
	d4 = Mem0[a2 + 4:word32]
	CVZN = cond(d4)
	d4 = d4 - Mem0[a0:word32]
	CVZNX = cond(d4)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E28:word32]
	d3 = d4
	CVZN = cond(d3)
	execPrivate3()
	v19 = d4 - d0
	CVZN = cond(v19)
	branch Test(EQ,Z) l00002128
	// succ:  l00002118 l00002128
l00002118:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v20 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l0000213E
	// succ:  l0000213E
l00002124:
	d0 = 0
	CVZN = cond(d0)
	goto l0000213E
	// succ:  l0000213E
l00002128:
	v22 = Mem0[a2 + 8:word32]
	Mem0[a2 + 4:word32] = v22
	CVZN = cond(v22)
	v23 = Mem0[a2 + 28:word32]
	Mem0[a2 + 20:word32] = v23
	CVZN = cond(v23)
	// succ:  l00002134
l00002134:
	a0 = a2 + 24
	d0 = -4
	CVZN = cond(d0)
	v21 = Mem0[a0:word32] & d0
	Mem0[a0:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000213E
l0000213E:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn000020B0_exit
fn000020B0_exit:


// fn0000215C
// Return size: 4
define fn0000215C
fn0000215C_entry:
	// succ:  l0000215C
l0000215C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 8:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l0000216A
	// succ:  l00002166 l0000216A
l00002166:
	d0 = 0
	CVZN = cond(d0)
	goto l000021C0
	// succ:  l000021C0
l0000216A:
	ZN = cond(Mem0[0x00003E58:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000218E
	// succ:  l00002172 l0000218E
l00002172:
	a0 = Mem0[0x00003E54:word32]
	a7 = a7 - 4
	v11 = a0
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	a7 = a7 - 4
	v12 = a0
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	a7 = a7 - 4
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn00002450 (retsize: 4;)
	v14 = d0
	Mem0[0x00003E58:word32] = v14
	CVZN = cond(v14)
	a7 = a7 + 12
	// succ:  l0000218E
l0000218E:
	ZN = cond(Mem0[0x00003E58:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000219A
	// succ:  l00002196 l0000219A
l00002196:
	d0 = 0
	CVZN = cond(d0)
	goto l000021C0
	// succ:  l000021C0
l0000219A:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 + d2
	CVZNX = cond(d0)
	a7 = a7 - 4
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	v17 = Mem0[0x00003E58:word32]
	a7 = a7 - 4
	v18 = v17
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn0000232C (retsize: 4;)
	a1 = d0
	a7 = a7 + 8
	d0 = a1
	CVZN = cond(d0)
	branch Test(NE,Z) l000021B8
	// succ:  l000021B4 l000021B8
l000021B4:
	d0 = 0
	CVZN = cond(d0)
	goto l000021C0
	// succ:  l000021C0
l000021B8:
	v20 = d2
	Mem0[a1:word32] = v20
	CVZN = cond(v20)
	a0 = a1 + 4
	d0 = a0
	CVZN = cond(d0)
	// succ:  l000021C0
l000021C0:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn0000215C_exit
fn0000215C_exit:


// fn000021C8
// Return size: 4
define fn000021C8
fn000021C8_entry:
	// succ:  l000021C8
l000021C8:
	a7 = fp
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	a0 = d0
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000021F2
	// succ:  l000021D2 l000021F2
l000021D2:
	ZN = cond(Mem0[0x00003E58:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000021F2
	// succ:  l000021DA l000021F2
l000021DA:
	d0 = 4
	CVZN = cond(d0)
	a0 = a0 - 4
	d0 = d0 + Mem0[a0:word32]
	CVZNX = cond(d0)
	a7 = a7 - 4
	v11 = d0
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	a7 = a7 - 4
	v12 = a0
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	v13 = Mem0[0x00003E58:word32]
	a7 = a7 - 4
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn00002290 (retsize: 4;)
	a7 = a7 + 12
	// succ:  l000021F2
l000021F2:
	return
	// succ:  fn000021C8_exit
fn000021C8_exit:


// fn00002290
// Return size: 4
define fn00002290
fn00002290_entry:
	// succ:  l00002290
l00002290:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 32:word32]
	CVZN = cond(d1)
	a5 = Mem0[a7 + 36:word32]
	a4 = Mem0[a7 + 28:word32]
	a0 = Mem0[0x00003E24:word32]
	v12 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v12)
	branch Test(ULT,C) l000022C0
	// succ:  l000022AE l000022C0
l000022AE:
	a6 = Mem0[0x00003E24:word32]
	a0 = a4
	a1 = d1
	d0 = a5
	CVZN = cond(d0)
	FreePooled(a1, a0)
	goto l00002324
	// succ:  l00002324
l000022C0:
	d2 = a4
	CVZN = cond(d2)
	branch Test(EQ,Z) l00002324
	// succ:  l000022C4 l00002324
l000022C4:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002324
	// succ:  l000022C8 l00002324
l000022C8:
	a3 = d1
	a3 = a3 + -12
	v19 = a5 - Mem0[a4 + 20:word32]
	CVZN = cond(v19)
	branch Test(UGE,C) l0000230A
	// succ:  l000022D4 l0000230A
l000022D4:
	a2 = a4
	// succ:  l000022D6
l000022D6:
	a2 = Mem0[a2:word32]
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002324
	// succ:  l000022DC l00002324
l000022DC:
	ZN = cond(Mem0[a2 + 8:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000022D6
	// succ:  l000022E2 l000022D6
l000022E2:
	v20 = d1 - Mem0[a2 + 20:word32]
	CVZN = cond(v20)
	branch Test(ULT,C) l000022D6
	// succ:  l000022E8 l000022D6
l000022E8:
	v21 = d1 - Mem0[a2 + 24:word32]
	CVZN = cond(v21)
	branch Test(UGE,C) l000022D6
	// succ:  l000022EE l000022D6
l000022EE:
	a6 = Mem0[0x00003E24:word32]
	a0 = a2
	a1 = d1
	d0 = a5
	CVZN = cond(d0)
	Deallocate(a0, a1, d0)
	d0 = Mem0[a2 + 28:word32]
	CVZN = cond(d0)
	v22 = d0 - Mem0[a4 + 16:word32]
	CVZN = cond(v22)
	branch Test(NE,Z) l00002324
	// succ:  l00002308 l00002324
l00002308:
	a3 = a2
	// succ:  l0000230A
l0000230A:
	a6 = Mem0[0x00003E24:word32]
	a1 = a3
	Remove(a1)
	a3 = a3 - 4
	d0 = Mem0[a3:word32]
	CVZN = cond(d0)
	a6 = Mem0[0x00003E24:word32]
	a1 = a3
	FreeMem(a1, d0)
	// succ:  l00002324
l00002324:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002290_exit
fn00002290_exit:


// fn0000232C
// Return size: 4
define fn0000232C
fn0000232C_entry:
	// succ:  l0000232C
l0000232C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 40:word32]
	CVZN = cond(d2)
	a4 = Mem0[a7 + 36:word32]
	a0 = Mem0[0x00003E24:word32]
	v13 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v13)
	branch Test(ULT,C) l00002358
	// succ:  l00002346 l00002358
l00002346:
	a6 = Mem0[0x00003E24:word32]
	a0 = a4
	d0 = d2
	CVZN = cond(d0)
	d0 = AllocPooled(d0, a0)
	goto l0000244A
	// succ:  l0000244A
l00002358:
	a3 = a3 - a3
	CVZNX = cond(a3)
	d4 = a4
	CVZN = cond(d4)
	branch Test(EQ,Z) l00002448
	// succ:  l00002360 l00002448
l00002360:
	ZN = cond(d2 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002448
	// succ:  l00002366 l00002448
l00002366:
	v20 = d2 - Mem0[a4 + 20:word32]
	CVZN = cond(v20)
	branch Test(UGE,C) l0000241A
	// succ:  l0000236E l0000241A
l0000236E:
	a5 = Mem0[a4:word32]
	// succ:  l00002370
l00002370:
	ZN = cond(Mem0[a5:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002392
	// succ:  l00002374 l00002392
l00002374:
	ZN = cond(Mem0[a5 + 8:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000238E
	// succ:  l0000237A l0000238E
l0000237A:
	a6 = Mem0[0x00003E24:word32]
	a0 = a5
	d0 = d2
	CVZN = cond(d0)
	d0 = Allocate(a0, d0)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l000023FE
	// succ:  l0000238E l000023FE
l0000238E:
	a5 = Mem0[a5:word32]
	goto l00002370
	// succ:  l00002370
l00002392:
	d3 = 40
	CVZN = cond(d3)
	d3 = d3 + Mem0[a4 + 16:word32]
	CVZNX = cond(d3)
	d1 = Mem0[a4 + 12:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E24:word32]
	d0 = d3
	CVZN = cond(d0)
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002448
	// succ:  l000023B0 l00002448
l000023B0:
	v22 = d3
	Mem0[a3:word32] = v22
	a3 = a3 + 4
	CVZN = cond(v22)
	v23 = 0x0A
	Mem0[a3 + 8:byte] = v23
	CVZN = cond(v23)
	a2 = a3 + 36
	a0 = a3 + 16
	v24 = a2
	Mem0[a0:word32] = v24
	CVZN = cond(v24)
	v25 = a2
	Mem0[a3 + 20:word32] = v25
	CVZN = cond(v25)
	a1 = Mem0[a0:word32]
	Mem0[a1:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a2 = Mem0[a0:word32]
	a2 = a2 + 4
	v29 = Mem0[a4 + 16:word32]
	Mem0[a2:word32] = v29
	CVZN = cond(v29)
	a1 = a3 + 28
	v30 = Mem0[a2:word32]
	Mem0[a1:word32] = v30
	CVZN = cond(v30)
	a1 = Mem0[a1:word32]
	a1 = a1 + Mem0[a0:word32]
	v31 = a1
	Mem0[a3 + 24:word32] = v31
	CVZN = cond(v31)
	a6 = Mem0[0x00003E24:word32]
	a0 = a4
	a1 = a3
	AddHead(a0, a1)
	a6 = Mem0[0x00003E24:word32]
	a0 = a3
	d0 = d2
	CVZN = cond(d0)
	d0 = Allocate(a0, d0)
	a3 = d0
	// succ:  l000023FE
l000023FE:
	d0 = 0x00010000
	CVZN = cond(d0)
	d0 = d0 & Mem0[a4 + 12:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002448
	// succ:  l0000240A l00002448
l0000240A:
	a2 = a3
	d2 = d2 + 0x00000007
	CVZNX = cond(d2)
	d2 = d2 >>u 0x00000003
	CVZNX = cond(d2)
	// succ:  l00002410
l00002410:
	Mem0[a2:word32] = 0x00000000
	a2 = a2 + 4
	Z = true
	C = false
	N = false
	V = false
	Mem0[a2:word32] = 0x00000000
	a2 = a2 + 4
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(NE,Z) l00002410
	// succ:  l00002418 l00002410
l00002418:
	goto l00002448
	// succ:  l00002448
l0000241A:
	d3 = 16
	CVZN = cond(d3)
	d3 = d3 + d2
	CVZNX = cond(d3)
	d1 = Mem0[a4 + 12:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E24:word32]
	d0 = d3
	CVZN = cond(d0)
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002448
	// succ:  l00002434 l00002448
l00002434:
	v32 = d3
	Mem0[a3:word32] = v32
	a3 = a3 + 4
	CVZN = cond(v32)
	a6 = Mem0[0x00003E24:word32]
	a0 = a4
	a1 = a3
	AddTail(a0, a1)
	a3 = a3 + 8
	Mem0[a3:word32] = 0x00000000
	a3 = a3 + 4
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00002448
l00002448:
	d0 = a3
	CVZN = cond(d0)
	// succ:  l0000244A
l0000244A:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn0000232C_exit
fn0000232C_exit:


// fn00002450
// Return size: 4
define fn00002450
fn00002450_entry:
	// succ:  l00002450
l00002450:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d3 = Mem0[a7 + 24:word32]
	CVZN = cond(d3)
	a2 = Mem0[a7 + 28:word32]
	a0 = Mem0[0x00003E24:word32]
	v9 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v9)
	branch Test(ULT,C) l0000247E
	// succ:  l0000246A l0000247E
l0000246A:
	a6 = Mem0[0x00003E24:word32]
	d0 = Mem0[a7 + 20:word32]
	CVZN = cond(d0)
	d1 = d3
	CVZN = cond(d1)
	d2 = a2
	CVZN = cond(d2)
	d0 = CreatePrivatePool(d0, d1, d2)
	goto l000024BA
	// succ:  l000024BA
l0000247E:
	a1 = a1 - a1
	CVZNX = cond(a1)
	v15 = d3 - a2
	CVZN = cond(v15)
	branch Test(ULT,C) l000024B8
	// succ:  l00002484 l000024B8
l00002484:
	d3 = d3 + 0x00000007
	CVZNX = cond(d3)
	a6 = Mem0[0x00003E24:word32]
	d0 = 24
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	a1 = d0
	d0 = a1
	CVZN = cond(d0)
	branch Test(EQ,Z) l000024B8
	// succ:  l0000249A l000024B8
l0000249A:
	a0 = a1 + 4
	v17 = a0
	Mem0[a1:word32] = v17
	CVZN = cond(v17)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v21 = a1
	Mem0[a1 + 8:word32] = v21
	CVZN = cond(v21)
	v22 = Mem0[a7 + 20:word32]
	Mem0[a1 + 12:word32] = v22
	CVZN = cond(v22)
	d0 = -8
	CVZN = cond(d0)
	d0 = d0 & d3
	ZN = cond(d0)
	C = false
	V = false
	v24 = d0
	Mem0[a1 + 16:word32] = v24
	CVZN = cond(v24)
	v25 = a2
	Mem0[a1 + 20:word32] = v25
	CVZN = cond(v25)
	// succ:  l000024B8
l000024B8:
	d0 = a1
	CVZN = cond(d0)
	// succ:  l000024BA
l000024BA:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002450_exit
fn00002450_exit:


// fn000024C0
// Return size: 4
define fn000024C0
fn000024C0_entry:
	// succ:  l000024C0
l000024C0:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 16:word32]
	CVZN = cond(d2)
	a0 = Mem0[0x00003E24:word32]
	v8 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v8)
	branch Test(ULT,C) l000024E4
	// succ:  l000024D6 l000024E4
l000024D6:
	a6 = Mem0[0x00003E24:word32]
	a0 = d2
	DeletePrivatePool(a0)
	goto l00002528
	// succ:  l00002528
l000024E4:
	ZN = cond(d2 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002528
	// succ:  l000024E8 l00002528
l000024E8:
	a6 = Mem0[0x00003E24:word32]
	a0 = d2
	RemHead(a0)
	a2 = d0
	d1 = a2
	CVZN = cond(d1)
	branch Test(EQ,Z) l0000251A
	// succ:  l000024FA l0000251A
l000024FA:
	a2 = a2 - 4
	d0 = Mem0[a2:word32]
	CVZN = cond(d0)
	a6 = Mem0[0x00003E24:word32]
	a1 = a2
	FreeMem(a1, d0)
	a6 = Mem0[0x00003E24:word32]
	a0 = d2
	RemHead(a0)
	a2 = d0
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l000024FA
	// succ:  l0000251A l000024FA
l0000251A:
	a6 = Mem0[0x00003E24:word32]
	a1 = d2
	d0 = 24
	CVZN = cond(d0)
	FreeMem(a1, d0)
	// succ:  l00002528
l00002528:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn000024C0_exit
fn000024C0_exit:


// fn00002530
// Return size: 4
define fn00002530
fn00002530_entry:
	// succ:  l00002530
l00002530:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a6 = Mem0[0x00003E24:word32]
	d0 = 0
	CVZN = cond(d0)
	d1 = 0x00001000
	CVZN = cond(d1)
	SetSignal(d0, d1)
	d0 = d0 & 0x00001000
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000255A
	// succ:  l0000254E l0000255A
l0000254E:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000014
	call fn0000131C (retsize: 4;)
	a7 = a7 + 4
	// succ:  l0000255A
l0000255A:
	v11 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = v11
	return
	// succ:  fn00002530_exit
fn00002530_exit:


// fn00002560
// Return size: 4
define fn00002560
fn00002560_entry:
	// succ:  l00002560
l00002560:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 28:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 24:word32]
	CVZN = cond(d0)
	a0 = d1
	d3 = Mem0[a7 + 36:word32]
	CVZN = cond(d3)
	d2 = Mem0[a7 + 32:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l000025B6
	// succ:  l00002578 l000025B6
l00002578:
	v13 = d0 - d3
	CVZN = cond(v13)
	branch Test(UGE,C) l0000258A
	// succ:  l0000257C l0000258A
l0000257C:
	d2 = d3
	CVZN = cond(d2)
	call fn00002664 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	goto l0000265C
	// succ:  l0000265C
l0000258A:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002596
	// succ:  l0000258E l00002596
l0000258E:
	d4 = 1
	CVZN = cond(d4)
	v20 = (uint16) (d4 % (uint16) d3)
	v21 = (uint16) (d4 /u (uint16) d3)
	d4 = DPB(d4, v20, 16)
	d4 = DPB(d4, v21, 0)
	VZN = cond(v21)
	C = false
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	d3 = d4
	CVZN = cond(d3)
	// succ:  l00002596
l00002596:
	d1 = d0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	d2 = d3
	CVZN = cond(d2)
	call fn00002664 (retsize: 4;)
	a1 = d0
	d0 = d1
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	call fn00002664 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	d0 = a1
	CVZN = cond(d0)
	goto l0000265E
	// succ:  l0000265E
l000025B6:
	v15 = d0 - d2
	CVZN = cond(v15)
	branch Test(UGE,C) l000025C0
	// succ:  l000025BA l000025C0
l000025BA:
	d0 = 0
	CVZN = cond(d0)
	goto l0000265C
	// succ:  l0000265C
l000025C0:
	d6 = d2
	CVZN = cond(d6)
	d4 = 24
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000025DE
	// succ:  l000025CA l000025DE
l000025CA:
	d4 = 16
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000025DE
	// succ:  l000025D2 l000025DE
l000025D2:
	d4 = 8
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000025DE
	// succ:  l000025DA l000025DE
l000025DA:
	d4 = 0
	CVZN = cond(d4)
	v19 = (byte) d2
	d6 = DPB(d6, v19, 0)
	CVZN = cond(v19)
	// succ:  l000025DE
l000025DE:
	a1 = 0x00003E5C
	v24 = (word16) d6 & 0x00FF
	d6 = DPB(d6, v24, 0)
	ZN = cond(v24)
	C = false
	V = false
	v25 = (byte) d4 + Mem0[a1 + (int32) ((int16) d6):byte]
	d4 = DPB(d4, v25, 0)
	CVZNX = cond(v25)
	d5 = 32
	CVZN = cond(d5)
	d5 = d5 - d4
	CVZNX = cond(d5)
	branch Test(NE,Z) l000025FE
	// succ:  l000025F2 l000025FE
l000025F2:
	v27 = d2 - d0
	CVZN = cond(v27)
	branch Test(ULT,C) l000025FA
	// succ:  l000025F6 l000025FA
l000025F6:
	v28 = d3 - a0
	CVZN = cond(v28)
	branch Test(UGT,CZ) l000025BA
	// succ:  l000025FA l000025BA
l000025FA:
	d0 = 1
	CVZN = cond(d0)
	goto l0000265C
	// succ:  l0000265C
l000025FE:
	d2 = d2 << d5
	CVZNX = cond(d2)
	d6 = d3
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d2 = d2 | d6
	ZN = cond(d2)
	C = false
	V = false
	d3 = d3 << d5
	CVZNX = cond(d3)
	d1 = d0
	CVZN = cond(d1)
	d0 = d0 >>u d4
	CVZNX = cond(d0)
	d1 = d1 << d5
	CVZNX = cond(d1)
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 << d5
	CVZNX = cond(d6)
	a0 = d6
	call fn00002664 (retsize: 4;)
	d2 = d0
	CVZN = cond(d2)
	v30 = d0
	d0 = d1
	d1 = v30
	ZN = cond(d1)
	C = false
	V = false
	d4 = d2
	CVZN = cond(d4)
	d5 = d2
	CVZN = cond(d5)
	d6 = d3
	CVZN = cond(d6)
	d2 = d2 *u (word16) d3
	VZN = cond(d2)
	C = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d3 = d3 *u (word16) d5
	VZN = cond(d3)
	C = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d4 = d4 *u (word16) d6
	VZN = cond(d4)
	C = false
	d5 = d5 *u (word16) d6
	VZN = cond(d5)
	C = false
	d6 = 0
	CVZN = cond(d6)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v31 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v31, 0)
	CVZNX = cond(v31)
	v33 = (word16) d6 + (word16) d5 + X
	d5 = DPB(d5, v33, 0)
	CVZNX = cond(v33)
	v34 = (word16) d2 + (word16) d4
	d2 = DPB(d2, v34, 0)
	CVZNX = cond(v34)
	v35 = (word16) d6 + (word16) d5 + X
	d5 = DPB(d5, v35, 0)
	CVZNX = cond(v35)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 + d4
	CVZNX = cond(d3)
	d3 = d3 + d5
	CVZNX = cond(d3)
	v39 = d0 - d3
	CVZN = cond(v39)
	branch Test(ULT,C) l0000265A
	// succ:  l00002654 l0000265A
l00002654:
	branch Test(NE,Z) l0000265C
	// succ:  l00002656 l0000265C
l00002656:
	v40 = a0 - d2
	CVZN = cond(v40)
	branch Test(UGE,C) l0000265C
	// succ:  l0000265A l0000265C
l0000265A:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	// succ:  l0000265C
l0000265C:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000265E
l0000265E:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002560_exit
fn00002560_exit:


// fn00002664
// Return size: 4
define fn00002664
fn00002664_entry:
	// succ:  l00002664
l00002664:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	d7 = d2
	CVZN = cond(d7)
	branch Test(EQ,Z) l0000267E
	// succ:  l0000266C l0000267E
l0000266C:
	d6 = d1
	CVZN = cond(d6)
	d5 = d0
	CVZN = cond(d5)
	branch Test(NE,Z) l0000268C
	// succ:  l00002672 l0000268C
l00002672:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000027AA
	// succ:  l00002678 l000027AA
l00002678:
	v14 = d2 - d1
	CVZN = cond(v14)
	branch Test(UGT,CZ) l000027AA
	// succ:  l0000267E l000027AA
l0000267E:
	d0 = d1
	CVZN = cond(d0)
	d1 = d2
	CVZN = cond(d1)
	call fn0000151E (retsize: 4;)
	goto l000027AA
	// succ:  l000027AA
l0000268C:
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	ZN = cond((word16) d2 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l000026B4
	// succ:  l00002692 l000026B4
l00002692:
	d2 = 0
	CVZN = cond(d2)
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v16 = (word16) d1
	d0 = DPB(d0, v16, 0)
	CVZN = cond(v16)
	v17 = (uint16) (d0 % (uint16) d7)
	v18 = (uint16) (d0 /u (uint16) d7)
	d0 = DPB(d0, v17, 16)
	d0 = DPB(d0, v18, 0)
	VZN = cond(v18)
	C = false
	v20 = (word16) d0
	d2 = DPB(d2, v20, 0)
	CVZN = cond(v20)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v21 = (word16) d1
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	v22 = (uint16) (d0 % (uint16) d7)
	v23 = (uint16) (d0 /u (uint16) d7)
	d0 = DPB(d0, v22, 16)
	d0 = DPB(d0, v23, 0)
	VZN = cond(v23)
	C = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v24 = (word16) d0
	d2 = DPB(d2, v24, 0)
	CVZN = cond(v24)
	d0 = DPB(d0, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = d0
	CVZN = cond(d1)
	d0 = d2
	CVZN = cond(d0)
	goto l000027AA
	// succ:  l000027AA
l000026B4:
	a7 = a7 - 4
	Mem0[a7:word32] = a1
	a7 = a7 - 4
	Mem0[a7:word32] = a0
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a7 = a7 - 8
	Mem0[a7 + 2:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d1 = 0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000026D0
	// succ:  l000026C6 l000026D0
l000026C6:
	v32 = (word16) d0 + 0x0001
	d0 = DPB(d0, v32, 0)
	CVZNX = cond(v32)
	d6 = d6 + d6
	CVZNX = cond(d6)
	d5 = d5 + d5 + X
	CVZNX = cond(d5)
	d7 = d7 + d7
	CVZNX = cond(d7)
	branch Test(GT,N) l000026C6
	// succ:  l000026D0 l000026C6
l000026D0:
	v35 = (word16) d0
	Mem0[a7:word16] = v35
	CVZN = cond(v35)
	// succ:  l000026D2
l000026D2:
	d3 = d7
	CVZN = cond(d3)
	d2 = d5
	CVZN = cond(d2)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v36 = (word16) d2 - (word16) d3
	CVZN = cond(v36)
	branch Test(NE,Z) l000026E4
	// succ:  l000026DE l000026E4
l000026DE:
	d1 = DPB(d1, 0xFFFF, 0)
	CVZN = cond(0xFFFF)
	goto l000026EE
	// succ:  l000026EE
l000026E4:
	d1 = d5
	CVZN = cond(d1)
	v37 = (uint16) (d1 % (uint16) d3)
	v38 = (uint16) (d1 /u (uint16) d3)
	d1 = DPB(d1, v37, 16)
	d1 = DPB(d1, v38, 0)
	VZN = cond(v38)
	C = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	// succ:  l000026EE
l000026EE:
	a1 = d6
	d6 = DPB(d6, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	// succ:  l000026F4
l000026F4:
	d3 = d7
	CVZN = cond(d3)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 *u (word16) d7
	VZN = cond(d2)
	C = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = d3 *u (word16) d1
	VZN = cond(d3)
	C = false
	d4 = d5
	CVZN = cond(d4)
	d4 = d4 - d3
	CVZNX = cond(d4)
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	v41 = (word16) d4
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d6
	d4 = DPB(d4, v42, 0)
	CVZN = cond(v42)
	ZN = cond((word16) d0 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l00002714
	// succ:  l0000270C l00002714
l0000270C:
	v43 = d2 - d4
	CVZN = cond(v43)
	branch Test(ULE,VZ) l00002714
	// succ:  l00002710 l00002714
l00002710:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	goto l000026F4
	// succ:  l000026F4
l00002714:
	a0 = d5
	d6 = d1
	CVZN = cond(d6)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = d7
	CVZN = cond(d5)
	d2 = d6
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	d4 = d5
	CVZN = cond(d4)
	d6 = d6 *u (word16) d5
	VZN = cond(d6)
	C = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d5 = d5 *u (word16) d3
	VZN = cond(d5)
	C = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d2 = d2 *u (word16) d4
	VZN = cond(d2)
	C = false
	d3 = d3 *u (word16) d4
	VZN = cond(d3)
	C = false
	d4 = 0
	CVZN = cond(d4)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	v45 = (word16) d6 + (word16) d5
	d6 = DPB(d6, v45, 0)
	CVZNX = cond(v45)
	v46 = (word16) d4 + (word16) d3 + X
	d3 = DPB(d3, v46, 0)
	CVZNX = cond(v46)
	v47 = (word16) d6 + (word16) d2
	d6 = DPB(d6, v47, 0)
	CVZNX = cond(v47)
	v48 = (word16) d4 + (word16) d3 + X
	d3 = DPB(d3, v48, 0)
	CVZNX = cond(v48)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = DPB(d5, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d5 = d5 + d2
	CVZNX = cond(d5)
	d5 = d5 + d3
	CVZNX = cond(d5)
	d2 = d5
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	d5 = a0
	CVZN = cond(d5)
	d6 = a1
	CVZN = cond(d6)
	d6 = d6 - d3
	CVZNX = cond(d6)
	d5 = d5 - d2 - X
	CVZNX = cond(d5)
	branch Test(UGE,C) l0000276C
	// succ:  l00002756 l0000276C
l00002756:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d3 = d7
	CVZN = cond(d3)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d6 = d6 + d3
	CVZNX = cond(d6)
	d5 = d2 + d5 + X
	CVZNX = cond(d5)
	d3 = d7
	CVZN = cond(d3)
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d5 = d5 + d3
	CVZNX = cond(d5)
	// succ:  l0000276C
l0000276C:
	ZN = cond(Mem0[a7 + 2:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002788
	// succ:  l00002772 l00002788
l00002772:
	v53 = (word16) d1
	Mem0[a7 + 4:word16] = v53
	CVZN = cond(v53)
	d1 = 0
	CVZN = cond(d1)
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	v54 = (word16) d6
	d5 = DPB(d5, v54, 0)
	CVZN = cond(v54)
	d6 = DPB(d6, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 2:bool] = true
	goto l000026D2
	// succ:  l000026D2
l00002788:
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	v57 = (word16) d1
	d0 = DPB(d0, v57, 0)
	CVZN = cond(v57)
	v58 = (word16) d5
	d6 = DPB(d6, v58, 0)
	CVZN = cond(v58)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	v59 = Mem0[a7:word16]
	d7 = DPB(d7, v59, 0)
	CVZN = cond(v59)
	branch Test(EQ,Z) l000027A2
	// succ:  l00002798 l000027A2
l00002798:
	v60 = (word16) d7 - 0x0001
	d7 = DPB(d7, v60, 0)
	CVZNX = cond(v60)
	// succ:  l0000279A
l0000279A:
	d5 = d5 >>u 0x00000001
	CVZNX = cond(d5)
	d6 = __rcr(d6, 0x00000001, X)
	CZNX = cond(d6)
	V = false
	d7 = d7 - 0x00000001
	branch d7 != 0xFFFFFFFF l0000279A
	// succ:  l000027A2 l0000279A
l000027A2:
	d1 = d6
	CVZN = cond(d1)
	a7 = a7 + 8
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	a0 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = Mem0[a7:word32]
	a7 = a7 + 4
	// succ:  l000027AA
l000027AA:
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002664_exit
fn00002664_exit:


// fn000027B0
// Return size: 4
define fn000027B0
fn000027B0_entry:
	// succ:  l000027B0
l000027B0:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 32:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 28:word32]
	CVZN = cond(d0)
	a0 = d1
	d3 = Mem0[a7 + 40:word32]
	CVZN = cond(d3)
	d2 = Mem0[a7 + 36:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l00002802
	// succ:  l000027C8 l00002802
l000027C8:
	v14 = d0 - d3
	CVZN = cond(v14)
	branch Test(UGE,C) l000027DA
	// succ:  l000027CC l000027DA
l000027CC:
	d2 = d3
	CVZN = cond(d2)
	call fn00002664 (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	goto l000028BC
	// succ:  l000028BC
l000027DA:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000027E6
	// succ:  l000027DE l000027E6
l000027DE:
	d4 = 1
	CVZN = cond(d4)
	v29 = (uint16) (d4 % (uint16) d3)
	v30 = (uint16) (d4 /u (uint16) d3)
	d4 = DPB(d4, v29, 16)
	d4 = DPB(d4, v30, 0)
	VZN = cond(v30)
	C = false
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	d3 = d4
	CVZN = cond(d3)
	// succ:  l000027E6
l000027E6:
	d1 = d0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	d2 = d3
	CVZN = cond(d2)
	call fn00002664 (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	call fn00002664 (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	goto l000028BC
	// succ:  l000028BC
l00002802:
	v16 = d0 - d2
	CVZN = cond(v16)
	branch Test(ULT,C) l000028BC
	// succ:  l00002808 l000028BC
l00002808:
	d6 = d2
	CVZN = cond(d6)
	d4 = 24
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002826
	// succ:  l00002812 l00002826
l00002812:
	d4 = 16
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002826
	// succ:  l0000281A l00002826
l0000281A:
	d4 = 8
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002826
	// succ:  l00002822 l00002826
l00002822:
	d4 = 0
	CVZN = cond(d4)
	v20 = (byte) d2
	d6 = DPB(d6, v20, 0)
	CVZN = cond(v20)
	// succ:  l00002826
l00002826:
	a1 = 0x00003E5C
	v22 = (word16) d6 & 0x00FF
	d6 = DPB(d6, v22, 0)
	ZN = cond(v22)
	C = false
	V = false
	v23 = (byte) d4 + Mem0[a1 + (int32) ((int16) d6):byte]
	d4 = DPB(d4, v23, 0)
	CVZNX = cond(v23)
	d5 = 32
	CVZN = cond(d5)
	d5 = d5 - d4
	CVZNX = cond(d5)
	branch Test(NE,Z) l00002848
	// succ:  l0000283A l00002848
l0000283A:
	v25 = d2 - d0
	CVZN = cond(v25)
	branch Test(ULT,C) l00002842
	// succ:  l0000283E l00002842
l0000283E:
	v26 = d3 - d1
	CVZN = cond(v26)
	branch Test(UGT,CZ) l000028BC
	// succ:  l00002842 l000028BC
l00002842:
	d1 = d1 - d3
	CVZNX = cond(d1)
	d0 = d0 - d2 - X
	CVZNX = cond(d0)
	goto l000028BC
	// succ:  l000028BC
l00002848:
	d2 = d2 << d5
	CVZNX = cond(d2)
	d6 = d3
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d2 = d2 | d6
	ZN = cond(d2)
	C = false
	V = false
	d3 = d3 << d5
	CVZNX = cond(d3)
	d1 = d0
	CVZN = cond(d1)
	d0 = d0 >>u d4
	CVZNX = cond(d0)
	d1 = d1 << d5
	CVZNX = cond(d1)
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 << d5
	CVZNX = cond(d6)
	a0 = d6
	call fn00002664 (retsize: 4;)
	v32 = d2
	d2 = d0
	d0 = v32
	ZN = cond(d0)
	C = false
	V = false
	a1 = d3
	d4 = d2
	CVZN = cond(d4)
	d7 = d2
	CVZN = cond(d7)
	d6 = d3
	CVZN = cond(d6)
	d2 = d2 *u (word16) d3
	VZN = cond(d2)
	C = false
	d7 = __swap(d7)
	ZN = cond(d7)
	C = false
	V = false
	d3 = d3 *u (word16) d7
	VZN = cond(d3)
	C = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d4 = d4 *u (word16) d6
	VZN = cond(d4)
	C = false
	d7 = d7 *u (word16) d6
	VZN = cond(d7)
	C = false
	d6 = 0
	CVZN = cond(d6)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v33 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v33, 0)
	CVZNX = cond(v33)
	v34 = (word16) d6 + (word16) d7 + X
	d7 = DPB(d7, v34, 0)
	CVZNX = cond(v34)
	v35 = (word16) d2 + (word16) d4
	d2 = DPB(d2, v35, 0)
	CVZNX = cond(v35)
	v36 = (word16) d6 + (word16) d7 + X
	d7 = DPB(d7, v36, 0)
	CVZNX = cond(v36)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 + d4
	CVZNX = cond(d3)
	d3 = d3 + d7
	CVZNX = cond(d3)
	v40 = d1 - d2
	CVZN = cond(v40)
	branch Test(ULT,C) l000028A4
	// succ:  l0000289E l000028A4
l0000289E:
	branch Test(NE,Z) l000028A8
	// succ:  l000028A0 l000028A8
l000028A0:
	v41 = a0 - d3
	CVZN = cond(v41)
	branch Test(UGE,C) l000028A8
	// succ:  l000028A4 l000028A8
l000028A4:
	d3 = d3 - a1
	CVZNX = cond(d3)
	d2 = d2 - d0 - X
	CVZNX = cond(d2)
	// succ:  l000028A8
l000028A8:
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 - d3
	CVZNX = cond(d6)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d4 = 32
	CVZN = cond(d4)
	d4 = d4 - d5
	CVZNX = cond(d4)
	d1 = d1 << d4
	CVZNX = cond(d1)
	d6 = d6 >>u d5
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d0 = d0 >>u d5
	CVZNX = cond(d0)
	// succ:  l000028BC
l000028BC:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn000027B0_exit
fn000027B0_exit:


// fn00002BAC
// Return size: 4
define fn00002BAC
fn00002BAC_entry:
	// succ:  l00002BAC
l00002BAC:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a2 = Mem0[a7 + 8:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002BC4
	// succ:  l00002BB8 l00002BC4
l00002BB8:
	a7 = a7 - 4
	v7 = a2
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	call fn000020B0 (retsize: 4;)
	a7 = a7 + 4
	goto l00002BEA
	// succ:  l00002BEA
l00002BC4:
	a2 = Mem0[0x00003F88:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002BEA
	// succ:  l00002BCE l00002BEA
l00002BCE:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002BE0
	// succ:  l00002BD6 l00002BE0
l00002BD6:
	a7 = a7 - 4
	v11 = a2
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn000020B0 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l00002BE0
l00002BE0:
	a0 = a2 + 12
	a2 = Mem0[a0:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00002BCE
	// succ:  l00002BEA l00002BCE
l00002BEA:
	d0 = 0
	CVZN = cond(d0)
	v12 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v12
	return
	// succ:  fn00002BAC_exit
fn00002BAC_exit:


// fn00002BF0
// Return size: 4
define fn00002BF0
fn00002BF0_entry:
	// succ:  l00002BF0
l00002BF0:
	a7 = fp
	a0 = a7 + 8
	a7 = a7 - 4
	v4 = a0
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	v6 = Mem0[a7 + 8:word32]
	a7 = a7 - 4
	v7 = v6
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	v8 = Mem0[0x00003F7C:word32]
	a7 = a7 - 4
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn00002C3C (retsize: 4;)
	a7 = a7 + 12
	return
	// succ:  fn00002BF0_exit
fn00002BF0_exit:


// fn00002C0C
// Return size: 4
define fn00002C0C
fn00002C0C_entry:
	// succ:  l00002C0C
l00002C0C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a2 = Mem0[a7 + 12:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002C36
	// succ:  l00002C18 l00002C36
l00002C18:
	d0 = Mem0[a2 + 4:word32]
	CVZN = cond(d0)
	v7 = d0 - Mem0[a2 + 8:word32]
	CVZN = cond(v7)
	branch Test(UGE,C) l00002C2A
	// succ:  l00002C22 l00002C2A
l00002C22:
	a0 = Mem0[a2 + 4:word32]
	v10 = Mem0[a7 + 11:byte]
	Mem0[a0:byte] = v10
	CVZN = cond(v10)
	// succ:  l00002C2A
l00002C2A:
	a0 = a2 + 20
	v12 = Mem0[a0:word32] + 0x00000001
	Mem0[a0:word32] = v12
	CVZNX = cond(v12)
	a0 = a2 + 4
	v14 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v14
	CVZNX = cond(v14)
	// succ:  l00002C36
l00002C36:
	v11 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v11
	return
	// succ:  fn00002C0C_exit
fn00002C0C_exit:


// fn00002C3C
// Return size: 4
define fn00002C3C
fn00002C3C_entry:
	// succ:  l00002C3C
l00002C3C:
	a7 = fp
	a7 = a7 + -76
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	a4 = Mem0[a7 + 128:word32]
	a2 = Mem0[a7 + 124:word32]
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d4 = 0
	CVZN = cond(d4)
	d5 = 0
	CVZN = cond(d5)
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00003C3E
	// succ:  l00002C5E l00003C3E
l00002C5E:
	d3 = 0
	CVZN = cond(d3)
	v21 = Mem0[a4:byte] - 0x25
	CVZN = cond(v21)
	branch Test(NE,Z) l00003B3C
	// succ:  l00002C68 l00003B3C
l00002C68:
	d6 = -1
	CVZN = cond(d6)
	v22 = 0x69
	Mem0[a7 + 72:byte] = v22
	CVZN = cond(v22)
	Mem0[a7 + 73:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	a3 = a4 + 1
	d0 = 0
	CVZN = cond(d0)
	v25 = Mem0[a3:byte]
	d0 = DPB(d0, v25, 0)
	CVZN = cond(v25)
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v27 = Mem0[a0:byte]
	d0 = DPB(d0, v27, 0)
	CVZN = cond(v27)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002CEC
	// succ:  l00002C90 l00002CEC
l00002C90:
	d6 = 0
	CVZN = cond(d6)
	d0 = 0
	CVZN = cond(d0)
	v28 = Mem0[a3:byte]
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v29 = Mem0[a0:byte]
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002CEC
	// succ:  l00002CAA l00002CEC
l00002CAA:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 4
	v30 = d2
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	d1 = d0
	CVZN = cond(d1)
	d2 = d6
	CVZN = cond(d2)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d1 = d1 *u (word16) d6
	VZN = cond(d1)
	C = false
	d2 = d2 *u (word16) d0
	VZN = cond(d2)
	C = false
	d0 = d0 *u (word16) d6
	VZN = cond(d0)
	C = false
	v33 = (word16) d1 + (word16) d2
	d1 = DPB(d1, v33, 0)
	CVZNX = cond(v33)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v36 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v36
	CVZN = cond(d2)
	d1 = 0
	CVZN = cond(d1)
	v37 = Mem0[a3:byte]
	a3 = a3 + 1
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d6 = d1
	CVZN = cond(d6)
	d6 = d6 + d0
	CVZNX = cond(d6)
	d0 = 0
	CVZN = cond(d0)
	v38 = Mem0[a3:byte]
	d0 = DPB(d0, v38, 0)
	CVZN = cond(v38)
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v39 = Mem0[a0:byte]
	d0 = DPB(d0, v39, 0)
	CVZN = cond(v39)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00002CAA
	// succ:  l00002CEC l00002CAA
l00002CEC:
	v40 = Mem0[a3:byte] - 0x68
	CVZN = cond(v40)
	branch Test(EQ,Z) l00002D16
	// succ:  l00002CF2 l00002D16
l00002CF2:
	v41 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v41)
	branch Test(EQ,Z) l00002D16
	// succ:  l00002CF8 l00002D16
l00002CF8:
	v42 = Mem0[a3:byte] - 0x4C
	CVZN = cond(v42)
	branch Test(EQ,Z) l00002D16
	// succ:  l00002CFE l00002D16
l00002CFE:
	v43 = Mem0[a3:byte] - 0x7A
	CVZN = cond(v43)
	branch Test(EQ,Z) l00002D16
	// succ:  l00002D04 l00002D16
l00002D04:
	v44 = Mem0[a3:byte] - 0x6A
	CVZN = cond(v44)
	branch Test(EQ,Z) l00002D16
	// succ:  l00002D0A l00002D16
l00002D0A:
	v45 = Mem0[a3:byte] - 0x74
	CVZN = cond(v45)
	branch Test(EQ,Z) l00002D16
	// succ:  l00002D10 l00002D16
l00002D10:
	v46 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v46)
	branch Test(NE,Z) l00002D7E
	// succ:  l00002D16 l00002D7E
l00002D16:
	v47 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v47, 0)
	CVZN = cond(v47)
	v48 = Mem0[a7 + 72:byte]
	d1 = DPB(d1, v48, 0)
	CVZN = cond(v48)
	// succ:  l00002D1E
l00002D1E:
	v49 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v49)
	branch Test(NE,Z) l00002D28
	// succ:  l00002D24 l00002D28
l00002D24:
	d7 = 1
	CVZN = cond(d7)
	goto l00002D4A
	// succ:  l00002D4A
l00002D28:
	v51 = (byte) d1 - 0x68
	CVZN = cond(v51)
	branch Test(NE,Z) l00002D38
	// succ:  l00002D2E l00002D38
l00002D2E:
	v52 = Mem0[a3:byte] - 0x68
	CVZN = cond(v52)
	branch Test(NE,Z) l00002D38
	// succ:  l00002D34 l00002D38
l00002D34:
	d1 = 2
	CVZN = cond(d1)
	goto l00002D4A
	// succ:  l00002D4A
l00002D38:
	v62 = (byte) d1 - 0x6C
	CVZN = cond(v62)
	branch Test(NE,Z) l00002D48
	// succ:  l00002D3E l00002D48
l00002D3E:
	v63 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v63)
	branch Test(NE,Z) l00002D48
	// succ:  l00002D44 l00002D48
l00002D44:
	d1 = 1
	CVZN = cond(d1)
	goto l00002D4A
	// succ:  l00002D4A
l00002D48:
	v68 = Mem0[a3:byte]
	d1 = DPB(d1, v68, 0)
	CVZN = cond(v68)
	// succ:  l00002D4A
l00002D4A:
	a3 = a3 + 1
	v53 = Mem0[a3:byte] - 0x68
	CVZN = cond(v53)
	branch Test(EQ,Z) l00002D1E
	// succ:  l00002D52 l00002D1E
l00002D52:
	v54 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v54)
	branch Test(EQ,Z) l00002D1E
	// succ:  l00002D58 l00002D1E
l00002D58:
	v55 = Mem0[a3:byte] - 0x4C
	CVZN = cond(v55)
	branch Test(EQ,Z) l00002D1E
	// succ:  l00002D5E l00002D1E
l00002D5E:
	v56 = Mem0[a3:byte] - 0x7A
	CVZN = cond(v56)
	branch Test(EQ,Z) l00002D1E
	// succ:  l00002D64 l00002D1E
l00002D64:
	v57 = Mem0[a3:byte] - 0x6A
	CVZN = cond(v57)
	branch Test(EQ,Z) l00002D1E
	// succ:  l00002D6A l00002D1E
l00002D6A:
	v58 = Mem0[a3:byte] - 0x74
	CVZN = cond(v58)
	branch Test(EQ,Z) l00002D1E
	// succ:  l00002D70 l00002D1E
l00002D70:
	v59 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v59)
	branch Test(EQ,Z) l00002D1E
	// succ:  l00002D76 l00002D1E
l00002D76:
	v60 = (byte) d1
	Mem0[a7 + 72:byte] = v60
	CVZN = cond(v60)
	v61 = (byte) d7
	Mem0[a7 + 73:byte] = v61
	CVZN = cond(v61)
	// succ:  l00002D7E
l00002D7E:
	v64 = Mem0[a7 + 72:byte] - 0x6A
	CVZN = cond(v64)
	branch Test(NE,Z) l00002D8C
	// succ:  l00002D86 l00002D8C
l00002D86:
	v65 = 0x01
	Mem0[a7 + 72:byte] = v65
	CVZN = cond(v65)
	// succ:  l00002D8C
l00002D8C:
	v66 = Mem0[a7 + 72:byte] - 0x74
	CVZN = cond(v66)
	branch Test(NE,Z) l00002D9A
	// succ:  l00002D94 l00002D9A
l00002D94:
	v67 = 0x69
	Mem0[a7 + 72:byte] = v67
	CVZN = cond(v67)
	// succ:  l00002D9A
l00002D9A:
	v69 = Mem0[a7 + 72:byte] - 0x7A
	CVZN = cond(v69)
	branch Test(NE,Z) l00002DA8
	// succ:  l00002DA2 l00002DA8
l00002DA2:
	v70 = 0x6C
	Mem0[a7 + 72:byte] = v70
	CVZN = cond(v70)
	// succ:  l00002DA8
l00002DA8:
	v71 = Mem0[a3:byte]
	a3 = a3 + 1
	d7 = DPB(d7, v71, 0)
	CVZN = cond(v71)
	branch Test(EQ,Z) l00002E1E
	// succ:  l00002DAC l00002E1E
l00002DAC:
	v72 = (byte) d7 - 0x25
	CVZN = cond(v72)
	branch Test(EQ,Z) l00002E1E
	// succ:  l00002DB2 l00002E1E
l00002DB2:
	v73 = (byte) d7 - 0x63
	CVZN = cond(v73)
	branch Test(EQ,Z) l00002E1E
	// succ:  l00002DB8 l00002E1E
l00002DB8:
	v74 = (byte) d7 - 0x6E
	CVZN = cond(v74)
	branch Test(EQ,Z) l00002E1E
	// succ:  l00002DBE l00002E1E
l00002DBE:
	v75 = (byte) d7 - 0x5B
	CVZN = cond(v75)
	branch Test(EQ,Z) l00002E1E
	// succ:  l00002DC4 l00002E1E
l00002DC4:
	a0 = a2 + 24
	v76 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v76
	ZN = cond(v76)
	C = false
	V = false
	a0 = a2 + 20
	v77 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v77
	CVZNX = cond(v77)
	branch Test(LT,CZ) l00002DEE
	// succ:  l00002DD6 l00002DEE
l00002DD6:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v80 = a2
	Mem0[a7:word32] = v80
	CVZN = cond(v80)
	a2 = a0
	a2 = a2 + 1
	v81 = a2
	Mem0[a1:word32] = v81
	CVZN = cond(v81)
	v82 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v82
	v83 = Mem0[a0:byte]
	d0 = DPB(d0, v83, 0)
	CVZN = cond(v83)
	d1 = 0
	CVZN = cond(d1)
	v84 = (byte) d0
	d1 = DPB(d1, v84, 0)
	CVZN = cond(v84)
	goto l00002DFA
	// succ:  l00002DFA
l00002DEE:
	a7 = a7 - 4
	v112 = a2
	Mem0[a7:word32] = v112
	CVZN = cond(v112)
	call fn00003CE0 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l00002DFA
l00002DFA:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v94 = (byte) d1
	d0 = DPB(d0, v94, 0)
	CVZN = cond(v94)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v95 = Mem0[a0:byte]
	d0 = DPB(d0, v95, 0)
	CVZN = cond(v95)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00002DC4
	// succ:  l00002E1C l00002DC4
l00002E1C:
	d3 = 1
	CVZN = cond(d3)
	// succ:  l00002E1E
l00002E1E:
	v120 = (byte) d7
	d1 = DPB(d1, v120, 0)
	CVZN = cond(v120)
	v121 = (byte) d1 - 0x25
	d1 = DPB(d1, v121, 0)
	CVZNX = cond(v121)
	branch Test(EQ,Z) l0000326A
	// succ:  l00002E28 l0000326A
l00002E28:
	v122 = (byte) d1 - 0x36
	d1 = DPB(d1, v122, 0)
	CVZNX = cond(v122)
	branch Test(EQ,Z) l00002F66
	// succ:  l00002E30 l00002F66
l00002E30:
	v123 = (byte) d1 - 0x08
	d1 = DPB(d1, v123, 0)
	CVZNX = cond(v123)
	branch Test(EQ,Z) l00002E46
	// succ:  l00002E34 l00002E46
l00002E34:
	v124 = (byte) d1 - 0x0B
	d1 = DPB(d1, v124, 0)
	CVZNX = cond(v124)
	branch Test(EQ,Z) l000032D8
	// succ:  l00002E3C l000032D8
l00002E3C:
	v125 = (byte) d1 - 0x05
	d1 = DPB(d1, v125, 0)
	CVZNX = cond(v125)
	branch Test(EQ,Z) l00003184
	// succ:  l00002E42 l00003184
l00002E42:
	goto l0000337A
	// succ:  l0000337A
l00002E46:
	v211 = d6 - 0xFFFFFFFF
	CVZN = cond(v211)
	branch Test(NE,Z) l00002E50
	// succ:  l00002E4E l00002E50
l00002E4E:
	d6 = 1
	CVZN = cond(d6)
	// succ:  l00002E50
l00002E50:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002E6A
	// succ:  l00002E56 l00002E6A
l00002E56:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a1 = Mem0[a0 + -4:word32]
	goto l00002E6C
	// succ:  l00002E6C
l00002E6A:
	a1 = a1 - a1
	CVZNX = cond(a1)
	// succ:  l00002E6C
l00002E6C:
	a0 = a2 + 24
	v229 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v229
	ZN = cond(v229)
	C = false
	V = false
	a0 = a2 + 20
	v230 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v230
	CVZNX = cond(v230)
	v231 = a1
	Mem0[a7 + 44:word32] = v231
	CVZN = cond(v231)
	ZN = cond(Mem0[a0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LT,CZ) l00002EA4
	// succ:  l00002E84 l00002EA4
l00002E84:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v232 = a2
	Mem0[a7:word32] = v232
	CVZN = cond(v232)
	a2 = a0
	a2 = a2 + 1
	v233 = a2
	Mem0[a1:word32] = v233
	CVZN = cond(v233)
	v234 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v234
	v235 = Mem0[a0:byte]
	d0 = DPB(d0, v235, 0)
	CVZN = cond(v235)
	a7 = a7 - 4
	v236 = d1
	Mem0[a7:word32] = v236
	CVZN = cond(v236)
	d1 = 0
	CVZN = cond(d1)
	v237 = (byte) d0
	d1 = DPB(d1, v237, 0)
	CVZN = cond(v237)
	v238 = d1
	Mem0[a7 + 56:word32] = v238
	CVZN = cond(v238)
	v239 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v239
	CVZN = cond(d1)
	goto l00002EC2
	// succ:  l00002EC2
l00002EA4:
	a1 = Mem0[a7 + 44:word32]
	a7 = a7 - 4
	v269 = a2
	Mem0[a7:word32] = v269
	CVZN = cond(v269)
	v270 = a1
	Mem0[a7 + 48:word32] = v270
	CVZN = cond(v270)
	call fn00003CE0 (retsize: 4;)
	v271 = d0
	Mem0[a7 + 56:word32] = v271
	CVZN = cond(v271)
	a1 = Mem0[a7 + 48:word32]
	v272 = a1
	Mem0[a7 + 48:word32] = v272
	CVZN = cond(v272)
	a7 = a7 + 4
	// succ:  l00002EC2
l00002EC2:
	a1 = Mem0[a7 + 44:word32]
	d5 = Mem0[a7 + 52:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v246 = Mem0[a7 + 52:word32] - 0xFFFFFFFF
	CVZN = cond(v246)
	branch Test(EQ,Z) l00002F3A
	// succ:  l00002ED8 l00002F3A
l00002ED8:
	v247 = a1
	Mem0[a7 + 44:word32] = v247
	CVZN = cond(v247)
	v248 = d6 - d3
	CVZN = cond(v248)
	branch Test(ULT,C) l00002F3A
	// succ:  l00002EE0 l00002F3A
l00002EE0:
	v249 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v249, 0)
	CVZN = cond(v249)
	a4 = Mem0[a7 + 44:word32]
	// succ:  l00002EE8
l00002EE8:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002EEE
	// succ:  l00002EEC l00002EEE
l00002EEC:
	v250 = (byte) d5
	Mem0[a4:byte] = v250
	a4 = a4 + 1
	CVZN = cond(v250)
	// succ:  l00002EEE
l00002EEE:
	a0 = a2 + 24
	v255 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v255
	ZN = cond(v255)
	C = false
	V = false
	a0 = a2 + 20
	v256 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v256
	CVZNX = cond(v256)
	branch Test(LT,CZ) l00002F18
	// succ:  l00002F00 l00002F18
l00002F00:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v257 = a2
	Mem0[a7:word32] = v257
	CVZN = cond(v257)
	a2 = a0
	a2 = a2 + 1
	v258 = a2
	Mem0[a1:word32] = v258
	CVZN = cond(v258)
	v259 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v259
	v260 = Mem0[a0:byte]
	d0 = DPB(d0, v260, 0)
	CVZN = cond(v260)
	d1 = 0
	CVZN = cond(d1)
	v261 = (byte) d0
	d1 = DPB(d1, v261, 0)
	CVZN = cond(v261)
	goto l00002F24
	// succ:  l00002F24
l00002F18:
	a7 = a7 - 4
	v265 = a2
	Mem0[a7:word32] = v265
	CVZN = cond(v265)
	call fn00003CE0 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l00002F24
l00002F24:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v262 = d1 - 0xFFFFFFFF
	CVZN = cond(v262)
	branch Test(EQ,Z) l00002F36
	// succ:  l00002F32 l00002F36
l00002F32:
	v263 = d6 - d3
	CVZN = cond(v263)
	branch Test(UGE,C) l00002EE8
	// succ:  l00002F36 l00002EE8
l00002F36:
	v264 = (byte) d7
	Mem0[a7 + 73:byte] = v264
	CVZN = cond(v264)
	// succ:  l00002F3A
l00002F3A:
	v266 = d5 - 0xFFFFFFFF
	CVZN = cond(v266)
	branch Test(EQ,Z) l00002F4C
	// succ:  l00002F42 l00002F4C
l00002F42:
	a7 = a7 - 4
	v267 = a2
	Mem0[a7:word32] = v267
	CVZN = cond(v267)
	a7 = a7 - 4
	v268 = d5
	Mem0[a7:word32] = v268
	CVZN = cond(v268)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00002F4C
l00002F4C:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003B36
	// succ:  l00002F58 l00003B36
l00002F58:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003B36
	// succ:  l00002F5E l00003B36
l00002F5E:
	v277 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v277
	CVZNX = cond(v277)
	goto l00003B36
	// succ:  l00003B36
l00002F66:
	Mem0[a7 + 44:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v444 = Mem0[a3:byte] - 0x5E
	CVZN = cond(v444)
	branch Test(NE,Z) l00002F78
	// succ:  l00002F70 l00002F78
l00002F70:
	v445 = 0x01
	Mem0[a7 + 44:byte] = v445
	CVZN = cond(v445)
	a3 = a3 + 1
	// succ:  l00002F78
l00002F78:
	Mem0[a7 + 52:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v455 = Mem0[a7 + 44:byte]
	d7 = DPB(d7, v455, 0)
	CVZN = cond(v455)
	d1 = Mem0[a7 + 52:word32]
	CVZN = cond(d1)
	// succ:  l00002F84
l00002F84:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00002F90
	// succ:  l00002F88 l00002F90
l00002F88:
	d5 = 0x000000FF
	CVZN = cond(d5)
	goto l00002F92
	// succ:  l00002F92
l00002F90:
	d5 = 0
	CVZN = cond(d5)
	// succ:  l00002F92
l00002F92:
	a0 = a7 + 78
	v460 = (byte) d5
	Mem0[a5 + d1:byte] = v460
	CVZN = cond(v460)
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v461 = d1 - 0x00000020
	CVZN = cond(v461)
	branch Test(ULT,C) l00002F84
	// succ:  l00002FA4 l00002F84
l00002FA4:
	v462 = d2
	Mem0[a7 + 132:word32] = v462
	CVZN = cond(v462)
	v463 = (byte) d7
	Mem0[a7 + 44:byte] = v463
	CVZN = cond(v463)
	v464 = Mem0[a7 + 44:byte]
	d2 = DPB(d2, v464, 0)
	CVZN = cond(v464)
	// succ:  l00002FB0
l00002FB0:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00003026
	// succ:  l00002FB4 l00003026
l00002FB4:
	v465 = Mem0[a3:byte]
	a3 = a3 + 1
	d1 = DPB(d1, v465, 0)
	CVZN = cond(v465)
	v466 = Mem0[a3:byte] - 0x2D
	CVZN = cond(v466)
	branch Test(NE,Z) l00002FC8
	// succ:  l00002FBC l00002FC8
l00002FBC:
	v467 = (byte) d1 - Mem0[a3 + 1:byte]
	CVZN = cond(v467)
	branch Test(UGE,C) l00002FC8
	// succ:  l00002FC2 l00002FC8
l00002FC2:
	a3 = a3 + 1
	v468 = Mem0[a3:byte]
	a3 = a3 + 1
	d7 = DPB(d7, v468, 0)
	CVZN = cond(v468)
	goto l00002FCA
	// succ:  l00002FCA
l00002FC8:
	v475 = (byte) d1
	d7 = DPB(d7, v475, 0)
	CVZN = cond(v475)
	// succ:  l00002FCA
l00002FCA:
	d5 = 0
	CVZN = cond(d5)
	v470 = (byte) d1
	d5 = DPB(d5, v470, 0)
	CVZN = cond(v470)
	d0 = 0
	CVZN = cond(d0)
	v471 = (byte) d7
	d0 = DPB(d0, v471, 0)
	CVZN = cond(v471)
	v472 = d0 - d5
	CVZN = cond(v472)
	branch Test(ULT,C) l00003020
	// succ:  l00002FD6 l00003020
l00002FD6:
	ZN = cond((byte) d2 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00002FFA
	// succ:  l00002FDA l00002FFA
l00002FDA:
	a0 = a7 + 78
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 >>u 0x00000003
	CVZNX = cond(d0)
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d0 = ~d0
	ZN = cond(d0)
	C = false
	V = false
	d1 = 0
	CVZN = cond(d1)
	v473 = Mem0[a0:byte]
	d1 = DPB(d1, v473, 0)
	CVZN = cond(v473)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	v474 = (byte) d0
	Mem0[a0:byte] = v474
	CVZN = cond(v474)
	goto l00003016
	// succ:  l00003016
l00002FFA:
	a0 = a7 + 78
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 >>u 0x00000003
	CVZNX = cond(d0)
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v479 = Mem0[a0:byte]
	d1 = DPB(d1, v479, 0)
	CVZN = cond(v479)
	d0 = d0 | d1
	ZN = cond(d0)
	C = false
	V = false
	v480 = (byte) d0
	Mem0[a0:byte] = v480
	CVZN = cond(v480)
	// succ:  l00003016
l00003016:
	d5 = d5 + 0x00000001
	CVZNX = cond(d5)
	d0 = 0
	CVZN = cond(d0)
	v476 = (byte) d7
	d0 = DPB(d0, v476, 0)
	CVZN = cond(v476)
	v477 = d0 - d5
	CVZN = cond(v477)
	branch Test(UGE,C) l00002FD6
	// succ:  l00003020 l00002FD6
l00003020:
	v478 = Mem0[a3:byte] - 0x5D
	CVZN = cond(v478)
	branch Test(NE,Z) l00002FB0
	// succ:  l00003026 l00002FB0
l00003026:
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	a3 = a3 + 1
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003046
	// succ:  l00003032 l00003046
l00003032:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a6 = Mem0[a0 + -4:word32]
	goto l00003048
	// succ:  l00003048
l00003046:
	a6 = a6 - a6
	CVZNX = cond(a6)
	// succ:  l00003048
l00003048:
	a0 = a2 + 24
	v481 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v481
	ZN = cond(v481)
	C = false
	V = false
	a0 = a2 + 20
	v482 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v482
	CVZNX = cond(v482)
	branch Test(LT,CZ) l0000307A
	// succ:  l0000305A l0000307A
l0000305A:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v483 = a2
	Mem0[a7:word32] = v483
	CVZN = cond(v483)
	a2 = a0
	a2 = a2 + 1
	v484 = a2
	Mem0[a1:word32] = v484
	CVZN = cond(v484)
	v485 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v485
	v486 = Mem0[a0:byte]
	d0 = DPB(d0, v486, 0)
	CVZN = cond(v486)
	a7 = a7 - 4
	v487 = d1
	Mem0[a7:word32] = v487
	CVZN = cond(v487)
	d1 = 0
	CVZN = cond(d1)
	v488 = (byte) d0
	d1 = DPB(d1, v488, 0)
	CVZN = cond(v488)
	v489 = d1
	Mem0[a7 + 48:word32] = v489
	CVZN = cond(v489)
	v490 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v490
	CVZN = cond(d1)
	goto l00003088
	// succ:  l00003088
l0000307A:
	a7 = a7 - 4
	v501 = a2
	Mem0[a7:word32] = v501
	CVZN = cond(v501)
	call fn00003CE0 (retsize: 4;)
	v502 = d0
	Mem0[a7 + 48:word32] = v502
	CVZN = cond(v502)
	a7 = a7 + 4
	// succ:  l00003088
l00003088:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v491 = Mem0[a7 + 44:word32] - 0xFFFFFFFF
	CVZN = cond(v491)
	branch Test(EQ,Z) l00003156
	// succ:  l0000309C l00003156
l0000309C:
	a0 = a7 + 78
	a7 = a7 - 4
	v492 = a0
	Mem0[a7:word32] = v492
	CVZN = cond(v492)
	a7 = a7 - 4
	v493 = a1
	Mem0[a7:word32] = v493
	CVZN = cond(v493)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000008
	a7 = a7 - 4
	v494 = d5
	Mem0[a7:word32] = v494
	CVZN = cond(v494)
	call fn000014EC (retsize: 4;)
	a7 = a7 + 8
	v495 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v495
	v496 = Mem0[a7:word32]
	a7 = a7 + 4
	a0 = v496
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v497 = Mem0[a0:byte]
	d1 = DPB(d1, v497, 0)
	CVZN = cond(v497)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003156
	// succ:  l000030CC l00003156
l000030CC:
	v498 = d6 - d3
	CVZN = cond(v498)
	branch Test(ULT,C) l00003156
	// succ:  l000030D2 l00003156
l000030D2:
	v499 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v499, 0)
	CVZN = cond(v499)
	// succ:  l000030D6
l000030D6:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000030DC
	// succ:  l000030DA l000030DC
l000030DA:
	v500 = (byte) d5
	Mem0[a6:byte] = v500
	a6 = a6 + 1
	CVZN = cond(v500)
	// succ:  l000030DC
l000030DC:
	a0 = a2 + 24
	v503 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v503
	ZN = cond(v503)
	C = false
	V = false
	a0 = a2 + 20
	v504 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v504
	CVZNX = cond(v504)
	branch Test(LT,CZ) l00003106
	// succ:  l000030EE l00003106
l000030EE:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v505 = a2
	Mem0[a7:word32] = v505
	CVZN = cond(v505)
	a2 = a0
	a2 = a2 + 1
	v506 = a2
	Mem0[a1:word32] = v506
	CVZN = cond(v506)
	v507 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v507
	v508 = Mem0[a0:byte]
	d0 = DPB(d0, v508, 0)
	CVZN = cond(v508)
	d1 = 0
	CVZN = cond(d1)
	v509 = (byte) d0
	d1 = DPB(d1, v509, 0)
	CVZN = cond(v509)
	goto l00003112
	// succ:  l00003112
l00003106:
	a7 = a7 - 4
	v522 = a2
	Mem0[a7:word32] = v522
	CVZN = cond(v522)
	call fn00003CE0 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l00003112
l00003112:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v513 = d1 - 0xFFFFFFFF
	CVZN = cond(v513)
	branch Test(EQ,Z) l00003152
	// succ:  l00003120 l00003152
l00003120:
	a0 = a7 + 78
	a7 = a7 - 4
	v514 = a0
	Mem0[a7:word32] = v514
	CVZN = cond(v514)
	a7 = a7 - 4
	v515 = a1
	Mem0[a7:word32] = v515
	CVZN = cond(v515)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000008
	a7 = a7 - 4
	v516 = d5
	Mem0[a7:word32] = v516
	CVZN = cond(v516)
	call fn000014EC (retsize: 4;)
	a7 = a7 + 8
	v517 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v517
	v518 = Mem0[a7:word32]
	a7 = a7 + 4
	a0 = v518
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v519 = Mem0[a0:byte]
	d1 = DPB(d1, v519, 0)
	CVZN = cond(v519)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003152
	// succ:  l0000314E l00003152
l0000314E:
	v520 = d6 - d3
	CVZN = cond(v520)
	branch Test(UGE,C) l000030D6
	// succ:  l00003152 l000030D6
l00003152:
	v521 = (byte) d7
	Mem0[a7 + 73:byte] = v521
	CVZN = cond(v521)
	// succ:  l00003156
l00003156:
	v510 = d5 - 0xFFFFFFFF
	CVZN = cond(v510)
	branch Test(EQ,Z) l00003168
	// succ:  l0000315E l00003168
l0000315E:
	a7 = a7 - 4
	v511 = a2
	Mem0[a7:word32] = v511
	CVZN = cond(v511)
	a7 = a7 - 4
	v512 = d5
	Mem0[a7:word32] = v512
	CVZN = cond(v512)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00003168
l00003168:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003B36
	// succ:  l00003174 l00003B36
l00003174:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003B36
	// succ:  l0000317A l00003B36
l0000317A:
	Mem0[a6:byte] = 0x00
	a6 = a6 + 1
	Z = true
	C = false
	N = false
	V = false
	v523 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v523
	CVZNX = cond(v523)
	goto l00003B36
	// succ:  l00003B36
l00003184:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000319E
	// succ:  l0000318A l0000319E
l0000318A:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a5 = Mem0[a0 + -4:word32]
	goto l000031A0
	// succ:  l000031A0
l0000319E:
	a5 = a5 - a5
	CVZNX = cond(a5)
	// succ:  l000031A0
l000031A0:
	v150 = d5 - 0xFFFFFFFF
	CVZN = cond(v150)
	branch Test(EQ,Z) l0000323C
	// succ:  l000031AA l0000323C
l000031AA:
	v151 = (byte) d5
	d0 = DPB(d0, v151, 0)
	CVZN = cond(v151)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v152 = Mem0[a0:byte]
	d0 = DPB(d0, v152, 0)
	CVZN = cond(v152)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l0000323C
	// succ:  l000031C6 l0000323C
l000031C6:
	v153 = d6 - d3
	CVZN = cond(v153)
	branch Test(ULT,C) l0000323C
	// succ:  l000031CA l0000323C
l000031CA:
	v154 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v154, 0)
	CVZN = cond(v154)
	// succ:  l000031CE
l000031CE:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000031D4
	// succ:  l000031D2 l000031D4
l000031D2:
	v155 = (byte) d5
	Mem0[a5:byte] = v155
	a5 = a5 + 1
	CVZN = cond(v155)
	// succ:  l000031D4
l000031D4:
	a0 = a2 + 24
	v159 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v159
	ZN = cond(v159)
	C = false
	V = false
	a0 = a2 + 20
	v160 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v160
	CVZNX = cond(v160)
	branch Test(LT,CZ) l000031FE
	// succ:  l000031E6 l000031FE
l000031E6:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v161 = a2
	Mem0[a7:word32] = v161
	CVZN = cond(v161)
	a2 = a0
	a2 = a2 + 1
	v162 = a2
	Mem0[a1:word32] = v162
	CVZN = cond(v162)
	v163 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v163
	v164 = Mem0[a0:byte]
	d0 = DPB(d0, v164, 0)
	CVZN = cond(v164)
	d1 = 0
	CVZN = cond(d1)
	v165 = (byte) d0
	d1 = DPB(d1, v165, 0)
	CVZN = cond(v165)
	goto l0000320A
	// succ:  l0000320A
l000031FE:
	a7 = a7 - 4
	v175 = a2
	Mem0[a7:word32] = v175
	CVZN = cond(v175)
	call fn00003CE0 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l0000320A
l0000320A:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v168 = d1 - 0xFFFFFFFF
	CVZN = cond(v168)
	branch Test(EQ,Z) l00003238
	// succ:  l00003218 l00003238
l00003218:
	v169 = (byte) d5
	d0 = DPB(d0, v169, 0)
	CVZN = cond(v169)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v170 = Mem0[a0:byte]
	d0 = DPB(d0, v170, 0)
	CVZN = cond(v170)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00003238
	// succ:  l00003234 l00003238
l00003234:
	v171 = d6 - d3
	CVZN = cond(v171)
	branch Test(UGE,C) l000031CE
	// succ:  l00003238 l000031CE
l00003238:
	v172 = (byte) d7
	Mem0[a7 + 73:byte] = v172
	CVZN = cond(v172)
	// succ:  l0000323C
l0000323C:
	v177 = d5 - 0xFFFFFFFF
	CVZN = cond(v177)
	branch Test(EQ,Z) l0000324E
	// succ:  l00003244 l0000324E
l00003244:
	a7 = a7 - 4
	v178 = a2
	Mem0[a7:word32] = v178
	CVZN = cond(v178)
	a7 = a7 - 4
	v179 = d5
	Mem0[a7:word32] = v179
	CVZN = cond(v179)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l0000324E
l0000324E:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003B36
	// succ:  l0000325A l00003B36
l0000325A:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003B36
	// succ:  l00003260 l00003B36
l00003260:
	Mem0[a5:byte] = 0x00
	a5 = a5 + 1
	Z = true
	C = false
	N = false
	V = false
	v195 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v195
	CVZNX = cond(v195)
	goto l00003B36
	// succ:  l00003B36
l0000326A:
	a0 = a2 + 24
	v126 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v126
	ZN = cond(v126)
	C = false
	V = false
	a0 = a2 + 20
	v127 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v127
	CVZNX = cond(v127)
	branch Test(LT,CZ) l0000329C
	// succ:  l0000327C l0000329C
l0000327C:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v128 = a2
	Mem0[a7:word32] = v128
	CVZN = cond(v128)
	a2 = a0
	a2 = a2 + 1
	v129 = a2
	Mem0[a1:word32] = v129
	CVZN = cond(v129)
	v130 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v130
	v131 = Mem0[a0:byte]
	d0 = DPB(d0, v131, 0)
	CVZN = cond(v131)
	a7 = a7 - 4
	v132 = d1
	Mem0[a7:word32] = v132
	CVZN = cond(v132)
	d1 = 0
	CVZN = cond(d1)
	v133 = (byte) d0
	d1 = DPB(d1, v133, 0)
	CVZN = cond(v133)
	v134 = d1
	Mem0[a7 + 48:word32] = v134
	CVZN = cond(v134)
	v135 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v135
	CVZN = cond(d1)
	goto l000032AA
	// succ:  l000032AA
l0000329C:
	a7 = a7 - 4
	v143 = a2
	Mem0[a7:word32] = v143
	CVZN = cond(v143)
	call fn00003CE0 (retsize: 4;)
	v144 = d0
	Mem0[a7 + 48:word32] = v144
	CVZN = cond(v144)
	a7 = a7 + 4
	// succ:  l000032AA
l000032AA:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v139 = Mem0[a7 + 44:word32] - 0x00000025
	CVZN = cond(v139)
	branch Test(EQ,Z) l00003B36
	// succ:  l000032BE l00003B36
l000032BE:
	v140 = d5 - 0xFFFFFFFF
	CVZN = cond(v140)
	branch Test(EQ,Z) l000032D0
	// succ:  l000032C6 l000032D0
l000032C6:
	a7 = a7 - 4
	v141 = a2
	Mem0[a7:word32] = v141
	CVZN = cond(v141)
	a7 = a7 - 4
	v142 = d5
	Mem0[a7:word32] = v142
	CVZN = cond(v142)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l000032D0
l000032D0:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l00003B36
	// succ:  l00003B36
l000032D8:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003370
	// succ:  l000032E0 l00003370
l000032E0:
	v147 = Mem0[a7 + 72:byte] - 0x01
	CVZN = cond(v147)
	branch Test(NE,Z) l00003302
	// succ:  l000032E8 l00003302
l000032E8:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v148 = d4
	Mem0[a0 + 4:word32] = v148
	CVZN = cond(v148)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00003370
	// succ:  l00003370
l00003302:
	v156 = Mem0[a7 + 72:byte] - 0x6C
	CVZN = cond(v156)
	branch Test(NE,Z) l00003320
	// succ:  l0000330A l00003320
l0000330A:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v157 = d4
	Mem0[a0:word32] = v157
	CVZN = cond(v157)
	goto l00003370
	// succ:  l00003370
l00003320:
	v166 = Mem0[a7 + 72:byte] - 0x68
	CVZN = cond(v166)
	branch Test(NE,Z) l0000333E
	// succ:  l00003328 l0000333E
l00003328:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v167 = (word16) d4
	Mem0[a0:word16] = v167
	CVZN = cond(v167)
	goto l00003370
	// succ:  l00003370
l0000333E:
	v173 = Mem0[a7 + 72:byte] - 0x02
	CVZN = cond(v173)
	branch Test(NE,Z) l0000335C
	// succ:  l00003346 l0000335C
l00003346:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v174 = (byte) d4
	Mem0[a0:byte] = v174
	CVZN = cond(v174)
	goto l00003370
	// succ:  l00003370
l0000335C:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v176 = d4
	Mem0[a0:word32] = v176
	CVZN = cond(v176)
	// succ:  l00003370
l00003370:
	d3 = 1
	CVZN = cond(d3)
	v158 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v158
	CVZNX = cond(v158)
	goto l00003B36
	// succ:  l00003B36
l0000337A:
	Mem0[a7 + 48:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 44:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 110:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000338C
	// succ:  l0000338A l0000338C
l0000338A:
	a3 = a3 - 1
	// succ:  l0000338C
l0000338C:
	v145 = (byte) d7 - 0x70
	CVZN = cond(v145)
	branch Test(NE,Z) l0000339A
	// succ:  l00003392 l0000339A
l00003392:
	v146 = 0x6C
	Mem0[a7 + 72:byte] = v146
	CVZN = cond(v146)
	d7 = 120
	CVZN = cond(d7)
	// succ:  l0000339A
l0000339A:
	v180 = d5 - 0x0000002D
	CVZN = cond(v180)
	branch Test(NE,Z) l000033A8
	// succ:  l000033A2 l000033A8
l000033A2:
	v181 = (byte) d7 - 0x75
	CVZN = cond(v181)
	branch Test(NE,Z) l000033B0
	// succ:  l000033A8 l000033B0
l000033A8:
	v182 = d5 - 0x0000002B
	CVZN = cond(v182)
	branch Test(NE,Z) l00003400
	// succ:  l000033B0 l00003400
l000033B0:
	v183 = d6 - d3
	CVZN = cond(v183)
	branch Test(ULT,C) l00003400
	// succ:  l000033B4 l00003400
l000033B4:
	v184 = d5
	Mem0[a7 + 110:word32] = v184
	CVZN = cond(v184)
	a0 = a2 + 24
	v185 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v185
	ZN = cond(v185)
	C = false
	V = false
	a0 = a2 + 20
	v186 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v186
	CVZNX = cond(v186)
	branch Test(LT,CZ) l000033EA
	// succ:  l000033CA l000033EA
l000033CA:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v187 = a2
	Mem0[a7:word32] = v187
	CVZN = cond(v187)
	a2 = a0
	a2 = a2 + 1
	v188 = a2
	Mem0[a1:word32] = v188
	CVZN = cond(v188)
	v189 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v189
	v190 = Mem0[a0:byte]
	d0 = DPB(d0, v190, 0)
	CVZN = cond(v190)
	a7 = a7 - 4
	v191 = d1
	Mem0[a7:word32] = v191
	CVZN = cond(v191)
	d1 = 0
	CVZN = cond(d1)
	v192 = (byte) d0
	d1 = DPB(d1, v192, 0)
	CVZN = cond(v192)
	v193 = d1
	Mem0[a7 + 56:word32] = v193
	CVZN = cond(v193)
	v194 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v194
	CVZN = cond(d1)
	goto l000033F8
	// succ:  l000033F8
l000033EA:
	a7 = a7 - 4
	v196 = a2
	Mem0[a7:word32] = v196
	CVZN = cond(v196)
	call fn00003CE0 (retsize: 4;)
	v197 = d0
	Mem0[a7 + 56:word32] = v197
	CVZN = cond(v197)
	a7 = a7 + 4
	// succ:  l000033F8
l000033F8:
	d5 = Mem0[a7 + 52:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	// succ:  l00003400
l00003400:
	v198 = (byte) d7 - 0x69
	CVZN = cond(v198)
	branch Test(NE,Z) l00003572
	// succ:  l00003408 l00003572
l00003408:
	v199 = d5 - 0x00000030
	CVZN = cond(v199)
	branch Test(NE,Z) l00003534
	// succ:  l00003412 l00003534
l00003412:
	v200 = d6 - d3
	CVZN = cond(v200)
	branch Test(ULT,C) l00003534
	// succ:  l00003418 l00003534
l00003418:
	a0 = a2 + 24
	v201 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v201
	ZN = cond(v201)
	C = false
	V = false
	a0 = a2 + 20
	v202 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v202
	CVZNX = cond(v202)
	branch Test(LT,CZ) l0000344A
	// succ:  l0000342A l0000344A
l0000342A:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v203 = a2
	Mem0[a7:word32] = v203
	CVZN = cond(v203)
	a2 = a0
	a2 = a2 + 1
	v204 = a2
	Mem0[a1:word32] = v204
	CVZN = cond(v204)
	v205 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v205
	v206 = Mem0[a0:byte]
	d0 = DPB(d0, v206, 0)
	CVZN = cond(v206)
	a7 = a7 - 4
	v207 = d1
	Mem0[a7:word32] = v207
	CVZN = cond(v207)
	d1 = 0
	CVZN = cond(d1)
	v208 = (byte) d0
	d1 = DPB(d1, v208, 0)
	CVZN = cond(v208)
	v209 = d1
	Mem0[a7 + 56:word32] = v209
	CVZN = cond(v209)
	v210 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v210
	CVZN = cond(d1)
	goto l00003458
	// succ:  l00003458
l0000344A:
	a7 = a7 - 4
	v215 = a2
	Mem0[a7:word32] = v215
	CVZN = cond(v215)
	call fn00003CE0 (retsize: 4;)
	v216 = d0
	Mem0[a7 + 56:word32] = v216
	CVZN = cond(v216)
	a7 = a7 + 4
	// succ:  l00003458
l00003458:
	v212 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v212
	CVZN = cond(v212)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v213 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v213, 0)
	CVZN = cond(v213)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C4
	Z = __btst(Mem0[a0 + 1 + (int32) ((int16) d0):byte], 0x0000)
	branch Test(EQ,Z) l0000347E
	// succ:  l0000347A l0000347E
l0000347A:
	v214 = (byte) d0 | 0x20
	d0 = DPB(d0, v214, 0)
	ZN = cond(v214)
	C = false
	V = false
	// succ:  l0000347E
l0000347E:
	v217 = d0 - 0x00000078
	CVZN = cond(v217)
	branch Test(NE,Z) l00003516
	// succ:  l00003488 l00003516
l00003488:
	v218 = d6 - d3
	CVZN = cond(v218)
	branch Test(ULT,C) l00003516
	// succ:  l0000348E l00003516
l0000348E:
	a0 = a2 + 24
	v219 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v219
	ZN = cond(v219)
	C = false
	V = false
	a0 = a2 + 20
	v220 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v220
	CVZNX = cond(v220)
	branch Test(LT,CZ) l000034C0
	// succ:  l000034A0 l000034C0
l000034A0:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v221 = a2
	Mem0[a7:word32] = v221
	CVZN = cond(v221)
	a2 = a0
	a2 = a2 + 1
	v222 = a2
	Mem0[a1:word32] = v222
	CVZN = cond(v222)
	v223 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v223
	v224 = Mem0[a0:byte]
	d0 = DPB(d0, v224, 0)
	CVZN = cond(v224)
	a7 = a7 - 4
	v225 = d1
	Mem0[a7:word32] = v225
	CVZN = cond(v225)
	d1 = 0
	CVZN = cond(d1)
	v226 = (byte) d0
	d1 = DPB(d1, v226, 0)
	CVZN = cond(v226)
	v227 = d1
	Mem0[a7 + 56:word32] = v227
	CVZN = cond(v227)
	v228 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v228
	CVZN = cond(d1)
	goto l000034CE
	// succ:  l000034CE
l000034C0:
	a7 = a7 - 4
	v244 = a2
	Mem0[a7:word32] = v244
	CVZN = cond(v244)
	call fn00003CE0 (retsize: 4;)
	v245 = d0
	Mem0[a7 + 56:word32] = v245
	CVZN = cond(v245)
	a7 = a7 + 4
	// succ:  l000034CE
l000034CE:
	v240 = Mem0[a7 + 52:word32]
	Mem0[a7 + 74:word32] = v240
	CVZN = cond(v240)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v241 = (byte) d5
	d0 = DPB(d0, v241, 0)
	CVZN = cond(v241)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v242 = Mem0[a0:byte]
	d0 = DPB(d0, v242, 0)
	CVZN = cond(v242)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000034FA
	// succ:  l000034F4 l000034FA
l000034F4:
	v243 = d6 - d3
	CVZN = cond(v243)
	branch Test(ULT,C) l000034FA
	// succ:  l000034F8 l000034FA
l000034F8:
	d7 = 120
	CVZN = cond(d7)
	// succ:  l000034FA
l000034FA:
	v251 = Mem0[a7 + 74:word32] - 0xFFFFFFFF
	CVZN = cond(v251)
	branch Test(EQ,Z) l00003510
	// succ:  l00003504 l00003510
l00003504:
	a7 = a7 - 4
	v252 = a2
	Mem0[a7:word32] = v252
	CVZN = cond(v252)
	v253 = Mem0[a7 + 78:word32]
	a7 = a7 - 4
	v254 = v253
	Mem0[a7:word32] = v254
	CVZN = cond(v254)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00003510
l00003510:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l00003518
	// succ:  l00003518
l00003516:
	d7 = 111
	CVZN = cond(d7)
	// succ:  l00003518
l00003518:
	v273 = Mem0[a7 + 64:word32] - 0xFFFFFFFF
	CVZN = cond(v273)
	branch Test(EQ,Z) l0000352E
	// succ:  l00003522 l0000352E
l00003522:
	a7 = a7 - 4
	v274 = a2
	Mem0[a7:word32] = v274
	CVZN = cond(v274)
	v275 = Mem0[a7 + 68:word32]
	a7 = a7 - 4
	v276 = v275
	Mem0[a7:word32] = v276
	CVZN = cond(v276)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l0000352E
l0000352E:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l00003572
	// succ:  l00003572
l00003534:
	v278 = (byte) d5
	d0 = DPB(d0, v278, 0)
	CVZN = cond(v278)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v279 = Mem0[a0:byte]
	d0 = DPB(d0, v279, 0)
	CVZN = cond(v279)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00003572
	// succ:  l00003550 l00003572
l00003550:
	v280 = (byte) d5
	d0 = DPB(d0, v280, 0)
	CVZN = cond(v280)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v281 = Mem0[a0:byte]
	d0 = DPB(d0, v281, 0)
	CVZN = cond(v281)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003572
	// succ:  l0000356C l00003572
l0000356C:
	v282 = d6 - d3
	CVZN = cond(v282)
	branch Test(ULT,C) l00003572
	// succ:  l00003570 l00003572
l00003570:
	d7 = 120
	CVZN = cond(d7)
	// succ:  l00003572
l00003572:
	v283 = (byte) d7 - 0x78
	CVZN = cond(v283)
	branch Test(NE,Z) l000036A6
	// succ:  l0000357A l000036A6
l0000357A:
	v284 = d5 - 0x00000030
	CVZN = cond(v284)
	branch Test(NE,Z) l000036A6
	// succ:  l00003584 l000036A6
l00003584:
	v285 = d6 - d3
	CVZN = cond(v285)
	branch Test(ULT,C) l000036A6
	// succ:  l0000358A l000036A6
l0000358A:
	a0 = a2 + 24
	v286 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v286
	ZN = cond(v286)
	C = false
	V = false
	a0 = a2 + 20
	v287 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v287
	CVZNX = cond(v287)
	branch Test(LT,CZ) l000035BC
	// succ:  l0000359C l000035BC
l0000359C:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v288 = a2
	Mem0[a7:word32] = v288
	CVZN = cond(v288)
	a2 = a0
	a2 = a2 + 1
	v289 = a2
	Mem0[a1:word32] = v289
	CVZN = cond(v289)
	v290 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v290
	v291 = Mem0[a0:byte]
	d0 = DPB(d0, v291, 0)
	CVZN = cond(v291)
	a7 = a7 - 4
	v292 = d1
	Mem0[a7:word32] = v292
	CVZN = cond(v292)
	d1 = 0
	CVZN = cond(d1)
	v293 = (byte) d0
	d1 = DPB(d1, v293, 0)
	CVZN = cond(v293)
	v294 = d1
	Mem0[a7 + 56:word32] = v294
	CVZN = cond(v294)
	v295 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v295
	CVZN = cond(d1)
	goto l000035CA
	// succ:  l000035CA
l000035BC:
	a7 = a7 - 4
	v299 = a2
	Mem0[a7:word32] = v299
	CVZN = cond(v299)
	call fn00003CE0 (retsize: 4;)
	v300 = d0
	Mem0[a7 + 56:word32] = v300
	CVZN = cond(v300)
	a7 = a7 + 4
	// succ:  l000035CA
l000035CA:
	v296 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v296
	CVZN = cond(v296)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v297 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v297, 0)
	CVZN = cond(v297)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C4
	Z = __btst(Mem0[a0 + 1 + (int32) ((int16) d0):byte], 0x0000)
	branch Test(EQ,Z) l000035F0
	// succ:  l000035EC l000035F0
l000035EC:
	v298 = (byte) d0 | 0x20
	d0 = DPB(d0, v298, 0)
	ZN = cond(v298)
	C = false
	V = false
	// succ:  l000035F0
l000035F0:
	v301 = d0 - 0x00000078
	CVZN = cond(v301)
	branch Test(NE,Z) l0000368C
	// succ:  l000035FA l0000368C
l000035FA:
	v302 = d6 - d3
	CVZN = cond(v302)
	branch Test(ULT,C) l0000368C
	// succ:  l00003600 l0000368C
l00003600:
	a0 = a2 + 24
	v303 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v303
	ZN = cond(v303)
	C = false
	V = false
	a0 = a2 + 20
	v304 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v304
	CVZNX = cond(v304)
	branch Test(LT,CZ) l00003632
	// succ:  l00003612 l00003632
l00003612:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v305 = a2
	Mem0[a7:word32] = v305
	CVZN = cond(v305)
	a2 = a0
	a2 = a2 + 1
	v306 = a2
	Mem0[a1:word32] = v306
	CVZN = cond(v306)
	v307 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v307
	v308 = Mem0[a0:byte]
	d0 = DPB(d0, v308, 0)
	CVZN = cond(v308)
	a7 = a7 - 4
	v309 = d1
	Mem0[a7:word32] = v309
	CVZN = cond(v309)
	d1 = 0
	CVZN = cond(d1)
	v310 = (byte) d0
	d1 = DPB(d1, v310, 0)
	CVZN = cond(v310)
	v311 = d1
	Mem0[a7 + 56:word32] = v311
	CVZN = cond(v311)
	v312 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v312
	CVZN = cond(d1)
	goto l00003640
	// succ:  l00003640
l00003632:
	a7 = a7 - 4
	v420 = a2
	Mem0[a7:word32] = v420
	CVZN = cond(v420)
	call fn00003CE0 (retsize: 4;)
	v421 = d0
	Mem0[a7 + 56:word32] = v421
	CVZN = cond(v421)
	a7 = a7 + 4
	// succ:  l00003640
l00003640:
	v320 = Mem0[a7 + 52:word32]
	Mem0[a7 + 74:word32] = v320
	CVZN = cond(v320)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v321 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v321, 0)
	CVZN = cond(v321)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v322 = Mem0[a0:byte]
	d0 = DPB(d0, v322, 0)
	CVZN = cond(v322)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003672
	// succ:  l00003668 l00003672
l00003668:
	v323 = d6 - d3
	CVZN = cond(v323)
	branch Test(ULT,C) l00003672
	// succ:  l0000366C l00003672
l0000366C:
	d5 = Mem0[a7 + 74:word32]
	CVZN = cond(d5)
	goto l000036A6
	// succ:  l000036A6
l00003672:
	v401 = Mem0[a7 + 74:word32] - 0xFFFFFFFF
	CVZN = cond(v401)
	branch Test(EQ,Z) l00003688
	// succ:  l0000367C l00003688
l0000367C:
	a7 = a7 - 4
	v402 = a2
	Mem0[a7:word32] = v402
	CVZN = cond(v402)
	v403 = Mem0[a7 + 78:word32]
	a7 = a7 - 4
	v404 = v403
	Mem0[a7:word32] = v404
	CVZN = cond(v404)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00003688
l00003688:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l0000368C
l0000368C:
	v316 = Mem0[a7 + 64:word32] - 0xFFFFFFFF
	CVZN = cond(v316)
	branch Test(EQ,Z) l000036A2
	// succ:  l00003696 l000036A2
l00003696:
	a7 = a7 - 4
	v317 = a2
	Mem0[a7:word32] = v317
	CVZN = cond(v317)
	v318 = Mem0[a7 + 68:word32]
	a7 = a7 - 4
	v319 = v318
	Mem0[a7:word32] = v319
	CVZN = cond(v319)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l000036A2
l000036A2:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l000036A6
l000036A6:
	v313 = (byte) d7 - 0x78
	CVZN = cond(v313)
	branch Test(EQ,Z) l000036B2
	// succ:  l000036AC l000036B2
l000036AC:
	v314 = (byte) d7 - 0x58
	CVZN = cond(v314)
	branch Test(NE,Z) l000036BC
	// succ:  l000036B2 l000036BC
l000036B2:
	v315 = 0x00000010
	Mem0[a7 + 64:word32] = v315
	CVZN = cond(v315)
	goto l000036DA
	// succ:  l000036DA
l000036BC:
	v418 = (byte) d7 - 0x6F
	CVZN = cond(v418)
	branch Test(NE,Z) l000036CC
	// succ:  l000036C2 l000036CC
l000036C2:
	v419 = 0x00000008
	Mem0[a7 + 52:word32] = v419
	CVZN = cond(v419)
	goto l000036D4
	// succ:  l000036D4
l000036CC:
	v422 = 0x0000000A
	Mem0[a7 + 52:word32] = v422
	CVZN = cond(v422)
	// succ:  l000036D4
l000036D4:
	v423 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v423
	CVZN = cond(v423)
	// succ:  l000036DA
l000036DA:
	v324 = Mem0[a7 + 64:word32]
	Mem0[a7 + 114:word32] = v324
	CVZN = cond(v324)
	v325 = (byte) d5
	d0 = DPB(d0, v325, 0)
	CVZN = cond(v325)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v326 = Mem0[a0:byte]
	d0 = DPB(d0, v326, 0)
	CVZN = cond(v326)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	v327 = d2
	Mem0[a7 + 132:word32] = v327
	CVZN = cond(v327)
	v328 = d4
	Mem0[a7 + 52:word32] = v328
	CVZN = cond(v328)
	v329 = (byte) d7
	Mem0[a7 + 74:byte] = v329
	CVZN = cond(v329)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003942
	// succ:  l0000370C l00003942
l0000370C:
	v330 = Mem0[a7 + 114:word32] - 0x0000000A
	CVZN = cond(v330)
	branch Test(NE,Z) l00003742
	// succ:  l00003716 l00003742
l00003716:
	v331 = (byte) d5
	d0 = DPB(d0, v331, 0)
	CVZN = cond(v331)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v332 = Mem0[a0:byte]
	d0 = DPB(d0, v332, 0)
	CVZN = cond(v332)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	v333 = d2
	Mem0[a7 + 132:word32] = v333
	CVZN = cond(v333)
	v334 = d4
	Mem0[a7 + 52:word32] = v334
	CVZN = cond(v334)
	v335 = (byte) d7
	Mem0[a7 + 74:byte] = v335
	CVZN = cond(v335)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003942
	// succ:  l00003742 l00003942
l00003742:
	v336 = Mem0[a7 + 114:word32] - 0x00000008
	CVZN = cond(v336)
	branch Test(NE,Z) l00003762
	// succ:  l0000374C l00003762
l0000374C:
	v337 = d2
	Mem0[a7 + 132:word32] = v337
	CVZN = cond(v337)
	v338 = d4
	Mem0[a7 + 52:word32] = v338
	CVZN = cond(v338)
	v339 = (byte) d7
	Mem0[a7 + 74:byte] = v339
	CVZN = cond(v339)
	v340 = d5 - 0x00000037
	CVZN = cond(v340)
	branch Test(GT,VZN) l00003942
	// succ:  l00003762 l00003942
l00003762:
	v341 = d2
	Mem0[a7 + 132:word32] = v341
	CVZN = cond(v341)
	v342 = d4
	Mem0[a7 + 52:word32] = v342
	CVZN = cond(v342)
	v343 = d6
	Mem0[a7 + 64:word32] = v343
	CVZN = cond(v343)
	v344 = (byte) d7
	Mem0[a7 + 74:byte] = v344
	CVZN = cond(v344)
	v345 = d6 - d3
	CVZN = cond(v345)
	branch Test(ULT,C) l00003942
	// succ:  l00003778 l00003942
l00003778:
	d7 = Mem0[a7 + 114:word32]
	CVZN = cond(d7)
	a4 = Mem0[a7 + 64:word32]
	// succ:  l00003780
l00003780:
	d1 = d7
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v346 = d2
	Mem0[a7:word32] = v346
	CVZN = cond(v346)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v347 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v347
	CVZN = cond(d2)
	a7 = a7 - 4
	v348 = d0
	Mem0[a7:word32] = v348
	CVZN = cond(v348)
	a7 = a7 - 4
	v349 = d1
	Mem0[a7:word32] = v349
	CVZN = cond(v349)
	a7 = a7 - 4
	v350 = a1
	Mem0[a7:word32] = v350
	CVZN = cond(v350)
	v351 = Mem0[a7 + 60:word32]
	a7 = a7 - 4
	v352 = v351
	Mem0[a7:word32] = v352
	CVZN = cond(v352)
	v353 = Mem0[a7 + 60:word32]
	a7 = a7 - 4
	v354 = v353
	Mem0[a7:word32] = v354
	CVZN = cond(v354)
	a7 = a7 - 4
	Mem0[a7:word32] = d1
	a7 = a7 - 4
	Mem0[a7:word32] = d0
	call fn00003C60 (retsize: 4;)
	a7 = a7 + 16
	v355 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v355
	v356 = d0
	Mem0[a7 + 72:word32] = v356
	CVZN = cond(v356)
	v357 = d1
	Mem0[a7 + 76:word32] = v357
	CVZN = cond(v357)
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	v358 = (byte) d5
	d0 = DPB(d0, v358, 0)
	CVZN = cond(v358)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v359 = Mem0[a0:byte]
	d0 = DPB(d0, v359, 0)
	CVZN = cond(v359)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000037E0
	// succ:  l000037D6 l000037E0
l000037D6:
	d4 = d5
	CVZN = cond(d4)
	d4 = d4 - 0x00000030
	CVZNX = cond(d4)
	goto l000037E2
	// succ:  l000037E2
l000037E0:
	d4 = 0
	CVZN = cond(d4)
	// succ:  l000037E2
l000037E2:
	d1 = d4
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v360 = d2
	Mem0[a7:word32] = v360
	CVZN = cond(v360)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v361 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v361
	CVZN = cond(d2)
	a7 = a7 - 4
	v362 = d2
	Mem0[a7:word32] = v362
	CVZN = cond(v362)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 72:word32]
	CVZNX = cond(d2)
	v363 = d2
	Mem0[a7 + 52:word32] = v363
	CVZN = cond(v363)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 4
	v364 = d3
	Mem0[a7:word32] = v364
	CVZN = cond(v364)
	d3 = Mem0[a7 + 72:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v366 = d2
	Mem0[a7 + 52:word32] = v366
	CVZN = cond(v366)
	v367 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v367
	CVZN = cond(d3)
	v368 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v368
	CVZN = cond(d2)
	v369 = (byte) d5
	d0 = DPB(d0, v369, 0)
	CVZN = cond(v369)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v370 = Mem0[a0:byte]
	d0 = DPB(d0, v370, 0)
	CVZN = cond(v370)
	d0 = d0 & 0x00000001
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003832
	// succ:  l00003828 l00003832
l00003828:
	d6 = d5
	CVZN = cond(d6)
	d6 = d6 - 0x00000037
	CVZNX = cond(d6)
	goto l00003834
	// succ:  l00003834
l00003832:
	d6 = 0
	CVZN = cond(d6)
	// succ:  l00003834
l00003834:
	d1 = d6
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v371 = d2
	Mem0[a7:word32] = v371
	CVZN = cond(v371)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v372 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v372
	CVZN = cond(d2)
	a7 = a7 - 4
	v373 = d2
	Mem0[a7:word32] = v373
	CVZN = cond(v373)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 52:word32]
	CVZNX = cond(d2)
	v374 = d2
	Mem0[a7 + 72:word32] = v374
	CVZN = cond(v374)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 4
	v375 = d3
	Mem0[a7:word32] = v375
	CVZN = cond(v375)
	d3 = Mem0[a7 + 52:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v376 = d2
	Mem0[a7 + 72:word32] = v376
	CVZN = cond(v376)
	v377 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v377
	CVZN = cond(d3)
	v378 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v378
	CVZN = cond(d2)
	v379 = (byte) d5
	d0 = DPB(d0, v379, 0)
	CVZN = cond(v379)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v380 = Mem0[a0:byte]
	d0 = DPB(d0, v380, 0)
	CVZN = cond(v380)
	d0 = d0 & 0x00000002
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003884
	// succ:  l0000387A l00003884
l0000387A:
	d2 = d5
	CVZN = cond(d2)
	d2 = d2 - 0x00000057
	CVZNX = cond(d2)
	goto l00003886
	// succ:  l00003886
l00003884:
	d2 = 0
	CVZN = cond(d2)
	// succ:  l00003886
l00003886:
	d1 = d2
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v381 = d2
	Mem0[a7:word32] = v381
	CVZN = cond(v381)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v382 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v382
	CVZN = cond(d2)
	a7 = a7 - 4
	v383 = d2
	Mem0[a7:word32] = v383
	CVZN = cond(v383)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 72:word32]
	CVZNX = cond(d2)
	v384 = d2
	Mem0[a7 + 52:word32] = v384
	CVZN = cond(v384)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 4
	v385 = d3
	Mem0[a7:word32] = v385
	CVZN = cond(v385)
	d3 = Mem0[a7 + 72:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v386 = d2
	Mem0[a7 + 52:word32] = v386
	CVZN = cond(v386)
	v387 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v387
	CVZN = cond(d3)
	v388 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v388
	CVZN = cond(d2)
	a0 = a2 + 24
	d0 = 1
	CVZN = cond(d0)
	v389 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v389
	ZN = cond(v389)
	C = false
	V = false
	a0 = a2 + 20
	v390 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v390
	CVZNX = cond(v390)
	branch Test(LT,CZ) l000038D8
	// succ:  l000038C0 l000038D8
l000038C0:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v391 = a2
	Mem0[a7:word32] = v391
	CVZN = cond(v391)
	a2 = a0
	a2 = a2 + 1
	v392 = a2
	Mem0[a1:word32] = v392
	CVZN = cond(v392)
	v393 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v393
	v394 = Mem0[a0:byte]
	d0 = DPB(d0, v394, 0)
	CVZN = cond(v394)
	d1 = 0
	CVZN = cond(d1)
	v395 = (byte) d0
	d1 = DPB(d1, v395, 0)
	CVZN = cond(v395)
	goto l000038E4
	// succ:  l000038E4
l000038D8:
	a7 = a7 - 4
	v414 = a2
	Mem0[a7:word32] = v414
	CVZN = cond(v414)
	call fn00003CE0 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l000038E4
l000038E4:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	v405 = Mem0[a7 + 52:word32] + 0x00000001
	Mem0[a7 + 52:word32] = v405
	CVZNX = cond(v405)
	v406 = (byte) d1
	d0 = DPB(d0, v406, 0)
	CVZN = cond(v406)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v407 = Mem0[a0:byte]
	d0 = DPB(d0, v407, 0)
	CVZN = cond(v407)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003942
	// succ:  l00003908 l00003942
l00003908:
	v408 = d7 - 0x0000000A
	CVZN = cond(v408)
	branch Test(NE,Z) l0000392C
	// succ:  l00003910 l0000392C
l00003910:
	v409 = (byte) d5
	d0 = DPB(d0, v409, 0)
	CVZN = cond(v409)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v410 = Mem0[a0:byte]
	d0 = DPB(d0, v410, 0)
	CVZN = cond(v410)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003942
	// succ:  l0000392C l00003942
l0000392C:
	v411 = d7 - 0x00000008
	CVZN = cond(v411)
	branch Test(NE,Z) l0000393C
	// succ:  l00003934 l0000393C
l00003934:
	v412 = d5 - 0x00000037
	CVZN = cond(v412)
	branch Test(GT,VZN) l00003942
	// succ:  l0000393C l00003942
l0000393C:
	v413 = a4 - d3
	CVZN = cond(v413)
	branch Test(UGE,C) l00003780
	// succ:  l00003942 l00003780
l00003942:
	v396 = Mem0[a7 + 74:byte]
	d7 = DPB(d7, v396, 0)
	CVZN = cond(v396)
	d4 = Mem0[a7 + 52:word32]
	CVZN = cond(d4)
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 110:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003976
	// succ:  l00003954 l00003976
l00003954:
	v397 = d3 - 0x00000002
	CVZN = cond(v397)
	branch Test(NE,Z) l00003976
	// succ:  l0000395C l00003976
l0000395C:
	v398 = d5 - 0xFFFFFFFF
	CVZN = cond(v398)
	branch Test(EQ,Z) l0000396E
	// succ:  l00003964 l0000396E
l00003964:
	a7 = a7 - 4
	v399 = a2
	Mem0[a7:word32] = v399
	CVZN = cond(v399)
	a7 = a7 - 4
	v400 = d5
	Mem0[a7:word32] = v400
	CVZN = cond(v400)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l0000396E
l0000396E:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	d5 = Mem0[a7 + 110:word32]
	CVZN = cond(d5)
	// succ:  l00003976
l00003976:
	v415 = d5 - 0xFFFFFFFF
	CVZN = cond(v415)
	branch Test(EQ,Z) l00003988
	// succ:  l0000397E l00003988
l0000397E:
	a7 = a7 - 4
	v416 = a2
	Mem0[a7:word32] = v416
	CVZN = cond(v416)
	a7 = a7 - 4
	v417 = d5
	Mem0[a7:word32] = v417
	CVZN = cond(v417)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00003988
l00003988:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003B36
	// succ:  l00003994 l00003B36
l00003994:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003B36
	// succ:  l0000399A l00003B36
l0000399A:
	v424 = (byte) d7 - 0x75
	CVZN = cond(v424)
	branch Test(NE,Z) l00003A5C
	// succ:  l000039A2 l00003A5C
l000039A2:
	a7 = a7 - 4
	v425 = d0
	Mem0[a7:word32] = v425
	CVZN = cond(v425)
	v426 = Mem0[a7 + 76:byte]
	d0 = DPB(d0, v426, 0)
	CVZN = cond(v426)
	v427 = (byte) d0 - 0x01
	d0 = DPB(d0, v427, 0)
	CVZNX = cond(v427)
	v428 = (byte) d0
	Mem0[a7 + 56:byte] = v428
	CVZN = cond(v428)
	v429 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v429
	CVZN = cond(d0)
	ZN = cond(Mem0[a7 + 52:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000039CC
	// succ:  l000039B6 l000039CC
l000039B6:
	v430 = Mem0[a7 + 52:byte] - 0x01
	Mem0[a7 + 52:byte] = v430
	CVZNX = cond(v430)
	branch Test(EQ,Z) l00003A24
	// succ:  l000039BC l00003A24
l000039BC:
	v431 = Mem0[a7 + 52:byte] - 0x66
	Mem0[a7 + 52:byte] = v431
	CVZNX = cond(v431)
	branch Test(EQ,Z) l00003A08
	// succ:  l000039C4 l00003A08
l000039C4:
	v432 = Mem0[a7 + 52:byte] - 0x04
	Mem0[a7 + 52:byte] = v432
	CVZNX = cond(v432)
	branch Test(EQ,Z) l000039EC
	// succ:  l000039CA l000039EC
l000039CA:
	goto l00003A40
	// succ:  l00003A40
l000039CC:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v433 = Mem0[a7 + 48:word32]
	Mem0[a0 + 4:word32] = v433
	CVZN = cond(v433)
	v434 = Mem0[a7 + 44:word32]
	Mem0[a0:word32] = v434
	CVZN = cond(v434)
	goto l00003B32
	// succ:  l00003B32
l000039EC:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v436 = d0
	Mem0[a0:word32] = v436
	CVZN = cond(v436)
	goto l00003B32
	// succ:  l00003B32
l00003A08:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v438 = (word16) d0
	Mem0[a0:word16] = v438
	CVZN = cond(v438)
	goto l00003B32
	// succ:  l00003B32
l00003A24:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v439 = (byte) d0
	Mem0[a0:byte] = v439
	CVZN = cond(v439)
	goto l00003B32
	// succ:  l00003B32
l00003A40:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v435 = d0
	Mem0[a0:word32] = v435
	CVZN = cond(v435)
	goto l00003B32
	// succ:  l00003B32
l00003A5C:
	v440 = Mem0[a7 + 110:word32] - 0x0000002D
	CVZN = cond(v440)
	branch Test(NE,Z) l00003A78
	// succ:  l00003A66 l00003A78
l00003A66:
	v441 = a7 + 44
	d0 = Mem0[v441:word32]
	v441 = v441 + 4
	d1 = Mem0[v441:word32]
	v441 = v441 + 4
	d1 = -d1
	CVZNX = cond(d1)
	d0 = -d0 - X
	CVZNX = cond(d0)
	v442 = a7 + 52
	a6 = Mem0[v442:word32]
	v442 = v442 + 0x00000004
	a7 = Mem0[v442:word32]
	v442 = v442 + 0x00000004
	goto l00003A84
	// succ:  l00003A84
l00003A78:
	v525 = Mem0[a7 + 48:word32]
	Mem0[a7 + 56:word32] = v525
	CVZN = cond(v525)
	v526 = Mem0[a7 + 44:word32]
	Mem0[a7 + 52:word32] = v526
	CVZN = cond(v526)
	// succ:  l00003A84
l00003A84:
	a7 = a7 - 4
	v446 = d0
	Mem0[a7:word32] = v446
	CVZN = cond(v446)
	v447 = Mem0[a7 + 76:byte]
	d0 = DPB(d0, v447, 0)
	CVZN = cond(v447)
	v448 = (byte) d0 - 0x01
	d0 = DPB(d0, v448, 0)
	CVZNX = cond(v448)
	v449 = (byte) d0
	Mem0[a7 + 48:byte] = v449
	CVZN = cond(v449)
	v450 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v450
	CVZN = cond(d0)
	ZN = cond(Mem0[a7 + 44:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00003AAE
	// succ:  l00003A98 l00003AAE
l00003A98:
	v451 = Mem0[a7 + 44:byte] - 0x01
	Mem0[a7 + 44:byte] = v451
	CVZNX = cond(v451)
	branch Test(EQ,Z) l00003B00
	// succ:  l00003A9E l00003B00
l00003A9E:
	v452 = Mem0[a7 + 44:byte] - 0x66
	Mem0[a7 + 44:byte] = v452
	CVZNX = cond(v452)
	branch Test(EQ,Z) l00003AE6
	// succ:  l00003AA6 l00003AE6
l00003AA6:
	v453 = Mem0[a7 + 44:byte] - 0x04
	Mem0[a7 + 44:byte] = v453
	CVZNX = cond(v453)
	branch Test(EQ,Z) l00003ACC
	// succ:  l00003AAC l00003ACC
l00003AAC:
	goto l00003B1A
	// succ:  l00003B1A
l00003AAE:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v456 = Mem0[a7 + 56:word32]
	Mem0[a0 + 4:word32] = v456
	CVZN = cond(v456)
	v457 = Mem0[a7 + 52:word32]
	Mem0[a0:word32] = v457
	CVZN = cond(v457)
	goto l00003B32
	// succ:  l00003B32
l00003ACC:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v469 = d0
	Mem0[a0:word32] = v469
	CVZN = cond(v469)
	goto l00003B32
	// succ:  l00003B32
l00003AE6:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v458 = (word16) d0
	Mem0[a0:word16] = v458
	CVZN = cond(v458)
	goto l00003B32
	// succ:  l00003B32
l00003B00:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v524 = (byte) d0
	Mem0[a0:byte] = v524
	CVZN = cond(v524)
	goto l00003B32
	// succ:  l00003B32
l00003B1A:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v459 = d0
	Mem0[a0:word32] = v459
	CVZN = cond(v459)
	// succ:  l00003B32
l00003B32:
	v437 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v437
	CVZNX = cond(v437)
	// succ:  l00003B36
l00003B36:
	a4 = a3
	goto l00003C34
	// succ:  l00003C34
l00003B3C:
	v85 = Mem0[a4:byte]
	d0 = DPB(d0, v85, 0)
	CVZN = cond(v85)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v86 = Mem0[a0:byte]
	d0 = DPB(d0, v86, 0)
	CVZN = cond(v86)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003BC8
	// succ:  l00003B58 l00003BC8
l00003B58:
	a0 = a2 + 24
	v87 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v87
	ZN = cond(v87)
	C = false
	V = false
	a0 = a2 + 20
	v88 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v88
	CVZNX = cond(v88)
	branch Test(LT,CZ) l00003B82
	// succ:  l00003B6A l00003B82
l00003B6A:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v89 = a2
	Mem0[a7:word32] = v89
	CVZN = cond(v89)
	a2 = a0
	a2 = a2 + 1
	v90 = a2
	Mem0[a1:word32] = v90
	CVZN = cond(v90)
	v91 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v91
	v92 = Mem0[a0:byte]
	d0 = DPB(d0, v92, 0)
	CVZN = cond(v92)
	d1 = 0
	CVZN = cond(d1)
	v93 = (byte) d0
	d1 = DPB(d1, v93, 0)
	CVZN = cond(v93)
	goto l00003B8E
	// succ:  l00003B8E
l00003B82:
	a7 = a7 - 4
	v101 = a2
	Mem0[a7:word32] = v101
	CVZN = cond(v101)
	call fn00003CE0 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l00003B8E
l00003B8E:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v96 = (byte) d1
	d0 = DPB(d0, v96, 0)
	CVZN = cond(v96)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x000028C5
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v97 = Mem0[a0:byte]
	d0 = DPB(d0, v97, 0)
	CVZN = cond(v97)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00003B58
	// succ:  l00003BB0 l00003B58
l00003BB0:
	v98 = d5 - 0xFFFFFFFF
	CVZN = cond(v98)
	branch Test(EQ,Z) l00003BC2
	// succ:  l00003BB8 l00003BC2
l00003BB8:
	a7 = a7 - 4
	v99 = a2
	Mem0[a7:word32] = v99
	CVZN = cond(v99)
	a7 = a7 - 4
	v100 = d5
	Mem0[a7:word32] = v100
	CVZN = cond(v100)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00003BC2
l00003BC2:
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	d3 = 1
	CVZN = cond(d3)
	goto l00003C32
	// succ:  l00003C32
l00003BC8:
	a0 = a2 + 24
	v102 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v102
	ZN = cond(v102)
	C = false
	V = false
	a0 = a2 + 20
	v103 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v103
	CVZNX = cond(v103)
	branch Test(LT,CZ) l00003BFA
	// succ:  l00003BDA l00003BFA
l00003BDA:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v104 = a2
	Mem0[a7:word32] = v104
	CVZN = cond(v104)
	a2 = a0
	a2 = a2 + 1
	v105 = a2
	Mem0[a1:word32] = v105
	CVZN = cond(v105)
	v106 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v106
	v107 = Mem0[a0:byte]
	d0 = DPB(d0, v107, 0)
	CVZN = cond(v107)
	a7 = a7 - 4
	v108 = d1
	Mem0[a7:word32] = v108
	CVZN = cond(v108)
	d1 = 0
	CVZN = cond(d1)
	v109 = (byte) d0
	d1 = DPB(d1, v109, 0)
	CVZN = cond(v109)
	v110 = d1
	Mem0[a7 + 48:word32] = v110
	CVZN = cond(v110)
	v111 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v111
	CVZN = cond(d1)
	goto l00003C08
	// succ:  l00003C08
l00003BFA:
	a7 = a7 - 4
	v118 = a2
	Mem0[a7:word32] = v118
	CVZN = cond(v118)
	call fn00003CE0 (retsize: 4;)
	v119 = d0
	Mem0[a7 + 48:word32] = v119
	CVZN = cond(v119)
	a7 = a7 + 4
	// succ:  l00003C08
l00003C08:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v113 = Mem0[a4:byte]
	d0 = DPB(d0, v113, 0)
	CVZN = cond(v113)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	v114 = d0 - Mem0[a7 + 44:word32]
	CVZN = cond(v114)
	branch Test(EQ,Z) l00003C32
	// succ:  l00003C1C l00003C32
l00003C1C:
	v115 = d5 - 0xFFFFFFFF
	CVZN = cond(v115)
	branch Test(EQ,Z) l00003C2E
	// succ:  l00003C24 l00003C2E
l00003C24:
	a7 = a7 - 4
	v116 = a2
	Mem0[a7:word32] = v116
	CVZN = cond(v116)
	a7 = a7 - 4
	v117 = d5
	Mem0[a7:word32] = v117
	CVZN = cond(v117)
	call fn00002C0C (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00003C2E
l00003C2E:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l00003C32
l00003C32:
	a4 = a4 + 1
	// succ:  l00003C34
l00003C34:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003C3E
	// succ:  l00003C38 l00003C3E
l00003C38:
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002C5E
	// succ:  l00003C3E l00002C5E
l00003C3E:
	v50 = d5 - 0xFFFFFFFF
	CVZN = cond(v50)
	branch Test(NE,Z) l00003C50
	// succ:  l00003C46 l00003C50
l00003C46:
	ZN = cond(Mem0[a7 + 60:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003C50
	// succ:  l00003C4C l00003C50
l00003C4C:
	d0 = d5
	CVZN = cond(d0)
	goto l00003C54
	// succ:  l00003C54
l00003C50:
	d0 = Mem0[a7 + 60:word32]
	CVZN = cond(d0)
	// succ:  l00003C54
l00003C54:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a7 + 76
	return
	// succ:  fn00002C3C_exit
fn00002C3C_exit:


// fn00003C60
// Return size: 4
define fn00003C60
fn00003C60_entry:
	// succ:  l00003C60
l00003C60:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d5 = Mem0[a7 + 28:word32]
	CVZN = cond(d5)
	d6 = Mem0[a7 + 36:word32]
	CVZN = cond(d6)
	d0 = d5
	CVZN = cond(d0)
	d1 = d6
	CVZN = cond(d1)
	d2 = d0
	CVZN = cond(d2)
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d3 = d1
	CVZN = cond(d3)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v14 = (word16) d2
	d4 = DPB(d4, v14, 0)
	CVZN = cond(v14)
	d4 = d4 *u (word16) d3
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d3 = d3 *u (word16) d0
	VZN = cond(d3)
	C = false
	d1 = d1 *u (word16) d0
	VZN = cond(d1)
	C = false
	d0 = d4
	CVZN = cond(d0)
	v16 = (word16) d0 ^ (word16) d0
	d0 = DPB(d0, v16, 0)
	ZN = cond(v16)
	C = false
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d2 = d2 + d0
	CVZNX = cond(d2)
	d2 = d2 + d3
	CVZNX = cond(d2)
	branch Test(UGE,C) l00003C94
	// succ:  l00003C8E l00003C94
l00003C8E:
	d1 = d1 + 0x00010000
	CVZNX = cond(d1)
	// succ:  l00003C94
l00003C94:
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	v18 = (word16) d2
	d0 = DPB(d0, v18, 0)
	CVZN = cond(v18)
	v19 = (word16) d4
	d2 = DPB(d2, v19, 0)
	CVZN = cond(v19)
	d0 = d0 + d1
	CVZNX = cond(d0)
	d1 = d2
	CVZN = cond(d1)
	d2 = Mem0[a7 + 32:word32]
	CVZN = cond(d2)
	d3 = d2
	CVZN = cond(d3)
	d4 = d5
	CVZN = cond(d4)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 *u (word16) d5
	VZN = cond(d3)
	C = false
	d4 = d4 *u (word16) d2
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d5
	VZN = cond(d2)
	C = false
	v20 = (word16) d3 + (word16) d4
	d3 = DPB(d3, v20, 0)
	CVZNX = cond(v20)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v21 = (word16) d3 ^ (word16) d3
	d3 = DPB(d3, v21, 0)
	ZN = cond(v21)
	C = false
	V = false
	d2 = d2 + d3
	CVZNX = cond(d2)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d2 = Mem0[a7 + 24:word32]
	CVZN = cond(d2)
	d3 = d2
	CVZN = cond(d3)
	d4 = d6
	CVZN = cond(d4)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 *u (word16) d6
	VZN = cond(d3)
	C = false
	d4 = d4 *u (word16) d2
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d6
	VZN = cond(d2)
	C = false
	v22 = (word16) d3 + (word16) d4
	d3 = DPB(d3, v22, 0)
	CVZNX = cond(v22)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v23 = (word16) d3 ^ (word16) d3
	d3 = DPB(d3, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
	d2 = d2 + d3
	CVZNX = cond(d2)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00003C60_exit
fn00003C60_exit:


// fn00003CE0
// Return size: 4
define fn00003CE0
fn00003CE0_entry:
	// succ:  l00003CE0
l00003CE0:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a2 = Mem0[a7 + 36:word32]
	call fn00002530 (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00003CF8
	// succ:  l00003CF2 l00003CF8
l00003CF2:
	d0 = -1
	CVZN = cond(d0)
	goto l00003DD6
	// succ:  l00003DD6
l00003CF8:
	d0 = 42
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	d5 = 32
	CVZN = cond(d5)
	v17 = d5 - d0
	CVZN = cond(v17)
	branch Test(EQ,Z) l00003D0A
	// succ:  l00003D04 l00003D0A
l00003D04:
	d0 = -1
	CVZN = cond(d0)
	goto l00003DD6
	// succ:  l00003DD6
l00003D0A:
	a0 = a2 + 24
	d0 = 1
	CVZN = cond(d0)
	v19 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	d0 = 0x00000200
	CVZN = cond(d0)
	d0 = d0 & Mem0[a0:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003D22
	// succ:  l00003D1C l00003D22
l00003D1C:
	call fn00003DDC (retsize: 4;)
	// succ:  l00003D22
l00003D22:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003D40
	// succ:  l00003D28 l00003D40
l00003D28:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003D38
	// succ:  l00003D30 l00003D38
l00003D30:
	d0 = 1
	CVZN = cond(d0)
	v20 = d0
	Mem0[a2 + 28:word32] = v20
	CVZN = cond(v20)
	goto l00003D40
	// succ:  l00003D40
l00003D38:
	v22 = 0x00000400
	Mem0[a2 + 28:word32] = v22
	CVZN = cond(v22)
	// succ:  l00003D40
l00003D40:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003D7C
	// succ:  l00003D46 l00003D7C
l00003D46:
	a1 = a2 + 28
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003D5A
	// succ:  l00003D56 l00003D5A
l00003D56:
	d4 = 2
	CVZN = cond(d4)
	goto l00003D5C
	// succ:  l00003D5C
l00003D5A:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00003D5C
l00003D5C:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + Mem0[a1:word32]
	CVZNX = cond(d0)
	a7 = a7 - 4
	v31 = d0
	Mem0[a7:word32] = v31
	CVZN = cond(v31)
	call fn0000215C (retsize: 4;)
	a3 = d0
	a7 = a7 + 4
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00003D74
	// succ:  l00003D70 l00003D74
l00003D70:
	d0 = -1
	CVZN = cond(d0)
	goto l00003DD6
	// succ:  l00003DD6
l00003D74:
	a1 = a3 + 1
	v35 = a1
	Mem0[a2 + 8:word32] = v35
	CVZN = cond(v35)
	// succ:  l00003D7C
l00003D7C:
	a0 = a2 + 4
	v23 = Mem0[a2 + 8:word32]
	Mem0[a0:word32] = v23
	CVZN = cond(v23)
	d3 = Mem0[a2 + 28:word32]
	CVZN = cond(d3)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E28:word32]
	execPrivate2()
	a0 = a2 + 20
	v25 = d0
	Mem0[a0:word32] = v25
	CVZN = cond(v25)
	v26 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v26
	CVZNX = cond(v26)
	branch Test(GE,VN) l00003DC2
	// succ:  l00003DA0 l00003DC2
l00003DA0:
	d0 = -1
	CVZN = cond(d0)
	v29 = d0 - Mem0[a2 + 20:word32]
	CVZN = cond(v29)
	branch Test(NE,Z) l00003DB2
	// succ:  l00003DA8 l00003DB2
l00003DA8:
	a0 = a2 + 24
	d0 = 8
	CVZN = cond(d0)
	v30 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	goto l00003DBA
	// succ:  l00003DBA
l00003DB2:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v32 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	// succ:  l00003DBA
l00003DBA:
	Mem0[a2 + 20:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l00003DD6
	// succ:  l00003DD6
l00003DC2:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a4 = a0
	a4 = a4 + 1
	v36 = a4
	Mem0[a1:word32] = v36
	CVZN = cond(v36)
	v37 = Mem0[a0:byte]
	d0 = DPB(d0, v37, 0)
	CVZN = cond(v37)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	// succ:  l00003DD6
l00003DD6:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00003CE0_exit
fn00003CE0_exit:


// fn00003DDC
// Return size: 4
define fn00003DDC
fn00003DDC_entry:
	// succ:  l00003DDC
l00003DDC:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a2 = Mem0[0x00003F88:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00003E14
	// succ:  l00003DEA l00003E14
l00003DEA:
	d0 = 0x00000202
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	v10 = d0 - 0x00000202
	CVZN = cond(v10)
	branch Test(NE,Z) l00003E0A
	// succ:  l00003DFC l00003E0A
l00003DFC:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003E0A
	// succ:  l00003E00 l00003E0A
l00003E00:
	a7 = a7 - 4
	v11 = a2
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn000020B0 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l00003E0A
l00003E0A:
	a0 = a2 + 12
	a2 = Mem0[a0:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00003DEA
	// succ:  l00003E14 l00003DEA
l00003E14:
	v12 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v12
	return
	// succ:  fn00003DDC_exit
fn00003DDC_exit:


