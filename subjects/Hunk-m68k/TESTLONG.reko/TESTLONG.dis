void fn00001000(word32 d0, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5
// Preserved: a7 d7
fn00001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001000:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000100A:
	word32 a6_9 = Mem0[0x00000004:word32]
	word32 d2_102 = d0
	word32 a2_290 = a0
	branch Mem0[a6_9 + 20:word16] >=u 0x0024 l00001036
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001020:
	word32 a0_13 = 0x00003D70
	word32 d0_16 = 0x0000000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001030:
	Mem19[a0_13:word32] = 0x00000000
	a0_13 = a0_13 + 4
	d0_16 = d0_16 - 0x00000001
	branch d0_16 != 0x00000000 l00001030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001036:
	Mem30[0x00003D70:word32] = fp
	Mem34[0x00003D74:word32] = a6_9
	word32 d0_36 = FindTask(0x00000000)
	word32 a1_255 = 0x000012BC
	word32 d0_112 = OpenLibrary(0x000012BC, 0)
	branch d0_112 == 0x00000000 l00001226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001226:
	Alert(0x00038007)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001056:
	word32 d4_74
	Mem67[0x00003D78:word32] = d0_112
	branch Mem67[d0_36 + 172:word32] != 0x00000000 l00001066
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001066:
	word32 a0_73 = a0
	d4_74 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000106A:
	branch Mem67[a0_721:byte] != 0x20 l00001072
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001070:
	d4_74 = SEQ(SLICE(d4_74, word16, 16), SLICE(d4_74, word16, 0) + 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001072:
	a0_73 = a0_721 + 1
	a0_721 = a0_73
	branch Mem67[a0_721:byte] != 0x00 l0000106A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001060:
	d4_74 = 2
	d2_102 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001076:
	word32 d0_100 = d4_74 << 0x00000002
	word32 d0_107 = d0_100 + d2_102
	word32 d1_111 = 0x00010001
	d0_112 = AllocMem(d0_107 + 0x00000011, 0x00010001)
	branch d0_112 == 0x00000000 l0000123E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000123E:
	CloseLibrary(Mem67[0x00003D78:word32])
	Alert(0x00010000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000125C:
	branch Mem153[d0_36 + 172:word32] != 0x00000000 l00001268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001262:
	fn00001214(d0_36)
	fn0000126C(d0_112)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001268:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001096:
	word32 dwLoc0C_574
	word32 a0_447
	Mem169[d0_112:word32] = d0_107 + 0x00000011
	Mem173[d0_112 + 12:word32] = d4_74 - 0x00000001
	Mem177[d0_112 + 8:word32] = d0_112 + 16 + d0_100
	Mem179[0x00000000:word32] = 0x00000000
	word32 d0_180 = Mem179[d0_36 + 172:word32]
	branch d0_180 == 0x00000000 l00001190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001190:
	fn00001214(d0_36)
	Mem187[0x00003D7C:word32] = d0_180
	Mem189[0x00003D80:word32] = d0_180
	Mem194[0x00000000:word32] = 0x00000000
	dwLoc0C_574 = d0_180
	word32 d0_197 = Mem194[d0_180 + 36:word32]
	branch d0_197 == 0x00000000 l000011B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011AE:
	Enable()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011B6:
	Supervisor(d0_112)
	Mem209[d0_112 + 4:word32] = d0_197
	d1_111 = 0x000012C8
	branch d0_197 != 0x00000000 l000011D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011D2:
	Mem214[0x00003D84:word32] = d0_197
	Mem216[0x00003D88:word32] = d0_197
	Mem218[0x00003D8C:word32] = d0_197
	Mem221[d0_36 + 156:word32] = d0_197
	Mem223[d0_36 + 160:word32] = d0_197
	word32 d0_227 = Mem223[(d0_197 << 0x00000002) + 8:word32]
	branch d0_227 == 0x00000000 l000011F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F0:
	Mem231[d0_36 + 164:word32] = d0_227
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CE_thunk_fn0000127C:
	word32 a1_717
	word32 a5_718
	fn0000127C(out a1_717, out a5_718)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010B6:
	word32 d0_252 = Mem179[(d0_180 << 0x00000002) + 16:word32]
	a1_255 = Mem179[d0_112 + 8:word32]
	word32 a0_260 = (d0_252 << 0x00000002) + 1
	word32 d0_262 = (uint32) (uint8) Mem179[d0_252 << 0x00000002:byte]
	Mem263[a0_260 + d0_262:byte] = 0x00
	Mem265[d0_112 + 16:word32] = a0_260
	word32 a6_266 = d0_112 + 20
	word32 d3_267 = 1
	word32 a0_272 = a0 + d2_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DA:
	a0_272 = a0_272 - 1
	branch Mem265[a0_272:byte] >u 0x20 l000010E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DE_1:
	word16 v37_280 = SLICE(d2_102, word16, 0)
	d2_102 = SEQ(SLICE(d2_102, word16, 16), v37_280 - 1)
	branch v37_280 != 0x0000 l000010DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E2:
	Mem285[a0_272 + 1:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E6:
	byte v40_292 = Mem291[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v40_292)
	branch v40_292 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010EA:
	branch v40_292 == 0x20 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F0:
	branch v40_292 == 0x09 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F6:
	branch d3_267 - Mem291[d0_112 + 12:word32] == 0x00000000 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010FC:
	Mem313[a6_266:word32] = a1_255
	a6_266 = a6_266 + 4
	d3_267 = SEQ(SLICE(d3_267, word16, 16), SLICE(d3_267, word16, 0) + 0x0001)
	branch v40_292 == 0x22 l0000111A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111A:
	byte v71_324 = Mem323[a2_290:byte]
	word24 v72_327 = SLICE(d1_111, word24, 8)
	a2_290 = a2_290 + 1
	d1_111 = SEQ(v72_327, v71_324)
	branch v71_324 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111E:
	branch v71_324 == 0x22 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001124:
	branch v71_324 != 0x2A l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000112A:
	byte v75_337 = Mem323[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(v72_327, v75_337)
	branch (v75_337 & 0xDF) != 0x4E l0000113C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000113C:
	branch (v75_337 & 0xDF) != 0x45 l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001142:
	d1_111 = 27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001138:
	d1_111 = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001144:
	Mem362[a1_255:byte] = SLICE(d1_111, byte, 0)
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001106:
	Mem366[a1_255:byte] = v40_292
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001108:
	byte v50_371 = Mem370[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v50_371)
	branch v50_371 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001148:
	Mem380[a1_255:byte] = 0x00
	Mem385[a6_266:word32] = 0x00000000
	execPrivate4()
	Mem416[0x00003D84:word32] = d0_262
	execPrivate5()
	Mem418[0x00003D88:word32] = d0_262
	dwLoc0C_574 = d0_112 + 16
	dwLoc10 = d3_267
	branch Mem418[Mem418[0x00003D74:word32] + 20:word16] <u 0x0024 l0000117A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001172:
	word32 v92_428 = Mem418[d0_36 + 224:word32]
	Mem429[0x00003D8C:word32] = v92_428
	branch v92_428 != 0x00000000 l0000117E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117A:
	Mem435[0x00003D8C:word32] = d0_262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117E:
	branch Mem439[d0_36 + 8:byte] != 0x0D l000011F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F8:
	a0_447 = Mem445[d0_36 + 58:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001186:
	word32 a0_450 = Mem439[d0_36 + 176:word32]
	a0_447 = a0_450 + 4 - Mem439[a0_450:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001202:
	Mem461[0x00003D98:word32] = a0_447
	Mem469[0x00003D9C:word32] = fp - 16
	fn00001354(d1_111, a1_255, d0_112, dwLoc10, dwLoc0C_574)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001212_thunk_fn0000127C:
	word32 a1_719
	word32 a5_720
	fn0000127C(out a1_719, out a5_720)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000110C:
	branch v50_371 == 0x20 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001116:
	Mem521[a1_255:byte] = 0x00
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001112:
	Mem528[a1_255:byte] = v50_371
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001214_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000126C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001278(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1 d2
// Preserved: a7
fn00001278_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278_thunk_fn0000127C:
	word32 a1_6
	word32 a5_9
	word32 d1_13 = fn0000127C(out a1_6, out a5_9)
	a1Out = a1_6
	a5Out = a5_9
	return d1_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001278_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000127C(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000127C:
	word32 a7_6 = Mem0[0x00003D70:word32]
	word32 v7_11 = Mem0[a7_6 - 4:word32]
	word32 v5_8 = Mem0[a7_6 - 8:word32]
	word32 d1_14 = Mem0[v7_11 + 4:word32]
	branch d1_14 == 0x00000000 l0000129E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001296:
	execPrivate1()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000129E:
	CloseLibrary(Mem0[0x00003D78:word32])
	branch v5_8 == 0x00000000 l000012B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012AE:
	fn0000126C(v5_8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012B0:
	FreeMem(v7_11, Mem0[v7_11:word32])
	a1Out = v7_11
	a5Out = v7_11
	return d1_14
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000127C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000012D0(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012D0:
	branch 0x00003EB8 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012E2:
	word32 d2_16 = 1
	branch Mem11[0x00003EBC:word32] == 0x00000000 l000012F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012EA:
	d2_16 = d2_16 + 0x00000001
	branch Mem11[0x00003EB8 + (d2_16 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012F6:
	word32 d2_33 = d2_16 - 0x00000001
	branch d2_33 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012FA:
	word32 d0_38 = d2_33 << 0x00000002
	call Mem11[0x00003EB8 + d0_38:word32] (retsize: 4;)
		uses: d0:d0_38,Stack +0008:dwArg04
	d2_33 = d2_33 - 0x00000001
	branch d2_33 != 0x00000000 l000012FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001308:
	word32 a1_59
	word32 a5_62
	word32 d1_65 = fn00001278(dwArg04, out a1_59, out a5_62)
	a1Out = a1_59
	a5Out = a5_62
	return d1_65
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000012D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000131C(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000131C:
	branch Mem8[0x00003DA0:word32] != 0x00000000 l0000134E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001328:
	word32 a3_13 = Mem8[0x00003EC8:word32]
	Mem16[0x00003DA0:word32] = 1
	branch a3_13 == 0x00000000 l00001346
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000133A:
	call Mem16[a3_13 + 4:word32] (retsize: 4;)
		uses: d0:a3_25,Stack +0008:dwArg04
	a3_13 = Mem16[a3_13:word32]
	branch a3_13 != 0x00000000 l0000133A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001346:
	d1 = fn000012D0(dwArg04, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000134E:
	a1Out = a1
	a5Out = a5
	return d1
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000131C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001354(word32 d1, word32 a1, word32 a5, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a5:[0..31] d1:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001354:
	word32 a3_17 = 0x00003EB0
	word32 d0_10 = 0x00003EAC
	branch 0x00003EAC == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001366:
	branch Mem8[0x00003EB0:word32] == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000136A:
	call Mem8[a3_17:word32] (retsize: 4;)
		uses: Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: d0:d0_22
	a3_17 = a3_17 + 4
	branch Mem8[a3_17:word32] != 0x00000000 l0000136A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001372:
	word32 a1_95
	word32 a5_96
	fn0000131C(fn00001390(d0_10, d1, a1, a5), out a1_95, out a5_96)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001354_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001390(word32 d0, word32 d1, word32 a1, word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a5:[0..31] d0:[0..31] d1:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00001390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001390:
	return fn000013FC(fn00002B40(fn00002B40(fn00002B40(d0, d1, a1, a5, 0x000013E4), d1, a1, a5, 0x000013E8), d1, a1, a5, 0x000013EC), 0x000013F4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000013FC(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn000013FC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013FC:
	return fn00001418(d0, Mem10[0x00003ED0:word32], dwArg04, fp + 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000013FC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001418(word32 d0, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4 d5 d6 d7
fn00001418_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001418:
	word32 d0_1952
	word32 a7_1968 = fp + -112
	word32 d3_1482 = dwArg0C
	word32 a5_1579 = dwArg04
	word32 a4_1925 = dwArg08
	word32 d6_1480 = 0
	branch Mem36[dwArg08:byte] == 0x00 l00001D5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001434:
	branch Mem46[a4_1925:byte] != 0x25 l00001D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D38:
	word32 a7_51 = a7_1968 - 4
	Mem54[a7_51:word32] = a5_1579
	Mem64[a7_51 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0, word24, 8), Mem54[a4_1925:byte])
	a4_1925 = a4_1925 + 1
	word32 a0_66
	d0 = fn00001D98(Mem64[a7_51 - 4:word32], Mem64[a7_51:word32], out a0_66, out a5_1579)
	a7_1968 = a7_51 + 4
	branch d0 != 0xFFFFFFFF l00001D56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D56:
	d6_1480 = d6_1480 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D52:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000143C:
	Mem85[a7_1968 + 64:word32] = 0x00000000
	Mem87[a7_1968 + 72:word32] = 0x00000000
	Mem91[a7_1968 + 102:word32] = 0x00000000
	word32 d5_256 = -1
	word32 d4_376 = 105
	word32 a3_1270 = a7_1968 + 76
	word32 d7_1024 = 0
	word32 a2_135 = a4_1925 + 1
	word32 d2_1005 = Mem91[a7_1968 + 72:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000145A:
	word32 d1_103 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000145C:
	word32 a7_99 = a7_1968 - 4
	Mem102[a7_99:word32] = d0
	d0 = Mem102[a7_99:word32]
	branch Mem102[0x00001D70 + d1_103:byte] - Mem102[a2_135:byte] != 0x00 l00001480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001480:
	d1_103 = d1_103 + 0x00000001
	branch d1_103 <u 0x00000005 l0000145C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000146E:
	Mem121[a7_99:word32] = d1_103
	word32 d1_123 = 1 << d1_103
	d0 = d1_123
	d1_103 = Mem121[a7_99:word32]
	d2_1005 = d2_1005 | d1_123
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000148A:
	branch d1_103 <u 0x00000005 l0000145A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001492:
	word32 a0_1447
	word32 d0_159
	Mem143[a7_1968 + 72:word32] = d2_1005
	branch Mem143[a2_135:byte] != 0x2A l000014D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D0:
	a0_1447 = 0x00002815 + (SEQ(SLICE(d0, word24, 8), Mem143[a2_135:byte]) & 0x000000FF)
	word32 d0_158 = (uint32) (uint8) Mem143[a0_1447:byte]
	d0_159 = d0_158 & 0x00000004
	branch (d0_158 & 0x00000004) == 0x00000000 l0000153C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014EC:
	d2_1005 = Mem143[a7_1968 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014F0:
	Mem171[a7_1968 - 4:word32] = d3_1482
	word32 d1_177 = __swap(10) *u SLICE(d2_1005, word16, 0)
	word32 d1_185 = SEQ(SLICE(__swap(SEQ(SLICE(d1_177, word16, 16), SLICE(d1_177 + __swap(d2_1005) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_186 = SLICE(d2_1005, word16, 0) *u 10 + d1_185
	a2_135 = a2_135 + 1
	a0_1447 = 0x00002815 + (SEQ(SLICE(d0_186, word24, 8), Mem171[a2_135:byte]) & 0x000000FF)
	word32 d1_196 = (int32) (int16) (int8) SEQ(SLICE(d1_185, word24, 8), Mem171[a2_135:byte])
	word32 d0_210 = (uint32) (uint8) Mem171[a0_1447:byte]
	d3_1482 = Mem171[a7_1968 - 4:word32]
	d1_103 = d1_196 - 0x00000030
	d2_1005 = d1_196 - 0x00000030 + d0_186
	d0_159 = d0_210 & 0x00000004
	branch (d0_210 & 0x00000004) != 0x00000000 l000014F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001538:
	Mem217[a7_1968 + 64:word32] = d2_1005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000149C:
	d0_159 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v37_232 = Mem143[d0_159:word32]
	Mem233[a7_1968 + 44:word32] = v37_232
	a2_135 = a2_135 + 1
	d3_1482 = d0_159 + 0x00000004
	a0_1447 = d0_159 + 0x00000004
	branch v37_232 >= 0x00000000 l000014C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014C8:
	Mem237[a7_1968 + 64:word32] = Mem233[a7_1968 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014B4:
	Mem240[a7_1968 + 72:word32] = Mem233[a7_1968 + 72:word32] | 0x00000004
	d0_159 = -Mem240[a7_1968 + 44:word32]
	Mem245[a7_1968 + 64:word32] = d0_159
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000153C:
	branch Mem248[a2_135:byte] != 0x2E l000015D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001544:
	a2_135 = a2_135 + 1
	branch Mem248[a2_135:byte] != 0x2A l0000156A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000156A:
	a0_1447 = 0x00002815 + (SEQ(SLICE(d0_159, word24, 8), Mem248[a2_135:byte]) & 0x000000FF)
	word32 d0_267 = (uint32) (uint8) Mem248[a0_1447:byte]
	d5_256 = 0
	d0_159 = d0_267 & 0x00000004
	branch (d0_267 & 0x00000004) == 0x00000000 l000015D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001588:
	word32 a7_275 = a7_1968 - 4
	Mem278[a7_275:word32] = d2_1005
	word32 d1_284 = __swap(10) *u SLICE(d5_256, word16, 0)
	word32 d1_292 = SEQ(SLICE(__swap(SEQ(SLICE(d1_284, word16, 16), SLICE(d1_284 + __swap(d5_256) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_293 = SLICE(d5_256, word16, 0) *u 10 + d1_292
	a2_135 = a2_135 + 1
	a0_1447 = 0x00002815 + (SEQ(SLICE(d0_293, word24, 8), Mem278[a2_135:byte]) & 0x000000FF)
	word32 d1_303 = (int32) (int16) (int8) SEQ(SLICE(d1_292, word24, 8), Mem278[a2_135:byte])
	word32 d0_317 = (uint32) (uint8) Mem278[a0_1447:byte]
	d2_1005 = Mem278[a7_275:word32]
	d1_103 = d1_303 - 0x00000030
	d5_256 = d1_303 - 0x00000030 + d0_293
	d0_159 = d0_317 & 0x00000004
	branch (d0_317 & 0x00000004) != 0x00000000 l00001588
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000154C:
	d0_159 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v45_333 = Mem248[d0_159:word32]
	Mem335[a7_1968 + 44:word32] = v45_333
	a2_135 = a2_135 + 1
	d3_1482 = d0_159 + 0x00000004
	a0_1447 = d0_159 + 0x00000004
	branch v45_333 < 0x00000000 l000015D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001564:
	d5_256 = Mem335[a7_1968 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015D0:
	word32 a7_1465 = a7_1968
	branch Mem341[a2_135:byte] == 0x68 l000015F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015D6:
	branch Mem341[a2_135:byte] == 0x6C l000015F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015DC:
	branch Mem341[a2_135:byte] == 0x4C l000015F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015E2:
	branch Mem341[a2_135:byte] == 0x6A l000015F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015E8:
	branch Mem341[a2_135:byte] == 0x7A l000015F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015EE:
	branch Mem341[a2_135:byte] != 0x74 l000015FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015F4:
	a2_135 = a2_135 + 1
	d4_376 = (int32) (int16) (int8) (uint32) (uint8) Mem341[a2_135:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015FA:
	branch d4_376 != 0x00000068 l0000160C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001602:
	branch Mem341[a2_135:byte] != 0x68 l0000160C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001608:
	d4_376 = 2
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000160C:
	branch d4_376 != 0x0000006C l0000161E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001614:
	branch Mem341[a2_135:byte] != 0x6C l0000161E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000161A:
	d4_376 = 1
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000161E:
	branch d4_376 != 0x0000006A l00001628
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001626:
	d4_376 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001628:
	branch d4_376 != 0x0000007A l00001632
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001630:
	d4_376 = 108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001632:
	branch d4_376 != 0x00000074 l0000163C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000163A:
	d4_376 = 105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000163C:
	word32 d5_1481
	byte v100_428 = Mem341[a2_135:byte]
	word32 a2_1892 = a2_135 + 1
	word32 d1_1068 = SEQ(SLICE(d1_103, word24, 8), v100_428)
	word32 d0_1471 = SEQ(SLICE(d0_159, word24, 8), v100_428)
	branch v100_428 == 0x25 l00001AC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AC4:
	Mem465[a7_1968 + 102:word32] = 0x00000001
	a3_1270 = 0x00001D6C
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001648:
	branch v100_428 == 0x58 l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000164E:
	branch v100_428 == 0x63 l00001A44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A44:
	branch d4_376 != 0x0000006C l00001A60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A60:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem510[a3_1270:byte] = Mem341[d0_1471 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A4C:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem521[a3_1270:byte] = Mem341[d0_1471 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A72:
	a0_1447 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1482 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem525[a7_1968 + 102:word32] = 0x00000001
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001656:
	branch v100_428 == 0x64 l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165C:
	branch v100_428 == 0x69 l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001662:
	Mem535[a7_1968 + 44:byte] = v100_428
	branch v100_428 == 0x6E l00001AD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AD6:
	branch d4_376 != 0x00000001 l00001AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF8:
	branch d4_376 != 0x0000006C l00001B16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B16:
	branch d4_376 != 0x00000068 l00001B34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B34:
	branch d4_376 != 0x00000002 l00001B52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B52:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem575[a0_1447:word32] = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B3C:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem587[a0_1447:byte] = SLICE(d6_1480, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B1E:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem599[a0_1447:word16] = SLICE(d6_1480, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B00:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem611[a0_1447:word32] = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ADE:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem623[a0_1447 + 4:word32] = d6_1480
	Mem624[a0_1447:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B66:
	d3_1482 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem631[a7_1968 + 64:word32] = 0x00000000
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000166E:
	branch Mem535[a7_1968 + 44:byte] <=u 0x70 l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000167C:
	byte v117_646 = Mem535[a7_1968 + 44:byte]
	branch v117_646 == 0x73 l00001A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A80:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3_1270 = Mem535[d0_1471:word32]
	Mem662[a7_1968 + 102:word32] = 0x00000000
	d3_1482 = d0_1471 + 0x00000004
	a0_1447 = d0_1471 + 0x00000004
	word32 a1_661 = a3_1270
	branch d5_256 == 0x00000000 l00001AA2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A9C:
	branch d5_256 - Mem662[a7_1968 + 102:word32] <=u 0x00000000 l00001ABE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AA2:
	branch Mem662[a3_1270:byte] == 0x00 l00001ABE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AA6:
	d0_1471 = Mem662[a7_1968 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AAA:
	d0_1471 = d0_1471 + 0x00000001
	a1_661 = a1_661 + 1
	branch d5_256 <=u 0x00000000 l00001AB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AB2:
	branch d5_256 - d0_1471 <=u 0x00000000 l00001ABA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AB6:
	branch Mem662[a1_661:byte] != 0x00 l00001AAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ABA:
	Mem719[a7_1968 + 102:word32] = d0_1471
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ABE:
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001688:
	branch v117_646 == 0x75 l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000168E:
	branch v117_646 != 0x78 l00001B6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B6E:
	branch v100_428 != 0x00 l00001B74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B72:
	a2_1892 = a2_1892 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B74:
	d0_1471 = a2_1892 - a4_1925
	Mem756[a7_1968 + 102:word32] = d0_1471
	Mem758[a7_1968 + 64:word32] = 0x00000000
	a3_1270 = a4_1925
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001696:
	branch v100_428 != 0x70 l000016A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000169C:
	Mem772[a7_1968 + 72:word32] = Mem770[a7_1968 + 72:word32] | 0x00000001
	d4_376 = 108
	d1_1068 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016A8:
	word32 d3_1050
	word32 a7_1020
	branch SLICE(d1_1068, byte, 0) == 0x64 l000016B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016AE:
	branch SLICE(d1_1068, byte, 0) != 0x69 l00001800
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001800:
	branch d4_376 != 0x00000001 l00001824
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001824:
	branch d4_376 != 0x0000006C l00001846
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001846:
	word32 d0_796 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem804[a7_1968 + 60:word32] = Mem801[d0_796:word32]
	Mem805[a7_1968 + 56:word32] = 0x00000000
	d3_1050 = d0_796 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000182C:
	word32 d0_813 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem819[a7_1968 + 60:word32] = Mem801[d0_813:word32]
	Mem820[a7_1968 + 56:word32] = 0x00000000
	d3_1050 = d0_813 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001808:
	word32 d0_828 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem834[a7_1968 + 60:word32] = Mem801[d0_828 + 0x00000004:word32]
	Mem836[a7_1968 + 56:word32] = Mem834[d0_828:word32]
	d3_1050 = d0_828 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000185E:
	branch d4_376 != 0x00000068 l0000187A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001866:
	word16 v262_844 = Mem843[a7_1968 + 62:word16]
	word32 a7_848 = a7_1968 - 4
	Mem851[a7_848:word32] = d1_1068
	Mem857[a7_848 + 64:word32] = (uint32) (uint16) v262_844
	Mem858[a7_848 + 60:word32] = 0x00000000
	d1_1068 = Mem858[a7_848:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000187A:
	branch d4_376 != 0x00000002 l00001896
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001882:
	byte v277_869 = Mem868[a7_1968 + 63:byte]
	word32 a7_873 = a7_1968 - 4
	Mem876[a7_873:word32] = d1_1068
	Mem882[a7_873 + 64:word32] = (uint32) (uint8) v277_869
	Mem883[a7_873 + 60:word32] = 0x00000000
	d1_1068 = Mem883[a7_873:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001896:
	word32 d0_891 = Mem890[a7_1968 + 72:word32] & 1
	Mem894[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	a7_1020 = a7_1968
	branch d0_891 == 0x00000000 l00001934
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018A6:
	branch SLICE(d1_1068, byte, 0) != 0x6F l000018E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018AC:
	branch d5_256 != 0x00000000 l000018D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018B0:
	word32 a7_911 = a7_1968 - 4
	Mem913[a7_911:word32] = d0_891
	Mem916[a7_911 - 4:word32] = d1_1068
	word32 d0_917 = Mem916[a7_911 + 64:word32]
	word32 d1_918 = Mem916[a7_911 + 60:word32]
	Mem935[a7_911 - 8:word32] = d2_1005
	d2_1005 = Mem935[a7_911 - 8:word32]
	d1_1068 = Mem935[a7_911 - 4:word32]
	d0_891 = Mem935[a7_911:word32]
	branch d1_918 - (d0_917 <u 0x00000000) == 0x00000000 l000018E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018D6:
	Mem975[a7_1968 + 106:byte] = 0x30
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018E2:
	a7_1020 = a7_1968
	branch SLICE(d1_1068, byte, 0) == 0x78 l000018F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018E8:
	Mem984[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	branch SLICE(d1_1068, byte, 0) != 0x58 l00001934
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018F2:
	Mem991[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	word32 a7_992 = a7_1968 - 4
	Mem997[a7_992:word32] = d0_891
	Mem1000[a7_992 - 4:word32] = d1_1068
	word32 d0_1001 = Mem1000[a7_992 + 64:word32]
	word32 d1_1002 = Mem1000[a7_992 + 60:word32]
	Mem1008[a7_992 - 8:word32] = d2_1005
	word32 d1_1017 = Mem1008[a7_992 - 4:word32]
	a7_1020 = a7_992 + 4
	branch d1_1002 - (d0_1001 <u 0x00000000) == 0x00000000 l00001934
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000191C:
	Mem1028[a7_992 + 110 + d7_1024:byte] = 0x30
	word32 d7_1026 = d7_1024 + 0x00000001
	Mem1033[a7_992 + 110 + d7_1026:byte] = SLICE(d1_1017, byte, 0)
	Mem1035[a7_992 + 48:byte] = SLICE(d1_1017, byte, 0)
	d7_1024 = d7_1026 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016B6:
	word32 d0_1062
	branch d4_376 != 0x00000001 l000016DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016DC:
	branch d4_376 != 0x0000006C l00001708
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001708:
	word32 d0_1048 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1053 = Mem801[d0_1048:word32]
	Mem1056[a7_1968 + 52:word32] = d0_1053
	word32 a7_1057 = a7_1968 - 4
	Mem1060[a7_1057:word32] = d1_1068
	Mem1065[a7_1057 + 52:word32] = d0_1053 >> 31
	word32 v235_1066 = Mem1065[a7_1057:word32]
	d3_1050 = d0_1048 + 0x00000004
	d0_1062 = d0_1053 >> 31
	d1_1068 = v235_1066
	branch d4_376 != 0x00000068 l0000174E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001732:
	word16 v237_1072 = Mem1065[a7_1057 + 58:word16]
	Mem1077[a7_1057:word32] = v235_1066
	word32 d1_1081 = (int32) (int16) SEQ(SLICE(v235_1066, word16, 16), v237_1072)
	Mem1083[a7_1057 + 56:word32] = d1_1081
	Mem1086[a7_1057 - 4:word32] = SEQ(SLICE(d0_1053 >> 31, word16, 16), v237_1072)
	Mem1091[a7_1057 + 52:word32] = d1_1081 >> 31
	d1_1068 = Mem1091[a7_1057 - 4:word32]
	d0_1062 = Mem1091[a7_1057:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000174E:
	branch d4_376 != 0x00000002 l00001774
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001756:
	byte v248_1105 = Mem1104[a7_1968 + 55:byte]
	word32 a7_1109 = a7_1968 - 4
	Mem1112[a7_1109:word32] = d1_1068
	word32 d1_1117 = (int32) (int16) (int8) SEQ(SLICE(d1_1068, word24, 8), v248_1105)
	Mem1119[a7_1109 + 56:word32] = d1_1117
	Mem1122[a7_1109 - 4:word32] = SEQ(SLICE(d0_1062, word24, 8), v248_1105)
	Mem1127[a7_1109 + 52:word32] = d1_1117 >> 31
	d1_1068 = Mem1127[a7_1109 - 4:word32]
	d0_1062 = Mem1127[a7_1109:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E4:
	word32 d0_1138 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1142 = Mem801[d0_1138:word32]
	Mem1144[a7_1968 + 52:word32] = d0_1142
	word32 a7_1145 = a7_1968 - 4
	Mem1147[a7_1145:word32] = d1_1068
	Mem1152[a7_1145 + 52:word32] = d0_1142 >> 31
	d3_1050 = d0_1138 + 0x00000004
	d0_1062 = d0_1142 >> 31
	d1_1068 = Mem1152[a7_1145:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016BE:
	d0_1062 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1166[a7_1968 + 52:word32] = Mem801[d0_1062 + 0x00000004:word32]
	Mem1168[a7_1968 + 48:word32] = Mem1166[d0_1062:word32]
	d3_1050 = d0_1062 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001774:
	Mem1173[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	word32 a7_1174 = a7_1968 - 4
	Mem1177[a7_1174:word32] = d0_1062
	Mem1180[a7_1174 - 4:word32] = d1_1068
	word32 d0_1181 = Mem1180[a7_1174 + 56:word32]
	word32 d1_1182 = Mem1180[a7_1174 + 52:word32]
	Mem1188[a7_1174 - 8:word32] = d2_1005
	a7_1020 = a7_1174 + 4
	branch d1_1182 - (d0_1181 <u 0x00000000) >= 0x00000000 l000017BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017BE:
	byte v163_1202 = Mem1188[a7_1174 + 48:byte]
	branch (Mem1188[a7_1174 + 76:word32] & 16) == 0x00000000 l000017D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017D8:
	branch (Mem1188[a7_1174 + 76:word32] & 8) == 0x00000000 l000017EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017E0:
	Mem1225[a7_1174 + 110:byte] = 0x20
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017CA:
	Mem1232[a7_1174 + 110:byte] = 0x2B
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017EC:
	Mem1237[a7_1174 + 64:word32] = Mem1235[a7_1174 + 56:word32]
	Mem1239[a7_1174 + 60:word32] = Mem1237[a7_1174 + 52:word32]
	Mem1242[a7_1174 + 48:byte] = v163_1202
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000179E:
	Mem1248[a7_1174 + 110:byte] = 0x2D
	d7_1024 = 0x00000001
	a7_1020 = Mem1248[a7_1174 + 0x00000040:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001934:
	byte v151_1266 = Mem1265[a7_1020 + 44:byte]
	a3_1270 = a7_1020 + 98
	branch v151_1266 == 0x78 l00001948
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001942:
	branch v151_1266 != 0x58 l00001952
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001952:
	branch v151_1266 != 0x6F l00001962
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001962:
	Mem1281[a7_1020 + 48:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001958:
	Mem1284[a7_1020 + 48:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000196A:
	Mem1289[a7_1020 + 44:word32] = Mem1287[a7_1020 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001948:
	Mem1293[a7_1020 + 44:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001970:
	word32 a6_1305
	Mem1298[a7_1020 + 108:word32] = Mem1296[a7_1020 + 44:word32]
	branch v151_1266 == 0x58 l00001982
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001982:
	a6_1305 = 0x00001D88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000197C:
	a6_1305 = 0x00001D78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001986:
	Mem1310[a7_1020 + 44:word32] = a6_1305
	Mem1326[a7_1020 + 124:word32] = d3_1050
	Mem1340[a7_1020 + 68:word32] = d5_256
	Mem1359[a7_1020 + 48:word32] = d6_1480
	Mem1367[a7_1020 + 98:word32] = d7_1024
	word32 v187_1368 = a7_1020 + 56
	word32 d6_1369 = Mem1367[v187_1368:word32]
	word32 d7_1371 = Mem1367[v187_1368 + 4:word32]
	word32 d3_1373 = Mem1367[a7_1020 + 102:word32]
	word32 a1_1375 = Mem1367[a7_1020 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019A8:
	word32 d1_1378 = Mem1377[a7_1020 + 108:word32]
	word32 a7_1383 = a7_1020 - 4
	Mem1385[a7_1383:word32] = d1_1378 >> 31
	Mem1388[a7_1383 - 4:word32] = d1_1378
	Mem1392[a7_1383 - 8:word32] = a1_1375
	Mem1395[a7_1383 - 12:word32] = d1_1378
	Mem1397[a7_1383 - 16:word32] = d1_1378 >> 31
	Mem1400[a7_1383 - 20:word32] = d7_1371
	Mem1403[a7_1383 - 24:word32] = d6_1369
	word32 d1_1406 = fn00002700(Mem1403[a7_1383 - 24:word32], Mem1403[a7_1383 - 20:word32], Mem1403[a7_1383 - 16:word32], Mem1403[a7_1383 - 12:word32])
	word32 v191_1414 = Mem1403[a7_1383 - 8:word32]
	word32 d1_1419 = Mem1403[a7_1383 - 4:word32]
	word32 d0_1421 = Mem1403[a7_1383:word32]
	a3_1270 = a3_1270 - 1
	Mem1428[a3_1270:byte] = Mem1403[v191_1414 + d1_1406:byte]
	Mem1431[a7_1383:word32] = d0_1421
	Mem1434[a7_1383 - 4:word32] = d1_1419
	Mem1437[a7_1383 - 8:word32] = v191_1414
	Mem1440[a7_1383 - 12:word32] = d1_1419
	Mem1442[a7_1383 - 16:word32] = d0_1421
	Mem1444[a7_1383 - 20:word32] = d7_1371
	Mem1446[a7_1383 - 24:word32] = d6_1369
	word32 d1_1450
	word32 d0_1449 = fn000023B8(Mem1446[a7_1383 - 24:word32], Mem1446[a7_1383 - 20:word32], Mem1446[a7_1383 - 16:word32], Mem1446[a7_1383 - 12:word32], out d1_1450, out a0_1447)
	a1_1375 = Mem1446[a7_1383 - 8:word32]
	d6_1369 = d0_1449
	d7_1371 = d1_1450
	a7_1465 = a7_1383 + 4
	d3_1373 = d3_1373 + 0x00000001
	d0_1471 = d1_1450
	branch d0_1449 - (d1_1450 <u 0x00000000) != 0x00000000 l000019A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A16:
	Mem1478[a7_1383 + 106:word32] = d3_1373
	d7_1024 = Mem1478[a7_1383 + 102:word32]
	d6_1480 = Mem1478[a7_1383 + 52:word32]
	d5_1481 = Mem1478[a7_1383 + 72:word32]
	d3_1482 = Mem1478[a7_1383 + 128:word32]
	branch d5_1481 != 0xFFFFFFFF l00001A38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A38:
	Mem1487[a7_1383 + 76:word32] = Mem1478[a7_1383 + 76:word32] & 0xFFFFFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A32:
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B84:
	branch d5_1481 - Mem1496[a7_1465 + 102:word32] >u 0x00000000 l00001B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B92:
	Mem1502[a7_1465 + 44:word32] = d5_1481
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B8A:
	Mem1505[a7_1465 + 44:word32] = Mem1496[a7_1465 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B96:
	word32 a7_1508 = a7_1465 - 4
	Mem1516[a7_1508:word32] = d0_1471
	Mem1531[a7_1508 + 52:word32] = Mem1516[a7_1508 + 48:word32] + d7_1024
	Mem1537[a7_1508:word32] = Mem1531[a7_1508:word32]
	word32 d0_1541 = Mem1537[a7_1508:word32]
	branch Mem1537[a7_1508 + 52:word32] - Mem1537[a7_1508 + 68:word32] <u 0x00000000 l00001BBA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BBA:
	Mem1546[a7_1508:word32] = d0_1541
	Mem1551[a7_1508 + 48:word32] = Mem1546[a7_1508 + 68:word32] - Mem1546[a7_1508 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BB4:
	Mem1556[a7_1508 + 48:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BCA:
	Mem1564[a7_1465 + 48:word32] = Mem1562[a7_1465 + 44:word32]
	word32 d0_1566 = Mem1564[a7_1465 + 72:word32] & 2
	branch d0_1566 == 0x00000000 l00001C0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BD8:
	word32 d2_1571 = 0
	branch d7_1024 == 0x00000000 l00001C0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BDE:
	word32 a7_1578 = a7_1465 - 4
	Mem1581[a7_1578:word32] = a5_1579
	Mem1593[a7_1578 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1566, word24, 8), Mem1581[a7_1578 + 110 + d2_1571:byte])
	d0_1566 = fn00001D98(Mem1593[a7_1578 - 4:word32], Mem1593[a7_1578:word32], out a0_1447, out a5_1579)
	branch d0_1566 != 0xFFFFFFFF l00001C04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C04:
	d2_1571 = d2_1571 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d7_1024 - d2_1571 >u 0x00000000 l00001BDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C0C:
	branch (Mem1619[a7_1465 + 72:word32] & 4) != 0x00000000 l00001C5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C14:
	word32 d2_1625 = 0
	branch Mem1619[a7_1465 + 48:word32] == 0x00000000 l00001C5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C1C:
	word32 d4_1630 = Mem1619[a7_1465 + 72:word32]
	word32 a4_1632 = Mem1619[a7_1465 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C24:
	word32 a0_1647
	word32 a7_1634 = a7_1465 - 4
	Mem1637[a7_1634:word32] = a5_1579
	branch (d4_1630 & 2) == 0x00000000 l00001C32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C32:
	a0_1647 = SEQ(SLICE(a0_1447, word16, 16), 0x0020)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C2C:
	a0_1647 = SEQ(SLICE(a0_1447, word16, 16), 0x0030)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C36:
	Mem1654[a7_1465 - 8:word32] = a0_1647
	branch fn00001D98(Mem1654[a7_1465 - 8:word32], Mem1654[a7_1465 - 4:word32], out a0_1447, out a5_1579) != 0xFFFFFFFF l00001C4E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C4E:
	d2_1625 = d2_1625 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a4_1632 - d2_1625 >u 0x00000000 l00001C24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C56:
	Mem1683[a7_1634 + 52:word32] = a4_1632
	Mem1686[a7_1634 + 76:word32] = d4_1630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C5E:
	word32 d0_1691 = Mem1690[a7_1465 + 72:word32] & 2
	branch d0_1691 != 0x00000000 l00001C9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C66:
	word32 d2_1696 = 0
	branch d7_1024 == 0x00000000 l00001C9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C6C:
	word32 a7_1706 = a7_1465 - 4
	Mem1709[a7_1706:word32] = a5_1579
	Mem1721[a7_1706 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1691, word24, 8), Mem1709[a7_1706 + 110 + d2_1696:byte])
	word32 a0_2918
	d0_1691 = fn00001D98(Mem1721[a7_1706 - 4:word32], Mem1721[a7_1706:word32], out a0_2918, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001C92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C92:
	d2_1696 = d2_1696 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d7_1024 - d2_1696 >u 0x00000000 l00001C6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C9A:
	word32 d2_1747 = Mem1746[a7_1465 + 102:word32]
	branch d5_1481 - Mem1746[a7_1465 + 102:word32] <=u 0x00000000 l00001CC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA4:
	word32 a7_1761 = a7_1465 - 4
	Mem1764[a7_1761:word32] = a5_1579
	Mem1767[a7_1761 - 0x00000004:word32] = 0x00000030
	word32 a0_2919
	d0_1691 = fn00001D98(Mem1767[a7_1761 - 0x00000004:word32], Mem1767[a7_1761:word32], out a0_2919, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001CC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CC0:
	d2_1747 = d2_1747 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d5_1481 - d2_1747 >u 0x00000000 l00001CA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CC8:
	word32 d2_1791 = 0
	branch Mem1793[a7_1465 + 102:word32] == 0x00000000 l00001CFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CD0:
	word32 a4_1798 = Mem1793[a7_1465 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CD4:
	word32 a7_1800 = a7_1465 - 4
	Mem1803[a7_1800:word32] = a5_1579
	Mem1815[a7_1800 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1691, word24, 8), Mem1803[a3_1270 + d2_1791:byte])
	word32 a0_2920
	d0_1691 = fn00001D98(Mem1815[a7_1800 - 4:word32], Mem1815[a7_1800:word32], out a0_2920, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001CF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CF6:
	d2_1791 = d2_1791 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a4_1798 - d2_1791 >u 0x00000000 l00001CD4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CFE:
	d0 = Mem1841[a7_1465 + 72:word32] & 4
	branch d0 == 0x00000000 l00001D34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D06:
	word32 d2_1847 = 0
	branch Mem1841[a7_1465 + 48:word32] == 0x00000000 l00001D34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D0E:
	word32 a3_1852 = Mem1841[a7_1465 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D12:
	word32 a7_1854 = a7_1465 - 4
	Mem1857[a7_1854:word32] = a5_1579
	Mem1860[a7_1854 - 0x00000004:word32] = 0x00000020
	word32 a0_2921
	d0 = fn00001D98(Mem1860[a7_1854 - 0x00000004:word32], Mem1860[a7_1854:word32], out a0_2921, out a5_1579)
	branch d0 != 0xFFFFFFFF l00001D2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D2C:
	d2_1847 = d2_1847 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a3_1852 - d2_1847 >u 0x00000000 l00001D12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D34:
	a7_1968 = a7_1465
	a4_1925 = a2_1892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D58:
	branch Mem1927[a4_1925:byte] != 0x00 l00001434
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D5E:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D28:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CF2:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CBA:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C8C:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C48:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BFE:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D60:
	return d0_1952
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001418_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001D98(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00001D98_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D98:
	word32 a0_104
	word32 d1_53
	Mem17[dwArg08 + 24:word32] = Mem11[dwArg08 + 24:word32] | 2
	word32 v13_19 = Mem17[dwArg08 + 20:word32] - 0x00000001
	Mem20[dwArg08 + 20:word32] = v13_19
	branch v13_19 < 0x00000000 l00001DDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DB4:
	branch dwArg04 != 10 l00001DC6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DBA:
	branch (Mem20[dwArg08 + 24:word32] & 0x00000080) != 0x00000000 l00001DDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DDC:
	d1_53 = fn00001DF4(dwArg04, dwArg08, out a0_104, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DC6:
	a0_104 = Mem20[dwArg08 + 4:word32]
	Mem63[dwArg08 + 4:word32] = a0_104 + 1
	Mem66[a0_104:byte] = SLICE(dwArg04, byte, 0)
	d1_53 = (uint32) (uint8) Mem66[a0_104:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DEA:
	a0Out = a0_104
	a5Out = a5
	return d1_53
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001D98_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001DF4(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn00001DF4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DF4:
	word32 d0_109
	word32 a1_35
	word32 a5_127
	fn00002388(out a1_35, out a5_127)
	branch dwArg08 != 0x00000000 l00001E10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E10:
	branch (Mem29[dwArg08 + 24:word32] & 73) == 64 l00001E22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E22:
	branch Mem29[dwArg08 + 28:word32] != 0x00000000 l00001E40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E28:
	branch (Mem29[dwArg08 + 24:word32] & 4) == 0x00000000 l00001E38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E38:
	Mem62[dwArg08 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E30:
	Mem66[dwArg08 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E40:
	branch Mem69[dwArg08 + 8:word32] != 0x00000000 l00001E80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E80:
	branch Mem69[dwArg08:word32] == 0x00000000 l00001EDA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EDA:
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E84:
	word32 d0_101 = Mem69[dwArg08 + 24:word32] & 0x00000080
	branch d0_101 == 0x00000000 l00001EB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E90:
	d0_101 = 10
	branch dwArg04 != 10 l00001EB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB0:
	word32 d4_95 = Mem69[dwArg08 + 4:word32] - Mem69[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_95 - d0_101 == 0x00000000 l00001EDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ECE:
	Mem108[dwArg08 + 24:word32] = Mem69[dwArg08 + 24:word32] | 16
	a0 = dwArg08 + 24
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E96:
	word32 a0_112 = Mem69[dwArg08 + 4:word32]
	Mem116[dwArg08 + 4:word32] = a0_112 + 1
	Mem118[a0_112:byte] = SLICE(dwArg04, byte, 0)
	word32 a1_338
	d0_109 = fn00001F08(dwArg08, out a0, out a1_338, out a5_127)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E46:
	word32 d4_143
	branch (Mem69[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l00001E5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E5A:
	d4_143 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E56:
	d4_143 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E5C:
	word32 d1_161
	word32 a1_337
	word32 d0_160 = fn00001FB4(d4_143 + Mem69[dwArg08 + 28:word32], out d1_161, out a0, out a1_337)
	branch d0_160 != 0x00000000 l00001E76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E76:
	Mem174[dwArg08 + 8:word32] = d0_160 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EDE:
	Mem181[dwArg08 + 24:word32] = Mem179[dwArg08 + 24:word32] | 2
	a0 = Mem181[dwArg08 + 8:word32]
	Mem188[a0:byte] = SLICE(dwArg04, byte, 0)
	Mem192[dwArg08 + 4:word32] = Mem188[dwArg08 + 8:word32] + 1
	Mem197[dwArg08 + 20:word32] = Mem192[dwArg08 + 28:word32] - 0x00000001
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E70:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E1C:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E0A:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F02:
	a0Out = a0
	a5Out = a5_127
	return d0_109
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001DF4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F08(word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn00001F08_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F08:
	word32 d0_153
	word32 a1_21
	word32 a5_23
	fn00002388(out a1_21, out a5_23)
	branch dwArg04 != 0x00000000 l00001F1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F1E:
	branch Mem17[dwArg04 + 28:word32] != 0x00000000 l00001F3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F24:
	branch (Mem17[dwArg04 + 24:word32] & 4) == 0x00000000 l00001F34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F34:
	Mem42[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F2C:
	Mem46[dwArg04 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F3C:
	branch Mem49[dwArg04 + 8:word32] != 0x00000000 l00001F46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F46:
	word32 d0_55 = Mem49[dwArg04 + 24:word32] & 2
	branch d0_55 == 0x00000000 l00001F8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F4E:
	branch Mem49[dwArg04:word32] == 0x00000000 l00001F7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F7C:
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F52:
	word32 d4_68 = Mem49[dwArg04 + 4:word32] - Mem49[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_68 - d0_55 == 0x00000000 l00001F80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F80:
	Mem78[dwArg04 + 4:word32] = Mem49[dwArg04 + 8:word32]
	Mem80[dwArg04 + 20:word32] = Mem78[dwArg04 + 28:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F8C:
	Mem87[dwArg04 + 24:word32] = Mem85[dwArg04 + 24:word32] & -4
	a0 = dwArg04 + 24
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F70:
	Mem93[dwArg04 + 24:word32] = Mem49[dwArg04 + 24:word32] | 16
	a0 = dwArg04 + 24
	d0_153 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F42:
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F1A:
	d0_153 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F96:
	a0Out = a0
	a1Out = a1_21
	a5Out = a5_23
	return d0_153
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F08_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001FB4(word32 dwArg04, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn00001FB4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB4:
	word32 d0_106
	branch dwArg04 != 0x00000000 l00001FC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC2:
	branch Mem5[0x00003DA8:word32] != 0x00000000 l00001FE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FCA:
	word32 a0_13 = Mem5[0x00003DA4:word32]
	Mem21[0x00000000:word32] = 0x00000000
	Mem36[0x00003DA8:word32] = fn000022A8(dwLoc10, a0_13, a0_13, out d1, out a0, out a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FE6:
	branch Mem39[0x00003DA8:word32] != 0x00000000 l00001FF2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF2:
	word32 d0_58 = fn00002184(Mem51[0x00003DA8:word32], dwArg04 + 4, out d1, out a0)
	a1 = d0_58
	branch d0_58 != 0x00000000 l00002010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002010:
	Mem72[d0_58:word32] = dwArg04
	a0 = d0_58 + 4
	d0_106 = d0_58 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000200C:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FEE:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FBE:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002018:
	d1Out = d1
	a0Out = a0
	a1Out = a1
	return d0_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001FB4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002020(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00002020_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002020:
	branch dwArg04 == 0x00000000 l0000204A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000202A:
	branch Mem0[0x00003DA8:word32] == 0x00000000 l0000204A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002032:
	fn000020E8(Mem23[0x00003DA8:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000204A:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002020_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000020E8(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn000020E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020E8:
	branch Mem20[Mem20[0x00003D74:word32] + 20:word16] <u 0x0027 l00002118
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002118:
	branch dwArg04 == 0x00000000 l0000217C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000211C:
	branch dwArg08 == 0x00000000 l0000217C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002120:
	word32 a3_36 = dwArg08 + -12
	branch dwArg0C - Mem20[dwArg04 + 20:word32] >=u 0x00000000 l00002162
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000212C:
	word32 a2_40 = dwArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000212E:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0x00000000 l0000217C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002134:
	branch Mem20[a2_40 + 8:byte] == 0x00 l0000212E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000213A:
	branch dwArg08 - Mem20[a2_40 + 20:word32] <u 0x00000000 l0000212E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002140:
	branch dwArg08 - Mem20[a2_40 + 24:word32] >=u 0x00000000 l0000212E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002146:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28:word32] - Mem20[dwArg04 + 16:word32] != 0x00000000 l0000217C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002160:
	a3_36 = a2_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002162:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4
	FreeMem(a3_74, Mem20[a3_74:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002106:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000217C:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000020E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002184(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn00002184_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002184:
	word32 d0_158
	word32 a0_115 = Mem26[0x00003D74:word32]
	branch Mem26[a0_115 + 20:word16] <u 0x0027 l000021B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B0:
	word32 a3_120 = 0x00000000
	branch dwArg04 == 0x00000000 l000022A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B8:
	branch dwArg08 == 0x00000000 l000022A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021BE:
	branch dwArg08 - Mem26[dwArg04 + 20:word32] >=u 0x00000000 l00002272
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002272:
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_50 = AllocMem(dwArg08 + 16, d1)
	a3_120 = d0_50
	branch d0_50 == 0x00000000 l000022A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000228C:
	Mem56[d0_50:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_50 + 4)
	Mem62[d0_50 + 12:word32] = 0x00000000
	a0_115 = dwArg04
	a3_120 = d0_50 + 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021C6:
	word32 a5_162 = Mem26[dwArg04:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021C8:
	branch Mem26[a5_162:word32] == 0x00000000 l000021EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021EA:
	word32 d3_77 = Mem26[dwArg04 + 16:word32] + 40
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_82 = AllocMem(d3_77, d1)
	a3_120 = d0_82
	branch d0_82 == 0x00000000 l000022A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002208:
	Mem88[d0_82:word32] = d3_77
	Mem91[d0_82 + 12:byte] = 0x0A
	Mem95[d0_82 + 20:word32] = d0_82 + 40
	Mem97[d0_82 + 24:word32] = d0_82 + 40
	Mem99[Mem97[d0_82 + 20:word32]:word32] = 0x00000000
	word32 a2_100 = Mem99[d0_82 + 20:word32]
	Mem103[a2_100 + 4:word32] = Mem99[dwArg04 + 16:word32]
	Mem106[d0_82 + 32:word32] = Mem103[a2_100 + 4:word32]
	Mem110[d0_82 + 28:word32] = Mem106[d0_82 + 32:word32] + Mem106[d0_82 + 20:word32]
	AddHead(dwArg04, d0_82 + 4)
	a0_115 = d0_82 + 4
	a3_120 = Allocate(d0_82 + 4, dwArg08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021CC:
	branch Mem26[a5_162 + 8:byte] == 0x00 l000021E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021D2:
	word32 d0_128 = Allocate(a5_162, dwArg08)
	a0_115 = a5_162
	a3_120 = d0_128
	branch d0_128 != 0x00000000 l00002256
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002256:
	branch (Mem135[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l000022A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002262:
	word32 a2_142 = a3_120
	word32 d2_145 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002268:
	Mem148[a2_142:word32] = 0x00000000
	word32 a2_149 = a2_142 + 4
	Mem150[a2_149:word32] = 0x00000000
	a2_142 = a2_149 + 4
	d2_145 = d2_145 - 0x00000001
	branch d2_145 != 0x00000000 l00002268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002270:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022A0:
	d0_158 = a3_120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021E6:
	a5_162 = Mem26[a5_162:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000219E:
	a0_115 = dwArg04
	d0_158 = AllocPooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022A2:
	d1Out = d1
	a0Out = a0_115
	return d0_158
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002184_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000022A8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn000022A8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022A8:
	word32 d0_51
	word32 a0_17 = Mem14[0x00003D74:word32]
	branch Mem14[a0_17 + 20:word16] <u 0x0027 l000022D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022D6:
	a1 = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l00002310
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022DC:
	word32 d0_30 = AllocMem(24, 0)
	d1 = 0
	a1 = d0_30
	branch d0_30 == 0x00000000 l00002310
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022F2:
	Mem37[d0_30:word32] = d0_30 + 4
	Mem38[d0_30 + 4:word32] = 0x00000000
	Mem40[d0_30 + 8:word32] = d0_30
	Mem42[d0_30 + 12:word32] = dwArg04
	Mem46[d0_30 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem48[d0_30 + 20:word32] = dwArg0C
	a0_17 = d0_30 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002310:
	d0_51 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022C2:
	d1 = dwArg08
	d0_51 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002312:
	d1Out = d1
	a0Out = a0_17
	a1Out = a1
	return d0_51
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000022A8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002318(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn00002318_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002318:
	branch Mem11[Mem11[0x00003D74:word32] + 20:word16] <u 0x0027 l0000233C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000233C:
	branch dwArg04 == 0x00000000 l00002380
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002340:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0x00000000 l00002372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002352:
	word32 a2_29 = a2_24 - 4
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0x00000000 l00002352
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002372:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000232E:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002380:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002318_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002388(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn00002388_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002388:
	SetSignal(0, 0x00001000)
	word32 d1_21 = 0x00001000
	branch 0x00000000 == 0x00000000 l000023B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023A6:
	d1_21 = fn0000131C(0x00000014, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B2:
	a1Out = a1
	a5Out = a5
	return d1_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002388_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000023B8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn000023B8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B8:
	word32 d0_196
	word32 d1_142 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_166 = dwArg10
	branch dwArg0C != 0x00000000 l0000240E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000240E:
	branch dwArg04 - dwArg0C >=u 0x00000000 l00002418
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002418:
	word32 d4_29 = 24
	word32 d6_30 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l00002436
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002422:
	d4_29 = 16
	d6_30 = __rol(d6_30, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l00002436
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000242A:
	d4_29 = 8
	d6_30 = __rol(d6_30, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l00002436
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002432:
	d4_29 = 0
	d6_30 = SEQ(SLICE(d6_30, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002436:
	word32 d4_61 = SEQ(SLICE(d4_29, word24, 8), SLICE(d4_29, byte, 0) + Mem17[0x00003DAC + (int32) ((int16) SEQ(SLICE(d6_30, word16, 16), SLICE(d6_30, word16, 0) & 0x00FF)):byte])
	word32 d5_63 = 32 - d4_61
	branch d5_63 != 0x00000000 l00002456
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002456:
	word32 d1_86
	word32 d2_322
	word32 d0_85 = fn000024BC(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_322)
	word32 d3_72 = dwArg10 << d5_63
	word32 d5_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u SLICE(d5_101, word16, 0)
	word32 d2_107 = __swap(d0_85 *u SLICE(d3_72, word16, 0))
	word16 v34_108 = SLICE(d2_107 + d3_102, word16, 0)
	word16 v35_109 = SLICE(d2_107, word16, 16)
	word32 d4_104 = d0_85 *u SLICE(d6_103, word16, 0)
	word16 v39_116 = SLICE(SEQ(v35_109, v34_108) + d4_104, word16, 0)
	word32 d6_82 = dwArg08 << d5_63
	word32 d2_124 = __swap(SEQ(v35_109, v39_116))
	word32 d5_105 = d5_101 *u SLICE(d6_103, word16, 0)
	a0_20 = d6_82
	d1_142 = d0_85
	word32 v48_134 = d1_86 - ((__swap(SEQ(SLICE(d3_102, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_104, word16, 16), 0x0000))) + SEQ(SLICE(d5_105, word16, 16), (SLICE(d5_105, word16, 0) + (v34_108 <u 0x0000)) + (v39_116 <u 0x0000)))
	branch v48_134 <u 0x00000000 l000024B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024AC:
	branch v48_134 != 0x00000000 l000024B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024AE:
	branch d6_82 - d2_124 >=u 0x00000000 l000024B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024B2:
	d1_142 = d0_85 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000244A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002452
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000244E:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002412
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002452:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002412:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023D0:
	branch dwArg04 - dwArg10 >=u 0x00000000 l000023E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023E2:
	branch dwArg10 != 0x00000000 l000023EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023E6:
	d3_166 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023EE:
	word32 d1_175
	word32 d2_176
	word32 d0_174 = fn000024BC(0, dwArg04, d3_166, out d1_175, out d2_176)
	word32 d2_321
	word32 d1_320
	d1_142 = fn000024BC(d1_175, dwArg08, d2_176, out d1_320, out d2_321)
	d0_196 = d0_174
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023D4:
	word32 d2_319
	word32 d1_318
	d1_142 = fn000024BC(dwArg04, dwArg08, dwArg10, out d1_318, out d2_319)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024B4:
	d0_196 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024B6:
	d1Out = d1_142
	a0Out = a0_20
	return d0_196
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000023B8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000024BC(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn000024BC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024BC:
	word32 d7_13 = d2
	branch d2 == 0x00000000 l000024D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C4:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0x00000000 l000024E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024E4:
	word32 d2_22 = __swap(d2)
	branch SLICE(d2_22, word16, 0) != 0x0000 l0000250C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000250C:
	byte bLoc26_362 = 0x00
	word32 d0_44 = 0
	branch d2 < 0x00000000 l00002528
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000251E:
	d6_17 = d6_17 * 0x00000002
	d0_44 = SEQ(SLICE(d0_44, word16, 16), SLICE(d0_44, word16, 0) + 0x0001)
	d5_19 = d5_19 * 0x00000002 + (d6_17 <u 0x00000000)
	d7_13 = d7_13 * 0x00000002
	branch d7_13 > 0x00000000 l0000251E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002528:
	word16 v41_64 = SLICE(d0_44, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252A:
	word32 d1_104
	word32 d2_73 = __swap(d5_19)
	word32 d3_74 = __swap(d7_13)
	branch SLICE(d2_73 - d3_74, word16, 0) != 0x0000 l0000253C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000253C:
	d1_104 = __swap(SEQ(SLICE(__swap(SEQ((uint16) (d5_19 % SLICE(d3_74, uint16, 0)), (uint16) (d5_19 /u SLICE(d3_74, uint16, 0)))), word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002536:
	d1_104 = 0x0000FFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002546:
	word32 d6_98 = __swap(SEQ(SLICE(d6_17, word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000254C:
	word32 d4_113 = __swap(d5_19 - __swap(d7_13) *u SLICE(d1_104, word16, 0))
	word16 wLoc22_442 = SLICE(dwLoc24, word16, 0)
	word32 d2_106 = d1_104 *u SLICE(d7_13, word16, 0)
	word32 d4_121 = SEQ(SLICE(d4_113, word16, 16), SLICE(d6_98, word16, 0))
	branch SLICE(d4_113, word16, 0) != 0x0000 l0000256C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002564:
	branch d2_106 - d4_121 <=u 0x00000000 l0000256C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000256C:
	word32 d6_133 = __swap(d1_104)
	word32 d3_140 = __swap(d6_133)
	word32 d4_142 = __swap(d7_13)
	word32 d5_141 = d7_13 *u SLICE(d3_140, word16, 0)
	word32 d6_146 = __swap(d6_133 *u SLICE(d7_13, word16, 0))
	word16 v55_147 = SLICE(d6_146 + d5_141, word16, 0)
	word16 v56_148 = SLICE(d6_146, word16, 16)
	word32 d2_143 = d6_133 *u SLICE(d4_142, word16, 0)
	word16 v59_155 = SLICE(SEQ(v56_148, v55_147) + d2_143, word16, 0)
	word32 d3_144 = d3_140 *u SLICE(d4_142, word16, 0)
	word32 d6_178 = d6_17 - __swap(SEQ(v56_148, v59_155))
	word32 d5_181 = d5_19 - ((__swap(SEQ(SLICE(d5_141, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d2_143, word16, 16), 0x0000))) + SEQ(SLICE(d3_144, word16, 16), (SLICE(d3_144, word16, 0) + (v55_147 <u 0x0000)) + (v59_155 <u 0x0000))) - (d6_178 <u 0x00000000)
	branch d5_181 >=u 0x00000000 l000025C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025AE:
	d6_178 = d6_178 + SEQ(SLICE(__swap(d7_13), word16, 16), 0x0000)
	d1_104 = d1_104 - 0x00000001
	d5_181 = d5_181 + (d6_178 <u 0x00000000) + __swap(SEQ(SLICE(d7_13, word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025C4:
	branch bLoc26_362 != 0x00 l000025E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025E0:
	word32 d6_220 = __swap(SEQ(SLICE(d6_178, word16, 16), SLICE(d5_181, word16, 0)))
	d0 = SEQ(SLICE(dwLoc24, word16, 16), SLICE(d1_104, word16, 0))
	word32 d5_221 = __swap(d5_181)
	word16 v82_224 = SLICE(d7_13, word16, 16)
	branch v41_64 == 0x0000 l000025FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025F0:
	word32 d7_230 = SEQ(v82_224, v41_64 - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025F2:
	d5_221 = d5_221 >>u 0x00000001
	word16 v86_241 = SLICE(d7_230, word16, 0)
	d6_220 = __rcr(d6_220, 0x00000001, SLICE(cond(d5_221), bool, 4))
	d7_230 = SEQ(SLICE(d7_230, word16, 16), v86_241 - 1)
	branch v86_241 != 0x0000 l000025F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025FA:
	d1 = d6_220
	d2 = d2_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025CA:
	word32 d5_266 = __swap(d5_181)
	word32 d6_267 = __swap(d6_178)
	d5_19 = SEQ(SLICE(d5_266, word16, 16), SLICE(d6_267, word16, 0))
	d6_17 = SEQ(SLICE(d6_267, word16, 16), 0x0000)
	bLoc26_362 = true
	dwLoc24 = SEQ(SLICE(d1_104, word16, 0), wLoc22_442) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002568:
	d1_104 = d1_104 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024EA:
	word32 d0_281 = __swap(d0)
	word32 d1_282 = __swap(d1)
	word32 d0_285 = SEQ(SLICE(d0_281, word16, 16), SLICE(d1_282, word16, 0))
	word32 d0_295 = SEQ((uint16) (d0_285 % SLICE(d2, uint16, 0)), SLICE(__swap(d1_282), word16, 0))
	d2 = SEQ(SLICE(__swap((uint32) (uint16) (d0_285 /u SLICE(d2, uint16, 0))), word16, 16), (uint16) (d0_295 /u SLICE(d2, uint16, 0)))
	d1 = __swap(SEQ((uint16) (d0_295 % SLICE(d2, uint16, 0)), 0x0000))
	d0 = d2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024CA:
	branch d1 == 0x00000000 l00002602
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024D0:
	branch d2 - d1 >u 0x00000000 l00002602
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024D6:
	d0 = fn0000267A(d1, d2, d2, out d1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002602:
	d1Out = d1
	d2Out = d2
	return d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000024BC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002648(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn00002648_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002648:
	branch dwArg04 > 0x00000000 l00002668
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002668:
	branch dwArg08 > 0x00000000 l0000266A_thunk_fn0000267A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000266A_thunk_fn0000267A:
	word32 d1_88
	return fn0000267A(dwArg04, dwArg08, d2, out d1_88)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000266C:
	word32 d1_89
	return -fn0000267A(dwArg04, -dwArg08, d2, out d1_89)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002652:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0x00000000 l00002660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002660:
	word32 d1_43
	return -fn0000267A(d0_36, dwArg08, d2, out d1_43)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002658:
	word32 d1_55
	return fn0000267A(d0_36, -dwArg08, d2, out d1_55)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002648_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000267A(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn0000267A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000267A:
	word32 d1_22 = __swap(d1)
	word16 v10_9 = SLICE(d1_22, word16, 0)
	word16 v11_10 = SLICE(d2, word16, 16)
	word32 d2_11 = SEQ(v11_10, v10_9)
	branch v10_9 != 0x0000 l000026A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026A0:
	word32 d3_18 = 16
	branch SLICE(d1_22, word16, 0) >=u 0x0080 l000026AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026AA:
	d1_22 = __rol(d1_22, 0x00000008)
	d3_18 = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026AE:
	branch SLICE(d1_22, word16, 0) >=u 0x0800 l000026B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026B4:
	d1_22 = __rol(d1_22, 0x00000004)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0004)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026B8:
	branch SLICE(d1_22, word16, 0) >=u 0x2000 l000026C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026BE:
	d1_22 = __rol(d1_22, 0x00000002)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0002)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026C2:
	branch SLICE(d1_22, word16, 0) < 0x0000 l000026CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026C6:
	d1_22 = __rol(d1_22, 0x00000001)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026CA:
	word32 d0_71 = d0 >>u d3_18
	word32 d2_75 = SEQ(SLICE(__swap(SEQ(v11_10, SLICE(d0, word16, 0))), word16, 16), 0x0000) >>u d3_18
	word16 v53_82 = SLICE(__swap(d3_18), word16, 16)
	uint16 v51_79 = (uint16) (d0_71 /u SLICE(d1_22, uint16, 0))
	word32 d1_90 = __swap(d1_22)
	word32 d3_102 = SEQ(v53_82, v51_79)
	word32 d0_108 = SEQ((uint16) (d0_71 % SLICE(d1_22, uint16, 0)), SLICE(d2_75, word16, 0)) - SEQ(SLICE(d2_75, word16, 16), v51_79) *u SLICE(d1_90, word16, 0)
	branch d0_108 >=u 0x00000000 l000026EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E6:
	d3_102 = SEQ(v53_82, v51_79 - 0x0001)
	d0_108 = d0_108 + d1_90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026EA:
	branch d0_108 >=u 0x00000000 l000026EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026EC:
	d1Out = __swap(__rol(d0_108, __swap(d3_102)))
	return (uint32) (uint16) SLICE(d3_102, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002682:
	word32 d0_134 = __swap(d0)
	word32 d1_135 = __swap(d1_22)
	word16 v14_137 = SLICE(d0_134, word16, 0)
	word32 d2_139 = SEQ(SLICE(__swap(d2_11), word16, 16), v14_137)
	branch v14_137 == 0x0000 l00002690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000268C:
	uint16 v17_143 = (uint16) (d2_139 /u SLICE(d1_135, uint16, 0))
	d2_139 = SEQ((uint16) (d2_139 % SLICE(d1_135, uint16, 0)), v17_143)
	d0_134 = SEQ(SLICE(d0_134, word16, 16), v17_143)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002690:
	word32 d0_150 = __swap(d0_134)
	word32 d2_154 = SEQ(SLICE(d2_139, word16, 16), SLICE(d0_150, word16, 0))
	uint16 v34_157 = (uint16) (d2_154 /u SLICE(d1_135, uint16, 0))
	d1Out = SEQ(SLICE(d1_135, word16, 16), SLICE(__swap(SEQ((uint16) (d2_154 % SLICE(d1_135, uint16, 0)), v34_157)), word16, 0))
	return SEQ(SLICE(d0_150, word16, 16), v34_157)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000267A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002700(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn00002700_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002700:
	word32 d1_171 = dwArg08
	word32 d3_202 = dwArg10
	branch dwArg0C != 0x00000000 l00002752
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002752:
	branch dwArg04 - dwArg0C <u 0x00000000 l0000280C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002758:
	word32 d4_32 = 24
	word32 d6_33 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l00002776
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002762:
	d4_32 = 16
	d6_33 = __rol(d6_33, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l00002776
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000276A:
	d4_32 = 8
	d6_33 = __rol(d6_33, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l00002776
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002772:
	d4_32 = 0
	d6_33 = SEQ(SLICE(d6_33, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002776:
	word32 d4_64 = SEQ(SLICE(d4_32, word24, 8), SLICE(d4_32, byte, 0) + Mem20[0x00003DAC + (int32) ((int16) SEQ(SLICE(d6_33, word16, 16), SLICE(d6_33, word16, 0) & 0x00FF)):byte])
	word32 d5_66 = 32 - d4_64
	branch d5_66 != 0x00000000 l00002798
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002798:
	word32 d1_89
	word32 d2_90
	word32 d0_88 = fn000024BC(dwArg04 >>u d4_64, dwArg04 << d5_66 | dwArg08 >>u d4_64, dwArg0C << d5_66 | dwArg10 >>u d4_64, out d1_89, out d2_90)
	word32 d3_75 = dwArg10 << d5_66
	word32 d7_104 = __swap(d0_88)
	word32 d6_106 = __swap(d3_75)
	word32 d3_105 = d3_75 *u SLICE(d7_104, word16, 0)
	word32 d2_110 = __swap(d0_88 *u SLICE(d3_75, word16, 0))
	word16 v36_111 = SLICE(d2_110 + d3_105, word16, 0)
	word16 v37_112 = SLICE(d2_110, word16, 16)
	word32 d4_107 = d0_88 *u SLICE(d6_106, word16, 0)
	word16 v40_119 = SLICE(SEQ(v37_112, v36_111) + d4_107, word16, 0)
	word32 d2_127 = __swap(SEQ(v37_112, v40_119))
	word32 d7_108 = d7_104 *u SLICE(d6_106, word16, 0)
	word32 d6_85 = dwArg08 << d5_66
	word32 d3_135 = __swap(SEQ(SLICE(d3_105, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_107, word16, 16), 0x0000)) + SEQ(SLICE(d7_108, word16, 16), (SLICE(d7_108, word16, 0) + (v36_111 <u 0x0000)) + (v40_119 <u 0x0000))
	word32 v49_137 = d1_89 - d2_127
	branch v49_137 <u 0x00000000 l000027F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027EE:
	branch v49_137 != 0x00000000 l000027F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027F0:
	branch d6_85 - d3_135 >=u 0x00000000 l000027F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027F4:
	d3_135 = d3_135 - d3_75
	d2_127 = d2_127 - d2_90 - (d3_135 <u 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027F8:
	word32 d6_157 = d6_85 - d3_135
	d1_171 = d1_89 - d2_127 - (d6_157 <u 0x00000000) << 32 - d5_66 | d6_157 >>u d5_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000278A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002792
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000278E:
	branch dwArg10 - dwArg08 >u 0x00000000 l0000280C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002792:
	d1_171 = dwArg08 - dwArg10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002718:
	branch dwArg04 - dwArg10 >=u 0x00000000 l0000272A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000272A:
	branch dwArg10 != 0x00000000 l00002736
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000272E:
	d3_202 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002736:
	word32 d1_211
	word32 d2_212
	fn000024BC(0, dwArg04, d3_202, out d1_211, out d2_212)
	word32 d2_355
	fn000024BC(d1_211, dwArg08, d2_212, out d1_171, out d2_355)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000271C:
	word32 d2_354
	fn000024BC(dwArg04, dwArg08, dwArg10, out d1_171, out d2_354)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000280C:
	return d1_171
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002700_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002AFC(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002AFC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AFC:
	branch dwArg04 == 0x00000000 l00002B14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B14:
	word32 a2_10 = Mem5[0x00003ED8:word32]
	branch a2_10 == 0x00000000 l00002B3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B1E:
	branch (Mem16[a2_10 + 24:word32] & 2) == 0x00000000 l00002B30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B26:
	word32 a0_103
	word32 a1_104
	word32 a5_105
	fn00001F08(a2_10, out a0_103, out a1_104, out a5_105)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B30:
	a2_10 = Mem41[a2_10 + 12:word32]
	branch a2_10 != 0x00000000 l00002B1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B08:
	word32 a0_50
	word32 a1_51
	word32 a5_53
	fn00001F08(dwArg04, out a0_50, out a1_51, out a5_53)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B3A:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002AFC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002B40(word32 d0, word32 d1, word32 a1, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a5:[0..31] d0:[0..31] d1:[0..31] Stack +0004:[0..31]
// LiveOut: d0
// Trashed: CVZN a0 d0
// Preserved: a7
fn00002B40_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B40:
	return fn00002B8C(d0, d1, a1, a5, Mem10[0x00003ECC:word32], dwArg04, fp + 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002B40_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002B5C(byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0007:[0..7] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 d0
// Preserved: a2 a7
fn00002B5C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B5C:
	word32 d0_10 = dwArg08
	branch dwArg08 == 0x00000000 l00002B86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B68:
	d0_10 = Mem5[dwArg08 + 4:word32]
	branch d0_10 - Mem5[dwArg08 + 8:word32] >=u 0x00000000 l00002B7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B72:
	Mem16[Mem5[dwArg08 + 4:word32]:byte] = bArg07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B7A:
	Mem22[dwArg08 + 20:word32] = Mem20[dwArg08 + 20:word32] + 0x00000001
	Mem25[dwArg08 + 4:word32] = Mem22[dwArg08 + 4:word32] - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B86:
	return d0_10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002B5C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002B8C(word32 d0, word32 d1, word32 a1, word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a5:[0..31] d0:[8..31] d1:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: d0
// Trashed: CVZN d0
// Preserved: X a0 a1 a2 a3 a4 a5 a6 a7 d1 d2 d3 d4 d5 d6 d7
fn00002B8C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B8C:
	word32 a7_1332 = fp + -120
	word32 d2_1092 = dwArg0C
	word32 a4_274 = dwArg08
	word32 a2_1016 = dwArg04
	word32 d4_132 = 0
	word32 d5_1046 = 0
	branch Mem40[dwArg08:byte] == 0x00 l00003B8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BAE:
	word32 d3_130
	word32 d3_1852 = 0
	branch Mem49[a4_274:byte] != 0x25 l00003A8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A8C:
	word32 d0_63 = (uint32) (uint8) Mem49[0x00002815 + (SEQ(SLICE(d0, word24, 8), Mem49[a4_274:byte]) & 0x000000FF):byte]
	d0 = d0_63 & 0x00000008
	branch (d0_63 & 0x00000008) == 0x00000000 l00003B18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B18:
	word32 d0_111
	word32 a0_70 = a2_1016 + 24
	Mem72[a0_70:word32] = Mem49[a0_70:word32] | 0x00000001
	word32 a0_73 = a2_1016 + 20
	word32 v126_74 = Mem72[a0_73:word32] - 0x00000001
	Mem75[a0_73:word32] = v126_74
	branch v126_74 < 0x00000000 l00003B4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B4A:
	word32 a7_79 = a7_1332 - 4
	Mem81[a7_79:word32] = a2_1016
	d0_111 = fn00003C30(Mem81[a7_79:word32], out d1, out a1, out a5)
	Mem94[a7_79 + 48:word32] = d0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B2A:
	a1 = a2_1016 + 4
	word32 a0_98 = Mem75[a1:word32]
	word32 a7_99 = a7_1332 - 4
	Mem101[a7_99:word32] = a2_1016
	Mem105[a1:word32] = a0_98 + 1
	byte v130_109 = Mem105[a0_98:byte]
	a2_1016 = Mem105[a7_99:word32]
	Mem115[a7_99:word32] = d1
	Mem121[a7_99 + 48:word32] = (uint32) (uint8) v130_109
	d0_111 = SEQ(SLICE(d0_63 & 0x00000008, word24, 8), v130_109)
	d1 = Mem121[a7_99:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B58:
	d0 = (int32) (int16) (int8) SEQ(SLICE(d0_111, word24, 8), Mem127[a4_274:byte])
	d5_1046 = Mem127[a7_1332 + 44:word32]
	d3_130 = 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch d0 - Mem127[a7_1332 + 44:word32] == 0x00000000 l00003B82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B6C:
	branch d5_1046 == 0xFFFFFFFF l00003B7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B74:
	word32 a7_148 = a7_1332 - 4
	Mem151[a7_148:word32] = a2_1016
	Mem154[a7_148 - 4:word32] = d5_1046
	d0 = fn00002B5C(Mem154[a7_148 - 1:byte], Mem154[a7_148:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B7E:
	d3_130 = 0x00000000
	d4_132 = d4_132 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AA8:
	word32 d0_187
	word32 a0_170 = a2_1016 + 24
	Mem173[a0_170:word32] = Mem171[a0_170:word32] | 0x00000001
	word32 a0_174 = a2_1016 + 20
	word32 v105_175 = Mem173[a0_174:word32] - 0x00000001
	Mem176[a0_174:word32] = v105_175
	branch v105_175 < 0x00000000 l00003AD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AD2:
	word32 a7_180 = a7_1332 - 4
	Mem182[a7_180:word32] = a2_1016
	word32 d1_5412
	d0_187 = fn00003C30(Mem182[a7_180:word32], out d1_5412, out a1, out a5)
	d1 = d0_187
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003ABA:
	a1 = a2_1016 + 4
	word32 a0_198 = Mem176[a1:word32]
	word32 a7_199 = a7_1332 - 4
	Mem201[a7_199:word32] = a2_1016
	Mem205[a1:word32] = a0_198 + 1
	byte v109_209 = Mem205[a0_198:byte]
	a2_1016 = Mem205[a7_199:word32]
	d0_187 = SEQ(SLICE(d0, word24, 8), v109_209)
	d1 = (uint32) (uint8) v109_209
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003ADE:
	word32 d0_238 = (uint32) (uint8) Mem235[0x00002815 + (SEQ(SLICE(d0_187, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1046 = d1
	d4_132 = d4_132 + 0x00000001
	d0 = d0_238 & 0x00000008
	branch (d0_238 & 0x00000008) != 0x00000000 l00003AA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B00:
	branch d1 == 0xFFFFFFFF l00003B12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B08:
	word32 a7_248 = a7_1332 - 4
	Mem251[a7_248:word32] = a2_1016
	Mem254[a7_248 - 4:word32] = d1
	d0 = fn00002B5C(Mem254[a7_248 - 1:byte], Mem254[a7_248:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B12:
	d4_132 = d4_132 - 0x00000001
	d3_130 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B82:
	a4_274 = a4_274 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BB8:
	Mem277[a7_1332 + 72:byte] = 0x69
	Mem278[a7_1332 + 73:byte] = 0x00
	word32 a3_279 = a4_274 + 1
	word32 d0_289 = (uint32) (uint8) Mem278[0x00002815 + (uint32) ((uint8) Mem278[a3_279:byte]):byte]
	word32 d6_1135 = -1
	d0 = d0_289 & 0x00000004
	branch (d0_289 & 0x00000004) == 0x00000000 l00002C3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BE0:
	word32 d0_305 = (uint32) (uint8) Mem278[0x00002815 + (uint32) ((uint8) Mem278[a3_279:byte]):byte]
	d6_1135 = 0
	d0 = d0_305 & 0x00000004
	branch (d0_305 & 0x00000004) == 0x00000000 l00002C3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BFA:
	word32 a7_313 = a7_1332 - 4
	Mem316[a7_313:word32] = d2_1092
	word32 d1_322 = __swap(10) *u SLICE(d6_1135, word16, 0)
	word32 d0_331 = SLICE(d6_1135, word16, 0) *u 10 + SEQ(SLICE(__swap(SEQ(SLICE(d1_322, word16, 16), SLICE(d1_322 + __swap(d6_1135) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	a3_279 = a3_279 + 1
	word32 d1_340 = (uint32) (uint8) Mem316[a3_279:byte]
	word32 d0_354 = (uint32) (uint8) Mem316[0x00002815 + (uint32) ((uint8) Mem316[a3_279:byte]):byte]
	d2_1092 = Mem316[a7_313:word32]
	d1 = d1_340 - 0x00000030
	d6_1135 = d1_340 - 0x00000030 + d0_331
	d0 = d0_354 & 0x00000004
	branch (d0_354 & 0x00000004) != 0x00000000 l00002BFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C3C:
	branch Mem361[a3_279:byte] == 0x68 l00002C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C42:
	branch Mem361[a3_279:byte] == 0x6C l00002C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C48:
	branch Mem361[a3_279:byte] == 0x4C l00002C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C4E:
	branch Mem361[a3_279:byte] == 0x7A l00002C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C54:
	branch Mem361[a3_279:byte] == 0x6A l00002C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C5A:
	branch Mem361[a3_279:byte] == 0x74 l00002C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C60:
	branch Mem361[a3_279:byte] != 0x2A l00002CCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C66:
	d7 = SEQ(SLICE(d7, word24, 8), Mem361[a7_1332 + 73:byte])
	d1 = SEQ(SLICE(d1, word24, 8), Mem361[a7_1332 + 72:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C6E:
	branch Mem361[a3_279:byte] != 0x2A l00002C78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C78:
	branch SLICE(d1, byte, 0) != 0x68 l00002C88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C7E:
	branch Mem361[a3_279:byte] != 0x68 l00002C88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C88:
	branch SLICE(d1, byte, 0) != 0x6C l00002C98
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C8E:
	branch Mem361[a3_279:byte] != 0x6C l00002C98
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C98:
	d1 = SEQ(SLICE(d1, word24, 8), Mem361[a3_279:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C94:
	d1 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C84:
	d1 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C74:
	d7 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C9A:
	a3_279 = a3_279 + 1
	branch Mem361[a3_279:byte] == 0x68 l00002C6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CA2:
	branch Mem361[a3_279:byte] == 0x6C l00002C6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CA8:
	branch Mem361[a3_279:byte] == 0x4C l00002C6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CAE:
	branch Mem361[a3_279:byte] == 0x7A l00002C6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CB4:
	branch Mem361[a3_279:byte] == 0x6A l00002C6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CBA:
	branch Mem361[a3_279:byte] == 0x74 l00002C6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CC0:
	branch Mem361[a3_279:byte] == 0x2A l00002C6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CC6:
	Mem463[a7_1332 + 72:byte] = SLICE(d1, byte, 0)
	Mem469[a7_1332 + 73:byte] = SLICE(d7, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CCE:
	branch Mem472[a7_1332 + 72:byte] != 0x6A l00002CDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CD6:
	Mem477[a7_1332 + 72:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CDC:
	branch Mem480[a7_1332 + 72:byte] != 0x74 l00002CEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CE4:
	Mem485[a7_1332 + 72:byte] = 0x69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CEA:
	branch Mem488[a7_1332 + 72:byte] != 0x7A l00002CF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF2:
	Mem493[a7_1332 + 72:byte] = 0x6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF8:
	byte v83_500 = Mem499[a3_279:byte]
	word24 v84_506 = SLICE(d7, word24, 8)
	word32 a3_1957 = a3_279 + 1
	d7 = SEQ(v84_506, v83_500)
	branch v83_500 == 0x00 l00002D6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CFC:
	branch v83_500 == 0x25 l00002D6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D02:
	branch v83_500 == 0x63 l00002D6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D08:
	branch v83_500 == 0x6E l00002D6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D0E:
	branch v83_500 == 0x5B l00002D6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D14:
	word32 d0_540
	word32 a0_523 = a2_1016 + 24
	Mem526[a0_523:word32] = Mem524[a0_523:word32] | 0x00000001
	word32 a0_527 = a2_1016 + 20
	word32 v90_528 = Mem526[a0_527:word32] - 0x00000001
	Mem529[a0_527:word32] = v90_528
	branch v90_528 < 0x00000000 l00002D3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D3E:
	word32 a7_533 = a7_1332 - 4
	Mem535[a7_533:word32] = a2_1016
	word32 d1_5411
	d0_540 = fn00003C30(Mem535[a7_533:word32], out d1_5411, out a1, out a5)
	d1 = d0_540
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D26:
	a1 = a2_1016 + 4
	word32 a0_551 = Mem529[a1:word32]
	word32 a7_552 = a7_1332 - 4
	Mem554[a7_552:word32] = a2_1016
	Mem558[a1:word32] = a0_551 + 1
	byte v96_562 = Mem558[a0_551:byte]
	a2_1016 = Mem558[a7_552:word32]
	d0_540 = SEQ(SLICE(d0, word24, 8), v96_562)
	d1 = (uint32) (uint8) v96_562
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D4A:
	word32 d0_591 = (uint32) (uint8) Mem588[0x00002815 + (SEQ(SLICE(d0_540, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1046 = d1
	d4_132 = d4_132 + 0x00000001
	d0 = d0_591 & 0x00000008
	branch (d0_591 & 0x00000008) != 0x00000000 l00002D14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D6C:
	d3_1852 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D6E:
	word24 v147_608 = SLICE(d1, word24, 8)
	word32 d1_612 = SEQ(v147_608, v83_500 - 0x25)
	branch v83_500 == 0x25 l000031BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031BA:
	word32 a0_628 = a2_1016 + 24
	Mem631[a0_628:word32] = Mem629[a0_628:word32] | 0x00000001
	word32 a0_632 = a2_1016 + 20
	word32 v159_633 = Mem631[a0_632:word32] - 0x00000001
	Mem634[a0_632:word32] = v159_633
	branch v159_633 < 0x00000000 l000031EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031EC:
	word32 a7_640 = a7_1332 - 4
	Mem642[a7_640:word32] = a2_1016
	d0 = fn00003C30(Mem642[a7_640:word32], out d1, out a1, out a5)
	Mem655[a7_640 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031CC:
	a1 = a2_1016 + 4
	word32 a0_659 = Mem634[a1:word32]
	word32 a7_660 = a7_1332 - 4
	Mem662[a7_660:word32] = a2_1016
	Mem666[a1:word32] = a0_659 + 1
	byte v163_670 = Mem666[a0_659:byte]
	a2_1016 = Mem666[a7_660:word32]
	Mem686[a7_660:word32] = d1_612
	Mem692[a7_660 + 48:word32] = (uint32) (uint8) v163_670
	d0 = SEQ(SLICE(d0, word24, 8), v163_670)
	d1 = Mem692[a7_660:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031FA:
	d5_1046 = Mem698[a7_1332 + 44:word32]
	d3_130 = d3_1852 + 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch Mem698[a7_1332 + 44:word32] == 0x00000025 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000320E:
	branch d5_1046 == 0xFFFFFFFF l00003220
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003216:
	word32 a7_735 = a7_1332 - 4
	Mem738[a7_735:word32] = a2_1016
	Mem741[a7_735 - 4:word32] = d5_1046
	d0 = fn00002B5C(Mem741[a7_735 - 1:byte], Mem741[a7_735:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003220:
	d3_130 = d3_130 - 0x00000001
	d4_132 = d4_132 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D78:
	branch v83_500 == 0x5B l00002EB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EB6:
	Mem761[a7_1332 + 44:byte] = 0x00
	branch Mem761[a3_1957:byte] != 0x5E l00002EC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EC0:
	Mem769[a7_1332 + 44:byte] = 0x01
	a3_1957 = a3_1957 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EC8:
	Mem773[a7_1332 + 52:word32] = 0x00000000
	byte v544_774 = Mem773[a7_1332 + 44:byte]
	d7 = SEQ(v84_506, v544_774)
	word32 d1_1029 = Mem773[a7_1332 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002ED4:
	word32 d5_785
	branch v544_774 == 0x00 l00002EE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE0:
	d5_785 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002ED8:
	d5_785 = 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE2:
	Mem798[a5 + d1_1029:byte] = SLICE(d5_785, byte, 0)
	d1_1029 = d1_1029 + 0x00000001
	branch d1_1029 <u 0x00000020 l00002ED4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EF4:
	Mem822[a7_1332 + 132:word32] = d2_1092
	Mem825[a7_1332 + 44:byte] = v544_774
	byte v554_826 = Mem825[a7_1332 + 44:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F00:
	branch Mem831[a3_1957:byte] == 0x00 l00002F76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F04:
	byte v556_836 = Mem831[a3_1957:byte]
	a3_1957 = a3_1957 + 1
	d1_1029 = SEQ(SLICE(d1_1029, word24, 8), v556_836)
	branch Mem831[a3_1957:byte] != 0x2D l00002F18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F0C:
	branch v556_836 - Mem831[a3_1957 + 1:byte] >=u 0x00 l00002F18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F18:
	d7 = SEQ(SLICE(d7, word24, 8), v556_836)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F12:
	a3_1957 = a3_1957 + 2
	d7 = SEQ(SLICE(d7, word24, 8), Mem831[a3_1957 + 1:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F1A:
	word32 d5_864 = (uint32) (uint8) v556_836
	d0 = (uint32) (uint8) SLICE(d7, byte, 0)
	branch d0 - d5_864 <u 0x00000000 l00002F70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F26:
	branch v554_826 == 0x00 l00002F4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F4A:
	word32 a0_883 = a7_1332 + 78 + (d5_864 >>u 0x00000003)
	d1_1029 = (uint32) (uint8) Mem891[a0_883:byte]
	Mem897[a0_883:byte] = SLICE(1 << (d5_864 & 7) | d1_1029, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F2A:
	word32 a0_902 = a7_1332 + 78 + (d5_864 >>u 0x00000003)
	d1_1029 = (uint32) (uint8) Mem891[a0_902:byte]
	Mem916[a0_902:byte] = SLICE(~(1 << (d5_864 & 7)) & d1_1029, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F66:
	d5_864 = d5_864 + 0x00000001
	d0 = (uint32) (uint8) SLICE(d7, byte, 0)
	branch d0 - d5_864 >=u 0x00000000 l00002F26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F70:
	branch Mem935[a3_1957:byte] != 0x5D l00002F00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F76:
	word32 a6_1166
	d2_1092 = Mem948[a7_1332 + 132:word32]
	a3_1957 = a3_1957 + 1
	branch Mem948[a7_1332 + 73:byte] != 0x00 l00002F96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F96:
	a6_1166 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F82:
	word32 d0_959 = d2_1092 + 0x00000003 >>u 0x00000002
	d2_1092 = (d0_959 << 0x00000002) + 0x00000004
	d0 = d0_959 << 0x00000002
	a6_1166 = Mem948[d2_1092 + -4:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F98:
	word32 a0_977 = a2_1016 + 24
	Mem980[a0_977:word32] = Mem948[a0_977:word32] | 0x00000001
	word32 a0_981 = a2_1016 + 20
	word32 v581_982 = Mem980[a0_981:word32] - 0x00000001
	Mem983[a0_981:word32] = v581_982
	branch v581_982 < 0x00000000 l00002FCA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FCA:
	word32 a7_987 = a7_1332 - 4
	Mem989[a7_987:word32] = a2_1016
	d0 = fn00003C30(Mem989[a7_987:word32], out d1, out a1, out a5)
	Mem1002[a7_987 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FAA:
	a1 = a2_1016 + 4
	word32 a0_1006 = Mem983[a1:word32]
	word32 a7_1007 = a7_1332 - 4
	Mem1009[a7_1007:word32] = a2_1016
	Mem1013[a1:word32] = a0_1006 + 1
	byte v585_1017 = Mem1013[a0_1006:byte]
	a2_1016 = Mem1013[a7_1007:word32]
	Mem1033[a7_1007:word32] = d1_1029
	Mem1039[a7_1007 + 48:word32] = (uint32) (uint8) v585_1017
	d0 = SEQ(SLICE(d0, word24, 8), v585_1017)
	d1 = Mem1039[a7_1007:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FD8:
	d5_1046 = Mem1045[a7_1332 + 44:word32]
	word32 d3_1059 = d3_1852 + 0x00000001
	word32 d4_1072 = d4_132 + 0x00000001
	branch Mem1045[a7_1332 + 44:word32] == 0xFFFFFFFF l000030A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FEC:
	word32 a7_1078 = a7_1332 - 4
	Mem1080[a7_1078:word32] = a7_1332 + 78
	Mem1084[a7_1078 - 4:word32] = a1
	Mem1086[a7_1078 - 0x00000008:word32] = 0x00000008
	Mem1089[a7_1078 - 0x0000000C:word32] = d5_1046
	d1 = (uint32) (uint8) Mem1089[Mem1089[a7_1078:word32] + fn00002648(d2_1092, Mem1089[a7_1078 - 0x0000000C:word32], Mem1089[a7_1078 - 0x00000008:word32]):byte]
	a1 = Mem1089[a7_1078 - 0x00000004:word32]
	d0 = 1 << (d5_1046 & 7) & d1
	branch d0 == 0x00000000 l000030A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000301C:
	branch d6_1135 - d3_1059 <u 0x00000000 l000030A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003022:
	byte v601_1151 = Mem1089[a7_1078 + 77:byte]
	d7 = SEQ(SLICE(d7, word24, 8), v601_1151)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003026:
	branch v601_1151 != 0x00 l0000302C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000302A:
	Mem1167[a6_1166:byte] = SLICE(d5_1046, byte, 0)
	a6_1166 = a6_1166 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000302C:
	word32 a0_1172 = a2_1016 + 24
	Mem1176[a0_1172:word32] = Mem1173[a0_1172:word32] | 0x00000001
	word32 a0_1177 = a2_1016 + 20
	word32 v607_1178 = Mem1176[a0_1177:word32] - 0x00000001
	Mem1179[a0_1177:word32] = v607_1178
	branch v607_1178 < 0x00000000 l00003056
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003056:
	word32 a7_1184 = a7_1332 - 4
	Mem1186[a7_1184:word32] = a2_1016
	word32 d1_5417
	d0 = fn00003C30(Mem1186[a7_1184:word32], out d1_5417, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000303E:
	a1 = a2_1016 + 4
	word32 a0_1202 = Mem1179[a1:word32]
	word32 a7_1203 = a7_1332 - 4
	Mem1205[a7_1203:word32] = a2_1016
	Mem1209[a1:word32] = a0_1202 + 1
	byte v611_1213 = Mem1209[a0_1202:byte]
	a2_1016 = Mem1209[a7_1203:word32]
	d0 = SEQ(SLICE(d0, word24, 8), v611_1213)
	d1 = (uint32) (uint8) v611_1213
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003062:
	d5_1046 = d1
	d3_1059 = d3_1059 + 0x00000001
	d4_1072 = d4_1072 + 0x00000001
	branch d1 == 0xFFFFFFFF l000030A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003070:
	word32 a7_1239 = a7_1332 - 4
	Mem1241[a7_1239:word32] = a7_1332 + 78
	Mem1245[a7_1239 - 4:word32] = a1
	Mem1247[a7_1239 - 0x00000008:word32] = 0x00000008
	Mem1250[a7_1239 - 0x0000000C:word32] = d1
	d1 = (uint32) (uint8) Mem1250[Mem1250[a7_1239:word32] + fn00002648(d2_1092, Mem1250[a7_1239 - 0x0000000C:word32], Mem1250[a7_1239 - 0x00000008:word32]):byte]
	a1 = Mem1250[a7_1239 - 0x00000004:word32]
	d0 = 1 << (d1 & 7) & d1
	branch d0 == 0x00000000 l000030A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000309E:
	branch d6_1135 - d3_1059 >=u 0x00000000 l00003026
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030A2:
	Mem1296[a7_1332 + 73:byte] = v601_1151
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030A6:
	branch d5_1046 == 0xFFFFFFFF l000030B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030AE:
	word32 a7_1304 = a7_1332 - 4
	Mem1310[a7_1304:word32] = a2_1016
	Mem1313[a7_1304 - 4:word32] = d5_1046
	d0 = fn00002B5C(Mem1313[a7_1304 - 1:byte], Mem1313[a7_1304:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030B8:
	d3_130 = d3_1059 - 0x00000001
	d4_132 = d4_1072 - 0x00000001
	branch Mem1333[a7_1332 + 73:byte] != 0x00 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030C4:
	branch d3_130 == 0x00000000 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030CA:
	Mem1350[a6_1166:byte] = 0x00
	Mem1353[a7_1332 + 60:word32] = Mem1350[a7_1332 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D80:
	word32 d1_1357 = SEQ(v147_608, v83_500 - 0x63)
	branch v83_500 == 0x63 l00002D96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D96:
	branch d6_1135 != 0xFFFFFFFF l00002DA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D9E:
	d6_1135 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DA0:
	word32 a1_1371
	branch Mem629[a7_1332 + 73:byte] != 0x00 l00002DBA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DBA:
	a1_1371 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DA6:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1092 = d0 + 0x00000004
	a1_1371 = Mem629[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DBC:
	word32 a0_1384 = a2_1016 + 24
	Mem1387[a0_1384:word32] = Mem629[a0_1384:word32] | 0x00000001
	word32 a0_1388 = a2_1016 + 20
	Mem1390[a0_1388:word32] = Mem1387[a0_1388:word32] - 0x00000001
	Mem1395[a7_1332 + 44:word32] = a1_1371
	branch Mem1395[a0_1388:word32] < 0x00000000 l00002DF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DF4:
	word32 a1_1401 = Mem1395[a7_1332 + 44:word32]
	word32 a7_1402 = a7_1332 - 4
	Mem1404[a7_1402:word32] = a2_1016
	Mem1406[a7_1402 + 48:word32] = a1_1401
	word32 a1_5414
	d0 = fn00003C30(Mem1406[a7_1402:word32], out d1, out a1_5414, out a5)
	Mem1419[a7_1402 + 56:word32] = d0
	Mem1422[a7_1402 + 48:word32] = Mem1419[a7_1402 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DD4:
	word32 a1_1425 = a2_1016 + 4
	word32 a0_1426 = Mem1395[a1_1425:word32]
	word32 a7_1427 = a7_1332 - 4
	Mem1429[a7_1427:word32] = a2_1016
	Mem1433[a1_1425:word32] = a0_1426 + 1
	byte v284_1437 = Mem1433[a0_1426:byte]
	a2_1016 = Mem1433[a7_1427:word32]
	Mem1446[a7_1427:word32] = d1_1357
	Mem1452[a7_1427 + 56:word32] = (uint32) (uint8) v284_1437
	d0 = SEQ(SLICE(d0, word24, 8), v284_1437)
	d1 = Mem1452[a7_1427:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E12:
	a1 = Mem1458[a7_1332 + 44:word32]
	d5_1046 = Mem1458[a7_1332 + 52:word32]
	word32 d3_1464 = d3_1852 + 0x00000001
	word32 d4_1468 = d4_132 + 0x00000001
	branch Mem1458[a7_1332 + 52:word32] == 0xFFFFFFFF l00002E8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E28:
	Mem1474[a7_1332 + 44:word32] = a1
	branch d6_1135 - d3_1464 <u 0x00000000 l00002E8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E30:
	byte v302_1481 = Mem1474[a7_1332 + 73:byte]
	d7 = SEQ(v84_506, v302_1481)
	word32 a4_1488 = Mem1474[a7_1332 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E38:
	branch v302_1481 != 0x00 l00002E3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E3C:
	Mem1497[a4_1488:byte] = SLICE(d5_1046, byte, 0)
	a4_1488 = a4_1488 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E3E:
	word32 a0_1502 = a2_1016 + 24
	Mem1506[a0_1502:word32] = Mem1503[a0_1502:word32] | 0x00000001
	word32 a0_1507 = a2_1016 + 20
	word32 v310_1508 = Mem1506[a0_1507:word32] - 0x00000001
	Mem1509[a0_1507:word32] = v310_1508
	branch v310_1508 < 0x00000000 l00002E68
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E68:
	word32 a7_1514 = a7_1332 - 4
	Mem1516[a7_1514:word32] = a2_1016
	word32 d1_5415
	d0 = fn00003C30(Mem1516[a7_1514:word32], out d1_5415, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E50:
	a1 = a2_1016 + 4
	word32 a0_1532 = Mem1509[a1:word32]
	word32 a7_1533 = a7_1332 - 4
	Mem1535[a7_1533:word32] = a2_1016
	Mem1539[a1:word32] = a0_1532 + 1
	byte v314_1543 = Mem1539[a0_1532:byte]
	a2_1016 = Mem1539[a7_1533:word32]
	d0 = SEQ(SLICE(d0, word24, 8), v314_1543)
	d1 = (uint32) (uint8) v314_1543
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E74:
	d5_1046 = d1
	d3_1464 = d3_1464 + 0x00000001
	d4_1468 = d4_1468 + 0x00000001
	branch d1 == 0xFFFFFFFF l00002E86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E82:
	branch d6_1135 - d3_1464 >=u 0x00000000 l00002E38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E86:
	Mem1579[a7_1332 + 73:byte] = v302_1481
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E8A:
	branch d5_1046 == 0xFFFFFFFF l00002E9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E92:
	word32 a7_1587 = a7_1332 - 4
	Mem1593[a7_1587:word32] = a2_1016
	Mem1596[a7_1587 - 4:word32] = d5_1046
	d0 = fn00002B5C(Mem1596[a7_1587 - 1:byte], Mem1596[a7_1587:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E9C:
	d3_130 = d3_1464 - 0x00000001
	d4_132 = d4_1468 - 0x00000001
	branch Mem1616[a7_1332 + 73:byte] != 0x00 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EA8:
	branch d3_130 == 0x00000000 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EAE:
	Mem1627[a7_1332 + 60:word32] = Mem1616[a7_1332 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D84:
	d1 = SEQ(v147_608, v83_500 - 0x6E)
	branch v83_500 == 0x6E l00003228
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003228:
	branch Mem629[a7_1332 + 73:byte] != 0x00 l000032C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003230:
	branch Mem629[a7_1332 + 72:byte] != 0x01 l00003252
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003252:
	branch Mem629[a7_1332 + 72:byte] != 0x6C l00003270
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003270:
	branch Mem629[a7_1332 + 72:byte] != 0x68 l0000328E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000328E:
	branch Mem629[a7_1332 + 72:byte] != 0x02 l000032AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032AC:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1660[Mem629[d0:word32]:word32] = d4_132
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003296:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1672[Mem629[d0:word32]:byte] = SLICE(d4_132, byte, 0)
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003278:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1684[Mem629[d0:word32]:word16] = SLICE(d4_132, word16, 0)
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000325A:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1696[Mem629[d0:word32]:word32] = d4_132
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003238:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 a0_1706 = Mem629[d0:word32]
	Mem1708[a0_1706 + 4:word32] = d4_132
	Mem1709[a0_1706:word32] = 0x00000000
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032C0:
	Mem1718[a7_1332 + 60:word32] = Mem1716[a7_1332 + 60:word32] + 0x00000001
	d3_130 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D8C:
	d1 = SEQ(v147_608, v83_500 - 0x73)
	branch v83_500 == 0x73 l000030D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030D4:
	branch Mem629[a7_1332 + 73:byte] != 0x00 l000030EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030EE:
	a5 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030DA:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1092 = d0 + 0x00000004
	a5 = Mem629[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030F0:
	branch d5_1046 == 0xFFFFFFFF l0000318C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030FA:
	word32 d0_1767 = (uint32) (uint8) Mem629[0x00002815 + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1767 & 0x00000008
	branch (d0_1767 & 0x00000008) != 0x00000000 l0000318C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003116:
	branch d6_1135 - d3_1852 <u 0x00000000 l0000318C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000311A:
	byte v190_1779 = Mem629[a7_1332 + 73:byte]
	d7 = SEQ(v84_506, v190_1779)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000311E:
	branch v190_1779 != 0x00 l00003124
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003122:
	Mem1792[a5:byte] = SLICE(d5_1046, byte, 0)
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003124:
	word32 a0_1797 = a2_1016 + 24
	Mem1801[a0_1797:word32] = Mem1798[a0_1797:word32] | 0x00000001
	word32 a0_1802 = a2_1016 + 20
	word32 v197_1803 = Mem1801[a0_1802:word32] - 0x00000001
	Mem1804[a0_1802:word32] = v197_1803
	branch v197_1803 < 0x00000000 l0000314E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000314E:
	word32 a7_1809 = a7_1332 - 4
	Mem1811[a7_1809:word32] = a2_1016
	word32 d1_5413
	d0 = fn00003C30(Mem1811[a7_1809:word32], out d1_5413, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003136:
	a1 = a2_1016 + 4
	word32 a0_1827 = Mem1804[a1:word32]
	word32 a7_1828 = a7_1332 - 4
	Mem1830[a7_1828:word32] = a2_1016
	Mem1834[a1:word32] = a0_1827 + 1
	byte v201_1838 = Mem1834[a0_1827:byte]
	a2_1016 = Mem1834[a7_1828:word32]
	d0 = SEQ(SLICE(d0, word24, 8), v201_1838)
	d1 = (uint32) (uint8) v201_1838
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000315A:
	d5_1046 = d1
	d3_1852 = d3_1852 + 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003188
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003168:
	word32 d0_1873 = (uint32) (uint8) Mem1870[0x00002815 + (SEQ(SLICE(d0, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1873 & 0x00000008
	branch (d0_1873 & 0x00000008) != 0x00000000 l00003188
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003184:
	branch d6_1135 - d3_1852 >=u 0x00000000 l0000311E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003188:
	Mem1891[a7_1332 + 73:byte] = v190_1779
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000318C:
	branch d5_1046 == 0xFFFFFFFF l0000319E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003194:
	word32 a7_1899 = a7_1332 - 4
	Mem1905[a7_1899:word32] = a2_1016
	Mem1908[a7_1899 - 4:word32] = d5_1046
	d0 = fn00002B5C(Mem1908[a7_1899 - 1:byte], Mem1908[a7_1899:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000319E:
	d3_130 = d3_1852 - 0x00000001
	d4_132 = d4_132 - 0x00000001
	branch Mem1929[a7_1332 + 73:byte] != 0x00 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031AA:
	branch d3_130 == 0x00000000 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031B0:
	Mem1945[a5:byte] = 0x00
	Mem1948[a7_1332 + 60:word32] = Mem1945[a7_1332 + 60:word32] + 0x00000001
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D92:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032CA:
	Mem1950[a7_1332 + 48:word32] = 0x00000000
	Mem1951[a7_1332 + 44:word32] = 0x00000000
	Mem1952[a7_1332 + 110:word32] = 0x00000000
	branch v83_500 != 0x00 l000032DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032DA:
	a3_1957 = a3_1957 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032DC:
	branch v83_500 != 0x70 l000032EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032E2:
	Mem1964[a7_1332 + 72:byte] = 0x6C
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032EA:
	branch d5_1046 != 0x0000002D l000032F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032F2:
	branch SLICE(d7, byte, 0) != 0x75 l00003300
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032F8:
	branch d5_1046 != 0x0000002B l00003350
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003300:
	branch d6_1135 - d3_1852 <u 0x00000000 l00003350
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003304:
	Mem1996[a7_1332 + 110:word32] = d5_1046
	word32 a0_2001 = a2_1016 + 24
	Mem2003[a0_2001:word32] = Mem1996[a0_2001:word32] | 0x00000001
	word32 a0_2004 = a2_1016 + 20
	word32 v227_2005 = Mem2003[a0_2004:word32] - 0x00000001
	Mem2006[a0_2004:word32] = v227_2005
	branch v227_2005 < 0x00000000 l0000333A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000333A:
	word32 a7_2009 = a7_1332 - 4
	Mem2011[a7_2009:word32] = a2_1016
	d0 = fn00003C30(Mem2011[a7_2009:word32], out d1, out a1, out a5)
	Mem2024[a7_2009 + 56:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000331A:
	a1 = a2_1016 + 4
	word32 a0_2028 = Mem2006[a1:word32]
	word32 a7_2029 = a7_1332 - 4
	Mem2031[a7_2029:word32] = a2_1016
	Mem2035[a1:word32] = a0_2028 + 1
	byte v231_2039 = Mem2035[a0_2028:byte]
	a2_1016 = Mem2035[a7_2029:word32]
	Mem2052[a7_2029:word32] = d1
	Mem2058[a7_2029 + 56:word32] = (uint32) (uint8) v231_2039
	d0 = SEQ(SLICE(d0, word24, 8), v231_2039)
	d1 = Mem2058[a7_2029:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003348:
	d5_1046 = Mem2064[a7_1332 + 52:word32]
	d3_1852 = d3_1852 + 0x00000001
	d4_132 = d4_132 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003350:
	branch SLICE(d7, byte, 0) != 0x69 l000034C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003358:
	branch d5_1046 != 0x00000030 l00003484
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003362:
	branch d6_1135 - d3_1852 <u 0x00000000 l00003484
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003484:
	word32 d0_2111 = (uint32) (uint8) Mem2104[0x00002815 + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2111 & 0x00000004
	branch (d0_2111 & 0x00000004) != 0x00000000 l000034C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034A0:
	word32 d0_2126 = (uint32) (uint8) Mem2104[0x00002815 + (SEQ(SLICE(d0_2111 & 0x00000004, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2126 & 0x00000044
	branch (d0_2126 & 0x00000044) == 0x00000000 l000034C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034BC:
	branch d6_1135 - d3_1852 <u 0x00000000 l000034C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034C0:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003368:
	word32 d0_2157
	word32 a0_2141 = a2_1016 + 24
	Mem2143[a0_2141:word32] = Mem2104[a0_2141:word32] | 0x00000001
	word32 a0_2144 = a2_1016 + 20
	word32 v245_2145 = Mem2143[a0_2144:word32] - 0x00000001
	Mem2146[a0_2144:word32] = v245_2145
	branch v245_2145 < 0x00000000 l0000339A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000339A:
	word32 a7_2150 = a7_1332 - 4
	Mem2152[a7_2150:word32] = a2_1016
	d0_2157 = fn00003C30(Mem2152[a7_2150:word32], out d1, out a1, out a5)
	Mem2165[a7_2150 + 56:word32] = d0_2157
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000337A:
	a1 = a2_1016 + 4
	word32 a0_2169 = Mem2146[a1:word32]
	word32 a7_2170 = a7_1332 - 4
	Mem2172[a7_2170:word32] = a2_1016
	Mem2176[a1:word32] = a0_2169 + 1
	byte v249_2180 = Mem2176[a0_2169:byte]
	a2_1016 = Mem2176[a7_2170:word32]
	Mem2187[a7_2170:word32] = d1
	Mem2193[a7_2170 + 56:word32] = (uint32) (uint8) v249_2180
	d0_2157 = SEQ(SLICE(d0, word24, 8), v249_2180)
	d1 = Mem2193[a7_2170:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033A8:
	Mem2201[a7_1332 + 64:word32] = Mem2199[a7_1332 + 52:word32]
	word32 d0_2211 = SEQ(SLICE(d0_2157, word24, 8), Mem2201[a7_1332 + 55:byte])
	word32 d3_2203 = d3_1852 + 0x00000001
	d0 = d0_2211 & 0x000000FF
	branch __btst(Mem2201[0x00002815 + (int32) ((int16) (d0_2211 & 0x000000FF)):byte], 0x0000) l000033CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033CA:
	d0 = SEQ(SLICE(d0_2211 & 0x000000FF, word24, 8), SLICE(d0_2211 & 0x000000FF, byte, 0) | 0x20)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033CE:
	branch d0 != 0x00000078 l00003466
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033D8:
	branch d6_1135 - d3_2203 <u 0x00000000 l00003466
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003466:
	d7 = 111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033DE:
	word32 d0_2255
	word32 a0_2238 = a2_1016 + 24
	Mem2241[a0_2238:word32] = Mem2201[a0_2238:word32] | 0x00000001
	word32 a0_2242 = a2_1016 + 20
	word32 v267_2243 = Mem2241[a0_2242:word32] - 0x00000001
	Mem2244[a0_2242:word32] = v267_2243
	branch v267_2243 < 0x00000000 l00003410
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003410:
	word32 a7_2248 = a7_1332 - 4
	Mem2250[a7_2248:word32] = a2_1016
	d0_2255 = fn00003C30(Mem2250[a7_2248:word32], out d1, out a1, out a5)
	Mem2263[a7_2248 + 56:word32] = d0_2255
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033F0:
	a1 = a2_1016 + 4
	word32 a0_2267 = Mem2244[a1:word32]
	word32 a7_2268 = a7_1332 - 4
	Mem2270[a7_2268:word32] = a2_1016
	Mem2274[a1:word32] = a0_2267 + 1
	byte v271_2278 = Mem2274[a0_2267:byte]
	a2_1016 = Mem2274[a7_2268:word32]
	Mem2285[a7_2268:word32] = d1
	Mem2291[a7_2268 + 56:word32] = (uint32) (uint8) v271_2278
	d0_2255 = SEQ(SLICE(d0, word24, 8), v271_2278)
	d1 = Mem2291[a7_2268:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000341E:
	Mem2299[a7_1332 + 74:word32] = Mem2297[a7_1332 + 52:word32]
	word32 d0_2319 = (uint32) (uint8) Mem2299[0x00002815 + (SEQ(SLICE(d0_2255, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2319 & 0x00000044
	branch (d0_2319 & 0x00000044) == 0x00000000 l0000344A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003444:
	branch d6_1135 - (d3_2203 + 0x00000001) <u 0x00000000 l0000344A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003448:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000344A:
	branch Mem2299[a7_1332 + 74:word32] == 0xFFFFFFFF l00003460
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003454:
	word32 a7_2336 = a7_1332 - 4
	Mem2340[a7_2336:word32] = a2_1016
	Mem2344[a7_2336 - 4:word32] = Mem2340[a7_2336 + 78:word32]
	d0 = fn00002B5C(Mem2344[a7_2336 - 1:byte], Mem2344[a7_2336:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003460:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003468:
	branch Mem2364[a7_1332 + 64:word32] == 0xFFFFFFFF l0000347E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003472:
	word32 a7_2370 = a7_1332 - 4
	Mem2375[a7_2370:word32] = a2_1016
	Mem2379[a7_2370 - 4:word32] = Mem2375[a7_2370 + 68:word32]
	d0 = fn00002B5C(Mem2379[a7_2370 - 1:byte], Mem2379[a7_2370:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000347E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034C2:
	word32 d4_2512 = d4_132
	word32 d3_2425 = d3_1852
	branch SLICE(d7, byte, 0) != 0x78 l000035F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034CA:
	branch d5_1046 != 0x00000030 l000035F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034D4:
	branch d6_1135 - d3_1852 <u 0x00000000 l000035F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034DA:
	word32 d0_2452
	word32 a0_2432 = a2_1016 + 24
	Mem2436[a0_2432:word32] = Mem2433[a0_2432:word32] | 0x00000001
	word32 a0_2437 = a2_1016 + 20
	word32 v347_2438 = Mem2436[a0_2437:word32] - 0x00000001
	Mem2439[a0_2437:word32] = v347_2438
	branch v347_2438 < 0x00000000 l0000350C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000350C:
	word32 a7_2445 = a7_1332 - 4
	Mem2447[a7_2445:word32] = a2_1016
	d0_2452 = fn00003C30(Mem2447[a7_2445:word32], out d1, out a1, out a5)
	Mem2460[a7_2445 + 56:word32] = d0_2452
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034EC:
	a1 = a2_1016 + 4
	word32 a0_2464 = Mem2439[a1:word32]
	word32 a7_2465 = a7_1332 - 4
	Mem2467[a7_2465:word32] = a2_1016
	Mem2471[a1:word32] = a0_2464 + 1
	byte v351_2475 = Mem2471[a0_2464:byte]
	a2_1016 = Mem2471[a7_2465:word32]
	Mem2494[a7_2465:word32] = d1
	Mem2500[a7_2465 + 56:word32] = (uint32) (uint8) v351_2475
	d0_2452 = SEQ(SLICE(d0, word24, 8), v351_2475)
	d1 = Mem2500[a7_2465:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000351A:
	Mem2508[a7_1332 + 64:word32] = Mem2506[a7_1332 + 52:word32]
	word32 d0_2519 = SEQ(SLICE(d0_2452, word24, 8), Mem2508[a7_1332 + 55:byte])
	word32 d3_2510 = d3_1852 + 0x00000001
	word32 d4_2514 = d4_132 + 0x00000001
	d0 = d0_2519 & 0x000000FF
	branch __btst(Mem2508[0x00002815 + (int32) ((int16) (d0_2519 & 0x000000FF)):byte], 0x0000) l00003540
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000353C:
	d0 = SEQ(SLICE(d0_2519 & 0x000000FF, word24, 8), SLICE(d0_2519 & 0x000000FF, byte, 0) | 0x20)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003540:
	branch d0 != 0x00000078 l000035DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000354A:
	branch d6_1135 - d3_2510 <u 0x00000000 l000035DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003550:
	word32 d0_2561
	word32 a0_2544 = a2_1016 + 24
	Mem2547[a0_2544:word32] = Mem2508[a0_2544:word32] | 0x00000001
	word32 a0_2548 = a2_1016 + 20
	word32 v368_2549 = Mem2547[a0_2548:word32] - 0x00000001
	Mem2550[a0_2548:word32] = v368_2549
	branch v368_2549 < 0x00000000 l00003582
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003582:
	word32 a7_2554 = a7_1332 - 4
	Mem2556[a7_2554:word32] = a2_1016
	d0_2561 = fn00003C30(Mem2556[a7_2554:word32], out d1, out a1, out a5)
	Mem2569[a7_2554 + 56:word32] = d0_2561
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003562:
	a1 = a2_1016 + 4
	word32 a0_2573 = Mem2550[a1:word32]
	word32 a7_2574 = a7_1332 - 4
	Mem2576[a7_2574:word32] = a2_1016
	Mem2580[a1:word32] = a0_2573 + 1
	byte v372_2584 = Mem2580[a0_2573:byte]
	a2_1016 = Mem2580[a7_2574:word32]
	Mem2591[a7_2574:word32] = d1
	Mem2597[a7_2574 + 56:word32] = (uint32) (uint8) v372_2584
	d0_2561 = SEQ(SLICE(d0, word24, 8), v372_2584)
	d1 = Mem2597[a7_2574:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003590:
	Mem2605[a7_1332 + 74:word32] = Mem2603[a7_1332 + 52:word32]
	word32 d0_2622 = (uint32) (uint8) Mem2605[0x00002815 + (SEQ(SLICE(d0_2561, word24, 8), Mem2605[a7_1332 + 55:byte]) & 0x000000FF):byte]
	d3_2425 = d3_2510 + 0x00000001
	d4_2512 = d4_2514 + 0x00000001
	d0 = d0_2622 & 0x00000044
	branch (d0_2622 & 0x00000044) == 0x00000000 l000035C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035B8:
	branch d6_1135 - (d3_2510 + 0x00000001) <u 0x00000000 l000035C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035C2:
	branch Mem2605[a7_1332 + 74:word32] == 0xFFFFFFFF l000035D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035CC:
	word32 a7_2637 = a7_1332 - 4
	Mem2641[a7_2637:word32] = a2_1016
	Mem2645[a7_2637 - 4:word32] = Mem2641[a7_2637 + 78:word32]
	d0 = fn00002B5C(Mem2645[a7_2637 - 1:byte], Mem2645[a7_2637:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035DC:
	branch Mem2664[a7_1332 + 64:word32] == 0xFFFFFFFF l000035F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035E6:
	word32 a7_2669 = a7_1332 - 4
	Mem2673[a7_2669:word32] = a2_1016
	Mem2677[a7_2669 - 4:word32] = Mem2673[a7_2669 + 68:word32]
	d0 = fn00002B5C(Mem2677[a7_2669 - 1:byte], Mem2677[a7_2669:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035F2:
	d3_2425 = d3_2510 - 0x00000001
	d4_2512 = d4_2514 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035BC:
	d5_1046 = Mem2605[a7_1332 + 74:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035F6:
	branch SLICE(d7, byte, 0) == 0x78 l00003602
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035FC:
	branch SLICE(d7, byte, 0) != 0x58 l0000360C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000360C:
	branch SLICE(d7, byte, 0) != 0x6F l0000361C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000361C:
	Mem2716[a7_1332 + 52:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003612:
	Mem2719[a7_1332 + 52:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003624:
	Mem2724[a7_1332 + 64:word32] = Mem2722[a7_1332 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003602:
	Mem2728[a7_1332 + 64:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000362A:
	Mem2733[a7_1332 + 114:word32] = Mem2731[a7_1332 + 64:word32]
	word32 d0_2762 = (uint32) (uint8) Mem2733[0x00002815 + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	Mem2792[a7_1332 + 132:word32] = d2_1092
	Mem2798[a7_1332 + 52:word32] = d4_2512
	Mem2803[a7_1332 + 74:byte] = SLICE(d7, byte, 0)
	d0 = d0_2762 & 0x00000044
	branch (d0_2762 & 0x00000044) == 0x00000000 l00003892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000365C:
	branch Mem2803[a7_1332 + 114:word32] != 0x0000000A l00003692
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003666:
	word32 d0_2820 = (uint32) (uint8) Mem2803[0x00002815 + (SEQ(SLICE(d0_2762 & 0x00000044, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	Mem2823[a7_1332 + 132:word32] = d2_1092
	Mem2825[a7_1332 + 52:word32] = d4_2512
	Mem2827[a7_1332 + 74:byte] = SLICE(d7, byte, 0)
	d0 = d0_2820 & 0x00000004
	branch (d0_2820 & 0x00000004) == 0x00000000 l00003892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003692:
	branch Mem2833[a7_1332 + 114:word32] != 0x00000008 l000036B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000369C:
	Mem2839[a7_1332 + 132:word32] = d2_1092
	Mem2842[a7_1332 + 52:word32] = d4_2512
	Mem2845[a7_1332 + 74:byte] = SLICE(d7, byte, 0)
	branch d5_1046 > 0x00000037 l00003892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036B2:
	Mem2853[a7_1332 + 132:word32] = d2_1092
	Mem2856[a7_1332 + 52:word32] = d4_2512
	Mem2868[a7_1332 + 64:word32] = d6_1135
	Mem2871[a7_1332 + 74:byte] = SLICE(d7, byte, 0)
	branch d6_1135 - d3_2425 <u 0x00000000 l00003892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036C8:
	d7 = Mem2871[a7_1332 + 114:word32]
	word32 a4_2883 = Mem2871[a7_1332 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036D0:
	word32 a7_2888 = a7_1332 - 4
	Mem2891[a7_2888:word32] = d2_1092
	word32 v419_2895 = Mem2891[a7_2888:word32]
	Mem2900[a7_2888:word32] = d7 >> 31
	Mem2903[a7_2888 - 4:word32] = d7
	Mem2907[a7_2888 - 8:word32] = a1
	Mem2911[a7_2888 - 12:word32] = Mem2907[a7_2888 + 52:word32]
	Mem2915[a7_2888 - 16:word32] = Mem2911[a7_2888 + 48:word32]
	Mem2918[a7_2888 - 20:word32] = d7
	Mem2920[a7_2888 - 24:word32] = d7 >> 31
	word32 d1_2923
	Mem2934[a7_2888 + 68:word32] = fn00003BB0(d4_2512, Mem2920[a7_2888 - 24:word32], Mem2920[a7_2888 - 20:word32], Mem2920[a7_2888 - 16:word32], Mem2920[a7_2888 - 12:word32], out d1_2923)
	Mem2936[a7_2888 + 72:word32] = d1_2923
	branch ((uint32) (uint8) Mem2936[0x00002815 + (SEQ(Mem2936[a7_2888 + 0x00000001:word24], SLICE(d5_1046, byte, 0)) & 0x000000FF):byte] & 0x00000004) == 0x00000000 l00003730
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003730:
	d4_2512 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003726:
	d4_2512 = d5_1046 - 0x00000030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003732:
	word32 d6_3017
	Mem2969[a7_1332 - 4:word32] = v419_2895
	Mem2977[a7_1332 - 4:word32] = Mem2969[a7_1332 - 4:word32]
	word32 d2_2979 = d4_2512 + Mem2977[a7_1332 + 68:word32]
	Mem2982[a7_1332 + 48:word32] = d2_2979
	Mem2988[a7_1332 - 8:word32] = d3_2425
	word32 d0_2971 = d4_2512 >> 31
	Mem2994[a7_1332 + 44:word32] = Mem2988[a7_1332 + 64:word32] + d0_2971 + (d2_2979 <u 0x00000000)
	word32 v441_2995 = Mem2994[a7_1332 - 8:word32]
	word32 v442_2998 = Mem2994[a7_1332 - 4:word32]
	branch ((uint32) (uint8) Mem2994[0x00002815 + (SEQ(SLICE(d0_2971, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte] & 0x00000001) == 0x00000000 l00003782
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003782:
	d6_3017 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003778:
	d6_3017 = d5_1046 - 0x00000037
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003784:
	word32 d2_3076
	Mem3029[a7_1332 - 4:word32] = v442_2998
	Mem3037[a7_1332 - 4:word32] = Mem3029[a7_1332 - 4:word32]
	word32 d2_3039 = d6_3017 + Mem3037[a7_1332 + 48:word32]
	Mem3042[a7_1332 + 68:word32] = d2_3039
	Mem3047[a7_1332 - 8:word32] = v441_2995
	word32 d0_3031 = d6_3017 >> 31
	Mem3053[a7_1332 + 64:word32] = Mem3047[a7_1332 + 44:word32] + d0_3031 + (d2_3039 <u 0x00000000)
	word32 v453_3054 = Mem3053[a7_1332 - 8:word32]
	branch ((uint32) (uint8) Mem3053[0x00002815 + (SEQ(SLICE(d0_3031, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte] & 0x00000002) == 0x00000000 l000037D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037D4:
	d2_3076 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037CA:
	d2_3076 = d5_1046 - 0x00000057
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037D6:
	word32 d0_3137
	Mem3087[a7_1332 - 4:word32] = d2_3076
	Mem3095[a7_1332 - 4:word32] = Mem3087[a7_1332 - 4:word32]
	word32 d2_3097 = d2_3076 + Mem3095[a7_1332 + 68:word32]
	Mem3100[a7_1332 + 48:word32] = d2_3097
	Mem3105[a7_1332 - 8:word32] = v453_3054
	Mem3110[a7_1332 + 44:word32] = Mem3105[a7_1332 + 64:word32] + (d2_3076 >> 31) + (d2_3097 <u 0x00000000)
	word32 a0_3121 = a2_1016 + 24
	word32 v465_3111 = Mem3110[a7_1332 - 8:word32]
	d2_1092 = Mem3110[a7_1332 - 4:word32]
	Mem3124[a0_3121:word32] = Mem3110[a0_3121:word32] | 1
	word32 a0_3125 = a2_1016 + 20
	word32 v468_3126 = Mem3124[a0_3125:word32] - 0x00000001
	Mem3127[a0_3125:word32] = v468_3126
	branch v468_3126 < 0x00000000 l00003828
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003828:
	Mem3132[a7_1332 - 4:word32] = a2_1016
	word32 d1_5416
	d0_3137 = fn00003C30(Mem3132[a7_1332 - 4:word32], out d1_5416, out a1, out a5)
	d1 = d0_3137
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003810:
	a1 = a2_1016 + 4
	word32 a0_3148 = Mem3127[a1:word32]
	Mem3151[a7_1332 - 4:word32] = a2_1016
	Mem3155[a1:word32] = a0_3148 + 1
	d0_3137 = (uint32) (uint8) Mem3155[a0_3148:byte]
	a2_1016 = Mem3155[a7_1332 - 4:word32]
	d1 = (uint32) (uint8) SLICE(d0_3137, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003834:
	Mem3174[a7_1332 + 52:word32] = Mem3172[a7_1332 + 52:word32] + 0x00000001
	word32 d0_3186 = (uint32) (uint8) Mem3174[0x00002815 + (SEQ(SLICE(d0_3137, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1046 = d1
	d3_2425 = v465_3111 + 0x00000001
	d0 = d0_3186 & 0x00000044
	branch (d0_3186 & 0x00000044) == 0x00000000 l00003892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003858:
	branch d7 != 0x0000000A l0000387C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003860:
	word32 d0_3208 = (uint32) (uint8) Mem3174[0x00002815 + (SEQ(SLICE(d0_3186 & 0x00000044, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d0 = d0_3208 & 0x00000004
	branch (d0_3208 & 0x00000004) == 0x00000000 l00003892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000387C:
	branch d7 != 0x00000008 l0000388C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003884:
	branch d1 > 0x00000037 l00003892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000388C:
	branch a4_2883 - (v465_3111 + 0x00000001) >=u 0x00000000 l000036D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003892:
	byte v476_3240 = Mem3237[a7_1332 + 74:byte]
	d7 = SEQ(SLICE(d7, word24, 8), v476_3240)
	word32 d4_3245 = Mem3237[a7_1332 + 52:word32]
	d2_1092 = Mem3237[a7_1332 + 132:word32]
	branch Mem3237[a7_1332 + 110:word32] == 0x00000000 l000038C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038A4:
	branch d3_2425 != 0x00000002 l000038C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038AC:
	branch d5_1046 == 0xFFFFFFFF l000038BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038B4:
	word32 a7_3261 = a7_1332 - 4
	Mem3274[a7_3261:word32] = a2_1016
	Mem3277[a7_3261 - 4:word32] = d5_1046
	d0 = fn00002B5C(Mem3277[a7_3261 - 1:byte], Mem3277[a7_3261:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038BE:
	d3_2425 = d3_2425 - 0x00000001
	d4_3245 = d4_3245 - 0x00000001
	d5_1046 = Mem3293[a7_1332 + 110:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038C6:
	branch d5_1046 == 0xFFFFFFFF l000038D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038CE:
	word32 a7_3301 = a7_1332 - 4
	Mem3305[a7_3301:word32] = a2_1016
	Mem3308[a7_3301 - 4:word32] = d5_1046
	d0 = fn00002B5C(Mem3308[a7_3301 - 1:byte], Mem3308[a7_3301:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038D8:
	d3_130 = d3_2425 - 0x00000001
	d4_132 = d4_3245 - 0x00000001
	branch Mem3326[a7_1332 + 73:byte] != 0x00 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038E4:
	branch d3_130 == 0x00000000 l00003A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038EA:
	branch v476_3240 != 0x75 l000039AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039AC:
	branch Mem3326[a7_1332 + 110:word32] != 0x0000002D l000039C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039C8:
	Mem3346[a7_1332 + 56:word32] = Mem3326[a7_1332 + 48:word32]
	Mem3348[a7_1332 + 52:word32] = Mem3346[a7_1332 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039B6:
	word32 v528_3350 = a7_1332 + 44
	d1 = -Mem3326[v528_3350 + 4:word32]
	d0 = -Mem3326[v528_3350:word32] - (d1 <u 0x00000000)
	a7_1332 = Mem3326[a7_1332 + 0x00000038:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039D4:
	word32 a7_3366 = a7_1332 - 4
	Mem3377[a7_3366:word32] = d0
	Mem3386[a7_3366 + 48:byte] = Mem3377[a7_3366 + 76:byte] - 0x01
	a7_1332 = a7_3366 + 4
	branch Mem3386[a7_3366 + 48:byte] == 0x00 l000039FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039FE:
	word32 d0_3400 = d2_1092 + 0x00000003 >>u 0x00000002
	d2_1092 = (d0_3400 << 0x00000002) + 0x00000004
	word32 a0_3406 = Mem3386[d2_1092 + -4:word32]
	Mem3408[a0_3406 + 4:word32] = Mem3386[a7_3366 + 60:word32]
	Mem3410[a0_3406:word32] = Mem3408[a7_3366 + 56:word32]
	d0 = d0_3400 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039E8:
	byte v540_3412 = Mem3386[a7_3366 + 48:byte] - 0x01
	Mem3413[a7_3366 + 48:byte] = v540_3412
	branch v540_3412 == 0x00 l00003A50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A50:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3413[a7_3366 + 60:word32]
	Mem3427[Mem3413[d2_1092 + -4:word32]:byte] = SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039EE:
	byte v541_3429 = Mem3413[a7_3366 + 48:byte] - 0x66
	Mem3430[a7_3366 + 48:byte] = v541_3429
	branch v541_3429 == 0x00 l00003A36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A36:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3430[a7_3366 + 60:word32]
	Mem3444[Mem3430[d2_1092 + -4:word32]:word16] = SLICE(d0, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039F6:
	byte v542_3446 = Mem3430[a7_3366 + 48:byte] - 0x04
	Mem3447[a7_3366 + 48:byte] = v542_3446
	branch v542_3446 == 0x00 l00003A1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A1C:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3447[a7_3366 + 60:word32]
	Mem3461[Mem3447[d2_1092 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039FC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A6A:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3447[a7_3366 + 60:word32]
	Mem3474[Mem3447[d2_1092 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038F2:
	word32 a7_3476 = a7_1332 - 4
	Mem3478[a7_3476:word32] = d0
	Mem3487[a7_3476 + 56:byte] = Mem3478[a7_3476 + 76:byte] - 0x01
	a7_1332 = a7_3476 + 4
	branch Mem3487[a7_3476 + 56:byte] == 0x00 l0000391C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000391C:
	word32 d0_3497 = d2_1092 + 0x00000003 >>u 0x00000002
	d2_1092 = (d0_3497 << 0x00000002) + 0x00000004
	word32 a0_3503 = Mem3487[d2_1092 + -4:word32]
	Mem3505[a0_3503 + 4:word32] = Mem3487[a7_3476 + 52:word32]
	Mem3507[a0_3503:word32] = Mem3505[a7_3476 + 48:word32]
	d0 = d0_3497 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003906:
	byte v517_3509 = Mem3487[a7_3476 + 56:byte] - 0x01
	Mem3510[a7_3476 + 56:byte] = v517_3509
	branch v517_3509 == 0x00 l00003974
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003974:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3510[a7_3476 + 52:word32]
	Mem3524[Mem3510[d2_1092 + -4:word32]:byte] = SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000390C:
	byte v518_3526 = Mem3510[a7_3476 + 56:byte] - 0x66
	Mem3527[a7_3476 + 56:byte] = v518_3526
	branch v518_3526 == 0x00 l00003958
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003958:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3527[a7_3476 + 52:word32]
	Mem3541[Mem3527[d2_1092 + -4:word32]:word16] = SLICE(d0, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003914:
	byte v519_3543 = Mem3527[a7_3476 + 56:byte] - 0x04
	Mem3544[a7_3476 + 56:byte] = v519_3543
	branch v519_3543 == 0x00 l0000393C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000393C:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3544[a7_3476 + 52:word32]
	Mem3558[Mem3544[d2_1092 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000391A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003990:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3544[a7_3476 + 52:word32]
	Mem3571[Mem3544[d2_1092 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A82:
	Mem3576[a7_1332 + 60:word32] = Mem3574[a7_1332 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A86:
	a4_274 = a3_1957
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B84:
	branch d3_130 == 0x00000000 l00003B8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B88:
	branch Mem3659[a4_274:byte] != 0x00 l00002BAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B8E:
	word32 d0_3700
	branch d5_1046 != 0xFFFFFFFF l00003BA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B96:
	branch false l00003BA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BA0:
	d0_3700 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B9C:
	d0_3700 = d5_1046
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BA4:
	return d0_3700
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002B8C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003BB0(word32 d4, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d4:[16..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00003BB0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BB0:
	word32 d0_23 = __swap(dwArg08)
	word32 d1_25 = __swap(dwArg10)
	word32 d4_29 = SEQ(SLICE(d4, word16, 16), SLICE(dwArg08, word16, 0)) *u SLICE(dwArg10, word16, 0)
	word32 d1_32 = d1_25 *u SLICE(d0_23, word16, 0)
	word32 d2_39 = dwArg08 *u SLICE(d1_25, word16, 0) + __swap(SEQ(SLICE(d4_29, word16, 16), SLICE(d4_29, word16, 0) ^ SLICE(d4_29, word16, 0))) + dwArg10 *u SLICE(d0_23, word16, 0)
	branch d2_39 >=u 0x00000000 l00003BE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BDE:
	d1_32 = d1_32 + 0x00010000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BE4:
	word32 d2_45 = __swap(d2_39)
	word32 d3_65 = __swap(dwArg0C) *u SLICE(dwArg08, word16, 0)
	word32 d3_71 = __swap(SEQ(SLICE(d3_65, word16, 16), SLICE(d3_65 + __swap(dwArg08) *u SLICE(dwArg0C, word16, 0), word16, 0)))
	word32 d3_83 = __swap(dwArg04) *u SLICE(dwArg10, word16, 0)
	word32 d3_89 = __swap(SEQ(SLICE(d3_83, word16, 16), SLICE(d3_83 + __swap(dwArg10) *u SLICE(dwArg04, word16, 0), word16, 0)))
	d1Out = SEQ(SLICE(d2_45, word16, 16), SLICE(d4_29, word16, 0))
	return (uint32) (uint16) SLICE(d2_45, word16, 0) + d1_32 + (dwArg0C *u SLICE(dwArg08, word16, 0) + SEQ(SLICE(d3_71, word16, 16), SLICE(d3_71, word16, 0) ^ SLICE(d3_71, word16, 0))) + (dwArg04 *u SLICE(dwArg10, word16, 0) + SEQ(SLICE(d3_89, word16, 16), SLICE(d3_89, word16, 0) ^ SLICE(d3_89, word16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003BB0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003C30(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5
fn00003C30_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C30:
	word32 d0_161
	word32 a5_279
	word32 a1_116
	word32 d1_118 = fn00002388(out a1_116, out a5_279)
	branch dwArg04 != 0x00000000 l00003C48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C48:
	branch (Mem26[dwArg04 + 24:word32] & 42) == 32 l00003C5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C5A:
	Mem49[dwArg04 + 24:word32] = Mem26[dwArg04 + 24:word32] | 1
	word32 d0_125 = Mem49[dwArg04 + 24:word32] & 0x00000200
	branch d0_125 == 0x00000000 l00003C72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C6C:
	d0_125 = fn00003D2C(out a1_116, out a5_279)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C72:
	branch Mem49[dwArg04 + 28:word32] != 0x00000000 l00003C90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C78:
	d0_125 = Mem49[dwArg04 + 24:word32] & 4
	branch d0_125 == 0x00000000 l00003C88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C88:
	Mem79[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C80:
	Mem83[dwArg04 + 28:word32] = 1
	d0_125 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C90:
	branch Mem86[dwArg04 + 8:word32] != 0x00000000 l00003CCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C96:
	word32 d4_100
	branch (Mem86[dwArg04 + 24:word32] & 0x00000080) == 0x00000000 l00003CAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CAA:
	d4_100 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CA6:
	d4_100 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CAC:
	word32 a0_318
	word32 d0_117 = fn00001FB4(d4_100 + Mem86[dwArg04 + 28:word32], out d1_118, out a0_318, out a1_116)
	d0_125 = d0_117
	branch d0_117 != 0x00000000 l00003CC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CC4:
	Mem131[dwArg04 + 8:word32] = d0_117 + 1
	a1_116 = d0_117 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CCC:
	Mem137[dwArg04 + 4:word32] = Mem135[dwArg04 + 8:word32]
	d1_118 = Mem137[dwArg04:word32]
	execPrivate2()
	Mem147[dwArg04 + 20:word32] = d0_125
	word32 v26_148 = Mem147[dwArg04 + 20:word32] - 0x00000001
	Mem149[dwArg04 + 20:word32] = v26_148
	branch v26_148 >= 0x00000000 l00003D12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D12:
	word32 a0_153 = Mem149[dwArg04 + 4:word32]
	Mem157[dwArg04 + 4:word32] = a0_153 + 1
	a1_116 = dwArg04 + 4
	d0_161 = SEQ(SLICE(d0_125, word24, 8), Mem157[a0_153:byte]) & 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF0:
	branch Mem149[dwArg04 + 20:word32] != -1 l00003D02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D02:
	Mem172[dwArg04 + 24:word32] = Mem149[dwArg04 + 24:word32] | 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF8:
	Mem179[dwArg04 + 24:word32] = Mem149[dwArg04 + 24:word32] | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D0A:
	Mem184[dwArg04 + 20:word32] = 0x00000000
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CC0:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C54:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C42:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D26:
	d1Out = d1_118
	a1Out = a1_116
	a5Out = a5_279
	return d0_161
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003C30_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003D2C(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00003D2C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D2C:
	word32 a2_11 = Mem5[0x00003ED8:word32]
	word32 d0_42 = a2_11
	branch a2_11 == 0x00000000 l00003D64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D3A:
	branch (Mem12[a2_11 + 24:word32] & 0x00000202) != 0x00000202 l00003D5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D4C:
	branch Mem12[a2_11:word32] == 0x00000000 l00003D5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D50:
	word32 a0_91
	fn00001F08(a2_11, out a0_91, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D5A:
	a2_11 = Mem40[a2_11 + 12:word32]
	d0_42 = a2_11
	branch a2_11 != 0x00000000 l00003D3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D64:
	a1Out = a1
	a5Out = a5
	return d0_42
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003D2C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



