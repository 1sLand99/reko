void fn00001000(word32 d0, word32 d7, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31] d7:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5
// Preserved: a7 d7
fn00001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001000:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000100A:
	word32 a6_9 = Mem0[0x00000004:word32]
	word32 d2_102 = d0
	word32 a2_196 = a0
	branch Mem0[a6_9 + 20:word16] >=u 0x0024 l00001036
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001020:
	word32 a0_13 = 0x00003E70
	word32 d0_16 = 0x0000BE96 >>u 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001030:
	Mem19[a0_13:word32] = 0x00000000
	a0_13 = a0_13 + 4
	d0_16 = d0_16 - 0x00000001
	branch d0_16 != 0x00000000 l00001030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001036:
	Mem30[0x00003E70:word32] = fp
	Mem34[0x00003E74:word32] = a6_9
	word32 d0_36 = FindTask(0x00000000)
	word32 d0_112 = OpenLibrary(0x000012BC, 0)
	branch d0_112 == 0x00000000 l00001226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001226:
	Alert(0x00038007)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001056:
	word32 d4_74
	Mem67[0x00003E78:word32] = d0_112
	branch Mem67[d0_36 + 172:word32] != 0x00000000 l00001066
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001066:
	word32 a0_73 = a0
	d4_74 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000106A:
	branch Mem67[a0_714:byte] != 0x20 l00001072
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001070:
	d4_74 = SEQ(SLICE(d4_74, word16, 16), SLICE(d4_74, word16, 0) + 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001072:
	a0_73 = a0_714 + 1
	a0_714 = a0_73
	branch Mem67[a0_714:byte] != 0x00 l0000106A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001060:
	d4_74 = 2
	d2_102 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001076:
	word32 d0_100 = d4_74 << 0x00000002
	word32 d0_107 = d0_100 + d2_102
	word32 d1_111 = 0x00010001
	d0_112 = AllocMem(d0_107 + 0x00000011, 0x00010001)
	branch d0_112 == 0x00000000 l0000123E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000123E:
	CloseLibrary(Mem67[0x00003E78:word32])
	Alert(0x00010000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000125C:
	branch Mem153[d0_36 + 172:word32] != 0x00000000 l00001268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001262:
	fn00001214(d0_36)
	fn0000126C(d0_112)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001268:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001096:
	word32 a0_447
	word32 dwLoc0C_582
	Mem169[d0_112:word32] = d0_107 + 0x00000011
	Mem173[d0_112 + 12:word32] = d4_74 - 0x00000001
	Mem177[d0_112 + 8:word32] = d0_112 + 16 + d0_100
	Mem179[0x00000000:word32] = 0x00000000
	word32 d0_180 = Mem179[d0_36 + 172:word32]
	branch d0_180 == 0x00000000 l00001190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001190:
	fn00001214(d0_36)
	Mem187[0x00003E7C:word32] = d0_180
	Mem189[0x00003E80:word32] = d0_180
	Mem194[0x00000000:word32] = 0x00000000
	dwLoc0C_582 = d0_180
	a2_196 = d0_180
	word32 d0_197 = Mem194[d0_180 + 36:word32]
	branch d0_197 == 0x00000000 l000011B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011AE:
	Enable()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011B6:
	Supervisor(d0_112)
	Mem209[d0_112 + 4:word32] = d0_197
	d2_102 = 0x000003ED
	branch d0_197 != 0x00000000 l000011D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011D2:
	Mem214[0x00003E84:word32] = d0_197
	Mem216[0x00003E88:word32] = d0_197
	Mem218[0x00003E8C:word32] = d0_197
	Mem221[d0_36 + 156:word32] = d0_197
	Mem223[d0_36 + 160:word32] = d0_197
	word32 d0_227 = Mem223[(d0_197 << 0x00000002) + 8:word32]
	branch d0_227 == 0x00000000 l000011F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F0:
	Mem231[d0_36 + 164:word32] = d0_227
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CE_thunk_fn0000127C:
	fn0000127C(out a1_710, out a5_711)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010B6:
	word32 d0_252 = Mem179[(d0_180 << 0x00000002) + 16:word32]
	word32 a1_255 = Mem179[d0_112 + 8:word32]
	word32 a0_260 = (d0_252 << 0x00000002) + 1
	word32 d0_262 = (uint32) (uint8) Mem179[d0_252 << 0x00000002:byte]
	Mem263[a0_260 + d0_262:byte] = 0x00
	Mem265[d0_112 + 16:word32] = a0_260
	word32 a6_266 = d0_112 + 20
	word32 d3_267 = 1
	word32 a0_272 = a0 + d2_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DA:
	a0_272 = a0_272 - 1
	branch Mem265[a0_272:byte] >u 0x20 l000010E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DE_1:
	word16 v37_280 = SLICE(d2_102, word16, 0)
	d2_102 = SEQ(SLICE(d2_102, word16, 16), v37_280 - 1)
	branch v37_280 != 0x0000 l000010DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E2:
	Mem285[a0_272 + 1:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E6:
	byte v40_292 = Mem291[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v40_292)
	branch v40_292 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010EA:
	branch SLICE(d1_111, byte, 0) == 0x20 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F0:
	branch SLICE(d1_111, byte, 0) == 0x09 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F6:
	branch d3_267 - Mem291[d0_112 + 12:word32] == 0x00000000 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010FC:
	Mem313[a6_266:word32] = a1_255
	a6_266 = a6_266 + 4
	d3_267 = SEQ(SLICE(d3_267, word16, 16), SLICE(d3_267, word16, 0) + 0x0001)
	branch SLICE(d1_111, byte, 0) == 0x22 l0000111A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111A:
	byte v71_324 = Mem323[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v71_324)
	branch v71_324 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111E:
	branch SLICE(d1_111, byte, 0) == 0x22 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001124:
	branch SLICE(d1_111, byte, 0) != 0x2A l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000112A:
	d1_111 = SEQ(SLICE(d1_111, word24, 8), Mem323[a2_196:byte])
	word32 d2_344 = SEQ(SLICE(d2_102, word24, 8), SLICE(d1_111, byte, 0))
	d2_102 = SEQ(SLICE(d2_344, word24, 8), SLICE(d2_344, byte, 0) & 0xDF)
	a2_196 = a2_196 + 1
	branch SLICE(d2_102, byte, 0) != 0x4E l0000113C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000113C:
	branch SLICE(d2_102, byte, 0) != 0x45 l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001142:
	d1_111 = 27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001138:
	d1_111 = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001144:
	Mem362[a1_255:byte] = SLICE(d1_111, byte, 0)
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001106:
	Mem366[a1_255:byte] = SLICE(d1_111, byte, 0)
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001108:
	byte v50_371 = Mem370[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v50_371)
	branch v50_371 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001148:
	Mem380[a1_255:byte] = 0x00
	Mem385[a6_266:word32] = 0x00000000
	execPrivate4()
	Mem416[0x00003E84:word32] = d0_262
	execPrivate5()
	Mem418[0x00003E88:word32] = d0_262
	dwLoc0C_582 = d0_112 + 16
	dwLoc10 = d3_267
	branch Mem418[Mem418[0x00003E74:word32] + 20:word16] <u 0x0024 l0000117A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001172:
	word32 v92_428 = Mem418[d0_36 + 224:word32]
	Mem429[0x00003E8C:word32] = v92_428
	branch v92_428 != 0x00000000 l0000117E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117A:
	Mem435[0x00003E8C:word32] = d0_262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117E:
	branch Mem439[d0_36 + 8:byte] != 0x0D l000011F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F8:
	a0_447 = Mem445[d0_36 + 58:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001186:
	word32 a0_450 = Mem439[d0_36 + 176:word32]
	a0_447 = a0_450 + 4 - Mem439[a0_450:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001202:
	Mem461[0x00003E98:word32] = a0_447
	Mem469[0x00003E9C:word32] = fp - 16
	fn00001354(d2_102, d7, a0_447, a2_196, d0_36, dwLoc10, dwLoc0C_582)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001212_thunk_fn0000127C:
	fn0000127C(out a1_712, out a5_713)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000110C:
	branch SLICE(d1_111, byte, 0) == 0x20 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001116:
	Mem528[a1_255:byte] = 0x00
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001112:
	Mem535[a1_255:byte] = SLICE(d1_111, byte, 0)
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001214_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000126C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001278(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1 d2
// Preserved: a7
fn00001278_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278_thunk_fn0000127C:
	word32 a1_6
	word32 a5_9
	word32 d1_13 = fn0000127C(out a1_6, out a5_9)
	a1Out = a1_6
	a5Out = a5_9
	return d1_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001278_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000127C(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000127C:
	word32 a7_6 = Mem0[0x00003E70:word32]
	word32 v7_11 = Mem0[a7_6 - 4:word32]
	word32 v5_8 = Mem0[a7_6 - 8:word32]
	word32 d1_14 = Mem0[v7_11 + 4:word32]
	branch d1_14 == 0x00000000 l0000129E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001296:
	execPrivate1()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000129E:
	CloseLibrary(Mem0[0x00003E78:word32])
	branch v5_8 == 0x00000000 l000012B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012AE:
	fn0000126C(v5_8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012B0:
	FreeMem(v7_11, Mem0[v7_11:word32])
	a1Out = v7_11
	a5Out = v7_11
	return d1_14
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000127C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000012D0(word32 d2, word32 a2, word32 a3, word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012D0:
	branch 0x00003FB8 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012E2:
	word32 d2_16 = 1
	branch Mem11[0x00003FBC:word32] == 0x00000000 l000012F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012EA:
	d2_16 = d2_16 + 0x00000001
	branch Mem11[0x00003FB8 + (d2_16 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012F6:
	word32 d2_33 = d2_16 - 0x00000001
	branch d2_33 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012FA:
	word32 d0_38 = d2_33 << 0x00000002
	call Mem11[0x00003FB8 + d0_38:word32] (retsize: 4;)
		uses: d0:d0_38,Stack +0000:dwLoc10,Stack +0004:d2,Stack +0008:a2,Stack +000C:a3,Stack +0014:dwArg04
	d2_33 = d2_33 - 0x00000001
	branch d2_33 != 0x00000000 l000012FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001308:
	word32 a1_59
	word32 a5_62
	word32 d1_65 = fn00001278(dwArg04, out a1_59, out a5_62)
	a1Out = a1_59
	a5Out = a5_62
	return d1_65
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000012D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000131C(word32 d2, word32 a2, word32 a3, word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000131C:
	branch Mem8[0x00003EA0:word32] != 0x00000000 l0000134E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001328:
	word32 a3_13 = Mem8[0x00003FC8:word32]
	Mem16[0x00003EA0:word32] = 1
	word32 d0_17 = a3_13
	branch a3_13 == 0x00000000 l00001346
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000133A:
	a2 = Mem16[a3_13 + 4:word32]
	call a2 (retsize: 4;)
		uses: d0:d0_24,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04
	a3_13 = Mem16[a3_13:word32]
	d0_17 = a3_13
	branch a3_13 != 0x00000000 l0000133A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001346:
	d1 = fn000012D0(d2, a2, a3_13, dwArg04, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000134E:
	a1Out = a1
	a5Out = a5
	return d1
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000131C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001354(word32 d2, word32 d7, word32 a0, word32 a2, word32 a3, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a2:[0..31] a3:[0..31] d2:[0..31] d7:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001354:
	word32 a3_17 = 0x00003FB0
	word32 d0_10 = 0x00003FAC
	branch 0x00003FAC == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001366:
	branch Mem8[0x00003FB0:word32] == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000136A:
	word32 v11_19 = Mem8[a3_17:word32]
	call v11_19 (retsize: 4;)
		uses: a0:a0_80,d0:d0_23,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04,Stack +0014:dwArg08,Stack +FFFFFFF8:dwLoc14,Stack +FFFFFFFC:dwLoc10
		defs: a0:a0_81,d0:d0_24
	a3_17 = a3_17 + 4
	a2 = v11_19
	branch Mem8[a3_17:word32] != 0x00000000 l0000136A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001372:
	fn0000131C(d2, a2, a3_17, fn000013D8(d7, a3_17), out a1_113, out a5_114)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001354_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001390()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn00001390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001390:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001394()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn00001394_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001394:
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001394_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000013AC()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn000013AC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013AC:
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000013AC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000013C4()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn000013C4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013C4:
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000013C4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000013D8(word32 d7, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d7:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a7 d2
fn000013D8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013D8:
	word32 a1_12
	word32 a5_13
	word32 d1_14
	fn00001474(fn00002BB8(fn00003DE0(a3, 0x0000142C, out d1_14, out a1_12, out a5_13), d1_14, d7, a1_12, a3, a5_13, 0x00001448), a3, 0x0000144C)
	word32 d2_50 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001412:
	branch d2_50 - dwLoc04 <= 0x00000000 l0000140E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000140E:
	fn000013C4()
	d2_50 = d2_50 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001418:
	return fn00003DE0(a3, 0x00001468, out d1_88, out a1_89, out a5_90)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000013D8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001474(word32 d0, word32 a3, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00001474_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001474:
	fn00001490(d0, a3, Mem10[0x00003FD0:word32], dwArg04, fp + 8)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001474_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001490(word32 d0, word32 a3, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4 d5 d6 d7
fn00001490_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001490:
	word32 a7_1975 = fp + -112
	word32 d3_1484 = dwArg0C
	word32 a5_1581 = dwArg04
	word32 a4_1932 = dwArg08
	word32 d6_1482 = 0
	branch Mem36[dwArg08:byte] == 0x00 l00001DD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014AC:
	branch Mem46[a4_1932:byte] != 0x25 l00001DB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DB0:
	word32 a7_51 = a7_1975 - 4
	Mem54[a7_51:word32] = a5_1581
	Mem64[a7_51 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0, word24, 8), Mem54[a4_1932:byte])
	a4_1932 = a4_1932 + 1
	d0 = fn00001E10(a3, Mem64[a7_51 - 4:word32], Mem64[a7_51:word32], out a0_67, out a5_1581)
	a7_1975 = a7_51 + 4
	branch d0 != 0xFFFFFFFF l00001DCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DCE:
	d6_1482 = d6_1482 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DCA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014B4:
	Mem86[a7_1975 + 64:word32] = 0x00000000
	Mem88[a7_1975 + 72:word32] = 0x00000000
	Mem92[a7_1975 + 102:word32] = 0x00000000
	word32 d5_257 = -1
	word32 d4_377 = 105
	a3 = a7_1975 + 76
	word32 d7_1026 = 0
	word32 a2_136 = a4_1932 + 1
	word32 d2_1007 = Mem92[a7_1975 + 72:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D2:
	word32 d1_104 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D4:
	word32 a7_100 = a7_1975 - 4
	Mem103[a7_100:word32] = d0
	d0 = Mem103[a7_100:word32]
	branch SLICE(SEQ(SLICE(d0, word24, 8), Mem103[0x00001DE8 + d1_104:byte]), byte, 0) - Mem103[a2_136:byte] != 0x00 l000014F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014F8:
	d1_104 = d1_104 + 0x00000001
	branch d1_104 <u 0x00000005 l000014D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014E6:
	Mem122[a7_100:word32] = d1_104
	word32 d1_124 = 1 << d1_104
	d0 = d1_124
	d1_104 = Mem122[a7_100:word32]
	d2_1007 = d2_1007 | d1_124
	a2_136 = a2_136 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001502:
	branch d1_104 <u 0x00000005 l000014D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000150A:
	word32 a0_1449
	word32 d0_160
	Mem144[a7_1975 + 72:word32] = d2_1007
	branch Mem144[a2_136:byte] != 0x2A l00001548
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001548:
	a0_1449 = 0x0000288D + (SEQ(SLICE(d0, word24, 8), Mem144[a2_136:byte]) & 0x000000FF)
	word32 d0_159 = (uint32) (uint8) Mem144[a0_1449:byte]
	d0_160 = d0_159 & 0x00000004
	branch (d0_159 & 0x00000004) == 0x00000000 l000015B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001564:
	d2_1007 = Mem144[a7_1975 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001568:
	Mem172[a7_1975 - 4:word32] = d3_1484
	word32 d1_178 = __swap(10) *u SLICE(d2_1007, word16, 0)
	word32 d1_186 = SEQ(SLICE(__swap(SEQ(SLICE(d1_178, word16, 16), SLICE(d1_178 + __swap(d2_1007) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_187 = SLICE(d2_1007, word16, 0) *u 10 + d1_186
	a2_136 = a2_136 + 1
	a0_1449 = 0x0000288D + (SEQ(SLICE(d0_187, word24, 8), Mem172[a2_136:byte]) & 0x000000FF)
	word32 d1_197 = (int32) (int16) (int8) SEQ(SLICE(d1_186, word24, 8), Mem172[a2_136:byte])
	word32 d0_211 = (uint32) (uint8) Mem172[a0_1449:byte]
	d3_1484 = Mem172[a7_1975 - 4:word32]
	d1_104 = d1_197 - 0x00000030
	d2_1007 = d1_197 - 0x00000030 + d0_187
	d0_160 = d0_211 & 0x00000004
	branch (d0_211 & 0x00000004) != 0x00000000 l00001568
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015B0:
	Mem218[a7_1975 + 64:word32] = d2_1007
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001514:
	d0_160 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v37_233 = Mem144[d0_160:word32]
	Mem234[a7_1975 + 44:word32] = v37_233
	a2_136 = a2_136 + 1
	d3_1484 = d0_160 + 0x00000004
	a0_1449 = d0_160 + 0x00000004
	branch v37_233 >= 0x00000000 l00001540
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001540:
	Mem238[a7_1975 + 64:word32] = Mem234[a7_1975 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000152C:
	Mem241[a7_1975 + 72:word32] = Mem234[a7_1975 + 72:word32] | 0x00000004
	d0_160 = -Mem241[a7_1975 + 44:word32]
	Mem246[a7_1975 + 64:word32] = d0_160
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015B4:
	branch Mem249[a2_136:byte] != 0x2E l00001648
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015BC:
	a2_136 = a2_136 + 1
	branch Mem249[a2_136:byte] != 0x2A l000015E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015E2:
	a0_1449 = 0x0000288D + (SEQ(SLICE(d0_160, word24, 8), Mem249[a2_136:byte]) & 0x000000FF)
	word32 d0_268 = (uint32) (uint8) Mem249[a0_1449:byte]
	d5_257 = 0
	d0_160 = d0_268 & 0x00000004
	branch (d0_268 & 0x00000004) == 0x00000000 l00001648
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001600:
	word32 a7_276 = a7_1975 - 4
	Mem279[a7_276:word32] = d2_1007
	word32 d1_285 = __swap(10) *u SLICE(d5_257, word16, 0)
	word32 d1_293 = SEQ(SLICE(__swap(SEQ(SLICE(d1_285, word16, 16), SLICE(d1_285 + __swap(d5_257) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_294 = SLICE(d5_257, word16, 0) *u 10 + d1_293
	a2_136 = a2_136 + 1
	a0_1449 = 0x0000288D + (SEQ(SLICE(d0_294, word24, 8), Mem279[a2_136:byte]) & 0x000000FF)
	word32 d1_304 = (int32) (int16) (int8) SEQ(SLICE(d1_293, word24, 8), Mem279[a2_136:byte])
	word32 d0_318 = (uint32) (uint8) Mem279[a0_1449:byte]
	d2_1007 = Mem279[a7_276:word32]
	d1_104 = d1_304 - 0x00000030
	d5_257 = d1_304 - 0x00000030 + d0_294
	d0_160 = d0_318 & 0x00000004
	branch (d0_318 & 0x00000004) != 0x00000000 l00001600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015C4:
	d0_160 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v45_334 = Mem249[d0_160:word32]
	Mem336[a7_1975 + 44:word32] = v45_334
	a2_136 = a2_136 + 1
	d3_1484 = d0_160 + 0x00000004
	a0_1449 = d0_160 + 0x00000004
	branch v45_334 < 0x00000000 l00001648
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015DC:
	d5_257 = Mem336[a7_1975 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001648:
	word32 a7_1467 = a7_1975
	branch Mem342[a2_136:byte] == 0x68 l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000164E:
	branch Mem342[a2_136:byte] == 0x6C l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001654:
	branch Mem342[a2_136:byte] == 0x4C l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165A:
	branch Mem342[a2_136:byte] == 0x6A l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001660:
	branch Mem342[a2_136:byte] == 0x7A l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001666:
	branch Mem342[a2_136:byte] != 0x74 l00001672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000166C:
	a2_136 = a2_136 + 1
	d4_377 = (int32) (int16) (int8) (uint32) (uint8) Mem342[a2_136:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001672:
	branch d4_377 != 0x00000068 l00001684
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000167A:
	branch Mem342[a2_136:byte] != 0x68 l00001684
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001680:
	d4_377 = 2
	a2_136 = a2_136 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001684:
	branch d4_377 != 0x0000006C l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000168C:
	branch Mem342[a2_136:byte] != 0x6C l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001692:
	d4_377 = 1
	a2_136 = a2_136 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001696:
	branch d4_377 != 0x0000006A l000016A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000169E:
	d4_377 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016A0:
	branch d4_377 != 0x0000007A l000016AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016A8:
	d4_377 = 108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016AA:
	branch d4_377 != 0x00000074 l000016B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016B2:
	d4_377 = 105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016B4:
	word32 d5_1483
	word32 d1_1019 = SEQ(SLICE(d1_104, word24, 8), Mem342[a2_136:byte])
	word32 a2_1899 = a2_136 + 1
	word32 d0_1473 = SEQ(SLICE(d0_160, word24, 8), SLICE(d1_1019, byte, 0))
	branch SLICE(d1_1019, byte, 0) == 0x25 l00001B3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B3C:
	Mem466[a7_1975 + 102:word32] = 0x00000001
	a3 = 0x00001DE4
	d5_1483 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016C0:
	branch SLICE(d0_1473, byte, 0) == 0x58 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016C6:
	branch SLICE(d0_1473, byte, 0) == 0x63 l00001ABC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ABC:
	branch d4_377 != 0x0000006C l00001AD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AD8:
	d0_1473 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem511[a3:byte] = Mem342[d0_1473 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AC4:
	d0_1473 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem522[a3:byte] = Mem342[d0_1473 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AEA:
	a0_1449 = (d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1484 = (d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem526[a7_1975 + 102:word32] = 0x00000001
	d5_1483 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016CE:
	branch SLICE(d0_1473, byte, 0) == 0x64 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016D4:
	branch SLICE(d0_1473, byte, 0) == 0x69 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016DA:
	Mem536[a7_1975 + 44:byte] = SLICE(d0_1473, byte, 0)
	branch SLICE(d0_1473, byte, 0) == 0x6E l00001B4E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B4E:
	branch d4_377 != 0x00000001 l00001B70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B70:
	branch d4_377 != 0x0000006C l00001B8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B8E:
	branch d4_377 != 0x00000068 l00001BAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BAC:
	branch d4_377 != 0x00000002 l00001BCA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BCA:
	d0_1473 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1449 = Mem536[d0_1473:word32]
	Mem576[a0_1449:word32] = d6_1482
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BB4:
	d0_1473 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1449 = Mem536[d0_1473:word32]
	Mem588[a0_1449:byte] = SLICE(d6_1482, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B96:
	d0_1473 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1449 = Mem536[d0_1473:word32]
	Mem600[a0_1449:word16] = SLICE(d6_1482, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B78:
	d0_1473 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1449 = Mem536[d0_1473:word32]
	Mem612[a0_1449:word32] = d6_1482
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B56:
	d0_1473 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1449 = Mem536[d0_1473:word32]
	Mem624[a0_1449 + 4:word32] = d6_1482
	Mem625[a0_1449:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BDE:
	d3_1484 = (d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem632[a7_1975 + 64:word32] = 0x00000000
	d5_1483 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E6:
	word32 d0_639 = SEQ(SLICE(d0_1473, word24, 8), Mem536[a7_1975 + 44:byte])
	word32 d0_642 = SEQ(SLICE(d0_639, word24, 8), SLICE(d0_639, byte, 0) - 0x6F)
	branch SLICE(d0_642, byte, 0) <=u 0x01 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016F4:
	word32 d0_649 = SEQ(SLICE(d0_642, word24, 8), Mem536[a7_1975 + 44:byte])
	branch SLICE(d0_649, byte, 0) == 0x73 l00001AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF8:
	d0_1473 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3 = Mem536[d0_1473:word32]
	Mem663[a7_1975 + 102:word32] = 0x00000000
	d3_1484 = d0_1473 + 0x00000004
	a0_1449 = d0_1473 + 0x00000004
	word32 a1_662 = a3
	branch d5_257 == 0x00000000 l00001B1A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B14:
	branch d5_257 - Mem663[a7_1975 + 102:word32] <=u 0x00000000 l00001B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B1A:
	branch Mem663[a3:byte] == 0x00 l00001B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B1E:
	d0_1473 = Mem663[a7_1975 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B22:
	d0_1473 = d0_1473 + 0x00000001
	a1_662 = a1_662 + 1
	branch d5_257 <=u 0x00000000 l00001B2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2A:
	branch d5_257 - d0_1473 <=u 0x00000000 l00001B32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2E:
	branch Mem663[a1_662:byte] != 0x00 l00001B22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B32:
	Mem721[a7_1975 + 102:word32] = d0_1473
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B36:
	d5_1483 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001700:
	branch SLICE(d0_649, byte, 0) == 0x75 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001706:
	branch SLICE(d0_649, byte, 0) != 0x78 l00001BE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BE6:
	branch SLICE(d1_1019, byte, 0) != 0x00 l00001BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BEA:
	a2_1899 = a2_1899 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BEC:
	d0_1473 = a2_1899 - a4_1932
	Mem758[a7_1975 + 102:word32] = d0_1473
	Mem760[a7_1975 + 64:word32] = 0x00000000
	a3 = a4_1932
	d5_1483 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000170E:
	branch SLICE(d1_1019, byte, 0) != 0x70 l00001720
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001714:
	Mem774[a7_1975 + 72:word32] = Mem772[a7_1975 + 72:word32] | 0x00000001
	d4_377 = 108
	d1_1019 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001720:
	word32 d3_1052
	word32 a7_1022
	branch SLICE(d1_1019, byte, 0) == 0x64 l0000172E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001726:
	branch SLICE(d1_1019, byte, 0) != 0x69 l00001878
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001878:
	word32 d0_798
	branch d4_377 != 0x00000001 l0000189C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000189C:
	branch d4_377 != 0x0000006C l000018BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018BE:
	d0_798 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem806[a7_1975 + 60:word32] = Mem803[d0_798:word32]
	Mem807[a7_1975 + 56:word32] = 0x00000000
	d3_1052 = d0_798 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018A4:
	d0_798 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem821[a7_1975 + 60:word32] = Mem803[d0_798:word32]
	Mem822[a7_1975 + 56:word32] = 0x00000000
	d3_1052 = d0_798 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001880:
	d0_798 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem836[a7_1975 + 60:word32] = Mem803[d0_798 + 0x00000004:word32]
	Mem838[a7_1975 + 56:word32] = Mem836[d0_798:word32]
	d3_1052 = d0_798 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018D6:
	branch d4_377 != 0x00000068 l000018F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018DE:
	d0_798 = SEQ(SLICE(d0_798, word16, 16), Mem845[a7_1975 + 62:word16])
	word32 a7_850 = a7_1975 - 4
	Mem853[a7_850:word32] = d1_1019
	Mem859[a7_850 + 64:word32] = (uint32) (uint16) SLICE(d0_798, word16, 0)
	Mem860[a7_850 + 60:word32] = 0x00000000
	d1_1019 = Mem860[a7_850:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018F2:
	branch d4_377 != 0x00000002 l0000190E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018FA:
	word32 d0_874 = SEQ(SLICE(d0_798, word24, 8), Mem870[a7_1975 + 63:byte])
	word32 a7_875 = a7_1975 - 4
	Mem878[a7_875:word32] = d1_1019
	Mem884[a7_875 + 64:word32] = (uint32) (uint8) SLICE(d0_874, byte, 0)
	Mem885[a7_875 + 60:word32] = 0x00000000
	d1_1019 = Mem885[a7_875:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000190E:
	word32 d0_893 = Mem892[a7_1975 + 72:word32] & 1
	Mem896[a7_1975 + 44:byte] = SLICE(d1_1019, byte, 0)
	a7_1022 = a7_1975
	branch d0_893 == 0x00000000 l000019AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000191E:
	branch SLICE(d1_1019, byte, 0) != 0x6F l0000195A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001924:
	branch d5_257 != 0x00000000 l0000194E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001928:
	word32 a7_913 = a7_1975 - 4
	Mem915[a7_913:word32] = d0_893
	Mem918[a7_913 - 4:word32] = d1_1019
	word32 d0_919 = Mem918[a7_913 + 64:word32]
	word32 d1_920 = Mem918[a7_913 + 60:word32]
	Mem937[a7_913 - 8:word32] = d2_1007
	d2_1007 = Mem937[a7_913 - 8:word32]
	d1_1019 = Mem937[a7_913 - 4:word32]
	d0_893 = Mem937[a7_913:word32]
	branch d1_920 - (d0_919 <u 0x00000000) == 0x00000000 l0000195A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000194E:
	Mem977[a7_1975 + 106:byte] = 0x30
	d7_1026 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000195A:
	a7_1022 = a7_1975
	branch SLICE(d1_1019, byte, 0) == 0x78 l0000196A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001960:
	Mem986[a7_1975 + 44:byte] = SLICE(d1_1019, byte, 0)
	branch SLICE(d1_1019, byte, 0) != 0x58 l000019AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000196A:
	Mem993[a7_1975 + 44:byte] = SLICE(d1_1019, byte, 0)
	word32 a7_994 = a7_1975 - 4
	Mem999[a7_994:word32] = d0_893
	Mem1002[a7_994 - 4:word32] = d1_1019
	word32 d0_1003 = Mem1002[a7_994 + 64:word32]
	word32 d1_1004 = Mem1002[a7_994 + 60:word32]
	Mem1010[a7_994 - 8:word32] = d2_1007
	d1_1019 = Mem1010[a7_994 - 4:word32]
	a7_1022 = a7_994 + 4
	branch d1_1004 - (d0_1003 <u 0x00000000) == 0x00000000 l000019AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001994:
	Mem1030[a7_994 + 110 + d7_1026:byte] = 0x30
	word32 d7_1028 = d7_1026 + 0x00000001
	Mem1035[a7_994 + 110 + d7_1028:byte] = SLICE(d1_1019, byte, 0)
	Mem1037[a7_994 + 48:byte] = SLICE(d1_1019, byte, 0)
	d7_1026 = d7_1028 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000172E:
	word32 d0_1064
	branch d4_377 != 0x00000001 l00001754
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001754:
	branch d4_377 != 0x0000006C l00001780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001780:
	word32 d0_1050 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1055 = Mem803[d0_1050:word32]
	Mem1058[a7_1975 + 52:word32] = d0_1055
	word32 a7_1059 = a7_1975 - 4
	Mem1062[a7_1059:word32] = d1_1019
	Mem1067[a7_1059 + 52:word32] = d0_1055 >> 31
	word32 v237_1068 = Mem1067[a7_1059:word32]
	d3_1052 = d0_1050 + 0x00000004
	d0_1064 = d0_1055 >> 31
	d1_1019 = v237_1068
	branch d4_377 != 0x00000068 l000017C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017AA:
	word32 d0_1076 = SEQ(SLICE(d0_1055 >> 31, word16, 16), Mem1067[a7_1059 + 58:word16])
	Mem1079[a7_1059:word32] = v237_1068
	word32 d1_1083 = (int32) (int16) SEQ(SLICE(v237_1068, word16, 16), SLICE(d0_1076, word16, 0))
	Mem1085[a7_1059 + 56:word32] = d1_1083
	Mem1088[a7_1059 - 4:word32] = d0_1076
	Mem1093[a7_1059 + 52:word32] = d1_1083 >> 31
	d1_1019 = Mem1093[a7_1059 - 4:word32]
	d0_1064 = Mem1093[a7_1059:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017C6:
	branch d4_377 != 0x00000002 l000017EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017CE:
	word32 d0_1110 = SEQ(SLICE(d0_1064, word24, 8), Mem1106[a7_1975 + 55:byte])
	word32 a7_1111 = a7_1975 - 4
	Mem1114[a7_1111:word32] = d1_1019
	word32 d1_1119 = (int32) (int16) (int8) SEQ(SLICE(d1_1019, word24, 8), SLICE(d0_1110, byte, 0))
	Mem1121[a7_1111 + 56:word32] = d1_1119
	Mem1124[a7_1111 - 4:word32] = d0_1110
	Mem1129[a7_1111 + 52:word32] = d1_1119 >> 31
	d1_1019 = Mem1129[a7_1111 - 4:word32]
	d0_1064 = Mem1129[a7_1111:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000175C:
	word32 d0_1140 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1144 = Mem803[d0_1140:word32]
	Mem1146[a7_1975 + 52:word32] = d0_1144
	word32 a7_1147 = a7_1975 - 4
	Mem1149[a7_1147:word32] = d1_1019
	Mem1154[a7_1147 + 52:word32] = d0_1144 >> 31
	d3_1052 = d0_1140 + 0x00000004
	d0_1064 = d0_1144 >> 31
	d1_1019 = Mem1154[a7_1147:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001736:
	d0_1064 = d3_1484 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1168[a7_1975 + 52:word32] = Mem803[d0_1064 + 0x00000004:word32]
	Mem1170[a7_1975 + 48:word32] = Mem1168[d0_1064:word32]
	d3_1052 = d0_1064 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017EC:
	Mem1175[a7_1975 + 44:byte] = SLICE(d1_1019, byte, 0)
	word32 a7_1176 = a7_1975 - 4
	Mem1179[a7_1176:word32] = d0_1064
	Mem1182[a7_1176 - 4:word32] = d1_1019
	word32 d0_1183 = Mem1182[a7_1176 + 56:word32]
	word32 d1_1184 = Mem1182[a7_1176 + 52:word32]
	Mem1190[a7_1176 - 8:word32] = d2_1007
	word32 d1_1199 = Mem1190[a7_1176 - 4:word32]
	a7_1022 = a7_1176 + 4
	branch d1_1184 - (d0_1183 <u 0x00000000) >= 0x00000000 l00001836
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001836:
	d1_1019 = SEQ(SLICE(d1_1199, word24, 8), Mem1190[a7_1176 + 48:byte])
	branch (Mem1190[a7_1176 + 76:word32] & 16) == 0x00000000 l00001850
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001850:
	branch (Mem1190[a7_1176 + 76:word32] & 8) == 0x00000000 l00001864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001858:
	Mem1227[a7_1176 + 110:byte] = 0x20
	d7_1026 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001842:
	Mem1234[a7_1176 + 110:byte] = 0x2B
	d7_1026 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001864:
	Mem1239[a7_1176 + 64:word32] = Mem1237[a7_1176 + 56:word32]
	Mem1241[a7_1176 + 60:word32] = Mem1239[a7_1176 + 52:word32]
	Mem1244[a7_1176 + 48:byte] = SLICE(d1_1019, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001816:
	Mem1250[a7_1176 + 110:byte] = 0x2D
	d7_1026 = 0x00000001
	d1_1019 = -Mem1250[a7_1176 + 56:word32]
	a7_1022 = Mem1250[a7_1176 + 0x00000040:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019AC:
	word32 d1_1271 = SEQ(SLICE(d1_1019, word24, 8), Mem1267[a7_1022 + 44:byte])
	a3 = a7_1022 + 98
	branch SLICE(d1_1271, byte, 0) == 0x78 l000019C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019BA:
	branch SLICE(d1_1271, byte, 0) != 0x58 l000019CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019CA:
	branch SLICE(d1_1271, byte, 0) != 0x6F l000019DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019DA:
	Mem1283[a7_1022 + 48:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019D0:
	Mem1286[a7_1022 + 48:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019E2:
	Mem1291[a7_1022 + 44:word32] = Mem1289[a7_1022 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019C0:
	Mem1295[a7_1022 + 44:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019E8:
	word32 a6_1307
	Mem1300[a7_1022 + 108:word32] = Mem1298[a7_1022 + 44:word32]
	branch SLICE(d1_1271, byte, 0) == 0x58 l000019FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019FA:
	a6_1307 = 0x00001E00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019F4:
	a6_1307 = 0x00001DF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019FE:
	Mem1312[a7_1022 + 44:word32] = a6_1307
	Mem1328[a7_1022 + 124:word32] = d3_1052
	Mem1342[a7_1022 + 68:word32] = d5_257
	Mem1361[a7_1022 + 48:word32] = d6_1482
	Mem1369[a7_1022 + 98:word32] = d7_1026
	word32 v189_1370 = a7_1022 + 56
	word32 d6_1371 = Mem1369[v189_1370:word32]
	word32 d7_1373 = Mem1369[v189_1370 + 4:word32]
	word32 d3_1375 = Mem1369[a7_1022 + 102:word32]
	word32 a1_1377 = Mem1369[a7_1022 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A20:
	word32 d1_1380 = Mem1379[a7_1022 + 108:word32]
	word32 a7_1385 = a7_1022 - 4
	Mem1387[a7_1385:word32] = d1_1380 >> 31
	Mem1390[a7_1385 - 4:word32] = d1_1380
	Mem1394[a7_1385 - 8:word32] = a1_1377
	Mem1397[a7_1385 - 12:word32] = d1_1380
	Mem1399[a7_1385 - 16:word32] = d1_1380 >> 31
	Mem1402[a7_1385 - 20:word32] = d7_1373
	Mem1405[a7_1385 - 24:word32] = d6_1371
	word32 d1_1408 = fn00002778(Mem1405[a7_1385 - 24:word32], Mem1405[a7_1385 - 20:word32], Mem1405[a7_1385 - 16:word32], Mem1405[a7_1385 - 12:word32])
	word32 v193_1416 = Mem1405[a7_1385 - 8:word32]
	word32 d1_1421 = Mem1405[a7_1385 - 4:word32]
	word32 d0_1423 = Mem1405[a7_1385:word32]
	a3 = a3 - 1
	Mem1430[a3:byte] = Mem1405[v193_1416 + d1_1408:byte]
	Mem1433[a7_1385:word32] = d0_1423
	Mem1436[a7_1385 - 4:word32] = d1_1421
	Mem1439[a7_1385 - 8:word32] = v193_1416
	Mem1442[a7_1385 - 12:word32] = d1_1421
	Mem1444[a7_1385 - 16:word32] = d0_1423
	Mem1446[a7_1385 - 20:word32] = d7_1373
	Mem1448[a7_1385 - 24:word32] = d6_1371
	word32 d1_1452
	word32 d0_1451 = fn00002430(Mem1448[a7_1385 - 24:word32], Mem1448[a7_1385 - 20:word32], Mem1448[a7_1385 - 16:word32], Mem1448[a7_1385 - 12:word32], out d1_1452, out a0_1449)
	a1_1377 = Mem1448[a7_1385 - 8:word32]
	d6_1371 = d0_1451
	d7_1373 = d1_1452
	a7_1467 = a7_1385 + 4
	d3_1375 = d3_1375 + 0x00000001
	d0_1473 = d1_1452
	branch d0_1451 - (d1_1452 <u 0x00000000) != 0x00000000 l00001A20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A8E:
	Mem1480[a7_1385 + 106:word32] = d3_1375
	d7_1026 = Mem1480[a7_1385 + 102:word32]
	d6_1482 = Mem1480[a7_1385 + 52:word32]
	d5_1483 = Mem1480[a7_1385 + 72:word32]
	d3_1484 = Mem1480[a7_1385 + 128:word32]
	branch d5_1483 != 0xFFFFFFFF l00001AB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AB0:
	Mem1489[a7_1385 + 76:word32] = Mem1480[a7_1385 + 76:word32] & 0xFFFFFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AAA:
	d5_1483 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BFC:
	branch d5_1483 - Mem1498[a7_1467 + 102:word32] >u 0x00000000 l00001C0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C0A:
	Mem1504[a7_1467 + 44:word32] = d5_1483
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C02:
	Mem1507[a7_1467 + 44:word32] = Mem1498[a7_1467 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C0E:
	word32 a7_1510 = a7_1467 - 4
	Mem1518[a7_1510:word32] = d0_1473
	Mem1533[a7_1510 + 52:word32] = Mem1518[a7_1510 + 48:word32] + d7_1026
	Mem1539[a7_1510:word32] = Mem1533[a7_1510:word32]
	word32 d0_1543 = Mem1539[a7_1510:word32]
	branch Mem1539[a7_1510 + 52:word32] - Mem1539[a7_1510 + 68:word32] <u 0x00000000 l00001C32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C32:
	Mem1548[a7_1510:word32] = d0_1543
	Mem1553[a7_1510 + 48:word32] = Mem1548[a7_1510 + 68:word32] - Mem1548[a7_1510 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C2C:
	Mem1558[a7_1510 + 48:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C42:
	Mem1566[a7_1467 + 48:word32] = Mem1564[a7_1467 + 44:word32]
	word32 d0_1568 = Mem1566[a7_1467 + 72:word32] & 2
	branch d0_1568 == 0x00000000 l00001C84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C50:
	word32 d2_1573 = 0
	branch d7_1026 == 0x00000000 l00001C84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C56:
	word32 a7_1580 = a7_1467 - 4
	Mem1583[a7_1580:word32] = a5_1581
	Mem1595[a7_1580 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1568, word24, 8), Mem1583[a7_1580 + 110 + d2_1573:byte])
	d0_1568 = fn00001E10(a3, Mem1595[a7_1580 - 4:word32], Mem1595[a7_1580:word32], out a0_1449, out a5_1581)
	branch d0_1568 != 0xFFFFFFFF l00001C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C7C:
	d2_1573 = d2_1573 + 0x00000001
	d6_1482 = d6_1482 + 0x00000001
	branch d7_1026 - d2_1573 >u 0x00000000 l00001C56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C84:
	branch (Mem1622[a7_1467 + 72:word32] & 4) != 0x00000000 l00001CD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C8C:
	word32 d2_1628 = 0
	branch Mem1622[a7_1467 + 48:word32] == 0x00000000 l00001CD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C94:
	word32 d4_1633 = Mem1622[a7_1467 + 72:word32]
	word32 a4_1635 = Mem1622[a7_1467 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C9C:
	word32 a0_1650
	word32 a7_1637 = a7_1467 - 4
	Mem1640[a7_1637:word32] = a5_1581
	branch (d4_1633 & 2) == 0x00000000 l00001CAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CAA:
	a0_1650 = SEQ(SLICE(a0_1449, word16, 16), 0x0020)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA4:
	a0_1650 = SEQ(SLICE(a0_1449, word16, 16), 0x0030)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CAE:
	Mem1657[a7_1467 - 8:word32] = a0_1650
	branch fn00001E10(a3, Mem1657[a7_1467 - 8:word32], Mem1657[a7_1467 - 4:word32], out a0_1449, out a5_1581) != 0xFFFFFFFF l00001CC6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CC6:
	d2_1628 = d2_1628 + 0x00000001
	d6_1482 = d6_1482 + 0x00000001
	branch a4_1635 - d2_1628 >u 0x00000000 l00001C9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CCE:
	Mem1688[a7_1637 + 52:word32] = a4_1635
	Mem1691[a7_1637 + 76:word32] = d4_1633
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CD6:
	word32 d0_1696 = Mem1695[a7_1467 + 72:word32] & 2
	branch d0_1696 != 0x00000000 l00001D12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CDE:
	word32 d2_1701 = 0
	branch d7_1026 == 0x00000000 l00001D12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CE4:
	word32 a7_1711 = a7_1467 - 4
	Mem1714[a7_1711:word32] = a5_1581
	Mem1726[a7_1711 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1696, word24, 8), Mem1714[a7_1711 + 110 + d2_1701:byte])
	d0_1696 = fn00001E10(a3, Mem1726[a7_1711 - 4:word32], Mem1726[a7_1711:word32], out a0_2923, out a5_1581)
	branch d0_1696 != 0xFFFFFFFF l00001D0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D0A:
	d2_1701 = d2_1701 + 0x00000001
	d6_1482 = d6_1482 + 0x00000001
	branch d7_1026 - d2_1701 >u 0x00000000 l00001CE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D12:
	word32 d2_1753 = Mem1752[a7_1467 + 102:word32]
	branch d5_1483 - Mem1752[a7_1467 + 102:word32] <=u 0x00000000 l00001D40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D1C:
	word32 a7_1767 = a7_1467 - 4
	Mem1770[a7_1767:word32] = a5_1581
	Mem1773[a7_1767 - 0x00000004:word32] = 0x00000030
	d0_1696 = fn00001E10(a3, Mem1773[a7_1767 - 0x00000004:word32], Mem1773[a7_1767:word32], out a0_2924, out a5_1581)
	branch d0_1696 != 0xFFFFFFFF l00001D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D38:
	d2_1753 = d2_1753 + 0x00000001
	d6_1482 = d6_1482 + 0x00000001
	branch d5_1483 - d2_1753 >u 0x00000000 l00001D1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D40:
	word32 d2_1798 = 0
	branch Mem1800[a7_1467 + 102:word32] == 0x00000000 l00001D76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D48:
	word32 a4_1805 = Mem1800[a7_1467 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D4C:
	word32 a7_1807 = a7_1467 - 4
	Mem1810[a7_1807:word32] = a5_1581
	Mem1822[a7_1807 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1696, word24, 8), Mem1810[a3 + d2_1798:byte])
	d0_1696 = fn00001E10(a3, Mem1822[a7_1807 - 4:word32], Mem1822[a7_1807:word32], out a0_2925, out a5_1581)
	branch d0_1696 != 0xFFFFFFFF l00001D6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D6E:
	d2_1798 = d2_1798 + 0x00000001
	d6_1482 = d6_1482 + 0x00000001
	branch a4_1805 - d2_1798 >u 0x00000000 l00001D4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D76:
	d0 = Mem1848[a7_1467 + 72:word32] & 4
	branch d0 == 0x00000000 l00001DAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D7E:
	word32 d2_1854 = 0
	branch Mem1848[a7_1467 + 48:word32] == 0x00000000 l00001DAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D86:
	a3 = Mem1848[a7_1467 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D8A:
	word32 a7_1861 = a7_1467 - 4
	Mem1864[a7_1861:word32] = a5_1581
	Mem1867[a7_1861 - 0x00000004:word32] = 0x00000020
	d0 = fn00001E10(a3, Mem1867[a7_1861 - 0x00000004:word32], Mem1867[a7_1861:word32], out a0_2926, out a5_1581)
	branch d0 != 0xFFFFFFFF l00001DA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA4:
	d2_1854 = d2_1854 + 0x00000001
	d6_1482 = d6_1482 + 0x00000001
	branch a3 - d2_1854 >u 0x00000000 l00001D8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DAC:
	a7_1975 = a7_1467
	a4_1932 = a2_1899
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD0:
	branch Mem1934[a4_1932:byte] != 0x00 l000014AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D6A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D32:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D04:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CC0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C76:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD8:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001490_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001E10(word32 a3, word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00001E10_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E10:
	word32 a0_105
	word32 d1_54
	Mem17[dwArg08 + 24:word32] = Mem11[dwArg08 + 24:word32] | 2
	word32 v13_19 = Mem17[dwArg08 + 20:word32] - 0x00000001
	Mem20[dwArg08 + 20:word32] = v13_19
	branch v13_19 < 0x00000000 l00001E54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E2C:
	word32 d0_23 = 10
	branch dwArg04 != 10 l00001E3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E32:
	d0_23 = Mem20[dwArg08 + 24:word32] & 0x00000080
	branch d0_23 != 0x00000000 l00001E54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E54:
	d1_54 = fn00001E6C(dwArg04, a3, dwArg04, dwArg08, out a0_105, out a1_44, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E3E:
	a0_105 = Mem20[dwArg08 + 4:word32]
	Mem64[dwArg08 + 4:word32] = a0_105 + 1
	Mem67[a0_105:byte] = SLICE(dwArg04, byte, 0)
	d1_54 = (uint32) (uint8) SLICE(SEQ(SLICE(d0_23, word24, 8), Mem67[a0_105:byte]), byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E62:
	a0Out = a0_105
	a5Out = a5
	return d1_54
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001E10_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001E6C(word32 d2, word32 a3, word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn00001E6C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E6C:
	word32 d0_109
	word32 a5_129
	word32 a1_127
	fn00002400(d2, dwArg08, a3, out a1_127, out a5_129)
	branch dwArg08 != 0x00000000 l00001E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E88:
	branch (Mem29[dwArg08 + 24:word32] & 73) == 64 l00001E9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9A:
	branch Mem29[dwArg08 + 28:word32] != 0x00000000 l00001EB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EA0:
	branch (Mem29[dwArg08 + 24:word32] & 4) == 0x00000000 l00001EB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB0:
	Mem62[dwArg08 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EA8:
	Mem66[dwArg08 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB8:
	branch Mem69[dwArg08 + 8:word32] != 0x00000000 l00001EF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EF8:
	branch Mem69[dwArg08:word32] == 0x00000000 l00001F52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F52:
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EFC:
	word32 d0_101 = Mem69[dwArg08 + 24:word32] & 0x00000080
	branch d0_101 == 0x00000000 l00001F28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F08:
	d0_101 = 10
	branch dwArg04 != 10 l00001F28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F28:
	word32 d4_95 = Mem69[dwArg08 + 4:word32] - Mem69[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_95 - d0_101 == 0x00000000 l00001F56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F46:
	Mem108[dwArg08 + 24:word32] = Mem69[dwArg08 + 24:word32] | 16
	a0 = dwArg08 + 24
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F0E:
	word32 a0_112 = Mem69[dwArg08 + 4:word32]
	Mem116[dwArg08 + 4:word32] = a0_112 + 1
	Mem118[a0_112:byte] = SLICE(dwArg04, byte, 0)
	d0_109 = fn00001F80(d2, a3, dwArg08, out a0, out a1_127, out a5_129)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EBE:
	word32 d4_145
	branch (Mem69[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l00001ED2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED2:
	d4_145 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ECE:
	d4_145 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED4:
	word32 d0_162 = fn0000202C(d4_145 + Mem69[dwArg08 + 28:word32], out d1_163, out a0, out a1_127)
	branch d0_162 != 0x00000000 l00001EEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EEE:
	Mem176[dwArg08 + 8:word32] = d0_162 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F56:
	Mem183[dwArg08 + 24:word32] = Mem181[dwArg08 + 24:word32] | 2
	a0 = Mem183[dwArg08 + 8:word32]
	Mem190[a0:byte] = SLICE(dwArg04, byte, 0)
	word32 a1_191 = Mem190[dwArg08 + 8:word32]
	Mem194[dwArg08 + 4:word32] = a1_191 + 1
	Mem199[dwArg08 + 20:word32] = Mem194[dwArg08 + 28:word32] - 0x00000001
	a1_127 = a1_191 + 1
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EE8:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E94:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E82:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F7A:
	a0Out = a0
	a1Out = a1_127
	a5Out = a5_129
	return d0_109
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001E6C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F80(word32 d2, word32 a3, word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn00001F80_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F80:
	word32 d0_154
	word32 a1_22
	word32 a5_24
	fn00002400(d2, dwArg04, a3, out a1_22, out a5_24)
	branch dwArg04 != 0x00000000 l00001F96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F96:
	branch Mem17[dwArg04 + 28:word32] != 0x00000000 l00001FB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F9C:
	branch (Mem17[dwArg04 + 24:word32] & 4) == 0x00000000 l00001FAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FAC:
	Mem43[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FA4:
	Mem47[dwArg04 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB4:
	branch Mem50[dwArg04 + 8:word32] != 0x00000000 l00001FBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FBE:
	word32 d0_56 = Mem50[dwArg04 + 24:word32] & 2
	branch d0_56 == 0x00000000 l00002004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC6:
	branch Mem50[dwArg04:word32] == 0x00000000 l00001FF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF4:
	d0_154 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FCA:
	word32 d4_69 = Mem50[dwArg04 + 4:word32] - Mem50[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_69 - d0_56 == 0x00000000 l00001FF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF8:
	Mem79[dwArg04 + 4:word32] = Mem50[dwArg04 + 8:word32]
	Mem81[dwArg04 + 20:word32] = Mem79[dwArg04 + 28:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002004:
	Mem88[dwArg04 + 24:word32] = Mem86[dwArg04 + 24:word32] & -4
	a0 = dwArg04 + 24
	d0_154 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FE8:
	Mem94[dwArg04 + 24:word32] = Mem50[dwArg04 + 24:word32] | 16
	a0 = dwArg04 + 24
	d0_154 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FBA:
	d0_154 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F92:
	d0_154 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000200E:
	a0Out = a0
	a1Out = a1_22
	a5Out = a5_24
	return d0_154
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F80_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000202C(word32 dwArg04, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn0000202C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000202C:
	word32 d0_106
	branch dwArg04 != 0x00000000 l0000203A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000203A:
	branch Mem5[0x00003EA8:word32] != 0x00000000 l0000205E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002042:
	word32 a0_13 = Mem5[0x00003EA4:word32]
	Mem21[0x00000000:word32] = 0x00000000
	Mem36[0x00003EA8:word32] = fn00002320(dwLoc10, a0_13, a0_13, out d1, out a0, out a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000205E:
	branch Mem39[0x00003EA8:word32] != 0x00000000 l0000206A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000206A:
	word32 d0_58 = fn000021FC(Mem51[0x00003EA8:word32], dwArg04 + 4, out d1, out a0)
	a1 = d0_58
	branch d0_58 != 0x00000000 l00002088
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002088:
	Mem72[d0_58:word32] = dwArg04
	a0 = d0_58 + 4
	d0_106 = d0_58 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002084:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002066:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002036:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002090:
	d1Out = d1
	a0Out = a0
	a1Out = a1
	return d0_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000202C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002098(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00002098_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002098:
	branch dwArg04 == 0x00000000 l000020C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020A2:
	branch Mem0[0x00003EA8:word32] == 0x00000000 l000020C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020AA:
	fn00002160(Mem23[0x00003EA8:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020C2:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002098_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002160(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn00002160_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002160:
	branch Mem20[Mem20[0x00003E74:word32] + 20:word16] <u 0x0027 l00002190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002190:
	branch dwArg04 == 0x00000000 l000021F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002194:
	branch dwArg08 == 0x00000000 l000021F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002198:
	word32 a3_36 = dwArg08 + -12
	branch dwArg0C - Mem20[dwArg04 + 20:word32] >=u 0x00000000 l000021DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021A4:
	word32 a2_40 = dwArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021A6:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0x00000000 l000021F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021AC:
	branch Mem20[a2_40 + 8:byte] == 0x00 l000021A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B2:
	branch dwArg08 - Mem20[a2_40 + 20:word32] <u 0x00000000 l000021A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B8:
	branch dwArg08 - Mem20[a2_40 + 24:word32] >=u 0x00000000 l000021A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021BE:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28:word32] - Mem20[dwArg04 + 16:word32] != 0x00000000 l000021F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021D8:
	a3_36 = a2_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021DA:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4
	FreeMem(a3_74, Mem20[a3_74:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000217E:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021F4:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002160_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000021FC(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn000021FC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021FC:
	word32 d0_158
	word32 a0_115 = Mem26[0x00003E74:word32]
	branch Mem26[a0_115 + 20:word16] <u 0x0027 l00002228
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002228:
	word32 a3_120 = 0x00000000
	branch dwArg04 == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002230:
	branch dwArg08 == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002236:
	branch dwArg08 - Mem26[dwArg04 + 20:word32] >=u 0x00000000 l000022EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022EA:
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_50 = AllocMem(dwArg08 + 16, d1)
	a3_120 = d0_50
	branch d0_50 == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002304:
	Mem56[d0_50:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_50 + 4)
	Mem62[d0_50 + 12:word32] = 0x00000000
	a0_115 = dwArg04
	a3_120 = d0_50 + 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000223E:
	word32 a5_162 = Mem26[dwArg04:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002240:
	branch Mem26[a5_162:word32] == 0x00000000 l00002262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002262:
	word32 d3_77 = Mem26[dwArg04 + 16:word32] + 40
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_82 = AllocMem(d3_77, d1)
	a3_120 = d0_82
	branch d0_82 == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002280:
	Mem88[d0_82:word32] = d3_77
	Mem91[d0_82 + 12:byte] = 0x0A
	Mem95[d0_82 + 20:word32] = d0_82 + 40
	Mem97[d0_82 + 24:word32] = d0_82 + 40
	Mem99[Mem97[d0_82 + 20:word32]:word32] = 0x00000000
	word32 a2_100 = Mem99[d0_82 + 20:word32]
	Mem103[a2_100 + 4:word32] = Mem99[dwArg04 + 16:word32]
	Mem106[d0_82 + 32:word32] = Mem103[a2_100 + 4:word32]
	Mem110[d0_82 + 28:word32] = Mem106[d0_82 + 32:word32] + Mem106[d0_82 + 20:word32]
	AddHead(dwArg04, d0_82 + 4)
	a0_115 = d0_82 + 4
	a3_120 = Allocate(d0_82 + 4, dwArg08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002244:
	branch Mem26[a5_162 + 8:byte] == 0x00 l0000225E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000224A:
	word32 d0_128 = Allocate(a5_162, dwArg08)
	a0_115 = a5_162
	a3_120 = d0_128
	branch d0_128 != 0x00000000 l000022CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022CE:
	branch (Mem135[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022DA:
	word32 a2_142 = a3_120
	word32 d2_145 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E0:
	Mem148[a2_142:word32] = 0x00000000
	word32 a2_149 = a2_142 + 4
	Mem150[a2_149:word32] = 0x00000000
	a2_142 = a2_149 + 4
	d2_145 = d2_145 - 0x00000001
	branch d2_145 != 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002318:
	d0_158 = a3_120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000225E:
	a5_162 = Mem26[a5_162:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002216:
	a0_115 = dwArg04
	d0_158 = AllocPooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000231A:
	d1Out = d1
	a0Out = a0_115
	return d0_158
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000021FC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002320(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn00002320_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002320:
	word32 d0_51
	word32 a0_17 = Mem14[0x00003E74:word32]
	branch Mem14[a0_17 + 20:word16] <u 0x0027 l0000234E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000234E:
	a1 = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l00002388
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002354:
	word32 d0_30 = AllocMem(24, 0)
	d1 = 0
	a1 = d0_30
	branch d0_30 == 0x00000000 l00002388
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000236A:
	Mem37[d0_30:word32] = d0_30 + 4
	Mem38[d0_30 + 4:word32] = 0x00000000
	Mem40[d0_30 + 8:word32] = d0_30
	Mem42[d0_30 + 12:word32] = dwArg04
	Mem46[d0_30 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem48[d0_30 + 20:word32] = dwArg0C
	a0_17 = d0_30 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002388:
	d0_51 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000233A:
	d1 = dwArg08
	d0_51 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000238A:
	d1Out = d1
	a0Out = a0_17
	a1Out = a1
	return d0_51
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002320_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002390(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn00002390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002390:
	branch Mem11[Mem11[0x00003E74:word32] + 20:word16] <u 0x0027 l000023B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B4:
	branch dwArg04 == 0x00000000 l000023F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B8:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0x00000000 l000023EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023CA:
	word32 a2_29 = a2_24 - 4
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0x00000000 l000023CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023EA:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023A6:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023F8:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002400(word32 d2, word32 a2, word32 a3, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a3:[0..31] d2:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn00002400_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002400:
	SetSignal(0, 0x00001000)
	word32 d1_24 = 0x00001000
	branch 0x00000000 == 0x00000000 l0000242A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000241E:
	d1_24 = fn0000131C(d2, a2, a3, 0x00000014, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000242A:
	a1Out = a1
	a5Out = a5
	return d1_24
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002400_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002430(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00002430_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002430:
	word32 d0_196
	word32 d1_142 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_166 = dwArg10
	branch dwArg0C != 0x00000000 l00002486
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002486:
	branch dwArg04 - dwArg0C >=u 0x00000000 l00002490
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002490:
	word32 d4_29 = 24
	word32 d6_30 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l000024AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000249A:
	d4_29 = 16
	d6_30 = __rol(d6_30, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l000024AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024A2:
	d4_29 = 8
	d6_30 = __rol(d6_30, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l000024AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024AA:
	d4_29 = 0
	d6_30 = SEQ(SLICE(d6_30, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024AE:
	word32 d4_61 = SEQ(SLICE(d4_29, word24, 8), SLICE(d4_29, byte, 0) + Mem17[0x00003EAC + (int32) ((int16) SEQ(SLICE(d6_30, word16, 16), SLICE(d6_30, word16, 0) & 0x00FF)):byte])
	word32 d5_63 = 32 - d4_61
	branch d5_63 != 0x00000000 l000024CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024CE:
	word32 d1_86
	word32 d0_85 = fn00002534(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_322)
	word32 d3_72 = dwArg10 << d5_63
	word32 d5_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u SLICE(d5_101, word16, 0)
	word32 d2_107 = __swap(d0_85 *u SLICE(d3_72, word16, 0))
	word16 v34_108 = SLICE(d2_107 + d3_102, word16, 0)
	word32 d4_104 = d0_85 *u SLICE(d6_103, word16, 0)
	word32 d2_110 = SEQ(SLICE(d2_107, word16, 16), v34_108)
	word16 v39_116 = SLICE(d2_110 + d4_104, word16, 0)
	word32 d5_105 = d5_101 *u SLICE(d6_103, word16, 0)
	word32 d6_82 = dwArg08 << d5_63
	word32 d2_124 = __swap(SEQ(SLICE(d2_110, word16, 16), v39_116))
	word32 d5_115 = SEQ(SLICE(d5_105, word16, 16), SLICE(d5_105, word16, 0) + (v34_108 <u 0x0000))
	a0_20 = d6_82
	d1_142 = d0_85
	word32 v48_134 = d1_86 - ((__swap(SEQ(SLICE(d3_102, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_104, word16, 16), 0x0000))) + SEQ(SLICE(d5_115, word16, 16), SLICE(d5_115, word16, 0) + (v39_116 <u 0x0000)))
	branch v48_134 <u 0x00000000 l0000252A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002524:
	branch v48_134 != 0x00000000 l0000252C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002526:
	branch d6_82 - d2_124 >=u 0x00000000 l0000252C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252A:
	d1_142 = d0_85 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C2:
	branch dwArg0C - dwArg04 <u 0x00000000 l000024CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C6:
	branch dwArg10 - dwArg08 >u 0x00000000 l0000248A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024CA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000248A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002448:
	branch dwArg04 - dwArg10 >=u 0x00000000 l0000245A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000245A:
	branch dwArg10 != 0x00000000 l00002466
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000245E:
	d3_166 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002466:
	word32 d1_175
	word32 d2_176
	word32 d0_174 = fn00002534(0, dwArg04, d3_166, out d1_175, out d2_176)
	d1_142 = fn00002534(d1_175, dwArg08, d2_176, out d1_320, out d2_321)
	d0_196 = d0_174
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000244C:
	d1_142 = fn00002534(dwArg04, dwArg08, dwArg10, out d1_318, out d2_319)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252C:
	d0_196 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252E:
	d1Out = d1_142
	a0Out = a0_20
	return d0_196
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002430_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002534(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn00002534_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002534:
	word32 d7_13 = d2
	branch d2 == 0x00000000 l0000254E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000253C:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0x00000000 l0000255C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000255C:
	word32 d2_22 = __swap(d2)
	branch SLICE(d2_22, word16, 0) != 0x0000 l00002584
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002584:
	byte bLoc26_362 = 0x00
	word32 d0_115 = 0
	branch d2 < 0x00000000 l000025A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002596:
	d6_17 = d6_17 * 0x00000002
	d0_115 = SEQ(SLICE(d0_115, word16, 16), SLICE(d0_115, word16, 0) + 0x0001)
	d5_19 = d5_19 * 0x00000002 + (d6_17 <u 0x00000000)
	d7_13 = d7_13 * 0x00000002
	branch d7_13 > 0x00000000 l00002596
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A0:
	word16 v41_64 = SLICE(d0_115, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A2:
	word32 d1_104
	word32 d2_73 = __swap(d5_19)
	word32 d3_74 = __swap(d7_13)
	branch SLICE(d2_73 - d3_74, word16, 0) != 0x0000 l000025B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025B4:
	d1_104 = __swap(SEQ(SLICE(__swap(SEQ((uint16) (d5_19 % SLICE(d3_74, uint16, 0)), (uint16) (d5_19 /u SLICE(d3_74, uint16, 0)))), word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025AE:
	d1_104 = 0x0000FFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025BE:
	word32 d6_98 = __swap(SEQ(SLICE(d6_17, word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025C4:
	word32 d4_113 = __swap(d5_19 - __swap(d7_13) *u SLICE(d1_104, word16, 0))
	word16 wLoc22_442 = SLICE(dwLoc24, word16, 0)
	word32 d2_106 = d1_104 *u SLICE(d7_13, word16, 0)
	d0_115 = SEQ(SLICE(d0_115, word16, 16), SLICE(d4_113, word16, 0))
	word32 d4_121 = SEQ(SLICE(d4_113, word16, 16), SLICE(d6_98, word16, 0))
	branch SLICE(d0_115, word16, 0) != 0x0000 l000025E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025DC:
	branch d2_106 - d4_121 <=u 0x00000000 l000025E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025E4:
	word32 d6_133 = __swap(d1_104)
	word32 d3_140 = __swap(d6_133)
	word32 d4_142 = __swap(d7_13)
	word32 d5_141 = d7_13 *u SLICE(d3_140, word16, 0)
	word32 d6_146 = __swap(d6_133 *u SLICE(d7_13, word16, 0))
	word16 v56_147 = SLICE(d6_146 + d5_141, word16, 0)
	word32 d2_143 = d6_133 *u SLICE(d4_142, word16, 0)
	word32 d6_149 = SEQ(SLICE(d6_146, word16, 16), v56_147)
	word32 d3_144 = d3_140 *u SLICE(d4_142, word16, 0)
	word16 v60_155 = SLICE(d6_149 + d2_143, word16, 0)
	word32 d3_154 = SEQ(SLICE(d3_144, word16, 16), SLICE(d3_144, word16, 0) + (v56_147 <u 0x0000))
	word32 d6_178 = d6_17 - __swap(SEQ(SLICE(d6_149, word16, 16), v60_155))
	word32 d5_181 = d5_19 - ((__swap(SEQ(SLICE(d5_141, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d2_143, word16, 16), 0x0000))) + SEQ(SLICE(d3_154, word16, 16), SLICE(d3_154, word16, 0) + (v60_155 <u 0x0000))) - (d6_178 <u 0x00000000)
	branch d5_181 >=u 0x00000000 l0000263C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002626:
	d6_178 = d6_178 + SEQ(SLICE(__swap(d7_13), word16, 16), 0x0000)
	d1_104 = d1_104 - 0x00000001
	d5_181 = d5_181 + (d6_178 <u 0x00000000) + __swap(SEQ(SLICE(d7_13, word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000263C:
	branch bLoc26_362 != 0x00 l00002658
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002658:
	word32 d6_220 = __swap(SEQ(SLICE(d6_178, word16, 16), SLICE(d5_181, word16, 0)))
	d0 = SEQ(SLICE(dwLoc24, word16, 16), SLICE(d1_104, word16, 0))
	word32 d5_221 = __swap(d5_181)
	word32 d7_225 = SEQ(SLICE(d7_13, word16, 16), v41_64)
	branch v41_64 == 0x0000 l00002672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002668:
	word32 d7_230 = SEQ(SLICE(d7_225, word16, 16), SLICE(d7_225, word16, 0) - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000266A:
	d5_221 = d5_221 >>u 0x00000001
	word16 v87_241 = SLICE(d7_230, word16, 0)
	d6_220 = __rcr(d6_220, 0x00000001, SLICE(cond(d5_221), bool, 4))
	d7_230 = SEQ(SLICE(d7_230, word16, 16), v87_241 - 1)
	branch v87_241 != 0x0000 l0000266A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002672:
	d1 = d6_220
	d2 = d2_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002642:
	word32 d5_266 = __swap(d5_181)
	word32 d6_267 = __swap(d6_178)
	d5_19 = SEQ(SLICE(d5_266, word16, 16), SLICE(d6_267, word16, 0))
	d6_17 = SEQ(SLICE(d6_267, word16, 16), 0x0000)
	bLoc26_362 = true
	dwLoc24 = SEQ(SLICE(d1_104, word16, 0), wLoc22_442) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025E0:
	d1_104 = d1_104 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002562:
	word32 d0_281 = __swap(d0)
	word32 d1_282 = __swap(d1)
	word32 d0_285 = SEQ(SLICE(d0_281, word16, 16), SLICE(d1_282, word16, 0))
	word32 d0_288 = SEQ((uint16) (d0_285 % SLICE(d2, uint16, 0)), (uint16) (d0_285 /u SLICE(d2, uint16, 0)))
	word32 d0_295 = SEQ(SLICE(d0_288, word16, 16), SLICE(__swap(d1_282), word16, 0))
	word32 d0_298 = SEQ((uint16) (d0_295 % SLICE(d2, uint16, 0)), (uint16) (d0_295 /u SLICE(d2, uint16, 0)))
	d2 = SEQ(SLICE(__swap((uint32) (uint16) SLICE(d0_288, word16, 0)), word16, 16), SLICE(d0_298, word16, 0))
	d1 = __swap(SEQ(SLICE(d0_298, word16, 16), 0x0000))
	d0 = d2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002542:
	branch d1 == 0x00000000 l0000267A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002548:
	branch d2 - d1 >u 0x00000000 l0000267A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000254E:
	d0 = fn000026F2(d1, d2, d2, out d1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000267A:
	d1Out = d1
	d2Out = d2
	return d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002534_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000026C0(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn000026C0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026C0:
	branch dwArg04 > 0x00000000 l000026E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E0:
	branch dwArg08 > 0x00000000 l000026E2_thunk_fn000026F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E2_thunk_fn000026F2:
	return fn000026F2(dwArg04, dwArg08, d2, out d1_88)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E4:
	return -fn000026F2(dwArg04, -dwArg08, d2, out d1_89)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026CA:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0x00000000 l000026D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D8:
	return -fn000026F2(d0_36, dwArg08, d2, out d1_43)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D0:
	return fn000026F2(d0_36, -dwArg08, d2, out d1_55)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000026C0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000026F2(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn000026F2_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026F2:
	word32 d1_22 = __swap(d1)
	word16 v10_9 = SLICE(d1_22, word16, 0)
	word32 d2_11 = SEQ(SLICE(d2, word16, 16), v10_9)
	branch v10_9 != 0x0000 l00002718
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002718:
	word32 d3_18 = 16
	branch SLICE(d1_22, word16, 0) >=u 0x0080 l00002726
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002722:
	d1_22 = __rol(d1_22, 0x00000008)
	d3_18 = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002726:
	branch SLICE(d1_22, word16, 0) >=u 0x0800 l00002730
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000272C:
	d1_22 = __rol(d1_22, 0x00000004)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0004)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002730:
	branch SLICE(d1_22, word16, 0) >=u 0x2000 l0000273A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002736:
	d1_22 = __rol(d1_22, 0x00000002)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0002)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000273A:
	branch SLICE(d1_22, word16, 0) < 0x0000 l00002742
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000273E:
	d1_22 = __rol(d1_22, 0x00000001)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002742:
	word32 d0_71 = d0 >>u d3_18
	word32 d2_75 = SEQ(SLICE(__swap(SEQ(SLICE(d2_11, word16, 16), SLICE(d0, word16, 0))), word16, 16), 0x0000) >>u d3_18
	word32 d0_80 = SEQ((uint16) (d0_71 % SLICE(d1_22, uint16, 0)), (uint16) (d0_71 /u SLICE(d1_22, uint16, 0)))
	word32 d3_102 = SEQ(SLICE(__swap(d3_18), word16, 16), SLICE(d0_80, word16, 0))
	word32 d1_90 = __swap(d1_22)
	word32 d0_108 = SEQ(SLICE(d0_80, word16, 16), SLICE(d2_75, word16, 0)) - SEQ(SLICE(d2_75, word16, 16), SLICE(d3_102, word16, 0)) *u SLICE(d1_90, word16, 0)
	branch d0_108 >=u 0x00000000 l00002764
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000275E:
	d3_102 = SEQ(SLICE(d3_102, word16, 16), SLICE(d3_102, word16, 0) - 0x0001)
	d0_108 = d0_108 + d1_90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002762:
	branch d0_108 >=u 0x00000000 l00002762
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002764:
	d1Out = __swap(__rol(d0_108, __swap(d3_102)))
	return (uint32) (uint16) SLICE(d3_102, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026FA:
	word32 d0_134 = __swap(d0)
	word32 d1_135 = __swap(d1_22)
	word16 v14_137 = SLICE(d0_134, word16, 0)
	word32 d2_139 = SEQ(SLICE(__swap(d2_11), word16, 16), v14_137)
	branch v14_137 == 0x0000 l00002708
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002704:
	d2_139 = SEQ((uint16) (d2_139 % SLICE(d1_135, uint16, 0)), (uint16) (d2_139 /u SLICE(d1_135, uint16, 0)))
	d0_134 = SEQ(SLICE(d0_134, word16, 16), SLICE(d2_139, word16, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002708:
	word32 d0_150 = __swap(d0_134)
	word32 d2_154 = SEQ(SLICE(d2_139, word16, 16), SLICE(d0_150, word16, 0))
	word32 d2_158 = SEQ((uint16) (d2_154 % SLICE(d1_135, uint16, 0)), (uint16) (d2_154 /u SLICE(d1_135, uint16, 0)))
	d1Out = SEQ(SLICE(d1_135, word16, 16), SLICE(__swap(d2_158), word16, 0))
	return SEQ(SLICE(d0_150, word16, 16), SLICE(d2_158, word16, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000026F2_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002778(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn00002778_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002778:
	word32 d1_171 = dwArg08
	word32 d3_202 = dwArg10
	branch dwArg0C != 0x00000000 l000027CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027CA:
	branch dwArg04 - dwArg0C <u 0x00000000 l00002884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027D0:
	word32 d4_32 = 24
	word32 d6_33 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000027EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027DA:
	d4_32 = 16
	d6_33 = __rol(d6_33, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000027EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027E2:
	d4_32 = 8
	d6_33 = __rol(d6_33, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000027EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027EA:
	d4_32 = 0
	d6_33 = SEQ(SLICE(d6_33, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027EE:
	word32 d4_64 = SEQ(SLICE(d4_32, word24, 8), SLICE(d4_32, byte, 0) + Mem20[0x00003EAC + (int32) ((int16) SEQ(SLICE(d6_33, word16, 16), SLICE(d6_33, word16, 0) & 0x00FF)):byte])
	word32 d5_66 = 32 - d4_64
	branch d5_66 != 0x00000000 l00002810
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002810:
	word32 d1_89
	word32 d2_90
	word32 d0_88 = fn00002534(dwArg04 >>u d4_64, dwArg04 << d5_66 | dwArg08 >>u d4_64, dwArg0C << d5_66 | dwArg10 >>u d4_64, out d1_89, out d2_90)
	word32 d3_75 = dwArg10 << d5_66
	word32 d7_104 = __swap(d0_88)
	word32 d6_106 = __swap(d3_75)
	word32 d3_105 = d3_75 *u SLICE(d7_104, word16, 0)
	word32 d2_110 = __swap(d0_88 *u SLICE(d3_75, word16, 0))
	word16 v36_111 = SLICE(d2_110 + d3_105, word16, 0)
	word32 d4_107 = d0_88 *u SLICE(d6_106, word16, 0)
	word32 d2_113 = SEQ(SLICE(d2_110, word16, 16), v36_111)
	word16 v40_119 = SLICE(d2_113 + d4_107, word16, 0)
	word32 d7_108 = d7_104 *u SLICE(d6_106, word16, 0)
	word32 d2_127 = __swap(SEQ(SLICE(d2_113, word16, 16), v40_119))
	word32 d7_118 = SEQ(SLICE(d7_108, word16, 16), SLICE(d7_108, word16, 0) + (v36_111 <u 0x0000))
	word32 d6_85 = dwArg08 << d5_66
	word32 d3_135 = __swap(SEQ(SLICE(d3_105, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_107, word16, 16), 0x0000)) + SEQ(SLICE(d7_118, word16, 16), SLICE(d7_118, word16, 0) + (v40_119 <u 0x0000))
	word32 v49_137 = d1_89 - d2_127
	branch v49_137 <u 0x00000000 l0000286C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002866:
	branch v49_137 != 0x00000000 l00002870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002868:
	branch d6_85 - d3_135 >=u 0x00000000 l00002870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000286C:
	d3_135 = d3_135 - d3_75
	d2_127 = d2_127 - d2_90 - (d3_135 <u 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002870:
	word32 d6_157 = d6_85 - d3_135
	d1_171 = d1_89 - d2_127 - (d6_157 <u 0x00000000) << 32 - d5_66 | d6_157 >>u d5_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002802:
	branch dwArg0C - dwArg04 <u 0x00000000 l0000280A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002806:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000280A:
	d1_171 = dwArg08 - dwArg10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002790:
	branch dwArg04 - dwArg10 >=u 0x00000000 l000027A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027A2:
	branch dwArg10 != 0x00000000 l000027AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027A6:
	d3_202 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027AE:
	word32 d1_211
	word32 d2_212
	fn00002534(0, dwArg04, d3_202, out d1_211, out d2_212)
	fn00002534(d1_211, dwArg08, d2_212, out d1_171, out d2_355)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002794:
	fn00002534(dwArg04, dwArg08, dwArg10, out d1_171, out d2_354)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002884:
	return d1_171
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002778_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002B74(word32 d2, word32 a3, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002B74_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B74:
	branch dwArg04 == 0x00000000 l00002B8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B8C:
	word32 a2_10 = Mem5[0x00003FD8:word32]
	branch a2_10 == 0x00000000 l00002BB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B96:
	branch (Mem16[a2_10 + 24:word32] & 2) == 0x00000000 l00002BA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B9E:
	fn00001F80(d2, a3, a2_10, out a0_109, out a1_110, out a5_111)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BA8:
	a2_10 = Mem43[a2_10 + 12:word32]
	branch a2_10 != 0x00000000 l00002B96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B80:
	fn00001F80(d2, a3, dwArg04, out a0_54, out a1_55, out a5_57)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BB2:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002B74_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002BB8(word32 d0, word32 d1, word32 d7, word32 a1, word32 a3, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[0..31] d1:[0..31] d7:[0..31] Stack +0004:[0..31]
// LiveOut: d0
// Trashed: CVZN a0 d0
// Preserved: a7
fn00002BB8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BB8:
	return fn00002C04(d0, d1, d7, a1, a3, a5, Mem10[0x00003FCC:word32], dwArg04, fp + 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002BB8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002BD4(byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0007:[0..7] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 d0
// Preserved: a2 a7
fn00002BD4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BD4:
	word32 d0_10 = dwArg08
	branch dwArg08 == 0x00000000 l00002BFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BE0:
	d0_10 = Mem5[dwArg08 + 4:word32]
	branch d0_10 - Mem5[dwArg08 + 8:word32] >=u 0x00000000 l00002BF2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BEA:
	Mem16[Mem5[dwArg08 + 4:word32]:byte] = bArg07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BF2:
	Mem22[dwArg08 + 20:word32] = Mem20[dwArg08 + 20:word32] + 0x00000001
	Mem25[dwArg08 + 4:word32] = Mem22[dwArg08 + 4:word32] - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BFE:
	return d0_10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002BD4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002C04(word32 d0, word32 d1, word32 d7, word32 a1, word32 a3, word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[8..31] d1:[0..31] d7:[8..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: d0
// Trashed: CVZN d0
// Preserved: X a0 a1 a2 a3 a4 a5 a6 a7 d1 d2 d3 d4 d5 d6 d7
fn00002C04_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C04:
	word32 a7_1338 = fp + -120
	word32 d2_1384 = dwArg0C
	word32 a4_278 = dwArg08
	word32 a2_1021 = dwArg04
	word32 d4_1336 = 0
	word32 d5_1051 = 0
	branch Mem40[dwArg08:byte] == 0x00 l00003C06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C26:
	word32 d3_132
	word32 d3_1868 = 0
	branch Mem49[a4_278:byte] != 0x25 l00003B04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B04:
	word32 d0_63 = (uint32) (uint8) Mem49[0x0000288D + (SEQ(SLICE(d0, word24, 8), Mem49[a4_278:byte]) & 0x000000FF):byte]
	d0 = d0_63 & 0x00000008
	branch (d0_63 & 0x00000008) == 0x00000000 l00003B90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B90:
	word32 d0_113
	word32 a0_70 = a2_1021 + 24
	Mem72[a0_70:word32] = Mem49[a0_70:word32] | 0x00000001
	word32 a0_73 = a2_1021 + 20
	word32 v126_74 = Mem72[a0_73:word32] - 0x00000001
	Mem75[a0_73:word32] = v126_74
	branch v126_74 < 0x00000000 l00003BC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BC2:
	word32 a7_79 = a7_1338 - 4
	Mem81[a7_79:word32] = a2_1021
	d0_113 = fn00003CA8(d2_1384, a3, Mem81[a7_79:word32], out d1, out a1, out a5)
	Mem96[a7_79 + 48:word32] = d0_113
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BA2:
	a1 = a2_1021 + 4
	word32 a0_100 = Mem75[a1:word32]
	word32 a7_101 = a7_1338 - 4
	Mem103[a7_101:word32] = a2_1021
	Mem107[a1:word32] = a0_100 + 1
	a2_1021 = Mem107[a7_101:word32]
	d0_113 = SEQ(SLICE(d0_63 & 0x00000008, word24, 8), Mem107[a0_100:byte])
	Mem117[a7_101:word32] = d1
	Mem123[a7_101 + 48:word32] = (uint32) (uint8) SLICE(d0_113, byte, 0)
	d1 = Mem123[a7_101:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BD0:
	d0 = (int32) (int16) (int8) SEQ(SLICE(d0_113, word24, 8), Mem129[a4_278:byte])
	d5_1051 = Mem129[a7_1338 + 44:word32]
	d3_132 = 0x00000001
	d4_1336 = d4_1336 + 0x00000001
	branch d0 - Mem129[a7_1338 + 44:word32] == 0x00000000 l00003BFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BE4:
	branch d5_1051 == 0xFFFFFFFF l00003BF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BEC:
	word32 a7_150 = a7_1338 - 4
	Mem153[a7_150:word32] = a2_1021
	Mem156[a7_150 - 4:word32] = d5_1051
	d0 = fn00002BD4(Mem156[a7_150 - 1:byte], Mem156[a7_150:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BF6:
	d3_132 = 0x00000000
	d4_1336 = d4_1336 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B20:
	word32 d0_191
	word32 a0_172 = a2_1021 + 24
	Mem175[a0_172:word32] = Mem173[a0_172:word32] | 0x00000001
	word32 a0_176 = a2_1021 + 20
	word32 v105_177 = Mem175[a0_176:word32] - 0x00000001
	Mem178[a0_176:word32] = v105_177
	branch v105_177 < 0x00000000 l00003B4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B4A:
	word32 a7_182 = a7_1338 - 4
	Mem184[a7_182:word32] = a2_1021
	d0_191 = fn00003CA8(d2_1384, a3, Mem184[a7_182:word32], out d1_5419, out a1, out a5)
	d1 = d0_191
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B32:
	a1 = a2_1021 + 4
	word32 a0_202 = Mem178[a1:word32]
	word32 a7_203 = a7_1338 - 4
	Mem205[a7_203:word32] = a2_1021
	Mem209[a1:word32] = a0_202 + 1
	d0_191 = SEQ(SLICE(d0, word24, 8), Mem209[a0_202:byte])
	a2_1021 = Mem209[a7_203:word32]
	d1 = (uint32) (uint8) SLICE(d0_191, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B56:
	word32 d0_242 = (uint32) (uint8) Mem239[0x0000288D + (SEQ(SLICE(d0_191, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1051 = d1
	d4_1336 = d4_1336 + 0x00000001
	d0 = d0_242 & 0x00000008
	branch (d0_242 & 0x00000008) != 0x00000000 l00003B20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B78:
	branch d1 == 0xFFFFFFFF l00003B8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B80:
	word32 a7_252 = a7_1338 - 4
	Mem255[a7_252:word32] = a2_1021
	Mem258[a7_252 - 4:word32] = d1
	d0 = fn00002BD4(Mem258[a7_252 - 1:byte], Mem258[a7_252:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B8A:
	d4_1336 = d4_1336 - 0x00000001
	d3_132 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BFA:
	a4_278 = a4_278 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C30:
	Mem281[a7_1338 + 72:byte] = 0x69
	Mem282[a7_1338 + 73:byte] = 0x00
	word32 a3_283 = a4_278 + 1
	word32 d0_293 = (uint32) (uint8) Mem282[0x0000288D + (uint32) ((uint8) Mem282[a3_283:byte]):byte]
	word32 d6_1139 = -1
	d0 = d0_293 & 0x00000004
	branch (d0_293 & 0x00000004) == 0x00000000 l00002CB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C58:
	word32 d0_309 = (uint32) (uint8) Mem282[0x0000288D + (uint32) ((uint8) Mem282[a3_283:byte]):byte]
	d6_1139 = 0
	d0 = d0_309 & 0x00000004
	branch (d0_309 & 0x00000004) == 0x00000000 l00002CB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C72:
	word32 a7_317 = a7_1338 - 4
	Mem320[a7_317:word32] = d2_1384
	word32 d1_326 = __swap(10) *u SLICE(d6_1139, word16, 0)
	word32 d0_335 = SLICE(d6_1139, word16, 0) *u 10 + SEQ(SLICE(__swap(SEQ(SLICE(d1_326, word16, 16), SLICE(d1_326 + __swap(d6_1139) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	a3_283 = a3_283 + 1
	word32 d1_344 = (uint32) (uint8) Mem320[a3_283:byte]
	word32 d0_358 = (uint32) (uint8) Mem320[0x0000288D + (uint32) ((uint8) Mem320[a3_283:byte]):byte]
	d2_1384 = Mem320[a7_317:word32]
	d1 = d1_344 - 0x00000030
	d6_1139 = d1_344 - 0x00000030 + d0_335
	d0 = d0_358 & 0x00000004
	branch (d0_358 & 0x00000004) != 0x00000000 l00002C72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CB4:
	branch Mem365[a3_283:byte] == 0x68 l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CBA:
	branch Mem365[a3_283:byte] == 0x6C l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CC0:
	branch Mem365[a3_283:byte] == 0x4C l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CC6:
	branch Mem365[a3_283:byte] == 0x7A l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CCC:
	branch Mem365[a3_283:byte] == 0x6A l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CD2:
	branch Mem365[a3_283:byte] == 0x74 l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CD8:
	branch Mem365[a3_283:byte] != 0x2A l00002D46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CDE:
	d7 = SEQ(SLICE(d7, word24, 8), Mem365[a7_1338 + 73:byte])
	d1 = SEQ(SLICE(d1, word24, 8), Mem365[a7_1338 + 72:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CE6:
	branch Mem365[a3_283:byte] != 0x2A l00002CF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF0:
	branch SLICE(d1, byte, 0) != 0x68 l00002D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF6:
	branch Mem365[a3_283:byte] != 0x68 l00002D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D00:
	branch SLICE(d1, byte, 0) != 0x6C l00002D10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D06:
	branch Mem365[a3_283:byte] != 0x6C l00002D10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D10:
	d1 = SEQ(SLICE(d1, word24, 8), Mem365[a3_283:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D0C:
	d1 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CFC:
	d1 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CEC:
	d7 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D12:
	a3_283 = a3_283 + 1
	branch Mem365[a3_283:byte] == 0x68 l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D1A:
	branch Mem365[a3_283:byte] == 0x6C l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D20:
	branch Mem365[a3_283:byte] == 0x4C l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D26:
	branch Mem365[a3_283:byte] == 0x7A l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D2C:
	branch Mem365[a3_283:byte] == 0x6A l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D32:
	branch Mem365[a3_283:byte] == 0x74 l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D38:
	branch Mem365[a3_283:byte] == 0x2A l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D3E:
	Mem467[a7_1338 + 72:byte] = SLICE(d1, byte, 0)
	Mem473[a7_1338 + 73:byte] = SLICE(d7, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D46:
	branch Mem476[a7_1338 + 72:byte] != 0x6A l00002D54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D4E:
	Mem481[a7_1338 + 72:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D54:
	branch Mem484[a7_1338 + 72:byte] != 0x74 l00002D62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D5C:
	Mem489[a7_1338 + 72:byte] = 0x69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D62:
	branch Mem492[a7_1338 + 72:byte] != 0x7A l00002D70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D6A:
	Mem497[a7_1338 + 72:byte] = 0x6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D70:
	byte v83_504 = Mem503[a3_283:byte]
	a3 = a3_283 + 1
	d7 = SEQ(SLICE(d7, word24, 8), v83_504)
	branch v83_504 == 0x00 l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D74:
	branch SLICE(d7, byte, 0) == 0x25 l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D7A:
	branch SLICE(d7, byte, 0) == 0x63 l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D80:
	branch SLICE(d7, byte, 0) == 0x6E l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D86:
	branch SLICE(d7, byte, 0) == 0x5B l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D8C:
	word32 d0_546
	word32 a0_527 = a2_1021 + 24
	Mem530[a0_527:word32] = Mem528[a0_527:word32] | 0x00000001
	word32 a0_531 = a2_1021 + 20
	word32 v90_532 = Mem530[a0_531:word32] - 0x00000001
	Mem533[a0_531:word32] = v90_532
	branch v90_532 < 0x00000000 l00002DB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DB6:
	word32 a7_537 = a7_1338 - 4
	Mem539[a7_537:word32] = a2_1021
	d0_546 = fn00003CA8(d2_1384, a3, Mem539[a7_537:word32], out d1_5418, out a1, out a5)
	d1 = d0_546
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D9E:
	a1 = a2_1021 + 4
	word32 a0_557 = Mem533[a1:word32]
	word32 a7_558 = a7_1338 - 4
	Mem560[a7_558:word32] = a2_1021
	Mem564[a1:word32] = a0_557 + 1
	d0_546 = SEQ(SLICE(d0, word24, 8), Mem564[a0_557:byte])
	a2_1021 = Mem564[a7_558:word32]
	d1 = (uint32) (uint8) SLICE(d0_546, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DC2:
	word32 d0_597 = (uint32) (uint8) Mem594[0x0000288D + (SEQ(SLICE(d0_546, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1051 = d1
	d4_1336 = d4_1336 + 0x00000001
	d0 = d0_597 & 0x00000008
	branch (d0_597 & 0x00000008) != 0x00000000 l00002D8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DE4:
	d3_1868 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DE6:
	word32 d1_615 = SEQ(SLICE(d1, word24, 8), SLICE(d7, byte, 0))
	byte v148_616 = SLICE(d1_615, byte, 0) - 0x25
	word32 d1_618 = SEQ(SLICE(d1_615, word24, 8), v148_616)
	branch v148_616 == 0x00 l00003232
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003232:
	word32 a0_634 = a2_1021 + 24
	Mem637[a0_634:word32] = Mem635[a0_634:word32] | 0x00000001
	word32 a0_638 = a2_1021 + 20
	word32 v159_639 = Mem637[a0_638:word32] - 0x00000001
	Mem640[a0_638:word32] = v159_639
	branch v159_639 < 0x00000000 l00003264
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003264:
	word32 a7_646 = a7_1338 - 4
	Mem648[a7_646:word32] = a2_1021
	d0 = fn00003CA8(d2_1384, a3, Mem648[a7_646:word32], out d1, out a1, out a5)
	Mem675[a7_646 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003244:
	a1 = a2_1021 + 4
	word32 a0_679 = Mem640[a1:word32]
	word32 a7_680 = a7_1338 - 4
	Mem682[a7_680:word32] = a2_1021
	Mem686[a1:word32] = a0_679 + 1
	a2_1021 = Mem686[a7_680:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem686[a0_679:byte])
	Mem706[a7_680:word32] = d1_618
	Mem712[a7_680 + 48:word32] = (uint32) (uint8) SLICE(d0, byte, 0)
	d1 = Mem712[a7_680:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003272:
	d5_1051 = Mem718[a7_1338 + 44:word32]
	d3_132 = d3_1868 + 0x00000001
	d4_1336 = d4_1336 + 0x00000001
	branch Mem718[a7_1338 + 44:word32] == 0x00000025 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003286:
	branch d5_1051 == 0xFFFFFFFF l00003298
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000328E:
	word32 a7_755 = a7_1338 - 4
	Mem758[a7_755:word32] = a2_1021
	Mem761[a7_755 - 4:word32] = d5_1051
	d0 = fn00002BD4(Mem761[a7_755 - 1:byte], Mem761[a7_755:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003298:
	d3_132 = d3_132 - 0x00000001
	d4_1336 = d4_1336 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DF0:
	byte v150_776 = SLICE(d1_618, byte, 0) - 0x36
	word32 d1_778 = SEQ(SLICE(d1_618, word24, 8), v150_776)
	branch v150_776 == 0x00 l00002F2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F2E:
	Mem781[a7_1338 + 44:byte] = 0x00
	branch Mem781[a3:byte] != 0x5E l00002F40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F38:
	Mem786[a7_1338 + 44:byte] = 0x01
	a3 = a3 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F40:
	Mem790[a7_1338 + 52:word32] = 0x00000000
	d7 = SEQ(SLICE(d7, word24, 8), Mem790[a7_1338 + 44:byte])
	word32 d1_1034 = Mem790[a7_1338 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F4C:
	word32 d5_802
	branch SLICE(d7, byte, 0) == 0x00 l00002F58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F58:
	d5_802 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F50:
	d5_802 = 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F5A:
	Mem815[a5 + d1_1034:byte] = SLICE(d5_802, byte, 0)
	d1_1034 = d1_1034 + 0x00000001
	branch d1_1034 <u 0x00000020 l00002F4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F6C:
	Mem825[a7_1338 + 132:word32] = d2_1384
	Mem828[a7_1338 + 44:byte] = SLICE(d7, byte, 0)
	word32 d2_831 = SEQ(SLICE(d2_1384, word24, 8), Mem828[a7_1338 + 44:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F78:
	branch Mem834[a3:byte] == 0x00 l00002FEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F7C:
	a3 = a3 + 1
	d1_1034 = SEQ(SLICE(d1_1034, word24, 8), Mem834[a3:byte])
	branch Mem834[a3:byte] != 0x2D l00002F90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F84:
	branch SLICE(d1_1034, byte, 0) - Mem834[a3 + 1:byte] >=u 0x00 l00002F90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F90:
	d7 = SEQ(SLICE(d7, word24, 8), SLICE(d1_1034, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F8A:
	a3 = a3 + 2
	d7 = SEQ(SLICE(d7, word24, 8), Mem834[a3 + 1:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F92:
	word32 d5_867 = (uint32) (uint8) SLICE(d1_1034, byte, 0)
	d0 = (uint32) (uint8) SLICE(d7, byte, 0)
	branch d0 - d5_867 <u 0x00000000 l00002FE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F9E:
	branch SLICE(d2_831, byte, 0) == 0x00 l00002FC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FC2:
	word32 a0_886 = a7_1338 + 78 + (d5_867 >>u 0x00000003)
	d1_1034 = (uint32) (uint8) Mem894[a0_886:byte]
	Mem900[a0_886:byte] = SLICE(1 << (d5_867 & 7) | d1_1034, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FA2:
	word32 a0_905 = a7_1338 + 78 + (d5_867 >>u 0x00000003)
	d1_1034 = (uint32) (uint8) Mem894[a0_905:byte]
	Mem919[a0_905:byte] = SLICE(~(1 << (d5_867 & 7)) & d1_1034, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FDE:
	d5_867 = d5_867 + 0x00000001
	d0 = (uint32) (uint8) SLICE(d7, byte, 0)
	branch d0 - d5_867 >=u 0x00000000 l00002F9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FE8:
	branch Mem938[a3:byte] != 0x5D l00002F78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FEE:
	word32 a6_1170
	d2_1384 = Mem951[a7_1338 + 132:word32]
	a3 = a3 + 1
	branch Mem951[a7_1338 + 73:byte] != 0x00 l0000300E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000300E:
	a6_1170 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FFA:
	word32 d0_962 = d2_1384 + 0x00000003 >>u 0x00000002
	d2_1384 = (d0_962 << 0x00000002) + 0x00000004
	d0 = d0_962 << 0x00000002
	a6_1170 = Mem951[d2_1384 + -4:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003010:
	word32 a0_980 = a2_1021 + 24
	Mem983[a0_980:word32] = Mem951[a0_980:word32] | 0x00000001
	word32 a0_984 = a2_1021 + 20
	word32 v581_985 = Mem983[a0_984:word32] - 0x00000001
	Mem986[a0_984:word32] = v581_985
	branch v581_985 < 0x00000000 l00003042
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003042:
	word32 a7_990 = a7_1338 - 4
	Mem992[a7_990:word32] = a2_1021
	d0 = fn00003CA8(d2_1384, a3, Mem992[a7_990:word32], out d1, out a1, out a5)
	Mem1007[a7_990 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003022:
	a1 = a2_1021 + 4
	word32 a0_1011 = Mem986[a1:word32]
	word32 a7_1012 = a7_1338 - 4
	Mem1014[a7_1012:word32] = a2_1021
	Mem1018[a1:word32] = a0_1011 + 1
	a2_1021 = Mem1018[a7_1012:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem1018[a0_1011:byte])
	Mem1038[a7_1012:word32] = d1_1034
	Mem1044[a7_1012 + 48:word32] = (uint32) (uint8) SLICE(d0, byte, 0)
	d1 = Mem1044[a7_1012:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003050:
	d5_1051 = Mem1050[a7_1338 + 44:word32]
	word32 d3_1064 = d3_1868 + 0x00000001
	word32 d4_1077 = d4_1336 + 0x00000001
	branch Mem1050[a7_1338 + 44:word32] == 0xFFFFFFFF l0000311E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003064:
	word32 a7_1083 = a7_1338 - 4
	Mem1085[a7_1083:word32] = a7_1338 + 78
	Mem1089[a7_1083 - 4:word32] = a1
	Mem1091[a7_1083 - 0x00000008:word32] = 0x00000008
	Mem1094[a7_1083 - 0x0000000C:word32] = d5_1051
	d1 = (uint32) (uint8) Mem1094[Mem1094[a7_1083:word32] + fn000026C0(d2_1384, Mem1094[a7_1083 - 0x0000000C:word32], Mem1094[a7_1083 - 0x00000008:word32]):byte]
	a1 = Mem1094[a7_1083 - 0x00000004:word32]
	d0 = 1 << (d5_1051 & 7) & d1
	branch d0 == 0x00000000 l0000311E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003094:
	branch d6_1139 - d3_1064 <u 0x00000000 l0000311E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000309A:
	d7 = SEQ(SLICE(d7, word24, 8), Mem1094[a7_1083 + 77:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000309E:
	branch SLICE(d7, byte, 0) != 0x00 l000030A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030A2:
	Mem1171[a6_1170:byte] = SLICE(d5_1051, byte, 0)
	a6_1170 = a6_1170 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030A4:
	word32 a0_1176 = a2_1021 + 24
	Mem1180[a0_1176:word32] = Mem1177[a0_1176:word32] | 0x00000001
	word32 a0_1181 = a2_1021 + 20
	word32 v607_1182 = Mem1180[a0_1181:word32] - 0x00000001
	Mem1183[a0_1181:word32] = v607_1182
	branch v607_1182 < 0x00000000 l000030CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030CE:
	word32 a7_1188 = a7_1338 - 4
	Mem1190[a7_1188:word32] = a2_1021
	d0 = fn00003CA8(d2_1384, a3, Mem1190[a7_1188:word32], out d1_5424, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030B6:
	a1 = a2_1021 + 4
	word32 a0_1210 = Mem1183[a1:word32]
	word32 a7_1211 = a7_1338 - 4
	Mem1213[a7_1211:word32] = a2_1021
	Mem1217[a1:word32] = a0_1210 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem1217[a0_1210:byte])
	a2_1021 = Mem1217[a7_1211:word32]
	d1 = (uint32) (uint8) SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030DA:
	d5_1051 = d1
	d3_1064 = d3_1064 + 0x00000001
	d4_1077 = d4_1077 + 0x00000001
	branch d1 == 0xFFFFFFFF l0000311A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030E8:
	word32 a7_1247 = a7_1338 - 4
	Mem1249[a7_1247:word32] = a7_1338 + 78
	Mem1253[a7_1247 - 4:word32] = a1
	Mem1255[a7_1247 - 0x00000008:word32] = 0x00000008
	Mem1258[a7_1247 - 0x0000000C:word32] = d1
	d1 = (uint32) (uint8) Mem1258[Mem1258[a7_1247:word32] + fn000026C0(d2_1384, Mem1258[a7_1247 - 0x0000000C:word32], Mem1258[a7_1247 - 0x00000008:word32]):byte]
	a1 = Mem1258[a7_1247 - 0x00000004:word32]
	d0 = 1 << (d1 & 7) & d1
	branch d0 == 0x00000000 l0000311A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003116:
	branch d6_1139 - d3_1064 >=u 0x00000000 l0000309E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000311A:
	Mem1302[a7_1338 + 73:byte] = SLICE(d7, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000311E:
	branch d5_1051 == 0xFFFFFFFF l00003130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003126:
	word32 a7_1310 = a7_1338 - 4
	Mem1316[a7_1310:word32] = a2_1021
	Mem1319[a7_1310 - 4:word32] = d5_1051
	d0 = fn00002BD4(Mem1319[a7_1310 - 1:byte], Mem1319[a7_1310:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003130:
	d3_132 = d3_1064 - 0x00000001
	d4_1336 = d4_1077 - 0x00000001
	branch Mem1339[a7_1338 + 73:byte] != 0x00 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000313C:
	branch d3_132 == 0x00000000 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003142:
	Mem1356[a6_1170:byte] = 0x00
	Mem1359[a7_1338 + 60:word32] = Mem1356[a7_1338 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DF8:
	byte v152_1361 = SLICE(d1_778, byte, 0) - 0x08
	word32 d1_1363 = SEQ(SLICE(d1_778, word24, 8), v152_1361)
	branch v152_1361 == 0x00 l00002E0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E0E:
	branch d6_1139 != 0xFFFFFFFF l00002E18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E16:
	d6_1139 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E18:
	word32 a1_1377
	branch Mem635[a7_1338 + 73:byte] != 0x00 l00002E32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E32:
	a1_1377 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E1E:
	d0 = d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1384 = d0 + 0x00000004
	a1_1377 = Mem635[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E34:
	word32 a0_1390 = a2_1021 + 24
	Mem1393[a0_1390:word32] = Mem635[a0_1390:word32] | 0x00000001
	word32 a0_1394 = a2_1021 + 20
	Mem1396[a0_1394:word32] = Mem1393[a0_1394:word32] - 0x00000001
	Mem1401[a7_1338 + 44:word32] = a1_1377
	branch Test(LT,false) l00002E6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E6C:
	word32 a1_1406 = Mem1401[a7_1338 + 44:word32]
	word32 a7_1407 = a7_1338 - 4
	Mem1409[a7_1407:word32] = a2_1021
	Mem1411[a7_1407 + 48:word32] = a1_1406
	d0 = fn00003CA8(d2_1384, a3, Mem1411[a7_1407:word32], out d1, out a1_5421, out a5)
	Mem1427[a7_1407 + 56:word32] = d0
	Mem1430[a7_1407 + 48:word32] = Mem1427[a7_1407 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E4C:
	word32 a1_1433 = a2_1021 + 4
	word32 a0_1434 = Mem1401[a1_1433:word32]
	word32 a7_1435 = a7_1338 - 4
	Mem1437[a7_1435:word32] = a2_1021
	Mem1441[a1_1433:word32] = a0_1434 + 1
	a2_1021 = Mem1441[a7_1435:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem1441[a0_1434:byte])
	Mem1454[a7_1435:word32] = d1_1363
	Mem1460[a7_1435 + 56:word32] = (uint32) (uint8) SLICE(d0, byte, 0)
	d1 = Mem1460[a7_1435:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E8A:
	a1 = Mem1466[a7_1338 + 44:word32]
	d5_1051 = Mem1466[a7_1338 + 52:word32]
	word32 d3_1472 = d3_1868 + 0x00000001
	word32 d4_1476 = d4_1336 + 0x00000001
	branch Mem1466[a7_1338 + 52:word32] == 0xFFFFFFFF l00002F02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EA0:
	Mem1482[a7_1338 + 44:word32] = a1
	branch d6_1139 - d3_1472 <u 0x00000000 l00002F02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EA8:
	d7 = SEQ(SLICE(d7, word24, 8), Mem1482[a7_1338 + 73:byte])
	word32 a4_1496 = Mem1482[a7_1338 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EB0:
	branch SLICE(d7, byte, 0) != 0x00 l00002EB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EB4:
	Mem1505[a4_1496:byte] = SLICE(d5_1051, byte, 0)
	a4_1496 = a4_1496 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EB6:
	word32 a0_1510 = a2_1021 + 24
	Mem1514[a0_1510:word32] = Mem1511[a0_1510:word32] | 0x00000001
	word32 a0_1515 = a2_1021 + 20
	word32 v310_1516 = Mem1514[a0_1515:word32] - 0x00000001
	Mem1517[a0_1515:word32] = v310_1516
	branch v310_1516 < 0x00000000 l00002EE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE0:
	word32 a7_1522 = a7_1338 - 4
	Mem1524[a7_1522:word32] = a2_1021
	d0 = fn00003CA8(d2_1384, a3, Mem1524[a7_1522:word32], out d1_5422, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EC8:
	a1 = a2_1021 + 4
	word32 a0_1544 = Mem1517[a1:word32]
	word32 a7_1545 = a7_1338 - 4
	Mem1547[a7_1545:word32] = a2_1021
	Mem1551[a1:word32] = a0_1544 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem1551[a0_1544:byte])
	a2_1021 = Mem1551[a7_1545:word32]
	d1 = (uint32) (uint8) SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EEC:
	d5_1051 = d1
	d3_1472 = d3_1472 + 0x00000001
	d4_1476 = d4_1476 + 0x00000001
	branch d1 == 0xFFFFFFFF l00002EFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EFA:
	branch d6_1139 - d3_1472 >=u 0x00000000 l00002EB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EFE:
	Mem1591[a7_1338 + 73:byte] = SLICE(d7, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F02:
	branch d5_1051 == 0xFFFFFFFF l00002F14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F0A:
	word32 a7_1599 = a7_1338 - 4
	Mem1605[a7_1599:word32] = a2_1021
	Mem1608[a7_1599 - 4:word32] = d5_1051
	d0 = fn00002BD4(Mem1608[a7_1599 - 1:byte], Mem1608[a7_1599:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F14:
	d3_132 = d3_1472 - 0x00000001
	d4_1336 = d4_1476 - 0x00000001
	branch Mem1628[a7_1338 + 73:byte] != 0x00 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F20:
	branch d3_132 == 0x00000000 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F26:
	Mem1639[a7_1338 + 60:word32] = Mem1628[a7_1338 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DFC:
	byte v154_1641 = SLICE(d1_1363, byte, 0) - 0x0B
	d1 = SEQ(SLICE(d1_1363, word24, 8), v154_1641)
	branch v154_1641 == 0x00 l000032A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032A0:
	branch Mem635[a7_1338 + 73:byte] != 0x00 l00003338
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032A8:
	branch Mem635[a7_1338 + 72:byte] != 0x01 l000032CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032CA:
	branch Mem635[a7_1338 + 72:byte] != 0x6C l000032E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032E8:
	branch Mem635[a7_1338 + 72:byte] != 0x68 l00003306
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003306:
	branch Mem635[a7_1338 + 72:byte] != 0x02 l00003324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003324:
	d0 = d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1672[Mem635[d0:word32]:word32] = d4_1336
	d2_1384 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000330E:
	d0 = d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1684[Mem635[d0:word32]:byte] = SLICE(d4_1336, byte, 0)
	d2_1384 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032F0:
	d0 = d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1696[Mem635[d0:word32]:word16] = SLICE(d4_1336, word16, 0)
	d2_1384 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032D2:
	d0 = d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1708[Mem635[d0:word32]:word32] = d4_1336
	d2_1384 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032B0:
	d0 = d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 a0_1718 = Mem635[d0:word32]
	Mem1720[a0_1718 + 4:word32] = d4_1336
	Mem1721[a0_1718:word32] = 0x00000000
	d2_1384 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003338:
	Mem1730[a7_1338 + 60:word32] = Mem1728[a7_1338 + 60:word32] + 0x00000001
	d3_132 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E04:
	byte v156_1732 = SLICE(d1, byte, 0) - 0x05
	d1 = SEQ(SLICE(d1, word24, 8), v156_1732)
	branch v156_1732 == 0x00 l0000314C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000314C:
	branch Mem635[a7_1338 + 73:byte] != 0x00 l00003166
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003166:
	a5 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003152:
	d0 = d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1384 = d0 + 0x00000004
	a5 = Mem635[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003168:
	branch d5_1051 == 0xFFFFFFFF l00003204
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003172:
	word32 d0_1779 = (uint32) (uint8) Mem635[0x0000288D + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1051, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1779 & 0x00000008
	branch (d0_1779 & 0x00000008) != 0x00000000 l00003204
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000318E:
	branch d6_1139 - d3_1868 <u 0x00000000 l00003204
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003192:
	d7 = SEQ(SLICE(d7, word24, 8), Mem635[a7_1338 + 73:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003196:
	branch SLICE(d7, byte, 0) != 0x00 l0000319C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000319A:
	Mem1804[a5:byte] = SLICE(d5_1051, byte, 0)
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000319C:
	word32 a0_1809 = a2_1021 + 24
	Mem1813[a0_1809:word32] = Mem1810[a0_1809:word32] | 0x00000001
	word32 a0_1814 = a2_1021 + 20
	word32 v197_1815 = Mem1813[a0_1814:word32] - 0x00000001
	Mem1816[a0_1814:word32] = v197_1815
	branch v197_1815 < 0x00000000 l000031C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031C6:
	word32 a7_1821 = a7_1338 - 4
	Mem1823[a7_1821:word32] = a2_1021
	d0 = fn00003CA8(d2_1384, a3, Mem1823[a7_1821:word32], out d1_5420, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031AE:
	a1 = a2_1021 + 4
	word32 a0_1843 = Mem1816[a1:word32]
	word32 a7_1844 = a7_1338 - 4
	Mem1846[a7_1844:word32] = a2_1021
	Mem1850[a1:word32] = a0_1843 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem1850[a0_1843:byte])
	a2_1021 = Mem1850[a7_1844:word32]
	d1 = (uint32) (uint8) SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031D2:
	d5_1051 = d1
	d3_1868 = d3_1868 + 0x00000001
	d4_1336 = d4_1336 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031E0:
	word32 d0_1889 = (uint32) (uint8) Mem1886[0x0000288D + (SEQ(SLICE(d0, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1889 & 0x00000008
	branch (d0_1889 & 0x00000008) != 0x00000000 l00003200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031FC:
	branch d6_1139 - d3_1868 >=u 0x00000000 l00003196
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003200:
	Mem1907[a7_1338 + 73:byte] = SLICE(d7, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003204:
	branch d5_1051 == 0xFFFFFFFF l00003216
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000320C:
	word32 a7_1915 = a7_1338 - 4
	Mem1921[a7_1915:word32] = a2_1021
	Mem1924[a7_1915 - 4:word32] = d5_1051
	d0 = fn00002BD4(Mem1924[a7_1915 - 1:byte], Mem1924[a7_1915:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003216:
	d3_132 = d3_1868 - 0x00000001
	d4_1336 = d4_1336 - 0x00000001
	branch Mem1945[a7_1338 + 73:byte] != 0x00 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003222:
	branch d3_132 == 0x00000000 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003228:
	Mem1961[a5:byte] = 0x00
	Mem1964[a7_1338 + 60:word32] = Mem1961[a7_1338 + 60:word32] + 0x00000001
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E0A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003342:
	Mem1966[a7_1338 + 48:word32] = 0x00000000
	Mem1967[a7_1338 + 44:word32] = 0x00000000
	Mem1968[a7_1338 + 110:word32] = 0x00000000
	branch SLICE(d7, byte, 0) != 0x00 l00003354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003352:
	a3 = a3 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003354:
	branch SLICE(d7, byte, 0) != 0x70 l00003362
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000335A:
	Mem1980[a7_1338 + 72:byte] = 0x6C
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003362:
	branch d5_1051 != 0x0000002D l00003370
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000336A:
	branch SLICE(d7, byte, 0) != 0x75 l00003378
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003370:
	branch d5_1051 != 0x0000002B l000033C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003378:
	branch d6_1139 - d3_1868 <u 0x00000000 l000033C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000337C:
	Mem2012[a7_1338 + 110:word32] = d5_1051
	word32 a0_2017 = a2_1021 + 24
	Mem2019[a0_2017:word32] = Mem2012[a0_2017:word32] | 0x00000001
	word32 a0_2020 = a2_1021 + 20
	word32 v227_2021 = Mem2019[a0_2020:word32] - 0x00000001
	Mem2022[a0_2020:word32] = v227_2021
	branch v227_2021 < 0x00000000 l000033B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033B2:
	word32 a7_2025 = a7_1338 - 4
	Mem2027[a7_2025:word32] = a2_1021
	d0 = fn00003CA8(d2_1384, a3, Mem2027[a7_2025:word32], out d1, out a1, out a5)
	Mem2048[a7_2025 + 56:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003392:
	a1 = a2_1021 + 4
	word32 a0_2052 = Mem2022[a1:word32]
	word32 a7_2053 = a7_1338 - 4
	Mem2055[a7_2053:word32] = a2_1021
	Mem2059[a1:word32] = a0_2052 + 1
	a2_1021 = Mem2059[a7_2053:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem2059[a0_2052:byte])
	Mem2076[a7_2053:word32] = d1
	Mem2082[a7_2053 + 56:word32] = (uint32) (uint8) SLICE(d0, byte, 0)
	d1 = Mem2082[a7_2053:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033C0:
	d5_1051 = Mem2088[a7_1338 + 52:word32]
	d3_1868 = d3_1868 + 0x00000001
	d4_1336 = d4_1336 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033C8:
	branch SLICE(d7, byte, 0) != 0x69 l0000353A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033D0:
	branch d5_1051 != 0x00000030 l000034FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033DA:
	branch d6_1139 - d3_1868 <u 0x00000000 l000034FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034FC:
	word32 d0_2135 = (uint32) (uint8) Mem2128[0x0000288D + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1051, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2135 & 0x00000004
	branch (d0_2135 & 0x00000004) != 0x00000000 l0000353A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003518:
	word32 d0_2150 = (uint32) (uint8) Mem2128[0x0000288D + (SEQ(SLICE(d0_2135 & 0x00000004, word24, 8), SLICE(d5_1051, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2150 & 0x00000044
	branch (d0_2150 & 0x00000044) == 0x00000000 l0000353A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003534:
	branch d6_1139 - d3_1868 <u 0x00000000 l0000353A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003538:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033E0:
	word32 d0_2185
	word32 a0_2165 = a2_1021 + 24
	Mem2167[a0_2165:word32] = Mem2128[a0_2165:word32] | 0x00000001
	word32 a0_2168 = a2_1021 + 20
	word32 v245_2169 = Mem2167[a0_2168:word32] - 0x00000001
	Mem2170[a0_2168:word32] = v245_2169
	branch v245_2169 < 0x00000000 l00003412
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003412:
	word32 a7_2174 = a7_1338 - 4
	Mem2176[a7_2174:word32] = a2_1021
	d0_2185 = fn00003CA8(d2_1384, a3, Mem2176[a7_2174:word32], out d1, out a1, out a5)
	Mem2193[a7_2174 + 56:word32] = d0_2185
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033F2:
	a1 = a2_1021 + 4
	word32 a0_2197 = Mem2170[a1:word32]
	word32 a7_2198 = a7_1338 - 4
	Mem2200[a7_2198:word32] = a2_1021
	Mem2204[a1:word32] = a0_2197 + 1
	a2_1021 = Mem2204[a7_2198:word32]
	d0_2185 = SEQ(SLICE(d0, word24, 8), Mem2204[a0_2197:byte])
	Mem2215[a7_2198:word32] = d1
	Mem2221[a7_2198 + 56:word32] = (uint32) (uint8) SLICE(d0_2185, byte, 0)
	d1 = Mem2221[a7_2198:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003420:
	Mem2229[a7_1338 + 64:word32] = Mem2227[a7_1338 + 52:word32]
	word32 d0_2239 = SEQ(SLICE(d0_2185, word24, 8), Mem2229[a7_1338 + 55:byte])
	word32 d3_2231 = d3_1868 + 0x00000001
	d0 = d0_2239 & 0x000000FF
	branch __btst(Mem2229[0x0000288D + (int32) ((int16) (d0_2239 & 0x000000FF)):byte], 0x0000) l00003446
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003442:
	d0 = SEQ(SLICE(d0_2239 & 0x000000FF, word24, 8), SLICE(d0_2239 & 0x000000FF, byte, 0) | 0x20)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003446:
	branch d0 != 0x00000078 l000034DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003450:
	branch d6_1139 - d3_2231 <u 0x00000000 l000034DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034DE:
	d7 = 111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003456:
	word32 d0_2287
	word32 a0_2266 = a2_1021 + 24
	Mem2269[a0_2266:word32] = Mem2229[a0_2266:word32] | 0x00000001
	word32 a0_2270 = a2_1021 + 20
	word32 v267_2271 = Mem2269[a0_2270:word32] - 0x00000001
	Mem2272[a0_2270:word32] = v267_2271
	branch v267_2271 < 0x00000000 l00003488
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003488:
	word32 a7_2276 = a7_1338 - 4
	Mem2278[a7_2276:word32] = a2_1021
	d0_2287 = fn00003CA8(d2_1384, a3, Mem2278[a7_2276:word32], out d1, out a1, out a5)
	Mem2295[a7_2276 + 56:word32] = d0_2287
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003468:
	a1 = a2_1021 + 4
	word32 a0_2299 = Mem2272[a1:word32]
	word32 a7_2300 = a7_1338 - 4
	Mem2302[a7_2300:word32] = a2_1021
	Mem2306[a1:word32] = a0_2299 + 1
	a2_1021 = Mem2306[a7_2300:word32]
	d0_2287 = SEQ(SLICE(d0, word24, 8), Mem2306[a0_2299:byte])
	Mem2317[a7_2300:word32] = d1
	Mem2323[a7_2300 + 56:word32] = (uint32) (uint8) SLICE(d0_2287, byte, 0)
	d1 = Mem2323[a7_2300:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003496:
	Mem2331[a7_1338 + 74:word32] = Mem2329[a7_1338 + 52:word32]
	word32 d0_2351 = (uint32) (uint8) Mem2331[0x0000288D + (SEQ(SLICE(d0_2287, word24, 8), SLICE(d5_1051, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2351 & 0x00000044
	branch (d0_2351 & 0x00000044) == 0x00000000 l000034C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034BC:
	branch d6_1139 - (d3_2231 + 0x00000001) <u 0x00000000 l000034C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034C0:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034C2:
	branch Mem2331[a7_1338 + 74:word32] == 0xFFFFFFFF l000034D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034CC:
	word32 a7_2368 = a7_1338 - 4
	Mem2372[a7_2368:word32] = a2_1021
	Mem2376[a7_2368 - 4:word32] = Mem2372[a7_2368 + 78:word32]
	d0 = fn00002BD4(Mem2376[a7_2368 - 1:byte], Mem2376[a7_2368:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034E0:
	branch Mem2396[a7_1338 + 64:word32] == 0xFFFFFFFF l000034F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034EA:
	word32 a7_2402 = a7_1338 - 4
	Mem2407[a7_2402:word32] = a2_1021
	Mem2411[a7_2402 - 4:word32] = Mem2407[a7_2402 + 68:word32]
	d0 = fn00002BD4(Mem2411[a7_2402 - 1:byte], Mem2411[a7_2402:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034F6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000353A:
	word32 d4_2560 = d4_1336
	word32 d3_2457 = d3_1868
	branch SLICE(d7, byte, 0) != 0x78 l0000366E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003542:
	branch d5_1051 != 0x00000030 l0000366E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000354C:
	branch d6_1139 - d3_1868 <u 0x00000000 l0000366E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003552:
	word32 d0_2500
	word32 a0_2464 = a2_1021 + 24
	Mem2468[a0_2464:word32] = Mem2465[a0_2464:word32] | 0x00000001
	word32 a0_2469 = a2_1021 + 20
	word32 v347_2470 = Mem2468[a0_2469:word32] - 0x00000001
	Mem2471[a0_2469:word32] = v347_2470
	branch v347_2470 < 0x00000000 l00003584
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003584:
	word32 a7_2477 = a7_1338 - 4
	Mem2479[a7_2477:word32] = a2_1021
	d0_2500 = fn00003CA8(d2_1384, a3, Mem2479[a7_2477:word32], out d1, out a1, out a5)
	Mem2508[a7_2477 + 56:word32] = d0_2500
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003564:
	a1 = a2_1021 + 4
	word32 a0_2512 = Mem2471[a1:word32]
	word32 a7_2513 = a7_1338 - 4
	Mem2515[a7_2513:word32] = a2_1021
	Mem2519[a1:word32] = a0_2512 + 1
	a2_1021 = Mem2519[a7_2513:word32]
	d0_2500 = SEQ(SLICE(d0, word24, 8), Mem2519[a0_2512:byte])
	Mem2542[a7_2513:word32] = d1
	Mem2548[a7_2513 + 56:word32] = (uint32) (uint8) SLICE(d0_2500, byte, 0)
	d1 = Mem2548[a7_2513:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003592:
	Mem2556[a7_1338 + 64:word32] = Mem2554[a7_1338 + 52:word32]
	word32 d0_2567 = SEQ(SLICE(d0_2500, word24, 8), Mem2556[a7_1338 + 55:byte])
	word32 d3_2558 = d3_1868 + 0x00000001
	word32 d4_2562 = d4_1336 + 0x00000001
	d0 = d0_2567 & 0x000000FF
	branch __btst(Mem2556[0x0000288D + (int32) ((int16) (d0_2567 & 0x000000FF)):byte], 0x0000) l000035B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035B4:
	d0 = SEQ(SLICE(d0_2567 & 0x000000FF, word24, 8), SLICE(d0_2567 & 0x000000FF, byte, 0) | 0x20)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035B8:
	branch d0 != 0x00000078 l00003654
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035C2:
	branch d6_1139 - d3_2558 <u 0x00000000 l00003654
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035C8:
	word32 d0_2613
	word32 a0_2592 = a2_1021 + 24
	Mem2595[a0_2592:word32] = Mem2556[a0_2592:word32] | 0x00000001
	word32 a0_2596 = a2_1021 + 20
	word32 v368_2597 = Mem2595[a0_2596:word32] - 0x00000001
	Mem2598[a0_2596:word32] = v368_2597
	branch v368_2597 < 0x00000000 l000035FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035FA:
	word32 a7_2602 = a7_1338 - 4
	Mem2604[a7_2602:word32] = a2_1021
	d0_2613 = fn00003CA8(d2_1384, a3, Mem2604[a7_2602:word32], out d1, out a1, out a5)
	Mem2621[a7_2602 + 56:word32] = d0_2613
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035DA:
	a1 = a2_1021 + 4
	word32 a0_2625 = Mem2598[a1:word32]
	word32 a7_2626 = a7_1338 - 4
	Mem2628[a7_2626:word32] = a2_1021
	Mem2632[a1:word32] = a0_2625 + 1
	a2_1021 = Mem2632[a7_2626:word32]
	d0_2613 = SEQ(SLICE(d0, word24, 8), Mem2632[a0_2625:byte])
	Mem2643[a7_2626:word32] = d1
	Mem2649[a7_2626 + 56:word32] = (uint32) (uint8) SLICE(d0_2613, byte, 0)
	d1 = Mem2649[a7_2626:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003608:
	Mem2657[a7_1338 + 74:word32] = Mem2655[a7_1338 + 52:word32]
	word32 d0_2674 = (uint32) (uint8) Mem2657[0x0000288D + (SEQ(SLICE(d0_2613, word24, 8), Mem2657[a7_1338 + 55:byte]) & 0x000000FF):byte]
	d3_2457 = d3_2558 + 0x00000001
	d4_2560 = d4_2562 + 0x00000001
	d0 = d0_2674 & 0x00000044
	branch (d0_2674 & 0x00000044) == 0x00000000 l0000363A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003630:
	branch d6_1139 - (d3_2558 + 0x00000001) <u 0x00000000 l0000363A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000363A:
	branch Mem2657[a7_1338 + 74:word32] == 0xFFFFFFFF l00003650
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003644:
	word32 a7_2689 = a7_1338 - 4
	Mem2693[a7_2689:word32] = a2_1021
	Mem2697[a7_2689 - 4:word32] = Mem2693[a7_2689 + 78:word32]
	d0 = fn00002BD4(Mem2697[a7_2689 - 1:byte], Mem2697[a7_2689:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003650:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003654:
	branch Mem2716[a7_1338 + 64:word32] == 0xFFFFFFFF l0000366A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000365E:
	word32 a7_2721 = a7_1338 - 4
	Mem2725[a7_2721:word32] = a2_1021
	Mem2729[a7_2721 - 4:word32] = Mem2725[a7_2721 + 68:word32]
	d0 = fn00002BD4(Mem2729[a7_2721 - 1:byte], Mem2729[a7_2721:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000366A:
	d3_2457 = d3_2558 - 0x00000001
	d4_2560 = d4_2562 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003634:
	d5_1051 = Mem2657[a7_1338 + 74:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000366E:
	branch SLICE(d7, byte, 0) == 0x78 l0000367A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003674:
	branch SLICE(d7, byte, 0) != 0x58 l00003684
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003684:
	branch SLICE(d7, byte, 0) != 0x6F l00003694
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003694:
	Mem2768[a7_1338 + 52:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000368A:
	Mem2771[a7_1338 + 52:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000369C:
	Mem2776[a7_1338 + 64:word32] = Mem2774[a7_1338 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000367A:
	Mem2780[a7_1338 + 64:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036A2:
	Mem2785[a7_1338 + 114:word32] = Mem2783[a7_1338 + 64:word32]
	word32 d0_2814 = (uint32) (uint8) Mem2785[0x0000288D + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1051, byte, 0)) & 0x000000FF):byte]
	Mem2826[a7_1338 + 132:word32] = d2_1384
	Mem2832[a7_1338 + 52:word32] = d4_2560
	Mem2837[a7_1338 + 74:byte] = SLICE(d7, byte, 0)
	d0 = d0_2814 & 0x00000044
	branch (d0_2814 & 0x00000044) == 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036D4:
	branch Mem2837[a7_1338 + 114:word32] != 0x0000000A l0000370A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036DE:
	word32 d0_2854 = (uint32) (uint8) Mem2837[0x0000288D + (SEQ(SLICE(d0_2814 & 0x00000044, word24, 8), SLICE(d5_1051, byte, 0)) & 0x000000FF):byte]
	Mem2857[a7_1338 + 132:word32] = d2_1384
	Mem2859[a7_1338 + 52:word32] = d4_2560
	Mem2861[a7_1338 + 74:byte] = SLICE(d7, byte, 0)
	d0 = d0_2854 & 0x00000004
	branch (d0_2854 & 0x00000004) == 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000370A:
	branch Mem2867[a7_1338 + 114:word32] != 0x00000008 l0000372A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003714:
	Mem2873[a7_1338 + 132:word32] = d2_1384
	Mem2876[a7_1338 + 52:word32] = d4_2560
	Mem2879[a7_1338 + 74:byte] = SLICE(d7, byte, 0)
	branch d5_1051 > 0x00000037 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000372A:
	Mem2887[a7_1338 + 132:word32] = d2_1384
	Mem2890[a7_1338 + 52:word32] = d4_2560
	Mem2902[a7_1338 + 64:word32] = d6_1139
	Mem2905[a7_1338 + 74:byte] = SLICE(d7, byte, 0)
	branch d6_1139 - d3_2457 <u 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003740:
	d7 = Mem2905[a7_1338 + 114:word32]
	word32 a4_2917 = Mem2905[a7_1338 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003748:
	word32 a7_2922 = a7_1338 - 4
	Mem2925[a7_2922:word32] = d2_1384
	word32 v419_2929 = Mem2925[a7_2922:word32]
	Mem2934[a7_2922:word32] = d7 >> 31
	Mem2937[a7_2922 - 4:word32] = d7
	Mem2941[a7_2922 - 8:word32] = a1
	Mem2945[a7_2922 - 12:word32] = Mem2941[a7_2922 + 52:word32]
	Mem2949[a7_2922 - 16:word32] = Mem2945[a7_2922 + 48:word32]
	Mem2952[a7_2922 - 20:word32] = d7
	Mem2954[a7_2922 - 24:word32] = d7 >> 31
	word32 d1_2957
	Mem2968[a7_2922 + 68:word32] = fn00003C28(d4_2560, Mem2954[a7_2922 - 24:word32], Mem2954[a7_2922 - 20:word32], Mem2954[a7_2922 - 16:word32], Mem2954[a7_2922 - 12:word32], out d1_2957)
	Mem2970[a7_2922 + 72:word32] = d1_2957
	branch ((uint32) (uint8) Mem2970[0x0000288D + (SEQ(Mem2970[a7_2922 + 0x00000001:word24], SLICE(d5_1051, byte, 0)) & 0x000000FF):byte] & 0x00000004) == 0x00000000 l000037A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037A8:
	d4_2560 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000379E:
	d4_2560 = d5_1051 - 0x00000030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037AA:
	word32 d6_3051
	Mem3003[a7_1338 - 4:word32] = v419_2929
	Mem3011[a7_1338 - 4:word32] = Mem3003[a7_1338 - 4:word32]
	word32 d2_3013 = d4_2560 + Mem3011[a7_1338 + 68:word32]
	Mem3016[a7_1338 + 48:word32] = d2_3013
	Mem3022[a7_1338 - 8:word32] = d3_2457
	word32 d0_3005 = d4_2560 >> 31
	Mem3028[a7_1338 + 44:word32] = Mem3022[a7_1338 + 64:word32] + d0_3005 + (d2_3013 <u 0x00000000)
	word32 v441_3029 = Mem3028[a7_1338 - 8:word32]
	word32 v442_3032 = Mem3028[a7_1338 - 4:word32]
	branch ((uint32) (uint8) Mem3028[0x0000288D + (SEQ(SLICE(d0_3005, word24, 8), SLICE(d5_1051, byte, 0)) & 0x000000FF):byte] & 0x00000001) == 0x00000000 l000037FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037FA:
	d6_3051 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037F0:
	d6_3051 = d5_1051 - 0x00000037
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037FC:
	word32 d2_3110
	Mem3063[a7_1338 - 4:word32] = v442_3032
	Mem3071[a7_1338 - 4:word32] = Mem3063[a7_1338 - 4:word32]
	word32 d2_3073 = d6_3051 + Mem3071[a7_1338 + 48:word32]
	Mem3076[a7_1338 + 68:word32] = d2_3073
	Mem3081[a7_1338 - 8:word32] = v441_3029
	word32 d0_3065 = d6_3051 >> 31
	Mem3087[a7_1338 + 64:word32] = Mem3081[a7_1338 + 44:word32] + d0_3065 + (d2_3073 <u 0x00000000)
	word32 v453_3088 = Mem3087[a7_1338 - 8:word32]
	branch ((uint32) (uint8) Mem3087[0x0000288D + (SEQ(SLICE(d0_3065, word24, 8), SLICE(d5_1051, byte, 0)) & 0x000000FF):byte] & 0x00000002) == 0x00000000 l0000384C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000384C:
	d2_3110 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003842:
	d2_3110 = d5_1051 - 0x00000057
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000384E:
	word32 d0_3175
	Mem3121[a7_1338 - 4:word32] = d2_3110
	Mem3129[a7_1338 - 4:word32] = Mem3121[a7_1338 - 4:word32]
	word32 d2_3131 = d2_3110 + Mem3129[a7_1338 + 68:word32]
	Mem3134[a7_1338 + 48:word32] = d2_3131
	Mem3139[a7_1338 - 8:word32] = v453_3088
	Mem3144[a7_1338 + 44:word32] = Mem3139[a7_1338 + 64:word32] + (d2_3110 >> 31) + (d2_3131 <u 0x00000000)
	word32 v466_3148 = Mem3144[a7_1338 - 4:word32]
	word32 a0_3155 = a2_1021 + 24
	word32 v465_3145 = Mem3144[a7_1338 - 8:word32]
	Mem3158[a0_3155:word32] = Mem3144[a0_3155:word32] | 1
	word32 a0_3159 = a2_1021 + 20
	word32 v468_3160 = Mem3158[a0_3159:word32] - 0x00000001
	Mem3161[a0_3159:word32] = v468_3160
	d2_1384 = v466_3148
	branch v468_3160 < 0x00000000 l000038A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038A0:
	Mem3166[a7_1338 - 4:word32] = a2_1021
	d0_3175 = fn00003CA8(v466_3148, a3, Mem3166[a7_1338 - 4:word32], out d1_5423, out a1, out a5)
	d1 = d0_3175
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003888:
	a1 = a2_1021 + 4
	word32 a0_3186 = Mem3161[a1:word32]
	Mem3189[a7_1338 - 4:word32] = a2_1021
	Mem3193[a1:word32] = a0_3186 + 1
	d0_3175 = (uint32) (uint8) Mem3193[a0_3186:byte]
	a2_1021 = Mem3193[a7_1338 - 4:word32]
	d1 = (uint32) (uint8) SLICE(d0_3175, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038AC:
	Mem3212[a7_1338 + 52:word32] = Mem3210[a7_1338 + 52:word32] + 0x00000001
	word32 d0_3224 = (uint32) (uint8) Mem3212[0x0000288D + (SEQ(SLICE(d0_3175, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1051 = d1
	d3_2457 = v465_3145 + 0x00000001
	d0 = d0_3224 & 0x00000044
	branch (d0_3224 & 0x00000044) == 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038D0:
	branch d7 != 0x0000000A l000038F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038D8:
	word32 d0_3246 = (uint32) (uint8) Mem3212[0x0000288D + (SEQ(SLICE(d0_3224 & 0x00000044, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d0 = d0_3246 & 0x00000004
	branch (d0_3246 & 0x00000004) == 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038F4:
	branch d7 != 0x00000008 l00003904
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038FC:
	branch d1 > 0x00000037 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003904:
	branch a4_2917 - (v465_3145 + 0x00000001) >=u 0x00000000 l00003748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000390A:
	d7 = SEQ(SLICE(d7, word24, 8), Mem3275[a7_1338 + 74:byte])
	word32 d4_3283 = Mem3275[a7_1338 + 52:word32]
	d2_1384 = Mem3275[a7_1338 + 132:word32]
	branch Mem3275[a7_1338 + 110:word32] == 0x00000000 l0000393E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000391C:
	branch d3_2457 != 0x00000002 l0000393E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003924:
	branch d5_1051 == 0xFFFFFFFF l00003936
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000392C:
	word32 a7_3299 = a7_1338 - 4
	Mem3312[a7_3299:word32] = a2_1021
	Mem3315[a7_3299 - 4:word32] = d5_1051
	d0 = fn00002BD4(Mem3315[a7_3299 - 1:byte], Mem3315[a7_3299:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003936:
	d3_2457 = d3_2457 - 0x00000001
	d4_3283 = d4_3283 - 0x00000001
	d5_1051 = Mem3331[a7_1338 + 110:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000393E:
	branch d5_1051 == 0xFFFFFFFF l00003950
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003946:
	word32 a7_3339 = a7_1338 - 4
	Mem3343[a7_3339:word32] = a2_1021
	Mem3346[a7_3339 - 4:word32] = d5_1051
	d0 = fn00002BD4(Mem3346[a7_3339 - 1:byte], Mem3346[a7_3339:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003950:
	d3_132 = d3_2457 - 0x00000001
	d4_1336 = d4_3283 - 0x00000001
	branch Mem3364[a7_1338 + 73:byte] != 0x00 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000395C:
	branch d3_132 == 0x00000000 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003962:
	branch SLICE(d7, byte, 0) != 0x75 l00003A24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A24:
	branch Mem3364[a7_1338 + 110:word32] != 0x0000002D l00003A40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A40:
	Mem3384[a7_1338 + 56:word32] = Mem3364[a7_1338 + 48:word32]
	Mem3386[a7_1338 + 52:word32] = Mem3384[a7_1338 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A2E:
	word32 v528_3388 = a7_1338 + 44
	d1 = -Mem3364[v528_3388 + 4:word32]
	d0 = -Mem3364[v528_3388:word32] - (d1 <u 0x00000000)
	a7_1338 = Mem3364[a7_1338 + 0x00000038:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A4C:
	word32 a7_3404 = a7_1338 - 4
	Mem3415[a7_3404:word32] = d0
	word32 d0_3418 = SEQ(SLICE(d0, word24, 8), Mem3415[a7_3404 + 76:byte])
	Mem3424[a7_3404 + 48:byte] = SLICE(SEQ(SLICE(d0_3418, word24, 8), SLICE(d0_3418, byte, 0) - 0x01), byte, 0)
	a7_1338 = a7_3404 + 4
	branch Mem3424[a7_3404 + 48:byte] == 0x00 l00003A76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A76:
	word32 d0_3438 = d2_1384 + 0x00000003 >>u 0x00000002
	d2_1384 = (d0_3438 << 0x00000002) + 0x00000004
	word32 a0_3444 = Mem3424[d2_1384 + -4:word32]
	Mem3446[a0_3444 + 4:word32] = Mem3424[a7_3404 + 60:word32]
	Mem3448[a0_3444:word32] = Mem3446[a7_3404 + 56:word32]
	d0 = d0_3438 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A60:
	byte v540_3450 = Mem3424[a7_3404 + 48:byte] - 0x01
	Mem3451[a7_3404 + 48:byte] = v540_3450
	branch v540_3450 == 0x00 l00003AC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AC8:
	d2_1384 = (d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3451[a7_3404 + 60:word32]
	Mem3465[Mem3451[d2_1384 + -4:word32]:byte] = SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A66:
	byte v541_3467 = Mem3451[a7_3404 + 48:byte] - 0x66
	Mem3468[a7_3404 + 48:byte] = v541_3467
	branch v541_3467 == 0x00 l00003AAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AAE:
	d2_1384 = (d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3468[a7_3404 + 60:word32]
	Mem3482[Mem3468[d2_1384 + -4:word32]:word16] = SLICE(d0, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A6E:
	byte v542_3484 = Mem3468[a7_3404 + 48:byte] - 0x04
	Mem3485[a7_3404 + 48:byte] = v542_3484
	branch v542_3484 == 0x00 l00003A94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A94:
	d2_1384 = (d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3485[a7_3404 + 60:word32]
	Mem3499[Mem3485[d2_1384 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A74:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AE2:
	d2_1384 = (d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3485[a7_3404 + 60:word32]
	Mem3512[Mem3485[d2_1384 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000396A:
	word32 a7_3514 = a7_1338 - 4
	Mem3516[a7_3514:word32] = d0
	word32 d0_3519 = SEQ(SLICE(d0, word24, 8), Mem3516[a7_3514 + 76:byte])
	Mem3525[a7_3514 + 56:byte] = SLICE(SEQ(SLICE(d0_3519, word24, 8), SLICE(d0_3519, byte, 0) - 0x01), byte, 0)
	a7_1338 = a7_3514 + 4
	branch Mem3525[a7_3514 + 56:byte] == 0x00 l00003994
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003994:
	word32 d0_3535 = d2_1384 + 0x00000003 >>u 0x00000002
	d2_1384 = (d0_3535 << 0x00000002) + 0x00000004
	word32 a0_3541 = Mem3525[d2_1384 + -4:word32]
	Mem3543[a0_3541 + 4:word32] = Mem3525[a7_3514 + 52:word32]
	Mem3545[a0_3541:word32] = Mem3543[a7_3514 + 48:word32]
	d0 = d0_3535 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000397E:
	byte v517_3547 = Mem3525[a7_3514 + 56:byte] - 0x01
	Mem3548[a7_3514 + 56:byte] = v517_3547
	branch v517_3547 == 0x00 l000039EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039EC:
	d2_1384 = (d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3548[a7_3514 + 52:word32]
	Mem3562[Mem3548[d2_1384 + -4:word32]:byte] = SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003984:
	byte v518_3564 = Mem3548[a7_3514 + 56:byte] - 0x66
	Mem3565[a7_3514 + 56:byte] = v518_3564
	branch v518_3564 == 0x00 l000039D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039D0:
	d2_1384 = (d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3565[a7_3514 + 52:word32]
	Mem3579[Mem3565[d2_1384 + -4:word32]:word16] = SLICE(d0, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000398C:
	byte v519_3581 = Mem3565[a7_3514 + 56:byte] - 0x04
	Mem3582[a7_3514 + 56:byte] = v519_3581
	branch v519_3581 == 0x00 l000039B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039B4:
	d2_1384 = (d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3582[a7_3514 + 52:word32]
	Mem3596[Mem3582[d2_1384 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003992:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A08:
	d2_1384 = (d2_1384 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3582[a7_3514 + 52:word32]
	Mem3609[Mem3582[d2_1384 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AFA:
	Mem3614[a7_1338 + 60:word32] = Mem3612[a7_1338 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AFE:
	a4_278 = a3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BFC:
	branch d3_132 == 0x00000000 l00003C06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C00:
	branch Mem3666[a4_278:byte] != 0x00 l00002C26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C06:
	word32 d0_3707
	branch d5_1051 != 0xFFFFFFFF l00003C18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C0E:
	branch false l00003C18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C18:
	d0_3707 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C14:
	d0_3707 = d5_1051
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C1C:
	return d0_3707
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002C04_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003C28(word32 d4, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d4:[16..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00003C28_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C28:
	word32 d0_23 = __swap(dwArg08)
	word32 d1_25 = __swap(dwArg10)
	word32 d4_29 = SEQ(SLICE(d4, word16, 16), SLICE(dwArg08, word16, 0)) *u SLICE(dwArg10, word16, 0)
	word32 d1_32 = d1_25 *u SLICE(d0_23, word16, 0)
	word32 d2_39 = dwArg08 *u SLICE(d1_25, word16, 0) + __swap(SEQ(SLICE(d4_29, word16, 16), SLICE(d4_29, word16, 0) ^ SLICE(d4_29, word16, 0))) + dwArg10 *u SLICE(d0_23, word16, 0)
	branch d2_39 >=u 0x00000000 l00003C5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C56:
	d1_32 = d1_32 + 0x00010000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C5C:
	word32 d2_45 = __swap(d2_39)
	word32 d3_65 = __swap(dwArg0C) *u SLICE(dwArg08, word16, 0)
	word32 d3_71 = __swap(SEQ(SLICE(d3_65, word16, 16), SLICE(d3_65 + __swap(dwArg08) *u SLICE(dwArg0C, word16, 0), word16, 0)))
	word32 d3_83 = __swap(dwArg04) *u SLICE(dwArg10, word16, 0)
	word32 d3_89 = __swap(SEQ(SLICE(d3_83, word16, 16), SLICE(d3_83 + __swap(dwArg10) *u SLICE(dwArg04, word16, 0), word16, 0)))
	d1Out = SEQ(SLICE(d2_45, word16, 16), SLICE(d4_29, word16, 0))
	return (uint32) (uint16) SLICE(d2_45, word16, 0) + d1_32 + (dwArg0C *u SLICE(dwArg08, word16, 0) + SEQ(SLICE(d3_71, word16, 16), SLICE(d3_71, word16, 0) ^ SLICE(d3_71, word16, 0))) + (dwArg04 *u SLICE(dwArg10, word16, 0) + SEQ(SLICE(d3_89, word16, 16), SLICE(d3_89, word16, 0) ^ SLICE(d3_89, word16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003C28_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003CA8(word32 d2, word32 a3, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5
fn00003CA8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CA8:
	word32 d0_161
	word32 a5_279
	word32 a1_116
	word32 d1_118 = fn00002400(d2, dwArg04, a3, out a1_116, out a5_279)
	branch dwArg04 != 0x00000000 l00003CC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CC0:
	branch (Mem26[dwArg04 + 24:word32] & 42) == 32 l00003CD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CD2:
	Mem49[dwArg04 + 24:word32] = Mem26[dwArg04 + 24:word32] | 1
	word32 d0_125 = Mem49[dwArg04 + 24:word32] & 0x00000200
	branch d0_125 == 0x00000000 l00003CEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CE4:
	d0_125 = fn00003DA4(d2, a3, out a1_116, out a5_279)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CEA:
	branch Mem49[dwArg04 + 28:word32] != 0x00000000 l00003D08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF0:
	d0_125 = Mem49[dwArg04 + 24:word32] & 4
	branch d0_125 == 0x00000000 l00003D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D00:
	Mem79[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF8:
	Mem83[dwArg04 + 28:word32] = 1
	d0_125 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D08:
	branch Mem86[dwArg04 + 8:word32] != 0x00000000 l00003D44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D0E:
	word32 d4_100
	branch (Mem86[dwArg04 + 24:word32] & 0x00000080) == 0x00000000 l00003D22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D22:
	d4_100 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D1E:
	d4_100 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D24:
	word32 d0_117 = fn0000202C(d4_100 + Mem86[dwArg04 + 28:word32], out d1_118, out a0_318, out a1_116)
	d0_125 = d0_117
	branch d0_117 != 0x00000000 l00003D3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D3C:
	Mem131[dwArg04 + 8:word32] = d0_117 + 1
	a1_116 = d0_117 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D44:
	Mem137[dwArg04 + 4:word32] = Mem135[dwArg04 + 8:word32]
	d1_118 = Mem137[dwArg04:word32]
	execPrivate2()
	Mem147[dwArg04 + 20:word32] = d0_125
	word32 v26_148 = Mem147[dwArg04 + 20:word32] - 0x00000001
	Mem149[dwArg04 + 20:word32] = v26_148
	branch v26_148 >= 0x00000000 l00003D8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D8A:
	word32 a0_153 = Mem149[dwArg04 + 4:word32]
	Mem157[dwArg04 + 4:word32] = a0_153 + 1
	a1_116 = dwArg04 + 4
	d0_161 = SEQ(SLICE(d0_125, word24, 8), Mem157[a0_153:byte]) & 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D68:
	branch Mem149[dwArg04 + 20:word32] != -1 l00003D7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D7A:
	Mem172[dwArg04 + 24:word32] = Mem149[dwArg04 + 24:word32] | 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D70:
	Mem179[dwArg04 + 24:word32] = Mem149[dwArg04 + 24:word32] | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D82:
	Mem184[dwArg04 + 20:word32] = 0x00000000
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D38:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CCC:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CBA:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D9E:
	d1Out = d1_118
	a1Out = a1_116
	a5Out = a5_279
	return d0_161
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003CA8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003DA4(word32 d2, word32 a3, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31]
// LiveOut: a1 a5 d0
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00003DA4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DA4:
	word32 a2_11 = Mem5[0x00003FD8:word32]
	word32 d0_44 = a2_11
	branch a2_11 == 0x00000000 l00003DDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DB2:
	branch (Mem12[a2_11 + 24:word32] & 0x00000202) != 0x00000202 l00003DD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DC4:
	branch Mem12[a2_11:word32] == 0x00000000 l00003DD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DC8:
	fn00001F80(d2, a3, a2_11, out a0_97, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DD2:
	a2_11 = Mem42[a2_11 + 12:word32]
	d0_44 = a2_11
	branch a2_11 != 0x00000000 l00003DB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DDC:
	a1Out = a1
	a5Out = a5
	return d0_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003DA4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003DE0(word32 a3, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00003DE0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DE0:
	word32 d0_112
	word32 a2_101 = dwArg04
	word32 d2_104 = 0
	branch Mem11[dwArg04:byte] == 0x00 l00003E60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DEE:
	word32 a0_19 = Mem18[0x00003FD0:word32]
	Mem23[a0_19 + 24:word32] = Mem18[a0_19 + 24:word32] | 2
	word32 v15_25 = Mem23[a0_19 + 20:word32] - 0x00000001
	Mem26[a0_19 + 20:word32] = v15_25
	word32 d0_21 = 2
	branch v15_25 < 0x00000000 l00003E36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E04:
	branch Mem26[a2_101:byte] != 0x0A l00003E1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E0A:
	d0_21 = Mem26[Mem26[0x00003FD0:word32] + 24:word32] & 0x00000080
	branch d0_21 != 0x00000000 l00003E36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E36:
	d1 = fn00001E6C(d2_104, a3, (int32) (int16) (int8) SEQ(SLICE(d0_21, word24, 8), Mem46[a2_101:byte]), Mem26[0x00003FD0:word32], out a0_66, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E1C:
	word32 a1_76 = Mem26[0x00003FD0:word32]
	word32 a0_78 = Mem26[a1_76 + 4:word32]
	Mem82[a1_76 + 4:word32] = a0_78 + 1
	Mem85[a0_78:byte] = Mem82[a2_101:byte]
	a1 = a1_76 + 4
	a3 = a0_78 + 1
	d1 = (uint32) (uint8) SLICE(SEQ(SLICE(d0_21, word24, 8), Mem85[a0_78:byte]), byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E4E:
	branch d1 != -1 l00003E58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E58:
	a2_101 = a2_101 + 1
	d2_104 = d2_104 + 0x00000001
	branch Mem106[a2_101:byte] != 0x00 l00003DEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E60:
	d0_112 = d2_104
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E54:
	d0_112 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E62:
	d1Out = d1
	a1Out = a1
	a5Out = a5
	return d0_112
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003DE0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



