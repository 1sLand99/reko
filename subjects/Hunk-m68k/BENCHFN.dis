// fn00001000
// Return size: 4
void fn00001000()
fn00001000_entry:
	// succ:  l00001000
l00001000:
	a7 = fp
	// succ:  l0000100A
l0000100A:
	d2 = d0
	CVZN = cond(d2)
	a2 = a0
	a4 = 0x0000BE66
	a6 = Mem0[0x00000004:word32]
	v10 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v10)
	branch Test(UGE,C) l00001036
	// succ:  l00001020 l00001036
l00001020:
	a0 = 0x00003E70
	d0 = 0x00000030
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	// succ:  l00001030
l00001030:
	Mem0[a0:word32] = 0x00000000
	a0 = a0 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00001030
	// succ:  l00001036 l00001030
l00001036:
	v16 = a7
	Mem0[a4 + -32758:word32] = v16
	CVZN = cond(v16)
	v17 = a6
	Mem0[a4 + -32754:word32] = v17
	CVZN = cond(v17)
	a1 = a1 - a1
	CVZNX = cond(a1)
	d0 = FindTask(a1)
	a3 = d0
	d0 = 0
	CVZN = cond(d0)
	a1 = 0x000012BC
	d0 = OpenLibrary(a1, d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001226
	// succ:  l00001056 l00001226
l00001056:
	v21 = d0
	Mem0[a4 + -32750:word32] = v21
	CVZN = cond(v21)
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(NE,Z) l00001066
	// succ:  l00001060 l00001066
l00001060:
	d4 = 2
	CVZN = cond(d4)
	d2 = 8
	CVZN = cond(d2)
	goto l00001076
	// succ:  l00001076
l00001066:
	a0 = a2
	d4 = 3
	CVZN = cond(d4)
	// succ:  l0000106A
l0000106A:
	v48 = Mem0[a0:byte] - 0x20
	CVZN = cond(v48)
	branch Test(NE,Z) l00001072
	// succ:  l00001070 l00001072
l00001070:
	v49 = (word16) d4 + 0x0001
	d4 = DPB(d4, v49, 0)
	CVZNX = cond(v49)
	// succ:  l00001072
l00001072:
	v55 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v55 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000106A
	// succ:  l00001076 l0000106A
l00001076:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d0 = d0 + 0x00000011
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000123E
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d0 = d0 + 0x00000011
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000123E
	// succ:  l00001096 l0000123E
l00001096:
	a7 = a7 - 0x00000004
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	a5 = d0
	v29 = d3
	Mem0[a5:word32] = v29
	CVZN = cond(v29)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	v30 = d4
	Mem0[a5 + 12:word32] = v30
	CVZN = cond(v30)
	a0 = a5 + 16
	a0 = a0 + d5
	v31 = a0
	Mem0[a5 + 8:word32] = v31
	CVZN = cond(v31)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	a7 = a7 - 0x00000004
	v56 = d0
	Mem0[a7:word32] = v56
	CVZN = cond(v56)
	a5 = d0
	v57 = d3
	Mem0[a5:word32] = v57
	CVZN = cond(v57)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	v58 = d4
	Mem0[a5 + 12:word32] = v58
	CVZN = cond(v58)
	a0 = a5 + 16
	a0 = a0 + d5
	v59 = a0
	Mem0[a5 + 8:word32] = v59
	CVZN = cond(v59)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	// succ:  l000010B6 l00001190
l000010B6:
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 16:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a1 = Mem0[a5 + 8:word32]
	a6 = a5 + 16
	a0 = d0
	d0 = 0
	CVZN = cond(d0)
	v32 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	Mem0[a0 + d0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v33 = a0
	Mem0[a6:word32] = v33
	a6 = a6 + 0x00000004
	CVZN = cond(v33)
	d3 = 1
	CVZN = cond(d3)
	a0 = a2 + d2
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 16:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a1 = Mem0[a5 + 8:word32]
	a6 = a5 + 16
	a0 = d0
	d0 = 0
	CVZN = cond(d0)
	v60 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v60, 0)
	CVZN = cond(v60)
	Mem0[a0 + d0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v61 = a0
	Mem0[a6:word32] = v61
	a6 = a6 + 0x00000004
	CVZN = cond(v61)
	d3 = 1
	CVZN = cond(d3)
	a0 = a2 + d2
	// succ:  l000010DA
l000010DA:
	a0 = a0 - 0x00000001
	v34 = Mem0[a0:byte] - 0x20
	CVZN = cond(v34)
	branch d2 != 0xFFFFFFFF l000010DA
	// succ:  l000010E2 l000010DA
l000010E2:
	d2 = d2 - 0x00000001
	Mem0[a0 + 1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000010E6
l000010E6:
	v37 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	branch Test(EQ,Z) l00001148
	// succ:  l000010EA l00001148
l000010EA:
	v38 = (byte) d1 - 0x20
	CVZN = cond(v38)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F0 l000010E6
l000010F0:
	v39 = (byte) d1 - 0x09
	CVZN = cond(v39)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F6 l000010E6
l000010F6:
	v40 = d3 - Mem0[a5 + 12:word32]
	CVZN = cond(v40)
	branch Test(EQ,Z) l00001148
	// succ:  l000010FC l00001148
l000010FC:
	v41 = a1
	Mem0[a6:word32] = v41
	a6 = a6 + 0x00000004
	CVZN = cond(v41)
	v42 = (word16) d3 + 0x0001
	d3 = DPB(d3, v42, 0)
	CVZNX = cond(v42)
	v43 = (byte) d1 - 0x22
	CVZN = cond(v43)
	branch Test(EQ,Z) l0000111A
	// succ:  l00001106 l0000111A
l00001106:
	v44 = (byte) d1
	Mem0[a1:byte] = v44
	a1 = a1 + 0x00000001
	CVZN = cond(v44)
	// succ:  l00001108
l00001108:
	v45 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v45, 0)
	CVZN = cond(v45)
	branch Test(EQ,Z) l00001148
	// succ:  l0000110C l00001148
l0000110C:
	v46 = (byte) d1 - 0x20
	CVZN = cond(v46)
	branch Test(EQ,Z) l00001116
	// succ:  l00001112 l00001116
l00001112:
	v47 = (byte) d1
	Mem0[a1:byte] = v47
	a1 = a1 + 0x00000001
	CVZN = cond(v47)
	goto l00001108
	// succ:  l00001108
l00001116:
	Mem0[a1:byte] = 0x00
	a1 = a1 + 0x00000001
	Z = true
	C = false
	N = false
	V = false
	goto l000010E6
	// succ:  l000010E6
l0000111A:
	v70 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v70, 0)
	CVZN = cond(v70)
	branch Test(EQ,Z) l00001148
	// succ:  l0000111E l00001148
l0000111E:
	v71 = (byte) d1 - 0x22
	CVZN = cond(v71)
	branch Test(EQ,Z) l00001116
	// succ:  l00001124 l00001116
l00001124:
	v72 = (byte) d1 - 0x2A
	CVZN = cond(v72)
	branch Test(NE,Z) l00001144
	// succ:  l0000112A l00001144
l0000112A:
	v73 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v73, 0)
	CVZN = cond(v73)
	v74 = (byte) d1
	d2 = DPB(d2, v74, 0)
	CVZN = cond(v74)
	v75 = (byte) d2 & 0xDF
	d2 = DPB(d2, v75, 0)
	ZN = cond(v75)
	C = false
	V = false
	v76 = (byte) d2 - 0x4E
	CVZN = cond(v76)
	branch Test(NE,Z) l0000113C
	// succ:  l00001138 l0000113C
l00001138:
	d1 = 10
	CVZN = cond(d1)
	goto l00001144
	// succ:  l00001144
l0000113C:
	v79 = (byte) d2 - 0x45
	CVZN = cond(v79)
	branch Test(NE,Z) l00001144
	// succ:  l00001142 l00001144
l00001142:
	d1 = 27
	CVZN = cond(d1)
	// succ:  l00001144
l00001144:
	v80 = (byte) d1
	Mem0[a1:byte] = v80
	a1 = a1 + 0x00000001
	CVZN = cond(v80)
	goto l0000111A
	// succ:  l0000111A
l00001148:
	Mem0[a1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	Mem0[a6:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + 16
	a7 = a7 - 0x00000004
	v83 = d3
	Mem0[a7:word32] = v83
	CVZN = cond(v83)
	a6 = Mem0[a4 + -32750:word32]
	execPrivate4()
	v84 = d0
	Mem0[a4 + -32738:word32] = v84
	CVZN = cond(v84)
	execPrivate5()
	v85 = d0
	Mem0[a4 + -32734:word32] = v85
	CVZN = cond(v85)
	a6 = Mem0[a4 + -32754:word32]
	v86 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v86)
	branch Test(ULT,C) l0000117A
	// succ:  l00001172 l0000117A
l00001172:
	v87 = Mem0[a3 + 224:word32]
	Mem0[a4 + -32730:word32] = v87
	CVZN = cond(v87)
	branch Test(NE,Z) l0000117E
	// succ:  l0000117A l0000117E
l0000117A:
	v88 = d0
	Mem0[a4 + -32730:word32] = v88
	CVZN = cond(v88)
	// succ:  l0000117E
l0000117E:
	v89 = Mem0[a3 + 8:byte] - 0x0D
	CVZN = cond(v89)
	branch Test(NE,Z) l000011F8
	// succ:  l00001186 l000011F8
l00001186:
	a0 = Mem0[a3 + 176:word32]
	v90 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	d0 = v90
	CVZN = cond(d0)
	a0 = a0 - d0
	CVZNX = cond(a0)
	goto l00001202
	// succ:  l00001202
l00001190:
	call fn00001214 (retsize: 4;)
	v50 = d0
	Mem0[a7:word32] = v50
	CVZN = cond(v50)
	v51 = d0
	Mem0[a4 + -32746:word32] = v51
	CVZN = cond(v51)
	v52 = d0
	Mem0[a4 + -32742:word32] = v52
	CVZN = cond(v52)
	a7 = a7 - 0x00000004
	v53 = d0
	Mem0[a7:word32] = v53
	CVZN = cond(v53)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a6 = Mem0[a4 + -32750:word32]
	a2 = d0
	d0 = Mem0[a2 + 36:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011B6
	// succ:  l000011AE l000011B6
l000011AE:
	a0 = d0
	d1 = Mem0[a0:word32]
	CVZN = cond(d1)
	Enable()
	// succ:  l000011B6
l000011B6:
	a0 = 0x000012C8
	d1 = a0
	CVZN = cond(d1)
	d2 = 0x000003ED
	CVZN = cond(d2)
	Supervisor(a5)
	v54 = d0
	Mem0[a5 + 4:word32] = v54
	CVZN = cond(v54)
	branch Test(NE,Z) l000011D2
	// succ:  l000011CC l000011D2
l000011CC:
	d2 = 20
	CVZN = cond(d2)
	// succ:  l000011CC_thunk_fn0000127C
l000011CC_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l000011D2:
	v64 = d0
	Mem0[a4 + -32738:word32] = v64
	CVZN = cond(v64)
	v65 = d0
	Mem0[a4 + -32734:word32] = v65
	CVZN = cond(v65)
	v66 = d0
	Mem0[a4 + -32730:word32] = v66
	CVZN = cond(v66)
	v67 = d0
	Mem0[a3 + 156:word32] = v67
	CVZN = cond(v67)
	v68 = d0
	Mem0[a3 + 160:word32] = v68
	CVZN = cond(v68)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 8:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011F4
	// succ:  l000011F0 l000011F4
l000011F0:
	v69 = d0
	Mem0[a3 + 164:word32] = v69
	CVZN = cond(v69)
	// succ:  l000011F4
l000011F4:
	a6 = Mem0[a4 + -32754:word32]
	// succ:  l000011F8
l000011F8:
	d0 = Mem0[a3 + 62:word32]
	CVZN = cond(d0)
	a0 = Mem0[a3 + 58:word32]
	d0 = d0 - a0
	CVZNX = cond(d0)
	// succ:  l00001202
l00001202:
	v77 = a0
	Mem0[a4 + -32718:word32] = v77
	CVZN = cond(v77)
	v78 = a7
	Mem0[a4 + -32714:word32] = v78
	CVZN = cond(v78)
	call fn00001354 (retsize: 4;)
	d2 = 0
	CVZN = cond(d2)
	// succ:  l00001212_thunk_fn0000127C
l00001212_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l00001226:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = 0x00038007
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	goto l0000125C
	// succ:  l0000125C
l0000123E:
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = 0x00010000
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	// succ:  l0000125C
l0000125C:
	ZN = cond(Mem0[a3 + 172:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001268
	// succ:  l00001262 l00001268
l00001262:
	call fn00001214 (retsize: 4;)
	a2 = d0
	call fn0000126C (retsize: 4;)
	// succ:  l00001268
l00001268:
	d0 = 20
	CVZN = cond(d0)
	return
	// succ:  fn00001000_exit
fn00001000_exit:


// fn00001214
// Return size: 4
void fn00001214()
fn00001214_entry:
	// succ:  l00001214
l00001214:
	a7 = fp
	a0 = a3 + 92
	WaitPort(a0)
	a0 = a3 + 92
	GetMsg(a0)
	return
	// succ:  fn00001214_exit
fn00001214_exit:


// fn0000126C
// Return size: 4
void fn0000126C()
fn0000126C_entry:
	// succ:  l0000126C
l0000126C:
	a7 = fp
	Forbid()
	a1 = a2
	ReplyMsg(a1)
	return
	// succ:  fn0000126C_exit
fn0000126C_exit:


// fn00001278
// Return size: 0
void fn00001278()
fn00001278_entry:
	// succ:  l00001278
l00001278:
	a7 = fp
	d2 = Mem0[a7 + 4:word32]
	CVZN = cond(d2)
	// succ:  l00001278_thunk_fn0000127C
l00001278_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001278_exit
fn00001278_exit:


// fn0000127C
// Return size: 4
void fn0000127C()
fn0000127C_entry:
	// succ:  l0000127C
l0000127C:
	a4 = 0x0000BE66
	a6 = Mem0[a4 + -32754:word32]
	a7 = Mem0[a4 + -32758:word32]
	a7 = a7 - 0x00000008
	v5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v5
	v7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = v7
	d1 = Mem0[a5 + 4:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l0000129E
	// succ:  l00001296 l0000129E
l00001296:
	a6 = Mem0[a4 + -32750:word32]
	execPrivate1()
	// succ:  l0000129E
l0000129E:
	a6 = Mem0[a4 + -32754:word32]
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l000012B0
	// succ:  l000012AE l000012B0
l000012AE:
	call fn0000126C (retsize: 4;)
	// succ:  l000012B0
l000012B0:
	a1 = a5
	d0 = Mem0[a5:word32]
	CVZN = cond(d0)
	FreeMem(a1, d0)
	d0 = d2
	CVZN = cond(d0)
	return
	// succ:  fn0000127C_exit
fn0000127C_exit:


// fn000012D0
// Return size: 4
void fn000012D0()
fn000012D0_entry:
	// succ:  l000012D0
l000012D0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = 0x00003FB8
	d0 = 0x00003FB8
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001308
	// succ:  l000012E2 l00001308
l000012E2:
	d2 = 1
	CVZN = cond(d2)
	ZN = cond(Mem0[a3 + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000012F6
	// succ:  l000012EA l000012F6
l000012EA:
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	ZN = cond(Mem0[a3 + d0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000012EA
	// succ:  l000012F6 l000012EA
l000012F6:
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(EQ,Z) l00001308
	// succ:  l000012FA l00001308
l000012FA:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a2 = Mem0[a3 + d0:word32]
l00001308:
	v13 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn00001278 (retsize: 4;)
	a7 = a7 + 0x0004
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000012D0_exit
fn000012D0_exit:


// fn0000131C
// Return size: 4
void fn0000131C()
fn0000131C_entry:
	// succ:  l0000131C
l0000131C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	ZN = cond(Mem0[0x00003EA0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000134E
	// succ:  l00001328 l0000134E
l00001328:
	a3 = Mem0[0x00003FC8:word32]
	d0 = 1
	CVZN = cond(d0)
	v11 = d0
	Mem0[0x00003EA0:word32] = v11
	CVZN = cond(v11)
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001346
	// succ:  l0000133A l00001346
l0000133A:
	a2 = Mem0[a3 + 4:word32]
l00001346:
	v12 = Mem0[a7 + 12:word32]
	a7 = a7 - 0x00000004
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn000012D0 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l0000134E
l0000134E:
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000131C_exit
fn0000131C_exit:


// fn00001354
// Return size: 4
void fn00001354()
fn00001354_entry:
	// succ:  l00001354
l00001354:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a3 = 0x00003FB0
	d0 = 0x00003FAC
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001372
	// succ:  l00001366 l00001372
l00001366:
	ZN = cond(Mem0[a3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001372
	// succ:  l0000136A l00001372
l0000136A:
	v11 = Mem0[a3:word32]
	a3 = a3 + 0x00000004
	a2 = v11
l00001372:
	v12 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	v14 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn000013D8 (retsize: 4;)
	a7 = a7 - 0x00000004
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	call fn0000131C (retsize: 4;)
	a7 = a7 + 12
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001354_exit
fn00001354_exit:


// fn00001390
// Return size: 4
void fn00001390()
fn00001390_entry:
	// succ:  l00001390
l00001390:
	a7 = fp
	return
	// succ:  fn00001390_exit
fn00001390_exit:


// fn00001394
// Return size: 4
void fn00001394()
fn00001394_entry:
	// succ:  l00001394
l00001394:
	a7 = fp
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	call fn00001390 (retsize: 4;)
	return
	// succ:  fn00001394_exit
fn00001394_exit:


// fn000013AC
// Return size: 4
void fn000013AC()
fn000013AC_entry:
	// succ:  l000013AC
l000013AC:
	a7 = fp
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	call fn00001394 (retsize: 4;)
	return
	// succ:  fn000013AC_exit
fn000013AC_exit:


// fn000013C4
// Return size: 4
void fn000013C4()
fn000013C4_entry:
	// succ:  l000013C4
l000013C4:
	a7 = fp
	call fn000013AC (retsize: 4;)
	call fn000013AC (retsize: 4;)
	call fn000013AC (retsize: 4;)
	call fn000013AC (retsize: 4;)
	call fn000013AC (retsize: 4;)
	call fn000013AC (retsize: 4;)
	call fn000013AC (retsize: 4;)
	call fn000013AC (retsize: 4;)
	call fn000013AC (retsize: 4;)
	return
	// succ:  fn000013C4_exit
fn000013C4_exit:


// fn000013D8
// Return size: 4
void fn000013D8()
fn000013D8_entry:
	// succ:  l000013D8
l000013D8:
	a7 = fp
	a7 = a7 - 0x0008
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000142C
	call fn00003DE0 (retsize: 4;)
	a0 = a7 + 12
	a7 = a7 - 0x00000004
	v5 = a0
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00001448
	call fn00002BB8 (retsize: 4;)
	v7 = Mem0[a7 + 20:word32]
	a7 = a7 - 0x00000004
	v8 = v7
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000144C
	call fn00001474 (retsize: 4;)
	d2 = 1
	CVZN = cond(d2)
	a7 = a7 + 20
	goto l00001412
	// succ:  l00001412
l0000140E:
	call fn000013C4 (retsize: 4;)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	// succ:  l00001412
l00001412:
	v9 = d2 - Mem0[a7 + 8:word32]
	CVZN = cond(v9)
	branch Test(LE,VZN) l0000140E
	// succ:  l00001418 l0000140E
l00001418:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00001468
	call fn00003DE0 (retsize: 4;)
	a7 = a7 + 0x0004
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a7 + 0x0008
	return
	// succ:  fn000013D8_exit
fn000013D8_exit:


// fn00001474
// Return size: 4
void fn00001474()
fn00001474_entry:
	// succ:  l00001474
l00001474:
	a7 = fp
	a0 = a7 + 8
	a7 = a7 - 0x00000004
	v4 = a0
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	v6 = Mem0[a7 + 8:word32]
	a7 = a7 - 0x00000004
	v7 = v6
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	v8 = Mem0[0x00003FD0:word32]
	a7 = a7 - 0x00000004
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn00001490 (retsize: 4;)
	a7 = a7 + 12
	return
	// succ:  fn00001474_exit
fn00001474_exit:


// fn00001490
// Return size: 4
void fn00001490()
fn00001490_entry:
	// succ:  l00001490
l00001490:
	a7 = fp
	a7 = a7 + -68
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d3 = Mem0[a7 + 124:word32]
	CVZN = cond(d3)
	a5 = Mem0[a7 + 116:word32]
	a4 = Mem0[a7 + 120:word32]
	d6 = 0
	CVZN = cond(d6)
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001DD6
	// succ:  l000014AC l00001DD6
l000014AC:
	v19 = Mem0[a4:byte] - 0x25
	CVZN = cond(v19)
	branch Test(NE,Z) l00001DB0
	// succ:  l000014B4 l00001DB0
l000014B4:
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d5 = -1
	CVZN = cond(d5)
	Mem0[a7 + 72:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d4 = 105
	CVZN = cond(d4)
	a3 = a7 + 76
	d7 = 0
	CVZN = cond(d7)
	Mem0[a7 + 102:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a2 = a4 + 1
	d2 = Mem0[a7 + 72:word32]
	CVZN = cond(d2)
	// succ:  l000014D2
l000014D2:
	d1 = 0
	CVZN = cond(d1)
	// succ:  l000014D4
l000014D4:
	a0 = 0x00001DE8
	a7 = a7 - 0x00000004
	v27 = d0
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	v28 = Mem0[a0 + d1:byte]
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	v29 = (byte) d0 - Mem0[a2:byte]
	CVZN = cond(v29)
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(NE,Z) l000014F8
	// succ:  l000014E6 l000014F8
l000014E6:
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v30 = d1
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	v32 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v32
	CVZN = cond(d1)
	d2 = d2 | d0
	ZN = cond(d2)
	C = false
	V = false
	a2 = a2 + 0x00000001
	goto l00001502
	// succ:  l00001502
l000014F8:
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v40 = d1 - 0x00000005
	CVZN = cond(v40)
	branch Test(ULT,C) l000014D4
	// succ:  l00001502 l000014D4
l00001502:
	v33 = d1 - 0x00000005
	CVZN = cond(v33)
	branch Test(ULT,C) l000014D2
	v41 = d1 - 0x00000005
	CVZN = cond(v41)
	branch Test(ULT,C) l000014D2
	// succ:  l0000150A l000014D2
l0000150A:
	v34 = d2
	Mem0[a7 + 72:word32] = v34
	CVZN = cond(v34)
	v35 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v35)
	branch Test(NE,Z) l00001548
	v42 = d2
	Mem0[a7 + 72:word32] = v42
	CVZN = cond(v42)
	v43 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v43)
	branch Test(NE,Z) l00001548
	// succ:  l00001514 l00001548
l00001514:
	a2 = a2 + 0x00000001
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v36 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v36
	CVZN = cond(v36)
	branch Test(GE,VN) l00001540
	a2 = a2 + 0x00000001
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v44 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v44
	CVZN = cond(v44)
	branch Test(GE,VN) l00001540
	// succ:  l0000152C l00001540
l0000152C:
	v38 = Mem0[a7 + 72:word32] | 0x00000004
	Mem0[a7 + 72:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	d0 = Mem0[a7 + 44:word32]
	CVZN = cond(d0)
	d0 = -d0
	CVZNX = cond(d0)
	v39 = d0
	Mem0[a7 + 64:word32] = v39
	CVZN = cond(v39)
	v45 = Mem0[a7 + 72:word32] | 0x00000004
	Mem0[a7 + 72:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	d0 = Mem0[a7 + 44:word32]
	CVZN = cond(d0)
	d0 = -d0
	CVZNX = cond(d0)
	v46 = d0
	Mem0[a7 + 64:word32] = v46
	CVZN = cond(v46)
	goto l000015B4
	// succ:  l000015B4
l00001540:
	v47 = Mem0[a7 + 44:word32]
	Mem0[a7 + 64:word32] = v47
	CVZN = cond(v47)
	goto l000015B4
	// succ:  l000015B4
l00001548:
	v69 = Mem0[a2:byte]
	d0 = DPB(d0, v69, 0)
	CVZN = cond(v69)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v70 = Mem0[a0:byte]
	d0 = DPB(d0, v70, 0)
	CVZN = cond(v70)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000015B4
	// succ:  l00001564 l000015B4
l00001564:
	d2 = Mem0[a7 + 64:word32]
	CVZN = cond(d2)
	// succ:  l00001568
l00001568:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v71 = d3
	Mem0[a7:word32] = v71
	CVZN = cond(v71)
	d1 = d0
	CVZN = cond(d1)
	d3 = d2
	CVZN = cond(d3)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d1 = d1 *u (word16) d2
	VZN = cond(d1)
	C = false
	d3 = d3 *u (word16) d0
	VZN = cond(d3)
	C = false
	d0 = d0 *u (word16) d2
	VZN = cond(d0)
	C = false
	v72 = (word16) d1 + (word16) d3
	d1 = DPB(d1, v72, 0)
	CVZNX = cond(v72)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v74 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = v74
	CVZN = cond(d3)
	v75 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v75, 0)
	CVZN = cond(v75)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + d0
	CVZNX = cond(d2)
	v76 = Mem0[a2:byte]
	d0 = DPB(d0, v76, 0)
	CVZN = cond(v76)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v77 = Mem0[a0:byte]
	d0 = DPB(d0, v77, 0)
	CVZN = cond(v77)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001568
	// succ:  l000015B0 l00001568
l000015B0:
	v78 = d2
	Mem0[a7 + 64:word32] = v78
	CVZN = cond(v78)
	// succ:  l000015B4
l000015B4:
	v48 = Mem0[a2:byte] - 0x2E
	CVZN = cond(v48)
	branch Test(NE,Z) l00001648
	// succ:  l000015BC l00001648
l000015BC:
	a2 = a2 + 0x00000001
	v49 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v49)
	branch Test(NE,Z) l000015E2
	// succ:  l000015C4 l000015E2
l000015C4:
	a2 = a2 + 0x00000001
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v50 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v50
	CVZN = cond(v50)
	branch Test(LT,CZ) l00001648
	// succ:  l000015DC l00001648
l000015DC:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	goto l00001648
	// succ:  l00001648
l000015E2:
	d5 = 0
	CVZN = cond(d5)
	v52 = Mem0[a2:byte]
	d0 = DPB(d0, v52, 0)
	CVZN = cond(v52)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v53 = Mem0[a0:byte]
	d0 = DPB(d0, v53, 0)
	CVZN = cond(v53)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001648
	// succ:  l00001600 l00001648
l00001600:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v54 = d2
	Mem0[a7:word32] = v54
	CVZN = cond(v54)
	d1 = d0
	CVZN = cond(d1)
	d2 = d5
	CVZN = cond(d2)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d1 = d1 *u (word16) d5
	VZN = cond(d1)
	C = false
	d2 = d2 *u (word16) d0
	VZN = cond(d2)
	C = false
	d0 = d0 *u (word16) d5
	VZN = cond(d0)
	C = false
	v56 = (word16) d1 + (word16) d2
	d1 = DPB(d1, v56, 0)
	CVZNX = cond(v56)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v58 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v58
	CVZN = cond(d2)
	v59 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v59, 0)
	CVZN = cond(v59)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d5 = d1
	CVZN = cond(d5)
	d5 = d5 + d0
	CVZNX = cond(d5)
	v60 = Mem0[a2:byte]
	d0 = DPB(d0, v60, 0)
	CVZN = cond(v60)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v61 = Mem0[a0:byte]
	d0 = DPB(d0, v61, 0)
	CVZN = cond(v61)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001600
	// succ:  l00001648 l00001600
l00001648:
	v62 = Mem0[a2:byte] - 0x68
	CVZN = cond(v62)
	branch Test(EQ,Z) l0000166C
	// succ:  l0000164E l0000166C
l0000164E:
	v63 = Mem0[a2:byte] - 0x6C
	CVZN = cond(v63)
	branch Test(EQ,Z) l0000166C
	// succ:  l00001654 l0000166C
l00001654:
	v64 = Mem0[a2:byte] - 0x4C
	CVZN = cond(v64)
	branch Test(EQ,Z) l0000166C
	// succ:  l0000165A l0000166C
l0000165A:
	v65 = Mem0[a2:byte] - 0x6A
	CVZN = cond(v65)
	branch Test(EQ,Z) l0000166C
	// succ:  l00001660 l0000166C
l00001660:
	v66 = Mem0[a2:byte] - 0x7A
	CVZN = cond(v66)
	branch Test(EQ,Z) l0000166C
	// succ:  l00001666 l0000166C
l00001666:
	v67 = Mem0[a2:byte] - 0x74
	CVZN = cond(v67)
	branch Test(NE,Z) l00001672
	// succ:  l0000166C l00001672
l0000166C:
	v68 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d4 = DPB(d4, v68, 0)
	CVZN = cond(v68)
	d4 = (int16) (int8) d4
	ZN = cond(d4)
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	// succ:  l00001672
l00001672:
	v79 = d4 - 0x00000068
	CVZN = cond(v79)
	branch Test(NE,Z) l00001684
	// succ:  l0000167A l00001684
l0000167A:
	v80 = Mem0[a2:byte] - 0x68
	CVZN = cond(v80)
	branch Test(NE,Z) l00001684
	// succ:  l00001680 l00001684
l00001680:
	d4 = 2
	CVZN = cond(d4)
	a2 = a2 + 0x00000001
	// succ:  l00001684
l00001684:
	v81 = d4 - 0x0000006C
	CVZN = cond(v81)
	branch Test(NE,Z) l00001696
	// succ:  l0000168C l00001696
l0000168C:
	v82 = Mem0[a2:byte] - 0x6C
	CVZN = cond(v82)
	branch Test(NE,Z) l00001696
	// succ:  l00001692 l00001696
l00001692:
	d4 = 1
	CVZN = cond(d4)
	a2 = a2 + 0x00000001
	// succ:  l00001696
l00001696:
	v83 = d4 - 0x0000006A
	CVZN = cond(v83)
	branch Test(NE,Z) l000016A0
	// succ:  l0000169E l000016A0
l0000169E:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l000016A0
l000016A0:
	v84 = d4 - 0x0000007A
	CVZN = cond(v84)
	branch Test(NE,Z) l000016AA
	// succ:  l000016A8 l000016AA
l000016A8:
	d4 = 108
	CVZN = cond(d4)
	// succ:  l000016AA
l000016AA:
	v89 = d4 - 0x00000074
	CVZN = cond(v89)
	branch Test(NE,Z) l000016B4
	// succ:  l000016B2 l000016B4
l000016B2:
	d4 = 105
	CVZN = cond(d4)
	// succ:  l000016B4
l000016B4:
	v90 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v90, 0)
	CVZN = cond(v90)
	v91 = (byte) d1
	d0 = DPB(d0, v91, 0)
	CVZN = cond(v91)
	v92 = (byte) d1 - 0x25
	CVZN = cond(v92)
	branch Test(EQ,Z) l00001B3C
	// succ:  l000016C0 l00001B3C
l000016C0:
	v93 = (byte) d0 - 0x58
	CVZN = cond(v93)
	branch Test(EQ,Z) l0000170E
	// succ:  l000016C6 l0000170E
l000016C6:
	v94 = (byte) d0 - 0x63
	CVZN = cond(v94)
	branch Test(EQ,Z) l00001ABC
	// succ:  l000016CE l00001ABC
l000016CE:
	v95 = (byte) d0 - 0x64
	CVZN = cond(v95)
	branch Test(EQ,Z) l0000170E
	// succ:  l000016D4 l0000170E
l000016D4:
	v96 = (byte) d0 - 0x69
	CVZN = cond(v96)
	branch Test(EQ,Z) l0000170E
	// succ:  l000016DA l0000170E
l000016DA:
	v97 = (byte) d0
	Mem0[a7 + 44:byte] = v97
	CVZN = cond(v97)
	v98 = (byte) d0 - 0x6E
	CVZN = cond(v98)
	branch Test(EQ,Z) l00001B4E
	// succ:  l000016E6 l00001B4E
l000016E6:
	v99 = Mem0[a7 + 44:byte]
	d0 = DPB(d0, v99, 0)
	CVZN = cond(v99)
	v100 = (byte) d0 - 0x6F
	d0 = DPB(d0, v100, 0)
	CVZNX = cond(v100)
	v101 = (byte) d0 - 0x01
	CVZN = cond(v101)
	branch Test(ULE,VZ) l0000170E
	// succ:  l000016F4 l0000170E
l000016F4:
	v103 = Mem0[a7 + 44:byte]
	d0 = DPB(d0, v103, 0)
	CVZN = cond(v103)
	v104 = (byte) d0 - 0x73
	CVZN = cond(v104)
	branch Test(EQ,Z) l00001AF8
	// succ:  l00001700 l00001AF8
l00001700:
	v105 = (byte) d0 - 0x75
	CVZN = cond(v105)
	branch Test(EQ,Z) l0000170E
	// succ:  l00001706 l0000170E
l00001706:
	v106 = (byte) d0 - 0x78
	CVZN = cond(v106)
	branch Test(NE,Z) l00001BE6
	// succ:  l0000170E l00001BE6
l0000170E:
	v107 = (byte) d1 - 0x70
	CVZN = cond(v107)
	branch Test(NE,Z) l00001720
	// succ:  l00001714 l00001720
l00001714:
	d4 = 108
	CVZN = cond(d4)
	d1 = 120
	CVZN = cond(d1)
	v108 = Mem0[a7 + 72:word32] | 0x00000001
	Mem0[a7 + 72:word32] = v108
	ZN = cond(v108)
	C = false
	V = false
	// succ:  l00001720
l00001720:
	v109 = (byte) d1 - 0x64
	CVZN = cond(v109)
	branch Test(EQ,Z) l0000172E
	// succ:  l00001726 l0000172E
l00001726:
	v110 = (byte) d1 - 0x69
	CVZN = cond(v110)
	branch Test(NE,Z) l00001878
	// succ:  l0000172E l00001878
l0000172E:
	v111 = d4 - 0x00000001
	CVZN = cond(v111)
	branch Test(NE,Z) l00001754
	// succ:  l00001736 l00001754
l00001736:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000008
	CVZNX = cond(d3)
	a0 = d3
	v112 = Mem0[a0 + -4:word32]
	Mem0[a7 + 52:word32] = v112
	CVZN = cond(v112)
	v113 = Mem0[a0 + -8:word32]
	Mem0[a7 + 48:word32] = v113
	CVZN = cond(v113)
	goto l000017EC
	// succ:  l000017EC
l00001754:
	v119 = d4 - 0x0000006C
	CVZN = cond(v119)
	branch Test(NE,Z) l00001780
	// succ:  l0000175C l00001780
l0000175C:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	d0 = Mem0[a0 + -4:word32]
	CVZN = cond(d0)
	v120 = d0
	Mem0[a7 + 52:word32] = v120
	CVZN = cond(v120)
	a7 = a7 - 0x00000004
	v121 = d1
	Mem0[a7:word32] = v121
	CVZN = cond(v121)
	d1 = 31
	CVZN = cond(d1)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v122 = d0
	Mem0[a7 + 52:word32] = v122
	CVZN = cond(v122)
	v123 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v123
	CVZN = cond(d1)
	goto l000017EC
	// succ:  l000017EC
l00001780:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	d0 = Mem0[a0 + -4:word32]
	CVZN = cond(d0)
	v210 = d0
	Mem0[a7 + 52:word32] = v210
	CVZN = cond(v210)
	a7 = a7 - 0x00000004
	v211 = d1
	Mem0[a7:word32] = v211
	CVZN = cond(v211)
	d1 = 31
	CVZN = cond(d1)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v212 = d0
	Mem0[a7 + 52:word32] = v212
	CVZN = cond(v212)
	v213 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v213
	CVZN = cond(d1)
	v214 = d4 - 0x00000068
	CVZN = cond(v214)
	branch Test(NE,Z) l000017C6
	// succ:  l000017AA l000017C6
l000017AA:
	v215 = Mem0[a7 + 54:word16]
	d0 = DPB(d0, v215, 0)
	CVZN = cond(v215)
	a7 = a7 - 0x00000004
	v216 = d1
	Mem0[a7:word32] = v216
	CVZN = cond(v216)
	v217 = (word16) d0
	d1 = DPB(d1, v217, 0)
	CVZN = cond(v217)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	v218 = d1
	Mem0[a7 + 56:word32] = v218
	CVZN = cond(v218)
	a7 = a7 - 0x00000004
	v219 = d0
	Mem0[a7:word32] = v219
	CVZN = cond(v219)
	d0 = 31
	CVZN = cond(d0)
	d1 = d1 >> d0
	CVZNX = cond(d1)
	v220 = d1
	Mem0[a7 + 56:word32] = v220
	CVZN = cond(v220)
	v221 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v221
	CVZN = cond(d1)
	v222 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v222
	CVZN = cond(d0)
	// succ:  l000017C6
l000017C6:
	v223 = d4 - 0x00000002
	CVZN = cond(v223)
	branch Test(NE,Z) l000017EC
	// succ:  l000017CE l000017EC
l000017CE:
	v224 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v224, 0)
	CVZN = cond(v224)
	a7 = a7 - 0x00000004
	v225 = d1
	Mem0[a7:word32] = v225
	CVZN = cond(v225)
	v226 = (byte) d0
	d1 = DPB(d1, v226, 0)
	CVZN = cond(v226)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	v227 = d1
	Mem0[a7 + 56:word32] = v227
	CVZN = cond(v227)
	a7 = a7 - 0x00000004
	v228 = d0
	Mem0[a7:word32] = v228
	CVZN = cond(v228)
	d0 = 31
	CVZN = cond(d0)
	d1 = d1 >> d0
	CVZNX = cond(d1)
	v229 = d1
	Mem0[a7 + 56:word32] = v229
	CVZN = cond(v229)
	v230 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v230
	CVZN = cond(d1)
	v231 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v231
	CVZN = cond(d0)
	// succ:  l000017EC
l000017EC:
	v124 = (byte) d1
	Mem0[a7 + 44:byte] = v124
	CVZN = cond(v124)
	a7 = a7 - 0x00000004
	v125 = d0
	Mem0[a7:word32] = v125
	CVZN = cond(v125)
	a7 = a7 - 0x00000004
	v126 = d1
	Mem0[a7:word32] = v126
	CVZN = cond(v126)
	d0 = Mem0[a7 + 60:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 56:word32]
	CVZN = cond(d1)
	a7 = a7 - 0x00000004
	v127 = d2
	Mem0[a7:word32] = v127
	CVZN = cond(v127)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(GE,VN) l00001836
	// succ:  l00001816 l00001836
l00001816:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v129 = 0x2D
	Mem0[a0:byte] = v129
	CVZN = cond(v129)
	v130 = a7 + 48
	d0 = Mem0[v130:word32]
	v130 = v130 + 0x00000004
	d1 = Mem0[v130:word32]
	v130 = v130 + 0x00000004
	d1 = -d1
	CVZNX = cond(d1)
	d0 = -d0 - X
	CVZNX = cond(d0)
	v131 = a7 + 56
	a6 = Mem0[v131:word32]
	v131 = v131 + 0x00000004
	a7 = Mem0[v131:word32]
	v131 = v131 + 0x00000004
	goto l000019AC
	// succ:  l000019AC
l00001836:
	v147 = Mem0[a7 + 44:byte]
	d1 = DPB(d1, v147, 0)
	CVZN = cond(v147)
	d0 = 16
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001850
	// succ:  l00001842 l00001850
l00001842:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v148 = 0x2B
	Mem0[a0:byte] = v148
	CVZN = cond(v148)
	goto l00001864
	// succ:  l00001864
l00001850:
	d0 = 8
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001864
	// succ:  l00001858 l00001864
l00001858:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v208 = 0x20
	Mem0[a0:byte] = v208
	CVZN = cond(v208)
	// succ:  l00001864
l00001864:
	v161 = Mem0[a7 + 52:word32]
	Mem0[a7 + 60:word32] = v161
	CVZN = cond(v161)
	v162 = Mem0[a7 + 48:word32]
	Mem0[a7 + 56:word32] = v162
	CVZN = cond(v162)
	v163 = (byte) d1
	Mem0[a7 + 44:byte] = v163
	CVZN = cond(v163)
	goto l000019AC
	// succ:  l000019AC
l00001878:
	v232 = d4 - 0x00000001
	CVZN = cond(v232)
	branch Test(NE,Z) l0000189C
	// succ:  l00001880 l0000189C
l00001880:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000008
	CVZNX = cond(d3)
	a0 = d3
	v233 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v233
	CVZN = cond(v233)
	v234 = Mem0[a0 + -8:word32]
	Mem0[a7 + 56:word32] = v234
	CVZN = cond(v234)
	goto l000018D6
	// succ:  l000018D6
l0000189C:
	v242 = d4 - 0x0000006C
	CVZN = cond(v242)
	branch Test(NE,Z) l000018BE
	// succ:  l000018A4 l000018BE
l000018A4:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v243 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v243
	CVZN = cond(v243)
	Mem0[a7 + 56:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l000018D6
	// succ:  l000018D6
l000018BE:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v264 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v264
	CVZN = cond(v264)
	Mem0[a7 + 56:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000018D6
l000018D6:
	v235 = d4 - 0x00000068
	CVZN = cond(v235)
	branch Test(NE,Z) l000018F2
	// succ:  l000018DE l000018F2
l000018DE:
	v236 = Mem0[a7 + 62:word16]
	d0 = DPB(d0, v236, 0)
	CVZN = cond(v236)
	a7 = a7 - 0x00000004
	v237 = d1
	Mem0[a7:word32] = v237
	CVZN = cond(v237)
	d1 = 0
	CVZN = cond(d1)
	v238 = (word16) d0
	d1 = DPB(d1, v238, 0)
	CVZN = cond(v238)
	v239 = d1
	Mem0[a7 + 64:word32] = v239
	CVZN = cond(v239)
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v241 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v241
	CVZN = cond(d1)
	// succ:  l000018F2
l000018F2:
	v248 = d4 - 0x00000002
	CVZN = cond(v248)
	branch Test(NE,Z) l0000190E
	// succ:  l000018FA l0000190E
l000018FA:
	v249 = Mem0[a7 + 63:byte]
	d0 = DPB(d0, v249, 0)
	CVZN = cond(v249)
	a7 = a7 - 0x00000004
	v250 = d1
	Mem0[a7:word32] = v250
	CVZN = cond(v250)
	d1 = 0
	CVZN = cond(d1)
	v251 = (byte) d0
	d1 = DPB(d1, v251, 0)
	CVZN = cond(v251)
	v252 = d1
	Mem0[a7 + 64:word32] = v252
	CVZN = cond(v252)
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v254 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v254
	CVZN = cond(d1)
	// succ:  l0000190E
l0000190E:
	d0 = 1
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	v258 = (byte) d1
	Mem0[a7 + 44:byte] = v258
	CVZN = cond(v258)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000019AC
	// succ:  l0000191E l000019AC
l0000191E:
	v259 = (byte) d1 - 0x6F
	CVZN = cond(v259)
	branch Test(NE,Z) l0000195A
	// succ:  l00001924 l0000195A
l00001924:
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000194E
	// succ:  l00001928 l0000194E
l00001928:
	a7 = a7 - 0x00000004
	v260 = d0
	Mem0[a7:word32] = v260
	CVZN = cond(v260)
	a7 = a7 - 0x00000004
	v261 = d1
	Mem0[a7:word32] = v261
	CVZN = cond(v261)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 64:word32]
	CVZN = cond(d1)
	a7 = a7 - 0x00000004
	v262 = d2
	Mem0[a7:word32] = v262
	CVZN = cond(v262)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(EQ,Z) l0000195A
	// succ:  l0000194E l0000195A
l0000194E:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v263 = 0x30
	Mem0[a0:byte] = v263
	CVZN = cond(v263)
	// succ:  l0000195A
l0000195A:
	v268 = (byte) d1 - 0x78
	CVZN = cond(v268)
	branch Test(EQ,Z) l0000196A
	// succ:  l00001960 l0000196A
l00001960:
	v269 = (byte) d1
	Mem0[a7 + 44:byte] = v269
	CVZN = cond(v269)
	v270 = (byte) d1 - 0x58
	CVZN = cond(v270)
	branch Test(NE,Z) l000019AC
	// succ:  l0000196A l000019AC
l0000196A:
	v271 = (byte) d1
	Mem0[a7 + 44:byte] = v271
	CVZN = cond(v271)
	a7 = a7 - 0x00000004
	v272 = d0
	Mem0[a7:word32] = v272
	CVZN = cond(v272)
	a7 = a7 - 0x00000004
	v273 = d1
	Mem0[a7:word32] = v273
	CVZN = cond(v273)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 64:word32]
	CVZN = cond(d1)
	a7 = a7 - 0x00000004
	v274 = d2
	Mem0[a7:word32] = v274
	CVZN = cond(v274)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(EQ,Z) l000019AC
	// succ:  l00001994 l000019AC
l00001994:
	a0 = a7 + 106
	a1 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v275 = 0x30
	Mem0[a1:byte] = v275
	CVZN = cond(v275)
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v276 = (byte) d1
	Mem0[a0:byte] = v276
	CVZN = cond(v276)
	v277 = (byte) d1
	Mem0[a7 + 44:byte] = v277
	CVZN = cond(v277)
	// succ:  l000019AC
l000019AC:
	v136 = Mem0[a7 + 44:byte]
	d1 = DPB(d1, v136, 0)
	CVZN = cond(v136)
	a3 = a7 + 98
	v137 = (byte) d1 - 0x78
	CVZN = cond(v137)
	branch Test(EQ,Z) l000019C0
	// succ:  l000019BA l000019C0
l000019BA:
	v138 = (byte) d1 - 0x58
	CVZN = cond(v138)
	branch Test(NE,Z) l000019CA
	// succ:  l000019C0 l000019CA
l000019C0:
	v139 = 0x00000010
	Mem0[a7 + 44:word32] = v139
	CVZN = cond(v139)
	goto l000019E8
	// succ:  l000019E8
l000019CA:
	v151 = (byte) d1 - 0x6F
	CVZN = cond(v151)
	branch Test(NE,Z) l000019DA
	// succ:  l000019D0 l000019DA
l000019D0:
	v152 = 0x00000008
	Mem0[a7 + 48:word32] = v152
	CVZN = cond(v152)
	goto l000019E2
	// succ:  l000019E2
l000019DA:
	v195 = 0x0000000A
	Mem0[a7 + 48:word32] = v195
	CVZN = cond(v195)
	// succ:  l000019E2
l000019E2:
	v182 = Mem0[a7 + 48:word32]
	Mem0[a7 + 44:word32] = v182
	CVZN = cond(v182)
	// succ:  l000019E8
l000019E8:
	v149 = Mem0[a7 + 44:word32]
	Mem0[a7 + 108:word32] = v149
	CVZN = cond(v149)
	v150 = (byte) d1 - 0x58
	CVZN = cond(v150)
	branch Test(EQ,Z) l000019FA
	// succ:  l000019F4 l000019FA
l000019F4:
	a6 = 0x00001DF0
	goto l000019FE
	// succ:  l000019FE
l000019FA:
	a6 = 0x00001E00
	// succ:  l000019FE
l000019FE:
	v164 = a6
	Mem0[a7 + 44:word32] = v164
	CVZN = cond(v164)
	v165 = d3
	Mem0[a7 + 124:word32] = v165
	CVZN = cond(v165)
	v166 = d5
	Mem0[a7 + 68:word32] = v166
	CVZN = cond(v166)
	v167 = d6
	Mem0[a7 + 48:word32] = v167
	CVZN = cond(v167)
	v168 = d7
	Mem0[a7 + 98:word32] = v168
	CVZN = cond(v168)
	v169 = a7 + 56
	d6 = Mem0[v169:word32]
	v169 = v169 + 0x00000004
	d7 = Mem0[v169:word32]
	v169 = v169 + 0x00000004
	d3 = Mem0[a7 + 102:word32]
	CVZN = cond(d3)
	a1 = Mem0[a7 + 44:word32]
	// succ:  l00001A20
l00001A20:
	d1 = Mem0[a7 + 108:word32]
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	a7 = a7 - 0x00000004
	v170 = d0
	Mem0[a7:word32] = v170
	CVZN = cond(v170)
	a7 = a7 - 0x00000004
	v171 = d1
	Mem0[a7:word32] = v171
	CVZN = cond(v171)
	a7 = a7 - 0x00000004
	v172 = a1
	Mem0[a7:word32] = v172
	CVZN = cond(v172)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	call fn00002778 (retsize: 4;)
	a7 = a7 + 16
	v173 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = v173
	d4 = d0
	CVZN = cond(d4)
	d5 = d1
	CVZN = cond(d5)
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = d5
	CVZN = cond(d2)
	v174 = Mem0[a1 + d2:byte]
	a3 = a3 - 0x00000001
	v175 = v174
	Mem0[a3:byte] = v175
	CVZN = cond(v175)
	a7 = a7 - 0x00000004
	v176 = d0
	Mem0[a7:word32] = v176
	CVZN = cond(v176)
	a7 = a7 - 0x00000004
	v177 = d1
	Mem0[a7:word32] = v177
	CVZN = cond(v177)
	a7 = a7 - 0x00000004
	v178 = a1
	Mem0[a7:word32] = v178
	CVZN = cond(v178)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	call fn00002430 (retsize: 4;)
	a7 = a7 + 16
	v179 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = v179
	d6 = d0
	CVZN = cond(d6)
	d7 = d1
	CVZN = cond(d7)
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d0 = d7
	CVZN = cond(d0)
	d1 = d6
	CVZN = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	branch Test(NE,Z) l00001A20
	// succ:  l00001A8E l00001A20
l00001A8E:
	v180 = d3
	Mem0[a7 + 102:word32] = v180
	CVZN = cond(v180)
	d7 = Mem0[a7 + 98:word32]
	CVZN = cond(d7)
	d6 = Mem0[a7 + 48:word32]
	CVZN = cond(d6)
	d5 = Mem0[a7 + 68:word32]
	CVZN = cond(d5)
	d3 = Mem0[a7 + 124:word32]
	CVZN = cond(d3)
	v181 = d5 - 0xFFFFFFFF
	CVZN = cond(v181)
	branch Test(NE,Z) l00001AB0
	// succ:  l00001AAA l00001AB0
l00001AAA:
	d5 = 0
	CVZN = cond(d5)
	goto l00001BFC
	// succ:  l00001BFC
l00001AB0:
	v185 = Mem0[a7 + 72:word32] & 0xFFFFFFFD
	Mem0[a7 + 72:word32] = v185
	ZN = cond(v185)
	C = false
	V = false
	goto l00001BFC
	// succ:  l00001BFC
l00001ABC:
	v281 = d4 - 0x0000006C
	CVZN = cond(v281)
	branch Test(NE,Z) l00001AD8
	// succ:  l00001AC4 l00001AD8
l00001AC4:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v282 = Mem0[a0 + -1:byte]
	Mem0[a3:byte] = v282
	CVZN = cond(v282)
	goto l00001AEA
	// succ:  l00001AEA
l00001AD8:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v283 = Mem0[a0 + -1:byte]
	Mem0[a3:byte] = v283
	CVZN = cond(v283)
	// succ:  l00001AEA
l00001AEA:
	v284 = 0x00000001
	Mem0[a7 + 102:word32] = v284
	CVZN = cond(v284)
	d5 = 0
	CVZN = cond(d5)
	goto l00001BFC
	// succ:  l00001BFC
l00001AF8:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a3 = Mem0[a0 + -4:word32]
	a1 = a3
	Mem0[a7 + 102:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001B1A
	// succ:  l00001B14 l00001B1A
l00001B14:
	v116 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v116)
	branch Test(ULE,VZ) l00001B36
	// succ:  l00001B1A l00001B36
l00001B1A:
	ZN = cond(Mem0[a1:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001B36
	// succ:  l00001B1E l00001B36
l00001B1E:
	d0 = Mem0[a7 + 102:word32]
	CVZN = cond(d0)
	// succ:  l00001B22
l00001B22:
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	a1 = a1 + 0x00000001
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(ULE,VZ) l00001B2E
	// succ:  l00001B2A l00001B2E
l00001B2A:
	v117 = d5 - d0
	CVZN = cond(v117)
	branch Test(ULE,VZ) l00001B32
	// succ:  l00001B2E l00001B32
l00001B2E:
	ZN = cond(Mem0[a1:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001B22
	// succ:  l00001B32 l00001B22
l00001B32:
	v118 = d0
	Mem0[a7 + 102:word32] = v118
	CVZN = cond(v118)
	// succ:  l00001B36
l00001B36:
	d5 = 0
	CVZN = cond(d5)
	goto l00001BFC
	// succ:  l00001BFC
l00001B3C:
	a3 = 0x00001DE4
	v285 = 0x00000001
	Mem0[a7 + 102:word32] = v285
	CVZN = cond(v285)
	d5 = 0
	CVZN = cond(d5)
	goto l00001BFC
	// succ:  l00001BFC
l00001B4E:
	v245 = d4 - 0x00000001
	CVZN = cond(v245)
	branch Test(NE,Z) l00001B70
	// succ:  l00001B56 l00001B70
l00001B56:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v246 = d6
	Mem0[a0 + 4:word32] = v246
	CVZN = cond(v246)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001BDE
	// succ:  l00001BDE
l00001B70:
	v256 = d4 - 0x0000006C
	CVZN = cond(v256)
	branch Test(NE,Z) l00001B8E
	// succ:  l00001B78 l00001B8E
l00001B78:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v257 = d6
	Mem0[a0:word32] = v257
	CVZN = cond(v257)
	goto l00001BDE
	// succ:  l00001BDE
l00001B8E:
	v266 = d4 - 0x00000068
	CVZN = cond(v266)
	branch Test(NE,Z) l00001BAC
	// succ:  l00001B96 l00001BAC
l00001B96:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v267 = (word16) d6
	Mem0[a0:word16] = v267
	CVZN = cond(v267)
	goto l00001BDE
	// succ:  l00001BDE
l00001BAC:
	v278 = d4 - 0x00000002
	CVZN = cond(v278)
	branch Test(NE,Z) l00001BCA
	// succ:  l00001BB4 l00001BCA
l00001BB4:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v279 = (byte) d6
	Mem0[a0:byte] = v279
	CVZN = cond(v279)
	goto l00001BDE
	// succ:  l00001BDE
l00001BCA:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v280 = d6
	Mem0[a0:word32] = v280
	CVZN = cond(v280)
	// succ:  l00001BDE
l00001BDE:
	d5 = 0
	CVZN = cond(d5)
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001BFC
	// succ:  l00001BFC
l00001BE6:
	ZN = cond((byte) d1 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001BEC
	// succ:  l00001BEA l00001BEC
l00001BEA:
	a2 = a2 - 0x00000001
	// succ:  l00001BEC
l00001BEC:
	a3 = a4
	d0 = a2
	CVZN = cond(d0)
	d0 = d0 - a4
	CVZNX = cond(d0)
	v132 = d0
	Mem0[a7 + 102:word32] = v132
	CVZN = cond(v132)
	d5 = 0
	CVZN = cond(d5)
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00001BFC
l00001BFC:
	v134 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v134)
	branch Test(UGT,CZ) l00001C0A
	// succ:  l00001C02 l00001C0A
l00001C02:
	v135 = Mem0[a7 + 102:word32]
	Mem0[a7 + 44:word32] = v135
	CVZN = cond(v135)
	goto l00001C0E
	// succ:  l00001C0E
l00001C0A:
	v146 = d5
	Mem0[a7 + 44:word32] = v146
	CVZN = cond(v146)
	// succ:  l00001C0E
l00001C0E:
	a7 = a7 - 0x00000004
	v140 = d0
	Mem0[a7:word32] = v140
	CVZN = cond(v140)
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	d0 = d0 + d7
	CVZNX = cond(d0)
	v141 = d0
	Mem0[a7 + 52:word32] = v141
	CVZN = cond(v141)
	v142 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v142
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v143 = d0
	Mem0[a7:word32] = v143
	CVZN = cond(v143)
	d0 = Mem0[a7 + 52:word32]
	CVZN = cond(d0)
	v144 = d0 - Mem0[a7 + 68:word32]
	CVZN = cond(v144)
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(ULT,C) l00001C32
	// succ:  l00001C2C l00001C32
l00001C2C:
	Mem0[a7 + 44:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001C42
	// succ:  l00001C42
l00001C32:
	a7 = a7 - 0x00000004
	v158 = d0
	Mem0[a7:word32] = v158
	CVZN = cond(v158)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d0 = d0 - Mem0[a7 + 52:word32]
	CVZNX = cond(d0)
	v159 = d0
	Mem0[a7 + 48:word32] = v159
	CVZN = cond(v159)
	v160 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v160
	CVZN = cond(d0)
	// succ:  l00001C42
l00001C42:
	v153 = Mem0[a7 + 44:word32]
	Mem0[a7 + 48:word32] = v153
	CVZN = cond(v153)
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001C84
	// succ:  l00001C50 l00001C84
l00001C50:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001C84
	// succ:  l00001C56 l00001C84
l00001C56:
	a7 = a7 - 0x00000004
	v154 = a5
	Mem0[a7:word32] = v154
	CVZN = cond(v154)
	a0 = a7 + 110
	a0 = a0 + d2
	v155 = Mem0[a0:byte]
	d0 = DPB(d0, v155, 0)
	CVZN = cond(v155)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v156 = d0
	Mem0[a7:word32] = v156
	CVZN = cond(v156)
	call fn00001E10 (retsize: 4;)
	a7 = a7 + 0x0008
	v157 = d0 - 0xFFFFFFFF
	CVZN = cond(v157)
	branch Test(NE,Z) l00001C7C
	// succ:  l00001C76 l00001C7C
l00001C76:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DD8
	// succ:  l00001DD8
l00001C7C:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v183 = d7 - d2
	CVZN = cond(v183)
	branch Test(UGT,CZ) l00001C56
	// succ:  l00001C84 l00001C56
l00001C84:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001CD6
	// succ:  l00001C8C l00001CD6
l00001C8C:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001CD6
	// succ:  l00001C94 l00001CD6
l00001C94:
	d4 = Mem0[a7 + 72:word32]
	CVZN = cond(d4)
	a4 = Mem0[a7 + 48:word32]
	// succ:  l00001C9C
l00001C9C:
	a7 = a7 - 0x00000004
	v184 = a5
	Mem0[a7:word32] = v184
	CVZN = cond(v184)
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & d4
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001CAA
	// succ:  l00001CA4 l00001CAA
l00001CA4:
	a0 = DPB(a0, 0x0030, 0)
	goto l00001CAE
	// succ:  l00001CAE
l00001CAA:
	a0 = DPB(a0, 0x0020, 0)
	// succ:  l00001CAE
l00001CAE:
	a7 = a7 - 0x00000004
	v186 = a0
	Mem0[a7:word32] = v186
	CVZN = cond(v186)
	call fn00001E10 (retsize: 4;)
	a7 = a7 + 0x0008
	v187 = d0 - 0xFFFFFFFF
	CVZN = cond(v187)
	branch Test(NE,Z) l00001CC6
	// succ:  l00001CC0 l00001CC6
l00001CC0:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DD8
	// succ:  l00001DD8
l00001CC6:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v192 = a4 - d2
	CVZN = cond(v192)
	branch Test(UGT,CZ) l00001C9C
	// succ:  l00001CCE l00001C9C
l00001CCE:
	v193 = a4
	Mem0[a7 + 48:word32] = v193
	CVZN = cond(v193)
	v194 = d4
	Mem0[a7 + 72:word32] = v194
	CVZN = cond(v194)
	// succ:  l00001CD6
l00001CD6:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001D12
	// succ:  l00001CDE l00001D12
l00001CDE:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001D12
	// succ:  l00001CE4 l00001D12
l00001CE4:
	a7 = a7 - 0x00000004
	v188 = a5
	Mem0[a7:word32] = v188
	CVZN = cond(v188)
	a0 = a7 + 110
	a0 = a0 + d2
	v189 = Mem0[a0:byte]
	d0 = DPB(d0, v189, 0)
	CVZN = cond(v189)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v190 = d0
	Mem0[a7:word32] = v190
	CVZN = cond(v190)
	call fn00001E10 (retsize: 4;)
	a7 = a7 + 0x0008
	v191 = d0 - 0xFFFFFFFF
	CVZN = cond(v191)
	branch Test(NE,Z) l00001D0A
	// succ:  l00001D04 l00001D0A
l00001D04:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DD8
	// succ:  l00001DD8
l00001D0A:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v196 = d7 - d2
	CVZN = cond(v196)
	branch Test(UGT,CZ) l00001CE4
	// succ:  l00001D12 l00001CE4
l00001D12:
	d2 = Mem0[a7 + 102:word32]
	CVZN = cond(d2)
	v197 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v197)
	branch Test(ULE,VZ) l00001D40
	// succ:  l00001D1C l00001D40
l00001D1C:
	a7 = a7 - 0x00000004
	v198 = a5
	Mem0[a7:word32] = v198
	CVZN = cond(v198)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000030
	call fn00001E10 (retsize: 4;)
	a7 = a7 + 0x0008
	v199 = d0 - 0xFFFFFFFF
	CVZN = cond(v199)
	branch Test(NE,Z) l00001D38
	// succ:  l00001D32 l00001D38
l00001D32:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DD8
	// succ:  l00001DD8
l00001D38:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v200 = d5 - d2
	CVZN = cond(v200)
	branch Test(UGT,CZ) l00001D1C
	// succ:  l00001D40 l00001D1C
l00001D40:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 102:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001D76
	// succ:  l00001D48 l00001D76
l00001D48:
	a4 = Mem0[a7 + 102:word32]
	// succ:  l00001D4C
l00001D4C:
	a7 = a7 - 0x00000004
	v201 = a5
	Mem0[a7:word32] = v201
	CVZN = cond(v201)
	a0 = a3 + d2
	v202 = Mem0[a0:byte]
	d0 = DPB(d0, v202, 0)
	CVZN = cond(v202)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v203 = d0
	Mem0[a7:word32] = v203
	CVZN = cond(v203)
	call fn00001E10 (retsize: 4;)
	a7 = a7 + 0x0008
	v204 = d0 - 0xFFFFFFFF
	CVZN = cond(v204)
	branch Test(NE,Z) l00001D6E
	// succ:  l00001D6A l00001D6E
l00001D6A:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DD8
	// succ:  l00001DD8
l00001D6E:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v205 = a4 - d2
	CVZN = cond(v205)
	branch Test(UGT,CZ) l00001D4C
	// succ:  l00001D76 l00001D4C
l00001D76:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001DAC
	// succ:  l00001D7E l00001DAC
l00001D7E:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001DAC
	// succ:  l00001D86 l00001DAC
l00001D86:
	a3 = Mem0[a7 + 48:word32]
	// succ:  l00001D8A
l00001D8A:
	a7 = a7 - 0x00000004
	v206 = a5
	Mem0[a7:word32] = v206
	CVZN = cond(v206)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000020
	call fn00001E10 (retsize: 4;)
	a7 = a7 + 0x0008
	v207 = d0 - 0xFFFFFFFF
	CVZN = cond(v207)
	branch Test(NE,Z) l00001DA4
	// succ:  l00001DA0 l00001DA4
l00001DA0:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DD8
	// succ:  l00001DD8
l00001DA4:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v209 = a3 - d2
	CVZN = cond(v209)
	branch Test(UGT,CZ) l00001D8A
	// succ:  l00001DAC l00001D8A
l00001DAC:
	a4 = a2
	goto l00001DD0
	// succ:  l00001DD0
l00001DB0:
	a7 = a7 - 0x00000004
	v85 = a5
	Mem0[a7:word32] = v85
	CVZN = cond(v85)
	v86 = Mem0[a4:byte]
	a4 = a4 + 0x00000001
	d0 = DPB(d0, v86, 0)
	CVZN = cond(v86)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v87 = d0
	Mem0[a7:word32] = v87
	CVZN = cond(v87)
	call fn00001E10 (retsize: 4;)
	a7 = a7 + 0x0008
	v88 = d0 - 0xFFFFFFFF
	CVZN = cond(v88)
	branch Test(NE,Z) l00001DCE
	// succ:  l00001DCA l00001DCE
l00001DCA:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DD8
	// succ:  l00001DD8
l00001DCE:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	// succ:  l00001DD0
l00001DD0:
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000014AC
	// succ:  l00001DD6 l000014AC
l00001DD6:
	d0 = d6
	CVZN = cond(d0)
	d0 = d6
	CVZN = cond(d0)
	// succ:  l00001DD8
l00001DD8:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a7 + 68
	return
	// succ:  fn00001490_exit
fn00001490_exit:


// fn00001E10
// Return size: 4
void fn00001E10()
fn00001E10_entry:
	// succ:  l00001E10
l00001E10:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 16:word32]
	CVZN = cond(d2)
	a2 = Mem0[a7 + 20:word32]
	a0 = a2 + 24
	d0 = 2
	CVZN = cond(d0)
	v9 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	a0 = a2 + 20
	v13 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v13
	CVZNX = cond(v13)
	branch Test(LT,CZ) l00001E54
	// succ:  l00001E2C l00001E54
l00001E2C:
	d0 = 10
	CVZN = cond(d0)
	v16 = d0 - d2
	CVZN = cond(v16)
	branch Test(NE,Z) l00001E3E
	// succ:  l00001E32 l00001E3E
l00001E32:
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001E54
	// succ:  l00001E3E l00001E54
l00001E3E:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a3 = a0
	a3 = a3 + 0x00000001
	v19 = a3
	Mem0[a1:word32] = v19
	CVZN = cond(v19)
	v20 = (byte) d2
	Mem0[a0:byte] = v20
	CVZN = cond(v20)
	v21 = Mem0[a0:byte]
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	d1 = 0
	CVZN = cond(d1)
	v23 = (byte) d0
	d1 = DPB(d1, v23, 0)
	CVZN = cond(v23)
	goto l00001E62
	// succ:  l00001E62
l00001E54:
	a7 = a7 - 0x00000004
	v24 = a2
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	a7 = a7 - 0x00000004
	v25 = d2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00001E6C (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0008
	// succ:  l00001E62
l00001E62:
	d0 = d1
	CVZN = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001E10_exit
fn00001E10_exit:


// fn00001E6C
// Return size: 4
void fn00001E6C()
fn00001E6C_entry:
	// succ:  l00001E6C
l00001E6C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d5 = Mem0[a7 + 40:word32]
	CVZN = cond(d5)
	a2 = Mem0[a7 + 44:word32]
	call fn00002400 (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00001E88
	// succ:  l00001E82 l00001E88
l00001E82:
	d0 = -1
	CVZN = cond(d0)
	goto l00001F7A
	// succ:  l00001F7A
l00001E88:
	d0 = 73
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	d6 = 64
	CVZN = cond(d6)
	v18 = d6 - d0
	CVZN = cond(v18)
	branch Test(EQ,Z) l00001E9A
	// succ:  l00001E94 l00001E9A
l00001E94:
	d0 = -1
	CVZN = cond(d0)
	goto l00001F7A
	// succ:  l00001F7A
l00001E9A:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001EB8
	// succ:  l00001EA0 l00001EB8
l00001EA0:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001EB0
	// succ:  l00001EA8 l00001EB0
l00001EA8:
	d0 = 1
	CVZN = cond(d0)
	v19 = d0
	Mem0[a2 + 28:word32] = v19
	CVZN = cond(v19)
	goto l00001EB8
	// succ:  l00001EB8
l00001EB0:
	v36 = 0x00000400
	Mem0[a2 + 28:word32] = v36
	CVZN = cond(v36)
	// succ:  l00001EB8
l00001EB8:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001EF8
	// succ:  l00001EBE l00001EF8
l00001EBE:
	a1 = a2 + 28
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001ED2
	// succ:  l00001ECE l00001ED2
l00001ECE:
	d4 = 2
	CVZN = cond(d4)
	goto l00001ED4
	// succ:  l00001ED4
l00001ED2:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00001ED4
l00001ED4:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + Mem0[a1:word32]
	CVZNX = cond(d0)
	a7 = a7 - 0x00000004
	v27 = d0
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	call fn0000202C (retsize: 4;)
	a3 = d0
	a7 = a7 + 0x0004
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00001EEE
	// succ:  l00001EE8 l00001EEE
l00001EE8:
	d0 = -1
	CVZN = cond(d0)
	goto l00001F7A
	// succ:  l00001F7A
l00001EEE:
	a1 = a3 + 1
	v31 = a1
	Mem0[a2 + 8:word32] = v31
	CVZN = cond(v31)
	goto l00001F56
	// succ:  l00001F56
l00001EF8:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001F52
	// succ:  l00001EFC l00001F52
l00001EFC:
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001F28
	// succ:  l00001F08 l00001F28
l00001F08:
	d0 = 10
	CVZN = cond(d0)
	v21 = d0 - d5
	CVZN = cond(v21)
	branch Test(NE,Z) l00001F28
	// succ:  l00001F0E l00001F28
l00001F0E:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a4 = a0
	a4 = a4 + 0x00000001
	v23 = a4
	Mem0[a1:word32] = v23
	CVZN = cond(v23)
	v24 = (byte) d5
	Mem0[a0:byte] = v24
	CVZN = cond(v24)
	a7 = a7 - 0x00000004
	v25 = a2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00001F80 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00001F7A
	// succ:  l00001F7A
l00001F28:
	a0 = a2 + 8
	d4 = Mem0[a2 + 4:word32]
	CVZN = cond(d4)
	d4 = d4 - Mem0[a0:word32]
	CVZNX = cond(d4)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E78:word32]
	d3 = d4
	CVZN = cond(d3)
	execPrivate3()
	v29 = d4 - d0
	CVZN = cond(v29)
	branch Test(EQ,Z) l00001F56
	// succ:  l00001F46 l00001F56
l00001F46:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v30 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l00001F7A
	// succ:  l00001F7A
l00001F52:
	d0 = 0
	CVZN = cond(d0)
	goto l00001F7A
	// succ:  l00001F7A
l00001F56:
	a0 = a2 + 24
	d0 = 2
	CVZN = cond(d0)
	v32 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	a1 = a2 + 8
	a0 = Mem0[a1:word32]
	v33 = (byte) d5
	Mem0[a0:byte] = v33
	CVZN = cond(v33)
	a1 = Mem0[a1:word32]
	a1 = a1 + 0x00000001
	v34 = a1
	Mem0[a2 + 4:word32] = v34
	CVZN = cond(v34)
	d0 = Mem0[a2 + 28:word32]
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	v35 = d0
	Mem0[a2 + 20:word32] = v35
	CVZN = cond(v35)
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00001F7A
l00001F7A:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001E6C_exit
fn00001E6C_exit:


// fn00001F80
// Return size: 4
void fn00001F80()
fn00001F80_entry:
	// succ:  l00001F80
l00001F80:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a2 = Mem0[a7 + 24:word32]
	call fn00002400 (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00001F96
	// succ:  l00001F92 l00001F96
l00001F92:
	d0 = -1
	CVZN = cond(d0)
	goto l0000200E
	// succ:  l0000200E
l00001F96:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001FB4
	// succ:  l00001F9C l00001FB4
l00001F9C:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001FAC
	// succ:  l00001FA4 l00001FAC
l00001FA4:
	d0 = 1
	CVZN = cond(d0)
	v14 = d0
	Mem0[a2 + 28:word32] = v14
	CVZN = cond(v14)
	goto l00001FB4
	// succ:  l00001FB4
l00001FAC:
	v15 = 0x00000400
	Mem0[a2 + 28:word32] = v15
	CVZN = cond(v15)
	// succ:  l00001FB4
l00001FB4:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001FBE
	// succ:  l00001FBA l00001FBE
l00001FBA:
	d0 = 0
	CVZN = cond(d0)
	goto l0000200E
	// succ:  l0000200E
l00001FBE:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002004
	// succ:  l00001FC6 l00002004
l00001FC6:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001FF4
	// succ:  l00001FCA l00001FF4
l00001FCA:
	a0 = a2 + 8
	d4 = Mem0[a2 + 4:word32]
	CVZN = cond(d4)
	d4 = d4 - Mem0[a0:word32]
	CVZNX = cond(d4)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E78:word32]
	d3 = d4
	CVZN = cond(d3)
	execPrivate3()
	v19 = d4 - d0
	CVZN = cond(v19)
	branch Test(EQ,Z) l00001FF8
	// succ:  l00001FE8 l00001FF8
l00001FE8:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v20 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l0000200E
	// succ:  l0000200E
l00001FF4:
	d0 = 0
	CVZN = cond(d0)
	goto l0000200E
	// succ:  l0000200E
l00001FF8:
	v22 = Mem0[a2 + 8:word32]
	Mem0[a2 + 4:word32] = v22
	CVZN = cond(v22)
	v23 = Mem0[a2 + 28:word32]
	Mem0[a2 + 20:word32] = v23
	CVZN = cond(v23)
	// succ:  l00002004
l00002004:
	a0 = a2 + 24
	d0 = -4
	CVZN = cond(d0)
	v21 = Mem0[a0:word32] & d0
	Mem0[a0:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000200E
l0000200E:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001F80_exit
fn00001F80_exit:


// fn0000202C
// Return size: 4
void fn0000202C()
fn0000202C_entry:
	// succ:  l0000202C
l0000202C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 8:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l0000203A
	// succ:  l00002036 l0000203A
l00002036:
	d0 = 0
	CVZN = cond(d0)
	goto l00002090
	// succ:  l00002090
l0000203A:
	ZN = cond(Mem0[0x00003EA8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000205E
	// succ:  l00002042 l0000205E
l00002042:
	a0 = Mem0[0x00003EA4:word32]
	a7 = a7 - 0x00000004
	v11 = a0
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	a7 = a7 - 0x00000004
	v12 = a0
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn00002320 (retsize: 4;)
	v14 = d0
	Mem0[0x00003EA8:word32] = v14
	CVZN = cond(v14)
	a7 = a7 + 12
	// succ:  l0000205E
l0000205E:
	ZN = cond(Mem0[0x00003EA8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000206A
	// succ:  l00002066 l0000206A
l00002066:
	d0 = 0
	CVZN = cond(d0)
	goto l00002090
	// succ:  l00002090
l0000206A:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 + d2
	CVZNX = cond(d0)
	a7 = a7 - 0x00000004
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	v17 = Mem0[0x00003EA8:word32]
	a7 = a7 - 0x00000004
	v18 = v17
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn000021FC (retsize: 4;)
	a1 = d0
	a7 = a7 + 0x0008
	d0 = a1
	CVZN = cond(d0)
	branch Test(NE,Z) l00002088
	// succ:  l00002084 l00002088
l00002084:
	d0 = 0
	CVZN = cond(d0)
	goto l00002090
	// succ:  l00002090
l00002088:
	v20 = d2
	Mem0[a1:word32] = v20
	CVZN = cond(v20)
	a0 = a1 + 4
	d0 = a0
	CVZN = cond(d0)
	// succ:  l00002090
l00002090:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000202C_exit
fn0000202C_exit:


// fn000021FC
// Return size: 4
void fn000021FC()
fn000021FC_entry:
	// succ:  l000021FC
l000021FC:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 40:word32]
	CVZN = cond(d2)
	a4 = Mem0[a7 + 36:word32]
	a0 = Mem0[0x00003E74:word32]
	v13 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v13)
	branch Test(ULT,C) l00002228
	// succ:  l00002216 l00002228
l00002216:
	a6 = Mem0[0x00003E74:word32]
	a0 = a4
	d0 = d2
	CVZN = cond(d0)
	d0 = AllocPooled(d0, a0)
	goto l0000231A
	// succ:  l0000231A
l00002228:
	a3 = a3 - a3
	CVZNX = cond(a3)
	d4 = a4
	CVZN = cond(d4)
	branch Test(EQ,Z) l00002318
	// succ:  l00002230 l00002318
l00002230:
	ZN = cond(d2 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002318
	// succ:  l00002236 l00002318
l00002236:
	v20 = d2 - Mem0[a4 + 20:word32]
	CVZN = cond(v20)
	branch Test(UGE,C) l000022EA
	// succ:  l0000223E l000022EA
l0000223E:
	a5 = Mem0[a4:word32]
	// succ:  l00002240
l00002240:
	ZN = cond(Mem0[a5:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002262
	// succ:  l00002244 l00002262
l00002244:
	ZN = cond(Mem0[a5 + 8:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000225E
	// succ:  l0000224A l0000225E
l0000224A:
	a6 = Mem0[0x00003E74:word32]
	a0 = a5
	d0 = d2
	CVZN = cond(d0)
	d0 = Allocate(a0, d0)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l000022CE
	// succ:  l0000225E l000022CE
l0000225E:
	a5 = Mem0[a5:word32]
	goto l00002240
	// succ:  l00002240
l00002262:
	d3 = 40
	CVZN = cond(d3)
	d3 = d3 + Mem0[a4 + 16:word32]
	CVZNX = cond(d3)
	d1 = Mem0[a4 + 12:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E74:word32]
	d0 = d3
	CVZN = cond(d0)
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002318
	// succ:  l00002280 l00002318
l00002280:
	v22 = d3
	Mem0[a3:word32] = v22
	a3 = a3 + 0x00000004
	CVZN = cond(v22)
	v23 = 0x0A
	Mem0[a3 + 8:byte] = v23
	CVZN = cond(v23)
	a2 = a3 + 36
	a0 = a3 + 16
	v24 = a2
	Mem0[a0:word32] = v24
	CVZN = cond(v24)
	v25 = a2
	Mem0[a3 + 20:word32] = v25
	CVZN = cond(v25)
	a1 = Mem0[a0:word32]
	Mem0[a1:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a2 = Mem0[a0:word32]
	a2 = a2 + 0x00000004
	v29 = Mem0[a4 + 16:word32]
	Mem0[a2:word32] = v29
	CVZN = cond(v29)
	a1 = a3 + 28
	v30 = Mem0[a2:word32]
	Mem0[a1:word32] = v30
	CVZN = cond(v30)
	a1 = Mem0[a1:word32]
	a1 = a1 + Mem0[a0:word32]
	v31 = a1
	Mem0[a3 + 24:word32] = v31
	CVZN = cond(v31)
	a6 = Mem0[0x00003E74:word32]
	a0 = a4
	a1 = a3
	AddHead(a0, a1)
	a6 = Mem0[0x00003E74:word32]
	a0 = a3
	d0 = d2
	CVZN = cond(d0)
	d0 = Allocate(a0, d0)
	a3 = d0
	// succ:  l000022CE
l000022CE:
	d0 = 0x00010000
	CVZN = cond(d0)
	d0 = d0 & Mem0[a4 + 12:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002318
	// succ:  l000022DA l00002318
l000022DA:
	a2 = a3
	d2 = d2 + 0x00000007
	CVZNX = cond(d2)
	d2 = d2 >>u 0x00000003
	CVZNX = cond(d2)
	// succ:  l000022E0
l000022E0:
	Mem0[a2:word32] = 0x00000000
	a2 = a2 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	Mem0[a2:word32] = 0x00000000
	a2 = a2 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(NE,Z) l000022E0
	// succ:  l000022E8 l000022E0
l000022E8:
	goto l00002318
	// succ:  l00002318
l000022EA:
	d3 = 16
	CVZN = cond(d3)
	d3 = d3 + d2
	CVZNX = cond(d3)
	d1 = Mem0[a4 + 12:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E74:word32]
	d0 = d3
	CVZN = cond(d0)
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002318
	// succ:  l00002304 l00002318
l00002304:
	v32 = d3
	Mem0[a3:word32] = v32
	a3 = a3 + 0x00000004
	CVZN = cond(v32)
	a6 = Mem0[0x00003E74:word32]
	a0 = a4
	a1 = a3
	AddTail(a0, a1)
	a3 = a3 + 0x00000008
	Mem0[a3:word32] = 0x00000000
	a3 = a3 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00002318
l00002318:
	d0 = a3
	CVZN = cond(d0)
	// succ:  l0000231A
l0000231A:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000021FC_exit
fn000021FC_exit:


// fn00002320
// Return size: 4
void fn00002320()
fn00002320_entry:
	// succ:  l00002320
l00002320:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d3 = Mem0[a7 + 24:word32]
	CVZN = cond(d3)
	a2 = Mem0[a7 + 28:word32]
	a0 = Mem0[0x00003E74:word32]
	v9 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v9)
	branch Test(ULT,C) l0000234E
	// succ:  l0000233A l0000234E
l0000233A:
	a6 = Mem0[0x00003E74:word32]
	d0 = Mem0[a7 + 20:word32]
	CVZN = cond(d0)
	d1 = d3
	CVZN = cond(d1)
	d2 = a2
	CVZN = cond(d2)
	d0 = CreatePrivatePool(d0, d1, d2)
	goto l0000238A
	// succ:  l0000238A
l0000234E:
	a1 = a1 - a1
	CVZNX = cond(a1)
	v15 = d3 - a2
	CVZN = cond(v15)
	branch Test(ULT,C) l00002388
	// succ:  l00002354 l00002388
l00002354:
	d3 = d3 + 0x00000007
	CVZNX = cond(d3)
	a6 = Mem0[0x00003E74:word32]
	d0 = 24
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	a1 = d0
	d0 = a1
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002388
	// succ:  l0000236A l00002388
l0000236A:
	a0 = a1 + 4
	v17 = a0
	Mem0[a1:word32] = v17
	CVZN = cond(v17)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v21 = a1
	Mem0[a1 + 8:word32] = v21
	CVZN = cond(v21)
	v22 = Mem0[a7 + 20:word32]
	Mem0[a1 + 12:word32] = v22
	CVZN = cond(v22)
	d0 = -8
	CVZN = cond(d0)
	d0 = d0 & d3
	ZN = cond(d0)
	C = false
	V = false
	v24 = d0
	Mem0[a1 + 16:word32] = v24
	CVZN = cond(v24)
	v25 = a2
	Mem0[a1 + 20:word32] = v25
	CVZN = cond(v25)
	// succ:  l00002388
l00002388:
	d0 = a1
	CVZN = cond(d0)
	// succ:  l0000238A
l0000238A:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002320_exit
fn00002320_exit:


// fn00002400
// Return size: 4
void fn00002400()
fn00002400_entry:
	// succ:  l00002400
l00002400:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = Mem0[0x00003E74:word32]
	d0 = 0
	CVZN = cond(d0)
	d1 = 0x00001000
	CVZN = cond(d1)
	SetSignal(d0, d1)
	d0 = d0 & 0x00001000
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000242A
	// succ:  l0000241E l0000242A
l0000241E:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000014
	call fn0000131C (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l0000242A
l0000242A:
	v11 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = v11
	return
	// succ:  fn00002400_exit
fn00002400_exit:


// fn00002430
// Return size: 4
void fn00002430()
fn00002430_entry:
	// succ:  l00002430
l00002430:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 28:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 24:word32]
	CVZN = cond(d0)
	a0 = d1
	d3 = Mem0[a7 + 36:word32]
	CVZN = cond(d3)
	d2 = Mem0[a7 + 32:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l00002486
	// succ:  l00002448 l00002486
l00002448:
	v13 = d0 - d3
	CVZN = cond(v13)
	branch Test(UGE,C) l0000245A
	// succ:  l0000244C l0000245A
l0000244C:
	d2 = d3
	CVZN = cond(d2)
	call fn00002534 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	goto l0000252C
	// succ:  l0000252C
l0000245A:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002466
	// succ:  l0000245E l00002466
l0000245E:
	d4 = 1
	CVZN = cond(d4)
	v20 = (uint16) (d4 % (uint16) d3)
	v21 = (uint16) (d4 /u (uint16) d3)
	d4 = DPB(d4, v20, 16)
	d4 = DPB(d4, v21, 0)
	VZN = cond(v21)
	C = false
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	d3 = d4
	CVZN = cond(d3)
	// succ:  l00002466
l00002466:
	d1 = d0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	d2 = d3
	CVZN = cond(d2)
	call fn00002534 (retsize: 4;)
	a1 = d0
	d0 = d1
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	call fn00002534 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	d0 = a1
	CVZN = cond(d0)
	goto l0000252E
	// succ:  l0000252E
l00002486:
	v15 = d0 - d2
	CVZN = cond(v15)
	branch Test(UGE,C) l00002490
	// succ:  l0000248A l00002490
l0000248A:
	d0 = 0
	CVZN = cond(d0)
	goto l0000252C
	// succ:  l0000252C
l00002490:
	d6 = d2
	CVZN = cond(d6)
	d4 = 24
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000024AE
	// succ:  l0000249A l000024AE
l0000249A:
	d4 = 16
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000024AE
	// succ:  l000024A2 l000024AE
l000024A2:
	d4 = 8
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000024AE
	// succ:  l000024AA l000024AE
l000024AA:
	d4 = 0
	CVZN = cond(d4)
	v19 = (byte) d2
	d6 = DPB(d6, v19, 0)
	CVZN = cond(v19)
	// succ:  l000024AE
l000024AE:
	a1 = 0x00003EAC
	v24 = (word16) d6 & 0x00FF
	d6 = DPB(d6, v24, 0)
	ZN = cond(v24)
	C = false
	V = false
	v25 = (byte) d4 + Mem0[a1 + d6:byte]
	d4 = DPB(d4, v25, 0)
	CVZNX = cond(v25)
	d5 = 32
	CVZN = cond(d5)
	d5 = d5 - d4
	CVZNX = cond(d5)
	branch Test(NE,Z) l000024CE
	// succ:  l000024C2 l000024CE
l000024C2:
	v27 = d2 - d0
	CVZN = cond(v27)
	branch Test(ULT,C) l000024CA
	// succ:  l000024C6 l000024CA
l000024C6:
	v28 = d3 - a0
	CVZN = cond(v28)
	branch Test(UGT,CZ) l0000248A
	// succ:  l000024CA l0000248A
l000024CA:
	d0 = 1
	CVZN = cond(d0)
	goto l0000252C
	// succ:  l0000252C
l000024CE:
	d2 = d2 << d5
	CVZNX = cond(d2)
	d6 = d3
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d2 = d2 | d6
	ZN = cond(d2)
	C = false
	V = false
	d3 = d3 << d5
	CVZNX = cond(d3)
	d1 = d0
	CVZN = cond(d1)
	d0 = d0 >>u d4
	CVZNX = cond(d0)
	d1 = d1 << d5
	CVZNX = cond(d1)
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 << d5
	CVZNX = cond(d6)
	a0 = d6
	call fn00002534 (retsize: 4;)
	d2 = d0
	CVZN = cond(d2)
	v30 = d0
	d0 = d1
	d1 = v30
	ZN = cond(d1)
	C = false
	V = false
	d4 = d2
	CVZN = cond(d4)
	d5 = d2
	CVZN = cond(d5)
	d6 = d3
	CVZN = cond(d6)
	d2 = d2 *u (word16) d3
	VZN = cond(d2)
	C = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d3 = d3 *u (word16) d5
	VZN = cond(d3)
	C = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d4 = d4 *u (word16) d6
	VZN = cond(d4)
	C = false
	d5 = d5 *u (word16) d6
	VZN = cond(d5)
	C = false
	d6 = 0
	CVZN = cond(d6)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v31 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v31, 0)
	CVZNX = cond(v31)
	v33 = (word16) d6 + (word16) d5 + X
	d5 = DPB(d5, v33, 0)
	CVZNX = cond(v33)
	v34 = (word16) d2 + (word16) d4
	d2 = DPB(d2, v34, 0)
	CVZNX = cond(v34)
	v35 = (word16) d6 + (word16) d5 + X
	d5 = DPB(d5, v35, 0)
	CVZNX = cond(v35)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 + d4
	CVZNX = cond(d3)
	d3 = d3 + d5
	CVZNX = cond(d3)
	v39 = d0 - d3
	CVZN = cond(v39)
	branch Test(ULT,C) l0000252A
	// succ:  l00002524 l0000252A
l00002524:
	branch Test(NE,Z) l0000252C
	// succ:  l00002526 l0000252C
l00002526:
	v40 = a0 - d2
	CVZN = cond(v40)
	branch Test(UGE,C) l0000252C
	// succ:  l0000252A l0000252C
l0000252A:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	// succ:  l0000252C
l0000252C:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000252E
l0000252E:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002430_exit
fn00002430_exit:


// fn00002534
// Return size: 4
void fn00002534()
fn00002534_entry:
	// succ:  l00002534
l00002534:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	d7 = d2
	CVZN = cond(d7)
	branch Test(EQ,Z) l0000254E
	// succ:  l0000253C l0000254E
l0000253C:
	d6 = d1
	CVZN = cond(d6)
	d5 = d0
	CVZN = cond(d5)
	branch Test(NE,Z) l0000255C
	// succ:  l00002542 l0000255C
l00002542:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000267A
	// succ:  l00002548 l0000267A
l00002548:
	v14 = d2 - d1
	CVZN = cond(v14)
	branch Test(UGT,CZ) l0000267A
	// succ:  l0000254E l0000267A
l0000254E:
	d0 = d1
	CVZN = cond(d0)
	d1 = d2
	CVZN = cond(d1)
	call fn000026F2 (retsize: 4;)
	goto l0000267A
	// succ:  l0000267A
l0000255C:
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	ZN = cond((word16) d2 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l00002584
	// succ:  l00002562 l00002584
l00002562:
	d2 = 0
	CVZN = cond(d2)
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v16 = (word16) d1
	d0 = DPB(d0, v16, 0)
	CVZN = cond(v16)
	v17 = (uint16) (d0 % (uint16) d7)
	v18 = (uint16) (d0 /u (uint16) d7)
	d0 = DPB(d0, v17, 16)
	d0 = DPB(d0, v18, 0)
	VZN = cond(v18)
	C = false
	v20 = (word16) d0
	d2 = DPB(d2, v20, 0)
	CVZN = cond(v20)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v21 = (word16) d1
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	v22 = (uint16) (d0 % (uint16) d7)
	v23 = (uint16) (d0 /u (uint16) d7)
	d0 = DPB(d0, v22, 16)
	d0 = DPB(d0, v23, 0)
	VZN = cond(v23)
	C = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v24 = (word16) d0
	d2 = DPB(d2, v24, 0)
	CVZN = cond(v24)
	d0 = DPB(d0, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = d0
	CVZN = cond(d1)
	d0 = d2
	CVZN = cond(d0)
	goto l0000267A
	// succ:  l0000267A
l00002584:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a7 = a7 - 0x00000008
	Mem0[a7 + 2:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d1 = 0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l000025A0
	// succ:  l00002596 l000025A0
l00002596:
	v32 = (word16) d0 + 0x0001
	d0 = DPB(d0, v32, 0)
	CVZNX = cond(v32)
	d6 = d6 + d6
	CVZNX = cond(d6)
	d5 = d5 + d5 + X
	CVZNX = cond(d5)
	d7 = d7 + d7
	CVZNX = cond(d7)
	branch Test(GT,N) l00002596
	// succ:  l000025A0 l00002596
l000025A0:
	v35 = (word16) d0
	Mem0[a7:word16] = v35
	CVZN = cond(v35)
	// succ:  l000025A2
l000025A2:
	d3 = d7
	CVZN = cond(d3)
	d2 = d5
	CVZN = cond(d2)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v36 = (word16) d2 - (word16) d3
	CVZN = cond(v36)
	branch Test(NE,Z) l000025B4
	// succ:  l000025AE l000025B4
l000025AE:
	d1 = DPB(d1, 0xFFFF, 0)
	CVZN = cond(0xFFFF)
	goto l000025BE
	// succ:  l000025BE
l000025B4:
	d1 = d5
	CVZN = cond(d1)
	v37 = (uint16) (d1 % (uint16) d3)
	v38 = (uint16) (d1 /u (uint16) d3)
	d1 = DPB(d1, v37, 16)
	d1 = DPB(d1, v38, 0)
	VZN = cond(v38)
	C = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	// succ:  l000025BE
l000025BE:
	a1 = d6
	d6 = DPB(d6, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	// succ:  l000025C4
l000025C4:
	d3 = d7
	CVZN = cond(d3)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 *u (word16) d7
	VZN = cond(d2)
	C = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = d3 *u (word16) d1
	VZN = cond(d3)
	C = false
	d4 = d5
	CVZN = cond(d4)
	d4 = d4 - d3
	CVZNX = cond(d4)
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	v41 = (word16) d4
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d6
	d4 = DPB(d4, v42, 0)
	CVZN = cond(v42)
	ZN = cond((word16) d0 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l000025E4
	// succ:  l000025DC l000025E4
l000025DC:
	v43 = d2 - d4
	CVZN = cond(v43)
	branch Test(ULE,VZ) l000025E4
	// succ:  l000025E0 l000025E4
l000025E0:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	goto l000025C4
	// succ:  l000025C4
l000025E4:
	a0 = d5
	d6 = d1
	CVZN = cond(d6)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = d7
	CVZN = cond(d5)
	d2 = d6
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	d4 = d5
	CVZN = cond(d4)
	d6 = d6 *u (word16) d5
	VZN = cond(d6)
	C = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d5 = d5 *u (word16) d3
	VZN = cond(d5)
	C = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d2 = d2 *u (word16) d4
	VZN = cond(d2)
	C = false
	d3 = d3 *u (word16) d4
	VZN = cond(d3)
	C = false
	d4 = 0
	CVZN = cond(d4)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	v45 = (word16) d6 + (word16) d5
	d6 = DPB(d6, v45, 0)
	CVZNX = cond(v45)
	v46 = (word16) d4 + (word16) d3 + X
	d3 = DPB(d3, v46, 0)
	CVZNX = cond(v46)
	v47 = (word16) d6 + (word16) d2
	d6 = DPB(d6, v47, 0)
	CVZNX = cond(v47)
	v48 = (word16) d4 + (word16) d3 + X
	d3 = DPB(d3, v48, 0)
	CVZNX = cond(v48)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = DPB(d5, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d5 = d5 + d2
	CVZNX = cond(d5)
	d5 = d5 + d3
	CVZNX = cond(d5)
	d2 = d5
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	d5 = a0
	CVZN = cond(d5)
	d6 = a1
	CVZN = cond(d6)
	d6 = d6 - d3
	CVZNX = cond(d6)
	d5 = d5 - d2 - X
	CVZNX = cond(d5)
	branch Test(UGE,C) l0000263C
	// succ:  l00002626 l0000263C
l00002626:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d3 = d7
	CVZN = cond(d3)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d6 = d6 + d3
	CVZNX = cond(d6)
	d5 = d2 + d5 + X
	CVZNX = cond(d5)
	d3 = d7
	CVZN = cond(d3)
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d5 = d5 + d3
	CVZNX = cond(d5)
	// succ:  l0000263C
l0000263C:
	ZN = cond(Mem0[a7 + 2:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002658
	// succ:  l00002642 l00002658
l00002642:
	v53 = (word16) d1
	Mem0[a7 + 4:word16] = v53
	CVZN = cond(v53)
	d1 = 0
	CVZN = cond(d1)
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	v54 = (word16) d6
	d5 = DPB(d5, v54, 0)
	CVZN = cond(v54)
	d6 = DPB(d6, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 2:bool] = true
	goto l000025A2
	// succ:  l000025A2
l00002658:
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	v57 = (word16) d1
	d0 = DPB(d0, v57, 0)
	CVZN = cond(v57)
	v58 = (word16) d5
	d6 = DPB(d6, v58, 0)
	CVZN = cond(v58)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	v59 = Mem0[a7:word16]
	d7 = DPB(d7, v59, 0)
	CVZN = cond(v59)
	branch Test(EQ,Z) l00002672
	// succ:  l00002668 l00002672
l00002668:
	v60 = (word16) d7 - 0x0001
	d7 = DPB(d7, v60, 0)
	CVZNX = cond(v60)
	// succ:  l0000266A
l0000266A:
	d5 = d5 >>u 0x00000001
	CVZNX = cond(d5)
	d6 = __rcr(d6, 0x00000001, X)
	CZNX = cond(d6)
	V = false
	d7 = d7 - 0x00000001
	branch d7 != 0xFFFFFFFF l0000266A
	// succ:  l00002672 l0000266A
l00002672:
	d1 = d6
	CVZN = cond(d1)
	a7 = a7 + 0x00000008
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	// succ:  l0000267A
l0000267A:
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002534_exit
fn00002534_exit:


// fn000026C0
// Return size: 4
void fn000026C0()
fn000026C0_entry:
	// succ:  l000026C0
l000026C0:
	a7 = fp
	v3 = a7 + 4
	d0 = Mem0[v3:word32]
	v3 = v3 + 0x00000004
	d1 = Mem0[v3:word32]
	v3 = v3 + 0x00000004
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l000026E0
	// succ:  l000026CA l000026E0
l000026CA:
	d0 = -d0
	CVZNX = cond(d0)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l000026D8
	// succ:  l000026D0 l000026D8
l000026D0:
	d1 = -d1
	CVZNX = cond(d1)
	call fn000026F2 (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn000026C0_exit
l000026D8:
	call fn000026F2 (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn000026C0_exit
l000026E0:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l000026E2_thunk_fn000026F2
	goto l000026E4
	// succ:  l000026E4 l000026E2_thunk_fn000026F2
l000026E2_thunk_fn000026F2:
	call fn000026F2 (retsize: 4;)
	return
	// succ:  fn000026C0_exit
l000026E4:
	d1 = -d1
	CVZNX = cond(d1)
	call fn000026F2 (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	return
	// succ:  fn000026C0_exit
fn000026C0_exit:


// fn000026F2
// Return size: 4
void fn000026F2()
fn000026F2_entry:
	// succ:  l000026F2
l000026F2:
	a7 = fp
	a7 = a7 - 0x00000004
	v4 = d2
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v10 = (word16) d1
	d2 = DPB(d2, v10, 0)
	CVZN = cond(v10)
	branch Test(NE,Z) l00002718
	// succ:  l000026FA l00002718
l000026FA:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v13 = (word16) d0
	d2 = DPB(d2, v13, 0)
	CVZN = cond(v13)
	branch Test(EQ,Z) l00002708
	// succ:  l00002704 l00002708
l00002704:
	v14 = (uint16) (d2 % (uint16) d1)
	v15 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v14, 16)
	d2 = DPB(d2, v15, 0)
	VZN = cond(v15)
	C = false
	v17 = (word16) d2
	d0 = DPB(d0, v17, 0)
	CVZN = cond(v17)
	// succ:  l00002708
l00002708:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v26 = (word16) d0
	d2 = DPB(d2, v26, 0)
	CVZN = cond(v26)
	v27 = (uint16) (d2 % (uint16) d1)
	v28 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v27, 16)
	d2 = DPB(d2, v28, 0)
	VZN = cond(v28)
	C = false
	v29 = (word16) d2
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v30 = (word16) d2
	d1 = DPB(d1, v30, 0)
	CVZN = cond(v30)
	v31 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v31
	CVZN = cond(d2)
	return
	// succ:  fn000026F2_exit
l00002718:
	a7 = a7 - 0x00000004
	v19 = d3
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	d3 = 16
	CVZN = cond(d3)
	v20 = (word16) d1 - 0x0080
	CVZN = cond(v20)
	branch Test(UGE,C) l00002726
	// succ:  l00002722 l00002726
l00002722:
	d1 = __rol(d1, 0x00000008)
	CZN = cond(d1)
	V = false
	v22 = (word16) d3 - 0x0008
	d3 = DPB(d3, v22, 0)
	CVZNX = cond(v22)
	// succ:  l00002726
l00002726:
	v24 = (word16) d1 - 0x0800
	CVZN = cond(v24)
	branch Test(UGE,C) l00002730
	// succ:  l0000272C l00002730
l0000272C:
	d1 = __rol(d1, 0x00000004)
	CZN = cond(d1)
	V = false
	v25 = (word16) d3 - 0x0004
	d3 = DPB(d3, v25, 0)
	CVZNX = cond(v25)
	// succ:  l00002730
l00002730:
	v32 = (word16) d1 - 0x2000
	CVZN = cond(v32)
	branch Test(UGE,C) l0000273A
	// succ:  l00002736 l0000273A
l00002736:
	d1 = __rol(d1, 0x00000002)
	CZN = cond(d1)
	V = false
	v33 = (word16) d3 - 0x0002
	d3 = DPB(d3, v33, 0)
	CVZNX = cond(v33)
	// succ:  l0000273A
l0000273A:
	ZN = cond((word16) d1 - 0x0000)
	C = false
	V = false
	branch Test(LT,N) l00002742
	// succ:  l0000273E l00002742
l0000273E:
	d1 = __rol(d1, 0x00000001)
	CZN = cond(d1)
	V = false
	v35 = (word16) d3 - 0x0001
	d3 = DPB(d3, v35, 0)
	CVZNX = cond(v35)
	// succ:  l00002742
l00002742:
	v36 = (word16) d0
	d2 = DPB(d2, v36, 0)
	CVZN = cond(v36)
	d0 = d0 >>u d3
	CVZNX = cond(d0)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 >>u d3
	CVZNX = cond(d2)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v38 = (uint16) (d0 % (uint16) d1)
	v39 = (uint16) (d0 /u (uint16) d1)
	d0 = DPB(d0, v38, 16)
	d0 = DPB(d0, v39, 0)
	VZN = cond(v39)
	C = false
	v40 = (word16) d0
	d3 = DPB(d3, v40, 0)
	CVZN = cond(v40)
	v41 = (word16) d2
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d3
	d2 = DPB(d2, v42, 0)
	CVZN = cond(v42)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d0 = d0 - d2
	CVZNX = cond(d0)
	branch Test(UGE,C) l00002764
	// succ:  l0000275E l00002764
l0000275E:
	v43 = (word16) d3 - 0x0001
	d3 = DPB(d3, v43, 0)
	CVZNX = cond(v43)
	d0 = d0 + d1
	CVZNX = cond(d0)
l00002762:
	branch Test(UGE,C) l00002762
	// succ:  l00002764 l00002762
l00002764:
	d1 = 0
	CVZN = cond(d1)
	v44 = (word16) d3
	d1 = DPB(d1, v44, 0)
	CVZN = cond(v44)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d0 = __rol(d0, d3)
	CZN = cond(d0)
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v45 = d0
	d0 = d1
	d1 = v45
	ZN = cond(d1)
	C = false
	V = false
	v46 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = v46
	CVZN = cond(d3)
	v47 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v47
	CVZN = cond(d2)
	return
	// succ:  fn000026F2_exit
fn000026F2_exit:


// fn00002778
// Return size: 4
void fn00002778()
fn00002778_entry:
	// succ:  l00002778
l00002778:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 32:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 28:word32]
	CVZN = cond(d0)
	a0 = d1
	d3 = Mem0[a7 + 40:word32]
	CVZN = cond(d3)
	d2 = Mem0[a7 + 36:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l000027CA
	// succ:  l00002790 l000027CA
l00002790:
	v14 = d0 - d3
	CVZN = cond(v14)
	branch Test(UGE,C) l000027A2
	// succ:  l00002794 l000027A2
l00002794:
	d2 = d3
	CVZN = cond(d2)
	call fn00002534 (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	goto l00002884
	// succ:  l00002884
l000027A2:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000027AE
	// succ:  l000027A6 l000027AE
l000027A6:
	d4 = 1
	CVZN = cond(d4)
	v29 = (uint16) (d4 % (uint16) d3)
	v30 = (uint16) (d4 /u (uint16) d3)
	d4 = DPB(d4, v29, 16)
	d4 = DPB(d4, v30, 0)
	VZN = cond(v30)
	C = false
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	d3 = d4
	CVZN = cond(d3)
	// succ:  l000027AE
l000027AE:
	d1 = d0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	d2 = d3
	CVZN = cond(d2)
	call fn00002534 (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	call fn00002534 (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	goto l00002884
	// succ:  l00002884
l000027CA:
	v16 = d0 - d2
	CVZN = cond(v16)
	branch Test(ULT,C) l00002884
	// succ:  l000027D0 l00002884
l000027D0:
	d6 = d2
	CVZN = cond(d6)
	d4 = 24
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000027EE
	// succ:  l000027DA l000027EE
l000027DA:
	d4 = 16
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000027EE
	// succ:  l000027E2 l000027EE
l000027E2:
	d4 = 8
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000027EE
	// succ:  l000027EA l000027EE
l000027EA:
	d4 = 0
	CVZN = cond(d4)
	v20 = (byte) d2
	d6 = DPB(d6, v20, 0)
	CVZN = cond(v20)
	// succ:  l000027EE
l000027EE:
	a1 = 0x00003EAC
	v22 = (word16) d6 & 0x00FF
	d6 = DPB(d6, v22, 0)
	ZN = cond(v22)
	C = false
	V = false
	v23 = (byte) d4 + Mem0[a1 + d6:byte]
	d4 = DPB(d4, v23, 0)
	CVZNX = cond(v23)
	d5 = 32
	CVZN = cond(d5)
	d5 = d5 - d4
	CVZNX = cond(d5)
	branch Test(NE,Z) l00002810
	// succ:  l00002802 l00002810
l00002802:
	v25 = d2 - d0
	CVZN = cond(v25)
	branch Test(ULT,C) l0000280A
	// succ:  l00002806 l0000280A
l00002806:
	v26 = d3 - d1
	CVZN = cond(v26)
	branch Test(UGT,CZ) l00002884
	// succ:  l0000280A l00002884
l0000280A:
	d1 = d1 - d3
	CVZNX = cond(d1)
	d0 = d0 - d2 - X
	CVZNX = cond(d0)
	goto l00002884
	// succ:  l00002884
l00002810:
	d2 = d2 << d5
	CVZNX = cond(d2)
	d6 = d3
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d2 = d2 | d6
	ZN = cond(d2)
	C = false
	V = false
	d3 = d3 << d5
	CVZNX = cond(d3)
	d1 = d0
	CVZN = cond(d1)
	d0 = d0 >>u d4
	CVZNX = cond(d0)
	d1 = d1 << d5
	CVZNX = cond(d1)
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 << d5
	CVZNX = cond(d6)
	a0 = d6
	call fn00002534 (retsize: 4;)
	v32 = d2
	d2 = d0
	d0 = v32
	ZN = cond(d0)
	C = false
	V = false
	a1 = d3
	d4 = d2
	CVZN = cond(d4)
	d7 = d2
	CVZN = cond(d7)
	d6 = d3
	CVZN = cond(d6)
	d2 = d2 *u (word16) d3
	VZN = cond(d2)
	C = false
	d7 = __swap(d7)
	ZN = cond(d7)
	C = false
	V = false
	d3 = d3 *u (word16) d7
	VZN = cond(d3)
	C = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d4 = d4 *u (word16) d6
	VZN = cond(d4)
	C = false
	d7 = d7 *u (word16) d6
	VZN = cond(d7)
	C = false
	d6 = 0
	CVZN = cond(d6)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v33 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v33, 0)
	CVZNX = cond(v33)
	v34 = (word16) d6 + (word16) d7 + X
	d7 = DPB(d7, v34, 0)
	CVZNX = cond(v34)
	v35 = (word16) d2 + (word16) d4
	d2 = DPB(d2, v35, 0)
	CVZNX = cond(v35)
	v36 = (word16) d6 + (word16) d7 + X
	d7 = DPB(d7, v36, 0)
	CVZNX = cond(v36)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 + d4
	CVZNX = cond(d3)
	d3 = d3 + d7
	CVZNX = cond(d3)
	v40 = d1 - d2
	CVZN = cond(v40)
	branch Test(ULT,C) l0000286C
	// succ:  l00002866 l0000286C
l00002866:
	branch Test(NE,Z) l00002870
	// succ:  l00002868 l00002870
l00002868:
	v41 = a0 - d3
	CVZN = cond(v41)
	branch Test(UGE,C) l00002870
	// succ:  l0000286C l00002870
l0000286C:
	d3 = d3 - a1
	CVZNX = cond(d3)
	d2 = d2 - d0 - X
	CVZNX = cond(d2)
	// succ:  l00002870
l00002870:
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 - d3
	CVZNX = cond(d6)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d4 = 32
	CVZN = cond(d4)
	d4 = d4 - d5
	CVZNX = cond(d4)
	d1 = d1 << d4
	CVZNX = cond(d1)
	d6 = d6 >>u d5
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d0 = d0 >>u d5
	CVZNX = cond(d0)
	// succ:  l00002884
l00002884:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002778_exit
fn00002778_exit:


// fn00002BB8
// Return size: 4
void fn00002BB8()
fn00002BB8_entry:
	// succ:  l00002BB8
l00002BB8:
	a7 = fp
	a0 = a7 + 8
	a7 = a7 - 0x00000004
	v4 = a0
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	v6 = Mem0[a7 + 8:word32]
	a7 = a7 - 0x00000004
	v7 = v6
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	v8 = Mem0[0x00003FCC:word32]
	a7 = a7 - 0x00000004
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn00002C04 (retsize: 4;)
	a7 = a7 + 12
	return
	// succ:  fn00002BB8_exit
fn00002BB8_exit:


// fn00002BD4
// Return size: 4
void fn00002BD4()
fn00002BD4_entry:
	// succ:  l00002BD4
l00002BD4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a2 = Mem0[a7 + 12:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002BFE
	// succ:  l00002BE0 l00002BFE
l00002BE0:
	d0 = Mem0[a2 + 4:word32]
	CVZN = cond(d0)
	v7 = d0 - Mem0[a2 + 8:word32]
	CVZN = cond(v7)
	branch Test(UGE,C) l00002BF2
	// succ:  l00002BEA l00002BF2
l00002BEA:
	a0 = Mem0[a2 + 4:word32]
	v10 = Mem0[a7 + 11:byte]
	Mem0[a0:byte] = v10
	CVZN = cond(v10)
	// succ:  l00002BF2
l00002BF2:
	a0 = a2 + 20
	v12 = Mem0[a0:word32] + 0x00000001
	Mem0[a0:word32] = v12
	CVZNX = cond(v12)
	a0 = a2 + 4
	v14 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v14
	CVZNX = cond(v14)
	// succ:  l00002BFE
l00002BFE:
	v11 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v11
	return
	// succ:  fn00002BD4_exit
fn00002BD4_exit:


// fn00002C04
// Return size: 4
void fn00002C04()
fn00002C04_entry:
	// succ:  l00002C04
l00002C04:
	a7 = fp
	a7 = a7 + -76
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	a4 = Mem0[a7 + 128:word32]
	a2 = Mem0[a7 + 124:word32]
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d4 = 0
	CVZN = cond(d4)
	d5 = 0
	CVZN = cond(d5)
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00003C06
	// succ:  l00002C26 l00003C06
l00002C26:
	d3 = 0
	CVZN = cond(d3)
	v21 = Mem0[a4:byte] - 0x25
	CVZN = cond(v21)
	branch Test(NE,Z) l00003B04
	// succ:  l00002C30 l00003B04
l00002C30:
	d6 = -1
	CVZN = cond(d6)
	v22 = 0x69
	Mem0[a7 + 72:byte] = v22
	CVZN = cond(v22)
	Mem0[a7 + 73:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	a3 = a4 + 1
	d0 = 0
	CVZN = cond(d0)
	v25 = Mem0[a3:byte]
	d0 = DPB(d0, v25, 0)
	CVZN = cond(v25)
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v27 = Mem0[a0:byte]
	d0 = DPB(d0, v27, 0)
	CVZN = cond(v27)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002CB4
	// succ:  l00002C58 l00002CB4
l00002C58:
	d6 = 0
	CVZN = cond(d6)
	d0 = 0
	CVZN = cond(d0)
	v28 = Mem0[a3:byte]
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v29 = Mem0[a0:byte]
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002CB4
	// succ:  l00002C72 l00002CB4
l00002C72:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v30 = d2
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	d1 = d0
	CVZN = cond(d1)
	d2 = d6
	CVZN = cond(d2)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d1 = d1 *u (word16) d6
	VZN = cond(d1)
	C = false
	d2 = d2 *u (word16) d0
	VZN = cond(d2)
	C = false
	d0 = d0 *u (word16) d6
	VZN = cond(d0)
	C = false
	v33 = (word16) d1 + (word16) d2
	d1 = DPB(d1, v33, 0)
	CVZNX = cond(v33)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v36 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v36
	CVZN = cond(d2)
	d1 = 0
	CVZN = cond(d1)
	v37 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d6 = d1
	CVZN = cond(d6)
	d6 = d6 + d0
	CVZNX = cond(d6)
	d0 = 0
	CVZN = cond(d0)
	v38 = Mem0[a3:byte]
	d0 = DPB(d0, v38, 0)
	CVZN = cond(v38)
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v39 = Mem0[a0:byte]
	d0 = DPB(d0, v39, 0)
	CVZN = cond(v39)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00002C72
	// succ:  l00002CB4 l00002C72
l00002CB4:
	v40 = Mem0[a3:byte] - 0x68
	CVZN = cond(v40)
	branch Test(EQ,Z) l00002CDE
	// succ:  l00002CBA l00002CDE
l00002CBA:
	v41 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v41)
	branch Test(EQ,Z) l00002CDE
	// succ:  l00002CC0 l00002CDE
l00002CC0:
	v42 = Mem0[a3:byte] - 0x4C
	CVZN = cond(v42)
	branch Test(EQ,Z) l00002CDE
	// succ:  l00002CC6 l00002CDE
l00002CC6:
	v43 = Mem0[a3:byte] - 0x7A
	CVZN = cond(v43)
	branch Test(EQ,Z) l00002CDE
	// succ:  l00002CCC l00002CDE
l00002CCC:
	v44 = Mem0[a3:byte] - 0x6A
	CVZN = cond(v44)
	branch Test(EQ,Z) l00002CDE
	// succ:  l00002CD2 l00002CDE
l00002CD2:
	v45 = Mem0[a3:byte] - 0x74
	CVZN = cond(v45)
	branch Test(EQ,Z) l00002CDE
	// succ:  l00002CD8 l00002CDE
l00002CD8:
	v46 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v46)
	branch Test(NE,Z) l00002D46
	// succ:  l00002CDE l00002D46
l00002CDE:
	v47 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v47, 0)
	CVZN = cond(v47)
	v48 = Mem0[a7 + 72:byte]
	d1 = DPB(d1, v48, 0)
	CVZN = cond(v48)
	// succ:  l00002CE6
l00002CE6:
	v49 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v49)
	branch Test(NE,Z) l00002CF0
	// succ:  l00002CEC l00002CF0
l00002CEC:
	d7 = 1
	CVZN = cond(d7)
	goto l00002D12
	// succ:  l00002D12
l00002CF0:
	v51 = (byte) d1 - 0x68
	CVZN = cond(v51)
	branch Test(NE,Z) l00002D00
	// succ:  l00002CF6 l00002D00
l00002CF6:
	v52 = Mem0[a3:byte] - 0x68
	CVZN = cond(v52)
	branch Test(NE,Z) l00002D00
	// succ:  l00002CFC l00002D00
l00002CFC:
	d1 = 2
	CVZN = cond(d1)
	goto l00002D12
	// succ:  l00002D12
l00002D00:
	v62 = (byte) d1 - 0x6C
	CVZN = cond(v62)
	branch Test(NE,Z) l00002D10
	// succ:  l00002D06 l00002D10
l00002D06:
	v63 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v63)
	branch Test(NE,Z) l00002D10
	// succ:  l00002D0C l00002D10
l00002D0C:
	d1 = 1
	CVZN = cond(d1)
	goto l00002D12
	// succ:  l00002D12
l00002D10:
	v68 = Mem0[a3:byte]
	d1 = DPB(d1, v68, 0)
	CVZN = cond(v68)
	// succ:  l00002D12
l00002D12:
	a3 = a3 + 0x00000001
	v53 = Mem0[a3:byte] - 0x68
	CVZN = cond(v53)
	branch Test(EQ,Z) l00002CE6
	// succ:  l00002D1A l00002CE6
l00002D1A:
	v54 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v54)
	branch Test(EQ,Z) l00002CE6
	// succ:  l00002D20 l00002CE6
l00002D20:
	v55 = Mem0[a3:byte] - 0x4C
	CVZN = cond(v55)
	branch Test(EQ,Z) l00002CE6
	// succ:  l00002D26 l00002CE6
l00002D26:
	v56 = Mem0[a3:byte] - 0x7A
	CVZN = cond(v56)
	branch Test(EQ,Z) l00002CE6
	// succ:  l00002D2C l00002CE6
l00002D2C:
	v57 = Mem0[a3:byte] - 0x6A
	CVZN = cond(v57)
	branch Test(EQ,Z) l00002CE6
	// succ:  l00002D32 l00002CE6
l00002D32:
	v58 = Mem0[a3:byte] - 0x74
	CVZN = cond(v58)
	branch Test(EQ,Z) l00002CE6
	// succ:  l00002D38 l00002CE6
l00002D38:
	v59 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v59)
	branch Test(EQ,Z) l00002CE6
	// succ:  l00002D3E l00002CE6
l00002D3E:
	v60 = (byte) d1
	Mem0[a7 + 72:byte] = v60
	CVZN = cond(v60)
	v61 = (byte) d7
	Mem0[a7 + 73:byte] = v61
	CVZN = cond(v61)
	// succ:  l00002D46
l00002D46:
	v64 = Mem0[a7 + 72:byte] - 0x6A
	CVZN = cond(v64)
	branch Test(NE,Z) l00002D54
	// succ:  l00002D4E l00002D54
l00002D4E:
	v65 = 0x01
	Mem0[a7 + 72:byte] = v65
	CVZN = cond(v65)
	// succ:  l00002D54
l00002D54:
	v66 = Mem0[a7 + 72:byte] - 0x74
	CVZN = cond(v66)
	branch Test(NE,Z) l00002D62
	// succ:  l00002D5C l00002D62
l00002D5C:
	v67 = 0x69
	Mem0[a7 + 72:byte] = v67
	CVZN = cond(v67)
	// succ:  l00002D62
l00002D62:
	v69 = Mem0[a7 + 72:byte] - 0x7A
	CVZN = cond(v69)
	branch Test(NE,Z) l00002D70
	// succ:  l00002D6A l00002D70
l00002D6A:
	v70 = 0x6C
	Mem0[a7 + 72:byte] = v70
	CVZN = cond(v70)
	// succ:  l00002D70
l00002D70:
	v71 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d7 = DPB(d7, v71, 0)
	CVZN = cond(v71)
	branch Test(EQ,Z) l00002DE6
	// succ:  l00002D74 l00002DE6
l00002D74:
	v72 = (byte) d7 - 0x25
	CVZN = cond(v72)
	branch Test(EQ,Z) l00002DE6
	// succ:  l00002D7A l00002DE6
l00002D7A:
	v73 = (byte) d7 - 0x63
	CVZN = cond(v73)
	branch Test(EQ,Z) l00002DE6
	// succ:  l00002D80 l00002DE6
l00002D80:
	v74 = (byte) d7 - 0x6E
	CVZN = cond(v74)
	branch Test(EQ,Z) l00002DE6
	// succ:  l00002D86 l00002DE6
l00002D86:
	v75 = (byte) d7 - 0x5B
	CVZN = cond(v75)
	branch Test(EQ,Z) l00002DE6
	// succ:  l00002D8C l00002DE6
l00002D8C:
	a0 = a2 + 24
	v76 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v76
	ZN = cond(v76)
	C = false
	V = false
	a0 = a2 + 20
	v77 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v77
	CVZNX = cond(v77)
	branch Test(LT,CZ) l00002DB6
	// succ:  l00002D9E l00002DB6
l00002D9E:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v80 = a2
	Mem0[a7:word32] = v80
	CVZN = cond(v80)
	a2 = a0
	a2 = a2 + 0x00000001
	v81 = a2
	Mem0[a1:word32] = v81
	CVZN = cond(v81)
	v82 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v82
	v83 = Mem0[a0:byte]
	d0 = DPB(d0, v83, 0)
	CVZN = cond(v83)
	d1 = 0
	CVZN = cond(d1)
	v84 = (byte) d0
	d1 = DPB(d1, v84, 0)
	CVZN = cond(v84)
	goto l00002DC2
	// succ:  l00002DC2
l00002DB6:
	a7 = a7 - 0x00000004
	v112 = a2
	Mem0[a7:word32] = v112
	CVZN = cond(v112)
	call fn00003CA8 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0004
	// succ:  l00002DC2
l00002DC2:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v94 = (byte) d1
	d0 = DPB(d0, v94, 0)
	CVZN = cond(v94)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v95 = Mem0[a0:byte]
	d0 = DPB(d0, v95, 0)
	CVZN = cond(v95)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00002D8C
	// succ:  l00002DE4 l00002D8C
l00002DE4:
	d3 = 1
	CVZN = cond(d3)
	// succ:  l00002DE6
l00002DE6:
	v121 = (byte) d7
	d1 = DPB(d1, v121, 0)
	CVZN = cond(v121)
	v122 = (byte) d1 - 0x25
	d1 = DPB(d1, v122, 0)
	CVZNX = cond(v122)
	branch Test(EQ,Z) l00003232
	// succ:  l00002DF0 l00003232
l00002DF0:
	v123 = (byte) d1 - 0x36
	d1 = DPB(d1, v123, 0)
	CVZNX = cond(v123)
	branch Test(EQ,Z) l00002F2E
	// succ:  l00002DF8 l00002F2E
l00002DF8:
	v124 = (byte) d1 - 0x08
	d1 = DPB(d1, v124, 0)
	CVZNX = cond(v124)
	branch Test(EQ,Z) l00002E0E
	// succ:  l00002DFC l00002E0E
l00002DFC:
	v125 = (byte) d1 - 0x0B
	d1 = DPB(d1, v125, 0)
	CVZNX = cond(v125)
	branch Test(EQ,Z) l000032A0
	// succ:  l00002E04 l000032A0
l00002E04:
	v126 = (byte) d1 - 0x05
	d1 = DPB(d1, v126, 0)
	CVZNX = cond(v126)
	branch Test(EQ,Z) l0000314C
	// succ:  l00002E0A l0000314C
l00002E0A:
	goto l00003342
	// succ:  l00003342
l00002E0E:
	v212 = d6 - 0xFFFFFFFF
	CVZN = cond(v212)
	branch Test(NE,Z) l00002E18
	// succ:  l00002E16 l00002E18
l00002E16:
	d6 = 1
	CVZN = cond(d6)
	// succ:  l00002E18
l00002E18:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002E32
	// succ:  l00002E1E l00002E32
l00002E1E:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a1 = Mem0[a0 + -4:word32]
	goto l00002E34
	// succ:  l00002E34
l00002E32:
	a1 = a1 - a1
	CVZNX = cond(a1)
	// succ:  l00002E34
l00002E34:
	a0 = a2 + 24
	v230 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v230
	ZN = cond(v230)
	C = false
	V = false
	a0 = a2 + 20
	v231 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v231
	CVZNX = cond(v231)
	v232 = a1
	Mem0[a7 + 44:word32] = v232
	CVZN = cond(v232)
	ZN = cond(Mem0[a0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LT,CZ) l00002E6C
	// succ:  l00002E4C l00002E6C
l00002E4C:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v233 = a2
	Mem0[a7:word32] = v233
	CVZN = cond(v233)
	a2 = a0
	a2 = a2 + 0x00000001
	v234 = a2
	Mem0[a1:word32] = v234
	CVZN = cond(v234)
	v235 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v235
	v236 = Mem0[a0:byte]
	d0 = DPB(d0, v236, 0)
	CVZN = cond(v236)
	a7 = a7 - 0x00000004
	v237 = d1
	Mem0[a7:word32] = v237
	CVZN = cond(v237)
	d1 = 0
	CVZN = cond(d1)
	v238 = (byte) d0
	d1 = DPB(d1, v238, 0)
	CVZN = cond(v238)
	v239 = d1
	Mem0[a7 + 56:word32] = v239
	CVZN = cond(v239)
	v240 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v240
	CVZN = cond(d1)
	goto l00002E8A
	// succ:  l00002E8A
l00002E6C:
	a1 = Mem0[a7 + 44:word32]
	a7 = a7 - 0x00000004
	v270 = a2
	Mem0[a7:word32] = v270
	CVZN = cond(v270)
	v271 = a1
	Mem0[a7 + 48:word32] = v271
	CVZN = cond(v271)
	call fn00003CA8 (retsize: 4;)
	v272 = d0
	Mem0[a7 + 56:word32] = v272
	CVZN = cond(v272)
	a1 = Mem0[a7 + 48:word32]
	v273 = a1
	Mem0[a7 + 48:word32] = v273
	CVZN = cond(v273)
	a7 = a7 + 0x0004
	// succ:  l00002E8A
l00002E8A:
	a1 = Mem0[a7 + 44:word32]
	d5 = Mem0[a7 + 52:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v247 = Mem0[a7 + 52:word32] - 0xFFFFFFFF
	CVZN = cond(v247)
	branch Test(EQ,Z) l00002F02
	// succ:  l00002EA0 l00002F02
l00002EA0:
	v248 = a1
	Mem0[a7 + 44:word32] = v248
	CVZN = cond(v248)
	v249 = d6 - d3
	CVZN = cond(v249)
	branch Test(ULT,C) l00002F02
	// succ:  l00002EA8 l00002F02
l00002EA8:
	v250 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v250, 0)
	CVZN = cond(v250)
	a4 = Mem0[a7 + 44:word32]
	// succ:  l00002EB0
l00002EB0:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002EB6
	// succ:  l00002EB4 l00002EB6
l00002EB4:
	v251 = (byte) d5
	Mem0[a4:byte] = v251
	a4 = a4 + 0x00000001
	CVZN = cond(v251)
	// succ:  l00002EB6
l00002EB6:
	a0 = a2 + 24
	v256 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v256
	ZN = cond(v256)
	C = false
	V = false
	a0 = a2 + 20
	v257 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v257
	CVZNX = cond(v257)
	branch Test(LT,CZ) l00002EE0
	// succ:  l00002EC8 l00002EE0
l00002EC8:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v258 = a2
	Mem0[a7:word32] = v258
	CVZN = cond(v258)
	a2 = a0
	a2 = a2 + 0x00000001
	v259 = a2
	Mem0[a1:word32] = v259
	CVZN = cond(v259)
	v260 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v260
	v261 = Mem0[a0:byte]
	d0 = DPB(d0, v261, 0)
	CVZN = cond(v261)
	d1 = 0
	CVZN = cond(d1)
	v262 = (byte) d0
	d1 = DPB(d1, v262, 0)
	CVZN = cond(v262)
	goto l00002EEC
	// succ:  l00002EEC
l00002EE0:
	a7 = a7 - 0x00000004
	v266 = a2
	Mem0[a7:word32] = v266
	CVZN = cond(v266)
	call fn00003CA8 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0004
	// succ:  l00002EEC
l00002EEC:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v263 = d1 - 0xFFFFFFFF
	CVZN = cond(v263)
	branch Test(EQ,Z) l00002EFE
	// succ:  l00002EFA l00002EFE
l00002EFA:
	v264 = d6 - d3
	CVZN = cond(v264)
	branch Test(UGE,C) l00002EB0
	// succ:  l00002EFE l00002EB0
l00002EFE:
	v265 = (byte) d7
	Mem0[a7 + 73:byte] = v265
	CVZN = cond(v265)
	// succ:  l00002F02
l00002F02:
	v267 = d5 - 0xFFFFFFFF
	CVZN = cond(v267)
	branch Test(EQ,Z) l00002F14
	// succ:  l00002F0A l00002F14
l00002F0A:
	a7 = a7 - 0x00000004
	v268 = a2
	Mem0[a7:word32] = v268
	CVZN = cond(v268)
	a7 = a7 - 0x00000004
	v269 = d5
	Mem0[a7:word32] = v269
	CVZN = cond(v269)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00002F14
l00002F14:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003AFE
	// succ:  l00002F20 l00003AFE
l00002F20:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003AFE
	// succ:  l00002F26 l00003AFE
l00002F26:
	v278 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v278
	CVZNX = cond(v278)
	goto l00003AFE
	// succ:  l00003AFE
l00002F2E:
	Mem0[a7 + 44:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v450 = Mem0[a3:byte] - 0x5E
	CVZN = cond(v450)
	branch Test(NE,Z) l00002F40
	// succ:  l00002F38 l00002F40
l00002F38:
	v451 = 0x01
	Mem0[a7 + 44:byte] = v451
	CVZN = cond(v451)
	a3 = a3 + 0x00000001
	// succ:  l00002F40
l00002F40:
	Mem0[a7 + 52:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v461 = Mem0[a7 + 44:byte]
	d7 = DPB(d7, v461, 0)
	CVZN = cond(v461)
	d1 = Mem0[a7 + 52:word32]
	CVZN = cond(d1)
	// succ:  l00002F4C
l00002F4C:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00002F58
	// succ:  l00002F50 l00002F58
l00002F50:
	d5 = 0x000000FF
	CVZN = cond(d5)
	goto l00002F5A
	// succ:  l00002F5A
l00002F58:
	d5 = 0
	CVZN = cond(d5)
	// succ:  l00002F5A
l00002F5A:
	a0 = a7 + 78
	v466 = (byte) d5
	Mem0[a5 + d1:byte] = v466
	CVZN = cond(v466)
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v467 = d1 - 0x00000020
	CVZN = cond(v467)
	branch Test(ULT,C) l00002F4C
	// succ:  l00002F6C l00002F4C
l00002F6C:
	v468 = d2
	Mem0[a7 + 132:word32] = v468
	CVZN = cond(v468)
	v469 = (byte) d7
	Mem0[a7 + 44:byte] = v469
	CVZN = cond(v469)
	v470 = Mem0[a7 + 44:byte]
	d2 = DPB(d2, v470, 0)
	CVZN = cond(v470)
	// succ:  l00002F78
l00002F78:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00002FEE
	// succ:  l00002F7C l00002FEE
l00002F7C:
	v471 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d1 = DPB(d1, v471, 0)
	CVZN = cond(v471)
	v472 = Mem0[a3:byte] - 0x2D
	CVZN = cond(v472)
	branch Test(NE,Z) l00002F90
	// succ:  l00002F84 l00002F90
l00002F84:
	v473 = (byte) d1 - Mem0[a3 + 1:byte]
	CVZN = cond(v473)
	branch Test(UGE,C) l00002F90
	// succ:  l00002F8A l00002F90
l00002F8A:
	a3 = a3 + 0x00000001
	v474 = Mem0[a3:byte]
	a3 = a3 + 0x00000001
	d7 = DPB(d7, v474, 0)
	CVZN = cond(v474)
	goto l00002F92
	// succ:  l00002F92
l00002F90:
	v481 = (byte) d1
	d7 = DPB(d7, v481, 0)
	CVZN = cond(v481)
	// succ:  l00002F92
l00002F92:
	d5 = 0
	CVZN = cond(d5)
	v476 = (byte) d1
	d5 = DPB(d5, v476, 0)
	CVZN = cond(v476)
	d0 = 0
	CVZN = cond(d0)
	v477 = (byte) d7
	d0 = DPB(d0, v477, 0)
	CVZN = cond(v477)
	v478 = d0 - d5
	CVZN = cond(v478)
	branch Test(ULT,C) l00002FE8
	// succ:  l00002F9E l00002FE8
l00002F9E:
	ZN = cond((byte) d2 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00002FC2
	// succ:  l00002FA2 l00002FC2
l00002FA2:
	a0 = a7 + 78
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 >>u 0x00000003
	CVZNX = cond(d0)
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d0 = ~d0
	ZN = cond(d0)
	C = false
	V = false
	d1 = 0
	CVZN = cond(d1)
	v479 = Mem0[a0:byte]
	d1 = DPB(d1, v479, 0)
	CVZN = cond(v479)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	v480 = (byte) d0
	Mem0[a0:byte] = v480
	CVZN = cond(v480)
	goto l00002FDE
	// succ:  l00002FDE
l00002FC2:
	a0 = a7 + 78
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 >>u 0x00000003
	CVZNX = cond(d0)
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v485 = Mem0[a0:byte]
	d1 = DPB(d1, v485, 0)
	CVZN = cond(v485)
	d0 = d0 | d1
	ZN = cond(d0)
	C = false
	V = false
	v486 = (byte) d0
	Mem0[a0:byte] = v486
	CVZN = cond(v486)
	// succ:  l00002FDE
l00002FDE:
	d5 = d5 + 0x00000001
	CVZNX = cond(d5)
	d0 = 0
	CVZN = cond(d0)
	v482 = (byte) d7
	d0 = DPB(d0, v482, 0)
	CVZN = cond(v482)
	v483 = d0 - d5
	CVZN = cond(v483)
	branch Test(UGE,C) l00002F9E
	// succ:  l00002FE8 l00002F9E
l00002FE8:
	v484 = Mem0[a3:byte] - 0x5D
	CVZN = cond(v484)
	branch Test(NE,Z) l00002F78
	// succ:  l00002FEE l00002F78
l00002FEE:
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	a3 = a3 + 0x00000001
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000300E
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	a3 = a3 + 0x00000001
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000300E
	// succ:  l00002FFA l0000300E
l00002FFA:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a6 = Mem0[a0 + -4:word32]
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a6 = Mem0[a0 + -4:word32]
	goto l00003010
	// succ:  l00003010
l0000300E:
	a6 = a6 - a6
	CVZNX = cond(a6)
	// succ:  l00003010
l00003010:
	a0 = a2 + 24
	v487 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v487
	ZN = cond(v487)
	C = false
	V = false
	a0 = a2 + 20
	v488 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v488
	CVZNX = cond(v488)
	branch Test(LT,CZ) l00003042
	// succ:  l00003022 l00003042
l00003022:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v489 = a2
	Mem0[a7:word32] = v489
	CVZN = cond(v489)
	a2 = a0
	a2 = a2 + 0x00000001
	v490 = a2
	Mem0[a1:word32] = v490
	CVZN = cond(v490)
	v491 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v491
	v492 = Mem0[a0:byte]
	d0 = DPB(d0, v492, 0)
	CVZN = cond(v492)
	a7 = a7 - 0x00000004
	v493 = d1
	Mem0[a7:word32] = v493
	CVZN = cond(v493)
	d1 = 0
	CVZN = cond(d1)
	v494 = (byte) d0
	d1 = DPB(d1, v494, 0)
	CVZN = cond(v494)
	v495 = d1
	Mem0[a7 + 48:word32] = v495
	CVZN = cond(v495)
	v496 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v496
	CVZN = cond(d1)
	goto l00003050
	// succ:  l00003050
l00003042:
	a7 = a7 - 0x00000004
	v507 = a2
	Mem0[a7:word32] = v507
	CVZN = cond(v507)
	call fn00003CA8 (retsize: 4;)
	v508 = d0
	Mem0[a7 + 48:word32] = v508
	CVZN = cond(v508)
	a7 = a7 + 0x0004
	// succ:  l00003050
l00003050:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v497 = Mem0[a7 + 44:word32] - 0xFFFFFFFF
	CVZN = cond(v497)
	branch Test(EQ,Z) l0000311E
	// succ:  l00003064 l0000311E
l00003064:
	a0 = a7 + 78
	a7 = a7 - 0x00000004
	v498 = a0
	Mem0[a7:word32] = v498
	CVZN = cond(v498)
	a7 = a7 - 0x00000004
	v499 = a1
	Mem0[a7:word32] = v499
	CVZN = cond(v499)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000008
	a7 = a7 - 0x00000004
	v500 = d5
	Mem0[a7:word32] = v500
	CVZN = cond(v500)
	call fn000026C0 (retsize: 4;)
	a7 = a7 + 0x0008
	v501 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = v501
	v502 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a0 = v502
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v503 = Mem0[a0:byte]
	d1 = DPB(d1, v503, 0)
	CVZN = cond(v503)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000311E
	// succ:  l00003094 l0000311E
l00003094:
	v504 = d6 - d3
	CVZN = cond(v504)
	branch Test(ULT,C) l0000311E
	// succ:  l0000309A l0000311E
l0000309A:
	v505 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v505, 0)
	CVZN = cond(v505)
	// succ:  l0000309E
l0000309E:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000030A4
	// succ:  l000030A2 l000030A4
l000030A2:
	v506 = (byte) d5
	Mem0[a6:byte] = v506
	a6 = a6 + 0x00000001
	CVZN = cond(v506)
	// succ:  l000030A4
l000030A4:
	a0 = a2 + 24
	v509 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v509
	ZN = cond(v509)
	C = false
	V = false
	a0 = a2 + 20
	v510 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v510
	CVZNX = cond(v510)
	branch Test(LT,CZ) l000030CE
	// succ:  l000030B6 l000030CE
l000030B6:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v511 = a2
	Mem0[a7:word32] = v511
	CVZN = cond(v511)
	a2 = a0
	a2 = a2 + 0x00000001
	v512 = a2
	Mem0[a1:word32] = v512
	CVZN = cond(v512)
	v513 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v513
	v514 = Mem0[a0:byte]
	d0 = DPB(d0, v514, 0)
	CVZN = cond(v514)
	d1 = 0
	CVZN = cond(d1)
	v515 = (byte) d0
	d1 = DPB(d1, v515, 0)
	CVZN = cond(v515)
	goto l000030DA
	// succ:  l000030DA
l000030CE:
	a7 = a7 - 0x00000004
	v528 = a2
	Mem0[a7:word32] = v528
	CVZN = cond(v528)
	call fn00003CA8 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0004
	// succ:  l000030DA
l000030DA:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v519 = d1 - 0xFFFFFFFF
	CVZN = cond(v519)
	branch Test(EQ,Z) l0000311A
	// succ:  l000030E8 l0000311A
l000030E8:
	a0 = a7 + 78
	a7 = a7 - 0x00000004
	v520 = a0
	Mem0[a7:word32] = v520
	CVZN = cond(v520)
	a7 = a7 - 0x00000004
	v521 = a1
	Mem0[a7:word32] = v521
	CVZN = cond(v521)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000008
	a7 = a7 - 0x00000004
	v522 = d5
	Mem0[a7:word32] = v522
	CVZN = cond(v522)
	call fn000026C0 (retsize: 4;)
	a7 = a7 + 0x0008
	v523 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = v523
	v524 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a0 = v524
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v525 = Mem0[a0:byte]
	d1 = DPB(d1, v525, 0)
	CVZN = cond(v525)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000311A
	// succ:  l00003116 l0000311A
l00003116:
	v526 = d6 - d3
	CVZN = cond(v526)
	branch Test(UGE,C) l0000309E
	// succ:  l0000311A l0000309E
l0000311A:
	v527 = (byte) d7
	Mem0[a7 + 73:byte] = v527
	CVZN = cond(v527)
	// succ:  l0000311E
l0000311E:
	v516 = d5 - 0xFFFFFFFF
	CVZN = cond(v516)
	branch Test(EQ,Z) l00003130
	// succ:  l00003126 l00003130
l00003126:
	a7 = a7 - 0x00000004
	v517 = a2
	Mem0[a7:word32] = v517
	CVZN = cond(v517)
	a7 = a7 - 0x00000004
	v518 = d5
	Mem0[a7:word32] = v518
	CVZN = cond(v518)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00003130
l00003130:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003AFE
	// succ:  l0000313C l00003AFE
l0000313C:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003AFE
	// succ:  l00003142 l00003AFE
l00003142:
	Mem0[a6:byte] = 0x00
	a6 = a6 + 0x00000001
	Z = true
	C = false
	N = false
	V = false
	v529 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v529
	CVZNX = cond(v529)
	goto l00003AFE
	// succ:  l00003AFE
l0000314C:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003166
	// succ:  l00003152 l00003166
l00003152:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a5 = Mem0[a0 + -4:word32]
	goto l00003168
	// succ:  l00003168
l00003166:
	a5 = a5 - a5
	CVZNX = cond(a5)
	// succ:  l00003168
l00003168:
	v151 = d5 - 0xFFFFFFFF
	CVZN = cond(v151)
	branch Test(EQ,Z) l00003204
	// succ:  l00003172 l00003204
l00003172:
	v152 = (byte) d5
	d0 = DPB(d0, v152, 0)
	CVZN = cond(v152)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v153 = Mem0[a0:byte]
	d0 = DPB(d0, v153, 0)
	CVZN = cond(v153)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00003204
	// succ:  l0000318E l00003204
l0000318E:
	v154 = d6 - d3
	CVZN = cond(v154)
	branch Test(ULT,C) l00003204
	// succ:  l00003192 l00003204
l00003192:
	v155 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v155, 0)
	CVZN = cond(v155)
	// succ:  l00003196
l00003196:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000319C
	// succ:  l0000319A l0000319C
l0000319A:
	v156 = (byte) d5
	Mem0[a5:byte] = v156
	a5 = a5 + 0x00000001
	CVZN = cond(v156)
	// succ:  l0000319C
l0000319C:
	a0 = a2 + 24
	v160 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v160
	ZN = cond(v160)
	C = false
	V = false
	a0 = a2 + 20
	v161 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v161
	CVZNX = cond(v161)
	branch Test(LT,CZ) l000031C6
	// succ:  l000031AE l000031C6
l000031AE:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v162 = a2
	Mem0[a7:word32] = v162
	CVZN = cond(v162)
	a2 = a0
	a2 = a2 + 0x00000001
	v163 = a2
	Mem0[a1:word32] = v163
	CVZN = cond(v163)
	v164 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v164
	v165 = Mem0[a0:byte]
	d0 = DPB(d0, v165, 0)
	CVZN = cond(v165)
	d1 = 0
	CVZN = cond(d1)
	v166 = (byte) d0
	d1 = DPB(d1, v166, 0)
	CVZN = cond(v166)
	goto l000031D2
	// succ:  l000031D2
l000031C6:
	a7 = a7 - 0x00000004
	v176 = a2
	Mem0[a7:word32] = v176
	CVZN = cond(v176)
	call fn00003CA8 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0004
	// succ:  l000031D2
l000031D2:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v169 = d1 - 0xFFFFFFFF
	CVZN = cond(v169)
	branch Test(EQ,Z) l00003200
	// succ:  l000031E0 l00003200
l000031E0:
	v170 = (byte) d5
	d0 = DPB(d0, v170, 0)
	CVZN = cond(v170)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v171 = Mem0[a0:byte]
	d0 = DPB(d0, v171, 0)
	CVZN = cond(v171)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00003200
	// succ:  l000031FC l00003200
l000031FC:
	v172 = d6 - d3
	CVZN = cond(v172)
	branch Test(UGE,C) l00003196
	// succ:  l00003200 l00003196
l00003200:
	v173 = (byte) d7
	Mem0[a7 + 73:byte] = v173
	CVZN = cond(v173)
	// succ:  l00003204
l00003204:
	v178 = d5 - 0xFFFFFFFF
	CVZN = cond(v178)
	branch Test(EQ,Z) l00003216
	// succ:  l0000320C l00003216
l0000320C:
	a7 = a7 - 0x00000004
	v179 = a2
	Mem0[a7:word32] = v179
	CVZN = cond(v179)
	a7 = a7 - 0x00000004
	v180 = d5
	Mem0[a7:word32] = v180
	CVZN = cond(v180)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00003216
l00003216:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003AFE
	// succ:  l00003222 l00003AFE
l00003222:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003AFE
	// succ:  l00003228 l00003AFE
l00003228:
	Mem0[a5:byte] = 0x00
	a5 = a5 + 0x00000001
	Z = true
	C = false
	N = false
	V = false
	v196 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v196
	CVZNX = cond(v196)
	goto l00003AFE
	// succ:  l00003AFE
l00003232:
	a0 = a2 + 24
	v127 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v127
	ZN = cond(v127)
	C = false
	V = false
	a0 = a2 + 20
	v128 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v128
	CVZNX = cond(v128)
	branch Test(LT,CZ) l00003264
	// succ:  l00003244 l00003264
l00003244:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v129 = a2
	Mem0[a7:word32] = v129
	CVZN = cond(v129)
	a2 = a0
	a2 = a2 + 0x00000001
	v130 = a2
	Mem0[a1:word32] = v130
	CVZN = cond(v130)
	v131 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v131
	v132 = Mem0[a0:byte]
	d0 = DPB(d0, v132, 0)
	CVZN = cond(v132)
	a7 = a7 - 0x00000004
	v133 = d1
	Mem0[a7:word32] = v133
	CVZN = cond(v133)
	d1 = 0
	CVZN = cond(d1)
	v134 = (byte) d0
	d1 = DPB(d1, v134, 0)
	CVZN = cond(v134)
	v135 = d1
	Mem0[a7 + 48:word32] = v135
	CVZN = cond(v135)
	v136 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v136
	CVZN = cond(d1)
	goto l00003272
	// succ:  l00003272
l00003264:
	a7 = a7 - 0x00000004
	v144 = a2
	Mem0[a7:word32] = v144
	CVZN = cond(v144)
	call fn00003CA8 (retsize: 4;)
	v145 = d0
	Mem0[a7 + 48:word32] = v145
	CVZN = cond(v145)
	a7 = a7 + 0x0004
	// succ:  l00003272
l00003272:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v140 = Mem0[a7 + 44:word32] - 0x00000025
	CVZN = cond(v140)
	branch Test(EQ,Z) l00003AFE
	// succ:  l00003286 l00003AFE
l00003286:
	v141 = d5 - 0xFFFFFFFF
	CVZN = cond(v141)
	branch Test(EQ,Z) l00003298
	// succ:  l0000328E l00003298
l0000328E:
	a7 = a7 - 0x00000004
	v142 = a2
	Mem0[a7:word32] = v142
	CVZN = cond(v142)
	a7 = a7 - 0x00000004
	v143 = d5
	Mem0[a7:word32] = v143
	CVZN = cond(v143)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00003298
l00003298:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l00003AFE
	// succ:  l00003AFE
l000032A0:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003338
	// succ:  l000032A8 l00003338
l000032A8:
	v148 = Mem0[a7 + 72:byte] - 0x01
	CVZN = cond(v148)
	branch Test(NE,Z) l000032CA
	// succ:  l000032B0 l000032CA
l000032B0:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v149 = d4
	Mem0[a0 + 4:word32] = v149
	CVZN = cond(v149)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00003338
	// succ:  l00003338
l000032CA:
	v157 = Mem0[a7 + 72:byte] - 0x6C
	CVZN = cond(v157)
	branch Test(NE,Z) l000032E8
	// succ:  l000032D2 l000032E8
l000032D2:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v158 = d4
	Mem0[a0:word32] = v158
	CVZN = cond(v158)
	goto l00003338
	// succ:  l00003338
l000032E8:
	v167 = Mem0[a7 + 72:byte] - 0x68
	CVZN = cond(v167)
	branch Test(NE,Z) l00003306
	// succ:  l000032F0 l00003306
l000032F0:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v168 = (word16) d4
	Mem0[a0:word16] = v168
	CVZN = cond(v168)
	goto l00003338
	// succ:  l00003338
l00003306:
	v174 = Mem0[a7 + 72:byte] - 0x02
	CVZN = cond(v174)
	branch Test(NE,Z) l00003324
	// succ:  l0000330E l00003324
l0000330E:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v175 = (byte) d4
	Mem0[a0:byte] = v175
	CVZN = cond(v175)
	goto l00003338
	// succ:  l00003338
l00003324:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v177 = d4
	Mem0[a0:word32] = v177
	CVZN = cond(v177)
	// succ:  l00003338
l00003338:
	d3 = 1
	CVZN = cond(d3)
	v159 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v159
	CVZNX = cond(v159)
	goto l00003AFE
	// succ:  l00003AFE
l00003342:
	Mem0[a7 + 48:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 44:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 110:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003354
	// succ:  l00003352 l00003354
l00003352:
	a3 = a3 - 0x00000001
	// succ:  l00003354
l00003354:
	v146 = (byte) d7 - 0x70
	CVZN = cond(v146)
	branch Test(NE,Z) l00003362
	// succ:  l0000335A l00003362
l0000335A:
	v147 = 0x6C
	Mem0[a7 + 72:byte] = v147
	CVZN = cond(v147)
	d7 = 120
	CVZN = cond(d7)
	// succ:  l00003362
l00003362:
	v181 = d5 - 0x0000002D
	CVZN = cond(v181)
	branch Test(NE,Z) l00003370
	// succ:  l0000336A l00003370
l0000336A:
	v182 = (byte) d7 - 0x75
	CVZN = cond(v182)
	branch Test(NE,Z) l00003378
	// succ:  l00003370 l00003378
l00003370:
	v183 = d5 - 0x0000002B
	CVZN = cond(v183)
	branch Test(NE,Z) l000033C8
	// succ:  l00003378 l000033C8
l00003378:
	v184 = d6 - d3
	CVZN = cond(v184)
	branch Test(ULT,C) l000033C8
	// succ:  l0000337C l000033C8
l0000337C:
	v185 = d5
	Mem0[a7 + 110:word32] = v185
	CVZN = cond(v185)
	a0 = a2 + 24
	v186 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v186
	ZN = cond(v186)
	C = false
	V = false
	a0 = a2 + 20
	v187 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v187
	CVZNX = cond(v187)
	branch Test(LT,CZ) l000033B2
	// succ:  l00003392 l000033B2
l00003392:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v188 = a2
	Mem0[a7:word32] = v188
	CVZN = cond(v188)
	a2 = a0
	a2 = a2 + 0x00000001
	v189 = a2
	Mem0[a1:word32] = v189
	CVZN = cond(v189)
	v190 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v190
	v191 = Mem0[a0:byte]
	d0 = DPB(d0, v191, 0)
	CVZN = cond(v191)
	a7 = a7 - 0x00000004
	v192 = d1
	Mem0[a7:word32] = v192
	CVZN = cond(v192)
	d1 = 0
	CVZN = cond(d1)
	v193 = (byte) d0
	d1 = DPB(d1, v193, 0)
	CVZN = cond(v193)
	v194 = d1
	Mem0[a7 + 56:word32] = v194
	CVZN = cond(v194)
	v195 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v195
	CVZN = cond(d1)
	goto l000033C0
	// succ:  l000033C0
l000033B2:
	a7 = a7 - 0x00000004
	v197 = a2
	Mem0[a7:word32] = v197
	CVZN = cond(v197)
	call fn00003CA8 (retsize: 4;)
	v198 = d0
	Mem0[a7 + 56:word32] = v198
	CVZN = cond(v198)
	a7 = a7 + 0x0004
	// succ:  l000033C0
l000033C0:
	d5 = Mem0[a7 + 52:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	// succ:  l000033C8
l000033C8:
	v199 = (byte) d7 - 0x69
	CVZN = cond(v199)
	branch Test(NE,Z) l0000353A
	// succ:  l000033D0 l0000353A
l000033D0:
	v200 = d5 - 0x00000030
	CVZN = cond(v200)
	branch Test(NE,Z) l000034FC
	// succ:  l000033DA l000034FC
l000033DA:
	v201 = d6 - d3
	CVZN = cond(v201)
	branch Test(ULT,C) l000034FC
	// succ:  l000033E0 l000034FC
l000033E0:
	a0 = a2 + 24
	v202 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v202
	ZN = cond(v202)
	C = false
	V = false
	a0 = a2 + 20
	v203 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v203
	CVZNX = cond(v203)
	branch Test(LT,CZ) l00003412
	// succ:  l000033F2 l00003412
l000033F2:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v204 = a2
	Mem0[a7:word32] = v204
	CVZN = cond(v204)
	a2 = a0
	a2 = a2 + 0x00000001
	v205 = a2
	Mem0[a1:word32] = v205
	CVZN = cond(v205)
	v206 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v206
	v207 = Mem0[a0:byte]
	d0 = DPB(d0, v207, 0)
	CVZN = cond(v207)
	a7 = a7 - 0x00000004
	v208 = d1
	Mem0[a7:word32] = v208
	CVZN = cond(v208)
	d1 = 0
	CVZN = cond(d1)
	v209 = (byte) d0
	d1 = DPB(d1, v209, 0)
	CVZN = cond(v209)
	v210 = d1
	Mem0[a7 + 56:word32] = v210
	CVZN = cond(v210)
	v211 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v211
	CVZN = cond(d1)
	goto l00003420
	// succ:  l00003420
l00003412:
	a7 = a7 - 0x00000004
	v216 = a2
	Mem0[a7:word32] = v216
	CVZN = cond(v216)
	call fn00003CA8 (retsize: 4;)
	v217 = d0
	Mem0[a7 + 56:word32] = v217
	CVZN = cond(v217)
	a7 = a7 + 0x0004
	// succ:  l00003420
l00003420:
	v213 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v213
	CVZN = cond(v213)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v214 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v214, 0)
	CVZN = cond(v214)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288C
	Z = __btst(Mem0[a0 + 1 + d0:byte], 0x0000)
	branch Test(EQ,Z) l00003446
	// succ:  l00003442 l00003446
l00003442:
	v215 = (byte) d0 | 0x20
	d0 = DPB(d0, v215, 0)
	ZN = cond(v215)
	C = false
	V = false
	// succ:  l00003446
l00003446:
	v218 = d0 - 0x00000078
	CVZN = cond(v218)
	branch Test(NE,Z) l000034DE
	// succ:  l00003450 l000034DE
l00003450:
	v219 = d6 - d3
	CVZN = cond(v219)
	branch Test(ULT,C) l000034DE
	// succ:  l00003456 l000034DE
l00003456:
	a0 = a2 + 24
	v220 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v220
	ZN = cond(v220)
	C = false
	V = false
	a0 = a2 + 20
	v221 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v221
	CVZNX = cond(v221)
	branch Test(LT,CZ) l00003488
	// succ:  l00003468 l00003488
l00003468:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v222 = a2
	Mem0[a7:word32] = v222
	CVZN = cond(v222)
	a2 = a0
	a2 = a2 + 0x00000001
	v223 = a2
	Mem0[a1:word32] = v223
	CVZN = cond(v223)
	v224 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v224
	v225 = Mem0[a0:byte]
	d0 = DPB(d0, v225, 0)
	CVZN = cond(v225)
	a7 = a7 - 0x00000004
	v226 = d1
	Mem0[a7:word32] = v226
	CVZN = cond(v226)
	d1 = 0
	CVZN = cond(d1)
	v227 = (byte) d0
	d1 = DPB(d1, v227, 0)
	CVZN = cond(v227)
	v228 = d1
	Mem0[a7 + 56:word32] = v228
	CVZN = cond(v228)
	v229 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v229
	CVZN = cond(d1)
	goto l00003496
	// succ:  l00003496
l00003488:
	a7 = a7 - 0x00000004
	v245 = a2
	Mem0[a7:word32] = v245
	CVZN = cond(v245)
	call fn00003CA8 (retsize: 4;)
	v246 = d0
	Mem0[a7 + 56:word32] = v246
	CVZN = cond(v246)
	a7 = a7 + 0x0004
	// succ:  l00003496
l00003496:
	v241 = Mem0[a7 + 52:word32]
	Mem0[a7 + 74:word32] = v241
	CVZN = cond(v241)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v242 = (byte) d5
	d0 = DPB(d0, v242, 0)
	CVZN = cond(v242)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v243 = Mem0[a0:byte]
	d0 = DPB(d0, v243, 0)
	CVZN = cond(v243)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000034C2
	// succ:  l000034BC l000034C2
l000034BC:
	v244 = d6 - d3
	CVZN = cond(v244)
	branch Test(ULT,C) l000034C2
	// succ:  l000034C0 l000034C2
l000034C0:
	d7 = 120
	CVZN = cond(d7)
	// succ:  l000034C2
l000034C2:
	v252 = Mem0[a7 + 74:word32] - 0xFFFFFFFF
	CVZN = cond(v252)
	branch Test(EQ,Z) l000034D8
	// succ:  l000034CC l000034D8
l000034CC:
	a7 = a7 - 0x00000004
	v253 = a2
	Mem0[a7:word32] = v253
	CVZN = cond(v253)
	v254 = Mem0[a7 + 78:word32]
	a7 = a7 - 0x00000004
	v255 = v254
	Mem0[a7:word32] = v255
	CVZN = cond(v255)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l000034D8
l000034D8:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l000034E0
	// succ:  l000034E0
l000034DE:
	d7 = 111
	CVZN = cond(d7)
	// succ:  l000034E0
l000034E0:
	v274 = Mem0[a7 + 64:word32] - 0xFFFFFFFF
	CVZN = cond(v274)
	branch Test(EQ,Z) l000034F6
	// succ:  l000034EA l000034F6
l000034EA:
	a7 = a7 - 0x00000004
	v275 = a2
	Mem0[a7:word32] = v275
	CVZN = cond(v275)
	v276 = Mem0[a7 + 68:word32]
	a7 = a7 - 0x00000004
	v277 = v276
	Mem0[a7:word32] = v277
	CVZN = cond(v277)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l000034F6
l000034F6:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l0000353A
	// succ:  l0000353A
l000034FC:
	v279 = (byte) d5
	d0 = DPB(d0, v279, 0)
	CVZN = cond(v279)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v280 = Mem0[a0:byte]
	d0 = DPB(d0, v280, 0)
	CVZN = cond(v280)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l0000353A
	// succ:  l00003518 l0000353A
l00003518:
	v281 = (byte) d5
	d0 = DPB(d0, v281, 0)
	CVZN = cond(v281)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v282 = Mem0[a0:byte]
	d0 = DPB(d0, v282, 0)
	CVZN = cond(v282)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000353A
	// succ:  l00003534 l0000353A
l00003534:
	v283 = d6 - d3
	CVZN = cond(v283)
	branch Test(ULT,C) l0000353A
	// succ:  l00003538 l0000353A
l00003538:
	d7 = 120
	CVZN = cond(d7)
	// succ:  l0000353A
l0000353A:
	v284 = (byte) d7 - 0x78
	CVZN = cond(v284)
	branch Test(NE,Z) l0000366E
	// succ:  l00003542 l0000366E
l00003542:
	v285 = d5 - 0x00000030
	CVZN = cond(v285)
	branch Test(NE,Z) l0000366E
	// succ:  l0000354C l0000366E
l0000354C:
	v286 = d6 - d3
	CVZN = cond(v286)
	branch Test(ULT,C) l0000366E
	// succ:  l00003552 l0000366E
l00003552:
	a0 = a2 + 24
	v287 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v287
	ZN = cond(v287)
	C = false
	V = false
	a0 = a2 + 20
	v288 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v288
	CVZNX = cond(v288)
	branch Test(LT,CZ) l00003584
	// succ:  l00003564 l00003584
l00003564:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v289 = a2
	Mem0[a7:word32] = v289
	CVZN = cond(v289)
	a2 = a0
	a2 = a2 + 0x00000001
	v290 = a2
	Mem0[a1:word32] = v290
	CVZN = cond(v290)
	v291 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v291
	v292 = Mem0[a0:byte]
	d0 = DPB(d0, v292, 0)
	CVZN = cond(v292)
	a7 = a7 - 0x00000004
	v293 = d1
	Mem0[a7:word32] = v293
	CVZN = cond(v293)
	d1 = 0
	CVZN = cond(d1)
	v294 = (byte) d0
	d1 = DPB(d1, v294, 0)
	CVZN = cond(v294)
	v295 = d1
	Mem0[a7 + 56:word32] = v295
	CVZN = cond(v295)
	v296 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v296
	CVZN = cond(d1)
	goto l00003592
	// succ:  l00003592
l00003584:
	a7 = a7 - 0x00000004
	v300 = a2
	Mem0[a7:word32] = v300
	CVZN = cond(v300)
	call fn00003CA8 (retsize: 4;)
	v301 = d0
	Mem0[a7 + 56:word32] = v301
	CVZN = cond(v301)
	a7 = a7 + 0x0004
	// succ:  l00003592
l00003592:
	v297 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v297
	CVZN = cond(v297)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v298 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v298, 0)
	CVZN = cond(v298)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288C
	Z = __btst(Mem0[a0 + 1 + d0:byte], 0x0000)
	branch Test(EQ,Z) l000035B8
	// succ:  l000035B4 l000035B8
l000035B4:
	v299 = (byte) d0 | 0x20
	d0 = DPB(d0, v299, 0)
	ZN = cond(v299)
	C = false
	V = false
	// succ:  l000035B8
l000035B8:
	v302 = d0 - 0x00000078
	CVZN = cond(v302)
	branch Test(NE,Z) l00003654
	// succ:  l000035C2 l00003654
l000035C2:
	v303 = d6 - d3
	CVZN = cond(v303)
	branch Test(ULT,C) l00003654
	// succ:  l000035C8 l00003654
l000035C8:
	a0 = a2 + 24
	v304 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v304
	ZN = cond(v304)
	C = false
	V = false
	a0 = a2 + 20
	v305 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v305
	CVZNX = cond(v305)
	branch Test(LT,CZ) l000035FA
	// succ:  l000035DA l000035FA
l000035DA:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v306 = a2
	Mem0[a7:word32] = v306
	CVZN = cond(v306)
	a2 = a0
	a2 = a2 + 0x00000001
	v307 = a2
	Mem0[a1:word32] = v307
	CVZN = cond(v307)
	v308 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v308
	v309 = Mem0[a0:byte]
	d0 = DPB(d0, v309, 0)
	CVZN = cond(v309)
	a7 = a7 - 0x00000004
	v310 = d1
	Mem0[a7:word32] = v310
	CVZN = cond(v310)
	d1 = 0
	CVZN = cond(d1)
	v311 = (byte) d0
	d1 = DPB(d1, v311, 0)
	CVZN = cond(v311)
	v312 = d1
	Mem0[a7 + 56:word32] = v312
	CVZN = cond(v312)
	v313 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v313
	CVZN = cond(d1)
	goto l00003608
	// succ:  l00003608
l000035FA:
	a7 = a7 - 0x00000004
	v426 = a2
	Mem0[a7:word32] = v426
	CVZN = cond(v426)
	call fn00003CA8 (retsize: 4;)
	v427 = d0
	Mem0[a7 + 56:word32] = v427
	CVZN = cond(v427)
	a7 = a7 + 0x0004
	// succ:  l00003608
l00003608:
	v321 = Mem0[a7 + 52:word32]
	Mem0[a7 + 74:word32] = v321
	CVZN = cond(v321)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v322 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v322, 0)
	CVZN = cond(v322)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v323 = Mem0[a0:byte]
	d0 = DPB(d0, v323, 0)
	CVZN = cond(v323)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000363A
	// succ:  l00003630 l0000363A
l00003630:
	v324 = d6 - d3
	CVZN = cond(v324)
	branch Test(ULT,C) l0000363A
	// succ:  l00003634 l0000363A
l00003634:
	d5 = Mem0[a7 + 74:word32]
	CVZN = cond(d5)
	goto l0000366E
	// succ:  l0000366E
l0000363A:
	v402 = Mem0[a7 + 74:word32] - 0xFFFFFFFF
	CVZN = cond(v402)
	branch Test(EQ,Z) l00003650
	// succ:  l00003644 l00003650
l00003644:
	a7 = a7 - 0x00000004
	v403 = a2
	Mem0[a7:word32] = v403
	CVZN = cond(v403)
	v404 = Mem0[a7 + 78:word32]
	a7 = a7 - 0x00000004
	v405 = v404
	Mem0[a7:word32] = v405
	CVZN = cond(v405)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00003650
l00003650:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l00003654
l00003654:
	v317 = Mem0[a7 + 64:word32] - 0xFFFFFFFF
	CVZN = cond(v317)
	branch Test(EQ,Z) l0000366A
	// succ:  l0000365E l0000366A
l0000365E:
	a7 = a7 - 0x00000004
	v318 = a2
	Mem0[a7:word32] = v318
	CVZN = cond(v318)
	v319 = Mem0[a7 + 68:word32]
	a7 = a7 - 0x00000004
	v320 = v319
	Mem0[a7:word32] = v320
	CVZN = cond(v320)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l0000366A
l0000366A:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l0000366E
l0000366E:
	v314 = (byte) d7 - 0x78
	CVZN = cond(v314)
	branch Test(EQ,Z) l0000367A
	// succ:  l00003674 l0000367A
l00003674:
	v315 = (byte) d7 - 0x58
	CVZN = cond(v315)
	branch Test(NE,Z) l00003684
	// succ:  l0000367A l00003684
l0000367A:
	v316 = 0x00000010
	Mem0[a7 + 64:word32] = v316
	CVZN = cond(v316)
	goto l000036A2
	// succ:  l000036A2
l00003684:
	v424 = (byte) d7 - 0x6F
	CVZN = cond(v424)
	branch Test(NE,Z) l00003694
	// succ:  l0000368A l00003694
l0000368A:
	v425 = 0x00000008
	Mem0[a7 + 52:word32] = v425
	CVZN = cond(v425)
	goto l0000369C
	// succ:  l0000369C
l00003694:
	v428 = 0x0000000A
	Mem0[a7 + 52:word32] = v428
	CVZN = cond(v428)
	// succ:  l0000369C
l0000369C:
	v429 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v429
	CVZN = cond(v429)
	// succ:  l000036A2
l000036A2:
	v325 = Mem0[a7 + 64:word32]
	Mem0[a7 + 114:word32] = v325
	CVZN = cond(v325)
	v326 = (byte) d5
	d0 = DPB(d0, v326, 0)
	CVZN = cond(v326)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v327 = Mem0[a0:byte]
	d0 = DPB(d0, v327, 0)
	CVZN = cond(v327)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	v328 = d2
	Mem0[a7 + 132:word32] = v328
	CVZN = cond(v328)
	v329 = d4
	Mem0[a7 + 52:word32] = v329
	CVZN = cond(v329)
	v330 = (byte) d7
	Mem0[a7 + 74:byte] = v330
	CVZN = cond(v330)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000390A
	// succ:  l000036D4 l0000390A
l000036D4:
	v331 = Mem0[a7 + 114:word32] - 0x0000000A
	CVZN = cond(v331)
	branch Test(NE,Z) l0000370A
	// succ:  l000036DE l0000370A
l000036DE:
	v332 = (byte) d5
	d0 = DPB(d0, v332, 0)
	CVZN = cond(v332)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v333 = Mem0[a0:byte]
	d0 = DPB(d0, v333, 0)
	CVZN = cond(v333)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	v334 = d2
	Mem0[a7 + 132:word32] = v334
	CVZN = cond(v334)
	v335 = d4
	Mem0[a7 + 52:word32] = v335
	CVZN = cond(v335)
	v336 = (byte) d7
	Mem0[a7 + 74:byte] = v336
	CVZN = cond(v336)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000390A
	// succ:  l0000370A l0000390A
l0000370A:
	v337 = Mem0[a7 + 114:word32] - 0x00000008
	CVZN = cond(v337)
	branch Test(NE,Z) l0000372A
	// succ:  l00003714 l0000372A
l00003714:
	v338 = d2
	Mem0[a7 + 132:word32] = v338
	CVZN = cond(v338)
	v339 = d4
	Mem0[a7 + 52:word32] = v339
	CVZN = cond(v339)
	v340 = (byte) d7
	Mem0[a7 + 74:byte] = v340
	CVZN = cond(v340)
	v341 = d5 - 0x00000037
	CVZN = cond(v341)
	branch Test(GT,VZN) l0000390A
	// succ:  l0000372A l0000390A
l0000372A:
	v342 = d2
	Mem0[a7 + 132:word32] = v342
	CVZN = cond(v342)
	v343 = d4
	Mem0[a7 + 52:word32] = v343
	CVZN = cond(v343)
	v344 = d6
	Mem0[a7 + 64:word32] = v344
	CVZN = cond(v344)
	v345 = (byte) d7
	Mem0[a7 + 74:byte] = v345
	CVZN = cond(v345)
	v346 = d6 - d3
	CVZN = cond(v346)
	branch Test(ULT,C) l0000390A
	// succ:  l00003740 l0000390A
l00003740:
	d7 = Mem0[a7 + 114:word32]
	CVZN = cond(d7)
	a4 = Mem0[a7 + 64:word32]
	// succ:  l00003748
l00003748:
	d1 = d7
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v347 = d2
	Mem0[a7:word32] = v347
	CVZN = cond(v347)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v348 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v348
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v349 = d0
	Mem0[a7:word32] = v349
	CVZN = cond(v349)
	a7 = a7 - 0x00000004
	v350 = d1
	Mem0[a7:word32] = v350
	CVZN = cond(v350)
	a7 = a7 - 0x00000004
	v351 = a1
	Mem0[a7:word32] = v351
	CVZN = cond(v351)
	v352 = Mem0[a7 + 60:word32]
	a7 = a7 - 0x00000004
	v353 = v352
	Mem0[a7:word32] = v353
	CVZN = cond(v353)
	v354 = Mem0[a7 + 60:word32]
	a7 = a7 - 0x00000004
	v355 = v354
	Mem0[a7:word32] = v355
	CVZN = cond(v355)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d0
	call fn00003C28 (retsize: 4;)
	a7 = a7 + 16
	v356 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = v356
	v357 = d0
	Mem0[a7 + 72:word32] = v357
	CVZN = cond(v357)
	v358 = d1
	Mem0[a7 + 76:word32] = v358
	CVZN = cond(v358)
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	v359 = (byte) d5
	d0 = DPB(d0, v359, 0)
	CVZN = cond(v359)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v360 = Mem0[a0:byte]
	d0 = DPB(d0, v360, 0)
	CVZN = cond(v360)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000037A8
	// succ:  l0000379E l000037A8
l0000379E:
	d4 = d5
	CVZN = cond(d4)
	d4 = d4 - 0x00000030
	CVZNX = cond(d4)
	goto l000037AA
	// succ:  l000037AA
l000037A8:
	d4 = 0
	CVZN = cond(d4)
	// succ:  l000037AA
l000037AA:
	d1 = d4
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v361 = d2
	Mem0[a7:word32] = v361
	CVZN = cond(v361)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v362 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v362
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v363 = d2
	Mem0[a7:word32] = v363
	CVZN = cond(v363)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 72:word32]
	CVZNX = cond(d2)
	v364 = d2
	Mem0[a7 + 52:word32] = v364
	CVZN = cond(v364)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v365 = d3
	Mem0[a7:word32] = v365
	CVZN = cond(v365)
	d3 = Mem0[a7 + 72:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v367 = d2
	Mem0[a7 + 52:word32] = v367
	CVZN = cond(v367)
	v368 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = v368
	CVZN = cond(d3)
	v369 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v369
	CVZN = cond(d2)
	v370 = (byte) d5
	d0 = DPB(d0, v370, 0)
	CVZN = cond(v370)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v371 = Mem0[a0:byte]
	d0 = DPB(d0, v371, 0)
	CVZN = cond(v371)
	d0 = d0 & 0x00000001
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000037FA
	// succ:  l000037F0 l000037FA
l000037F0:
	d6 = d5
	CVZN = cond(d6)
	d6 = d6 - 0x00000037
	CVZNX = cond(d6)
	goto l000037FC
	// succ:  l000037FC
l000037FA:
	d6 = 0
	CVZN = cond(d6)
	// succ:  l000037FC
l000037FC:
	d1 = d6
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v372 = d2
	Mem0[a7:word32] = v372
	CVZN = cond(v372)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v373 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v373
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v374 = d2
	Mem0[a7:word32] = v374
	CVZN = cond(v374)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 52:word32]
	CVZNX = cond(d2)
	v375 = d2
	Mem0[a7 + 72:word32] = v375
	CVZN = cond(v375)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v376 = d3
	Mem0[a7:word32] = v376
	CVZN = cond(v376)
	d3 = Mem0[a7 + 52:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v377 = d2
	Mem0[a7 + 72:word32] = v377
	CVZN = cond(v377)
	v378 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = v378
	CVZN = cond(d3)
	v379 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v379
	CVZN = cond(d2)
	v380 = (byte) d5
	d0 = DPB(d0, v380, 0)
	CVZN = cond(v380)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v381 = Mem0[a0:byte]
	d0 = DPB(d0, v381, 0)
	CVZN = cond(v381)
	d0 = d0 & 0x00000002
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000384C
	// succ:  l00003842 l0000384C
l00003842:
	d2 = d5
	CVZN = cond(d2)
	d2 = d2 - 0x00000057
	CVZNX = cond(d2)
	goto l0000384E
	// succ:  l0000384E
l0000384C:
	d2 = 0
	CVZN = cond(d2)
	// succ:  l0000384E
l0000384E:
	d1 = d2
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v382 = d2
	Mem0[a7:word32] = v382
	CVZN = cond(v382)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v383 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v383
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v384 = d2
	Mem0[a7:word32] = v384
	CVZN = cond(v384)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 72:word32]
	CVZNX = cond(d2)
	v385 = d2
	Mem0[a7 + 52:word32] = v385
	CVZN = cond(v385)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 0x00000004
	v386 = d3
	Mem0[a7:word32] = v386
	CVZN = cond(v386)
	d3 = Mem0[a7 + 72:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v387 = d2
	Mem0[a7 + 52:word32] = v387
	CVZN = cond(v387)
	v388 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = v388
	CVZN = cond(d3)
	v389 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v389
	CVZN = cond(d2)
	a0 = a2 + 24
	d0 = 1
	CVZN = cond(d0)
	v390 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v390
	ZN = cond(v390)
	C = false
	V = false
	a0 = a2 + 20
	v391 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v391
	CVZNX = cond(v391)
	branch Test(LT,CZ) l000038A0
	// succ:  l00003888 l000038A0
l00003888:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v392 = a2
	Mem0[a7:word32] = v392
	CVZN = cond(v392)
	a2 = a0
	a2 = a2 + 0x00000001
	v393 = a2
	Mem0[a1:word32] = v393
	CVZN = cond(v393)
	v394 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v394
	v395 = Mem0[a0:byte]
	d0 = DPB(d0, v395, 0)
	CVZN = cond(v395)
	d1 = 0
	CVZN = cond(d1)
	v396 = (byte) d0
	d1 = DPB(d1, v396, 0)
	CVZN = cond(v396)
	goto l000038AC
	// succ:  l000038AC
l000038A0:
	a7 = a7 - 0x00000004
	v420 = a2
	Mem0[a7:word32] = v420
	CVZN = cond(v420)
	call fn00003CA8 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0004
	// succ:  l000038AC
l000038AC:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	v406 = Mem0[a7 + 52:word32] + 0x00000001
	Mem0[a7 + 52:word32] = v406
	CVZNX = cond(v406)
	v407 = (byte) d1
	d0 = DPB(d0, v407, 0)
	CVZN = cond(v407)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v408 = Mem0[a0:byte]
	d0 = DPB(d0, v408, 0)
	CVZN = cond(v408)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000390A
	// succ:  l000038D0 l0000390A
l000038D0:
	v409 = d7 - 0x0000000A
	CVZN = cond(v409)
	branch Test(NE,Z) l000038F4
	// succ:  l000038D8 l000038F4
l000038D8:
	v410 = (byte) d5
	d0 = DPB(d0, v410, 0)
	CVZN = cond(v410)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v411 = Mem0[a0:byte]
	d0 = DPB(d0, v411, 0)
	CVZN = cond(v411)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000390A
	// succ:  l000038F4 l0000390A
l000038F4:
	v412 = d7 - 0x00000008
	CVZN = cond(v412)
	branch Test(NE,Z) l00003904
	// succ:  l000038FC l00003904
l000038FC:
	v413 = d5 - 0x00000037
	CVZN = cond(v413)
	branch Test(GT,VZN) l0000390A
	// succ:  l00003904 l0000390A
l00003904:
	v414 = a4 - d3
	CVZN = cond(v414)
	branch Test(UGE,C) l00003748
	// succ:  l0000390A l00003748
l0000390A:
	v397 = Mem0[a7 + 74:byte]
	d7 = DPB(d7, v397, 0)
	CVZN = cond(v397)
	d4 = Mem0[a7 + 52:word32]
	CVZN = cond(d4)
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 110:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000393E
	v415 = Mem0[a7 + 74:byte]
	d7 = DPB(d7, v415, 0)
	CVZN = cond(v415)
	d4 = Mem0[a7 + 52:word32]
	CVZN = cond(d4)
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 110:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000393E
	// succ:  l0000391C l0000393E
l0000391C:
	v398 = d3 - 0x00000002
	CVZN = cond(v398)
	branch Test(NE,Z) l0000393E
	v416 = d3 - 0x00000002
	CVZN = cond(v416)
	branch Test(NE,Z) l0000393E
	// succ:  l00003924 l0000393E
l00003924:
	v399 = d5 - 0xFFFFFFFF
	CVZN = cond(v399)
	branch Test(EQ,Z) l00003936
	v417 = d5 - 0xFFFFFFFF
	CVZN = cond(v417)
	branch Test(EQ,Z) l00003936
	// succ:  l0000392C l00003936
l0000392C:
	a7 = a7 - 0x00000004
	v400 = a2
	Mem0[a7:word32] = v400
	CVZN = cond(v400)
	a7 = a7 - 0x00000004
	v401 = d5
	Mem0[a7:word32] = v401
	CVZN = cond(v401)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	a7 = a7 - 0x00000004
	v418 = a2
	Mem0[a7:word32] = v418
	CVZN = cond(v418)
	a7 = a7 - 0x00000004
	v419 = d5
	Mem0[a7:word32] = v419
	CVZN = cond(v419)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00003936
l00003936:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	d5 = Mem0[a7 + 110:word32]
	CVZN = cond(d5)
	// succ:  l0000393E
l0000393E:
	v421 = d5 - 0xFFFFFFFF
	CVZN = cond(v421)
	branch Test(EQ,Z) l00003950
	// succ:  l00003946 l00003950
l00003946:
	a7 = a7 - 0x00000004
	v422 = a2
	Mem0[a7:word32] = v422
	CVZN = cond(v422)
	a7 = a7 - 0x00000004
	v423 = d5
	Mem0[a7:word32] = v423
	CVZN = cond(v423)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00003950
l00003950:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003AFE
	// succ:  l0000395C l00003AFE
l0000395C:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003AFE
	// succ:  l00003962 l00003AFE
l00003962:
	v430 = (byte) d7 - 0x75
	CVZN = cond(v430)
	branch Test(NE,Z) l00003A24
	// succ:  l0000396A l00003A24
l0000396A:
	a7 = a7 - 0x00000004
	v431 = d0
	Mem0[a7:word32] = v431
	CVZN = cond(v431)
	v432 = Mem0[a7 + 76:byte]
	d0 = DPB(d0, v432, 0)
	CVZN = cond(v432)
	v433 = (byte) d0 - 0x01
	d0 = DPB(d0, v433, 0)
	CVZNX = cond(v433)
	v434 = (byte) d0
	Mem0[a7 + 56:byte] = v434
	CVZN = cond(v434)
	v435 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v435
	CVZN = cond(d0)
	ZN = cond(Mem0[a7 + 52:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00003994
	// succ:  l0000397E l00003994
l0000397E:
	v436 = Mem0[a7 + 52:byte] - 0x01
	Mem0[a7 + 52:byte] = v436
	CVZNX = cond(v436)
	branch Test(EQ,Z) l000039EC
	// succ:  l00003984 l000039EC
l00003984:
	v437 = Mem0[a7 + 52:byte] - 0x66
	Mem0[a7 + 52:byte] = v437
	CVZNX = cond(v437)
	branch Test(EQ,Z) l000039D0
	// succ:  l0000398C l000039D0
l0000398C:
	v438 = Mem0[a7 + 52:byte] - 0x04
	Mem0[a7 + 52:byte] = v438
	CVZNX = cond(v438)
	branch Test(EQ,Z) l000039B4
	// succ:  l00003992 l000039B4
l00003992:
	goto l00003A08
	// succ:  l00003A08
l00003994:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v439 = Mem0[a7 + 48:word32]
	Mem0[a0 + 4:word32] = v439
	CVZN = cond(v439)
	v440 = Mem0[a7 + 44:word32]
	Mem0[a0:word32] = v440
	CVZN = cond(v440)
	goto l00003AFA
	// succ:  l00003AFA
l000039B4:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v442 = d0
	Mem0[a0:word32] = v442
	CVZN = cond(v442)
	goto l00003AFA
	// succ:  l00003AFA
l000039D0:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v444 = (word16) d0
	Mem0[a0:word16] = v444
	CVZN = cond(v444)
	goto l00003AFA
	// succ:  l00003AFA
l000039EC:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v445 = (byte) d0
	Mem0[a0:byte] = v445
	CVZN = cond(v445)
	goto l00003AFA
	// succ:  l00003AFA
l00003A08:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v441 = d0
	Mem0[a0:word32] = v441
	CVZN = cond(v441)
	goto l00003AFA
	// succ:  l00003AFA
l00003A24:
	v446 = Mem0[a7 + 110:word32] - 0x0000002D
	CVZN = cond(v446)
	branch Test(NE,Z) l00003A40
	// succ:  l00003A2E l00003A40
l00003A2E:
	v447 = a7 + 44
	d0 = Mem0[v447:word32]
	v447 = v447 + 0x00000004
	d1 = Mem0[v447:word32]
	v447 = v447 + 0x00000004
	d1 = -d1
	CVZNX = cond(d1)
	d0 = -d0 - X
	CVZNX = cond(d0)
	v448 = a7 + 52
	a6 = Mem0[v448:word32]
	v448 = v448 + 0x00000004
	a7 = Mem0[v448:word32]
	v448 = v448 + 0x00000004
	goto l00003A4C
	// succ:  l00003A4C
l00003A40:
	v531 = Mem0[a7 + 48:word32]
	Mem0[a7 + 56:word32] = v531
	CVZN = cond(v531)
	v532 = Mem0[a7 + 44:word32]
	Mem0[a7 + 52:word32] = v532
	CVZN = cond(v532)
	// succ:  l00003A4C
l00003A4C:
	a7 = a7 - 0x00000004
	v452 = d0
	Mem0[a7:word32] = v452
	CVZN = cond(v452)
	v453 = Mem0[a7 + 76:byte]
	d0 = DPB(d0, v453, 0)
	CVZN = cond(v453)
	v454 = (byte) d0 - 0x01
	d0 = DPB(d0, v454, 0)
	CVZNX = cond(v454)
	v455 = (byte) d0
	Mem0[a7 + 48:byte] = v455
	CVZN = cond(v455)
	v456 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v456
	CVZN = cond(d0)
	ZN = cond(Mem0[a7 + 44:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00003A76
	// succ:  l00003A60 l00003A76
l00003A60:
	v457 = Mem0[a7 + 44:byte] - 0x01
	Mem0[a7 + 44:byte] = v457
	CVZNX = cond(v457)
	branch Test(EQ,Z) l00003AC8
	// succ:  l00003A66 l00003AC8
l00003A66:
	v458 = Mem0[a7 + 44:byte] - 0x66
	Mem0[a7 + 44:byte] = v458
	CVZNX = cond(v458)
	branch Test(EQ,Z) l00003AAE
	// succ:  l00003A6E l00003AAE
l00003A6E:
	v459 = Mem0[a7 + 44:byte] - 0x04
	Mem0[a7 + 44:byte] = v459
	CVZNX = cond(v459)
	branch Test(EQ,Z) l00003A94
	// succ:  l00003A74 l00003A94
l00003A74:
	goto l00003AE2
	// succ:  l00003AE2
l00003A76:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v462 = Mem0[a7 + 56:word32]
	Mem0[a0 + 4:word32] = v462
	CVZN = cond(v462)
	v463 = Mem0[a7 + 52:word32]
	Mem0[a0:word32] = v463
	CVZN = cond(v463)
	goto l00003AFA
	// succ:  l00003AFA
l00003A94:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v475 = d0
	Mem0[a0:word32] = v475
	CVZN = cond(v475)
	goto l00003AFA
	// succ:  l00003AFA
l00003AAE:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v464 = (word16) d0
	Mem0[a0:word16] = v464
	CVZN = cond(v464)
	goto l00003AFA
	// succ:  l00003AFA
l00003AC8:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v530 = (byte) d0
	Mem0[a0:byte] = v530
	CVZN = cond(v530)
	goto l00003AFA
	// succ:  l00003AFA
l00003AE2:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v465 = d0
	Mem0[a0:word32] = v465
	CVZN = cond(v465)
	// succ:  l00003AFA
l00003AFA:
	v443 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v443
	CVZNX = cond(v443)
	// succ:  l00003AFE
l00003AFE:
	a4 = a3
	goto l00003BFC
	// succ:  l00003BFC
l00003B04:
	v85 = Mem0[a4:byte]
	d0 = DPB(d0, v85, 0)
	CVZN = cond(v85)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v86 = Mem0[a0:byte]
	d0 = DPB(d0, v86, 0)
	CVZN = cond(v86)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003B90
	// succ:  l00003B20 l00003B90
l00003B20:
	a0 = a2 + 24
	v87 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v87
	ZN = cond(v87)
	C = false
	V = false
	a0 = a2 + 20
	v88 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v88
	CVZNX = cond(v88)
	branch Test(LT,CZ) l00003B4A
	// succ:  l00003B32 l00003B4A
l00003B32:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v89 = a2
	Mem0[a7:word32] = v89
	CVZN = cond(v89)
	a2 = a0
	a2 = a2 + 0x00000001
	v90 = a2
	Mem0[a1:word32] = v90
	CVZN = cond(v90)
	v91 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v91
	v92 = Mem0[a0:byte]
	d0 = DPB(d0, v92, 0)
	CVZN = cond(v92)
	d1 = 0
	CVZN = cond(d1)
	v93 = (byte) d0
	d1 = DPB(d1, v93, 0)
	CVZN = cond(v93)
	goto l00003B56
	// succ:  l00003B56
l00003B4A:
	a7 = a7 - 0x00000004
	v101 = a2
	Mem0[a7:word32] = v101
	CVZN = cond(v101)
	call fn00003CA8 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0004
	// succ:  l00003B56
l00003B56:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v96 = (byte) d1
	d0 = DPB(d0, v96, 0)
	CVZN = cond(v96)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000288D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v97 = Mem0[a0:byte]
	d0 = DPB(d0, v97, 0)
	CVZN = cond(v97)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00003B20
	// succ:  l00003B78 l00003B20
l00003B78:
	v98 = d5 - 0xFFFFFFFF
	CVZN = cond(v98)
	branch Test(EQ,Z) l00003B8A
	// succ:  l00003B80 l00003B8A
l00003B80:
	a7 = a7 - 0x00000004
	v99 = a2
	Mem0[a7:word32] = v99
	CVZN = cond(v99)
	a7 = a7 - 0x00000004
	v100 = d5
	Mem0[a7:word32] = v100
	CVZN = cond(v100)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00003B8A
l00003B8A:
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	d3 = 1
	CVZN = cond(d3)
	goto l00003BFA
	// succ:  l00003BFA
l00003B90:
	a0 = a2 + 24
	v102 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v102
	ZN = cond(v102)
	C = false
	V = false
	a0 = a2 + 20
	v103 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v103
	CVZNX = cond(v103)
	branch Test(LT,CZ) l00003BC2
	// succ:  l00003BA2 l00003BC2
l00003BA2:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 0x00000004
	v104 = a2
	Mem0[a7:word32] = v104
	CVZN = cond(v104)
	a2 = a0
	a2 = a2 + 0x00000001
	v105 = a2
	Mem0[a1:word32] = v105
	CVZN = cond(v105)
	v106 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v106
	v107 = Mem0[a0:byte]
	d0 = DPB(d0, v107, 0)
	CVZN = cond(v107)
	a7 = a7 - 0x00000004
	v108 = d1
	Mem0[a7:word32] = v108
	CVZN = cond(v108)
	d1 = 0
	CVZN = cond(d1)
	v109 = (byte) d0
	d1 = DPB(d1, v109, 0)
	CVZN = cond(v109)
	v110 = d1
	Mem0[a7 + 48:word32] = v110
	CVZN = cond(v110)
	v111 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v111
	CVZN = cond(d1)
	goto l00003BD0
	// succ:  l00003BD0
l00003BC2:
	a7 = a7 - 0x00000004
	v119 = a2
	Mem0[a7:word32] = v119
	CVZN = cond(v119)
	call fn00003CA8 (retsize: 4;)
	v120 = d0
	Mem0[a7 + 48:word32] = v120
	CVZN = cond(v120)
	a7 = a7 + 0x0004
	// succ:  l00003BD0
l00003BD0:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v114 = Mem0[a4:byte]
	d0 = DPB(d0, v114, 0)
	CVZN = cond(v114)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	v115 = d0 - Mem0[a7 + 44:word32]
	CVZN = cond(v115)
	branch Test(EQ,Z) l00003BFA
	// succ:  l00003BE4 l00003BFA
l00003BE4:
	v116 = d5 - 0xFFFFFFFF
	CVZN = cond(v116)
	branch Test(EQ,Z) l00003BF6
	// succ:  l00003BEC l00003BF6
l00003BEC:
	a7 = a7 - 0x00000004
	v117 = a2
	Mem0[a7:word32] = v117
	CVZN = cond(v117)
	a7 = a7 - 0x00000004
	v118 = d5
	Mem0[a7:word32] = v118
	CVZN = cond(v118)
	call fn00002BD4 (retsize: 4;)
	a7 = a7 + 0x0008
	// succ:  l00003BF6
l00003BF6:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l00003BFA
l00003BFA:
	a4 = a4 + 0x00000001
	// succ:  l00003BFC
l00003BFC:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003C06
	// succ:  l00003C00 l00003C06
l00003C00:
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002C26
	// succ:  l00003C06 l00002C26
l00003C06:
	v50 = d5 - 0xFFFFFFFF
	CVZN = cond(v50)
	branch Test(NE,Z) l00003C18
	v113 = d5 - 0xFFFFFFFF
	CVZN = cond(v113)
	branch Test(NE,Z) l00003C18
	// succ:  l00003C0E l00003C18
l00003C0E:
	ZN = cond(Mem0[a7 + 60:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003C18
	ZN = cond(Mem0[a7 + 60:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003C18
	// succ:  l00003C14 l00003C18
l00003C14:
	d0 = d5
	CVZN = cond(d0)
	d0 = d5
	CVZN = cond(d0)
	goto l00003C1C
	// succ:  l00003C1C
l00003C18:
	d0 = Mem0[a7 + 60:word32]
	CVZN = cond(d0)
	// succ:  l00003C1C
l00003C1C:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a7 + 76
	return
	// succ:  fn00002C04_exit
fn00002C04_exit:


// fn00003C28
// Return size: 4
void fn00003C28()
fn00003C28_entry:
	// succ:  l00003C28
l00003C28:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d5 = Mem0[a7 + 28:word32]
	CVZN = cond(d5)
	d6 = Mem0[a7 + 36:word32]
	CVZN = cond(d6)
	d0 = d5
	CVZN = cond(d0)
	d1 = d6
	CVZN = cond(d1)
	d2 = d0
	CVZN = cond(d2)
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d3 = d1
	CVZN = cond(d3)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v14 = (word16) d2
	d4 = DPB(d4, v14, 0)
	CVZN = cond(v14)
	d4 = d4 *u (word16) d3
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d3 = d3 *u (word16) d0
	VZN = cond(d3)
	C = false
	d1 = d1 *u (word16) d0
	VZN = cond(d1)
	C = false
	d0 = d4
	CVZN = cond(d0)
	v16 = (word16) d0 ^ (word16) d0
	d0 = DPB(d0, v16, 0)
	ZN = cond(v16)
	C = false
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d2 = d2 + d0
	CVZNX = cond(d2)
	d2 = d2 + d3
	CVZNX = cond(d2)
	branch Test(UGE,C) l00003C5C
	// succ:  l00003C56 l00003C5C
l00003C56:
	d1 = d1 + 0x00010000
	CVZNX = cond(d1)
	// succ:  l00003C5C
l00003C5C:
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	v18 = (word16) d2
	d0 = DPB(d0, v18, 0)
	CVZN = cond(v18)
	v19 = (word16) d4
	d2 = DPB(d2, v19, 0)
	CVZN = cond(v19)
	d0 = d0 + d1
	CVZNX = cond(d0)
	d1 = d2
	CVZN = cond(d1)
	d2 = Mem0[a7 + 32:word32]
	CVZN = cond(d2)
	d3 = d2
	CVZN = cond(d3)
	d4 = d5
	CVZN = cond(d4)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 *u (word16) d5
	VZN = cond(d3)
	C = false
	d4 = d4 *u (word16) d2
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d5
	VZN = cond(d2)
	C = false
	v20 = (word16) d3 + (word16) d4
	d3 = DPB(d3, v20, 0)
	CVZNX = cond(v20)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v21 = (word16) d3 ^ (word16) d3
	d3 = DPB(d3, v21, 0)
	ZN = cond(v21)
	C = false
	V = false
	d2 = d2 + d3
	CVZNX = cond(d2)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d2 = Mem0[a7 + 24:word32]
	CVZN = cond(d2)
	d3 = d2
	CVZN = cond(d3)
	d4 = d6
	CVZN = cond(d4)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 *u (word16) d6
	VZN = cond(d3)
	C = false
	d4 = d4 *u (word16) d2
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d6
	VZN = cond(d2)
	C = false
	v22 = (word16) d3 + (word16) d4
	d3 = DPB(d3, v22, 0)
	CVZNX = cond(v22)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v23 = (word16) d3 ^ (word16) d3
	d3 = DPB(d3, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
	d2 = d2 + d3
	CVZNX = cond(d2)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00003C28_exit
fn00003C28_exit:


// fn00003CA8
// Return size: 4
void fn00003CA8()
fn00003CA8_entry:
	// succ:  l00003CA8
l00003CA8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a2 = Mem0[a7 + 36:word32]
	call fn00002400 (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00003CC0
	// succ:  l00003CBA l00003CC0
l00003CBA:
	d0 = -1
	CVZN = cond(d0)
	goto l00003D9E
	// succ:  l00003D9E
l00003CC0:
	d0 = 42
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	d5 = 32
	CVZN = cond(d5)
	v17 = d5 - d0
	CVZN = cond(v17)
	branch Test(EQ,Z) l00003CD2
	// succ:  l00003CCC l00003CD2
l00003CCC:
	d0 = -1
	CVZN = cond(d0)
	goto l00003D9E
	// succ:  l00003D9E
l00003CD2:
	a0 = a2 + 24
	d0 = 1
	CVZN = cond(d0)
	v19 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	d0 = 0x00000200
	CVZN = cond(d0)
	d0 = d0 & Mem0[a0:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003CEA
	// succ:  l00003CE4 l00003CEA
l00003CE4:
	call fn00003DA4 (retsize: 4;)
	// succ:  l00003CEA
l00003CEA:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003D08
	// succ:  l00003CF0 l00003D08
l00003CF0:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003D00
	// succ:  l00003CF8 l00003D00
l00003CF8:
	d0 = 1
	CVZN = cond(d0)
	v20 = d0
	Mem0[a2 + 28:word32] = v20
	CVZN = cond(v20)
	goto l00003D08
	// succ:  l00003D08
l00003D00:
	v22 = 0x00000400
	Mem0[a2 + 28:word32] = v22
	CVZN = cond(v22)
	// succ:  l00003D08
l00003D08:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003D44
	// succ:  l00003D0E l00003D44
l00003D0E:
	a1 = a2 + 28
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003D22
	// succ:  l00003D1E l00003D22
l00003D1E:
	d4 = 2
	CVZN = cond(d4)
	goto l00003D24
	// succ:  l00003D24
l00003D22:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00003D24
l00003D24:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + Mem0[a1:word32]
	CVZNX = cond(d0)
	a7 = a7 - 0x00000004
	v31 = d0
	Mem0[a7:word32] = v31
	CVZN = cond(v31)
	call fn0000202C (retsize: 4;)
	a3 = d0
	a7 = a7 + 0x0004
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00003D3C
	// succ:  l00003D38 l00003D3C
l00003D38:
	d0 = -1
	CVZN = cond(d0)
	goto l00003D9E
	// succ:  l00003D9E
l00003D3C:
	a1 = a3 + 1
	v35 = a1
	Mem0[a2 + 8:word32] = v35
	CVZN = cond(v35)
	// succ:  l00003D44
l00003D44:
	a0 = a2 + 4
	v23 = Mem0[a2 + 8:word32]
	Mem0[a0:word32] = v23
	CVZN = cond(v23)
	d3 = Mem0[a2 + 28:word32]
	CVZN = cond(d3)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003E78:word32]
	execPrivate2()
	a0 = a2 + 20
	v25 = d0
	Mem0[a0:word32] = v25
	CVZN = cond(v25)
	v26 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v26
	CVZNX = cond(v26)
	branch Test(GE,VN) l00003D8A
	// succ:  l00003D68 l00003D8A
l00003D68:
	d0 = -1
	CVZN = cond(d0)
	v29 = d0 - Mem0[a2 + 20:word32]
	CVZN = cond(v29)
	branch Test(NE,Z) l00003D7A
	// succ:  l00003D70 l00003D7A
l00003D70:
	a0 = a2 + 24
	d0 = 8
	CVZN = cond(d0)
	v30 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	goto l00003D82
	// succ:  l00003D82
l00003D7A:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v32 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	// succ:  l00003D82
l00003D82:
	Mem0[a2 + 20:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l00003D9E
	// succ:  l00003D9E
l00003D8A:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a4 = a0
	a4 = a4 + 0x00000001
	v36 = a4
	Mem0[a1:word32] = v36
	CVZN = cond(v36)
	v37 = Mem0[a0:byte]
	d0 = DPB(d0, v37, 0)
	CVZN = cond(v37)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	// succ:  l00003D9E
l00003D9E:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00003CA8_exit
fn00003CA8_exit:


// fn00003DA4
// Return size: 4
void fn00003DA4()
fn00003DA4_entry:
	// succ:  l00003DA4
l00003DA4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a2 = Mem0[0x00003FD8:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00003DDC
	// succ:  l00003DB2 l00003DDC
l00003DB2:
	d0 = 0x00000202
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	v10 = d0 - 0x00000202
	CVZN = cond(v10)
	branch Test(NE,Z) l00003DD2
	// succ:  l00003DC4 l00003DD2
l00003DC4:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003DD2
	// succ:  l00003DC8 l00003DD2
l00003DC8:
	a7 = a7 - 0x00000004
	v11 = a2
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn00001F80 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l00003DD2
l00003DD2:
	a0 = a2 + 12
	a2 = Mem0[a0:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00003DB2
	// succ:  l00003DDC l00003DB2
l00003DDC:
	v12 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v12
	return
	v14 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v14
	return
	// succ:  fn00003DA4_exit fn00003DA4_exit
fn00003DA4_exit:


// fn00003DE0
// Return size: 4
void fn00003DE0()
fn00003DE0_entry:
	// succ:  l00003DE0
l00003DE0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a2 = Mem0[a7 + 16:word32]
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a2:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00003E60
	// succ:  l00003DEE l00003E60
l00003DEE:
	a0 = Mem0[0x00003FD0:word32]
	a1 = a0 + 24
	d0 = 2
	CVZN = cond(d0)
	v14 = Mem0[a1:word32] | d0
	Mem0[a1:word32] = v14
	ZN = cond(v14)
	C = false
	V = false
	a0 = a0 + 20
	v15 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v15
	CVZNX = cond(v15)
	branch Test(LT,CZ) l00003E36
	// succ:  l00003E04 l00003E36
l00003E04:
	v18 = Mem0[a2:byte] - 0x0A
	CVZN = cond(v18)
	branch Test(NE,Z) l00003E1C
	// succ:  l00003E0A l00003E1C
l00003E0A:
	a0 = Mem0[0x00003FD0:word32]
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a0 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00003E36
	// succ:  l00003E1C l00003E36
l00003E1C:
	a1 = Mem0[0x00003FD0:word32]
	a1 = a1 + 0x00000004
	a0 = Mem0[a1:word32]
	a3 = a0
	a3 = a3 + 0x00000001
	v19 = a3
	Mem0[a1:word32] = v19
	CVZN = cond(v19)
	v20 = Mem0[a2:byte]
	Mem0[a0:byte] = v20
	CVZN = cond(v20)
	v21 = Mem0[a0:byte]
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	d1 = 0
	CVZN = cond(d1)
	v23 = (byte) d0
	d1 = DPB(d1, v23, 0)
	CVZN = cond(v23)
	goto l00003E4E
	// succ:  l00003E4E
l00003E36:
	v25 = Mem0[0x00003FD0:word32]
	a7 = a7 - 0x00000004
	v26 = v25
	Mem0[a7:word32] = v26
	CVZN = cond(v26)
	v27 = Mem0[a2:byte]
	d0 = DPB(d0, v27, 0)
	CVZN = cond(v27)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	call fn00001E6C (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0008
	// succ:  l00003E4E
l00003E4E:
	d0 = -1
	CVZN = cond(d0)
	v24 = d0 - d1
	CVZN = cond(v24)
	branch Test(NE,Z) l00003E58
	// succ:  l00003E54 l00003E58
l00003E54:
	d0 = -1
	CVZN = cond(d0)
	goto l00003E62
	// succ:  l00003E62
l00003E58:
	a2 = a2 + 0x00000001
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	ZN = cond(Mem0[a2:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003DEE
	// succ:  l00003E60 l00003DEE
l00003E60:
	d0 = d2
	CVZN = cond(d0)
	d0 = d2
	CVZN = cond(d0)
	// succ:  l00003E62
l00003E62:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00003DE0_exit
fn00003DE0_exit:


