void fn00001000(word32 d0, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5
// Preserved: a7 d7
fn00001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001000:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000100A:
	word32 a6_9 = Mem0[0x00000004:word32]
	word32 d2_102 = d0
	word32 a2_290 = a0
	branch Mem0[a6_9 + 20:word16] >=u 0x0024 l00001036
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001020:
	word32 a0_13 = 0x00003E70
	word32 d0_16 = 0x0000BE96 >>u 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001030:
	Mem19[a0_13:word32] = 0x00000000
	a0_13 = a0_13 + 4
	d0_16 = d0_16 - 0x00000001
	branch d0_16 != 0x00000000 l00001030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001036:
	Mem30[0x00003E70:word32] = fp
	Mem34[0x00003E74:word32] = a6_9
	word32 d0_36 = FindTask(0x00000000)
	word32 d0_112 = OpenLibrary(0x000012BC, 0)
	branch d0_112 == 0x00000000 l00001226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001226:
	Alert(0x00038007)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001056:
	word32 d4_74
	Mem67[0x00003E78:word32] = d0_112
	branch Mem67[d0_36 + 172:word32] != 0x00000000 l00001066
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001066:
	word32 a0_73 = a0
	d4_74 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000106A:
	branch Mem67[a0_701:byte] != 0x20 l00001072
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001070:
	d4_74 = SEQ(SLICE(d4_74, word16, 16), SLICE(d4_74, word16, 0) + 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001072:
	a0_73 = a0_701 + 1
	a0_701 = a0_73
	branch Mem67[a0_701:byte] != 0x00 l0000106A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001060:
	d4_74 = 2
	d2_102 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001076:
	word32 d0_100 = d4_74 << 0x00000002
	word32 d0_107 = d0_100 + d2_102
	word32 d1_111 = 0x00010001
	d0_112 = AllocMem(d0_107 + 0x00000011, 0x00010001)
	branch d0_112 == 0x00000000 l0000123E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000123E:
	CloseLibrary(Mem67[0x00003E78:word32])
	Alert(0x00010000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000125C:
	branch Mem153[d0_36 + 172:word32] != 0x00000000 l00001268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001262:
	fn00001214(d0_36)
	fn0000126C(d0_112)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001268:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001096:
	word32 dwLoc0C_554
	word32 a0_447
	Mem169[d0_112:word32] = d0_107 + 0x00000011
	Mem173[d0_112 + 12:word32] = d4_74 - 0x00000001
	Mem177[d0_112 + 8:word32] = d0_112 + 16 + d0_100
	Mem179[0x00000000:word32] = 0x00000000
	word32 d0_180 = Mem179[d0_36 + 172:word32]
	branch d0_180 == 0x00000000 l00001190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001190:
	fn00001214(d0_36)
	Mem187[0x00003E7C:word32] = d0_180
	Mem189[0x00003E80:word32] = d0_180
	Mem194[0x00000000:word32] = 0x00000000
	dwLoc0C_554 = d0_180
	word32 d0_197 = Mem194[d0_180 + 36:word32]
	branch d0_197 == 0x00000000 l000011B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011AE:
	Enable()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011B6:
	Supervisor(d0_112)
	Mem209[d0_112 + 4:word32] = d0_197
	branch d0_197 != 0x00000000 l000011D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011D2:
	Mem214[0x00003E84:word32] = d0_197
	Mem216[0x00003E88:word32] = d0_197
	Mem218[0x00003E8C:word32] = d0_197
	Mem221[d0_36 + 156:word32] = d0_197
	Mem223[d0_36 + 160:word32] = d0_197
	word32 d0_227 = Mem223[(d0_197 << 0x00000002) + 8:word32]
	branch d0_227 == 0x00000000 l000011F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F0:
	Mem231[d0_36 + 164:word32] = d0_227
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CE_thunk_fn0000127C:
	word32 a5_698
	word32 a1_697
	fn0000127C(out a1_697, out a5_698)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010B6:
	word32 d0_252 = Mem179[(d0_180 << 0x00000002) + 16:word32]
	word32 a1_255 = Mem179[d0_112 + 8:word32]
	word32 a0_260 = (d0_252 << 0x00000002) + 1
	word32 d0_262 = (uint32) (uint8) Mem179[d0_252 << 0x00000002:byte]
	Mem263[a0_260 + d0_262:byte] = 0x00
	Mem265[d0_112 + 16:word32] = a0_260
	word32 a6_266 = d0_112 + 20
	word32 d3_267 = 1
	word32 a0_272 = a0 + d2_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DA:
	a0_272 = a0_272 - 1
	branch Mem265[a0_272:byte] >u 0x20 l000010E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DE_1:
	word16 v37_280 = SLICE(d2_102, word16, 0)
	d2_102 = SEQ(SLICE(d2_102, word16, 16), v37_280 - 1)
	branch v37_280 != 0x0000 l000010DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E2:
	Mem285[a0_272 + 1:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E6:
	byte v40_292 = Mem291[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v40_292)
	branch v40_292 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010EA:
	branch v40_292 == 0x20 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F0:
	branch v40_292 == 0x09 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F6:
	branch d3_267 - Mem291[d0_112 + 12:word32] == 0x00000000 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010FC:
	Mem313[a6_266:word32] = a1_255
	a6_266 = a6_266 + 4
	d3_267 = SEQ(SLICE(d3_267, word16, 16), SLICE(d3_267, word16, 0) + 0x0001)
	branch v40_292 == 0x22 l0000111A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111A:
	byte v71_324 = Mem323[a2_290:byte]
	word24 v72_327 = SLICE(d1_111, word24, 8)
	a2_290 = a2_290 + 1
	d1_111 = SEQ(v72_327, v71_324)
	branch v71_324 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111E:
	branch v71_324 == 0x22 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001124:
	branch v71_324 != 0x2A l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000112A:
	byte v75_337 = Mem323[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(v72_327, v75_337)
	branch (v75_337 & 0xDF) != 0x4E l0000113C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000113C:
	branch (v75_337 & 0xDF) != 0x45 l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001142:
	d1_111 = 27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001138:
	d1_111 = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001144:
	Mem362[a1_255:byte] = SLICE(d1_111, byte, 0)
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001106:
	Mem366[a1_255:byte] = v40_292
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001108:
	byte v50_371 = Mem370[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v50_371)
	branch v50_371 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001148:
	Mem380[a1_255:byte] = 0x00
	Mem385[a6_266:word32] = 0x00000000
	execPrivate4()
	Mem416[0x00003E84:word32] = d0_262
	execPrivate5()
	Mem418[0x00003E88:word32] = d0_262
	dwLoc0C_554 = d0_112 + 16
	dwLoc10 = d3_267
	branch Mem418[Mem418[0x00003E74:word32] + 20:word16] <u 0x0024 l0000117A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001172:
	word32 v92_428 = Mem418[d0_36 + 224:word32]
	Mem429[0x00003E8C:word32] = v92_428
	branch v92_428 != 0x00000000 l0000117E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117A:
	Mem435[0x00003E8C:word32] = d0_262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117E:
	branch Mem439[d0_36 + 8:byte] != 0x0D l000011F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F8:
	a0_447 = Mem445[d0_36 + 58:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001186:
	word32 a0_450 = Mem439[d0_36 + 176:word32]
	a0_447 = a0_450 + 4 - Mem439[a0_450:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001202:
	Mem461[0x00003E98:word32] = a0_447
	Mem469[0x00003E9C:word32] = fp - 16
	fn00001354(dwLoc10, dwLoc0C_554)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001212_thunk_fn0000127C:
	word32 a1_699
	word32 a5_700
	fn0000127C(out a1_699, out a5_700)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000110C:
	branch v50_371 == 0x20 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001116:
	Mem501[a1_255:byte] = 0x00
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001112:
	Mem508[a1_255:byte] = v50_371
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001214_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000126C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001278(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1 d2
// Preserved: a7
fn00001278_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278_thunk_fn0000127C:
	word32 a1_6
	word32 a5_9
	word32 d1_13 = fn0000127C(out a1_6, out a5_9)
	a1Out = a1_6
	a5Out = a5_9
	return d1_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001278_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000127C(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000127C:
	word32 a7_6 = Mem0[0x00003E70:word32]
	word32 v7_11 = Mem0[a7_6 - 4:word32]
	word32 v5_8 = Mem0[a7_6 - 8:word32]
	word32 d1_14 = Mem0[v7_11 + 4:word32]
	branch d1_14 == 0x00000000 l0000129E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001296:
	execPrivate1()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000129E:
	CloseLibrary(Mem0[0x00003E78:word32])
	branch v5_8 == 0x00000000 l000012B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012AE:
	fn0000126C(v5_8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012B0:
	FreeMem(v7_11, Mem0[v7_11:word32])
	a1Out = v7_11
	a5Out = v7_11
	return d1_14
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000127C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000012D0(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012D0:
	branch 0x00003FB8 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012E2:
	word32 d2_16 = 1
	branch Mem11[0x00003FBC:word32] == 0x00000000 l000012F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012EA:
	d2_16 = d2_16 + 0x00000001
	branch Mem11[0x00003FB8 + (d2_16 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012F6:
	word32 d2_33 = d2_16 - 0x00000001
	branch d2_33 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012FA:
	word32 d0_38 = d2_33 << 0x00000002
	call Mem11[0x00003FB8 + d0_38:word32] (retsize: 4;)
		uses: d0:d0_38,Stack +0008:dwArg04
	d2_33 = d2_33 - 0x00000001
	branch d2_33 != 0x00000000 l000012FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001308:
	word32 a1_59
	word32 a5_62
	word32 d1_65 = fn00001278(dwArg04, out a1_59, out a5_62)
	a1Out = a1_59
	a5Out = a5_62
	return d1_65
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000012D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000131C(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000131C:
	branch Mem8[0x00003EA0:word32] != 0x00000000 l0000134E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001328:
	word32 a3_13 = Mem8[0x00003FC8:word32]
	Mem16[0x00003EA0:word32] = 1
	branch a3_13 == 0x00000000 l00001346
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000133A:
	call Mem16[a3_13 + 4:word32] (retsize: 4;)
		uses: d0:a3_25,Stack +0008:dwArg04
	a3_13 = Mem16[a3_13:word32]
	branch a3_13 != 0x00000000 l0000133A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001346:
	d1 = fn000012D0(dwArg04, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000134E:
	a1Out = a1
	a5Out = a5
	return d1
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000131C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001354(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001354:
	word32 a3_17 = 0x00003FB0
	branch 0x00003FAC == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001366:
	branch Mem8[0x00003FB0:word32] == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000136A:
	call Mem8[a3_17:word32] (retsize: 4;)
		uses: Stack +0008:dwArg04,Stack +000C:dwArg08
	a3_17 = a3_17 + 4
	branch Mem8[a3_17:word32] != 0x00000000 l0000136A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001372:
	word32 a1_86
	word32 a5_87
	fn0000131C(fn000013D8(), out a1_86, out a5_87)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001354_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001390()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn00001390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001390:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001394()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn00001394_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001394:
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	fn00001390()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001394_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000013AC()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn000013AC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013AC:
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	fn00001394()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000013AC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000013C4()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn000013C4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013C4:
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	fn000013AC()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000013C4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000013D8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a7 d2
fn000013D8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013D8:
	word32 a1_11
	word32 a5_12
	word32 d1_13
	fn00001474(fn00002BB8(fn00003DE0(0x0000142C, out d1_13, out a1_11, out a5_12), d1_13, a1_11, a5_12, 0x00001448), 0x0000144C)
	word32 d2_48 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001412:
	branch d2_48 - dwLoc04 <= 0x00000000 l0000140E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000140E:
	fn000013C4()
	d2_48 = d2_48 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001418:
	word32 d1_85
	word32 a1_86
	word32 a5_87
	return fn00003DE0(0x00001468, out d1_85, out a1_86, out a5_87)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000013D8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001474(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00001474_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001474:
	fn00001490(d0, Mem10[0x00003FD0:word32], dwArg04, fp + 8)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001474_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001490(word32 d0, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4 d5 d6 d7
fn00001490_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001490:
	word32 a7_1968 = fp + -112
	word32 d3_1482 = dwArg0C
	word32 a5_1579 = dwArg04
	word32 a4_1925 = dwArg08
	word32 d6_1480 = 0
	branch Mem36[dwArg08:byte] == 0x00 l00001DD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014AC:
	branch Mem46[a4_1925:byte] != 0x25 l00001DB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DB0:
	word32 a7_51 = a7_1968 - 4
	Mem54[a7_51:word32] = a5_1579
	Mem64[a7_51 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0, word24, 8), Mem54[a4_1925:byte])
	a4_1925 = a4_1925 + 1
	word32 a0_66
	d0 = fn00001E10(Mem64[a7_51 - 4:word32], Mem64[a7_51:word32], out a0_66, out a5_1579)
	a7_1968 = a7_51 + 4
	branch d0 != 0xFFFFFFFF l00001DCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DCE:
	d6_1480 = d6_1480 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DCA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014B4:
	Mem85[a7_1968 + 64:word32] = 0x00000000
	Mem87[a7_1968 + 72:word32] = 0x00000000
	Mem91[a7_1968 + 102:word32] = 0x00000000
	word32 d5_256 = -1
	word32 d4_376 = 105
	word32 a3_1270 = a7_1968 + 76
	word32 d7_1024 = 0
	word32 a2_135 = a4_1925 + 1
	word32 d2_1005 = Mem91[a7_1968 + 72:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D2:
	word32 d1_103 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D4:
	word32 a7_99 = a7_1968 - 4
	Mem102[a7_99:word32] = d0
	d0 = Mem102[a7_99:word32]
	branch Mem102[0x00001DE8 + d1_103:byte] - Mem102[a2_135:byte] != 0x00 l000014F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014F8:
	d1_103 = d1_103 + 0x00000001
	branch d1_103 <u 0x00000005 l000014D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014E6:
	Mem121[a7_99:word32] = d1_103
	word32 d1_123 = 1 << d1_103
	d0 = d1_123
	d1_103 = Mem121[a7_99:word32]
	d2_1005 = d2_1005 | d1_123
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001502:
	branch d1_103 <u 0x00000005 l000014D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000150A:
	word32 a0_1447
	word32 d0_159
	Mem143[a7_1968 + 72:word32] = d2_1005
	branch Mem143[a2_135:byte] != 0x2A l00001548
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001548:
	a0_1447 = 0x0000288D + (SEQ(SLICE(d0, word24, 8), Mem143[a2_135:byte]) & 0x000000FF)
	word32 d0_158 = (uint32) (uint8) Mem143[a0_1447:byte]
	d0_159 = d0_158 & 0x00000004
	branch (d0_158 & 0x00000004) == 0x00000000 l000015B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001564:
	d2_1005 = Mem143[a7_1968 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001568:
	Mem171[a7_1968 - 4:word32] = d3_1482
	word32 d1_177 = __swap(10) *u SLICE(d2_1005, word16, 0)
	word32 d1_185 = SEQ(SLICE(__swap(SEQ(SLICE(d1_177, word16, 16), SLICE(d1_177 + __swap(d2_1005) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_186 = SLICE(d2_1005, word16, 0) *u 10 + d1_185
	a2_135 = a2_135 + 1
	a0_1447 = 0x0000288D + (SEQ(SLICE(d0_186, word24, 8), Mem171[a2_135:byte]) & 0x000000FF)
	word32 d1_196 = (int32) (int16) (int8) SEQ(SLICE(d1_185, word24, 8), Mem171[a2_135:byte])
	word32 d0_210 = (uint32) (uint8) Mem171[a0_1447:byte]
	d3_1482 = Mem171[a7_1968 - 4:word32]
	d1_103 = d1_196 - 0x00000030
	d2_1005 = d1_196 - 0x00000030 + d0_186
	d0_159 = d0_210 & 0x00000004
	branch (d0_210 & 0x00000004) != 0x00000000 l00001568
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015B0:
	Mem217[a7_1968 + 64:word32] = d2_1005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001514:
	d0_159 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v37_232 = Mem143[d0_159:word32]
	Mem233[a7_1968 + 44:word32] = v37_232
	a2_135 = a2_135 + 1
	d3_1482 = d0_159 + 0x00000004
	a0_1447 = d0_159 + 0x00000004
	branch v37_232 >= 0x00000000 l00001540
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001540:
	Mem237[a7_1968 + 64:word32] = Mem233[a7_1968 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000152C:
	Mem240[a7_1968 + 72:word32] = Mem233[a7_1968 + 72:word32] | 0x00000004
	d0_159 = -Mem240[a7_1968 + 44:word32]
	Mem245[a7_1968 + 64:word32] = d0_159
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015B4:
	branch Mem248[a2_135:byte] != 0x2E l00001648
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015BC:
	a2_135 = a2_135 + 1
	branch Mem248[a2_135:byte] != 0x2A l000015E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015E2:
	a0_1447 = 0x0000288D + (SEQ(SLICE(d0_159, word24, 8), Mem248[a2_135:byte]) & 0x000000FF)
	word32 d0_267 = (uint32) (uint8) Mem248[a0_1447:byte]
	d5_256 = 0
	d0_159 = d0_267 & 0x00000004
	branch (d0_267 & 0x00000004) == 0x00000000 l00001648
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001600:
	word32 a7_275 = a7_1968 - 4
	Mem278[a7_275:word32] = d2_1005
	word32 d1_284 = __swap(10) *u SLICE(d5_256, word16, 0)
	word32 d1_292 = SEQ(SLICE(__swap(SEQ(SLICE(d1_284, word16, 16), SLICE(d1_284 + __swap(d5_256) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_293 = SLICE(d5_256, word16, 0) *u 10 + d1_292
	a2_135 = a2_135 + 1
	a0_1447 = 0x0000288D + (SEQ(SLICE(d0_293, word24, 8), Mem278[a2_135:byte]) & 0x000000FF)
	word32 d1_303 = (int32) (int16) (int8) SEQ(SLICE(d1_292, word24, 8), Mem278[a2_135:byte])
	word32 d0_317 = (uint32) (uint8) Mem278[a0_1447:byte]
	d2_1005 = Mem278[a7_275:word32]
	d1_103 = d1_303 - 0x00000030
	d5_256 = d1_303 - 0x00000030 + d0_293
	d0_159 = d0_317 & 0x00000004
	branch (d0_317 & 0x00000004) != 0x00000000 l00001600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015C4:
	d0_159 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v45_333 = Mem248[d0_159:word32]
	Mem335[a7_1968 + 44:word32] = v45_333
	a2_135 = a2_135 + 1
	d3_1482 = d0_159 + 0x00000004
	a0_1447 = d0_159 + 0x00000004
	branch v45_333 < 0x00000000 l00001648
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015DC:
	d5_256 = Mem335[a7_1968 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001648:
	word32 a7_1465 = a7_1968
	branch Mem341[a2_135:byte] == 0x68 l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000164E:
	branch Mem341[a2_135:byte] == 0x6C l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001654:
	branch Mem341[a2_135:byte] == 0x4C l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165A:
	branch Mem341[a2_135:byte] == 0x6A l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001660:
	branch Mem341[a2_135:byte] == 0x7A l0000166C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001666:
	branch Mem341[a2_135:byte] != 0x74 l00001672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000166C:
	a2_135 = a2_135 + 1
	d4_376 = (int32) (int16) (int8) (uint32) (uint8) Mem341[a2_135:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001672:
	branch d4_376 != 0x00000068 l00001684
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000167A:
	branch Mem341[a2_135:byte] != 0x68 l00001684
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001680:
	d4_376 = 2
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001684:
	branch d4_376 != 0x0000006C l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000168C:
	branch Mem341[a2_135:byte] != 0x6C l00001696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001692:
	d4_376 = 1
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001696:
	branch d4_376 != 0x0000006A l000016A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000169E:
	d4_376 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016A0:
	branch d4_376 != 0x0000007A l000016AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016A8:
	d4_376 = 108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016AA:
	branch d4_376 != 0x00000074 l000016B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016B2:
	d4_376 = 105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016B4:
	word32 d5_1481
	byte v101_428 = Mem341[a2_135:byte]
	word32 a2_1892 = a2_135 + 1
	word32 d1_1068 = SEQ(SLICE(d1_103, word24, 8), v101_428)
	word32 d0_1471 = SEQ(SLICE(d0_159, word24, 8), v101_428)
	branch v101_428 == 0x25 l00001B3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B3C:
	Mem465[a7_1968 + 102:word32] = 0x00000001
	a3_1270 = 0x00001DE4
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016C0:
	branch v101_428 == 0x58 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016C6:
	branch v101_428 == 0x63 l00001ABC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ABC:
	branch d4_376 != 0x0000006C l00001AD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AD8:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem510[a3_1270:byte] = Mem341[d0_1471 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AC4:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem521[a3_1270:byte] = Mem341[d0_1471 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AEA:
	a0_1447 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1482 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem525[a7_1968 + 102:word32] = 0x00000001
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016CE:
	branch v101_428 == 0x64 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016D4:
	branch v101_428 == 0x69 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016DA:
	Mem535[a7_1968 + 44:byte] = v101_428
	branch v101_428 == 0x6E l00001B4E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B4E:
	branch d4_376 != 0x00000001 l00001B70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B70:
	branch d4_376 != 0x0000006C l00001B8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B8E:
	branch d4_376 != 0x00000068 l00001BAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BAC:
	branch d4_376 != 0x00000002 l00001BCA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BCA:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem575[a0_1447:word32] = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BB4:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem587[a0_1447:byte] = SLICE(d6_1480, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B96:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem599[a0_1447:word16] = SLICE(d6_1480, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B78:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem611[a0_1447:word32] = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B56:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem623[a0_1447 + 4:word32] = d6_1480
	Mem624[a0_1447:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BDE:
	d3_1482 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem631[a7_1968 + 64:word32] = 0x00000000
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E6:
	branch Mem535[a7_1968 + 44:byte] <=u 0x70 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016F4:
	byte v118_646 = Mem535[a7_1968 + 44:byte]
	branch v118_646 == 0x73 l00001AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF8:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3_1270 = Mem535[d0_1471:word32]
	Mem662[a7_1968 + 102:word32] = 0x00000000
	d3_1482 = d0_1471 + 0x00000004
	a0_1447 = d0_1471 + 0x00000004
	word32 a1_661 = a3_1270
	branch d5_256 == 0x00000000 l00001B1A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B14:
	branch d5_256 - Mem662[a7_1968 + 102:word32] <=u 0x00000000 l00001B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B1A:
	branch Mem662[a3_1270:byte] == 0x00 l00001B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B1E:
	d0_1471 = Mem662[a7_1968 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B22:
	d0_1471 = d0_1471 + 0x00000001
	a1_661 = a1_661 + 1
	branch d5_256 <=u 0x00000000 l00001B2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2A:
	branch d5_256 - d0_1471 <=u 0x00000000 l00001B32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2E:
	branch Mem662[a1_661:byte] != 0x00 l00001B22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B32:
	Mem719[a7_1968 + 102:word32] = d0_1471
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B36:
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001700:
	branch v118_646 == 0x75 l0000170E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001706:
	branch v118_646 != 0x78 l00001BE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BE6:
	branch v101_428 != 0x00 l00001BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BEA:
	a2_1892 = a2_1892 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BEC:
	d0_1471 = a2_1892 - a4_1925
	Mem756[a7_1968 + 102:word32] = d0_1471
	Mem758[a7_1968 + 64:word32] = 0x00000000
	a3_1270 = a4_1925
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000170E:
	branch v101_428 != 0x70 l00001720
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001714:
	Mem772[a7_1968 + 72:word32] = Mem770[a7_1968 + 72:word32] | 0x00000001
	d4_376 = 108
	d1_1068 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001720:
	word32 d3_1050
	word32 a7_1020
	branch SLICE(d1_1068, byte, 0) == 0x64 l0000172E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001726:
	branch SLICE(d1_1068, byte, 0) != 0x69 l00001878
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001878:
	branch d4_376 != 0x00000001 l0000189C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000189C:
	branch d4_376 != 0x0000006C l000018BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018BE:
	word32 d0_796 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem804[a7_1968 + 60:word32] = Mem801[d0_796:word32]
	Mem805[a7_1968 + 56:word32] = 0x00000000
	d3_1050 = d0_796 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018A4:
	word32 d0_813 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem819[a7_1968 + 60:word32] = Mem801[d0_813:word32]
	Mem820[a7_1968 + 56:word32] = 0x00000000
	d3_1050 = d0_813 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001880:
	word32 d0_828 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem834[a7_1968 + 60:word32] = Mem801[d0_828 + 0x00000004:word32]
	Mem836[a7_1968 + 56:word32] = Mem834[d0_828:word32]
	d3_1050 = d0_828 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018D6:
	branch d4_376 != 0x00000068 l000018F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018DE:
	word16 v264_844 = Mem843[a7_1968 + 62:word16]
	word32 a7_848 = a7_1968 - 4
	Mem851[a7_848:word32] = d1_1068
	Mem857[a7_848 + 64:word32] = (uint32) (uint16) v264_844
	Mem858[a7_848 + 60:word32] = 0x00000000
	d1_1068 = Mem858[a7_848:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018F2:
	branch d4_376 != 0x00000002 l0000190E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018FA:
	byte v279_869 = Mem868[a7_1968 + 63:byte]
	word32 a7_873 = a7_1968 - 4
	Mem876[a7_873:word32] = d1_1068
	Mem882[a7_873 + 64:word32] = (uint32) (uint8) v279_869
	Mem883[a7_873 + 60:word32] = 0x00000000
	d1_1068 = Mem883[a7_873:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000190E:
	word32 d0_891 = Mem890[a7_1968 + 72:word32] & 1
	Mem894[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	a7_1020 = a7_1968
	branch d0_891 == 0x00000000 l000019AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000191E:
	branch SLICE(d1_1068, byte, 0) != 0x6F l0000195A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001924:
	branch d5_256 != 0x00000000 l0000194E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001928:
	word32 a7_911 = a7_1968 - 4
	Mem913[a7_911:word32] = d0_891
	Mem916[a7_911 - 4:word32] = d1_1068
	word32 d0_917 = Mem916[a7_911 + 64:word32]
	word32 d1_918 = Mem916[a7_911 + 60:word32]
	Mem935[a7_911 - 8:word32] = d2_1005
	d2_1005 = Mem935[a7_911 - 8:word32]
	d1_1068 = Mem935[a7_911 - 4:word32]
	d0_891 = Mem935[a7_911:word32]
	branch d1_918 - (d0_917 <u 0x00000000) == 0x00000000 l0000195A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000194E:
	Mem975[a7_1968 + 106:byte] = 0x30
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000195A:
	a7_1020 = a7_1968
	branch SLICE(d1_1068, byte, 0) == 0x78 l0000196A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001960:
	Mem984[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	branch SLICE(d1_1068, byte, 0) != 0x58 l000019AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000196A:
	Mem991[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	word32 a7_992 = a7_1968 - 4
	Mem997[a7_992:word32] = d0_891
	Mem1000[a7_992 - 4:word32] = d1_1068
	word32 d0_1001 = Mem1000[a7_992 + 64:word32]
	word32 d1_1002 = Mem1000[a7_992 + 60:word32]
	Mem1008[a7_992 - 8:word32] = d2_1005
	word32 d1_1017 = Mem1008[a7_992 - 4:word32]
	a7_1020 = a7_992 + 4
	branch d1_1002 - (d0_1001 <u 0x00000000) == 0x00000000 l000019AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001994:
	Mem1028[a7_992 + 110 + d7_1024:byte] = 0x30
	word32 d7_1026 = d7_1024 + 0x00000001
	Mem1033[a7_992 + 110 + d7_1026:byte] = SLICE(d1_1017, byte, 0)
	Mem1035[a7_992 + 48:byte] = SLICE(d1_1017, byte, 0)
	d7_1024 = d7_1026 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000172E:
	word32 d0_1062
	branch d4_376 != 0x00000001 l00001754
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001754:
	branch d4_376 != 0x0000006C l00001780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001780:
	word32 d0_1048 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1053 = Mem801[d0_1048:word32]
	Mem1056[a7_1968 + 52:word32] = d0_1053
	word32 a7_1057 = a7_1968 - 4
	Mem1060[a7_1057:word32] = d1_1068
	Mem1065[a7_1057 + 52:word32] = d0_1053 >> 31
	word32 v237_1066 = Mem1065[a7_1057:word32]
	d3_1050 = d0_1048 + 0x00000004
	d0_1062 = d0_1053 >> 31
	d1_1068 = v237_1066
	branch d4_376 != 0x00000068 l000017C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017AA:
	word16 v239_1072 = Mem1065[a7_1057 + 58:word16]
	Mem1077[a7_1057:word32] = v237_1066
	word32 d1_1081 = (int32) (int16) SEQ(SLICE(v237_1066, word16, 16), v239_1072)
	Mem1083[a7_1057 + 56:word32] = d1_1081
	Mem1086[a7_1057 - 4:word32] = SEQ(SLICE(d0_1053 >> 31, word16, 16), v239_1072)
	Mem1091[a7_1057 + 52:word32] = d1_1081 >> 31
	d1_1068 = Mem1091[a7_1057 - 4:word32]
	d0_1062 = Mem1091[a7_1057:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017C6:
	branch d4_376 != 0x00000002 l000017EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017CE:
	byte v250_1105 = Mem1104[a7_1968 + 55:byte]
	word32 a7_1109 = a7_1968 - 4
	Mem1112[a7_1109:word32] = d1_1068
	word32 d1_1117 = (int32) (int16) (int8) SEQ(SLICE(d1_1068, word24, 8), v250_1105)
	Mem1119[a7_1109 + 56:word32] = d1_1117
	Mem1122[a7_1109 - 4:word32] = SEQ(SLICE(d0_1062, word24, 8), v250_1105)
	Mem1127[a7_1109 + 52:word32] = d1_1117 >> 31
	d1_1068 = Mem1127[a7_1109 - 4:word32]
	d0_1062 = Mem1127[a7_1109:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000175C:
	word32 d0_1138 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1142 = Mem801[d0_1138:word32]
	Mem1144[a7_1968 + 52:word32] = d0_1142
	word32 a7_1145 = a7_1968 - 4
	Mem1147[a7_1145:word32] = d1_1068
	Mem1152[a7_1145 + 52:word32] = d0_1142 >> 31
	d3_1050 = d0_1138 + 0x00000004
	d0_1062 = d0_1142 >> 31
	d1_1068 = Mem1152[a7_1145:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001736:
	d0_1062 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1166[a7_1968 + 52:word32] = Mem801[d0_1062 + 0x00000004:word32]
	Mem1168[a7_1968 + 48:word32] = Mem1166[d0_1062:word32]
	d3_1050 = d0_1062 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017EC:
	Mem1173[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	word32 a7_1174 = a7_1968 - 4
	Mem1177[a7_1174:word32] = d0_1062
	Mem1180[a7_1174 - 4:word32] = d1_1068
	word32 d0_1181 = Mem1180[a7_1174 + 56:word32]
	word32 d1_1182 = Mem1180[a7_1174 + 52:word32]
	Mem1188[a7_1174 - 8:word32] = d2_1005
	a7_1020 = a7_1174 + 4
	branch d1_1182 - (d0_1181 <u 0x00000000) >= 0x00000000 l00001836
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001836:
	byte v165_1202 = Mem1188[a7_1174 + 48:byte]
	branch (Mem1188[a7_1174 + 76:word32] & 16) == 0x00000000 l00001850
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001850:
	branch (Mem1188[a7_1174 + 76:word32] & 8) == 0x00000000 l00001864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001858:
	Mem1225[a7_1174 + 110:byte] = 0x20
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001842:
	Mem1232[a7_1174 + 110:byte] = 0x2B
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001864:
	Mem1237[a7_1174 + 64:word32] = Mem1235[a7_1174 + 56:word32]
	Mem1239[a7_1174 + 60:word32] = Mem1237[a7_1174 + 52:word32]
	Mem1242[a7_1174 + 48:byte] = v165_1202
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001816:
	Mem1248[a7_1174 + 110:byte] = 0x2D
	d7_1024 = 0x00000001
	a7_1020 = Mem1248[a7_1174 + 0x00000040:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019AC:
	byte v153_1266 = Mem1265[a7_1020 + 44:byte]
	a3_1270 = a7_1020 + 98
	branch v153_1266 == 0x78 l000019C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019BA:
	branch v153_1266 != 0x58 l000019CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019CA:
	branch v153_1266 != 0x6F l000019DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019DA:
	Mem1281[a7_1020 + 48:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019D0:
	Mem1284[a7_1020 + 48:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019E2:
	Mem1289[a7_1020 + 44:word32] = Mem1287[a7_1020 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019C0:
	Mem1293[a7_1020 + 44:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019E8:
	word32 a6_1305
	Mem1298[a7_1020 + 108:word32] = Mem1296[a7_1020 + 44:word32]
	branch v153_1266 == 0x58 l000019FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019FA:
	a6_1305 = 0x00001E00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019F4:
	a6_1305 = 0x00001DF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019FE:
	Mem1310[a7_1020 + 44:word32] = a6_1305
	Mem1326[a7_1020 + 124:word32] = d3_1050
	Mem1340[a7_1020 + 68:word32] = d5_256
	Mem1359[a7_1020 + 48:word32] = d6_1480
	Mem1367[a7_1020 + 98:word32] = d7_1024
	word32 v189_1368 = a7_1020 + 56
	word32 d6_1369 = Mem1367[v189_1368:word32]
	word32 d7_1371 = Mem1367[v189_1368 + 4:word32]
	word32 d3_1373 = Mem1367[a7_1020 + 102:word32]
	word32 a1_1375 = Mem1367[a7_1020 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A20:
	word32 d1_1378 = Mem1377[a7_1020 + 108:word32]
	word32 a7_1383 = a7_1020 - 4
	Mem1385[a7_1383:word32] = d1_1378 >> 31
	Mem1388[a7_1383 - 4:word32] = d1_1378
	Mem1392[a7_1383 - 8:word32] = a1_1375
	Mem1395[a7_1383 - 12:word32] = d1_1378
	Mem1397[a7_1383 - 16:word32] = d1_1378 >> 31
	Mem1400[a7_1383 - 20:word32] = d7_1371
	Mem1403[a7_1383 - 24:word32] = d6_1369
	word32 d1_1406 = fn00002778(Mem1403[a7_1383 - 24:word32], Mem1403[a7_1383 - 20:word32], Mem1403[a7_1383 - 16:word32], Mem1403[a7_1383 - 12:word32])
	word32 v193_1414 = Mem1403[a7_1383 - 8:word32]
	word32 d1_1419 = Mem1403[a7_1383 - 4:word32]
	word32 d0_1421 = Mem1403[a7_1383:word32]
	a3_1270 = a3_1270 - 1
	Mem1428[a3_1270:byte] = Mem1403[v193_1414 + d1_1406:byte]
	Mem1431[a7_1383:word32] = d0_1421
	Mem1434[a7_1383 - 4:word32] = d1_1419
	Mem1437[a7_1383 - 8:word32] = v193_1414
	Mem1440[a7_1383 - 12:word32] = d1_1419
	Mem1442[a7_1383 - 16:word32] = d0_1421
	Mem1444[a7_1383 - 20:word32] = d7_1371
	Mem1446[a7_1383 - 24:word32] = d6_1369
	word32 d1_1450
	word32 d0_1449 = fn00002430(Mem1446[a7_1383 - 24:word32], Mem1446[a7_1383 - 20:word32], Mem1446[a7_1383 - 16:word32], Mem1446[a7_1383 - 12:word32], out d1_1450, out a0_1447)
	a1_1375 = Mem1446[a7_1383 - 8:word32]
	d6_1369 = d0_1449
	d7_1371 = d1_1450
	a7_1465 = a7_1383 + 4
	d3_1373 = d3_1373 + 0x00000001
	d0_1471 = d1_1450
	branch d0_1449 - (d1_1450 <u 0x00000000) != 0x00000000 l00001A20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A8E:
	Mem1478[a7_1383 + 106:word32] = d3_1373
	d7_1024 = Mem1478[a7_1383 + 102:word32]
	d6_1480 = Mem1478[a7_1383 + 52:word32]
	d5_1481 = Mem1478[a7_1383 + 72:word32]
	d3_1482 = Mem1478[a7_1383 + 128:word32]
	branch d5_1481 != 0xFFFFFFFF l00001AB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AB0:
	Mem1487[a7_1383 + 76:word32] = Mem1478[a7_1383 + 76:word32] & 0xFFFFFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AAA:
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BFC:
	branch d5_1481 - Mem1496[a7_1465 + 102:word32] >u 0x00000000 l00001C0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C0A:
	Mem1502[a7_1465 + 44:word32] = d5_1481
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C02:
	Mem1505[a7_1465 + 44:word32] = Mem1496[a7_1465 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C0E:
	word32 a7_1508 = a7_1465 - 4
	Mem1516[a7_1508:word32] = d0_1471
	Mem1531[a7_1508 + 52:word32] = Mem1516[a7_1508 + 48:word32] + d7_1024
	Mem1537[a7_1508:word32] = Mem1531[a7_1508:word32]
	word32 d0_1541 = Mem1537[a7_1508:word32]
	branch Mem1537[a7_1508 + 52:word32] - Mem1537[a7_1508 + 68:word32] <u 0x00000000 l00001C32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C32:
	Mem1546[a7_1508:word32] = d0_1541
	Mem1551[a7_1508 + 48:word32] = Mem1546[a7_1508 + 68:word32] - Mem1546[a7_1508 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C2C:
	Mem1556[a7_1508 + 48:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C42:
	Mem1564[a7_1465 + 48:word32] = Mem1562[a7_1465 + 44:word32]
	word32 d0_1566 = Mem1564[a7_1465 + 72:word32] & 2
	branch d0_1566 == 0x00000000 l00001C84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C50:
	word32 d2_1571 = 0
	branch d7_1024 == 0x00000000 l00001C84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C56:
	word32 a7_1578 = a7_1465 - 4
	Mem1581[a7_1578:word32] = a5_1579
	Mem1593[a7_1578 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1566, word24, 8), Mem1581[a7_1578 + 110 + d2_1571:byte])
	d0_1566 = fn00001E10(Mem1593[a7_1578 - 4:word32], Mem1593[a7_1578:word32], out a0_1447, out a5_1579)
	branch d0_1566 != 0xFFFFFFFF l00001C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C7C:
	d2_1571 = d2_1571 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d7_1024 - d2_1571 >u 0x00000000 l00001C56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C84:
	branch (Mem1619[a7_1465 + 72:word32] & 4) != 0x00000000 l00001CD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C8C:
	word32 d2_1625 = 0
	branch Mem1619[a7_1465 + 48:word32] == 0x00000000 l00001CD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C94:
	word32 d4_1630 = Mem1619[a7_1465 + 72:word32]
	word32 a4_1632 = Mem1619[a7_1465 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C9C:
	word32 a0_1647
	word32 a7_1634 = a7_1465 - 4
	Mem1637[a7_1634:word32] = a5_1579
	branch (d4_1630 & 2) == 0x00000000 l00001CAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CAA:
	a0_1647 = SEQ(SLICE(a0_1447, word16, 16), 0x0020)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA4:
	a0_1647 = SEQ(SLICE(a0_1447, word16, 16), 0x0030)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CAE:
	Mem1654[a7_1465 - 8:word32] = a0_1647
	branch fn00001E10(Mem1654[a7_1465 - 8:word32], Mem1654[a7_1465 - 4:word32], out a0_1447, out a5_1579) != 0xFFFFFFFF l00001CC6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CC6:
	d2_1625 = d2_1625 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a4_1632 - d2_1625 >u 0x00000000 l00001C9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CCE:
	Mem1683[a7_1634 + 52:word32] = a4_1632
	Mem1686[a7_1634 + 76:word32] = d4_1630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CD6:
	word32 d0_1691 = Mem1690[a7_1465 + 72:word32] & 2
	branch d0_1691 != 0x00000000 l00001D12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CDE:
	word32 d2_1696 = 0
	branch d7_1024 == 0x00000000 l00001D12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CE4:
	word32 a7_1706 = a7_1465 - 4
	Mem1709[a7_1706:word32] = a5_1579
	Mem1721[a7_1706 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1691, word24, 8), Mem1709[a7_1706 + 110 + d2_1696:byte])
	word32 a0_2918
	d0_1691 = fn00001E10(Mem1721[a7_1706 - 4:word32], Mem1721[a7_1706:word32], out a0_2918, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001D0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D0A:
	d2_1696 = d2_1696 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d7_1024 - d2_1696 >u 0x00000000 l00001CE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D12:
	word32 d2_1747 = Mem1746[a7_1465 + 102:word32]
	branch d5_1481 - Mem1746[a7_1465 + 102:word32] <=u 0x00000000 l00001D40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D1C:
	word32 a7_1761 = a7_1465 - 4
	Mem1764[a7_1761:word32] = a5_1579
	Mem1767[a7_1761 - 0x00000004:word32] = 0x00000030
	word32 a0_2919
	d0_1691 = fn00001E10(Mem1767[a7_1761 - 0x00000004:word32], Mem1767[a7_1761:word32], out a0_2919, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D38:
	d2_1747 = d2_1747 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d5_1481 - d2_1747 >u 0x00000000 l00001D1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D40:
	word32 d2_1791 = 0
	branch Mem1793[a7_1465 + 102:word32] == 0x00000000 l00001D76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D48:
	word32 a4_1798 = Mem1793[a7_1465 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D4C:
	word32 a7_1800 = a7_1465 - 4
	Mem1803[a7_1800:word32] = a5_1579
	Mem1815[a7_1800 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1691, word24, 8), Mem1803[a3_1270 + d2_1791:byte])
	word32 a0_2920
	d0_1691 = fn00001E10(Mem1815[a7_1800 - 4:word32], Mem1815[a7_1800:word32], out a0_2920, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001D6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D6E:
	d2_1791 = d2_1791 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a4_1798 - d2_1791 >u 0x00000000 l00001D4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D76:
	d0 = Mem1841[a7_1465 + 72:word32] & 4
	branch d0 == 0x00000000 l00001DAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D7E:
	word32 d2_1847 = 0
	branch Mem1841[a7_1465 + 48:word32] == 0x00000000 l00001DAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D86:
	word32 a3_1852 = Mem1841[a7_1465 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D8A:
	word32 a7_1854 = a7_1465 - 4
	Mem1857[a7_1854:word32] = a5_1579
	Mem1860[a7_1854 - 0x00000004:word32] = 0x00000020
	word32 a0_2921
	d0 = fn00001E10(Mem1860[a7_1854 - 0x00000004:word32], Mem1860[a7_1854:word32], out a0_2921, out a5_1579)
	branch d0 != 0xFFFFFFFF l00001DA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA4:
	d2_1847 = d2_1847 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a3_1852 - d2_1847 >u 0x00000000 l00001D8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DAC:
	a7_1968 = a7_1465
	a4_1925 = a2_1892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD0:
	branch Mem1927[a4_1925:byte] != 0x00 l000014AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D6A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D32:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D04:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CC0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C76:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD8:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001490_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001E10(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00001E10_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E10:
	word32 a0_104
	word32 d1_53
	Mem17[dwArg08 + 24:word32] = Mem11[dwArg08 + 24:word32] | 2
	word32 v13_19 = Mem17[dwArg08 + 20:word32] - 0x00000001
	Mem20[dwArg08 + 20:word32] = v13_19
	branch v13_19 < 0x00000000 l00001E54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E2C:
	branch dwArg04 != 10 l00001E3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E32:
	branch (Mem20[dwArg08 + 24:word32] & 0x00000080) != 0x00000000 l00001E54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E54:
	word32 a1_43
	d1_53 = fn00001E6C(dwArg04, dwArg08, out a0_104, out a1_43, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E3E:
	a0_104 = Mem20[dwArg08 + 4:word32]
	Mem63[dwArg08 + 4:word32] = a0_104 + 1
	Mem66[a0_104:byte] = SLICE(dwArg04, byte, 0)
	d1_53 = (uint32) (uint8) Mem66[a0_104:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E62:
	a0Out = a0_104
	a5Out = a5
	return d1_53
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001E10_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001E6C(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn00001E6C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E6C:
	word32 d0_109
	word32 a5_127
	word32 a1_125
	fn00002400(out a1_125, out a5_127)
	branch dwArg08 != 0x00000000 l00001E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E88:
	branch (Mem29[dwArg08 + 24:word32] & 73) == 64 l00001E9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9A:
	branch Mem29[dwArg08 + 28:word32] != 0x00000000 l00001EB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EA0:
	branch (Mem29[dwArg08 + 24:word32] & 4) == 0x00000000 l00001EB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB0:
	Mem62[dwArg08 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EA8:
	Mem66[dwArg08 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB8:
	branch Mem69[dwArg08 + 8:word32] != 0x00000000 l00001EF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EF8:
	branch Mem69[dwArg08:word32] == 0x00000000 l00001F52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F52:
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EFC:
	word32 d0_101 = Mem69[dwArg08 + 24:word32] & 0x00000080
	branch d0_101 == 0x00000000 l00001F28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F08:
	d0_101 = 10
	branch dwArg04 != 10 l00001F28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F28:
	word32 d4_95 = Mem69[dwArg08 + 4:word32] - Mem69[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_95 - d0_101 == 0x00000000 l00001F56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F46:
	Mem108[dwArg08 + 24:word32] = Mem69[dwArg08 + 24:word32] | 16
	a0 = dwArg08 + 24
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F0E:
	word32 a0_112 = Mem69[dwArg08 + 4:word32]
	Mem116[dwArg08 + 4:word32] = a0_112 + 1
	Mem118[a0_112:byte] = SLICE(dwArg04, byte, 0)
	d0_109 = fn00001F80(dwArg08, out a0, out a1_125, out a5_127)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EBE:
	word32 d4_143
	branch (Mem69[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l00001ED2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED2:
	d4_143 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ECE:
	d4_143 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED4:
	word32 d1_161
	word32 d0_160 = fn0000202C(d4_143 + Mem69[dwArg08 + 28:word32], out d1_161, out a0, out a1_125)
	branch d0_160 != 0x00000000 l00001EEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EEE:
	Mem174[dwArg08 + 8:word32] = d0_160 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F56:
	Mem181[dwArg08 + 24:word32] = Mem179[dwArg08 + 24:word32] | 2
	a0 = Mem181[dwArg08 + 8:word32]
	Mem188[a0:byte] = SLICE(dwArg04, byte, 0)
	word32 a1_189 = Mem188[dwArg08 + 8:word32]
	Mem192[dwArg08 + 4:word32] = a1_189 + 1
	Mem197[dwArg08 + 20:word32] = Mem192[dwArg08 + 28:word32] - 0x00000001
	a1_125 = a1_189 + 1
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EE8:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E94:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E82:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F7A:
	a0Out = a0
	a1Out = a1_125
	a5Out = a5_127
	return d0_109
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001E6C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F80(word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn00001F80_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F80:
	word32 d0_153
	word32 a1_21
	word32 a5_23
	fn00002400(out a1_21, out a5_23)
	branch dwArg04 != 0x00000000 l00001F96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F96:
	branch Mem17[dwArg04 + 28:word32] != 0x00000000 l00001FB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F9C:
	branch (Mem17[dwArg04 + 24:word32] & 4) == 0x00000000 l00001FAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FAC:
	Mem42[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FA4:
	Mem46[dwArg04 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB4:
	branch Mem49[dwArg04 + 8:word32] != 0x00000000 l00001FBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FBE:
	word32 d0_55 = Mem49[dwArg04 + 24:word32] & 2
	branch d0_55 == 0x00000000 l00002004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC6:
	branch Mem49[dwArg04:word32] == 0x00000000 l00001FF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF4:
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FCA:
	word32 d4_68 = Mem49[dwArg04 + 4:word32] - Mem49[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_68 - d0_55 == 0x00000000 l00001FF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF8:
	Mem78[dwArg04 + 4:word32] = Mem49[dwArg04 + 8:word32]
	Mem80[dwArg04 + 20:word32] = Mem78[dwArg04 + 28:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002004:
	Mem87[dwArg04 + 24:word32] = Mem85[dwArg04 + 24:word32] & -4
	a0 = dwArg04 + 24
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FE8:
	Mem93[dwArg04 + 24:word32] = Mem49[dwArg04 + 24:word32] | 16
	a0 = dwArg04 + 24
	d0_153 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FBA:
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F92:
	d0_153 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000200E:
	a0Out = a0
	a1Out = a1_21
	a5Out = a5_23
	return d0_153
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F80_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000202C(word32 dwArg04, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn0000202C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000202C:
	word32 d0_106
	branch dwArg04 != 0x00000000 l0000203A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000203A:
	branch Mem5[0x00003EA8:word32] != 0x00000000 l0000205E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002042:
	word32 a0_13 = Mem5[0x00003EA4:word32]
	Mem21[0x00000000:word32] = 0x00000000
	Mem36[0x00003EA8:word32] = fn00002320(dwLoc10, a0_13, a0_13, out d1, out a0, out a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000205E:
	branch Mem39[0x00003EA8:word32] != 0x00000000 l0000206A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000206A:
	word32 d0_58 = fn000021FC(Mem51[0x00003EA8:word32], dwArg04 + 4, out d1, out a0)
	a1 = d0_58
	branch d0_58 != 0x00000000 l00002088
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002088:
	Mem72[d0_58:word32] = dwArg04
	a0 = d0_58 + 4
	d0_106 = d0_58 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002084:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002066:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002036:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002090:
	d1Out = d1
	a0Out = a0
	a1Out = a1
	return d0_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000202C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002098(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00002098_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002098:
	branch dwArg04 == 0x00000000 l000020C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020A2:
	branch Mem0[0x00003EA8:word32] == 0x00000000 l000020C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020AA:
	fn00002160(Mem23[0x00003EA8:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020C2:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002098_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002160(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn00002160_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002160:
	branch Mem20[Mem20[0x00003E74:word32] + 20:word16] <u 0x0027 l00002190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002190:
	branch dwArg04 == 0x00000000 l000021F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002194:
	branch dwArg08 == 0x00000000 l000021F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002198:
	word32 a3_36 = dwArg08 + -12
	branch dwArg0C - Mem20[dwArg04 + 20:word32] >=u 0x00000000 l000021DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021A4:
	word32 a2_40 = dwArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021A6:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0x00000000 l000021F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021AC:
	branch Mem20[a2_40 + 8:byte] == 0x00 l000021A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B2:
	branch dwArg08 - Mem20[a2_40 + 20:word32] <u 0x00000000 l000021A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B8:
	branch dwArg08 - Mem20[a2_40 + 24:word32] >=u 0x00000000 l000021A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021BE:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28:word32] - Mem20[dwArg04 + 16:word32] != 0x00000000 l000021F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021D8:
	a3_36 = a2_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021DA:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4
	FreeMem(a3_74, Mem20[a3_74:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000217E:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021F4:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002160_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000021FC(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn000021FC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021FC:
	word32 d0_158
	word32 a0_115 = Mem26[0x00003E74:word32]
	branch Mem26[a0_115 + 20:word16] <u 0x0027 l00002228
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002228:
	word32 a3_120 = 0x00000000
	branch dwArg04 == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002230:
	branch dwArg08 == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002236:
	branch dwArg08 - Mem26[dwArg04 + 20:word32] >=u 0x00000000 l000022EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022EA:
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_50 = AllocMem(dwArg08 + 16, d1)
	a3_120 = d0_50
	branch d0_50 == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002304:
	Mem56[d0_50:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_50 + 4)
	Mem62[d0_50 + 12:word32] = 0x00000000
	a0_115 = dwArg04
	a3_120 = d0_50 + 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000223E:
	word32 a5_162 = Mem26[dwArg04:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002240:
	branch Mem26[a5_162:word32] == 0x00000000 l00002262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002262:
	word32 d3_77 = Mem26[dwArg04 + 16:word32] + 40
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_82 = AllocMem(d3_77, d1)
	a3_120 = d0_82
	branch d0_82 == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002280:
	Mem88[d0_82:word32] = d3_77
	Mem91[d0_82 + 12:byte] = 0x0A
	Mem95[d0_82 + 20:word32] = d0_82 + 40
	Mem97[d0_82 + 24:word32] = d0_82 + 40
	Mem99[Mem97[d0_82 + 20:word32]:word32] = 0x00000000
	word32 a2_100 = Mem99[d0_82 + 20:word32]
	Mem103[a2_100 + 4:word32] = Mem99[dwArg04 + 16:word32]
	Mem106[d0_82 + 32:word32] = Mem103[a2_100 + 4:word32]
	Mem110[d0_82 + 28:word32] = Mem106[d0_82 + 32:word32] + Mem106[d0_82 + 20:word32]
	AddHead(dwArg04, d0_82 + 4)
	a0_115 = d0_82 + 4
	a3_120 = Allocate(d0_82 + 4, dwArg08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002244:
	branch Mem26[a5_162 + 8:byte] == 0x00 l0000225E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000224A:
	word32 d0_128 = Allocate(a5_162, dwArg08)
	a0_115 = a5_162
	a3_120 = d0_128
	branch d0_128 != 0x00000000 l000022CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022CE:
	branch (Mem135[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l00002318
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022DA:
	word32 a2_142 = a3_120
	word32 d2_145 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E0:
	Mem148[a2_142:word32] = 0x00000000
	word32 a2_149 = a2_142 + 4
	Mem150[a2_149:word32] = 0x00000000
	a2_142 = a2_149 + 4
	d2_145 = d2_145 - 0x00000001
	branch d2_145 != 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002318:
	d0_158 = a3_120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000225E:
	a5_162 = Mem26[a5_162:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002216:
	a0_115 = dwArg04
	d0_158 = AllocPooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000231A:
	d1Out = d1
	a0Out = a0_115
	return d0_158
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000021FC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002320(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn00002320_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002320:
	word32 d0_51
	word32 a0_17 = Mem14[0x00003E74:word32]
	branch Mem14[a0_17 + 20:word16] <u 0x0027 l0000234E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000234E:
	a1 = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l00002388
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002354:
	word32 d0_30 = AllocMem(24, 0)
	d1 = 0
	a1 = d0_30
	branch d0_30 == 0x00000000 l00002388
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000236A:
	Mem37[d0_30:word32] = d0_30 + 4
	Mem38[d0_30 + 4:word32] = 0x00000000
	Mem40[d0_30 + 8:word32] = d0_30
	Mem42[d0_30 + 12:word32] = dwArg04
	Mem46[d0_30 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem48[d0_30 + 20:word32] = dwArg0C
	a0_17 = d0_30 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002388:
	d0_51 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000233A:
	d1 = dwArg08
	d0_51 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000238A:
	d1Out = d1
	a0Out = a0_17
	a1Out = a1
	return d0_51
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002320_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002390(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn00002390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002390:
	branch Mem11[Mem11[0x00003E74:word32] + 20:word16] <u 0x0027 l000023B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B4:
	branch dwArg04 == 0x00000000 l000023F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B8:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0x00000000 l000023EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023CA:
	word32 a2_29 = a2_24 - 4
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0x00000000 l000023CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023EA:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023A6:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023F8:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002400(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn00002400_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002400:
	SetSignal(0, 0x00001000)
	word32 d1_21 = 0x00001000
	branch 0x00000000 == 0x00000000 l0000242A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000241E:
	d1_21 = fn0000131C(0x00000014, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000242A:
	a1Out = a1
	a5Out = a5
	return d1_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002400_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002430(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00002430_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002430:
	word32 d0_196
	word32 d1_142 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_166 = dwArg10
	branch dwArg0C != 0x00000000 l00002486
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002486:
	branch dwArg04 - dwArg0C >=u 0x00000000 l00002490
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002490:
	word32 d4_29 = 24
	word32 d6_30 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l000024AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000249A:
	d4_29 = 16
	d6_30 = __rol(d6_30, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l000024AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024A2:
	d4_29 = 8
	d6_30 = __rol(d6_30, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l000024AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024AA:
	d4_29 = 0
	d6_30 = SEQ(SLICE(d6_30, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024AE:
	word32 d4_61 = SEQ(SLICE(d4_29, word24, 8), SLICE(d4_29, byte, 0) + Mem17[0x00003EAC + (int32) ((int16) SEQ(SLICE(d6_30, word16, 16), SLICE(d6_30, word16, 0) & 0x00FF)):byte])
	word32 d5_63 = 32 - d4_61
	branch d5_63 != 0x00000000 l000024CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024CE:
	word32 d1_86
	word32 d2_322
	word32 d0_85 = fn00002534(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_322)
	word32 d3_72 = dwArg10 << d5_63
	word32 d5_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u SLICE(d5_101, word16, 0)
	word32 d2_107 = __swap(d0_85 *u SLICE(d3_72, word16, 0))
	word16 v34_108 = SLICE(d2_107 + d3_102, word16, 0)
	word16 v35_109 = SLICE(d2_107, word16, 16)
	word32 d4_104 = d0_85 *u SLICE(d6_103, word16, 0)
	word16 v39_116 = SLICE(SEQ(v35_109, v34_108) + d4_104, word16, 0)
	word32 d6_82 = dwArg08 << d5_63
	word32 d2_124 = __swap(SEQ(v35_109, v39_116))
	word32 d5_105 = d5_101 *u SLICE(d6_103, word16, 0)
	a0_20 = d6_82
	d1_142 = d0_85
	word32 v48_134 = d1_86 - ((__swap(SEQ(SLICE(d3_102, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_104, word16, 16), 0x0000))) + SEQ(SLICE(d5_105, word16, 16), (SLICE(d5_105, word16, 0) + (v34_108 <u 0x0000)) + (v39_116 <u 0x0000)))
	branch v48_134 <u 0x00000000 l0000252A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002524:
	branch v48_134 != 0x00000000 l0000252C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002526:
	branch d6_82 - d2_124 >=u 0x00000000 l0000252C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252A:
	d1_142 = d0_85 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C2:
	branch dwArg0C - dwArg04 <u 0x00000000 l000024CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C6:
	branch dwArg10 - dwArg08 >u 0x00000000 l0000248A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024CA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000248A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002448:
	branch dwArg04 - dwArg10 >=u 0x00000000 l0000245A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000245A:
	branch dwArg10 != 0x00000000 l00002466
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000245E:
	d3_166 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002466:
	word32 d1_175
	word32 d2_176
	word32 d0_174 = fn00002534(0, dwArg04, d3_166, out d1_175, out d2_176)
	word32 d2_321
	word32 d1_320
	d1_142 = fn00002534(d1_175, dwArg08, d2_176, out d1_320, out d2_321)
	d0_196 = d0_174
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000244C:
	word32 d2_319
	word32 d1_318
	d1_142 = fn00002534(dwArg04, dwArg08, dwArg10, out d1_318, out d2_319)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252C:
	d0_196 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252E:
	d1Out = d1_142
	a0Out = a0_20
	return d0_196
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002430_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002534(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn00002534_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002534:
	word32 d7_13 = d2
	branch d2 == 0x00000000 l0000254E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000253C:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0x00000000 l0000255C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000255C:
	word32 d2_22 = __swap(d2)
	branch SLICE(d2_22, word16, 0) != 0x0000 l00002584
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002584:
	byte bLoc26_362 = 0x00
	word32 d0_44 = 0
	branch d2 < 0x00000000 l000025A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002596:
	d6_17 = d6_17 * 0x00000002
	d0_44 = SEQ(SLICE(d0_44, word16, 16), SLICE(d0_44, word16, 0) + 0x0001)
	d5_19 = d5_19 * 0x00000002 + (d6_17 <u 0x00000000)
	d7_13 = d7_13 * 0x00000002
	branch d7_13 > 0x00000000 l00002596
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A0:
	word16 v41_64 = SLICE(d0_44, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A2:
	word32 d1_104
	word32 d2_73 = __swap(d5_19)
	word32 d3_74 = __swap(d7_13)
	branch SLICE(d2_73 - d3_74, word16, 0) != 0x0000 l000025B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025B4:
	d1_104 = __swap(SEQ(SLICE(__swap(SEQ((uint16) (d5_19 % SLICE(d3_74, uint16, 0)), (uint16) (d5_19 /u SLICE(d3_74, uint16, 0)))), word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025AE:
	d1_104 = 0x0000FFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025BE:
	word32 d6_98 = __swap(SEQ(SLICE(d6_17, word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025C4:
	word32 d4_113 = __swap(d5_19 - __swap(d7_13) *u SLICE(d1_104, word16, 0))
	word16 wLoc22_442 = SLICE(dwLoc24, word16, 0)
	word32 d2_106 = d1_104 *u SLICE(d7_13, word16, 0)
	word32 d4_121 = SEQ(SLICE(d4_113, word16, 16), SLICE(d6_98, word16, 0))
	branch SLICE(d4_113, word16, 0) != 0x0000 l000025E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025DC:
	branch d2_106 - d4_121 <=u 0x00000000 l000025E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025E4:
	word32 d6_133 = __swap(d1_104)
	word32 d3_140 = __swap(d6_133)
	word32 d4_142 = __swap(d7_13)
	word32 d5_141 = d7_13 *u SLICE(d3_140, word16, 0)
	word32 d6_146 = __swap(d6_133 *u SLICE(d7_13, word16, 0))
	word16 v56_147 = SLICE(d6_146 + d5_141, word16, 0)
	word16 v57_148 = SLICE(d6_146, word16, 16)
	word32 d2_143 = d6_133 *u SLICE(d4_142, word16, 0)
	word16 v60_155 = SLICE(SEQ(v57_148, v56_147) + d2_143, word16, 0)
	word32 d3_144 = d3_140 *u SLICE(d4_142, word16, 0)
	word32 d6_178 = d6_17 - __swap(SEQ(v57_148, v60_155))
	word32 d5_181 = d5_19 - ((__swap(SEQ(SLICE(d5_141, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d2_143, word16, 16), 0x0000))) + SEQ(SLICE(d3_144, word16, 16), (SLICE(d3_144, word16, 0) + (v56_147 <u 0x0000)) + (v60_155 <u 0x0000))) - (d6_178 <u 0x00000000)
	branch d5_181 >=u 0x00000000 l0000263C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002626:
	d6_178 = d6_178 + SEQ(SLICE(__swap(d7_13), word16, 16), 0x0000)
	d1_104 = d1_104 - 0x00000001
	d5_181 = d5_181 + (d6_178 <u 0x00000000) + __swap(SEQ(SLICE(d7_13, word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000263C:
	branch bLoc26_362 != 0x00 l00002658
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002658:
	word32 d6_220 = __swap(SEQ(SLICE(d6_178, word16, 16), SLICE(d5_181, word16, 0)))
	d0 = SEQ(SLICE(dwLoc24, word16, 16), SLICE(d1_104, word16, 0))
	word32 d5_221 = __swap(d5_181)
	word16 v83_224 = SLICE(d7_13, word16, 16)
	branch v41_64 == 0x0000 l00002672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002668:
	word32 d7_230 = SEQ(v83_224, v41_64 - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000266A:
	d5_221 = d5_221 >>u 0x00000001
	word16 v87_241 = SLICE(d7_230, word16, 0)
	d6_220 = __rcr(d6_220, 0x00000001, SLICE(cond(d5_221), bool, 4))
	d7_230 = SEQ(SLICE(d7_230, word16, 16), v87_241 - 1)
	branch v87_241 != 0x0000 l0000266A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002672:
	d1 = d6_220
	d2 = d2_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002642:
	word32 d5_266 = __swap(d5_181)
	word32 d6_267 = __swap(d6_178)
	d5_19 = SEQ(SLICE(d5_266, word16, 16), SLICE(d6_267, word16, 0))
	d6_17 = SEQ(SLICE(d6_267, word16, 16), 0x0000)
	bLoc26_362 = true
	dwLoc24 = SEQ(SLICE(d1_104, word16, 0), wLoc22_442) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025E0:
	d1_104 = d1_104 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002562:
	word32 d0_281 = __swap(d0)
	word32 d1_282 = __swap(d1)
	word32 d0_285 = SEQ(SLICE(d0_281, word16, 16), SLICE(d1_282, word16, 0))
	word32 d0_295 = SEQ((uint16) (d0_285 % SLICE(d2, uint16, 0)), SLICE(__swap(d1_282), word16, 0))
	d2 = SEQ(SLICE(__swap((uint32) (uint16) (d0_285 /u SLICE(d2, uint16, 0))), word16, 16), (uint16) (d0_295 /u SLICE(d2, uint16, 0)))
	d1 = __swap(SEQ((uint16) (d0_295 % SLICE(d2, uint16, 0)), 0x0000))
	d0 = d2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002542:
	branch d1 == 0x00000000 l0000267A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002548:
	branch d2 - d1 >u 0x00000000 l0000267A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000254E:
	d0 = fn000026F2(d1, d2, d2, out d1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000267A:
	d1Out = d1
	d2Out = d2
	return d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002534_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000026C0(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn000026C0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026C0:
	branch dwArg04 > 0x00000000 l000026E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E0:
	branch dwArg08 > 0x00000000 l000026E2_thunk_fn000026F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E2_thunk_fn000026F2:
	word32 d1_88
	return fn000026F2(dwArg04, dwArg08, d2, out d1_88)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E4:
	word32 d1_89
	return -fn000026F2(dwArg04, -dwArg08, d2, out d1_89)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026CA:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0x00000000 l000026D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D8:
	word32 d1_43
	return -fn000026F2(d0_36, dwArg08, d2, out d1_43)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D0:
	word32 d1_55
	return fn000026F2(d0_36, -dwArg08, d2, out d1_55)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000026C0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000026F2(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn000026F2_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026F2:
	word32 d1_22 = __swap(d1)
	word16 v10_9 = SLICE(d1_22, word16, 0)
	word16 v11_10 = SLICE(d2, word16, 16)
	word32 d2_11 = SEQ(v11_10, v10_9)
	branch v10_9 != 0x0000 l00002718
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002718:
	word32 d3_18 = 16
	branch SLICE(d1_22, word16, 0) >=u 0x0080 l00002726
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002722:
	d1_22 = __rol(d1_22, 0x00000008)
	d3_18 = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002726:
	branch SLICE(d1_22, word16, 0) >=u 0x0800 l00002730
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000272C:
	d1_22 = __rol(d1_22, 0x00000004)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0004)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002730:
	branch SLICE(d1_22, word16, 0) >=u 0x2000 l0000273A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002736:
	d1_22 = __rol(d1_22, 0x00000002)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0002)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000273A:
	branch SLICE(d1_22, word16, 0) < 0x0000 l00002742
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000273E:
	d1_22 = __rol(d1_22, 0x00000001)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002742:
	word32 d0_71 = d0 >>u d3_18
	word32 d2_75 = SEQ(SLICE(__swap(SEQ(v11_10, SLICE(d0, word16, 0))), word16, 16), 0x0000) >>u d3_18
	word16 v53_82 = SLICE(__swap(d3_18), word16, 16)
	uint16 v51_79 = (uint16) (d0_71 /u SLICE(d1_22, uint16, 0))
	word32 d1_90 = __swap(d1_22)
	word32 d3_102 = SEQ(v53_82, v51_79)
	word32 d0_108 = SEQ((uint16) (d0_71 % SLICE(d1_22, uint16, 0)), SLICE(d2_75, word16, 0)) - SEQ(SLICE(d2_75, word16, 16), v51_79) *u SLICE(d1_90, word16, 0)
	branch d0_108 >=u 0x00000000 l00002764
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000275E:
	d3_102 = SEQ(v53_82, v51_79 - 0x0001)
	d0_108 = d0_108 + d1_90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002762:
	branch d0_108 >=u 0x00000000 l00002762
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002764:
	d1Out = __swap(__rol(d0_108, __swap(d3_102)))
	return (uint32) (uint16) SLICE(d3_102, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026FA:
	word32 d0_134 = __swap(d0)
	word32 d1_135 = __swap(d1_22)
	word16 v14_137 = SLICE(d0_134, word16, 0)
	word32 d2_139 = SEQ(SLICE(__swap(d2_11), word16, 16), v14_137)
	branch v14_137 == 0x0000 l00002708
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002704:
	uint16 v17_143 = (uint16) (d2_139 /u SLICE(d1_135, uint16, 0))
	d2_139 = SEQ((uint16) (d2_139 % SLICE(d1_135, uint16, 0)), v17_143)
	d0_134 = SEQ(SLICE(d0_134, word16, 16), v17_143)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002708:
	word32 d0_150 = __swap(d0_134)
	word32 d2_154 = SEQ(SLICE(d2_139, word16, 16), SLICE(d0_150, word16, 0))
	uint16 v34_157 = (uint16) (d2_154 /u SLICE(d1_135, uint16, 0))
	d1Out = SEQ(SLICE(d1_135, word16, 16), SLICE(__swap(SEQ((uint16) (d2_154 % SLICE(d1_135, uint16, 0)), v34_157)), word16, 0))
	return SEQ(SLICE(d0_150, word16, 16), v34_157)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000026F2_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002778(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn00002778_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002778:
	word32 d1_171 = dwArg08
	word32 d3_202 = dwArg10
	branch dwArg0C != 0x00000000 l000027CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027CA:
	branch dwArg04 - dwArg0C <u 0x00000000 l00002884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027D0:
	word32 d4_32 = 24
	word32 d6_33 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000027EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027DA:
	d4_32 = 16
	d6_33 = __rol(d6_33, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000027EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027E2:
	d4_32 = 8
	d6_33 = __rol(d6_33, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000027EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027EA:
	d4_32 = 0
	d6_33 = SEQ(SLICE(d6_33, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027EE:
	word32 d4_64 = SEQ(SLICE(d4_32, word24, 8), SLICE(d4_32, byte, 0) + Mem20[0x00003EAC + (int32) ((int16) SEQ(SLICE(d6_33, word16, 16), SLICE(d6_33, word16, 0) & 0x00FF)):byte])
	word32 d5_66 = 32 - d4_64
	branch d5_66 != 0x00000000 l00002810
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002810:
	word32 d1_89
	word32 d2_90
	word32 d0_88 = fn00002534(dwArg04 >>u d4_64, dwArg04 << d5_66 | dwArg08 >>u d4_64, dwArg0C << d5_66 | dwArg10 >>u d4_64, out d1_89, out d2_90)
	word32 d3_75 = dwArg10 << d5_66
	word32 d7_104 = __swap(d0_88)
	word32 d6_106 = __swap(d3_75)
	word32 d3_105 = d3_75 *u SLICE(d7_104, word16, 0)
	word32 d2_110 = __swap(d0_88 *u SLICE(d3_75, word16, 0))
	word16 v36_111 = SLICE(d2_110 + d3_105, word16, 0)
	word16 v37_112 = SLICE(d2_110, word16, 16)
	word32 d4_107 = d0_88 *u SLICE(d6_106, word16, 0)
	word16 v40_119 = SLICE(SEQ(v37_112, v36_111) + d4_107, word16, 0)
	word32 d2_127 = __swap(SEQ(v37_112, v40_119))
	word32 d7_108 = d7_104 *u SLICE(d6_106, word16, 0)
	word32 d6_85 = dwArg08 << d5_66
	word32 d3_135 = __swap(SEQ(SLICE(d3_105, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_107, word16, 16), 0x0000)) + SEQ(SLICE(d7_108, word16, 16), (SLICE(d7_108, word16, 0) + (v36_111 <u 0x0000)) + (v40_119 <u 0x0000))
	word32 v49_137 = d1_89 - d2_127
	branch v49_137 <u 0x00000000 l0000286C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002866:
	branch v49_137 != 0x00000000 l00002870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002868:
	branch d6_85 - d3_135 >=u 0x00000000 l00002870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000286C:
	d3_135 = d3_135 - d3_75
	d2_127 = d2_127 - d2_90 - (d3_135 <u 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002870:
	word32 d6_157 = d6_85 - d3_135
	d1_171 = d1_89 - d2_127 - (d6_157 <u 0x00000000) << 32 - d5_66 | d6_157 >>u d5_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002802:
	branch dwArg0C - dwArg04 <u 0x00000000 l0000280A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002806:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000280A:
	d1_171 = dwArg08 - dwArg10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002790:
	branch dwArg04 - dwArg10 >=u 0x00000000 l000027A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027A2:
	branch dwArg10 != 0x00000000 l000027AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027A6:
	d3_202 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027AE:
	word32 d1_211
	word32 d2_212
	fn00002534(0, dwArg04, d3_202, out d1_211, out d2_212)
	word32 d2_355
	fn00002534(d1_211, dwArg08, d2_212, out d1_171, out d2_355)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002794:
	word32 d2_354
	fn00002534(dwArg04, dwArg08, dwArg10, out d1_171, out d2_354)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002884:
	return d1_171
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002778_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002B74(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002B74_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B74:
	branch dwArg04 == 0x00000000 l00002B8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B8C:
	word32 a2_10 = Mem5[0x00003FD8:word32]
	branch a2_10 == 0x00000000 l00002BB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B96:
	branch (Mem16[a2_10 + 24:word32] & 2) == 0x00000000 l00002BA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B9E:
	word32 a0_103
	word32 a1_104
	word32 a5_105
	fn00001F80(a2_10, out a0_103, out a1_104, out a5_105)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BA8:
	a2_10 = Mem41[a2_10 + 12:word32]
	branch a2_10 != 0x00000000 l00002B96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B80:
	word32 a0_50
	word32 a1_51
	word32 a5_53
	fn00001F80(dwArg04, out a0_50, out a1_51, out a5_53)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BB2:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002B74_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002BB8(word32 d0, word32 d1, word32 a1, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a5:[0..31] d0:[0..31] d1:[0..31] Stack +0004:[0..31]
// LiveOut: d0
// Trashed: CVZN a0 d0
// Preserved: a7
fn00002BB8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BB8:
	return fn00002C04(d0, d1, a1, a5, Mem10[0x00003FCC:word32], dwArg04, fp + 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002BB8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002BD4(byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0007:[0..7] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 d0
// Preserved: a2 a7
fn00002BD4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BD4:
	word32 d0_10 = dwArg08
	branch dwArg08 == 0x00000000 l00002BFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BE0:
	d0_10 = Mem5[dwArg08 + 4:word32]
	branch d0_10 - Mem5[dwArg08 + 8:word32] >=u 0x00000000 l00002BF2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BEA:
	Mem16[Mem5[dwArg08 + 4:word32]:byte] = bArg07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BF2:
	Mem22[dwArg08 + 20:word32] = Mem20[dwArg08 + 20:word32] + 0x00000001
	Mem25[dwArg08 + 4:word32] = Mem22[dwArg08 + 4:word32] - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BFE:
	return d0_10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002BD4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002C04(word32 d0, word32 d1, word32 a1, word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a5:[0..31] d0:[8..31] d1:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: d0
// Trashed: CVZN d0
// Preserved: X a0 a1 a2 a3 a4 a5 a6 a7 d1 d2 d3 d4 d5 d6 d7
fn00002C04_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C04:
	word32 a7_1332 = fp + -120
	word32 d2_1092 = dwArg0C
	word32 a4_274 = dwArg08
	word32 a2_1016 = dwArg04
	word32 d4_132 = 0
	word32 d5_1046 = 0
	branch Mem40[dwArg08:byte] == 0x00 l00003C06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C26:
	word32 d3_130
	word32 d3_1851 = 0
	branch Mem49[a4_274:byte] != 0x25 l00003B04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B04:
	word32 d0_63 = (uint32) (uint8) Mem49[0x0000288D + (SEQ(SLICE(d0, word24, 8), Mem49[a4_274:byte]) & 0x000000FF):byte]
	d0 = d0_63 & 0x00000008
	branch (d0_63 & 0x00000008) == 0x00000000 l00003B90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B90:
	word32 d0_111
	word32 a0_70 = a2_1016 + 24
	Mem72[a0_70:word32] = Mem49[a0_70:word32] | 0x00000001
	word32 a0_73 = a2_1016 + 20
	word32 v126_74 = Mem72[a0_73:word32] - 0x00000001
	Mem75[a0_73:word32] = v126_74
	branch v126_74 < 0x00000000 l00003BC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BC2:
	word32 a7_79 = a7_1332 - 4
	Mem81[a7_79:word32] = a2_1016
	d0_111 = fn00003CA8(Mem81[a7_79:word32], out d1, out a1, out a5)
	Mem94[a7_79 + 48:word32] = d0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BA2:
	a1 = a2_1016 + 4
	word32 a0_98 = Mem75[a1:word32]
	word32 a7_99 = a7_1332 - 4
	Mem101[a7_99:word32] = a2_1016
	Mem105[a1:word32] = a0_98 + 1
	byte v130_109 = Mem105[a0_98:byte]
	a2_1016 = Mem105[a7_99:word32]
	Mem115[a7_99:word32] = d1
	Mem121[a7_99 + 48:word32] = (uint32) (uint8) v130_109
	d0_111 = SEQ(SLICE(d0_63 & 0x00000008, word24, 8), v130_109)
	d1 = Mem121[a7_99:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BD0:
	d0 = (int32) (int16) (int8) SEQ(SLICE(d0_111, word24, 8), Mem127[a4_274:byte])
	d5_1046 = Mem127[a7_1332 + 44:word32]
	d3_130 = 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch d0 - Mem127[a7_1332 + 44:word32] == 0x00000000 l00003BFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BE4:
	branch d5_1046 == 0xFFFFFFFF l00003BF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BEC:
	word32 a7_148 = a7_1332 - 4
	Mem151[a7_148:word32] = a2_1016
	Mem154[a7_148 - 4:word32] = d5_1046
	d0 = fn00002BD4(Mem154[a7_148 - 1:byte], Mem154[a7_148:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BF6:
	d3_130 = 0x00000000
	d4_132 = d4_132 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B20:
	word32 d0_187
	word32 a0_170 = a2_1016 + 24
	Mem173[a0_170:word32] = Mem171[a0_170:word32] | 0x00000001
	word32 a0_174 = a2_1016 + 20
	word32 v105_175 = Mem173[a0_174:word32] - 0x00000001
	Mem176[a0_174:word32] = v105_175
	branch v105_175 < 0x00000000 l00003B4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B4A:
	word32 a7_180 = a7_1332 - 4
	Mem182[a7_180:word32] = a2_1016
	word32 d1_5411
	d0_187 = fn00003CA8(Mem182[a7_180:word32], out d1_5411, out a1, out a5)
	d1 = d0_187
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B32:
	a1 = a2_1016 + 4
	word32 a0_198 = Mem176[a1:word32]
	word32 a7_199 = a7_1332 - 4
	Mem201[a7_199:word32] = a2_1016
	Mem205[a1:word32] = a0_198 + 1
	byte v109_209 = Mem205[a0_198:byte]
	a2_1016 = Mem205[a7_199:word32]
	d0_187 = SEQ(SLICE(d0, word24, 8), v109_209)
	d1 = (uint32) (uint8) v109_209
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B56:
	word32 d0_238 = (uint32) (uint8) Mem235[0x0000288D + (SEQ(SLICE(d0_187, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1046 = d1
	d4_132 = d4_132 + 0x00000001
	d0 = d0_238 & 0x00000008
	branch (d0_238 & 0x00000008) != 0x00000000 l00003B20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B78:
	branch d1 == 0xFFFFFFFF l00003B8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B80:
	word32 a7_248 = a7_1332 - 4
	Mem251[a7_248:word32] = a2_1016
	Mem254[a7_248 - 4:word32] = d1
	d0 = fn00002BD4(Mem254[a7_248 - 1:byte], Mem254[a7_248:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B8A:
	d4_132 = d4_132 - 0x00000001
	d3_130 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BFA:
	a4_274 = a4_274 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C30:
	Mem277[a7_1332 + 72:byte] = 0x69
	Mem278[a7_1332 + 73:byte] = 0x00
	word32 a3_279 = a4_274 + 1
	word32 d0_289 = (uint32) (uint8) Mem278[0x0000288D + (uint32) ((uint8) Mem278[a3_279:byte]):byte]
	word32 d6_1135 = -1
	d0 = d0_289 & 0x00000004
	branch (d0_289 & 0x00000004) == 0x00000000 l00002CB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C58:
	word32 d0_305 = (uint32) (uint8) Mem278[0x0000288D + (uint32) ((uint8) Mem278[a3_279:byte]):byte]
	d6_1135 = 0
	d0 = d0_305 & 0x00000004
	branch (d0_305 & 0x00000004) == 0x00000000 l00002CB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C72:
	word32 a7_313 = a7_1332 - 4
	Mem316[a7_313:word32] = d2_1092
	word32 d1_322 = __swap(10) *u SLICE(d6_1135, word16, 0)
	word32 d0_331 = SLICE(d6_1135, word16, 0) *u 10 + SEQ(SLICE(__swap(SEQ(SLICE(d1_322, word16, 16), SLICE(d1_322 + __swap(d6_1135) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	a3_279 = a3_279 + 1
	word32 d1_340 = (uint32) (uint8) Mem316[a3_279:byte]
	word32 d0_354 = (uint32) (uint8) Mem316[0x0000288D + (uint32) ((uint8) Mem316[a3_279:byte]):byte]
	d2_1092 = Mem316[a7_313:word32]
	d1 = d1_340 - 0x00000030
	d6_1135 = d1_340 - 0x00000030 + d0_331
	d0 = d0_354 & 0x00000004
	branch (d0_354 & 0x00000004) != 0x00000000 l00002C72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CB4:
	branch Mem361[a3_279:byte] == 0x68 l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CBA:
	branch Mem361[a3_279:byte] == 0x6C l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CC0:
	branch Mem361[a3_279:byte] == 0x4C l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CC6:
	branch Mem361[a3_279:byte] == 0x7A l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CCC:
	branch Mem361[a3_279:byte] == 0x6A l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CD2:
	branch Mem361[a3_279:byte] == 0x74 l00002CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CD8:
	branch Mem361[a3_279:byte] != 0x2A l00002D46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CDE:
	d7 = SEQ(SLICE(d7, word24, 8), Mem361[a7_1332 + 73:byte])
	d1 = SEQ(SLICE(d1, word24, 8), Mem361[a7_1332 + 72:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CE6:
	branch Mem361[a3_279:byte] != 0x2A l00002CF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF0:
	branch SLICE(d1, byte, 0) != 0x68 l00002D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF6:
	branch Mem361[a3_279:byte] != 0x68 l00002D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D00:
	branch SLICE(d1, byte, 0) != 0x6C l00002D10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D06:
	branch Mem361[a3_279:byte] != 0x6C l00002D10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D10:
	d1 = SEQ(SLICE(d1, word24, 8), Mem361[a3_279:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D0C:
	d1 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CFC:
	d1 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CEC:
	d7 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D12:
	a3_279 = a3_279 + 1
	branch Mem361[a3_279:byte] == 0x68 l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D1A:
	branch Mem361[a3_279:byte] == 0x6C l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D20:
	branch Mem361[a3_279:byte] == 0x4C l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D26:
	branch Mem361[a3_279:byte] == 0x7A l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D2C:
	branch Mem361[a3_279:byte] == 0x6A l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D32:
	branch Mem361[a3_279:byte] == 0x74 l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D38:
	branch Mem361[a3_279:byte] == 0x2A l00002CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D3E:
	Mem463[a7_1332 + 72:byte] = SLICE(d1, byte, 0)
	Mem469[a7_1332 + 73:byte] = SLICE(d7, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D46:
	branch Mem472[a7_1332 + 72:byte] != 0x6A l00002D54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D4E:
	Mem477[a7_1332 + 72:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D54:
	branch Mem480[a7_1332 + 72:byte] != 0x74 l00002D62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D5C:
	Mem485[a7_1332 + 72:byte] = 0x69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D62:
	branch Mem488[a7_1332 + 72:byte] != 0x7A l00002D70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D6A:
	Mem493[a7_1332 + 72:byte] = 0x6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D70:
	byte v83_500 = Mem499[a3_279:byte]
	word24 v84_506 = SLICE(d7, word24, 8)
	word32 a3_1956 = a3_279 + 1
	d7 = SEQ(v84_506, v83_500)
	branch v83_500 == 0x00 l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D74:
	branch v83_500 == 0x25 l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D7A:
	branch v83_500 == 0x63 l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D80:
	branch v83_500 == 0x6E l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D86:
	branch v83_500 == 0x5B l00002DE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D8C:
	word32 d0_540
	word32 a0_523 = a2_1016 + 24
	Mem526[a0_523:word32] = Mem524[a0_523:word32] | 0x00000001
	word32 a0_527 = a2_1016 + 20
	word32 v90_528 = Mem526[a0_527:word32] - 0x00000001
	Mem529[a0_527:word32] = v90_528
	branch v90_528 < 0x00000000 l00002DB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DB6:
	word32 a7_533 = a7_1332 - 4
	Mem535[a7_533:word32] = a2_1016
	word32 d1_5410
	d0_540 = fn00003CA8(Mem535[a7_533:word32], out d1_5410, out a1, out a5)
	d1 = d0_540
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D9E:
	a1 = a2_1016 + 4
	word32 a0_551 = Mem529[a1:word32]
	word32 a7_552 = a7_1332 - 4
	Mem554[a7_552:word32] = a2_1016
	Mem558[a1:word32] = a0_551 + 1
	byte v96_562 = Mem558[a0_551:byte]
	a2_1016 = Mem558[a7_552:word32]
	d0_540 = SEQ(SLICE(d0, word24, 8), v96_562)
	d1 = (uint32) (uint8) v96_562
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DC2:
	word32 d0_591 = (uint32) (uint8) Mem588[0x0000288D + (SEQ(SLICE(d0_540, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1046 = d1
	d4_132 = d4_132 + 0x00000001
	d0 = d0_591 & 0x00000008
	branch (d0_591 & 0x00000008) != 0x00000000 l00002D8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DE4:
	d3_1851 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DE6:
	word24 v147_608 = SLICE(d1, word24, 8)
	word32 d1_612 = SEQ(v147_608, v83_500 - 0x25)
	branch v83_500 == 0x25 l00003232
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003232:
	word32 a0_628 = a2_1016 + 24
	Mem631[a0_628:word32] = Mem629[a0_628:word32] | 0x00000001
	word32 a0_632 = a2_1016 + 20
	word32 v159_633 = Mem631[a0_632:word32] - 0x00000001
	Mem634[a0_632:word32] = v159_633
	branch v159_633 < 0x00000000 l00003264
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003264:
	word32 a7_640 = a7_1332 - 4
	Mem642[a7_640:word32] = a2_1016
	d0 = fn00003CA8(Mem642[a7_640:word32], out d1, out a1, out a5)
	Mem655[a7_640 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003244:
	a1 = a2_1016 + 4
	word32 a0_659 = Mem634[a1:word32]
	word32 a7_660 = a7_1332 - 4
	Mem662[a7_660:word32] = a2_1016
	Mem666[a1:word32] = a0_659 + 1
	byte v163_670 = Mem666[a0_659:byte]
	a2_1016 = Mem666[a7_660:word32]
	Mem686[a7_660:word32] = d1_612
	Mem692[a7_660 + 48:word32] = (uint32) (uint8) v163_670
	d0 = SEQ(SLICE(d0, word24, 8), v163_670)
	d1 = Mem692[a7_660:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003272:
	d5_1046 = Mem698[a7_1332 + 44:word32]
	d3_130 = d3_1851 + 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch Mem698[a7_1332 + 44:word32] == 0x00000025 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003286:
	branch d5_1046 == 0xFFFFFFFF l00003298
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000328E:
	word32 a7_735 = a7_1332 - 4
	Mem738[a7_735:word32] = a2_1016
	Mem741[a7_735 - 4:word32] = d5_1046
	d0 = fn00002BD4(Mem741[a7_735 - 1:byte], Mem741[a7_735:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003298:
	d3_130 = d3_130 - 0x00000001
	d4_132 = d4_132 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DF0:
	branch v83_500 == 0x5B l00002F2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F2E:
	Mem761[a7_1332 + 44:byte] = 0x00
	branch Mem761[a3_1956:byte] != 0x5E l00002F40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F38:
	Mem769[a7_1332 + 44:byte] = 0x01
	a3_1956 = a3_1956 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F40:
	Mem773[a7_1332 + 52:word32] = 0x00000000
	byte v544_774 = Mem773[a7_1332 + 44:byte]
	d7 = SEQ(v84_506, v544_774)
	word32 d1_1029 = Mem773[a7_1332 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F4C:
	word32 d5_785
	branch v544_774 == 0x00 l00002F58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F58:
	d5_785 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F50:
	d5_785 = 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F5A:
	Mem798[a5 + d1_1029:byte] = SLICE(d5_785, byte, 0)
	d1_1029 = d1_1029 + 0x00000001
	branch d1_1029 <u 0x00000020 l00002F4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F6C:
	Mem822[a7_1332 + 132:word32] = d2_1092
	Mem825[a7_1332 + 44:byte] = v544_774
	byte v554_826 = Mem825[a7_1332 + 44:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F78:
	branch Mem831[a3_1956:byte] == 0x00 l00002FEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F7C:
	byte v556_836 = Mem831[a3_1956:byte]
	a3_1956 = a3_1956 + 1
	d1_1029 = SEQ(SLICE(d1_1029, word24, 8), v556_836)
	branch Mem831[a3_1956:byte] != 0x2D l00002F90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F84:
	branch v556_836 - Mem831[a3_1956 + 1:byte] >=u 0x00 l00002F90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F90:
	d7 = SEQ(SLICE(d7, word24, 8), v556_836)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F8A:
	a3_1956 = a3_1956 + 2
	d7 = SEQ(SLICE(d7, word24, 8), Mem831[a3_1956 + 1:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F92:
	word32 d5_864 = (uint32) (uint8) v556_836
	d0 = (uint32) (uint8) SLICE(d7, byte, 0)
	branch d0 - d5_864 <u 0x00000000 l00002FE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F9E:
	branch v554_826 == 0x00 l00002FC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FC2:
	word32 a0_883 = a7_1332 + 78 + (d5_864 >>u 0x00000003)
	d1_1029 = (uint32) (uint8) Mem891[a0_883:byte]
	Mem897[a0_883:byte] = SLICE(1 << (d5_864 & 7) | d1_1029, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FA2:
	word32 a0_902 = a7_1332 + 78 + (d5_864 >>u 0x00000003)
	d1_1029 = (uint32) (uint8) Mem891[a0_902:byte]
	Mem916[a0_902:byte] = SLICE(~(1 << (d5_864 & 7)) & d1_1029, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FDE:
	d5_864 = d5_864 + 0x00000001
	d0 = (uint32) (uint8) SLICE(d7, byte, 0)
	branch d0 - d5_864 >=u 0x00000000 l00002F9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FE8:
	branch Mem935[a3_1956:byte] != 0x5D l00002F78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FEE:
	word32 a6_1166
	d2_1092 = Mem948[a7_1332 + 132:word32]
	a3_1956 = a3_1956 + 1
	branch Mem948[a7_1332 + 73:byte] != 0x00 l0000300E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000300E:
	a6_1166 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FFA:
	word32 d0_959 = d2_1092 + 0x00000003 >>u 0x00000002
	d2_1092 = (d0_959 << 0x00000002) + 0x00000004
	d0 = d0_959 << 0x00000002
	a6_1166 = Mem948[d2_1092 + -4:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003010:
	word32 a0_977 = a2_1016 + 24
	Mem980[a0_977:word32] = Mem948[a0_977:word32] | 0x00000001
	word32 a0_981 = a2_1016 + 20
	word32 v581_982 = Mem980[a0_981:word32] - 0x00000001
	Mem983[a0_981:word32] = v581_982
	branch v581_982 < 0x00000000 l00003042
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003042:
	word32 a7_987 = a7_1332 - 4
	Mem989[a7_987:word32] = a2_1016
	d0 = fn00003CA8(Mem989[a7_987:word32], out d1, out a1, out a5)
	Mem1002[a7_987 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003022:
	a1 = a2_1016 + 4
	word32 a0_1006 = Mem983[a1:word32]
	word32 a7_1007 = a7_1332 - 4
	Mem1009[a7_1007:word32] = a2_1016
	Mem1013[a1:word32] = a0_1006 + 1
	byte v585_1017 = Mem1013[a0_1006:byte]
	a2_1016 = Mem1013[a7_1007:word32]
	Mem1033[a7_1007:word32] = d1_1029
	Mem1039[a7_1007 + 48:word32] = (uint32) (uint8) v585_1017
	d0 = SEQ(SLICE(d0, word24, 8), v585_1017)
	d1 = Mem1039[a7_1007:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003050:
	d5_1046 = Mem1045[a7_1332 + 44:word32]
	word32 d3_1059 = d3_1851 + 0x00000001
	word32 d4_1072 = d4_132 + 0x00000001
	branch Mem1045[a7_1332 + 44:word32] == 0xFFFFFFFF l0000311E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003064:
	word32 a7_1078 = a7_1332 - 4
	Mem1080[a7_1078:word32] = a7_1332 + 78
	Mem1084[a7_1078 - 4:word32] = a1
	Mem1086[a7_1078 - 0x00000008:word32] = 0x00000008
	Mem1089[a7_1078 - 0x0000000C:word32] = d5_1046
	d1 = (uint32) (uint8) Mem1089[Mem1089[a7_1078:word32] + fn000026C0(d2_1092, Mem1089[a7_1078 - 0x0000000C:word32], Mem1089[a7_1078 - 0x00000008:word32]):byte]
	a1 = Mem1089[a7_1078 - 0x00000004:word32]
	d0 = 1 << (d5_1046 & 7) & d1
	branch d0 == 0x00000000 l0000311E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003094:
	branch d6_1135 - d3_1059 <u 0x00000000 l0000311E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000309A:
	byte v601_1151 = Mem1089[a7_1078 + 77:byte]
	d7 = SEQ(SLICE(d7, word24, 8), v601_1151)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000309E:
	branch v601_1151 != 0x00 l000030A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030A2:
	Mem1167[a6_1166:byte] = SLICE(d5_1046, byte, 0)
	a6_1166 = a6_1166 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030A4:
	word32 a0_1172 = a2_1016 + 24
	Mem1176[a0_1172:word32] = Mem1173[a0_1172:word32] | 0x00000001
	word32 a0_1177 = a2_1016 + 20
	word32 v607_1178 = Mem1176[a0_1177:word32] - 0x00000001
	Mem1179[a0_1177:word32] = v607_1178
	branch v607_1178 < 0x00000000 l000030CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030CE:
	word32 a7_1184 = a7_1332 - 4
	Mem1186[a7_1184:word32] = a2_1016
	word32 d1_5416
	d0 = fn00003CA8(Mem1186[a7_1184:word32], out d1_5416, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030B6:
	a1 = a2_1016 + 4
	word32 a0_1202 = Mem1179[a1:word32]
	word32 a7_1203 = a7_1332 - 4
	Mem1205[a7_1203:word32] = a2_1016
	Mem1209[a1:word32] = a0_1202 + 1
	byte v611_1213 = Mem1209[a0_1202:byte]
	a2_1016 = Mem1209[a7_1203:word32]
	d0 = SEQ(SLICE(d0, word24, 8), v611_1213)
	d1 = (uint32) (uint8) v611_1213
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030DA:
	d5_1046 = d1
	d3_1059 = d3_1059 + 0x00000001
	d4_1072 = d4_1072 + 0x00000001
	branch d1 == 0xFFFFFFFF l0000311A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030E8:
	word32 a7_1239 = a7_1332 - 4
	Mem1241[a7_1239:word32] = a7_1332 + 78
	Mem1245[a7_1239 - 4:word32] = a1
	Mem1247[a7_1239 - 0x00000008:word32] = 0x00000008
	Mem1250[a7_1239 - 0x0000000C:word32] = d1
	d1 = (uint32) (uint8) Mem1250[Mem1250[a7_1239:word32] + fn000026C0(d2_1092, Mem1250[a7_1239 - 0x0000000C:word32], Mem1250[a7_1239 - 0x00000008:word32]):byte]
	a1 = Mem1250[a7_1239 - 0x00000004:word32]
	d0 = 1 << (d1 & 7) & d1
	branch d0 == 0x00000000 l0000311A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003116:
	branch d6_1135 - d3_1059 >=u 0x00000000 l0000309E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000311A:
	Mem1296[a7_1332 + 73:byte] = v601_1151
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000311E:
	branch d5_1046 == 0xFFFFFFFF l00003130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003126:
	word32 a7_1304 = a7_1332 - 4
	Mem1310[a7_1304:word32] = a2_1016
	Mem1313[a7_1304 - 4:word32] = d5_1046
	d0 = fn00002BD4(Mem1313[a7_1304 - 1:byte], Mem1313[a7_1304:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003130:
	d3_130 = d3_1059 - 0x00000001
	d4_132 = d4_1072 - 0x00000001
	branch Mem1333[a7_1332 + 73:byte] != 0x00 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000313C:
	branch d3_130 == 0x00000000 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003142:
	Mem1350[a6_1166:byte] = 0x00
	Mem1353[a7_1332 + 60:word32] = Mem1350[a7_1332 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DF8:
	word32 d1_1357 = SEQ(v147_608, v83_500 - 0x63)
	branch v83_500 == 0x63 l00002E0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E0E:
	branch d6_1135 != 0xFFFFFFFF l00002E18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E16:
	d6_1135 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E18:
	word32 a1_1371
	branch Mem629[a7_1332 + 73:byte] != 0x00 l00002E32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E32:
	a1_1371 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E1E:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1092 = d0 + 0x00000004
	a1_1371 = Mem629[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E34:
	word32 a0_1384 = a2_1016 + 24
	Mem1387[a0_1384:word32] = Mem629[a0_1384:word32] | 0x00000001
	word32 a0_1388 = a2_1016 + 20
	Mem1390[a0_1388:word32] = Mem1387[a0_1388:word32] - 0x00000001
	Mem1395[a7_1332 + 44:word32] = a1_1371
	branch Test(LT,false) l00002E6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E6C:
	word32 a1_1400 = Mem1395[a7_1332 + 44:word32]
	word32 a7_1401 = a7_1332 - 4
	Mem1403[a7_1401:word32] = a2_1016
	Mem1405[a7_1401 + 48:word32] = a1_1400
	word32 a1_5413
	d0 = fn00003CA8(Mem1405[a7_1401:word32], out d1, out a1_5413, out a5)
	Mem1418[a7_1401 + 56:word32] = d0
	Mem1421[a7_1401 + 48:word32] = Mem1418[a7_1401 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E4C:
	word32 a1_1424 = a2_1016 + 4
	word32 a0_1425 = Mem1395[a1_1424:word32]
	word32 a7_1426 = a7_1332 - 4
	Mem1428[a7_1426:word32] = a2_1016
	Mem1432[a1_1424:word32] = a0_1425 + 1
	byte v284_1436 = Mem1432[a0_1425:byte]
	a2_1016 = Mem1432[a7_1426:word32]
	Mem1445[a7_1426:word32] = d1_1357
	Mem1451[a7_1426 + 56:word32] = (uint32) (uint8) v284_1436
	d0 = SEQ(SLICE(d0, word24, 8), v284_1436)
	d1 = Mem1451[a7_1426:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E8A:
	a1 = Mem1457[a7_1332 + 44:word32]
	d5_1046 = Mem1457[a7_1332 + 52:word32]
	word32 d3_1463 = d3_1851 + 0x00000001
	word32 d4_1467 = d4_132 + 0x00000001
	branch Mem1457[a7_1332 + 52:word32] == 0xFFFFFFFF l00002F02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EA0:
	Mem1473[a7_1332 + 44:word32] = a1
	branch d6_1135 - d3_1463 <u 0x00000000 l00002F02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EA8:
	byte v302_1480 = Mem1473[a7_1332 + 73:byte]
	d7 = SEQ(v84_506, v302_1480)
	word32 a4_1487 = Mem1473[a7_1332 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EB0:
	branch v302_1480 != 0x00 l00002EB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EB4:
	Mem1496[a4_1487:byte] = SLICE(d5_1046, byte, 0)
	a4_1487 = a4_1487 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EB6:
	word32 a0_1501 = a2_1016 + 24
	Mem1505[a0_1501:word32] = Mem1502[a0_1501:word32] | 0x00000001
	word32 a0_1506 = a2_1016 + 20
	word32 v310_1507 = Mem1505[a0_1506:word32] - 0x00000001
	Mem1508[a0_1506:word32] = v310_1507
	branch v310_1507 < 0x00000000 l00002EE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE0:
	word32 a7_1513 = a7_1332 - 4
	Mem1515[a7_1513:word32] = a2_1016
	word32 d1_5414
	d0 = fn00003CA8(Mem1515[a7_1513:word32], out d1_5414, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EC8:
	a1 = a2_1016 + 4
	word32 a0_1531 = Mem1508[a1:word32]
	word32 a7_1532 = a7_1332 - 4
	Mem1534[a7_1532:word32] = a2_1016
	Mem1538[a1:word32] = a0_1531 + 1
	byte v314_1542 = Mem1538[a0_1531:byte]
	a2_1016 = Mem1538[a7_1532:word32]
	d0 = SEQ(SLICE(d0, word24, 8), v314_1542)
	d1 = (uint32) (uint8) v314_1542
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EEC:
	d5_1046 = d1
	d3_1463 = d3_1463 + 0x00000001
	d4_1467 = d4_1467 + 0x00000001
	branch d1 == 0xFFFFFFFF l00002EFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EFA:
	branch d6_1135 - d3_1463 >=u 0x00000000 l00002EB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EFE:
	Mem1578[a7_1332 + 73:byte] = v302_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F02:
	branch d5_1046 == 0xFFFFFFFF l00002F14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F0A:
	word32 a7_1586 = a7_1332 - 4
	Mem1592[a7_1586:word32] = a2_1016
	Mem1595[a7_1586 - 4:word32] = d5_1046
	d0 = fn00002BD4(Mem1595[a7_1586 - 1:byte], Mem1595[a7_1586:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F14:
	d3_130 = d3_1463 - 0x00000001
	d4_132 = d4_1467 - 0x00000001
	branch Mem1615[a7_1332 + 73:byte] != 0x00 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F20:
	branch d3_130 == 0x00000000 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F26:
	Mem1626[a7_1332 + 60:word32] = Mem1615[a7_1332 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DFC:
	d1 = SEQ(v147_608, v83_500 - 0x6E)
	branch v83_500 == 0x6E l000032A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032A0:
	branch Mem629[a7_1332 + 73:byte] != 0x00 l00003338
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032A8:
	branch Mem629[a7_1332 + 72:byte] != 0x01 l000032CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032CA:
	branch Mem629[a7_1332 + 72:byte] != 0x6C l000032E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032E8:
	branch Mem629[a7_1332 + 72:byte] != 0x68 l00003306
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003306:
	branch Mem629[a7_1332 + 72:byte] != 0x02 l00003324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003324:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1659[Mem629[d0:word32]:word32] = d4_132
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000330E:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1671[Mem629[d0:word32]:byte] = SLICE(d4_132, byte, 0)
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032F0:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1683[Mem629[d0:word32]:word16] = SLICE(d4_132, word16, 0)
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032D2:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1695[Mem629[d0:word32]:word32] = d4_132
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032B0:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 a0_1705 = Mem629[d0:word32]
	Mem1707[a0_1705 + 4:word32] = d4_132
	Mem1708[a0_1705:word32] = 0x00000000
	d2_1092 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003338:
	Mem1717[a7_1332 + 60:word32] = Mem1715[a7_1332 + 60:word32] + 0x00000001
	d3_130 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E04:
	d1 = SEQ(v147_608, v83_500 - 0x73)
	branch v83_500 == 0x73 l0000314C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000314C:
	branch Mem629[a7_1332 + 73:byte] != 0x00 l00003166
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003166:
	a5 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003152:
	d0 = d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1092 = d0 + 0x00000004
	a5 = Mem629[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003168:
	branch d5_1046 == 0xFFFFFFFF l00003204
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003172:
	word32 d0_1766 = (uint32) (uint8) Mem629[0x0000288D + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1766 & 0x00000008
	branch (d0_1766 & 0x00000008) != 0x00000000 l00003204
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000318E:
	branch d6_1135 - d3_1851 <u 0x00000000 l00003204
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003192:
	byte v190_1778 = Mem629[a7_1332 + 73:byte]
	d7 = SEQ(v84_506, v190_1778)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003196:
	branch v190_1778 != 0x00 l0000319C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000319A:
	Mem1791[a5:byte] = SLICE(d5_1046, byte, 0)
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000319C:
	word32 a0_1796 = a2_1016 + 24
	Mem1800[a0_1796:word32] = Mem1797[a0_1796:word32] | 0x00000001
	word32 a0_1801 = a2_1016 + 20
	word32 v197_1802 = Mem1800[a0_1801:word32] - 0x00000001
	Mem1803[a0_1801:word32] = v197_1802
	branch v197_1802 < 0x00000000 l000031C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031C6:
	word32 a7_1808 = a7_1332 - 4
	Mem1810[a7_1808:word32] = a2_1016
	word32 d1_5412
	d0 = fn00003CA8(Mem1810[a7_1808:word32], out d1_5412, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031AE:
	a1 = a2_1016 + 4
	word32 a0_1826 = Mem1803[a1:word32]
	word32 a7_1827 = a7_1332 - 4
	Mem1829[a7_1827:word32] = a2_1016
	Mem1833[a1:word32] = a0_1826 + 1
	byte v201_1837 = Mem1833[a0_1826:byte]
	a2_1016 = Mem1833[a7_1827:word32]
	d0 = SEQ(SLICE(d0, word24, 8), v201_1837)
	d1 = (uint32) (uint8) v201_1837
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031D2:
	d5_1046 = d1
	d3_1851 = d3_1851 + 0x00000001
	d4_132 = d4_132 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031E0:
	word32 d0_1872 = (uint32) (uint8) Mem1869[0x0000288D + (SEQ(SLICE(d0, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1872 & 0x00000008
	branch (d0_1872 & 0x00000008) != 0x00000000 l00003200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031FC:
	branch d6_1135 - d3_1851 >=u 0x00000000 l00003196
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003200:
	Mem1890[a7_1332 + 73:byte] = v190_1778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003204:
	branch d5_1046 == 0xFFFFFFFF l00003216
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000320C:
	word32 a7_1898 = a7_1332 - 4
	Mem1904[a7_1898:word32] = a2_1016
	Mem1907[a7_1898 - 4:word32] = d5_1046
	d0 = fn00002BD4(Mem1907[a7_1898 - 1:byte], Mem1907[a7_1898:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003216:
	d3_130 = d3_1851 - 0x00000001
	d4_132 = d4_132 - 0x00000001
	branch Mem1928[a7_1332 + 73:byte] != 0x00 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003222:
	branch d3_130 == 0x00000000 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003228:
	Mem1944[a5:byte] = 0x00
	Mem1947[a7_1332 + 60:word32] = Mem1944[a7_1332 + 60:word32] + 0x00000001
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E0A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003342:
	Mem1949[a7_1332 + 48:word32] = 0x00000000
	Mem1950[a7_1332 + 44:word32] = 0x00000000
	Mem1951[a7_1332 + 110:word32] = 0x00000000
	branch v83_500 != 0x00 l00003354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003352:
	a3_1956 = a3_1956 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003354:
	branch v83_500 != 0x70 l00003362
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000335A:
	Mem1963[a7_1332 + 72:byte] = 0x6C
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003362:
	branch d5_1046 != 0x0000002D l00003370
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000336A:
	branch SLICE(d7, byte, 0) != 0x75 l00003378
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003370:
	branch d5_1046 != 0x0000002B l000033C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003378:
	branch d6_1135 - d3_1851 <u 0x00000000 l000033C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000337C:
	Mem1995[a7_1332 + 110:word32] = d5_1046
	word32 a0_2000 = a2_1016 + 24
	Mem2002[a0_2000:word32] = Mem1995[a0_2000:word32] | 0x00000001
	word32 a0_2003 = a2_1016 + 20
	word32 v227_2004 = Mem2002[a0_2003:word32] - 0x00000001
	Mem2005[a0_2003:word32] = v227_2004
	branch v227_2004 < 0x00000000 l000033B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033B2:
	word32 a7_2008 = a7_1332 - 4
	Mem2010[a7_2008:word32] = a2_1016
	d0 = fn00003CA8(Mem2010[a7_2008:word32], out d1, out a1, out a5)
	Mem2023[a7_2008 + 56:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003392:
	a1 = a2_1016 + 4
	word32 a0_2027 = Mem2005[a1:word32]
	word32 a7_2028 = a7_1332 - 4
	Mem2030[a7_2028:word32] = a2_1016
	Mem2034[a1:word32] = a0_2027 + 1
	byte v231_2038 = Mem2034[a0_2027:byte]
	a2_1016 = Mem2034[a7_2028:word32]
	Mem2051[a7_2028:word32] = d1
	Mem2057[a7_2028 + 56:word32] = (uint32) (uint8) v231_2038
	d0 = SEQ(SLICE(d0, word24, 8), v231_2038)
	d1 = Mem2057[a7_2028:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033C0:
	d5_1046 = Mem2063[a7_1332 + 52:word32]
	d3_1851 = d3_1851 + 0x00000001
	d4_132 = d4_132 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033C8:
	branch SLICE(d7, byte, 0) != 0x69 l0000353A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033D0:
	branch d5_1046 != 0x00000030 l000034FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033DA:
	branch d6_1135 - d3_1851 <u 0x00000000 l000034FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034FC:
	word32 d0_2110 = (uint32) (uint8) Mem2103[0x0000288D + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2110 & 0x00000004
	branch (d0_2110 & 0x00000004) != 0x00000000 l0000353A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003518:
	word32 d0_2125 = (uint32) (uint8) Mem2103[0x0000288D + (SEQ(SLICE(d0_2110 & 0x00000004, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2125 & 0x00000044
	branch (d0_2125 & 0x00000044) == 0x00000000 l0000353A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003534:
	branch d6_1135 - d3_1851 <u 0x00000000 l0000353A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003538:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033E0:
	word32 d0_2156
	word32 a0_2140 = a2_1016 + 24
	Mem2142[a0_2140:word32] = Mem2103[a0_2140:word32] | 0x00000001
	word32 a0_2143 = a2_1016 + 20
	word32 v245_2144 = Mem2142[a0_2143:word32] - 0x00000001
	Mem2145[a0_2143:word32] = v245_2144
	branch v245_2144 < 0x00000000 l00003412
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003412:
	word32 a7_2149 = a7_1332 - 4
	Mem2151[a7_2149:word32] = a2_1016
	d0_2156 = fn00003CA8(Mem2151[a7_2149:word32], out d1, out a1, out a5)
	Mem2164[a7_2149 + 56:word32] = d0_2156
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033F2:
	a1 = a2_1016 + 4
	word32 a0_2168 = Mem2145[a1:word32]
	word32 a7_2169 = a7_1332 - 4
	Mem2171[a7_2169:word32] = a2_1016
	Mem2175[a1:word32] = a0_2168 + 1
	byte v249_2179 = Mem2175[a0_2168:byte]
	a2_1016 = Mem2175[a7_2169:word32]
	Mem2186[a7_2169:word32] = d1
	Mem2192[a7_2169 + 56:word32] = (uint32) (uint8) v249_2179
	d0_2156 = SEQ(SLICE(d0, word24, 8), v249_2179)
	d1 = Mem2192[a7_2169:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003420:
	Mem2200[a7_1332 + 64:word32] = Mem2198[a7_1332 + 52:word32]
	word32 d0_2210 = SEQ(SLICE(d0_2156, word24, 8), Mem2200[a7_1332 + 55:byte])
	word32 d3_2202 = d3_1851 + 0x00000001
	d0 = d0_2210 & 0x000000FF
	branch __btst(Mem2200[0x0000288D + (int32) ((int16) (d0_2210 & 0x000000FF)):byte], 0x0000) l00003446
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003442:
	d0 = SEQ(SLICE(d0_2210 & 0x000000FF, word24, 8), SLICE(d0_2210 & 0x000000FF, byte, 0) | 0x20)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003446:
	branch d0 != 0x00000078 l000034DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003450:
	branch d6_1135 - d3_2202 <u 0x00000000 l000034DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034DE:
	d7 = 111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003456:
	word32 d0_2254
	word32 a0_2237 = a2_1016 + 24
	Mem2240[a0_2237:word32] = Mem2200[a0_2237:word32] | 0x00000001
	word32 a0_2241 = a2_1016 + 20
	word32 v267_2242 = Mem2240[a0_2241:word32] - 0x00000001
	Mem2243[a0_2241:word32] = v267_2242
	branch v267_2242 < 0x00000000 l00003488
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003488:
	word32 a7_2247 = a7_1332 - 4
	Mem2249[a7_2247:word32] = a2_1016
	d0_2254 = fn00003CA8(Mem2249[a7_2247:word32], out d1, out a1, out a5)
	Mem2262[a7_2247 + 56:word32] = d0_2254
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003468:
	a1 = a2_1016 + 4
	word32 a0_2266 = Mem2243[a1:word32]
	word32 a7_2267 = a7_1332 - 4
	Mem2269[a7_2267:word32] = a2_1016
	Mem2273[a1:word32] = a0_2266 + 1
	byte v271_2277 = Mem2273[a0_2266:byte]
	a2_1016 = Mem2273[a7_2267:word32]
	Mem2284[a7_2267:word32] = d1
	Mem2290[a7_2267 + 56:word32] = (uint32) (uint8) v271_2277
	d0_2254 = SEQ(SLICE(d0, word24, 8), v271_2277)
	d1 = Mem2290[a7_2267:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003496:
	Mem2298[a7_1332 + 74:word32] = Mem2296[a7_1332 + 52:word32]
	word32 d0_2318 = (uint32) (uint8) Mem2298[0x0000288D + (SEQ(SLICE(d0_2254, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	d0 = d0_2318 & 0x00000044
	branch (d0_2318 & 0x00000044) == 0x00000000 l000034C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034BC:
	branch d6_1135 - (d3_2202 + 0x00000001) <u 0x00000000 l000034C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034C0:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034C2:
	branch Mem2298[a7_1332 + 74:word32] == 0xFFFFFFFF l000034D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034CC:
	word32 a7_2335 = a7_1332 - 4
	Mem2339[a7_2335:word32] = a2_1016
	Mem2343[a7_2335 - 4:word32] = Mem2339[a7_2335 + 78:word32]
	d0 = fn00002BD4(Mem2343[a7_2335 - 1:byte], Mem2343[a7_2335:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034E0:
	branch Mem2363[a7_1332 + 64:word32] == 0xFFFFFFFF l000034F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034EA:
	word32 a7_2369 = a7_1332 - 4
	Mem2374[a7_2369:word32] = a2_1016
	Mem2378[a7_2369 - 4:word32] = Mem2374[a7_2369 + 68:word32]
	d0 = fn00002BD4(Mem2378[a7_2369 - 1:byte], Mem2378[a7_2369:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034F6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000353A:
	word32 d4_2511 = d4_132
	word32 d3_2424 = d3_1851
	branch SLICE(d7, byte, 0) != 0x78 l0000366E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003542:
	branch d5_1046 != 0x00000030 l0000366E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000354C:
	branch d6_1135 - d3_1851 <u 0x00000000 l0000366E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003552:
	word32 d0_2451
	word32 a0_2431 = a2_1016 + 24
	Mem2435[a0_2431:word32] = Mem2432[a0_2431:word32] | 0x00000001
	word32 a0_2436 = a2_1016 + 20
	word32 v347_2437 = Mem2435[a0_2436:word32] - 0x00000001
	Mem2438[a0_2436:word32] = v347_2437
	branch v347_2437 < 0x00000000 l00003584
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003584:
	word32 a7_2444 = a7_1332 - 4
	Mem2446[a7_2444:word32] = a2_1016
	d0_2451 = fn00003CA8(Mem2446[a7_2444:word32], out d1, out a1, out a5)
	Mem2459[a7_2444 + 56:word32] = d0_2451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003564:
	a1 = a2_1016 + 4
	word32 a0_2463 = Mem2438[a1:word32]
	word32 a7_2464 = a7_1332 - 4
	Mem2466[a7_2464:word32] = a2_1016
	Mem2470[a1:word32] = a0_2463 + 1
	byte v351_2474 = Mem2470[a0_2463:byte]
	a2_1016 = Mem2470[a7_2464:word32]
	Mem2493[a7_2464:word32] = d1
	Mem2499[a7_2464 + 56:word32] = (uint32) (uint8) v351_2474
	d0_2451 = SEQ(SLICE(d0, word24, 8), v351_2474)
	d1 = Mem2499[a7_2464:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003592:
	Mem2507[a7_1332 + 64:word32] = Mem2505[a7_1332 + 52:word32]
	word32 d0_2518 = SEQ(SLICE(d0_2451, word24, 8), Mem2507[a7_1332 + 55:byte])
	word32 d3_2509 = d3_1851 + 0x00000001
	word32 d4_2513 = d4_132 + 0x00000001
	d0 = d0_2518 & 0x000000FF
	branch __btst(Mem2507[0x0000288D + (int32) ((int16) (d0_2518 & 0x000000FF)):byte], 0x0000) l000035B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035B4:
	d0 = SEQ(SLICE(d0_2518 & 0x000000FF, word24, 8), SLICE(d0_2518 & 0x000000FF, byte, 0) | 0x20)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035B8:
	branch d0 != 0x00000078 l00003654
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035C2:
	branch d6_1135 - d3_2509 <u 0x00000000 l00003654
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035C8:
	word32 d0_2560
	word32 a0_2543 = a2_1016 + 24
	Mem2546[a0_2543:word32] = Mem2507[a0_2543:word32] | 0x00000001
	word32 a0_2547 = a2_1016 + 20
	word32 v368_2548 = Mem2546[a0_2547:word32] - 0x00000001
	Mem2549[a0_2547:word32] = v368_2548
	branch v368_2548 < 0x00000000 l000035FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035FA:
	word32 a7_2553 = a7_1332 - 4
	Mem2555[a7_2553:word32] = a2_1016
	d0_2560 = fn00003CA8(Mem2555[a7_2553:word32], out d1, out a1, out a5)
	Mem2568[a7_2553 + 56:word32] = d0_2560
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035DA:
	a1 = a2_1016 + 4
	word32 a0_2572 = Mem2549[a1:word32]
	word32 a7_2573 = a7_1332 - 4
	Mem2575[a7_2573:word32] = a2_1016
	Mem2579[a1:word32] = a0_2572 + 1
	byte v372_2583 = Mem2579[a0_2572:byte]
	a2_1016 = Mem2579[a7_2573:word32]
	Mem2590[a7_2573:word32] = d1
	Mem2596[a7_2573 + 56:word32] = (uint32) (uint8) v372_2583
	d0_2560 = SEQ(SLICE(d0, word24, 8), v372_2583)
	d1 = Mem2596[a7_2573:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003608:
	Mem2604[a7_1332 + 74:word32] = Mem2602[a7_1332 + 52:word32]
	word32 d0_2621 = (uint32) (uint8) Mem2604[0x0000288D + (SEQ(SLICE(d0_2560, word24, 8), Mem2604[a7_1332 + 55:byte]) & 0x000000FF):byte]
	d3_2424 = d3_2509 + 0x00000001
	d4_2511 = d4_2513 + 0x00000001
	d0 = d0_2621 & 0x00000044
	branch (d0_2621 & 0x00000044) == 0x00000000 l0000363A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003630:
	branch d6_1135 - (d3_2509 + 0x00000001) <u 0x00000000 l0000363A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000363A:
	branch Mem2604[a7_1332 + 74:word32] == 0xFFFFFFFF l00003650
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003644:
	word32 a7_2636 = a7_1332 - 4
	Mem2640[a7_2636:word32] = a2_1016
	Mem2644[a7_2636 - 4:word32] = Mem2640[a7_2636 + 78:word32]
	d0 = fn00002BD4(Mem2644[a7_2636 - 1:byte], Mem2644[a7_2636:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003650:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003654:
	branch Mem2663[a7_1332 + 64:word32] == 0xFFFFFFFF l0000366A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000365E:
	word32 a7_2668 = a7_1332 - 4
	Mem2672[a7_2668:word32] = a2_1016
	Mem2676[a7_2668 - 4:word32] = Mem2672[a7_2668 + 68:word32]
	d0 = fn00002BD4(Mem2676[a7_2668 - 1:byte], Mem2676[a7_2668:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000366A:
	d3_2424 = d3_2509 - 0x00000001
	d4_2511 = d4_2513 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003634:
	d5_1046 = Mem2604[a7_1332 + 74:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000366E:
	branch SLICE(d7, byte, 0) == 0x78 l0000367A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003674:
	branch SLICE(d7, byte, 0) != 0x58 l00003684
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003684:
	branch SLICE(d7, byte, 0) != 0x6F l00003694
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003694:
	Mem2715[a7_1332 + 52:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000368A:
	Mem2718[a7_1332 + 52:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000369C:
	Mem2723[a7_1332 + 64:word32] = Mem2721[a7_1332 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000367A:
	Mem2727[a7_1332 + 64:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036A2:
	Mem2732[a7_1332 + 114:word32] = Mem2730[a7_1332 + 64:word32]
	word32 d0_2761 = (uint32) (uint8) Mem2732[0x0000288D + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	Mem2791[a7_1332 + 132:word32] = d2_1092
	Mem2797[a7_1332 + 52:word32] = d4_2511
	Mem2802[a7_1332 + 74:byte] = SLICE(d7, byte, 0)
	d0 = d0_2761 & 0x00000044
	branch (d0_2761 & 0x00000044) == 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036D4:
	branch Mem2802[a7_1332 + 114:word32] != 0x0000000A l0000370A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036DE:
	word32 d0_2819 = (uint32) (uint8) Mem2802[0x0000288D + (SEQ(SLICE(d0_2761 & 0x00000044, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte]
	Mem2822[a7_1332 + 132:word32] = d2_1092
	Mem2824[a7_1332 + 52:word32] = d4_2511
	Mem2826[a7_1332 + 74:byte] = SLICE(d7, byte, 0)
	d0 = d0_2819 & 0x00000004
	branch (d0_2819 & 0x00000004) == 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000370A:
	branch Mem2832[a7_1332 + 114:word32] != 0x00000008 l0000372A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003714:
	Mem2838[a7_1332 + 132:word32] = d2_1092
	Mem2841[a7_1332 + 52:word32] = d4_2511
	Mem2844[a7_1332 + 74:byte] = SLICE(d7, byte, 0)
	branch d5_1046 > 0x00000037 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000372A:
	Mem2852[a7_1332 + 132:word32] = d2_1092
	Mem2855[a7_1332 + 52:word32] = d4_2511
	Mem2867[a7_1332 + 64:word32] = d6_1135
	Mem2870[a7_1332 + 74:byte] = SLICE(d7, byte, 0)
	branch d6_1135 - d3_2424 <u 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003740:
	d7 = Mem2870[a7_1332 + 114:word32]
	word32 a4_2882 = Mem2870[a7_1332 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003748:
	word32 a7_2887 = a7_1332 - 4
	Mem2890[a7_2887:word32] = d2_1092
	word32 v419_2894 = Mem2890[a7_2887:word32]
	Mem2899[a7_2887:word32] = d7 >> 31
	Mem2902[a7_2887 - 4:word32] = d7
	Mem2906[a7_2887 - 8:word32] = a1
	Mem2910[a7_2887 - 12:word32] = Mem2906[a7_2887 + 52:word32]
	Mem2914[a7_2887 - 16:word32] = Mem2910[a7_2887 + 48:word32]
	Mem2917[a7_2887 - 20:word32] = d7
	Mem2919[a7_2887 - 24:word32] = d7 >> 31
	word32 d1_2922
	Mem2933[a7_2887 + 68:word32] = fn00003C28(d4_2511, Mem2919[a7_2887 - 24:word32], Mem2919[a7_2887 - 20:word32], Mem2919[a7_2887 - 16:word32], Mem2919[a7_2887 - 12:word32], out d1_2922)
	Mem2935[a7_2887 + 72:word32] = d1_2922
	branch ((uint32) (uint8) Mem2935[0x0000288D + (SEQ(Mem2935[a7_2887 + 0x00000001:word24], SLICE(d5_1046, byte, 0)) & 0x000000FF):byte] & 0x00000004) == 0x00000000 l000037A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037A8:
	d4_2511 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000379E:
	d4_2511 = d5_1046 - 0x00000030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037AA:
	word32 d6_3016
	Mem2968[a7_1332 - 4:word32] = v419_2894
	Mem2976[a7_1332 - 4:word32] = Mem2968[a7_1332 - 4:word32]
	word32 d2_2978 = d4_2511 + Mem2976[a7_1332 + 68:word32]
	Mem2981[a7_1332 + 48:word32] = d2_2978
	Mem2987[a7_1332 - 8:word32] = d3_2424
	word32 d0_2970 = d4_2511 >> 31
	Mem2993[a7_1332 + 44:word32] = Mem2987[a7_1332 + 64:word32] + d0_2970 + (d2_2978 <u 0x00000000)
	word32 v441_2994 = Mem2993[a7_1332 - 8:word32]
	word32 v442_2997 = Mem2993[a7_1332 - 4:word32]
	branch ((uint32) (uint8) Mem2993[0x0000288D + (SEQ(SLICE(d0_2970, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte] & 0x00000001) == 0x00000000 l000037FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037FA:
	d6_3016 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037F0:
	d6_3016 = d5_1046 - 0x00000037
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037FC:
	word32 d2_3075
	Mem3028[a7_1332 - 4:word32] = v442_2997
	Mem3036[a7_1332 - 4:word32] = Mem3028[a7_1332 - 4:word32]
	word32 d2_3038 = d6_3016 + Mem3036[a7_1332 + 48:word32]
	Mem3041[a7_1332 + 68:word32] = d2_3038
	Mem3046[a7_1332 - 8:word32] = v441_2994
	word32 d0_3030 = d6_3016 >> 31
	Mem3052[a7_1332 + 64:word32] = Mem3046[a7_1332 + 44:word32] + d0_3030 + (d2_3038 <u 0x00000000)
	word32 v453_3053 = Mem3052[a7_1332 - 8:word32]
	branch ((uint32) (uint8) Mem3052[0x0000288D + (SEQ(SLICE(d0_3030, word24, 8), SLICE(d5_1046, byte, 0)) & 0x000000FF):byte] & 0x00000002) == 0x00000000 l0000384C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000384C:
	d2_3075 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003842:
	d2_3075 = d5_1046 - 0x00000057
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000384E:
	word32 d0_3136
	Mem3086[a7_1332 - 4:word32] = d2_3075
	Mem3094[a7_1332 - 4:word32] = Mem3086[a7_1332 - 4:word32]
	word32 d2_3096 = d2_3075 + Mem3094[a7_1332 + 68:word32]
	Mem3099[a7_1332 + 48:word32] = d2_3096
	Mem3104[a7_1332 - 8:word32] = v453_3053
	Mem3109[a7_1332 + 44:word32] = Mem3104[a7_1332 + 64:word32] + (d2_3075 >> 31) + (d2_3096 <u 0x00000000)
	word32 a0_3120 = a2_1016 + 24
	word32 v465_3110 = Mem3109[a7_1332 - 8:word32]
	d2_1092 = Mem3109[a7_1332 - 4:word32]
	Mem3123[a0_3120:word32] = Mem3109[a0_3120:word32] | 1
	word32 a0_3124 = a2_1016 + 20
	word32 v468_3125 = Mem3123[a0_3124:word32] - 0x00000001
	Mem3126[a0_3124:word32] = v468_3125
	branch v468_3125 < 0x00000000 l000038A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038A0:
	Mem3131[a7_1332 - 4:word32] = a2_1016
	word32 d1_5415
	d0_3136 = fn00003CA8(Mem3131[a7_1332 - 4:word32], out d1_5415, out a1, out a5)
	d1 = d0_3136
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003888:
	a1 = a2_1016 + 4
	word32 a0_3147 = Mem3126[a1:word32]
	Mem3150[a7_1332 - 4:word32] = a2_1016
	Mem3154[a1:word32] = a0_3147 + 1
	d0_3136 = (uint32) (uint8) Mem3154[a0_3147:byte]
	a2_1016 = Mem3154[a7_1332 - 4:word32]
	d1 = (uint32) (uint8) SLICE(d0_3136, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038AC:
	Mem3173[a7_1332 + 52:word32] = Mem3171[a7_1332 + 52:word32] + 0x00000001
	word32 d0_3185 = (uint32) (uint8) Mem3173[0x0000288D + (SEQ(SLICE(d0_3136, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1046 = d1
	d3_2424 = v465_3110 + 0x00000001
	d0 = d0_3185 & 0x00000044
	branch (d0_3185 & 0x00000044) == 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038D0:
	branch d7 != 0x0000000A l000038F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038D8:
	word32 d0_3207 = (uint32) (uint8) Mem3173[0x0000288D + (SEQ(SLICE(d0_3185 & 0x00000044, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d0 = d0_3207 & 0x00000004
	branch (d0_3207 & 0x00000004) == 0x00000000 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038F4:
	branch d7 != 0x00000008 l00003904
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038FC:
	branch d1 > 0x00000037 l0000390A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003904:
	branch a4_2882 - (v465_3110 + 0x00000001) >=u 0x00000000 l00003748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000390A:
	byte v476_3239 = Mem3236[a7_1332 + 74:byte]
	d7 = SEQ(SLICE(d7, word24, 8), v476_3239)
	word32 d4_3244 = Mem3236[a7_1332 + 52:word32]
	d2_1092 = Mem3236[a7_1332 + 132:word32]
	branch Mem3236[a7_1332 + 110:word32] == 0x00000000 l0000393E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000391C:
	branch d3_2424 != 0x00000002 l0000393E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003924:
	branch d5_1046 == 0xFFFFFFFF l00003936
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000392C:
	word32 a7_3260 = a7_1332 - 4
	Mem3273[a7_3260:word32] = a2_1016
	Mem3276[a7_3260 - 4:word32] = d5_1046
	d0 = fn00002BD4(Mem3276[a7_3260 - 1:byte], Mem3276[a7_3260:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003936:
	d3_2424 = d3_2424 - 0x00000001
	d4_3244 = d4_3244 - 0x00000001
	d5_1046 = Mem3292[a7_1332 + 110:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000393E:
	branch d5_1046 == 0xFFFFFFFF l00003950
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003946:
	word32 a7_3300 = a7_1332 - 4
	Mem3304[a7_3300:word32] = a2_1016
	Mem3307[a7_3300 - 4:word32] = d5_1046
	d0 = fn00002BD4(Mem3307[a7_3300 - 1:byte], Mem3307[a7_3300:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003950:
	d3_130 = d3_2424 - 0x00000001
	d4_132 = d4_3244 - 0x00000001
	branch Mem3325[a7_1332 + 73:byte] != 0x00 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000395C:
	branch d3_130 == 0x00000000 l00003AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003962:
	branch v476_3239 != 0x75 l00003A24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A24:
	branch Mem3325[a7_1332 + 110:word32] != 0x0000002D l00003A40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A40:
	Mem3345[a7_1332 + 56:word32] = Mem3325[a7_1332 + 48:word32]
	Mem3347[a7_1332 + 52:word32] = Mem3345[a7_1332 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A2E:
	word32 v528_3349 = a7_1332 + 44
	d1 = -Mem3325[v528_3349 + 4:word32]
	d0 = -Mem3325[v528_3349:word32] - (d1 <u 0x00000000)
	a7_1332 = Mem3325[a7_1332 + 0x00000038:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A4C:
	word32 a7_3365 = a7_1332 - 4
	Mem3376[a7_3365:word32] = d0
	Mem3385[a7_3365 + 48:byte] = Mem3376[a7_3365 + 76:byte] - 0x01
	a7_1332 = a7_3365 + 4
	branch Mem3385[a7_3365 + 48:byte] == 0x00 l00003A76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A76:
	word32 d0_3399 = d2_1092 + 0x00000003 >>u 0x00000002
	d2_1092 = (d0_3399 << 0x00000002) + 0x00000004
	word32 a0_3405 = Mem3385[d2_1092 + -4:word32]
	Mem3407[a0_3405 + 4:word32] = Mem3385[a7_3365 + 60:word32]
	Mem3409[a0_3405:word32] = Mem3407[a7_3365 + 56:word32]
	d0 = d0_3399 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A60:
	byte v540_3411 = Mem3385[a7_3365 + 48:byte] - 0x01
	Mem3412[a7_3365 + 48:byte] = v540_3411
	branch v540_3411 == 0x00 l00003AC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AC8:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3412[a7_3365 + 60:word32]
	Mem3426[Mem3412[d2_1092 + -4:word32]:byte] = SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A66:
	byte v541_3428 = Mem3412[a7_3365 + 48:byte] - 0x66
	Mem3429[a7_3365 + 48:byte] = v541_3428
	branch v541_3428 == 0x00 l00003AAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AAE:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3429[a7_3365 + 60:word32]
	Mem3443[Mem3429[d2_1092 + -4:word32]:word16] = SLICE(d0, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A6E:
	byte v542_3445 = Mem3429[a7_3365 + 48:byte] - 0x04
	Mem3446[a7_3365 + 48:byte] = v542_3445
	branch v542_3445 == 0x00 l00003A94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A94:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3446[a7_3365 + 60:word32]
	Mem3460[Mem3446[d2_1092 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A74:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AE2:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3446[a7_3365 + 60:word32]
	Mem3473[Mem3446[d2_1092 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000396A:
	word32 a7_3475 = a7_1332 - 4
	Mem3477[a7_3475:word32] = d0
	Mem3486[a7_3475 + 56:byte] = Mem3477[a7_3475 + 76:byte] - 0x01
	a7_1332 = a7_3475 + 4
	branch Mem3486[a7_3475 + 56:byte] == 0x00 l00003994
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003994:
	word32 d0_3496 = d2_1092 + 0x00000003 >>u 0x00000002
	d2_1092 = (d0_3496 << 0x00000002) + 0x00000004
	word32 a0_3502 = Mem3486[d2_1092 + -4:word32]
	Mem3504[a0_3502 + 4:word32] = Mem3486[a7_3475 + 52:word32]
	Mem3506[a0_3502:word32] = Mem3504[a7_3475 + 48:word32]
	d0 = d0_3496 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000397E:
	byte v517_3508 = Mem3486[a7_3475 + 56:byte] - 0x01
	Mem3509[a7_3475 + 56:byte] = v517_3508
	branch v517_3508 == 0x00 l000039EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039EC:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3509[a7_3475 + 52:word32]
	Mem3523[Mem3509[d2_1092 + -4:word32]:byte] = SLICE(d0, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003984:
	byte v518_3525 = Mem3509[a7_3475 + 56:byte] - 0x66
	Mem3526[a7_3475 + 56:byte] = v518_3525
	branch v518_3525 == 0x00 l000039D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039D0:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3526[a7_3475 + 52:word32]
	Mem3540[Mem3526[d2_1092 + -4:word32]:word16] = SLICE(d0, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000398C:
	byte v519_3542 = Mem3526[a7_3475 + 56:byte] - 0x04
	Mem3543[a7_3475 + 56:byte] = v519_3542
	branch v519_3542 == 0x00 l000039B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039B4:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3543[a7_3475 + 52:word32]
	Mem3557[Mem3543[d2_1092 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003992:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A08:
	d2_1092 = (d2_1092 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3543[a7_3475 + 52:word32]
	Mem3570[Mem3543[d2_1092 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AFA:
	Mem3575[a7_1332 + 60:word32] = Mem3573[a7_1332 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AFE:
	a4_274 = a3_1956
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BFC:
	branch d3_130 == 0x00000000 l00003C06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C00:
	branch Mem3658[a4_274:byte] != 0x00 l00002C26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C06:
	word32 d0_3699
	branch d5_1046 != 0xFFFFFFFF l00003C18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C0E:
	branch false l00003C18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C18:
	d0_3699 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C14:
	d0_3699 = d5_1046
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C1C:
	return d0_3699
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002C04_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003C28(word32 d4, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d4:[16..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00003C28_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C28:
	word32 d0_23 = __swap(dwArg08)
	word32 d1_25 = __swap(dwArg10)
	word32 d4_29 = SEQ(SLICE(d4, word16, 16), SLICE(dwArg08, word16, 0)) *u SLICE(dwArg10, word16, 0)
	word32 d1_32 = d1_25 *u SLICE(d0_23, word16, 0)
	word32 d2_39 = dwArg08 *u SLICE(d1_25, word16, 0) + __swap(SEQ(SLICE(d4_29, word16, 16), SLICE(d4_29, word16, 0) ^ SLICE(d4_29, word16, 0))) + dwArg10 *u SLICE(d0_23, word16, 0)
	branch d2_39 >=u 0x00000000 l00003C5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C56:
	d1_32 = d1_32 + 0x00010000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C5C:
	word32 d2_45 = __swap(d2_39)
	word32 d3_65 = __swap(dwArg0C) *u SLICE(dwArg08, word16, 0)
	word32 d3_71 = __swap(SEQ(SLICE(d3_65, word16, 16), SLICE(d3_65 + __swap(dwArg08) *u SLICE(dwArg0C, word16, 0), word16, 0)))
	word32 d3_83 = __swap(dwArg04) *u SLICE(dwArg10, word16, 0)
	word32 d3_89 = __swap(SEQ(SLICE(d3_83, word16, 16), SLICE(d3_83 + __swap(dwArg10) *u SLICE(dwArg04, word16, 0), word16, 0)))
	d1Out = SEQ(SLICE(d2_45, word16, 16), SLICE(d4_29, word16, 0))
	return (uint32) (uint16) SLICE(d2_45, word16, 0) + d1_32 + (dwArg0C *u SLICE(dwArg08, word16, 0) + SEQ(SLICE(d3_71, word16, 16), SLICE(d3_71, word16, 0) ^ SLICE(d3_71, word16, 0))) + (dwArg04 *u SLICE(dwArg10, word16, 0) + SEQ(SLICE(d3_89, word16, 16), SLICE(d3_89, word16, 0) ^ SLICE(d3_89, word16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003C28_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003CA8(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5
fn00003CA8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CA8:
	word32 d0_161
	word32 a5_279
	word32 a1_116
	word32 d1_118 = fn00002400(out a1_116, out a5_279)
	branch dwArg04 != 0x00000000 l00003CC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CC0:
	branch (Mem26[dwArg04 + 24:word32] & 42) == 32 l00003CD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CD2:
	Mem49[dwArg04 + 24:word32] = Mem26[dwArg04 + 24:word32] | 1
	word32 d0_125 = Mem49[dwArg04 + 24:word32] & 0x00000200
	branch d0_125 == 0x00000000 l00003CEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CE4:
	d0_125 = fn00003DA4(out a1_116, out a5_279)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CEA:
	branch Mem49[dwArg04 + 28:word32] != 0x00000000 l00003D08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF0:
	d0_125 = Mem49[dwArg04 + 24:word32] & 4
	branch d0_125 == 0x00000000 l00003D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D00:
	Mem79[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF8:
	Mem83[dwArg04 + 28:word32] = 1
	d0_125 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D08:
	branch Mem86[dwArg04 + 8:word32] != 0x00000000 l00003D44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D0E:
	word32 d4_100
	branch (Mem86[dwArg04 + 24:word32] & 0x00000080) == 0x00000000 l00003D22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D22:
	d4_100 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D1E:
	d4_100 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D24:
	word32 a0_318
	word32 d0_117 = fn0000202C(d4_100 + Mem86[dwArg04 + 28:word32], out d1_118, out a0_318, out a1_116)
	d0_125 = d0_117
	branch d0_117 != 0x00000000 l00003D3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D3C:
	Mem131[dwArg04 + 8:word32] = d0_117 + 1
	a1_116 = d0_117 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D44:
	Mem137[dwArg04 + 4:word32] = Mem135[dwArg04 + 8:word32]
	d1_118 = Mem137[dwArg04:word32]
	execPrivate2()
	Mem147[dwArg04 + 20:word32] = d0_125
	word32 v26_148 = Mem147[dwArg04 + 20:word32] - 0x00000001
	Mem149[dwArg04 + 20:word32] = v26_148
	branch v26_148 >= 0x00000000 l00003D8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D8A:
	word32 a0_153 = Mem149[dwArg04 + 4:word32]
	Mem157[dwArg04 + 4:word32] = a0_153 + 1
	a1_116 = dwArg04 + 4
	d0_161 = SEQ(SLICE(d0_125, word24, 8), Mem157[a0_153:byte]) & 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D68:
	branch Mem149[dwArg04 + 20:word32] != -1 l00003D7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D7A:
	Mem172[dwArg04 + 24:word32] = Mem149[dwArg04 + 24:word32] | 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D70:
	Mem179[dwArg04 + 24:word32] = Mem149[dwArg04 + 24:word32] | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D82:
	Mem184[dwArg04 + 20:word32] = 0x00000000
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D38:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CCC:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CBA:
	d0_161 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D9E:
	d1Out = d1_118
	a1Out = a1_116
	a5Out = a5_279
	return d0_161
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003CA8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003DA4(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00003DA4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DA4:
	word32 a2_11 = Mem5[0x00003FD8:word32]
	word32 d0_42 = a2_11
	branch a2_11 == 0x00000000 l00003DDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DB2:
	branch (Mem12[a2_11 + 24:word32] & 0x00000202) != 0x00000202 l00003DD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DC4:
	branch Mem12[a2_11:word32] == 0x00000000 l00003DD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DC8:
	word32 a0_91
	fn00001F80(a2_11, out a0_91, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DD2:
	a2_11 = Mem40[a2_11 + 12:word32]
	d0_42 = a2_11
	branch a2_11 != 0x00000000 l00003DB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DDC:
	a1Out = a1
	a5Out = a5
	return d0_42
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003DA4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003DE0(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00003DE0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DE0:
	word32 d0_110
	word32 a2_12 = dwArg04
	word32 d2_100 = 0
	branch Mem11[dwArg04:byte] == 0x00 l00003E60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DEE:
	word32 a0_19 = Mem18[0x00003FD0:word32]
	Mem23[a0_19 + 24:word32] = Mem18[a0_19 + 24:word32] | 2
	word32 v15_25 = Mem23[a0_19 + 20:word32] - 0x00000001
	Mem26[a0_19 + 20:word32] = v15_25
	word32 d0_21 = 2
	branch v15_25 < 0x00000000 l00003E36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E04:
	branch Mem26[a2_12:byte] != 0x0A l00003E1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E0A:
	d0_21 = Mem26[Mem26[0x00003FD0:word32] + 24:word32] & 0x00000080
	branch d0_21 != 0x00000000 l00003E36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E36:
	word32 a0_62
	d1 = fn00001E6C((int32) (int16) (int8) SEQ(SLICE(d0_21, word24, 8), Mem46[a2_12:byte]), Mem26[0x00003FD0:word32], out a0_62, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E1C:
	word32 a1_72 = Mem26[0x00003FD0:word32]
	word32 a0_74 = Mem26[a1_72 + 4:word32]
	Mem78[a1_72 + 4:word32] = a0_74 + 1
	Mem81[a0_74:byte] = Mem78[a2_12:byte]
	a1 = a1_72 + 4
	d1 = (uint32) (uint8) Mem81[a0_74:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E4E:
	branch d1 != -1 l00003E58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E58:
	a2_12 = a2_12 + 1
	d2_100 = d2_100 + 0x00000001
	branch Mem104[a2_12:byte] != 0x00 l00003DEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E60:
	d0_110 = d2_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E54:
	d0_110 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E62:
	d1Out = d1
	a1Out = a1
	a5Out = a5
	return d0_110
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003DE0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



