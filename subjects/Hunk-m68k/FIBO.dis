void fn00001000(word32 d0, word32 d7, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 d0 d7
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5
// Preserved: a5 a7 d7
fn00001000_entry:
// DataOut: a0 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0010(32)

l00001000:
// DataOut: a0 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0010(32)

l0000100A:
	word32 a6_8 = Mem0[0x00000004:word32]
	word32 d2_193 = d0
	word32 a2_205 = a0
	branch Mem0[a6_8 + 20:word16] >=u 0x0024 l00001036
// DataOut: a2 a4 a6 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0010(32)

l00001020:
	word32 a0_475 = 0x00003E94
	word32 d0_478 = 0x0000000C
// DataOut: a0 a2 a4 a6 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001030:
	Mem482[a0_475:word32] = 0x00000000
	a0_475 = a0_475 + 4
	d0_478 = d0_478 - 0x00000001
	branch d0_478 != 0x00000000 l00001030
// DataOut: a0 a2 a4 a6 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a0:<invalid> d0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001036:
	Mem16[0x00003E94:word32] = fp
	Mem18[0x00003E98:word32] = a6_8
	word32 d0_20 = FindTask(0x00000000)
	word32 d0_24 = OpenLibrary(0x000012BC, 0)
	branch d0_24 == 0x00000000 l00001226
// DataOut: a2 a3 a4 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a0:<invalid> d0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001226:
	Alert(0x00038007)
// DataOut: a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid>

l00001056:
	word32 d4_429
	Mem83[0x00003E9C:word32] = d0_24
	branch Mem83[d0_20 + 172:word32] != 0x00000000 l00001066
// DataOut: a2 a3 a4 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001066:
	word32 a0_432 = a0
	d4_429 = 3
// DataOut: a0 a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l0000106A:
	branch Mem83[a0_487:byte] != 0x20 l00001072
// DataOut: a0 a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid> d4:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001070:
	d4_429 = SEQ(SLICE(d4_429, word16, 16), (word16) d4_429 + 0x0001)
// DataOut: a0 a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid> d4:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001072:
	a0_432 = a0_487 + 1
	word32 a0_487 = a0_432
	branch Mem83[a0_487:byte] != 0x00 l0000106A
// DataOut: a0 a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid> d4:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001060:
	d4_429 = 2
	d2_193 = 8
// DataOut: a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001076:
	word32 d0_92 = d4_429 << 0x00000002
	word32 d0_94 = d0_92 + d2_193
	word32 d1_209 = 0x00010001
	d0_24 = AllocMem(d0_94 + 0x00000011, 0x00010001)
	branch d0_24 == 0x00000000 l0000123E
// DataOut: a2 a3 a4 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l0000123E:
	CloseLibrary(Mem83[0x00003E9C:word32])
	Alert(0x00010000)
// DataOut: a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a0:<invalid>

l0000125C:
	branch Mem18[d0_20 + 172:word32] != 0x00000000 l00001268
// DataOut: a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d7:d7 a5:a5 a0:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 -12(fp):d7 -8(fp):a5 -4(fp):<invalid>

l00001262:
	fn00001214(d0_20)
	fn0000126C(d0_24)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d7:d7 a5:a5 a0:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 -12(fp):d7 -8(fp):a5 -4(fp):<invalid>

l00001268:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d7:d7 a5:a5 a0:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 -12(fp):d7 -8(fp):a5 -4(fp):<invalid>

l00001096:
	word32 dwLoc0C_127
	word32 a0_132
	Mem109[d0_24:word32] = d0_94 + 0x00000011
	Mem113[d0_24 + 12:word32] = d4_429 - 0x00000001
	Mem117[d0_24 + 8:word32] = d0_24 + 16 + d0_92
	Mem119[0x00000000:word32] = 0x00000000
	word32 d0_120 = Mem119[d0_20 + 172:word32]
	branch d0_120 == 0x00000000 l00001190
// DataOut: a2 a3 a4 a5 d0 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001190:
	fn00001214(d0_20)
	Mem362[0x00003EA0:word32] = d0_120
	Mem364[0x00003EA4:word32] = d0_120
	Mem369[0x00000000:word32] = 0x00000000
	dwLoc0C_127 = d0_120
	word32 d0_372 = Mem369[d0_120 + 36:word32]
	branch d0_372 == 0x00000000 l000011B6
// DataOut: a3 a4 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011AE:
	Enable()
// DataOut: a3 a4 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a5:<invalid> a0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011B6:
	Supervisor(d0_24)
	Mem379[d0_24 + 4:word32] = d0_372
	branch d0_372 != 0x00000000 l000011D2
// DataOut: a3 a4 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011D2:
	Mem389[0x00003EA8:word32] = d0_372
	Mem391[0x00003EAC:word32] = d0_372
	Mem393[0x00003EB0:word32] = d0_372
	Mem395[d0_20 + 156:word32] = d0_372
	Mem397[d0_20 + 160:word32] = d0_372
	word32 d0_401 = Mem397[(d0_372 << 0x00000002) + 8:word32]
	branch d0_401 == 0x00000000 l000011F4
// DataOut: a3 a4 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0x000003ED a2:<invalid> a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:000012C8 -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011F0:
	Mem407[d0_20 + 164:word32] = d0_401
// DataOut: a3 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0x000003ED a2:<invalid> a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011F4:
// DataOut: a3 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0x000003ED a2:<invalid> a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011CC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0x000003ED a2:<invalid> a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:000012C8 -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

l000011CE_thunk_fn0000127C:
	word32 d1_384
	word32 a1_385
	word32 a5_386
	fn0000127C(out d1_384, out a1_385, out a5_386)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:20 a2:<invalid> a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:000012C8 -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

l000010B6:
	word32 d0_174 = Mem119[(d0_120 << 0x00000002) + 16:word32]
	word32 a1_177 = Mem119[d0_24 + 8:word32]
	word32 a0_182 = (d0_174 << 0x00000002) + 1
	word32 d0_184 = (uint32) (uint8) Mem119[d0_174 << 0x00000002:byte]
	Mem185[a0_182 + d0_184:byte] = 0x00
	Mem187[d0_24 + 16:word32] = a0_182
	word32 a6_188 = d0_24 + 20
	word32 d3_189 = 1
	word32 a0_191 = a0 + d2_193
// DataOut: a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010DA:
	a0_191 = a0_191 - 1
	branch Mem187[a0_191:byte] >u 0x20 l000010E2
// DataOut: a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:1 d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010DE_1:
	word16 v37_356 = SLICE(d2_193, word16, 0)
	d2_193 = DPB(d2_193, v37_356 - 1, 0)
	branch v37_356 != 0x0000 l000010DA
// DataOut: a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:1 d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010E2:
	Mem199[a0_191 + 1:byte] = 0x00
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:1 d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010E6:
	byte v39_214 = Mem199[a2_205:byte]
	a2_205 = a2_205 + 1
	d1_209 = SEQ(SLICE(d1_209, word24, 8), v39_214)
	branch v39_214 == 0x00 l00001148
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010EA:
	branch (byte) d1_209 == 0x20 l000010E6
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010F0:
	branch (byte) d1_209 == 0x09 l000010E6
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010F6:
	branch d3_189 - Mem199[d0_24 + 12:word32] == 0x00000000 l00001148
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010FC:
	Mem272[a6_188:word32] = a1_177
	a6_188 = a6_188 + 4
	d3_189 = SEQ(SLICE(d3_189, word16, 16), (word16) d3_189 + 0x0001)
	branch (byte) d1_209 == 0x22 l0000111A
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l0000111A:
	byte v70_316 = Mem272[a2_205:byte]
	a2_205 = a2_205 + 1
	d1_209 = SEQ(SLICE(d1_209, word24, 8), v70_316)
	branch v70_316 == 0x00 l00001148
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l0000111E:
	branch (byte) d1_209 == 0x22 l00001116
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001124:
	branch (byte) d1_209 != 0x2A l00001144
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l0000112A:
	d1_209 = SEQ(SLICE(d1_209, word24, 8), Mem272[a2_205:byte])
	word32 d2_342 = SEQ(SLICE(d2_193, word24, 8), (byte) d1_209)
	d2_193 = SEQ(SLICE(d2_342, word24, 8), (byte) d2_342 & 0xDF)
	a2_205 = a2_205 + 1
	branch (byte) d2_193 != 0x4E l0000113C
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l0000113C:
	branch (byte) d2_193 != 0x45 l00001144
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001142:
	d1_209 = 27
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001138:
	d1_209 = 10
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001144:
	Mem333[a1_177:byte] = (byte) d1_209
	a1_177 = a1_177 + 1
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001106:
	Mem293[a1_177:byte] = (byte) d1_209
	a1_177 = a1_177 + 1
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001108:
	byte v49_299 = Mem293[a2_205:byte]
	a2_205 = a2_205 + 1
	d1_209 = SEQ(SLICE(d1_209, word24, 8), v49_299)
	branch v49_299 == 0x00 l00001148
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001148:
	Mem228[a1_177:byte] = 0x00
	Mem229[a6_188:word32] = 0x00000000
	execPrivate4()
	Mem237[0x00003EA8:word32] = d0_184
	execPrivate5()
	Mem239[0x00003EAC:word32] = d0_184
	dwLoc0C_127 = d0_24 + 16
	dwLoc10 = d3_189
	branch Mem239[Mem239[0x00003E98:word32] + 20:word16] <u 0x0024 l0000117A
// DataOut: a3 a4 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l00001172:
	word32 v91_258 = Mem239[d0_20 + 224:word32]
	Mem259[0x00003EB0:word32] = v91_258
	branch v91_258 != 0x00000000 l0000117E
// DataOut: a3 a4 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l0000117A:
	Mem256[0x00003EB0:word32] = d0_184
// DataOut: a3 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l0000117E:
	branch Mem239[d0_20 + 8:byte] != 0x0D l000011F8
// DataOut: a3 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011F8:
	a0_132 = Mem119[d0_20 + 58:word32]
// DataOut: a0 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l00001186:
	word32 a0_248 = Mem239[d0_20 + 176:word32]
	a0_132 = a0_248 + 4 - Mem239[a0_248:word32]
// DataOut: a0 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l00001202:
	Mem141[0x00003EBC:word32] = a0_132
	Mem143[0x00003EC0:word32] = fp - 16
	fn00001354(d7, dwLoc10, dwLoc0C_127)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

l00001212_thunk_fn0000127C:
	word32 d1_148
	word32 a1_149
	word32 a5_150
	fn0000127C(out d1_148, out a1_149, out a5_150)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0 a2:<invalid> a4:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

fn00001000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a2:<invalid> a4:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d7:d7 a5:<invalid> a0:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

l0000110C:
	branch (byte) d1_209 == 0x20 l00001116
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001116:
	Mem286[a1_177:byte] = 0x00
	a1_177 = a1_177 + 1
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001112:
	Mem309[a1_177:byte] = (byte) d1_209
	a1_177 = a1_177 + 1
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000BE8A a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut: a3 a4 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut: a3 a4 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00001214_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a0:a3 + 92



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut: a0 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut: a0 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn0000126C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a1:a2



word32 fn00001278(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0 d1
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1 d2
// Preserved: a7
fn00001278_entry:
// DataOut: a0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001278:
// DataOut: a0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001278_thunk_fn0000127C:
	word32 d1_5
	word32 a1_6
	word32 a5_7
	return fn0000127C(out d1_5, out a1_6, out a5_7)
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid>

fn00001278_exit:
// DataOut: a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a4:<invalid> a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> d0:<invalid>



word32 fn0000127C(ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0 d1
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1
// Preserved: a7
fn0000127C_entry:
// DataOut: a0 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l0000127C:
	word32 a7_5 = Mem0[0x00003E94:word32]
	word32 v7_10 = Mem0[a7_5 - 4:word32]
	word32 v5_7 = Mem0[a7_5 - 8:word32]
	word32 a5_12
	*a5Out = v7_10
	word32 d1_13 = Mem0[v7_10 + 4:word32]
	*d1Out = d1_13
	branch d1_13 == 0x00000000 l0000129E
// DataOut: a0 a2 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001296:
	execPrivate1()
// DataOut: a0 a2 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a4:0000BE8A a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid>

l0000129E:
	CloseLibrary(Mem0[0x00003E9C:word32])
	branch v5_7 == 0x00000000 l000012B0
// DataOut: a0 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a4:0000BE8A a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid>

l000012AE:
	fn0000126C(v5_7)
// DataOut: a0 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a4:0000BE8A a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> d0:<invalid>

l000012B0:
	FreeMem(v7_10, Mem0[v7_10:word32])
	word32 a1_21
	*a1Out = v7_10
	return d2
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a4:0000BE8A a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> d0:<invalid>

fn0000127C_exit:
// DataOut: a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a4:0000BE8A a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> d0:d2



word32 fn000012D0(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
// Stack args: Stack +0004(32)
fn000012D0_entry:
// DataOut: a0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000012D0:
	word32 a3_11 = 0x00003FDC
	branch 0x00003FDC == 0x00000000 l00001308
// DataOut: a0 a3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000012E2:
	word32 d2_44 = 1
	branch Mem0[0x00003FE0:word32] == 0x00000000 l000012F6
// DataOut: a0 a3 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00003FDC d0:0x00003FDC -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l000012EA:
	d2_44 = d2_44 + 0x00000001
	branch Mem0[0x00003FDC + (d2_44 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut: a0 a3 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00003FDC d0:<invalid> d2:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l000012F6:
	word32 d2_55 = d2_44 - 0x00000001
	branch d2_55 == 0x00000000 l00001308
// DataOut: a0 a3 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00003FDC d0:<invalid> d2:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l000012FA:
	word32 d0_61 = d2_55 << 0x00000002
	word32 a2_63 = Mem0[a3_11 + d0_61:word32]
	word32 a7_68
	word32 a2_70
	word32 d2_71
	word32 d0_72
	byte CVZN_73
	bool Z_74
	byte ZN_75
	bool C_76
	bool V_77
	byte CVZNX_78
	word32 d1_79
	word32 a1_80
	word32 a5_81
	call a2_63 (retsize: 4; depth: 16)
		uses: a1,a2_63,a3_59,a5,a7_8,C_51,CVZN_13,CVZNX_62,d0_61,d1,d2_58,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10,V_50,Z_57,ZN_52
		defs: a1_80,a2_70,a3_69,a5_81,a7_68,C_76,CVZN_73,CVZNX_78,d0_72,d1_79,d2_71,V_77,Z_74,ZN_75
	d2_55 = d2_71 - 0x00000001
	branch d2_71 != 0x00000001 l000012FA
// DataOut: a0 a3 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00003FDC d0:<invalid> d2:<invalid> a2:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l00001308:
	word32 d1_30
	word32 a1_31
	word32 a5_32
	return fn00001278(dwArg04, out d1_30, out a1_31, out a5_32)
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00003FDC d0:<invalid> d2:<invalid> a2:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3

fn000012D0_exit:
// DataOut: a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a3:a3 d0:<invalid> d2:d2 a2:a2 a4:<invalid> a6:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3



word32 fn0000131C(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
// Stack args: Stack +0004(32)
fn0000131C_entry:
	*d1Out = d1
	*a1Out = a1
	*a5Out = a5
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l0000131C:
	branch Mem0[0x00003EC4:word32] != 0x00000000 l0000134E
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001328:
	word32 a3_36 = Mem0[0x00003FEC:word32]
	Mem39[0x00003EC4:word32] = 1
	branch a3_36 == 0x00000000 l00001346
// DataOut: a0 a3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l0000133A:
	word32 a2_61 = Mem39[a3_36 + 4:word32]
	word32 a7_62
	word32 a3_63
	word32 a2_64
	byte ZN_65
	bool C_66
	bool V_67
	bool Z_68
	word32 d0_69
	byte CVZN_70
	word32 d1_71
	word32 a1_72
	word32 a5_73
	call a2_61 (retsize: 4; depth: 12)
		uses: a1,a2_61,a3_60,a5,a7_5,C_11,CVZN_41,d0_40,d1,dwLoc04_4,dwLoc08_7,dwLoc0C,V_12,Z_42,ZN_9
		defs: a1_72,a2_64,a3_63,a5_73,a7_62,C_66,CVZN_70,d0_69,d1_71,V_67,Z_68,ZN_65
	a3_36 = Mem39[a3_63:word32]
	branch a3_36 != 0x00000000 l0000133A
// DataOut: a0 a3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l00001346:
	word32 d1_55
	word32 a1_56
	word32 a5_57
	d0 = fn000012D0(dwArg04, out d1_55, out a1_56, out a5_57)
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000134E:
	return d0
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> a4:<invalid> a6:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a3

fn0000131C_exit:
// DataOut: a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 a3:a3 d0:<invalid> a4:<invalid> a6:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a3



void fn00001354(word32 d7, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d7
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut: d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001354:
	word32 a3_51 = 0x00003FD4
	branch 0x00003FD0 == 0x00000000 l00001372
// DataOut: a3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001366:
	branch Mem0[0x00003FD4:word32] == 0x00000000 l00001372
// DataOut: a3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:00003FD4 d0:0x00003FD0 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000136A:
	word32 a7_61
	word32 a2_63
	word32 d0_64
	byte CVZN_65
	bool Z_66
	byte ZN_67
	bool C_68
	bool V_69
	word32 d1_71
	word32 a1_72
	word32 a5_73
	call Mem0[a3_51:word32] (retsize: 4; depth: 12)
		uses: a1,a2_54,a3_53,a5,a7_5,C_49,CVZN_10,d0_9,d1,d7,dwLoc04_4,dwLoc08_7,dwLoc0C,dwLoc10,dwLoc14,V_50,Z_48,ZN_47
		defs: a1_72,a2_63,a3_62,a5_73,a7_61,C_68,CVZN_65,d0_64,d1_71,d7_70,V_69,Z_66,ZN_67
	branch Mem0[a3_51:word32] != 0x00000000 l0000136A
// DataOut: a3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001372:
	word32 d1_37
	word32 a1_38
	word32 a5_39
	fn0000131C(fn00001390(d7), out d1_37, out a1_38, out a5_39)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a3

fn00001354_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a3:a3 d0:<invalid> a2:a2 a0:<invalid> d1:<invalid> a1:<invalid> a4:<invalid> a6:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a3



word32 fn00001390(word32 d7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d7
// LiveOut: d0
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1
// Preserved: a7 d2 d3
fn00001390_entry:
// DataOut: d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0008(32) Local -000C(32) Local -0020(32) Local -0028(32) Local -002C(32)

l00001390:
	word32 d1_11
	word32 a1_12
	word32 a5_13
	word32 d0_14 = fn00003E04(0x00001438, out d1_11, out a1_12, out a5_13)
	fn00002BDC(d0_14, d1_11, d7, a1_12, a5_13, 0x00001458)
	word32 dwLoc1C_10 = 0x00001438
	word32 d2_23 = 1
// DataOut: d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0008(32) Local -000C(32) Local -001C(32) Local -0020(32) Local -0028(32) Local -002C(32)

l000013F4:
	branch d2_23 - dwLoc0C <= 0x00000000 l000013BA
// DataOut: d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFE8 a0:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> -52(fp):00001424 -48(fp):<invalid> -44(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):d2 -20(fp):d3
// LocalsOut: fp(32) Local -0008(32) Local -000C(32) Local -001C(32) Local -0020(32) Local -0028(32) Local -002C(32)

l000013BA:
	word32 d1_69
	word32 a1_70
	word32 a5_71
	word32 d0_72 = fn00003E04(0x00001410, out d1_69, out a1_70, out a5_71)
	fn00002BDC(d0_72, d1_69, d7, a1_70, a5_71, 0x00001420)
	fn00001498(fn0000145C(dwLoc08), 0x00001424)
	dwLoc1C_10 = 0x00001410
	d2_23 = d2_23 + 0x00000001
// DataOut: d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFE8 a0:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> -52(fp):00001424 -48(fp):<invalid> -44(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):d2 -20(fp):d3
// LocalsOut: fp(32) Local -0008(32) Local -000C(32) Local -001C(32) Local -0020(32) Local -0028(32) Local -002C(32)

l000013FA:
	Mem52[0x00000000:word32] = 0x00000000
	word32 d1_57
	word32 a1_58
	word32 a5_59
	return fn0000131C(dwLoc1C_10, out d1_57, out a1_58, out a5_59)
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFE8 a0:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> -52(fp):00001424 -48(fp):<invalid> -44(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):d2 -20(fp):d3

fn00001390_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a0:<invalid> d2:d2 d3:d3 d0:<invalid> d1:<invalid> a1:<invalid> a4:<invalid> a6:<invalid> a5:<invalid> -52(fp):00001424 -48(fp):<invalid> -44(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):d2 -20(fp):d3



word32 fn0000145C(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7 d2
// Stack args: Stack +0004(32)
fn0000145C_entry:
// DataOut: d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0010(32) Stack +0004(32)

l0000145C:
	word32 d0_17
	branch dwArg04 <= 2 l0000148C
// DataOut: d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0010(32)

l0000148C:
	d0_17 = 1
// DataOut: d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> d0:2 -8(fp):d2
// LocalsOut: fp(32)

l0000146C:
	d0_17 = fn0000145C(dwArg04 - 0x00000001) + fn0000145C(dwArg04 - 0x00000002)
// DataOut: d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> d0:2 -8(fp):d2
// LocalsOut: fp(32)

l0000148E:
	return d0_17
// DataOut: d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> d0:<invalid> d1:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):d2 -4(fp):<invalid>

fn0000145C_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 d0:<invalid> d1:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):d2 -4(fp):<invalid>



void fn00001498(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
// Stack args: Stack +0004(32)
fn00001498_entry:
// DataOut: d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001498:
	fn000014B4(d0, Mem0[0x00003FF4:word32], dwArg04, fp + 8)
	return
// DataOut: d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00001498_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):fp + 8



void fn000014B4(word32 d0, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4 d5 d6 d7
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32)
fn000014B4_entry:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l000014B4:
	word32 a7_152 = fp + -112
	word32 d3_1400 = dwArg0C
	word32 a5_150 = dwArg04
	word32 a4_149 = dwArg08
	word32 d6_145 = 0
	branch Mem0[dwArg08:byte] == 0x00 l00001DFA
// DataOut: a4 a5 a7 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:fp

l000014D0:
	branch Mem0[a4_149:byte] != 0x25 l00001DD4
// DataOut: a4 a5 a7 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DD4:
	word32 a7_1827 = a7_152 - 4
	Mem1829[a7_1827:word32] = a5_150
	Mem1838[a7_1827 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0, word24, 8), Mem1829[a4_149:byte])
	a4_149 = a4_149 + 1
	word32 a0_1840
	d0 = fn00001E34(dwArg00, dwArg04, out a0_1840, out a5_150)
	a7_152 = a7_1827 + 4
	branch d0 != 0xFFFFFFFF l00001DF2
// DataOut: a4 a5 a7 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DF2:
	d6_145 = d6_145 + 0x00000001
// DataOut: a4 a5 a7 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DEE:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000014D8:
	Mem184[a7_152 + 64:word32] = 0x00000000
	Mem186[a7_152 + 72:word32] = 0x00000000
	Mem190[a7_152 + 102:word32] = 0x00000000
	word32 d5_1644 = -1
	word32 d4_1334 = 105
	word32 a3_1382 = a7_152 + 76
	word32 d7_1163 = 0
	word32 a2_1596 = a4_149 + 1
	word32 d2_1162 = Mem190[a7_152 + 72:word32]
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000014F6:
	word32 d1_1693 = 0
// DataOut: a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000014F8:
	word32 a7_212 = a7_152 - 4
	Mem214[a7_212:word32] = d0
	d0 = Mem214[a7_212:word32]
	branch (byte) SEQ(SLICE(d0, word24, 8), Mem214[0x00001E0C + d1_1693:byte]) - Mem214[a2_1596:byte] != 0x00 l0000151C
// DataOut: a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000151C:
	d1_1693 = d1_1693 + 0x00000001
	branch d1_1693 <u 0x00000005 l000014F8
// DataOut: a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00001E0C d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000150A:
	Mem1809[a7_212:word32] = d1_1693
	word32 d1_1811 = 1 << d1_1693
	d0 = d1_1811
	d1_1693 = Mem1809[a7_212:word32]
	d2_1162 = d2_1162 | d1_1811
	a2_1596 = a2_1596 + 1
// DataOut: a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00001E0C d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001526:
	branch d1_1693 <u 0x00000005 l000014F6
// DataOut: a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00001E0C d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000152E:
	word32 a0_1402
	word32 d0_1635
	Mem235[a7_152 + 72:word32] = d2_1162
	branch Mem235[a2_1596:byte] != 0x2A l0000156C
// DataOut: a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00001E0C d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000156C:
	a0_1402 = 0x000028B1 + (SEQ(SLICE(d0, word24, 8), Mem235[a2_1596:byte]) & 0x000000FF)
	word32 d0_1745 = (uint32) (uint8) Mem235[a0_1402:byte]
	d0_1635 = d0_1745 & 0x00000004
	branch (d0_1745 & 0x00000004) == 0x00000000 l000015D8
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00001E0C d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001588:
	d2_1162 = Mem235[a7_152 + 64:word32]
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000158C:
	Mem1760[a7_152 - 4:word32] = d3_1400
	word32 d1_1765 = __swap(10) *u (word16) d2_1162
	word32 d1_1773 = SEQ(SLICE(__swap(SEQ(SLICE(d1_1765, word16, 16), (word16) (d1_1765 + __swap(d2_1162) *u 0x000A))), word16, 16), 0x0000)
	word32 d0_1774 = (word16) d2_1162 *u 10 + d1_1773
	a2_1596 = a2_1596 + 1
	a0_1402 = 0x000028B1 + (SEQ(SLICE(d0_1774, word24, 8), Mem1760[a2_1596:byte]) & 0x000000FF)
	word32 d1_1783 = (int32) (int16) (int8) SEQ(SLICE(d1_1773, word24, 8), Mem1760[a2_1596:byte])
	word32 d0_1797 = (uint32) (uint8) Mem1760[a0_1402:byte]
	d3_1400 = Mem1760[a7_152 - 4:word32]
	d1_1693 = d1_1783 - 0x00000030
	d2_1162 = d1_1783 - 0x00000030 + d0_1774
	d0_1635 = d0_1797 & 0x00000004
	branch (d0_1797 & 0x00000004) != 0x00000000 l0000158C
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000015D4:
	Mem1804[a7_152 + 64:word32] = d2_1162
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001538:
	d0_1635 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v37_1721 = Mem235[d0_1635:word32]
	Mem1722[a7_152 + 44:word32] = v37_1721
	a2_1596 = a2_1596 + 1
	d3_1400 = d0_1635 + 0x00000004
	a0_1402 = d0_1635 + 0x00000004
	branch v37_1721 >= 0x00000000 l00001564
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00001E0C d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001564:
	Mem1734[a7_152 + 64:word32] = Mem1722[a7_152 + 44:word32]
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001550:
	Mem1726[a7_152 + 72:word32] = Mem1722[a7_152 + 72:word32] | 0x00000004
	d0_1635 = -Mem1726[a7_152 + 44:word32]
	Mem1731[a7_152 + 64:word32] = d0_1635
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000015D8:
	branch Mem235[a2_1596:byte] != 0x2E l0000166C
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000015E0:
	a2_1596 = a2_1596 + 1
	branch Mem235[a2_1596:byte] != 0x2A l00001606
// DataOut: a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001606:
	a0_1402 = 0x000028B1 + (SEQ(SLICE(d0_1635, word24, 8), Mem235[a2_1596:byte]) & 0x000000FF)
	word32 d0_1656 = (uint32) (uint8) Mem235[a0_1402:byte]
	d5_1644 = 0
	d0_1635 = d0_1656 & 0x00000004
	branch (d0_1656 & 0x00000004) == 0x00000000 l0000166C
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001624:
	word32 a7_1667 = a7_152 - 4
	Mem1669[a7_1667:word32] = d2_1162
	word32 d1_1674 = __swap(10) *u (word16) d5_1644
	word32 d1_1682 = SEQ(SLICE(__swap(SEQ(SLICE(d1_1674, word16, 16), (word16) (d1_1674 + __swap(d5_1644) *u 0x000A))), word16, 16), 0x0000)
	word32 d0_1683 = (word16) d5_1644 *u 10 + d1_1682
	a2_1596 = a2_1596 + 1
	a0_1402 = 0x000028B1 + (SEQ(SLICE(d0_1683, word24, 8), Mem1669[a2_1596:byte]) & 0x000000FF)
	word32 d1_1692 = (int32) (int16) (int8) SEQ(SLICE(d1_1682, word24, 8), Mem1669[a2_1596:byte])
	word32 d0_1706 = (uint32) (uint8) Mem1669[a0_1402:byte]
	d2_1162 = Mem1669[a7_1667:word32]
	d1_1693 = d1_1692 - 0x00000030
	d5_1644 = d1_1692 - 0x00000030 + d0_1683
	d0_1635 = d0_1706 & 0x00000004
	branch (d0_1706 & 0x00000004) != 0x00000000 l00001624
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000015E8:
	d0_1635 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v45_1640 = Mem235[d0_1635:word32]
	Mem1641[a7_152 + 44:word32] = v45_1640
	a2_1596 = a2_1596 + 1
	d3_1400 = d0_1635 + 0x00000004
	a0_1402 = d0_1635 + 0x00000004
	branch v45_1640 < 0x00000000 l0000166C
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001600:
	d5_1644 = Mem1641[a7_152 + 44:word32]
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000166C:
	word32 a7_266 = a7_152
	branch Mem235[a2_1596:byte] == 0x68 l00001690
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001672:
	branch Mem235[a2_1596:byte] == 0x6C l00001690
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001678:
	branch Mem235[a2_1596:byte] == 0x4C l00001690
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000167E:
	branch Mem235[a2_1596:byte] == 0x6A l00001690
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001684:
	branch Mem235[a2_1596:byte] == 0x7A l00001690
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000168A:
	branch Mem235[a2_1596:byte] != 0x74 l00001696
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001690:
	a2_1596 = a2_1596 + 1
	d4_1334 = (int32) (int16) (int8) (uint32) (uint8) Mem235[a2_1596:byte]
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001696:
	branch d4_1334 != 0x00000068 l000016A8
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000169E:
	branch Mem235[a2_1596:byte] != 0x68 l000016A8
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016A4:
	d4_1334 = 2
	a2_1596 = a2_1596 + 1
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016A8:
	branch d4_1334 != 0x0000006C l000016BA
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016B0:
	branch Mem235[a2_1596:byte] != 0x6C l000016BA
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016B6:
	d4_1334 = 1
	a2_1596 = a2_1596 + 1
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016BA:
	branch d4_1334 != 0x0000006A l000016C4
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016C2:
	d4_1334 = 1
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016C4:
	branch d4_1334 != 0x0000007A l000016CE
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016CC:
	d4_1334 = 108
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016CE:
	branch d4_1334 != 0x00000074 l000016D8
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016D6:
	d4_1334 = 105
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016D8:
	word32 d5_1388
	word32 d1_1030 = SEQ(SLICE(d1_1693, word24, 8), Mem235[a2_1596:byte])
	word32 a2_1381 = a2_1596 + 1
	word32 d0_1384 = SEQ(SLICE(d0_1635, word24, 8), (byte) d1_1030)
	branch (byte) d1_1030 == 0x25 l00001B60
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B60:
	Mem1582[a7_152 + 102:word32] = 0x00000001
	a3_1382 = 0x00001E08
	d5_1388 = 0
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016E4:
	branch (byte) d0_1384 == 0x58 l00001732
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016EA:
	branch (byte) d0_1384 == 0x63 l00001AE0
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001AE0:
	branch d4_1334 != 0x0000006C l00001AFC
// DataOut: a2 a3 a5 a7 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001AFC:
	d0_1384 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1578[a3_1382:byte] = Mem235[d0_1384 + 0x00000003:byte]
// DataOut: a0 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001AE8:
	d0_1384 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1567[a3_1382:byte] = Mem235[d0_1384 + 0x00000003:byte]
// DataOut: a0 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B0E:
	a0_1402 = (d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1400 = (d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem1555[a7_152 + 102:word32] = 0x00000001
	d5_1388 = 0
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016F2:
	branch (byte) d0_1384 == 0x64 l00001732
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016F8:
	branch (byte) d0_1384 == 0x69 l00001732
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000016FE:
	Mem1351[a7_152 + 44:byte] = (byte) d0_1384
	branch (byte) d0_1384 == 0x6E l00001B72
// DataOut: a0 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B72:
	branch d4_1334 != 0x00000001 l00001B94
// DataOut: a2 a3 a5 a7 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B94:
	branch d4_1334 != 0x0000006C l00001BB2
// DataOut: a2 a3 a5 a7 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BB2:
	branch d4_1334 != 0x00000068 l00001BD0
// DataOut: a2 a3 a5 a7 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BD0:
	branch d4_1334 != 0x00000002 l00001BEE
// DataOut: a2 a3 a5 a7 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BEE:
	d0_1384 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1402 = Mem1351[d0_1384:word32]
	Mem1545[a0_1402:word32] = d6_145
// DataOut: a0 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BD8:
	d0_1384 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1402 = Mem1351[d0_1384:word32]
	Mem1533[a0_1402:byte] = (byte) d6_145
// DataOut: a0 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BBA:
	d0_1384 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1402 = Mem1351[d0_1384:word32]
	Mem1518[a0_1402:word16] = (word16) d6_145
// DataOut: a0 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B9C:
	d0_1384 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1402 = Mem1351[d0_1384:word32]
	Mem1503[a0_1402:word32] = d6_145
// DataOut: a0 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B7A:
	d0_1384 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1402 = Mem1351[d0_1384:word32]
	Mem1484[a0_1402 + 4:word32] = d6_145
	Mem1485[a0_1402:word32] = 0x00000000
// DataOut: a0 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C02:
	d3_1400 = (d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem1469[a7_152 + 64:word32] = 0x00000000
	d5_1388 = 0
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000170A:
	word32 d0_1357 = SEQ(SLICE(d0_1384, word24, 8), Mem1351[a7_152 + 44:byte])
	word32 d0_1360 = SEQ(SLICE(d0_1357, word24, 8), (byte) d0_1357 - 0x6F)
	byte v116_1362 = (byte) d0_1360 - 0x01
	byte VZ_1364 = cond(v116_1362)
	branch v116_1362 <=u 0x00 l00001732
// DataOut: a0 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001718:
	word32 d0_1367 = SEQ(SLICE(d0_1360, word24, 8), Mem1351[a7_152 + 44:byte])
	branch (byte) d0_1367 == 0x73 l00001B1C
// DataOut: a0 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B1C:
	d0_1384 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3_1382 = Mem1351[d0_1384:word32]
	Mem1405[a7_152 + 102:word32] = 0x00000000
	d3_1400 = d0_1384 + 0x00000004
	a0_1402 = d0_1384 + 0x00000004
	word32 a1_1404 = a3_1382
	branch d5_1644 == 0x00000000 l00001B3E
// DataOut: a0 a1 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B38:
	word32 v132_1457 = d5_1644 - Mem1405[a7_152 + 102:word32]
	VZ_1364 = cond(v132_1457) (alias)
	branch v132_1457 <=u 0x00000000 l00001B5A
// DataOut: a0 a1 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B3E:
	branch Mem1405[a3_1382:byte] == 0x00 l00001B5A
// DataOut: a0 a1 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B42:
	d0_1384 = Mem1405[a7_152 + 102:word32]
// DataOut: a0 a1 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B46:
	d0_1384 = d0_1384 + 0x00000001
	a1_1404 = a1_1404 + 1
	VZ_1364 = DPB(VZ_1364, false, 0) (alias)
	branch VZ_1364 l00001B52
// DataOut: a0 a1 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B4E:
	word32 v133_1454 = d5_1644 - d0_1384
	VZ_1364 = cond(v133_1454) (alias)
	branch v133_1454 <=u 0x00000000 l00001B56
// DataOut: a0 a1 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B52:
	branch Mem1405[a1_1404:byte] != 0x00 l00001B46
// DataOut: a0 a1 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B56:
	Mem1446[a7_152 + 102:word32] = d0_1384
// DataOut: a0 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B5A:
	d5_1388 = 0
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001724:
	branch (byte) d0_1367 == 0x75 l00001732
// DataOut: a0 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000172A:
	branch (byte) d0_1367 != 0x78 l00001C0A
// DataOut: a0 a2 a4 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C0A:
	branch (byte) d1_1030 != 0x00 l00001C10
// DataOut: a0 a2 a4 a5 a7 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C0E:
	a2_1381 = a2_1381 - 1
// DataOut: a0 a2 a4 a5 a7 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C10:
	d0_1384 = a2_1381 - a4_149
	Mem1387[a7_152 + 102:word32] = d0_1384
	Mem1389[a7_152 + 64:word32] = 0x00000000
	a3_1382 = a4_149
	d5_1388 = 0
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001732:
	branch (byte) d1_1030 != 0x70 l00001744
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001738:
	Mem1337[a7_152 + 72:word32] = Mem235[a7_152 + 72:word32] | 0x00000001
	d4_1334 = 108
	d1_1030 = 120
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001744:
	word32 d3_1015
	word32 a7_1142
	branch (byte) d1_1030 == 0x64 l00001752
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000174A:
	branch (byte) d1_1030 != 0x69 l0000189C
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000189C:
	word32 d0_1129
	branch d4_1334 != 0x00000001 l000018C0
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018C0:
	branch d4_1334 != 0x0000006C l000018E2
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018E2:
	d0_1129 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1328[a7_152 + 60:word32] = Mem235[d0_1129:word32]
	Mem1329[a7_152 + 56:word32] = 0x00000000
	d3_1015 = d0_1129 + 0x00000004
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018C8:
	d0_1129 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1313[a7_152 + 60:word32] = Mem235[d0_1129:word32]
	Mem1314[a7_152 + 56:word32] = 0x00000000
	d3_1015 = d0_1129 + 0x00000004
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018A4:
	d0_1129 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1297[a7_152 + 60:word32] = Mem235[d0_1129 + 0x00000004:word32]
	Mem1299[a7_152 + 56:word32] = Mem1297[d0_1129:word32]
	d3_1015 = d0_1129 + 0x00000008
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018FA:
	branch d4_1334 != 0x00000068 l00001916
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001902:
	d0_1129 = SEQ(SLICE(d0_1129, word16, 16), Mem235[a7_152 + 62:word16])
	word32 a7_1274 = a7_152 - 4
	Mem1276[a7_1274:word32] = d1_1030
	Mem1282[a7_1274 + 64:word32] = (uint32) (uint16) (word16) d0_1129
	Mem1283[a7_1274 + 60:word32] = 0x00000000
	d1_1030 = Mem1283[a7_1274:word32]
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001916:
	branch d4_1334 != 0x00000002 l00001932
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000191E:
	word32 d0_1256 = SEQ(SLICE(d0_1129, word24, 8), Mem235[a7_152 + 63:byte])
	word32 a7_1257 = a7_152 - 4
	Mem1259[a7_1257:word32] = d1_1030
	Mem1265[a7_1257 + 64:word32] = (uint32) (uint8) (byte) d0_1256
	Mem1266[a7_1257 + 60:word32] = 0x00000000
	d1_1030 = Mem1266[a7_1257:word32]
// DataOut: a2 a5 a7 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001932:
	word32 d0_1144 = Mem235[a7_152 + 72:word32] & 1
	Mem1146[a7_152 + 44:byte] = (byte) d1_1030
	a7_1142 = a7_152
	branch d0_1144 == 0x00000000 l000019D0
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001942:
	branch (byte) d1_1030 != 0x6F l0000197E
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001948:
	branch d5_1644 != 0x00000000 l00001972
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000194C:
	word32 a7_1230 = a7_152 - 4
	Mem1232[a7_1230:word32] = d0_1144
	Mem1235[a7_1230 - 4:word32] = d1_1030
	word32 d0_1236 = Mem1235[a7_1230 + 64:word32]
	word32 d1_1237 = Mem1235[a7_1230 + 60:word32]
	Mem1240[a7_1230 - 8:word32] = d2_1162
	d2_1162 = Mem1240[a7_1230 - 8:word32]
	d1_1030 = Mem1240[a7_1230 - 4:word32]
	d0_1144 = Mem1240[a7_1230:word32]
	branch d1_1237 - (d0_1236 <u 0x00000000) == 0x00000000 l0000197E
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001972:
	Mem1228[a7_152 + 106:byte] = 0x30
	d7_1163 = 0x00000001
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000197E:
	a7_1142 = a7_152
	branch (byte) d1_1030 == 0x78 l0000198E
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001984:
	Mem1209[a7_152 + 44:byte] = (byte) d1_1030
	branch (byte) d1_1030 != 0x58 l000019D0
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000198E:
	Mem1170[a7_152 + 44:byte] = (byte) d1_1030
	word32 a7_1171 = a7_152 - 4
	Mem1173[a7_1171:word32] = d0_1144
	Mem1176[a7_1171 - 4:word32] = d1_1030
	word32 d0_1177 = Mem1176[a7_1171 + 64:word32]
	word32 d1_1178 = Mem1176[a7_1171 + 60:word32]
	Mem1181[a7_1171 - 8:word32] = d2_1162
	d1_1030 = Mem1181[a7_1171 - 4:word32]
	a7_1142 = a7_1171 + 4
	branch d1_1178 - (d0_1177 <u 0x00000000) == 0x00000000 l000019D0
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019B8:
	Mem1199[a7_1171 + 110 + d7_1163:byte] = 0x30
	word32 d7_1197 = d7_1163 + 0x00000001
	Mem1204[a7_1171 + 110 + d7_1197:byte] = (byte) d1_1030
	Mem1206[a7_1171 + 48:byte] = (byte) d1_1030
	d7_1163 = d7_1197 + 0x00000001
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001752:
	word32 d0_1024
	branch d4_1334 != 0x00000001 l00001778
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001778:
	branch d4_1334 != 0x0000006C l000017A4
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017A4:
	word32 d0_1035 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1039 = Mem235[d0_1035:word32]
	Mem1041[a7_152 + 52:word32] = d0_1039
	word32 a7_1042 = a7_152 - 4
	Mem1044[a7_1042:word32] = d1_1030
	Mem1049[a7_1042 + 52:word32] = d0_1039 >> 31
	word32 v237_1050 = Mem1049[a7_1042:word32]
	d3_1015 = d0_1035 + 0x00000004
	d0_1024 = d0_1039 >> 31
	d1_1030 = v237_1050
	branch d4_1334 != 0x00000068 l000017EA
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017CE:
	word32 d0_1093 = SEQ(SLICE(d0_1039 >> 31, word16, 16), Mem1049[a7_1042 + 58:word16])
	Mem1096[a7_1042:word32] = v237_1050
	word32 d1_1100 = (int32) (int16) SEQ(SLICE(v237_1050, word16, 16), (word16) d0_1093)
	Mem1102[a7_1042 + 56:word32] = d1_1100
	Mem1105[a7_1042 - 4:word32] = d0_1093
	Mem1110[a7_1042 + 52:word32] = d1_1100 >> 31
	d1_1030 = Mem1110[a7_1042 - 4:word32]
	d0_1024 = Mem1110[a7_1042:word32]
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017EA:
	branch d4_1334 != 0x00000002 l00001810
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017F2:
	word32 d0_1065 = SEQ(SLICE(d0_1024, word24, 8), Mem1049[a7_152 + 55:byte])
	word32 a7_1066 = a7_152 - 4
	Mem1068[a7_1066:word32] = d1_1030
	word32 d1_1073 = (int32) (int16) (int8) SEQ(SLICE(d1_1030, word24, 8), (byte) d0_1065)
	Mem1075[a7_1066 + 56:word32] = d1_1073
	Mem1078[a7_1066 - 4:word32] = d0_1065
	Mem1083[a7_1066 + 52:word32] = d1_1073 >> 31
	d1_1030 = Mem1083[a7_1066 - 4:word32]
	d0_1024 = Mem1083[a7_1066:word32]
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001780:
	word32 d0_1013 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1017 = Mem235[d0_1013:word32]
	Mem1019[a7_152 + 52:word32] = d0_1017
	word32 a7_1020 = a7_152 - 4
	Mem1022[a7_1020:word32] = d1_1030
	Mem1027[a7_1020 + 52:word32] = d0_1017 >> 31
	d3_1015 = d0_1013 + 0x00000004
	d0_1024 = d0_1017 >> 31
	d1_1030 = Mem1027[a7_1020:word32]
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000175A:
	d0_1024 = d3_1400 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1003[a7_152 + 52:word32] = Mem235[d0_1024 + 0x00000004:word32]
	Mem1005[a7_152 + 48:word32] = Mem1003[d0_1024:word32]
	d3_1015 = d0_1024 + 0x00000008
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001810:
	Mem905[a7_152 + 44:byte] = (byte) d1_1030
	word32 a7_906 = a7_152 - 4
	Mem908[a7_906:word32] = d0_1024
	Mem911[a7_906 - 4:word32] = d1_1030
	word32 d0_912 = Mem911[a7_906 + 56:word32]
	word32 d1_913 = Mem911[a7_906 + 52:word32]
	Mem916[a7_906 - 8:word32] = d2_1162
	word32 d1_926 = Mem916[a7_906 - 4:word32]
	a7_1142 = a7_906 + 4
	branch d1_913 - (d0_912 <u 0x00000000) >= 0x00000000 l0000185A
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000185A:
	d1_1030 = SEQ(SLICE(d1_926, word24, 8), Mem916[a7_906 + 48:byte])
	branch (Mem916[a7_906 + 76:word32] & 16) == 0x00000000 l00001874
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001874:
	branch (Mem916[a7_906 + 76:word32] & 8) == 0x00000000 l00001888
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000187C:
	Mem992[a7_906 + 110:byte] = 0x20
	d7_1163 = 0x00000001
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001866:
	Mem979[a7_906 + 110:byte] = 0x2B
	d7_1163 = 0x00000001
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001888:
	Mem968[a7_906 + 64:word32] = Mem916[a7_906 + 56:word32]
	Mem970[a7_906 + 60:word32] = Mem968[a7_906 + 52:word32]
	Mem972[a7_906 + 48:byte] = (byte) d1_1030
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000183A:
	Mem934[a7_906 + 110:byte] = 0x2D
	d7_1163 = 0x00000001
	d1_1030 = -Mem934[a7_906 + 56:word32]
	a7_1142 = Mem934[a7_906 + 0x00000040:word32]
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019D0:
	word32 d1_742 = SEQ(SLICE(d1_1030, word24, 8), Mem235[a7_1142 + 44:byte])
	a3_1382 = a7_1142 + 98
	branch (byte) d1_742 == 0x78 l000019E4
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019DE:
	branch (byte) d1_742 != 0x58 l000019EE
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019EE:
	branch (byte) d1_742 != 0x6F l000019FE
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019FE:
	Mem892[a7_1142 + 48:word32] = 0x0000000A
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019F4:
	Mem889[a7_1142 + 48:word32] = 0x00000008
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A06:
	Mem886[a7_1142 + 44:word32] = Mem235[a7_1142 + 48:word32]
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019E4:
	Mem877[a7_1142 + 44:word32] = 0x00000010
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A0C:
	word32 a6_752
	Mem748[a7_1142 + 108:word32] = Mem235[a7_1142 + 44:word32]
	branch (byte) d1_742 == 0x58 l00001A1E
// DataOut: a2 a3 a5 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A1E:
	a6_752 = 0x00001E24
// DataOut: a2 a3 a5 a6 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A18:
	a6_752 = 0x00001E14
// DataOut: a2 a3 a5 a6 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A22:
	Mem754[a7_1142 + 44:word32] = a6_752
	Mem756[a7_1142 + 124:word32] = d3_1015
	Mem758[a7_1142 + 68:word32] = d5_1644
	Mem760[a7_1142 + 48:word32] = d6_145
	Mem762[a7_1142 + 98:word32] = d7_1163
	word32 v189_763 = a7_1142 + 56
	word32 d6_764 = Mem762[v189_763:word32]
	word32 d7_766 = Mem762[v189_763 + 4:word32]
	word32 d3_768 = Mem762[a7_1142 + 102:word32]
	word32 a1_770 = Mem762[a7_1142 + 44:word32]
// DataOut: a1 a2 a3 a5 a7 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A44:
	word32 d1_777 = Mem762[a7_1142 + 108:word32]
	word32 a7_782 = a7_1142 - 4
	Mem784[a7_782:word32] = d1_777 >> 31
	Mem787[a7_782 - 4:word32] = d1_777
	Mem790[a7_782 - 8:word32] = a1_770
	Mem793[a7_782 - 12:word32] = d1_777
	Mem795[a7_782 - 16:word32] = d1_777 >> 31
	Mem797[a7_782 - 20:word32] = d7_766
	Mem799[a7_782 - 24:word32] = d6_764
	word32 d1_800 = fn0000279C(dwArg00, dwArg04, dwArg08, dwArg0C)
	word32 v193_802 = Mem799[a7_782 - 8:word32]
	word32 d1_807 = Mem799[a7_782 - 4:word32]
	word32 d0_809 = Mem799[a7_782:word32]
	a3_1382 = a3_1382 - 1
	Mem815[a3_1382:byte] = Mem799[v193_802 + d1_800:byte]
	Mem818[a7_782:word32] = d0_809
	Mem821[a7_782 - 4:word32] = d1_807
	Mem824[a7_782 - 8:word32] = v193_802
	Mem827[a7_782 - 12:word32] = d1_807
	Mem829[a7_782 - 16:word32] = d0_809
	Mem831[a7_782 - 20:word32] = d7_766
	Mem833[a7_782 - 24:word32] = d6_764
	word32 d1_834
	word32 d0_836 = fn00002454(dwArg00, dwArg04, dwArg08, dwArg0C, out d1_834, out a0_1402)
	a1_770 = Mem833[a7_782 - 8:word32]
	d6_764 = d0_836
	d7_766 = d1_834
	a7_266 = a7_782 + 4
	d3_768 = d3_768 + 0x00000001
	d0_1384 = d1_834
	branch d0_836 - (d1_834 <u 0x00000000) != 0x00000000 l00001A44
// DataOut: a0 a1 a2 a3 a5 a7 d0 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001AB2:
	Mem858[a7_782 + 106:word32] = d3_768
	d7_1163 = Mem858[a7_782 + 102:word32]
	d6_145 = Mem858[a7_782 + 52:word32]
	d5_1388 = Mem858[a7_782 + 72:word32]
	d3_1400 = Mem858[a7_782 + 128:word32]
	branch d5_1388 != 0xFFFFFFFF l00001AD4
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001AD4:
	Mem869[a7_782 + 76:word32] = Mem858[a7_782 + 76:word32] & 0xFFFFFFFD
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001ACE:
	d5_1388 = 0
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C20:
	branch d5_1388 - Mem235[a7_266 + 102:word32] >u 0x00000000 l00001C2E
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C2E:
	Mem705[a7_266 + 44:word32] = d5_1388
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C26:
	Mem702[a7_266 + 44:word32] = Mem235[a7_266 + 102:word32]
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C32:
	word32 a7_331 = a7_266 - 4
	Mem333[a7_331:word32] = d0_1384
	Mem338[a7_331 + 52:word32] = Mem333[a7_331 + 48:word32] + d7_1163
	Mem344[a7_331:word32] = Mem338[a7_331:word32]
	word32 d0_349 = Mem344[a7_331:word32]
	branch Mem344[a7_331 + 52:word32] - Mem344[a7_331 + 68:word32] <u 0x00000000 l00001C56
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C56:
	Mem691[a7_331:word32] = d0_349
	Mem696[a7_331 + 48:word32] = Mem691[a7_331 + 68:word32] - Mem691[a7_331 + 52:word32]
// DataOut: a0 a2 a3 a5 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C50:
	Mem684[a7_331 + 48:word32] = 0x00000000
// DataOut: a0 a2 a3 a5 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C66:
	Mem356[a7_266 + 48:word32] = Mem344[a7_266 + 44:word32]
	word32 d0_358 = Mem356[a7_266 + 72:word32] & 2
	branch d0_358 == 0x00000000 l00001CA8
// DataOut: a0 a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C74:
	word32 d2_643 = 0
	branch d7_1163 == 0x00000000 l00001CA8
// DataOut: a0 a2 a3 a5 a7 d0 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C7A:
	word32 a7_655 = a7_266 - 4
	Mem657[a7_655:word32] = a5_150
	Mem667[a7_655 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_358, word24, 8), Mem657[a7_655 + 110 + d2_643:byte])
	d0_358 = fn00001E34(dwArg00, dwArg04, out a0_1402, out a5_150)
	branch d0_358 != 0xFFFFFFFF l00001CA0
// DataOut: a0 a2 a3 a5 a7 d0 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CA0:
	d2_643 = d2_643 + 0x00000001
	d6_145 = d6_145 + 0x00000001
	branch d7_1163 - d2_643 >u 0x00000000 l00001C7A
// DataOut: a0 a2 a3 a5 a7 d0 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CA8:
	branch (Mem356[a7_266 + 72:word32] & 4) != 0x00000000 l00001CFA
// DataOut: a0 a2 a3 a5 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CB0:
	word32 d2_589 = 0
	branch Mem356[a7_266 + 48:word32] == 0x00000000 l00001CFA
// DataOut: a0 a2 a3 a5 a7 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CB8:
	word32 d4_594 = Mem356[a7_266 + 72:word32]
	word32 a4_596 = Mem356[a7_266 + 48:word32]
// DataOut: a0 a2 a3 a4 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CC0:
	word32 a0_614
	word32 a7_605 = a7_266 - 4
	Mem607[a7_605:word32] = a5_150
	branch (d4_594 & 2) == 0x00000000 l00001CCE
// DataOut: a0 a2 a3 a4 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CCE:
	a0_614 = SEQ(SLICE(a0_1402, word16, 16), 0x0020)
// DataOut: a0 a2 a3 a4 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CC8:
	a0_614 = SEQ(SLICE(a0_1402, word16, 16), 0x0030)
// DataOut: a0 a2 a3 a4 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CD2:
	Mem617[a7_266 - 8:word32] = a0_614
	branch fn00001E34(dwArg00, dwArg04, out a0_1402, out a5_150) != 0xFFFFFFFF l00001CEA
// DataOut: a0 a2 a3 a4 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CEA:
	d2_589 = d2_589 + 0x00000001
	d6_145 = d6_145 + 0x00000001
	branch a4_596 - d2_589 >u 0x00000000 l00001CC0
// DataOut: a0 a2 a3 a4 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CF2:
	Mem635[a7_605 + 52:word32] = a4_596
	Mem637[a7_605 + 76:word32] = d4_594
// DataOut: a2 a3 a5 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CFA:
	word32 d0_388 = Mem356[a7_266 + 72:word32] & 2
	branch d0_388 != 0x00000000 l00001D36
// DataOut: a2 a3 a5 a7 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D02:
	word32 d2_548 = 0
	branch d7_1163 == 0x00000000 l00001D36
// DataOut: a2 a3 a5 a7 d0 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D08:
	word32 a7_560 = a7_266 - 4
	Mem562[a7_560:word32] = a5_150
	Mem572[a7_560 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_388, word24, 8), Mem562[a7_560 + 110 + d2_548:byte])
	word32 a0_574
	d0_388 = fn00001E34(dwArg00, dwArg04, out a0_574, out a5_150)
	branch d0_388 != 0xFFFFFFFF l00001D2E
// DataOut: a2 a3 a5 a7 d0 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D2E:
	d2_548 = d2_548 + 0x00000001
	d6_145 = d6_145 + 0x00000001
	branch d7_1163 - d2_548 >u 0x00000000 l00001D08
// DataOut: a2 a3 a5 a7 d0 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D36:
	word32 d2_404 = Mem356[a7_266 + 102:word32]
	branch d5_1388 - Mem356[a7_266 + 102:word32] <=u 0x00000000 l00001D64
// DataOut: a2 a3 a5 a7 d0 d2 d3 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D40:
	word32 a7_527 = a7_266 - 4
	Mem529[a7_527:word32] = a5_150
	Mem532[a7_527 - 0x00000004:word32] = 0x00000030
	word32 a0_533
	d0_388 = fn00001E34(dwArg00, dwArg04, out a0_533, out a5_150)
	branch d0_388 != 0xFFFFFFFF l00001D5C
// DataOut: a2 a3 a5 a7 d0 d2 d3 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D5C:
	d2_404 = d2_404 + 0x00000001
	d6_145 = d6_145 + 0x00000001
	branch d5_1388 - d2_404 >u 0x00000000 l00001D40
// DataOut: a2 a3 a5 a7 d0 d2 d3 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D64:
	word32 d2_416 = 0
	branch Mem356[a7_266 + 102:word32] == 0x00000000 l00001D9A
// DataOut: a2 a3 a5 a7 d0 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D6C:
	word32 a4_485 = Mem356[a7_266 + 102:word32]
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D70:
	word32 a7_493 = a7_266 - 4
	Mem495[a7_493:word32] = a5_150
	Mem504[a7_493 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_388, word24, 8), Mem495[a3_1382 + d2_416:byte])
	word32 a0_506
	d0_388 = fn00001E34(dwArg00, dwArg04, out a0_506, out a5_150)
	branch d0_388 != 0xFFFFFFFF l00001D92
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D92:
	d2_416 = d2_416 + 0x00000001
	d6_145 = d6_145 + 0x00000001
	branch a4_485 - d2_416 >u 0x00000000 l00001D70
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D9A:
	d0 = Mem356[a7_266 + 72:word32] & 4
	branch d0 == 0x00000000 l00001DD0
// DataOut: a2 a5 a7 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DA2:
	word32 d2_451 = 0
	branch Mem356[a7_266 + 48:word32] == 0x00000000 l00001DD0
// DataOut: a2 a5 a7 d0 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DAA:
	word32 a3_456 = Mem356[a7_266 + 48:word32]
// DataOut: a2 a3 a5 a7 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DAE:
	word32 a7_463 = a7_266 - 4
	Mem465[a7_463:word32] = a5_150
	Mem468[a7_463 - 0x00000004:word32] = 0x00000020
	word32 a0_470
	d0 = fn00001E34(dwArg00, dwArg04, out a0_470, out a5_150)
	branch d0 != 0xFFFFFFFF l00001DC8
// DataOut: a2 a3 a5 a7 d0 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DC8:
	d2_451 = d2_451 + 0x00000001
	d6_145 = d6_145 + 0x00000001
	branch a3_456 - d2_451 >u 0x00000000 l00001DAE
// DataOut: a2 a3 a5 a7 d0 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DD0:
	a7_152 = a7_266
	a4_149 = a2_1381
// DataOut: a4 a5 a7 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DF4:
	branch Mem0[a4_149:byte] != 0x00 l000014D0
// DataOut: a4 a5 a7 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DFA:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DC4:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D8E:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D56:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D28:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CE4:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C9A:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

fn000014B4_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d3:d3 a5:a5 a4:a4 d6:d6 d0:<invalid> d2:d2 d4:d4 d5:d5 d7:d7 a2:a2 a3:a3 a6:a6 a0:<invalid> d1:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>



word32 fn00001E34(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
// Stack args: Stack +0004(32) Stack +0008(32)
fn00001E34_entry:
	*a5Out = a5
// DataOut: a4 a5 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00001E34:
	word32 d1_38
	Mem19[dwArg08 + 24:word32] = Mem0[dwArg08 + 24:word32] | 2
	word32 v13_21 = Mem19[dwArg08 + 20:word32] - 0x00000001
	Mem22[dwArg08 + 20:word32] = v13_21
	branch v13_21 < 0x00000000 l00001E78
// DataOut: a2 a4 a5 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001E50:
	word32 d0_67 = 10
	branch dwArg04 != 10 l00001E62
// DataOut: a2 a4 a5 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:2 -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001E56:
	d0_67 = Mem22[dwArg08 + 24:word32] & 0x00000080
	branch d0_67 != 0x00000000 l00001E78
// DataOut: a2 a4 a5 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:10 -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001E78:
	word32 a0_60
	word32 a1_61
	word32 a5_62
	d1_38 = fn00001E90(dwArg04, dwArg08, out a0_60, out a1_61, out a5_62)
// DataOut: a0 a4 a5 d1 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001E62:
	word32 a0_77 = Mem22[dwArg08 + 4:word32]
	*a0Out = a0_77
	Mem81[dwArg08 + 4:word32] = a0_77 + 1
	Mem83[a0_77:byte] = (byte) dwArg04
	d1_38 = (uint32) (uint8) (byte) SEQ(SLICE(d0_67, word24, 8), Mem83[a0_77:byte])
// DataOut: a0 a4 a5 d1 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001E86:
	return d1_38
// DataOut: a0 a4 a5 d0 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3

fn00001E34_exit:
// DataOut: a0 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 a2:a2 a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> a3:a3 a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3



word32 fn00001E90(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
// Stack args: Stack +0004(32) Stack +0008(32)
fn00001E90_entry:
	*a0Out = a0
// DataOut: a0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00001E90:
	word32 d0_129
	word32 a1_34
	word32 a5_35
	fn00002424(out a1_34, out a5_35)
	branch dwArg08 != 0x00000000 l00001EAC
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001EAC:
	branch (Mem0[dwArg08 + 24:word32] & 73) == 64 l00001EBE
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EBE:
	branch Mem0[dwArg08 + 28:word32] != 0x00000000 l00001EDC
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EC4:
	branch (Mem0[dwArg08 + 24:word32] & 4) == 0x00000000 l00001ED4
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001ED4:
	Mem227[dwArg08 + 28:word32] = 0x00000400
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001ECC:
	Mem224[dwArg08 + 28:word32] = 1
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EDC:
	branch Mem0[dwArg08 + 8:word32] != 0x00000000 l00001F1C
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F1C:
	branch Mem0[dwArg08:word32] == 0x00000000 l00001F76
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F76:
	d0_129 = 0
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F20:
	word32 d0_170 = Mem0[dwArg08 + 24:word32] & 0x00000080
	branch d0_170 == 0x00000000 l00001F4C
// DataOut: a1 a2 a5 d0 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F2C:
	d0_170 = 10
	branch dwArg04 != 10 l00001F4C
// DataOut: a1 a2 a5 d0 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F4C:
	word32 d4_178 = Mem0[dwArg08 + 4:word32] - Mem0[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_178 - d0_170 == 0x00000000 l00001F7A
// DataOut: a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F6A:
	Mem190[dwArg08 + 24:word32] = Mem0[dwArg08 + 24:word32] | 16
	word32 a0_187
	*a0Out = dwArg08 + 24
	d0_129 = -1
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F32:
	word32 a0_198 = Mem0[dwArg08 + 4:word32]
	Mem202[dwArg08 + 4:word32] = a0_198 + 1
	Mem204[a0_198:byte] = (byte) dwArg04
	word32 a0_209
	word32 a1_210
	word32 a5_211
	d0_129 = fn00001FA4(dwArg08, out a0_209, out a1_210, out a5_211)
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:10 d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EE2:
	word32 d4_138
	branch (Mem0[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l00001EF6
// DataOut: a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EF6:
	d4_138 = 1
// DataOut: a1 a2 a5 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EF2:
	d4_138 = 2
// DataOut: a1 a2 a5 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EF8:
	word32 d1_146
	word32 a0_147
	word32 a1_148
	word32 d0_149 = fn00002050(d4_138 + Mem0[dwArg08 + 28:word32], out d1_146, out a0_147, out a1_148)
	branch d0_149 != 0x00000000 l00001F12
// DataOut: a0 a1 a2 a3 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d4:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F12:
	Mem159[dwArg08 + 8:word32] = d0_149 + 1
// DataOut: a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d4:<invalid> a0:<invalid> a3:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F7A:
	Mem115[dwArg08 + 24:word32] = Mem0[dwArg08 + 24:word32] | 2
	word32 a0_117 = Mem115[dwArg08 + 8:word32]
	*a0Out = a0_117
	Mem119[a0_117:byte] = (byte) dwArg04
	word32 a1_120 = Mem119[dwArg08 + 8:word32]
	Mem123[dwArg08 + 4:word32] = a1_120 + 1
	Mem128[dwArg08 + 20:word32] = Mem123[dwArg08 + 28:word32] - 0x00000001
	word32 a1_121
	*a1Out = a1_120 + 1
	d0_129 = 0
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a1:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F0C:
	d0_129 = -1
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d4:<invalid> a0:<invalid> a3:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EB8:
	d0_129 = -1
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001EA6:
	d0_129 = -1
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00001F9E:
	return d0_129
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> a3:<invalid> a4:<invalid> d2:<invalid> a6:<invalid> d3:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6

fn00001E90_exit:
// DataOut: a0 a1 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d5:d5 a2:a2 d0:<invalid> d2:d2 d3:d3 d4:d4 d6:d6 a3:a3 a4:a4 a6:a6 d1:<invalid> a1:<invalid> a0:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6



word32 fn00001FA4(word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
// Stack args: Stack +0004(32)
fn00001FA4_entry:
	*a0Out = a0
// DataOut: a0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001FA4:
	word32 d0_108
	word32 a1_19
	word32 a5_20
	fn00002424(out a1_19, out a5_20)
	branch dwArg04 != 0x00000000 l00001FBA
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001FBA:
	branch Mem0[dwArg04 + 28:word32] != 0x00000000 l00001FD8
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FC0:
	branch (Mem0[dwArg04 + 24:word32] & 4) == 0x00000000 l00001FD0
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FD0:
	Mem128[dwArg04 + 28:word32] = 0x00000400
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FC8:
	Mem125[dwArg04 + 28:word32] = 1
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FD8:
	branch Mem0[dwArg04 + 8:word32] != 0x00000000 l00001FE2
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FE2:
	word32 d0_68 = Mem0[dwArg04 + 24:word32] & 2
	branch d0_68 == 0x00000000 l00002028
// DataOut: a0 a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FEA:
	branch Mem0[dwArg04:word32] == 0x00000000 l00002018
// DataOut: a0 a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002018:
	d0_108 = 0
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FEE:
	word32 d4_95 = Mem0[dwArg04 + 4:word32] - Mem0[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_95 - d0_68 == 0x00000000 l0000201C
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000201C:
	Mem111[dwArg04 + 4:word32] = Mem0[dwArg04 + 8:word32]
	Mem113[dwArg04 + 20:word32] = Mem111[dwArg04 + 28:word32]
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002028:
	Mem86[dwArg04 + 24:word32] = Mem0[dwArg04 + 24:word32] & -4
	word32 a0_83
	*a0Out = dwArg04 + 24
	d0_108 = 0
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000200C:
	Mem107[dwArg04 + 24:word32] = Mem0[dwArg04 + 24:word32] | 16
	word32 a0_104
	*a0Out = dwArg04 + 24
	d0_108 = -1
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FDE:
	d0_108 = 0
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001FB6:
	d0_108 = -1
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002032:
	return d0_108
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d4:<invalid> d2:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6

fn00001FA4_exit:
// DataOut: a0 a1 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:<invalid> d2:d2 d3:d3 d4:d4 a6:a6 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6



word32 fn00002050(word32 dwArg04, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2
// Stack args: Stack +0004(32)
fn00002050_entry:
	*d1Out = d1
	*a1Out = a1
	*a0Out = a0
// DataOut: a0 a1 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002050:
	word32 d0_20
	branch dwArg04 != 0x00000000 l0000205E
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000205E:
	branch Mem0[0x00003ECC:word32] != 0x00000000 l00002082
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> -4(fp):d2
// LocalsOut: fp(32)

l00002066:
	word32 a0_86 = Mem0[0x00003EC8:word32]
	Mem94[0x00000000:word32] = 0x00000000
	word32 d1_100
	word32 a0_101
	word32 a1_102
	Mem105[0x00003ECC:word32] = fn00002344(dwLoc10, a0_86, a0_86, out d1_100, out a0_101, out a1_102)
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> -4(fp):d2
// LocalsOut: fp(32)

l00002082:
	branch Mem0[0x00003ECC:word32] != 0x00000000 l0000208E
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2
// LocalsOut: fp(32)

l0000208E:
	word32 d1_71
	word32 a0_72
	word32 d0_73 = fn00002220(Mem0[0x00003ECC:word32], dwArg04 + 4, out d1_71, out a0_72)
	word32 a1_74
	*a1Out = d0_73
	branch d0_73 != 0x00000000 l000020AC
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

l000020AC:
	Mem82[d0_73:word32] = dwArg04
	word32 a0_83
	*a0Out = d0_73 + 4
	d0_20 = d0_73 + 4
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

l000020A8:
	d0_20 = 0
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

l0000208A:
	d0_20 = 0
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

l0000205A:
	d0_20 = 0
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> -4(fp):d2

l000020B4:
	return d0_20
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

fn00002050_exit:
// DataOut: a0 a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2



void fn000020BC(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
// Stack args: Stack +0004(32)
fn000020BC_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000020BC:
	branch dwArg04 == 0x00000000 l000020E6
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000020C6:
	branch Mem0[0x00003ECC:word32] == 0x00000000 l000020E6
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> a0:<invalid>
// LocalsOut: fp(32)

l000020CE:
	fn00002184(Mem0[0x00003ECC:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> a0:<invalid>

l000020E6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

fn000020BC_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>



void fn00002184(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32)
fn00002184_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l00002184:
	branch Mem0[Mem0[0x00003E98:word32] + 20:word16] <u 0x0027 l000021B4
// DataOut: a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000021B4:
	branch dwArg04 == 0x00000000 l00002218
// DataOut: a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021B8:
	branch dwArg08 == 0x00000000 l00002218
// DataOut: a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021BC:
	word32 a3_113 = dwArg08 + -12
	branch dwArg0C - Mem0[dwArg04 + 20:word32] >=u 0x00000000 l000021FE
// DataOut: a3 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021C8:
	word32 a2_87 = dwArg04
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021CA:
	a2_87 = Mem0[a2_87:word32]
	branch Mem0[a2_87:word32] == 0x00000000 l00002218
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021D0:
	branch Mem0[a2_87 + 8:byte] == 0x00 l000021CA
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021D6:
	branch dwArg08 - Mem0[a2_87 + 20:word32] <u 0x00000000 l000021CA
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021DC:
	branch dwArg08 - Mem0[a2_87 + 24:word32] >=u 0x00000000 l000021CA
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021E2:
	Deallocate(a2_87, dwArg08, dwArg0C)
	branch Mem0[a2_87 + 28:word32] - Mem0[dwArg04 + 16:word32] != 0x00000000 l00002218
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021FC:
	a3_113 = a2_87
// DataOut: a3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021FE:
	Remove(a3_113)
	word32 a3_82 = a3_113 - 4
	FreeMem(a3_82, Mem0[a3_82:word32])
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000021A2:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002218:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6

fn00002184_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d1:<invalid> a5:a5 a4:a4 a0:<invalid> a6:a6 a1:<invalid> d0:<invalid> d2:d2 a2:a2 a3:a3 -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6



word32 fn00002220(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
// Stack args: Stack +0004(32) Stack +0008(32)
fn00002220_entry:
	*d1Out = d1
// DataOut: d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00002220:
	word32 d0_45
	word32 a0_31 = Mem0[0x00003E98:word32]
	*a0Out = a0_31
	branch Mem0[a0_31 + 20:word16] <u 0x0027 l0000224C
// DataOut: a0 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000224C:
	word32 a3_123 = 0x00000000
	branch dwArg04 == 0x00000000 l0000233C
// DataOut: a0 a3 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002254:
	branch dwArg08 == 0x00000000 l0000233C
// DataOut: a0 a3 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:0x00000000 d4:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000225A:
	branch dwArg08 - Mem0[dwArg04 + 20:word32] >=u 0x00000000 l0000230E
// DataOut: a0 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:0x00000000 d4:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000230E:
	word32 d1_210 = Mem0[dwArg04 + 12:word32]
	*d1Out = d1_210
	word32 d0_213 = AllocMem(dwArg08 + 16, d1_210)
	a3_123 = d0_213
	branch d0_213 == 0x00000000 l0000233C
// DataOut: a0 a3 a4 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:0x00000000 d4:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002328:
	Mem219[d0_213:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_213 + 4)
	Mem225[d0_213 + 12:word32] = 0x00000000
	word32 a0_222
	*a0Out = dwArg04
	a3_123 = d0_213 + 16
// DataOut: a0 a3 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> d3:<invalid> d1:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002262:
	word32 a5_104 = Mem0[dwArg04:word32]
// DataOut: a0 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:0x00000000 d4:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002264:
	branch Mem0[a5_104:word32] == 0x00000000 l00002286
// DataOut: a0 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002286:
	word32 d3_164 = Mem0[dwArg04 + 16:word32] + 40
	word32 d1_166 = Mem0[dwArg04 + 12:word32]
	*d1Out = d1_166
	word32 d0_169 = AllocMem(d3_164, d1_166)
	a3_123 = d0_169
	branch d0_169 == 0x00000000 l0000233C
// DataOut: a0 a3 a4 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000022A4:
	Mem175[d0_169:word32] = d3_164
	Mem178[d0_169 + 12:byte] = 0x0A
	Mem182[d0_169 + 20:word32] = d0_169 + 40
	Mem184[d0_169 + 24:word32] = d0_169 + 40
	Mem186[Mem184[d0_169 + 20:word32]:word32] = 0x00000000
	word32 a2_187 = Mem186[d0_169 + 20:word32]
	Mem190[a2_187 + 4:word32] = Mem186[dwArg04 + 16:word32]
	Mem193[d0_169 + 32:word32] = Mem190[a2_187 + 4:word32]
	Mem197[d0_169 + 28:word32] = Mem193[d0_169 + 32:word32] + Mem193[d0_169 + 20:word32]
	AddHead(dwArg04, d0_169 + 4)
	word32 a0_202
	*a0Out = d0_169 + 4
	a3_123 = Allocate(d0_169 + 4, dwArg08)
// DataOut: a0 a3 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> d3:<invalid> d1:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002268:
	branch Mem0[a5_104 + 8:byte] == 0x00 l00002282
// DataOut: a0 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000226E:
	word32 d0_158 = Allocate(a5_104, dwArg08)
	word32 a0_156
	*a0Out = a5_104
	a3_123 = d0_158
	branch d0_158 != 0x00000000 l000022F2
// DataOut: a0 a3 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000022F2:
	branch (Mem0[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l0000233C
// DataOut: a0 a3 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> d3:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000022FE:
	word32 a2_131 = a3_123
	word32 d2_133 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut: a0 a2 a3 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> d3:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002304:
	Mem137[a2_131:word32] = 0x00000000
	word32 a2_138 = a2_131 + 4
	Mem139[a2_138:word32] = 0x00000000
	a2_131 = a2_138 + 4
	d2_133 = d2_133 - 0x00000001
	branch d2_133 != 0x00000000 l00002304
// DataOut: a0 a2 a3 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> d3:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000230C:
// DataOut: a0 a3 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> d3:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000233C:
	d0_45 = a3_123
// DataOut: a0 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> d3:<invalid> d1:<invalid> a6:<invalid> d0:<invalid> a1:<invalid> a5:<invalid> a2:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002282:
	a5_104 = Mem0[a5_104:word32]
// DataOut: a0 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000223A:
	word32 a0_65
	*a0Out = dwArg04
	d0_45 = AllocPooled(dwArg08, dwArg04)
// DataOut: a0 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000233E:
	return d0_45
// DataOut: a0 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a6:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d3:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a2:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6

fn00002220_exit:
// DataOut: a0 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 a4:a4 a0:<invalid> a6:a6 d0:<invalid> d3:d3 d4:d4 a2:a2 a3:a3 a5:a5 d1:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6



word32 fn00002344(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32)
fn00002344_entry:
	*a1Out = a1
	*d1Out = d1
// DataOut: a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l00002344:
	word32 d0_30
	word32 a0_19 = Mem0[0x00003E98:word32]
	*a0Out = a0_19
	branch Mem0[a0_19 + 20:word16] <u 0x0027 l00002372
// DataOut: a0 a1 a2 a5 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002372:
	word32 a1_52
	*a1Out = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l000023AC
// DataOut: a0 a1 a2 a5 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l00002378:
	word32 d0_71 = AllocMem(24, 0)
	word32 d1_70
	*d1Out = 0
	*a1Out = d0_71
	branch d0_71 == 0x00000000 l000023AC
// DataOut: a0 a1 a2 a5 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> a1:0x00000000 -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l0000238E:
	Mem78[d0_71:word32] = d0_71 + 4
	Mem79[d0_71 + 4:word32] = 0x00000000
	Mem81[d0_71 + 8:word32] = d0_71
	Mem83[d0_71 + 12:word32] = dwArg04
	Mem87[d0_71 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem89[d0_71 + 20:word32] = dwArg0C
	word32 a0_76
	*a0Out = d0_71 + 4
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> a1:<invalid> a6:<invalid> d0:<invalid> d1:0 -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l000023AC:
	d0_30 = a1_52
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> a1:<invalid> a6:<invalid> d0:<invalid> d1:0 -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000235E:
	word32 d1_45
	*d1Out = dwArg08
	d0_30 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l000023AE:
	return d0_30
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> a6:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> a1:<invalid> -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6

fn00002344_exit:
// DataOut: a0 a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d3:d3 a2:a2 a0:<invalid> a6:a6 d0:<invalid> d1:<invalid> d2:d2 a1:<invalid> -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6



void fn000023B4(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
// Stack args: Stack +0004(32)
fn000023B4_entry:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000023B4:
	branch Mem0[Mem0[0x00003E98:word32] + 20:word16] <u 0x0027 l000023D8
// DataOut: d0 d2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000023D8:
	branch dwArg04 == 0x00000000 l0000241C
// DataOut: d0 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l000023DC:
	RemHead(dwArg04)
	word32 a2_47 = d0
	branch d0 == 0x00000000 l0000240E
// DataOut: a2 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l000023EE:
	word32 a2_59 = a2_47 - 4
	word32 d0_60 = Mem0[a2_59:word32]
	FreeMem(a2_59, d0_60)
	RemHead(dwArg04)
	a2_47 = d0_60
	branch d0_60 != 0x00000000 l000023EE
// DataOut: a2 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> a6:<invalid> a2:<invalid> d1:d0 d0:<invalid> a1:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000240E:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> a6:<invalid> a2:<invalid> d1:d0 d0:<invalid> a1:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l000023CA:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000241C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> a6:<invalid> a2:<invalid> d1:d0 d0:24 a1:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6

fn000023B4_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 a0:<invalid> a6:a6 a2:a2 d1:d0 d0:24 a1:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6



word32 fn00002424(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZNX a1 a4 a5 d0 d1
// Preserved: a6 a7
fn00002424_entry:
	*a1Out = a1
	*a5Out = a5
// DataOut: a0 a1 a2 a5 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002424:
	SetSignal(0, 0x00001000)
	word32 d1_18 = 0x00001000
	branch 0x00000000 == 0x00000000 l0000244E
// DataOut: a0 a1 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002442:
	word32 a1_30
	word32 a5_31
	fn0000131C(0x00000014, out d1_18, out a1_30, out a5_31)
// DataOut: a0 a1 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a6:<invalid> d0:0x00000000 d1:0x00001000 -4(fp):a6

l0000244E:
	return d1_18
// DataOut: a0 a1 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a6:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):00000014 -4(fp):a6

fn00002424_exit:
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):00000014 -4(fp):a6



word32 fn00002454(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn00002454_entry:
// DataOut: a2 a3 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00002454:
	word32 d0_115
	word32 d1_18
	*d1Out = dwArg08
	word32 a0_21
	*a0Out = dwArg08
	word32 d3_123 = dwArg10
	branch dwArg0C != 0x00000000 l000024AA
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000024AA:
	branch dwArg04 - dwArg0C >=u 0x00000000 l000024B4
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024B4:
	word32 d4_141 = 24
	word32 d6_142 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_142 != 0x00 l000024D2
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024BE:
	d4_141 = 16
	d6_142 = __rol(d6_142, 0x00000008)
	branch (byte) d6_142 != 0x00 l000024D2
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:24 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024C6:
	d4_141 = 8
	d6_142 = __rol(d6_142, 0x00000008)
	branch (byte) d6_142 != 0x00 l000024D2
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:16 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024CE:
	d4_141 = 0
	d6_142 = SEQ(SLICE(d6_142, word24, 8), (byte) dwArg0C)
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:8 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024D2:
	word32 d4_160 = SEQ(SLICE(d4_141, word24, 8), (byte) d4_141 + Mem0[0x00003ED0 + (int32) ((int16) SEQ(SLICE(d6_142, word16, 16), (word16) d6_142 & 0x00FF)):byte])
	word32 d5_162 = 32 - d4_160
	branch d5_162 != 0x00000000 l000024F2
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024F2:
	word32 d1_189
	word32 d2_190
	word32 d0_191 = fn00002558(dwArg04 >>u d4_160, dwArg04 << d5_162 | dwArg08 >>u d4_160, dwArg0C << d5_162 | dwArg10 >>u d4_160, out d1_189, out d2_190)
	word32 d3_178 = dwArg10 << d5_162
	word32 d5_200 = __swap(d0_191)
	word32 d6_202 = __swap(d3_178)
	word32 d3_201 = d3_178 *u (word16) d5_200
	word32 d2_206 = __swap(d0_191 *u (word16) d3_178)
	word16 v34_207 = (word16) (d2_206 + d3_201)
	word32 d4_203 = d0_191 *u (word16) d6_202
	word32 d2_209 = SEQ(SLICE(d2_206, word16, 16), v34_207)
	word16 v39_215 = (word16) (d2_209 + d4_203)
	word32 d5_204 = d5_200 *u (word16) d6_202
	word32 d6_186 = dwArg08 << d5_162
	word32 d2_223 = __swap(SEQ(SLICE(d2_209, word16, 16), v39_215))
	word32 d5_214 = SEQ(SLICE(d5_204, word16, 16), (word16) d5_204 + (v34_207 <u 0x0000))
	word32 a0_188
	*a0Out = d6_186
	word32 d1_195
	*d1Out = d0_191
	word32 v48_234 = d1_189 - ((__swap(SEQ(SLICE(d3_201, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_203, word16, 16), 0x0000))) + SEQ(SLICE(d5_214, word16, 16), (word16) d5_214 + (v39_215 <u 0x0000)))
	branch v48_234 <u 0x00000000 l0000254E
// DataOut: a0 a2 a3 a5 d1 d2
// DataOut (flags): Z
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002548:
	branch v48_234 != 0x00000000 l00002550
// DataOut: a0 a2 a3 a5 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l0000254A:
	branch d6_186 - d2_223 >=u 0x00000000 l00002550
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l0000254E:
	word32 d1_247
	*d1Out = d0_191 - 0x00000001
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024E6:
	branch dwArg0C - dwArg04 <u 0x00000000 l000024EE
// DataOut: a0 a2 a3 a5 d1 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024EA:
	branch dwArg10 - dwArg08 >u 0x00000000 l000024AE
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024EE:
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000024AE:
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l0000246C:
	branch dwArg04 - dwArg10 >=u 0x00000000 l0000247E
// DataOut: a0 a2 a3 a5 d0 d1 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l0000247E:
	branch dwArg10 != 0x00000000 l0000248A
// DataOut: a0 a2 a3 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002482:
	d3_123 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut: a0 a2 a3 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l0000248A:
	word32 d1_104
	word32 d2_105
	word32 d0_106 = fn00002558(0, dwArg04, d3_123, out d1_104, out d2_105)
	word32 d1_111
	word32 d2_112
	word32 d1_114
	*d1Out = fn00002558(d1_104, dwArg08, d2_105, out d1_111, out d2_112)
	d0_115 = d0_106
// DataOut: a0 a2 a3 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d4:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002470:
	word32 d1_80
	word32 d2_81
	word32 d1_83
	*d1Out = fn00002558(dwArg04, dwArg08, dwArg10, out d1_80, out d2_81)
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002550:
	d0_115 = 0
// DataOut: a0 a2 a3 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002552:
	return d0_115
// DataOut: a0 a2 a3 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d4:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6

fn00002454_exit:
// DataOut: a0 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d1:<invalid> d0:<invalid> a0:<invalid> d3:d3 d2:d2 d4:d4 a1:<invalid> d5:d5 d6:d6 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6



word32 fn00002558(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0 d1 d2
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn00002558_entry:
	*d2Out = d2
	*d1Out = d1
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0024(32)

l00002558:
	word32 d7_12 = d2
	branch d2 == 0x00000000 l00002572
// DataOut: a2 a3 a5 d0 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0024(32)

l00002560:
	word32 d6_154 = d1
	word32 d5_153 = d0
	branch d0 != 0x00000000 l00002580
// DataOut: a2 a3 a5 d0 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0024(32)

l00002580:
	word32 d2_95 = __swap(d2)
	branch (word16) d2_95 != 0x0000 l000025A8
// DataOut: a2 a3 a5 d0 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0024(32)

l000025A8:
	byte bLoc26_142 = 0x00
	word32 d0_144 = 0
	branch d2 < 0x00000000 l000025C4
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 d2:<invalid> -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0)

l000025BA:
	d6_154 = d6_154 * 0x00000002
	d0_144 = SEQ(SLICE(d0_144, word16, 16), (word16) d0_144 + 0x0001)
	d5_153 = d5_153 * 0x00000002 + (d6_154 <u 0x00000000)
	d7_12 = d7_12 * 0x00000002
	branch d7_12 > 0x00000000 l000025BA
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> -38(fp):0x00 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0)

l000025C4:
	word16 v41_156 = (word16) d0_144
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> -38(fp):0x00 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l000025C6:
	word32 d1_183
	word32 d2_177 = __swap(d5_153)
	word32 d3_178 = __swap(d7_12)
	branch (word16) (d2_177 - d3_178) != 0x0000 l000025D8
// DataOut: a2 a3 a5 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l000025D8:
	d1_183 = __swap(SEQ(SLICE(__swap(DPB(DPB(d5_153, (uint16) (d5_153 % (uint16) d3_178), 16), (uint16) (d5_153 /u (uint16) d3_178), 0)), word16, 16), 0x0000))
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l000025D2:
	d1_183 = 0x0000FFFF
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l000025E2:
	word32 d6_187 = __swap(SEQ(SLICE(d6_154, word16, 16), 0x0000))
// DataOut: a1 a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l000025E8:
	word32 d4_203 = __swap(d5_153 - __swap(d7_12) *u (word16) d1_183)
	word32 d2_197 = d1_183 *u (word16) d7_12
	d0_144 = SEQ(SLICE(d0_144, word16, 16), (word16) d4_203)
	word32 d4_209 = SEQ(SLICE(d4_203, word16, 16), (word16) d6_187)
	branch (word16) d0_144 != 0x0000 l00002608
// DataOut: a1 a2 a3 a5 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002600:
	branch d2_197 - d4_209 <=u 0x00000000 l00002608
// DataOut: a1 a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002608:
	word32 d6_218 = __swap(d1_183)
	word32 d3_224 = __swap(d6_218)
	word32 d4_226 = __swap(d7_12)
	word32 d5_225 = d7_12 *u (word16) d3_224
	word32 d6_230 = __swap(d6_218 *u (word16) d7_12)
	word16 v56_231 = (word16) (d6_230 + d5_225)
	word32 d2_227 = d6_218 *u (word16) d4_226
	word32 d6_233 = SEQ(SLICE(d6_230, word16, 16), v56_231)
	word32 d3_228 = d3_224 *u (word16) d4_226
	word16 v60_239 = (word16) (d6_233 + d2_227)
	word32 d3_238 = SEQ(SLICE(d3_228, word16, 16), (word16) d3_228 + (v56_231 <u 0x0000))
	word32 d6_260 = d6_154 - __swap(SEQ(SLICE(d6_233, word16, 16), v60_239))
	word32 d5_263 = d5_153 - ((__swap(SEQ(SLICE(d5_225, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d2_227, word16, 16), 0x0000))) + SEQ(SLICE(d3_238, word16, 16), (word16) d3_238 + (v60_239 <u 0x0000))) - (d6_260 <u 0x00000000)
	branch d5_263 >=u 0x00000000 l00002660
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l0000264A:
	d6_260 = d6_260 + SEQ(SLICE(__swap(d7_12), word16, 16), 0x0000)
	d1_183 = d1_183 - 0x00000001
	d5_263 = d5_263 + (d6_260 <u 0x00000000) + __swap(SEQ(SLICE(d7_12, word16, 16), 0x0000))
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002660:
	branch bLoc26_142 != 0x00 l0000267C
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0028(32)

l0000267C:
	word32 d6_300 = __swap(SEQ(SLICE(d6_260, word16, 16), (word16) d5_263))
	d0 = SEQ(SLICE(dwLoc24, word16, 16), (word16) d1_183)
	word32 d5_301 = __swap(d5_263)
	word32 d7_304 = SEQ(SLICE(d7_12, word16, 16), v41_156)
	branch v41_156 == 0x0000 l00002696
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32)

l0000268C:
	word32 d7_329 = SEQ(SLICE(d7_304, word16, 16), (word16) d7_304 - 0x0001)
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32)

l0000268E:
	d5_301 = d5_301 >>u 0x00000001
	word16 v87_340 = SLICE(d7_329, word16, 0)
	d6_300 = __rcr(d6_300, 0x00000001, (bool) cond(d5_301))
	d7_329 = DPB(d7_329, v87_340 - 1, 0)
	branch v87_340 != 0x0000 l0000268E
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32)

l00002696:
	word32 d1_314
	*d1Out = d6_300
	word32 d2_317
	*d2Out = d2_95
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002666:
	word32 d5_280 = __swap(d5_263)
	word32 d6_281 = __swap(d6_260)
	d5_153 = SEQ(SLICE(d5_280, word16, 16), (word16) d6_281)
	d6_154 = SEQ(SLICE(d6_281, word16, 16), 0x0000)
	bLoc26_142 = true
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002604:
	d1_183 = d1_183 - 0x00000001
// DataOut: a1 a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002586:
	word32 d0_101 = __swap(d0)
	word32 d1_102 = __swap(d1)
	word32 d0_105 = SEQ(SLICE(d0_101, word16, 16), (word16) d1_102)
	uint16 v19_107 = (uint16) (d0_105 /u (uint16) d2)
	word32 d0_116 = SEQ(SLICE(DPB(DPB(d0_105, (uint16) (d0_105 % (uint16) d2), 16), v19_107, 0), word16, 16), (word16) __swap(d1_102))
	uint16 v26_118 = (uint16) (d0_116 /u (uint16) d2)
	word32 d2_124 = SEQ(SLICE(__swap((uint32) (uint16) v19_107), word16, 16), v26_118)
	*d2Out = d2_124
	word32 d1_128
	*d1Out = __swap(SEQ(SLICE(DPB(DPB(d0_116, (uint16) (d0_116 % (uint16) d2), 16), v26_118, 0), word16, 16), 0x0000))
	d0 = d2_124
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 d2:<invalid> -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002566:
	branch d1 == 0x00000000 l0000269E
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l0000256C:
	branch d2 - d1 >u 0x00000000 l0000269E
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002572:
	word32 d1_64
	d0 = fn00002716(d1, d2, d2, out d1_64)
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l0000269E:
	return d0
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:<invalid> d0:<invalid> d1:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d3:d3 a1:a1 d4:d4 a0:a0 -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7

fn00002558_exit:
// DataOut: d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp d7:d7 d0:<invalid> d1:<invalid> d6:d6 d5:d5 d2:<invalid> d3:d3 a1:a1 d4:d4 a0:a0 -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7



word32 fn000026E4(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
// Stack args: Stack +0004(32) Stack +0008(32)
fn000026E4_entry:
// DataOut: a2 a3 a5 a6 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l000026E4:
	branch dwArg04 > 0x00000000 l00002704
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00002704:
	branch dwArg08 > 0x00000000 l00002706_thunk_fn00002716
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l00002706_thunk_fn00002716:
	word32 d1_48
	return fn00002716(dwArg04, dwArg08, d2, out d1_48)
// DataOut: a2 a3 a5 a6 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l00002708:
	word32 d1_44
	return -fn00002716(dwArg04, -dwArg08, d2, out d1_44)
// DataOut: a2 a3 a5 a6 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l000026EE:
	word32 d0_20 = -dwArg04
	branch dwArg08 > 0x00000000 l000026FC
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l000026FC:
	word32 d1_33
	return -fn00002716(d0_20, dwArg08, d2, out d1_33)
// DataOut: a2 a3 a5 a6 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l000026F4:
	word32 d1_29
	return fn00002716(d0_20, -dwArg08, d2, out d1_29)
// DataOut: a2 a3 a5 a6 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

fn000026E4_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>



word32 fn00002716(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0 d1 d2
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn00002716_entry:
// DataOut: a2 a3 a5 a6 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002716:
	word32 d1_103 = __swap(d1)
	word16 v10_8 = (word16) d1_103
	word32 d2_10 = SEQ(SLICE(d2, word16, 16), v10_8)
	branch v10_8 != 0x0000 l0000273C
// DataOut: a2 a3 a5 a6 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000273C:
	word32 d3_102 = 16
	branch (word16) d1_103 >=u 0x0080 l0000274A
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d1:<invalid> d2:<invalid> -4(fp):d2
// LocalsOut: fp(32)

l00002746:
	d1_103 = __rol(d1_103, 0x00000008)
	d3_102 = 0x00000008
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:16 -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l0000274A:
	branch (word16) d1_103 >=u 0x0800 l00002754
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l00002750:
	d1_103 = __rol(d1_103, 0x00000004)
	d3_102 = SEQ(SLICE(d3_102, word16, 16), (word16) d3_102 - 0x0004)
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l00002754:
	branch (word16) d1_103 >=u 0x2000 l0000275E
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l0000275A:
	d1_103 = __rol(d1_103, 0x00000002)
	d3_102 = SEQ(SLICE(d3_102, word16, 16), (word16) d3_102 - 0x0002)
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l0000275E:
	branch (word16) d1_103 < 0x0000 l00002766
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l00002762:
	d1_103 = __rol(d1_103, 0x00000001)
	d3_102 = SEQ(SLICE(d3_102, word16, 16), (word16) d3_102 - 0x0001)
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l00002766:
	word32 d0_107 = d0 >>u d3_102
	word32 d2_111 = SEQ(SLICE(__swap(SEQ(SLICE(d2_10, word16, 16), (word16) d0)), word16, 16), 0x0000) >>u d3_102
	uint16 v51_114 = (uint16) (d0_107 /u (uint16) d1_103)
	word32 d3_119 = SEQ(SLICE(__swap(d3_102), word16, 16), v51_114)
	word32 d1_126 = __swap(d1_103)
	word32 d0_128 = SEQ(SLICE(DPB(DPB(d0_107, (uint16) (d0_107 % (uint16) d1_103), 16), v51_114, 0), word16, 16), (word16) d2_111) - SEQ(SLICE(d2_111, word16, 16), (word16) d3_119) *u (word16) d1_126
	branch d0_128 >=u 0x00000000 l00002788
// DataOut: a2 a3 a5 a6 d0 d1 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l00002782:
	d3_119 = SEQ(SLICE(d3_119, word16, 16), (word16) d3_119 - 0x0001)
	d0_128 = d0_128 + d1_126
// DataOut: a2 a3 a5 a6 d0 d3 d4 d5 d6 d7
// DataOut (flags): C
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l00002786:
	branch d0_128 >=u 0x00000000 l00002786
// DataOut: a2 a3 a5 a6 d0 d3 d4 d5 d6 d7
// DataOut (flags): C
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l00002788:
	word32 d1_150
	*d1Out = __swap(__rol(d0_128, __swap(d3_119)))
	return (uint32) (uint16) (word16) d3_119
// DataOut: a2 a3 a5 a6 d0 d1 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> -8(fp):d3 -4(fp):d2

l0000271E:
	word32 d0_30 = __swap(d0)
	word32 d1_31 = __swap(d1_103)
	word16 v14_33 = (word16) d0_30
	word32 d2_35 = SEQ(SLICE(__swap(d2_10), word16, 16), v14_33)
	branch v14_33 == 0x0000 l0000272C
// DataOut: a2 a3 a5 a6 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d1:<invalid> d2:<invalid> -4(fp):d2

l00002728:
	uint16 v17_69 = (uint16) (d2_35 /u (uint16) d1_31)
	d2_35 = DPB(DPB(d2_35, (uint16) (d2_35 % (uint16) d1_31), 16), v17_69, 0)
	d0_30 = SEQ(SLICE(d0_30, word16, 16), v17_69)
// DataOut: a2 a3 a5 a6 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d1:<invalid> d2:<invalid> d0:<invalid> -4(fp):d2

l0000272C:
	word32 d0_40 = __swap(d0_30)
	word32 d2_43 = SEQ(SLICE(d2_35, word16, 16), (word16) d0_40)
	uint16 v34_45 = (uint16) (d2_43 /u (uint16) d1_31)
	word32 d1_54
	*d1Out = SEQ(SLICE(d1_31, word16, 16), (word16) __swap(DPB(DPB(d2_43, (uint16) (d2_43 % (uint16) d1_31), 16), v34_45, 0)))
	return SEQ(SLICE(d0_40, word16, 16), v34_45)
// DataOut: a2 a3 a5 a6 d0 d1 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d1:<invalid> d2:<invalid> d0:<invalid> -4(fp):d2

fn00002716_exit:
// DataOut: d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d1:<invalid> d2:d2 d0:<invalid> d3:d3 -8(fp):d3 -4(fp):d2



word32 fn0000279C(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn0000279C_entry:
// DataOut: a2 a3 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l0000279C:
	word32 d1_139 = dwArg08
	word32 d3_104 = dwArg10
	branch dwArg0C != 0x00000000 l000027EE
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000027EE:
	branch dwArg04 - dwArg0C <u 0x00000000 l000028A8
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027F4:
	word32 d4_110 = 24
	word32 d6_111 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_111 != 0x00 l00002812
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027FE:
	d4_110 = 16
	d6_111 = __rol(d6_111, 0x00000008)
	branch (byte) d6_111 != 0x00 l00002812
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:24 -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002806:
	d4_110 = 8
	d6_111 = __rol(d6_111, 0x00000008)
	branch (byte) d6_111 != 0x00 l00002812
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:16 -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l0000280E:
	d4_110 = 0
	d6_111 = SEQ(SLICE(d6_111, word24, 8), (byte) dwArg0C)
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:8 -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002812:
	word32 d4_129 = SEQ(SLICE(d4_110, word24, 8), (byte) d4_110 + Mem0[0x00003ED0 + (int32) ((int16) SEQ(SLICE(d6_111, word16, 16), (word16) d6_111 & 0x00FF)):byte])
	word32 d5_131 = 32 - d4_129
	branch d5_131 != 0x00000000 l00002834
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002834:
	word32 d1_162
	word32 d2_163
	word32 d0_164 = fn00002558(dwArg04 >>u d4_129, dwArg04 << d5_131 | dwArg08 >>u d4_129, dwArg0C << d5_131 | dwArg10 >>u d4_129, out d1_162, out d2_163)
	word32 d3_151 = dwArg10 << d5_131
	word32 d7_173 = __swap(d0_164)
	word32 d6_175 = __swap(d3_151)
	word32 d3_174 = d3_151 *u (word16) d7_173
	word32 d2_179 = __swap(d0_164 *u (word16) d3_151)
	word16 v36_180 = (word16) (d2_179 + d3_174)
	word32 d4_176 = d0_164 *u (word16) d6_175
	word32 d2_182 = SEQ(SLICE(d2_179, word16, 16), v36_180)
	word16 v40_188 = (word16) (d2_182 + d4_176)
	word32 d7_177 = d7_173 *u (word16) d6_175
	word32 d2_196 = __swap(SEQ(SLICE(d2_182, word16, 16), v40_188))
	word32 d7_187 = SEQ(SLICE(d7_177, word16, 16), (word16) d7_177 + (v36_180 <u 0x0000))
	word32 d6_159 = dwArg08 << d5_131
	word32 d3_204 = __swap(SEQ(SLICE(d3_174, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_176, word16, 16), 0x0000)) + SEQ(SLICE(d7_187, word16, 16), (word16) d7_187 + (v40_188 <u 0x0000))
	word32 v49_207 = d1_162 - d2_196
	branch v49_207 <u 0x00000000 l00002890
// DataOut: a0 a1 a2 a3 a5 d0 d1 d2 d3 d5
// DataOut (flags): Z
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l0000288A:
	branch v49_207 != 0x00000000 l00002894
// DataOut: a0 a1 a2 a3 a5 d0 d1 d2 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l0000288C:
	branch d6_159 - d3_204 >=u 0x00000000 l00002894
// DataOut: a0 a1 a2 a3 a5 d0 d1 d2 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002890:
	d3_204 = d3_204 - d3_151
	d2_196 = d2_196 - d2_163 - (d3_204 <u 0x00000000)
// DataOut: a0 a2 a3 a5 d1 d2 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002894:
	word32 d6_223 = d6_159 - d3_204
	d1_139 = d1_162 - d2_196 - (d6_223 <u 0x00000000) << 32 - d5_131 | d6_223 >>u d5_131
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002826:
	branch dwArg0C - dwArg04 <u 0x00000000 l0000282E
// DataOut: a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l0000282A:
	branch dwArg10 - dwArg08 >u 0x00000000 l000028A8
// DataOut: a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l0000282E:
	d1_139 = dwArg08 - dwArg10
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00003ED0 d5:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027B4:
	branch dwArg04 - dwArg10 >=u 0x00000000 l000027C6
// DataOut: a0 a2 a3 a5 d0 d1 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027C6:
	branch dwArg10 != 0x00000000 l000027D2
// DataOut: a0 a2 a3 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027CA:
	d3_104 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut: a0 a2 a3 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027D2:
	word32 d1_87
	word32 d2_88
	fn00002558(0, dwArg04, d3_104, out d1_87, out d2_88)
	word32 d2_94
	fn00002558(d1_87, dwArg08, d2_88, out d1_139, out d2_94)
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d4:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027B8:
	word32 d2_64
	fn00002558(dwArg04, dwArg08, dwArg10, out d1_139, out d2_64)
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000028A8:
	return d1_139
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d4:<invalid> d6:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7

fn0000279C_exit:
// DataOut: d1
// DataOut (flags): 
// SymbolicIn: a7:fp d1:<invalid> d0:<invalid> a0:<invalid> d3:d3 d2:d2 d4:d4 d5:d5 d6:d6 d7:d7 a1:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7



void fn00002B98(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a7
// Stack args: Stack +0004(32)
fn00002B98_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002B98:
	branch dwArg04 == 0x00000000 l00002BB0
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002BB0:
	word32 a2_36 = Mem0[0x00003FFC:word32]
	branch a2_36 == 0x00000000 l00002BD6
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00002BBA:
	branch (Mem0[a2_36 + 24:word32] & 2) == 0x00000000 l00002BCC
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00002BC2:
	word32 a0_70
	word32 a1_71
	word32 a5_72
	fn00001FA4(a2_36, out a0_70, out a1_71, out a5_72)
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00002BCC:
	a2_36 = Mem0[a2_36 + 12:word32]
	branch a2_36 != 0x00000000 l00002BBA
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00002BA4:
	word32 a0_27
	word32 a1_28
	word32 a5_29
	fn00001FA4(dwArg04, out a0_27, out a1_28, out a5_29)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> -4(fp):a2

l00002BD6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2

fn00002B98_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:0 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2



void fn00002BDC(word32 d0, word32 d1, word32 d7, word32 a1, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1 a5 d0 d1 d7
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
// Stack args: Stack +0004(32)
fn00002BDC_entry:
// DataOut: a1 a5 d0 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002BDC:
	fn00002C28(d0, d1, d7, a1, a5, Mem0[0x00003FF0:word32], dwArg04, fp + 8)
	return
// DataOut: d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00002BDC_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):fp + 8



word32 fn00002BF8(byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d0
// Trashed: CVZNX a0 d0
// Preserved: a2 a7
// Stack args: Stack +0007(8) Stack +0008(32)
fn00002BF8_entry:
// DataOut: a1 a3 a4 a5 a6 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0007(8) Stack +0008(32)

l00002BF8:
	word32 d0_13 = dwArg08
	branch dwArg08 == 0x00000000 l00002C22
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: Stack +0007(8)

l00002C04:
	d0_13 = Mem0[dwArg08 + 4:word32]
	branch d0_13 - Mem0[dwArg08 + 8:word32] >=u 0x00000000 l00002C16
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> -4(fp):a2
// LocalsOut: Stack +0007(8)

l00002C0E:
	Mem37[Mem0[dwArg08 + 4:word32]:byte] = bArg07
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> -4(fp):a2

l00002C16:
	Mem29[dwArg08 + 20:word32] = Mem0[dwArg08 + 20:word32] + 0x00000001
	Mem32[dwArg08 + 4:word32] = Mem29[dwArg08 + 4:word32] - 0x00000001
// DataOut: a1 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> -4(fp):a2

l00002C22:
	return d0_13
// DataOut: a1 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> -4(fp):a2

fn00002BF8_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:<invalid> a0:<invalid> -4(fp):a2



void fn00002C28(word32 d0, word32 d1, word32 d7, word32 a1, word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1 a5 d0 d1 d7
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d1 d2 d3 d4 d5 d6 d7
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32)
fn00002C28_entry:
// DataOut: a1 a5 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l00002C28:
	word32 a7_149 = fp + -120
	word32 d2_139 = dwArg0C
	word32 a4_146 = dwArg08
	word32 a2_1036 = dwArg04
	word32 d4_140 = 0
	word32 d5_1256 = 0
	branch Mem0[dwArg08:byte] == 0x00 l00003C2A
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00002C4A:
	word32 d3_165
	word32 d3_150 = 0
	branch Mem0[a4_146:byte] != 0x25 l00003B28
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B28:
	word32 d0_3020 = (uint32) (uint8) Mem0[0x000028B1 + (SEQ(SLICE(d0, word24, 8), Mem0[a4_146:byte]) & 0x000000FF):byte]
	d0 = d0_3020 & 0x00000008
	branch (d0_3020 & 0x00000008) == 0x00000000 l00003BB4
// DataOut: a2 a4 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BB4:
	word32 d0_3152
	word32 a0_3141 = a2_1036 + 24
	Mem3143[a0_3141:word32] = Mem0[a0_3141:word32] | 0x00000001
	word32 a0_3144 = a2_1036 + 20
	word32 v126_3145 = Mem3143[a0_3144:word32] - 0x00000001
	Mem3146[a0_3144:word32] = v126_3145
	CV = cond(v126_3145) (alias)
	branch v126_3145 < 0x00000000 l00003BE6
// DataOut: a2 a4 a5 a7 d0 d1 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BE6:
	word32 a7_3214 = a7_149 - 4
	Mem3216[a7_3214:word32] = a2_1036
	d0_3152 = fn00003CCC(dwArg00, out d1, out a1, out a5)
	Mem3223[a7_3214 + 48:word32] = d0_3152
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BC6:
	a1 = a2_1036 + 4
	word32 a0_3187 = Mem3146[a1:word32]
	word32 a7_3188 = a7_149 - 4
	Mem3190[a7_3188:word32] = a2_1036
	Mem3194[a1:word32] = a0_3187 + 1
	a2_1036 = Mem3194[a7_3188:word32]
	d0_3152 = SEQ(SLICE(d0_3020 & 0x00000008, word24, 8), Mem3194[a0_3187:byte])
	Mem3203[a7_3188:word32] = d1
	Mem3209[a7_3188 + 48:word32] = (uint32) (uint8) (byte) d0_3152
	d1 = Mem3209[a7_3188:word32]
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BF4:
	d0 = (int32) (int16) (int8) SEQ(SLICE(d0_3152, word24, 8), Mem3146[a4_146:byte])
	d5_1256 = Mem3146[a7_149 + 44:word32]
	d3_165 = 0x00000001
	d4_140 = d4_140 + 0x00000001
	branch d0 - Mem3146[a7_149 + 44:word32] == 0x00000000 l00003C1E
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C08:
	branch d5_1256 == 0xFFFFFFFF l00003C1A
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0x00000001 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C10:
	word32 a7_3177 = a7_149 - 4
	Mem3179[a7_3177:word32] = a2_1036
	Mem3182[a7_3177 - 4:word32] = d5_1256
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0x00000001 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C1A:
	d3_165 = 0x00000000
	d4_140 = d4_140 - 0x00000001
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0x00000001 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B44:
	word32 d0_3068
	word32 a0_3058 = a2_1036 + 24
	Mem3060[a0_3058:word32] = Mem0[a0_3058:word32] | 0x00000001
	word32 a0_3061 = a2_1036 + 20
	word32 v105_3062 = Mem3060[a0_3061:word32] - 0x00000001
	Mem3063[a0_3061:word32] = v105_3062
	CV = cond(v105_3062) (alias)
	branch v105_3062 < 0x00000000 l00003B6E
// DataOut: a2 a4 a5 a7 d0 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B6E:
	Mem3132[a7_149 - 4:word32] = a2_1036
	word32 d1_3134
	d0_3068 = fn00003CCC(dwArg00, out d1_3134, out a1, out a5)
	d1 = d0_3068
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B56:
	a1 = a2_1036 + 4
	word32 a0_3111 = Mem3063[a1:word32]
	word32 a7_3112 = a7_149 - 4
	Mem3114[a7_3112:word32] = a2_1036
	Mem3118[a1:word32] = a0_3111 + 1
	d0_3068 = SEQ(SLICE(d0, word24, 8), Mem3118[a0_3111:byte])
	a2_1036 = Mem3118[a7_3112:word32]
	d1 = (uint32) (uint8) (byte) d0_3068
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B7A:
	word32 d0_3086 = (uint32) (uint8) Mem3063[0x000028B1 + (SEQ(SLICE(d0_3068, word24, 8), (byte) d1) & 0x000000FF):byte]
	d5_1256 = d1
	d4_140 = d4_140 + 0x00000001
	d0 = d0_3086 & 0x00000008
	branch (d0_3086 & 0x00000008) != 0x00000000 l00003B44
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B9C:
	branch d1 == 0xFFFFFFFF l00003BAE
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BA4:
	word32 a7_3101 = a7_149 - 4
	Mem3103[a7_3101:word32] = a2_1036
	Mem3106[a7_3101 - 4:word32] = d1
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BAE:
	d4_140 = d4_140 - 0x00000001
	d3_165 = 1
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C1E:
	a4_146 = a4_146 + 1
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002C54:
	Mem186[a7_149 + 72:byte] = 0x69
	Mem187[a7_149 + 73:byte] = 0x00
	word32 a3_188 = a4_146 + 1
	word32 d0_198 = (uint32) (uint8) Mem187[0x000028B1 + (uint32) ((uint8) Mem187[a3_188:byte]):byte]
	word32 d6_184 = -1
	d0 = d0_198 & 0x00000004
	branch (d0_198 & 0x00000004) == 0x00000000 l00002CD8
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002C7C:
	word32 d0_2956 = (uint32) (uint8) Mem187[0x000028B1 + (uint32) ((uint8) Mem187[a3_188:byte]):byte]
	d6_184 = 0
	d0 = d0_2956 & 0x00000004
	branch (d0_2956 & 0x00000004) == 0x00000000 l00002CD8
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:-1 a3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002C96:
	word32 a7_2967 = a7_149 - 4
	Mem2969[a7_2967:word32] = d2_139
	word32 d1_2974 = __swap(10) *u (word16) d6_184
	word32 d0_2983 = (word16) d6_184 *u 10 + SEQ(SLICE(__swap(SEQ(SLICE(d1_2974, word16, 16), (word16) (d1_2974 + __swap(d6_184) *u 0x000A))), word16, 16), 0x0000)
	a3_188 = a3_188 + 1
	word32 d1_2991 = (uint32) (uint8) Mem2969[a3_188:byte]
	word32 d0_3005 = (uint32) (uint8) Mem2969[0x000028B1 + (uint32) ((uint8) Mem2969[a3_188:byte]):byte]
	d2_139 = Mem2969[a7_2967:word32]
	d1 = d1_2991 - 0x00000030
	d6_184 = d1_2991 - 0x00000030 + d0_2983
	d0 = d0_3005 & 0x00000004
	branch (d0_3005 & 0x00000004) != 0x00000000 l00002C96
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002CD8:
	branch Mem187[a3_188:byte] == 0x68 l00002D02
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002CDE:
	branch Mem187[a3_188:byte] == 0x6C l00002D02
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002CE4:
	branch Mem187[a3_188:byte] == 0x4C l00002D02
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002CEA:
	branch Mem187[a3_188:byte] == 0x7A l00002D02
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002CF0:
	branch Mem187[a3_188:byte] == 0x6A l00002D02
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002CF6:
	branch Mem187[a3_188:byte] == 0x74 l00002D02
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002CFC:
	branch Mem187[a3_188:byte] != 0x2A l00002D6A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D02:
	d7 = SEQ(SLICE(d7, word24, 8), Mem187[a7_149 + 73:byte])
	d1 = SEQ(SLICE(d1, word24, 8), Mem187[a7_149 + 72:byte])
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D0A:
	branch Mem187[a3_188:byte] != 0x2A l00002D14
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D14:
	branch (byte) d1 != 0x68 l00002D24
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D1A:
	branch Mem187[a3_188:byte] != 0x68 l00002D24
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D24:
	branch (byte) d1 != 0x6C l00002D34
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D2A:
	branch Mem187[a3_188:byte] != 0x6C l00002D34
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D34:
	d1 = SEQ(SLICE(d1, word24, 8), Mem187[a3_188:byte])
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D30:
	d1 = 1
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D20:
	d1 = 2
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D10:
	d7 = 1
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D36:
	a3_188 = a3_188 + 1
	branch Mem187[a3_188:byte] == 0x68 l00002D0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D3E:
	branch Mem187[a3_188:byte] == 0x6C l00002D0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D44:
	branch Mem187[a3_188:byte] == 0x4C l00002D0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D4A:
	branch Mem187[a3_188:byte] == 0x7A l00002D0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D50:
	branch Mem187[a3_188:byte] == 0x6A l00002D0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D56:
	branch Mem187[a3_188:byte] == 0x74 l00002D0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D5C:
	branch Mem187[a3_188:byte] == 0x2A l00002D0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D62:
	Mem2901[a7_149 + 72:byte] = (byte) d1
	Mem2903[a7_149 + 73:byte] = (byte) d7
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D6A:
	branch Mem187[a7_149 + 72:byte] != 0x6A l00002D78
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D72:
	Mem2860[a7_149 + 72:byte] = 0x01
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D78:
	branch Mem187[a7_149 + 72:byte] != 0x74 l00002D86
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D80:
	Mem2857[a7_149 + 72:byte] = 0x69
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D86:
	branch Mem187[a7_149 + 72:byte] != 0x7A l00002D94
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D8E:
	Mem2854[a7_149 + 72:byte] = 0x6C
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D94:
	byte v83_230 = Mem187[a3_188:byte]
	word32 a3_1685 = a3_188 + 1
	d7 = SEQ(SLICE(d7, word24, 8), v83_230)
	branch v83_230 == 0x00 l00002E0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D98:
	branch (byte) d7 == 0x25 l00002E0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002D9E:
	branch (byte) d7 == 0x63 l00002E0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002DA4:
	branch (byte) d7 == 0x6E l00002E0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002DAA:
	branch (byte) d7 == 0x5B l00002E0A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002DB0:
	word32 d0_2796
	word32 a0_2786 = a2_1036 + 24
	Mem2788[a0_2786:word32] = Mem187[a0_2786:word32] | 0x00000001
	word32 a0_2789 = a2_1036 + 20
	word32 v90_2790 = Mem2788[a0_2789:word32] - 0x00000001
	Mem2791[a0_2789:word32] = v90_2790
	CV = cond(v90_2790) (alias)
	branch v90_2790 < 0x00000000 l00002DDA
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002DDA:
	Mem2844[a7_149 - 4:word32] = a2_1036
	word32 d1_2846
	d0_2796 = fn00003CCC(dwArg00, out d1_2846, out a1, out a5)
	d1 = d0_2796
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002DC2:
	a1 = a2_1036 + 4
	word32 a0_2823 = Mem2791[a1:word32]
	word32 a7_2824 = a7_149 - 4
	Mem2826[a7_2824:word32] = a2_1036
	Mem2830[a1:word32] = a0_2823 + 1
	d0_2796 = SEQ(SLICE(d0, word24, 8), Mem2830[a0_2823:byte])
	a2_1036 = Mem2830[a7_2824:word32]
	d1 = (uint32) (uint8) (byte) d0_2796
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002DE6:
	word32 d0_2814 = (uint32) (uint8) Mem2791[0x000028B1 + (SEQ(SLICE(d0_2796, word24, 8), (byte) d1) & 0x000000FF):byte]
	d5_1256 = d1
	d4_140 = d4_140 + 0x00000001
	d0 = d0_2814 & 0x00000008
	branch (d0_2814 & 0x00000008) != 0x00000000 l00002DB0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E08:
	d3_150 = 1
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E0A:
	word32 d1_253 = SEQ(SLICE(d1, word24, 8), (byte) d7)
	byte v148_254 = (byte) d1_253 - 0x25
	word32 d1_256 = SEQ(SLICE(d1_253, word24, 8), v148_254)
	branch v148_254 == 0x00 l00003256
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003256:
	word32 a0_2680 = a2_1036 + 24
	Mem2682[a0_2680:word32] = Mem187[a0_2680:word32] | 0x00000001
	word32 a0_2683 = a2_1036 + 20
	word32 v159_2684 = Mem2682[a0_2683:word32] - 0x00000001
	Mem2685[a0_2683:word32] = v159_2684
	CV = cond(v159_2684) (alias)
	branch v159_2684 < 0x00000000 l00003288
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003288:
	word32 a7_2748 = a7_149 - 4
	Mem2750[a7_2748:word32] = a2_1036
	d0 = fn00003CCC(dwArg00, out d1, out a1, out a5)
	Mem2757[a7_2748 + 48:word32] = d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003268:
	a1 = a2_1036 + 4
	word32 a0_2721 = Mem2685[a1:word32]
	word32 a7_2722 = a7_149 - 4
	Mem2724[a7_2722:word32] = a2_1036
	Mem2728[a1:word32] = a0_2721 + 1
	a2_1036 = Mem2728[a7_2722:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem2728[a0_2721:byte])
	Mem2737[a7_2722:word32] = d1_256
	Mem2743[a7_2722 + 48:word32] = (uint32) (uint8) (byte) d0
	d1 = Mem2743[a7_2722:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003296:
	d5_1256 = Mem2685[a7_149 + 44:word32]
	d3_165 = d3_150 + 0x00000001
	d4_140 = d4_140 + 0x00000001
	branch Mem2685[a7_149 + 44:word32] == 0x00000025 l00003B22
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032AA:
	branch d5_1256 == 0xFFFFFFFF l000032BC
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032B2:
	word32 a7_2711 = a7_149 - 4
	Mem2713[a7_2711:word32] = a2_1036
	Mem2716[a7_2711 - 4:word32] = d5_1256
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032BC:
	d3_165 = d3_165 - 0x00000001
	d4_140 = d4_140 - 0x00000001
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E14:
	byte v150_285 = (byte) d1_256 - 0x36
	word32 d1_287 = SEQ(SLICE(d1_256, word24, 8), v150_285)
	branch v150_285 == 0x00 l00002F52
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F52:
	Mem2209[a7_149 + 44:byte] = 0x00
	branch Mem2209[a3_1685:byte] != 0x5E l00002F64
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F5C:
	Mem2677[a7_149 + 44:byte] = 0x01
	a3_1685 = a3_1685 + 1
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F64:
	Mem2214[a7_149 + 52:word32] = 0x00000000
	d7 = SEQ(SLICE(d7, word24, 8), Mem2214[a7_149 + 44:byte])
	word32 d1_2218 = Mem2214[a7_149 + 52:word32]
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F70:
	word32 d5_2229
	branch (byte) d7 == 0x00 l00002F7C
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F7C:
	d5_2229 = 0
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F74:
	d5_2229 = 0x000000FF
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F7E:
	Mem2232[a5 + d1_2218:byte] = (byte) d5_2229
	d1_2218 = d1_2218 + 0x00000001
	branch d1_2218 <u 0x00000020 l00002F70
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F90:
	Mem2239[a7_149 + 132:word32] = d2_139
	Mem2241[a7_149 + 44:byte] = (byte) d7
	word32 d2_2244 = SEQ(SLICE(d2_139, word24, 8), Mem2241[a7_149 + 44:byte])
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F9C:
	branch Mem2241[a3_1685:byte] == 0x00 l00003012
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FA0:
	a3_1685 = a3_1685 + 1
	d1_2218 = SEQ(SLICE(d1_2218, word24, 8), Mem2241[a3_1685:byte])
	branch Mem2241[a3_1685:byte] != 0x2D l00002FB4
// DataOut: a2 a3 a5 a7 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FA8:
	branch (byte) d1_2218 - Mem2241[a3_1685 + 1:byte] >=u 0x00 l00002FB4
// DataOut: a2 a3 a5 a7 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FB4:
	d7 = SEQ(SLICE(d7, word24, 8), (byte) d1_2218)
// DataOut: a2 a3 a5 a7 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FAE:
	a3_1685 = a3_1685 + 2
	d7 = SEQ(SLICE(d7, word24, 8), Mem2241[a3_1685 + 1:byte])
// DataOut: a2 a3 a5 a7 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FB6:
	word32 d5_2581 = (uint32) (uint8) (byte) d1_2218
	d0 = (uint32) (uint8) (byte) d7
	branch d0 - d5_2581 <u 0x00000000 l0000300C
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FC2:
	branch (byte) d2_2244 == 0x00 l00002FE6
// DataOut: a2 a3 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FE6:
	word32 a0_2643 = a7_149 + 78 + (d5_2581 >>u 0x00000003)
	d1_2218 = (uint32) (uint8) Mem2241[a0_2643:byte]
	Mem2656[a0_2643:byte] = (byte) (1 << (d5_2581 & 7) | d1_2218)
// DataOut: a2 a3 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FC6:
	word32 a0_2624 = a7_149 + 78 + (d5_2581 >>u 0x00000003)
	d1_2218 = (uint32) (uint8) Mem2241[a0_2624:byte]
	Mem2638[a0_2624:byte] = (byte) (~(1 << (d5_2581 & 7)) & d1_2218)
// DataOut: a2 a3 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003002:
	d5_2581 = d5_2581 + 0x00000001
	d0 = (uint32) (uint8) (byte) d7
	branch d0 - d5_2581 >=u 0x00000000 l00002FC2
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000300C:
	branch Mem2241[a3_1685:byte] != 0x5D l00002F9C
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003012:
	word32 a6_2274
	d2_139 = Mem2241[a7_149 + 132:word32]
	a3_1685 = a3_1685 + 1
	branch Mem2241[a7_149 + 73:byte] != 0x00 l00003032
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003032:
	a6_2274 = 0x00000000
// DataOut: a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000301E:
	word32 d0_2561 = d2_139 + 0x00000003 >>u 0x00000002
	d2_139 = (d0_2561 << 0x00000002) + 0x00000004
	d0 = d0_2561 << 0x00000002
	a6_2274 = Mem2241[d2_139 + -4:word32]
// DataOut: a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003034:
	word32 a0_2275 = a2_1036 + 24
	Mem2277[a0_2275:word32] = Mem2241[a0_2275:word32] | 0x00000001
	word32 a0_2278 = a2_1036 + 20
	word32 v581_2279 = Mem2277[a0_2278:word32] - 0x00000001
	Mem2280[a0_2278:word32] = v581_2279
	CV = cond(v581_2279) (alias)
	branch v581_2279 < 0x00000000 l00003066
// DataOut: a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003066:
	word32 a7_2547 = a7_149 - 4
	Mem2549[a7_2547:word32] = a2_1036
	d0 = fn00003CCC(dwArg00, out d1, out a1, out a5)
	Mem2556[a7_2547 + 48:word32] = d0
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003046:
	a1 = a2_1036 + 4
	word32 a0_2520 = Mem2280[a1:word32]
	word32 a7_2521 = a7_149 - 4
	Mem2523[a7_2521:word32] = a2_1036
	Mem2527[a1:word32] = a0_2520 + 1
	a2_1036 = Mem2527[a7_2521:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem2527[a0_2520:byte])
	Mem2536[a7_2521:word32] = d1_2218
	Mem2542[a7_2521 + 48:word32] = (uint32) (uint8) (byte) d0
	d1 = Mem2542[a7_2521:word32]
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003074:
	d5_1256 = Mem2280[a7_149 + 44:word32]
	word32 d3_2291 = d3_150 + 0x00000001
	word32 d4_2292 = d4_140 + 0x00000001
	branch Mem2280[a7_149 + 44:word32] == 0xFFFFFFFF l00003142
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003088:
	word32 a7_2346 = a7_149 - 4
	Mem2348[a7_2346:word32] = a7_149 + 78
	Mem2351[a7_2346 - 4:word32] = a1
	Mem2353[a7_2346 - 0x00000008:word32] = 0x00000008
	Mem2356[a7_2346 - 0x0000000C:word32] = d5_1256
	d1 = (uint32) (uint8) Mem2356[Mem2356[a7_2346:word32] + fn000026E4(d2_139, dwArg00, dwArg04):byte]
	a1 = Mem2356[a7_2346 - 0x00000004:word32]
	d0 = 1 << (d5_1256 & 7) & d1
	branch d0 == 0x00000000 l00003142
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030B8:
	branch d6_184 - d3_2291 <u 0x00000000 l00003142
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030BE:
	d7 = SEQ(SLICE(d7, word24, 8), Mem2356[a7_2346 + 77:byte])
// DataOut: a2 a3 a5 a6 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030C2:
	branch (byte) d7 != 0x00 l000030C8
// DataOut: a2 a3 a5 a6 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030C6:
	Mem2516[a6_2274:byte] = (byte) d5_1256
	a6_2274 = a6_2274 + 1
// DataOut: a2 a3 a5 a6 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030C8:
	word32 a0_2409 = a2_1036 + 24
	Mem2411[a0_2409:word32] = Mem2356[a0_2409:word32] | 0x00000001
	word32 a0_2412 = a2_1036 + 20
	word32 v607_2413 = Mem2411[a0_2412:word32] - 0x00000001
	Mem2414[a0_2412:word32] = v607_2413
	CV = cond(v607_2413) (alias)
	branch v607_2413 < 0x00000000 l000030F2
// DataOut: a2 a3 a5 a6 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030F2:
	Mem2506[a7_149 - 4:word32] = a2_1036
	word32 d1_2508
	d0 = fn00003CCC(dwArg00, out d1_2508, out a1, out a5)
	d1 = d0
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030DA:
	a1 = a2_1036 + 4
	word32 a0_2485 = Mem2414[a1:word32]
	word32 a7_2486 = a7_149 - 4
	Mem2488[a7_2486:word32] = a2_1036
	Mem2492[a1:word32] = a0_2485 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem2492[a0_2485:byte])
	a2_1036 = Mem2492[a7_2486:word32]
	d1 = (uint32) (uint8) (byte) d0
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030FE:
	d5_1256 = d1
	d3_2291 = d3_2291 + 0x00000001
	d4_2292 = d4_2292 + 0x00000001
	branch d1 == 0xFFFFFFFF l0000313E
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000310C:
	word32 a7_2445 = a7_149 - 4
	Mem2447[a7_2445:word32] = a7_149 + 78
	Mem2450[a7_2445 - 4:word32] = a1
	Mem2452[a7_2445 - 0x00000008:word32] = 0x00000008
	Mem2455[a7_2445 - 0x0000000C:word32] = d1
	d1 = (uint32) (uint8) Mem2455[Mem2455[a7_2445:word32] + fn000026E4(d2_139, dwArg00, dwArg04):byte]
	a1 = Mem2455[a7_2445 - 0x00000004:word32]
	d0 = 1 << (d1 & 7) & d1
	branch d0 == 0x00000000 l0000313E
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000313A:
	branch d6_184 - d3_2291 >=u 0x00000000 l000030C2
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000313E:
	Mem2442[a7_149 + 73:byte] = (byte) d7
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003142:
	branch d5_1256 == 0xFFFFFFFF l00003154
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000314A:
	word32 a7_2336 = a7_149 - 4
	Mem2338[a7_2336:word32] = a2_1036
	Mem2341[a7_2336 - 4:word32] = d5_1256
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003154:
	d3_165 = d3_2291 - 0x00000001
	d4_140 = d4_2292 - 0x00000001
	branch Mem2280[a7_149 + 73:byte] != 0x00 l00003B22
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003160:
	branch d3_165 == 0x00000000 l00003B22
// DataOut: a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003166:
	Mem2331[a6_2274:byte] = 0x00
	Mem2334[a7_149 + 60:word32] = Mem2331[a7_149 + 60:word32] + 0x00000001
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E1C:
	byte v152_290 = (byte) d1_287 - 0x08
	word32 d1_292 = SEQ(SLICE(d1_287, word24, 8), v152_290)
	branch v152_290 == 0x00 l00002E32
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E32:
	branch d6_184 != 0xFFFFFFFF l00002E3C
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E3A:
	d6_184 = 1
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E3C:
	word32 a1_1981
	branch Mem187[a7_149 + 73:byte] != 0x00 l00002E56
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E56:
	a1_1981 = 0x00000000
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E42:
	d0 = d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_139 = d0 + 0x00000004
	a1_1981 = Mem187[d0:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E58:
	word32 a0_1984 = a2_1036 + 24
	Mem1986[a0_1984:word32] = Mem187[a0_1984:word32] | 0x00000001
	word32 a0_1987 = a2_1036 + 20
	Mem1989[a0_1987:word32] = Mem1986[a0_1987:word32] - 0x00000001
	Mem1992[a7_149 + 44:word32] = a1_1981
	CV = DPB(CV, false, 0) (alias)
	branch CV l00002E90
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E90:
	word32 a1_2179 = Mem1992[a7_149 + 44:word32]
	word32 a7_2180 = a7_149 - 4
	Mem2182[a7_2180:word32] = a2_1036
	Mem2184[a7_2180 + 48:word32] = a1_2179
	word32 a1_2187
	d0 = fn00003CCC(dwArg00, out d1, out a1_2187, out a5)
	Mem2191[a7_2180 + 56:word32] = d0
	Mem2194[a7_2180 + 48:word32] = Mem2191[a7_2180 + 48:word32]
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E70:
	word32 a1_2151 = a2_1036 + 4
	word32 a0_2152 = Mem1992[a1_2151:word32]
	word32 a7_2153 = a7_149 - 4
	Mem2155[a7_2153:word32] = a2_1036
	Mem2159[a1_2151:word32] = a0_2152 + 1
	a2_1036 = Mem2159[a7_2153:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem2159[a0_2152:byte])
	Mem2168[a7_2153:word32] = d1_292
	Mem2174[a7_2153 + 56:word32] = (uint32) (uint8) (byte) d0
	d1 = Mem2174[a7_2153:word32]
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002EAE:
	a1 = Mem1992[a7_149 + 44:word32]
	d5_1256 = Mem1992[a7_149 + 52:word32]
	word32 d3_2005 = d3_150 + 0x00000001
	word32 d4_2006 = d4_140 + 0x00000001
	branch Mem1992[a7_149 + 52:word32] == 0xFFFFFFFF l00002F26
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002EC4:
	Mem2058[a7_149 + 44:word32] = a1
	branch d6_184 - d3_2005 <u 0x00000000 l00002F26
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002ECC:
	d7 = SEQ(SLICE(d7, word24, 8), Mem2058[a7_149 + 73:byte])
	word32 a4_2066 = Mem2058[a7_149 + 44:word32]
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002ED4:
	branch (byte) d7 != 0x00 l00002EDA
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002ED8:
	Mem2148[a4_2066:byte] = (byte) d5_1256
	a4_2066 = a4_2066 + 1
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002EDA:
	word32 a0_2087 = a2_1036 + 24
	Mem2089[a0_2087:word32] = Mem2058[a0_2087:word32] | 0x00000001
	word32 a0_2090 = a2_1036 + 20
	word32 v310_2091 = Mem2089[a0_2090:word32] - 0x00000001
	Mem2092[a0_2090:word32] = v310_2091
	CV = cond(v310_2091) (alias)
	branch v310_2091 < 0x00000000 l00002F04
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F04:
	Mem2138[a7_149 - 4:word32] = a2_1036
	word32 d1_2140
	d0 = fn00003CCC(dwArg00, out d1_2140, out a1, out a5)
	d1 = d0
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002EEC:
	a1 = a2_1036 + 4
	word32 a0_2117 = Mem2092[a1:word32]
	word32 a7_2118 = a7_149 - 4
	Mem2120[a7_2118:word32] = a2_1036
	Mem2124[a1:word32] = a0_2117 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem2124[a0_2117:byte])
	a2_1036 = Mem2124[a7_2118:word32]
	d1 = (uint32) (uint8) (byte) d0
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F10:
	d5_1256 = d1
	d3_2005 = d3_2005 + 0x00000001
	d4_2006 = d4_2006 + 0x00000001
	branch d1 == 0xFFFFFFFF l00002F22
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F1E:
	branch d6_184 - d3_2005 >=u 0x00000000 l00002ED4
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F22:
	Mem2111[a7_149 + 73:byte] = (byte) d7
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F26:
	branch d5_1256 == 0xFFFFFFFF l00002F38
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F2E:
	word32 a7_2048 = a7_149 - 4
	Mem2050[a7_2048:word32] = a2_1036
	Mem2053[a7_2048 - 4:word32] = d5_1256
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F38:
	d3_165 = d3_2005 - 0x00000001
	d4_140 = d4_2006 - 0x00000001
	branch Mem1992[a7_149 + 73:byte] != 0x00 l00003B22
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F44:
	branch d3_165 == 0x00000000 l00003B22
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F4A:
	Mem2046[a7_149 + 60:word32] = Mem1992[a7_149 + 60:word32] + 0x00000001
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E20:
	byte v154_295 = (byte) d1_292 - 0x0B
	d1 = SEQ(SLICE(d1_292, word24, 8), v154_295)
	branch v154_295 == 0x00 l000032C4
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032C4:
	branch Mem187[a7_149 + 73:byte] != 0x00 l0000335C
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032CC:
	branch Mem187[a7_149 + 72:byte] != 0x01 l000032EE
// DataOut: a1 a2 a3 a5 a7 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032EE:
	branch Mem187[a7_149 + 72:byte] != 0x6C l0000330C
// DataOut: a1 a2 a3 a5 a7 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000330C:
	branch Mem187[a7_149 + 72:byte] != 0x68 l0000332A
// DataOut: a1 a2 a3 a5 a7 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000332A:
	branch Mem187[a7_149 + 72:byte] != 0x02 l00003348
// DataOut: a1 a2 a3 a5 a7 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003348:
	d0 = d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1970[Mem187[d0:word32]:word32] = d4_140
	d2_139 = d0 + 0x00000004
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003332:
	d0 = d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1958[Mem187[d0:word32]:byte] = (byte) d4_140
	d2_139 = d0 + 0x00000004
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003314:
	d0 = d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1943[Mem187[d0:word32]:word16] = (word16) d4_140
	d2_139 = d0 + 0x00000004
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032F6:
	d0 = d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1928[Mem187[d0:word32]:word32] = d4_140
	d2_139 = d0 + 0x00000004
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032D4:
	d0 = d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 a0_1907 = Mem187[d0:word32]
	Mem1909[a0_1907 + 4:word32] = d4_140
	Mem1910[a0_1907:word32] = 0x00000000
	d2_139 = d0 + 0x00000004
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000335C:
	Mem1894[a7_149 + 60:word32] = Mem187[a7_149 + 60:word32] + 0x00000001
	d3_165 = 1
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E28:
	byte v156_300 = (byte) d1 - 0x05
	d1 = SEQ(SLICE(d1, word24, 8), v156_300)
	branch v156_300 == 0x00 l00003170
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003170:
	branch Mem187[a7_149 + 73:byte] != 0x00 l0000318A
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000318A:
	a5 = 0x00000000
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003176:
	d0 = d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_139 = d0 + 0x00000004
	a5 = Mem187[d0:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000318C:
	branch d5_1256 == 0xFFFFFFFF l00003228
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003196:
	word32 d0_1754 = (uint32) (uint8) Mem187[0x000028B1 + (SEQ(SLICE(d0, word24, 8), (byte) d5_1256) & 0x000000FF):byte]
	d0 = d0_1754 & 0x00000008
	branch (d0_1754 & 0x00000008) != 0x00000000 l00003228
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031B2:
	branch d6_184 - d3_150 <u 0x00000000 l00003228
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031B6:
	d7 = SEQ(SLICE(d7, word24, 8), Mem187[a7_149 + 73:byte])
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031BA:
	branch (byte) d7 != 0x00 l000031C0
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031BE:
	Mem1867[a5:byte] = (byte) d5_1256
	a5 = a5 + 1
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031C0:
	word32 a0_1786 = a2_1036 + 24
	Mem1788[a0_1786:word32] = Mem187[a0_1786:word32] | 0x00000001
	word32 a0_1789 = a2_1036 + 20
	word32 v197_1790 = Mem1788[a0_1789:word32] - 0x00000001
	Mem1791[a0_1789:word32] = v197_1790
	CV = cond(v197_1790) (alias)
	branch v197_1790 < 0x00000000 l000031EA
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031EA:
	Mem1857[a7_149 - 4:word32] = a2_1036
	word32 d1_1859
	d0 = fn00003CCC(dwArg00, out d1_1859, out a1, out a5)
	d1 = d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031D2:
	a1 = a2_1036 + 4
	word32 a0_1836 = Mem1791[a1:word32]
	word32 a7_1837 = a7_149 - 4
	Mem1839[a7_1837:word32] = a2_1036
	Mem1843[a1:word32] = a0_1836 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem1843[a0_1836:byte])
	a2_1036 = Mem1843[a7_1837:word32]
	d1 = (uint32) (uint8) (byte) d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031F6:
	d5_1256 = d1
	d3_150 = d3_150 + 0x00000001
	d4_140 = d4_140 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003224
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003204:
	word32 d0_1826 = (uint32) (uint8) Mem1791[0x000028B1 + (SEQ(SLICE(d0, word24, 8), (byte) d1) & 0x000000FF):byte]
	d0 = d0_1826 & 0x00000008
	branch (d0_1826 & 0x00000008) != 0x00000000 l00003224
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003220:
	branch d6_184 - d3_150 >=u 0x00000000 l000031BA
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003224:
	Mem1815[a7_149 + 73:byte] = (byte) d7
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003228:
	branch d5_1256 == 0xFFFFFFFF l0000323A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003230:
	word32 a7_1736 = a7_149 - 4
	Mem1738[a7_1736:word32] = a2_1036
	Mem1741[a7_1736 - 4:word32] = d5_1256
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000323A:
	d3_165 = d3_150 - 0x00000001
	d4_140 = d4_140 - 0x00000001
	branch Mem187[a7_149 + 73:byte] != 0x00 l00003B22
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003246:
	branch d3_165 == 0x00000000 l00003B22
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000324C:
	Mem1731[a5:byte] = 0x00
	Mem1734[a7_149 + 60:word32] = Mem1731[a7_149 + 60:word32] + 0x00000001
	a5 = a5 + 1
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002E2E:
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003366:
	Mem305[a7_149 + 48:word32] = 0x00000000
	Mem306[a7_149 + 44:word32] = 0x00000000
	Mem307[a7_149 + 110:word32] = 0x00000000
	branch (byte) d7 != 0x00 l00003378
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003376:
	a3_1685 = a3_1685 - 1
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003378:
	branch (byte) d7 != 0x70 l00003386
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000337E:
	Mem1682[a7_149 + 72:byte] = 0x6C
	d7 = 120
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003386:
	branch d5_1256 != 0x0000002D l00003394
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000338E:
	branch (byte) d7 != 0x75 l0000339C
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003394:
	branch d5_1256 != 0x0000002B l000033EC
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000339C:
	branch d6_184 - d3_150 <u 0x00000000 l000033EC
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033A0:
	Mem1614[a7_149 + 110:word32] = d5_1256
	word32 a0_1615 = a2_1036 + 24
	Mem1617[a0_1615:word32] = Mem1614[a0_1615:word32] | 0x00000001
	word32 a0_1618 = a2_1036 + 20
	word32 v227_1619 = Mem1617[a0_1618:word32] - 0x00000001
	Mem1620[a0_1618:word32] = v227_1619
	CV = cond(v227_1619) (alias)
	branch v227_1619 < 0x00000000 l000033D6
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033D6:
	word32 a7_1663 = a7_149 - 4
	Mem1665[a7_1663:word32] = a2_1036
	d0 = fn00003CCC(dwArg00, out d1, out a1, out a5)
	Mem1672[a7_1663 + 56:word32] = d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033B6:
	a1 = a2_1036 + 4
	word32 a0_1636 = Mem1620[a1:word32]
	word32 a7_1637 = a7_149 - 4
	Mem1639[a7_1637:word32] = a2_1036
	Mem1643[a1:word32] = a0_1636 + 1
	a2_1036 = Mem1643[a7_1637:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem1643[a0_1636:byte])
	Mem1652[a7_1637:word32] = d1
	Mem1658[a7_1637 + 56:word32] = (uint32) (uint8) (byte) d0
	d1 = Mem1658[a7_1637:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033E4:
	d5_1256 = Mem1620[a7_149 + 52:word32]
	d3_150 = d3_150 + 0x00000001
	d4_140 = d4_140 + 0x00000001
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033EC:
	branch (byte) d7 != 0x69 l0000355E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033F4:
	branch d5_1256 != 0x00000030 l00003520
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033FE:
	branch d6_184 - d3_150 <u 0x00000000 l00003520
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003520:
	word32 d0_1357 = (uint32) (uint8) Mem307[0x000028B1 + (SEQ(SLICE(d0, word24, 8), (byte) d5_1256) & 0x000000FF):byte]
	d0 = d0_1357 & 0x00000004
	branch (d0_1357 & 0x00000004) != 0x00000000 l0000355E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000353C:
	word32 d0_1372 = (uint32) (uint8) Mem307[0x000028B1 + (SEQ(SLICE(d0_1357 & 0x00000004, word24, 8), (byte) d5_1256) & 0x000000FF):byte]
	d0 = d0_1372 & 0x00000044
	branch (d0_1372 & 0x00000044) == 0x00000000 l0000355E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003558:
	branch d6_184 - d3_150 <u 0x00000000 l0000355E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000355C:
	d7 = 120
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003404:
	word32 d0_1396
	word32 a0_1386 = a2_1036 + 24
	Mem1388[a0_1386:word32] = Mem307[a0_1386:word32] | 0x00000001
	word32 a0_1389 = a2_1036 + 20
	word32 v245_1390 = Mem1388[a0_1389:word32] - 0x00000001
	Mem1391[a0_1389:word32] = v245_1390
	CV = cond(v245_1390) (alias)
	branch v245_1390 < 0x00000000 l00003436
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003436:
	word32 a7_1597 = a7_149 - 4
	Mem1599[a7_1597:word32] = a2_1036
	d0_1396 = fn00003CCC(dwArg00, out d1, out a1, out a5)
	Mem1606[a7_1597 + 56:word32] = d0_1396
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003416:
	a1 = a2_1036 + 4
	word32 a0_1570 = Mem1391[a1:word32]
	word32 a7_1571 = a7_149 - 4
	Mem1573[a7_1571:word32] = a2_1036
	Mem1577[a1:word32] = a0_1570 + 1
	a2_1036 = Mem1577[a7_1571:word32]
	d0_1396 = SEQ(SLICE(d0, word24, 8), Mem1577[a0_1570:byte])
	Mem1586[a7_1571:word32] = d1
	Mem1592[a7_1571 + 56:word32] = (uint32) (uint8) (byte) d0_1396
	d1 = Mem1592[a7_1571:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003444:
	Mem1402[a7_149 + 64:word32] = Mem1391[a7_149 + 52:word32]
	word32 d0_1408 = SEQ(SLICE(d0_1396, word24, 8), Mem1402[a7_149 + 55:byte])
	word32 d3_1403 = d3_150 + 0x00000001
	d0 = d0_1408 & 0x000000FF
	branch __btst(Mem1402[0x000028B1 + (int32) ((int16) (d0_1408 & 0x000000FF)):byte], 0x0000) l0000346A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003466:
	d0 = SEQ(SLICE(d0_1408 & 0x000000FF, word24, 8), (byte) (d0_1408 & 0x000000FF) | 0x20)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000346A:
	branch d0 != 0x00000078 l00003502
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003474:
	branch d6_184 - d3_1403 <u 0x00000000 l00003502
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003502:
	d7 = 111
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000347A:
	word32 d0_1472
	word32 a0_1462 = a2_1036 + 24
	Mem1464[a0_1462:word32] = Mem1402[a0_1462:word32] | 0x00000001
	word32 a0_1465 = a2_1036 + 20
	word32 v267_1466 = Mem1464[a0_1465:word32] - 0x00000001
	Mem1467[a0_1465:word32] = v267_1466
	CV = cond(v267_1466) (alias)
	branch v267_1466 < 0x00000000 l000034AC
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034AC:
	word32 a7_1551 = a7_149 - 4
	Mem1553[a7_1551:word32] = a2_1036
	d0_1472 = fn00003CCC(dwArg00, out d1, out a1, out a5)
	Mem1560[a7_1551 + 56:word32] = d0_1472
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000348C:
	a1 = a2_1036 + 4
	word32 a0_1524 = Mem1467[a1:word32]
	word32 a7_1525 = a7_149 - 4
	Mem1527[a7_1525:word32] = a2_1036
	Mem1531[a1:word32] = a0_1524 + 1
	a2_1036 = Mem1531[a7_1525:word32]
	d0_1472 = SEQ(SLICE(d0, word24, 8), Mem1531[a0_1524:byte])
	Mem1540[a7_1525:word32] = d1
	Mem1546[a7_1525 + 56:word32] = (uint32) (uint8) (byte) d0_1472
	d1 = Mem1546[a7_1525:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034BA:
	Mem1478[a7_149 + 74:word32] = Mem1467[a7_149 + 52:word32]
	word32 d0_1491 = (uint32) (uint8) Mem1478[0x000028B1 + (SEQ(SLICE(d0_1472, word24, 8), (byte) d5_1256) & 0x000000FF):byte]
	d0 = d0_1491 & 0x00000044
	branch (d0_1491 & 0x00000044) == 0x00000000 l000034E6
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034E0:
	branch d6_184 - (d3_1403 + 0x00000001) <u 0x00000000 l000034E6
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034E4:
	d7 = 120
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034E6:
	branch Mem1478[a7_149 + 74:word32] == 0xFFFFFFFF l000034FC
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034F0:
	word32 a7_1508 = a7_149 - 4
	Mem1510[a7_1508:word32] = a2_1036
	Mem1514[a7_1508 - 4:word32] = Mem1510[a7_1508 + 78:word32]
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034FC:
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003504:
	branch Mem1402[a7_149 + 64:word32] == 0xFFFFFFFF l0000351A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000350E:
	word32 a7_1446 = a7_149 - 4
	Mem1448[a7_1446:word32] = a2_1036
	Mem1452[a7_1446 - 4:word32] = Mem1448[a7_1446 + 68:word32]
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000351A:
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000355E:
	word32 d3_1182 = d3_150
	word32 d4_1067 = d4_140
	branch (byte) d7 != 0x78 l00003692
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003566:
	branch d5_1256 != 0x00000030 l00003692
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003570:
	branch d6_184 - d3_150 <u 0x00000000 l00003692
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003576:
	word32 d0_1136
	word32 a0_1126 = a2_1036 + 24
	Mem1128[a0_1126:word32] = Mem307[a0_1126:word32] | 0x00000001
	word32 a0_1129 = a2_1036 + 20
	word32 v347_1130 = Mem1128[a0_1129:word32] - 0x00000001
	Mem1131[a0_1129:word32] = v347_1130
	CV = cond(v347_1130) (alias)
	branch v347_1130 < 0x00000000 l000035A8
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035A8:
	word32 a7_1332 = a7_149 - 4
	Mem1334[a7_1332:word32] = a2_1036
	d0_1136 = fn00003CCC(dwArg00, out d1, out a1, out a5)
	Mem1341[a7_1332 + 56:word32] = d0_1136
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003588:
	a1 = a2_1036 + 4
	word32 a0_1305 = Mem1131[a1:word32]
	word32 a7_1306 = a7_149 - 4
	Mem1308[a7_1306:word32] = a2_1036
	Mem1312[a1:word32] = a0_1305 + 1
	a2_1036 = Mem1312[a7_1306:word32]
	d0_1136 = SEQ(SLICE(d0, word24, 8), Mem1312[a0_1305:byte])
	Mem1321[a7_1306:word32] = d1
	Mem1327[a7_1306 + 56:word32] = (uint32) (uint8) (byte) d0_1136
	d1 = Mem1327[a7_1306:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035B6:
	Mem1142[a7_149 + 64:word32] = Mem1131[a7_149 + 52:word32]
	word32 d0_1148 = SEQ(SLICE(d0_1136, word24, 8), Mem1142[a7_149 + 55:byte])
	word32 d3_1143 = d3_150 + 0x00000001
	word32 d4_1144 = d4_140 + 0x00000001
	d0 = d0_1148 & 0x000000FF
	branch __btst(Mem1142[0x000028B1 + (int32) ((int16) (d0_1148 & 0x000000FF)):byte], 0x0000) l000035DC
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035D8:
	d0 = SEQ(SLICE(d0_1148 & 0x000000FF, word24, 8), (byte) (d0_1148 & 0x000000FF) | 0x20)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035DC:
	branch d0 != 0x00000078 l00003678
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035E6:
	branch d6_184 - d3_1143 <u 0x00000000 l00003678
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035EC:
	word32 d0_1208
	word32 a0_1198 = a2_1036 + 24
	Mem1200[a0_1198:word32] = Mem1142[a0_1198:word32] | 0x00000001
	word32 a0_1201 = a2_1036 + 20
	word32 v368_1202 = Mem1200[a0_1201:word32] - 0x00000001
	Mem1203[a0_1201:word32] = v368_1202
	CV = cond(v368_1202) (alias)
	branch v368_1202 < 0x00000000 l0000361E
// DataOut: a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:000028B0 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000361E:
	word32 a7_1286 = a7_149 - 4
	Mem1288[a7_1286:word32] = a2_1036
	d0_1208 = fn00003CCC(dwArg00, out d1, out a1, out a5)
	Mem1295[a7_1286 + 56:word32] = d0_1208
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035FE:
	a1 = a2_1036 + 4
	word32 a0_1259 = Mem1203[a1:word32]
	word32 a7_1260 = a7_149 - 4
	Mem1262[a7_1260:word32] = a2_1036
	Mem1266[a1:word32] = a0_1259 + 1
	a2_1036 = Mem1266[a7_1260:word32]
	d0_1208 = SEQ(SLICE(d0, word24, 8), Mem1266[a0_1259:byte])
	Mem1275[a7_1260:word32] = d1
	Mem1281[a7_1260 + 56:word32] = (uint32) (uint8) (byte) d0_1208
	d1 = Mem1281[a7_1260:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000362C:
	Mem1214[a7_149 + 74:word32] = Mem1203[a7_149 + 52:word32]
	word32 d0_1227 = (uint32) (uint8) Mem1214[0x000028B1 + (SEQ(SLICE(d0_1208, word24, 8), Mem1214[a7_149 + 55:byte]) & 0x000000FF):byte]
	d3_1182 = d3_1143 + 0x00000001
	d4_1067 = d4_1144 + 0x00000001
	d0 = d0_1227 & 0x00000044
	branch (d0_1227 & 0x00000044) == 0x00000000 l0000365E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003654:
	branch d6_184 - (d3_1143 + 0x00000001) <u 0x00000000 l0000365E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000365E:
	branch Mem1214[a7_149 + 74:word32] == 0xFFFFFFFF l00003674
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003668:
	word32 a7_1243 = a7_149 - 4
	Mem1245[a7_1243:word32] = a2_1036
	Mem1249[a7_1243 - 4:word32] = Mem1245[a7_1243 + 78:word32]
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003674:
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003678:
	branch Mem1142[a7_149 + 64:word32] == 0xFFFFFFFF l0000368E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003682:
	word32 a7_1185 = a7_149 - 4
	Mem1187[a7_1185:word32] = a2_1036
	Mem1191[a7_1185 - 4:word32] = Mem1187[a7_1185 + 68:word32]
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000368E:
	d3_1182 = d3_1143 - 0x00000001
	d4_1067 = d4_1144 - 0x00000001
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003658:
	d5_1256 = Mem1214[a7_149 + 74:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003692:
	branch (byte) d7 == 0x78 l0000369E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003698:
	branch (byte) d7 != 0x58 l000036A8
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036A8:
	branch (byte) d7 != 0x6F l000036B8
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036B8:
	Mem1118[a7_149 + 52:word32] = 0x0000000A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036AE:
	Mem1115[a7_149 + 52:word32] = 0x00000008
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036C0:
	Mem1112[a7_149 + 64:word32] = Mem307[a7_149 + 52:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000369E:
	Mem1103[a7_149 + 64:word32] = 0x00000010
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036C6:
	Mem374[a7_149 + 114:word32] = Mem307[a7_149 + 64:word32]
	word32 d0_384 = (uint32) (uint8) Mem374[0x000028B1 + (SEQ(SLICE(d0, word24, 8), (byte) d5_1256) & 0x000000FF):byte]
	Mem387[a7_149 + 132:word32] = d2_139
	Mem389[a7_149 + 52:word32] = d4_1067
	Mem391[a7_149 + 74:byte] = (byte) d7
	d0 = d0_384 & 0x00000044
	branch (d0_384 & 0x00000044) == 0x00000000 l0000392E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036F8:
	branch Mem391[a7_149 + 114:word32] != 0x0000000A l0000372E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003702:
	word32 d0_1089 = (uint32) (uint8) Mem391[0x000028B1 + (SEQ(SLICE(d0_384 & 0x00000044, word24, 8), (byte) d5_1256) & 0x000000FF):byte]
	Mem1092[a7_149 + 132:word32] = d2_139
	Mem1094[a7_149 + 52:word32] = d4_1067
	Mem1096[a7_149 + 74:byte] = (byte) d7
	d0 = d0_1089 & 0x00000004
	branch (d0_1089 & 0x00000004) == 0x00000000 l0000392E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000372E:
	branch Mem391[a7_149 + 114:word32] != 0x00000008 l0000374E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003738:
	Mem1072[a7_149 + 132:word32] = d2_139
	Mem1074[a7_149 + 52:word32] = d4_1067
	Mem1076[a7_149 + 74:byte] = (byte) d7
	branch d5_1256 > 0x00000037 l0000392E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000374E:
	Mem731[a7_149 + 132:word32] = d2_139
	Mem733[a7_149 + 52:word32] = d4_1067
	Mem735[a7_149 + 64:word32] = d6_184
	Mem737[a7_149 + 74:byte] = (byte) d7
	branch d6_184 - d3_1182 <u 0x00000000 l0000392E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003764:
	d7 = Mem737[a7_149 + 114:word32]
	word32 a4_743 = Mem737[a7_149 + 64:word32]
// DataOut: a1 a2 a3 a4 a5 a7 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000376C:
	word32 a7_758 = a7_149 - 4
	Mem760[a7_758:word32] = d2_139
	word32 v419_764 = Mem760[a7_758:word32]
	Mem769[a7_758:word32] = d7 >> 31
	Mem772[a7_758 - 4:word32] = d7
	Mem775[a7_758 - 8:word32] = a1
	Mem779[a7_758 - 12:word32] = Mem775[a7_758 + 52:word32]
	Mem783[a7_758 - 16:word32] = Mem779[a7_758 + 48:word32]
	Mem786[a7_758 - 20:word32] = d7
	Mem788[a7_758 - 24:word32] = d7 >> 31
	word32 d1_790
	Mem797[a7_758 + 68:word32] = fn00003C4C(d4_1067, dwArg00, dwArg04, dwArg08, dwArg0C, out d1_790)
	Mem799[a7_758 + 72:word32] = d1_790
	branch ((uint32) (uint8) Mem799[0x000028B1 + (SEQ(Mem799[a7_758 + 0x00000001:word24], (byte) d5_1256) & 0x000000FF):byte] & 0x00000004) == 0x00000000 l000037CC
// DataOut: a2 a3 a4 a5 a7 d2 d3 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037CC:
	d4_1067 = 0
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037C2:
	d4_1067 = d5_1256 - 0x00000030
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037CE:
	word32 d6_1062
	Mem825[a7_149 - 4:word32] = v419_764
	Mem833[a7_149 - 4:word32] = Mem825[a7_149 - 4:word32]
	word32 d2_835 = d4_1067 + Mem833[a7_149 + 68:word32]
	Mem839[a7_149 + 48:word32] = d2_835
	Mem843[a7_149 - 8:word32] = d3_1182
	word32 d0_827 = d4_1067 >> 31
	Mem848[a7_149 + 44:word32] = Mem843[a7_149 + 64:word32] + d0_827 + (d2_835 <u 0x00000000)
	word32 v441_849 = Mem848[a7_149 - 8:word32]
	word32 v442_852 = Mem848[a7_149 - 4:word32]
	branch ((uint32) (uint8) Mem848[0x000028B1 + (SEQ(SLICE(d0_827, word24, 8), (byte) d5_1256) & 0x000000FF):byte] & 0x00000001) == 0x00000000 l0000381E
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000381E:
	d6_1062 = 0
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003814:
	d6_1062 = d5_1256 - 0x00000037
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003820:
	word32 d2_1057
	Mem876[a7_149 - 4:word32] = v442_852
	Mem884[a7_149 - 4:word32] = Mem876[a7_149 - 4:word32]
	word32 d2_886 = d6_1062 + Mem884[a7_149 + 48:word32]
	Mem890[a7_149 + 68:word32] = d2_886
	Mem894[a7_149 - 8:word32] = v441_849
	word32 d0_878 = d6_1062 >> 31
	Mem899[a7_149 + 64:word32] = Mem894[a7_149 + 44:word32] + d0_878 + (d2_886 <u 0x00000000)
	word32 v453_900 = Mem899[a7_149 - 8:word32]
	branch ((uint32) (uint8) Mem899[0x000028B1 + (SEQ(SLICE(d0_878, word24, 8), (byte) d5_1256) & 0x000000FF):byte] & 0x00000002) == 0x00000000 l00003870
// DataOut: a2 a3 a4 a5 a7 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003870:
	d2_1057 = 0
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003866:
	d2_1057 = d5_1256 - 0x00000057
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003872:
	word32 d0_1039
	Mem927[a7_149 - 4:word32] = d2_1057
	Mem935[a7_149 - 4:word32] = Mem927[a7_149 - 4:word32]
	word32 d2_937 = d2_1057 + Mem935[a7_149 + 68:word32]
	Mem941[a7_149 + 48:word32] = d2_937
	Mem945[a7_149 - 8:word32] = v453_900
	Mem949[a7_149 + 44:word32] = Mem945[a7_149 + 64:word32] + (d2_1057 >> 31) + (d2_937 <u 0x00000000)
	word32 a0_956 = a2_1036 + 24
	word32 v465_950 = Mem949[a7_149 - 8:word32]
	d2_139 = Mem949[a7_149 - 4:word32]
	Mem959[a0_956:word32] = Mem949[a0_956:word32] | 1
	word32 a0_960 = a2_1036 + 20
	word32 v468_961 = Mem959[a0_960:word32] - 0x00000001
	Mem962[a0_960:word32] = v468_961
	CV = cond(v468_961) (alias)
	branch v468_961 < 0x00000000 l000038C4
// DataOut: a2 a3 a4 a5 a7 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038C4:
	Mem1047[a7_149 - 4:word32] = a2_1036
	word32 d1_1049
	d0_1039 = fn00003CCC(dwArg00, out d1_1049, out a1, out a5)
	d1 = d0_1039
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:1 a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038AC:
	a1 = a2_1036 + 4
	word32 a0_1026 = Mem962[a1:word32]
	Mem1029[a7_149 - 4:word32] = a2_1036
	Mem1033[a1:word32] = a0_1026 + 1
	d0_1039 = (uint32) (uint8) Mem1033[a0_1026:byte]
	a2_1036 = Mem1033[a7_149 - 4:word32]
	d1 = (uint32) (uint8) (byte) d0_1039
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:1 a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038D0:
	Mem975[a7_149 + 52:word32] = Mem962[a7_149 + 52:word32] + 0x00000001
	word32 d0_986 = (uint32) (uint8) Mem975[0x000028B1 + (SEQ(SLICE(d0_1039, word24, 8), (byte) d1) & 0x000000FF):byte]
	d5_1256 = d1
	d3_1182 = v465_950 + 0x00000001
	d0 = d0_986 & 0x00000044
	branch (d0_986 & 0x00000044) == 0x00000000 l0000392E
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038F4:
	branch d7 != 0x0000000A l00003918
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038FC:
	word32 d0_1019 = (uint32) (uint8) Mem975[0x000028B1 + (SEQ(SLICE(d0_986 & 0x00000044, word24, 8), (byte) d1) & 0x000000FF):byte]
	d0 = d0_1019 & 0x00000004
	branch (d0_1019 & 0x00000004) == 0x00000000 l0000392E
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003918:
	branch d7 != 0x00000008 l00003928
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003920:
	branch d1 > 0x00000037 l0000392E
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003928:
	branch a4_743 - (v465_950 + 0x00000001) >=u 0x00000000 l0000376C
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000392E:
	d7 = SEQ(SLICE(d7, word24, 8), Mem391[a7_149 + 74:byte])
	word32 d4_416 = Mem391[a7_149 + 52:word32]
	d2_139 = Mem391[a7_149 + 132:word32]
	branch Mem391[a7_149 + 110:word32] == 0x00000000 l00003962
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003940:
	branch d3_1182 != 0x00000002 l00003962
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003948:
	branch d5_1256 == 0xFFFFFFFF l0000395A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003950:
	word32 a7_709 = a7_149 - 4
	Mem711[a7_709:word32] = a2_1036
	Mem714[a7_709 - 4:word32] = d5_1256
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000395A:
	d3_1182 = d3_1182 - 0x00000001
	d4_416 = d4_416 - 0x00000001
	d5_1256 = Mem391[a7_149 + 110:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003962:
	branch d5_1256 == 0xFFFFFFFF l00003974
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000396A:
	word32 a7_686 = a7_149 - 4
	Mem688[a7_686:word32] = a2_1036
	Mem691[a7_686 - 4:word32] = d5_1256
	d0 = fn00002BF8(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003974:
	d3_165 = d3_1182 - 0x00000001
	d4_140 = d4_416 - 0x00000001
	branch Mem391[a7_149 + 73:byte] != 0x00 l00003B22
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003980:
	branch d3_165 == 0x00000000 l00003B22
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003986:
	branch (byte) d7 != 0x75 l00003A48
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A48:
	branch Mem391[a7_149 + 110:word32] != 0x0000002D l00003A64
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A64:
	Mem682[a7_149 + 56:word32] = Mem391[a7_149 + 48:word32]
	Mem684[a7_149 + 52:word32] = Mem682[a7_149 + 44:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A52:
	word32 v528_666 = a7_149 + 44
	d1 = -Mem391[v528_666 + 4:word32]
	d0 = -Mem391[v528_666:word32] - (d1 <u 0x00000000)
	a7_149 = Mem391[a7_149 + 0x00000038:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A70:
	word32 a7_569 = a7_149 - 4
	Mem571[a7_569:word32] = d0
	word32 d0_574 = SEQ(SLICE(d0, word24, 8), Mem571[a7_569 + 76:byte])
	Mem580[a7_569 + 48:byte] = (byte) SEQ(SLICE(d0_574, word24, 8), (byte) d0_574 - 0x01)
	a7_149 = a7_569 + 4
	branch Mem580[a7_569 + 48:byte] == 0x00 l00003A9A
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A9A:
	word32 d0_654 = d2_139 + 0x00000003 >>u 0x00000002
	d2_139 = (d0_654 << 0x00000002) + 0x00000004
	word32 a0_660 = Mem580[d2_139 + -4:word32]
	Mem662[a0_660 + 4:word32] = Mem580[a7_569 + 60:word32]
	Mem664[a0_660:word32] = Mem662[a7_569 + 56:word32]
	d0 = d0_654 << 0x00000002
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A84:
	byte v540_588 = Mem580[a7_569 + 48:byte] - 0x01
	Mem589[a7_569 + 48:byte] = v540_588
	branch v540_588 == 0x00 l00003AEC
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003AEC:
	d2_139 = (d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem589[a7_569 + 60:word32]
	Mem650[Mem589[d2_139 + -4:word32]:byte] = (byte) d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A8A:
	byte v541_592 = Mem589[a7_569 + 48:byte] - 0x66
	Mem593[a7_569 + 48:byte] = v541_592
	branch v541_592 == 0x00 l00003AD2
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003AD2:
	d2_139 = (d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem593[a7_569 + 60:word32]
	Mem637[Mem593[d2_139 + -4:word32]:word16] = (word16) d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A92:
	byte v542_596 = Mem593[a7_569 + 48:byte] - 0x04
	Mem597[a7_569 + 48:byte] = v542_596
	branch v542_596 == 0x00 l00003AB8
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003AB8:
	d2_139 = (d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem597[a7_569 + 60:word32]
	Mem624[Mem597[d2_139 + -4:word32]:word32] = d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A98:
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B06:
	d2_139 = (d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem597[a7_569 + 60:word32]
	Mem611[Mem597[d2_139 + -4:word32]:word32] = d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000398E:
	word32 a7_463 = a7_149 - 4
	Mem465[a7_463:word32] = d0
	word32 d0_468 = SEQ(SLICE(d0, word24, 8), Mem465[a7_463 + 76:byte])
	Mem474[a7_463 + 56:byte] = (byte) SEQ(SLICE(d0_468, word24, 8), (byte) d0_468 - 0x01)
	a7_149 = a7_463 + 4
	branch Mem474[a7_463 + 56:byte] == 0x00 l000039B8
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039B8:
	word32 d0_548 = d2_139 + 0x00000003 >>u 0x00000002
	d2_139 = (d0_548 << 0x00000002) + 0x00000004
	word32 a0_554 = Mem474[d2_139 + -4:word32]
	Mem556[a0_554 + 4:word32] = Mem474[a7_463 + 52:word32]
	Mem558[a0_554:word32] = Mem556[a7_463 + 48:word32]
	d0 = d0_548 << 0x00000002
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039A2:
	byte v517_482 = Mem474[a7_463 + 56:byte] - 0x01
	Mem483[a7_463 + 56:byte] = v517_482
	branch v517_482 == 0x00 l00003A10
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A10:
	d2_139 = (d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem483[a7_463 + 52:word32]
	Mem544[Mem483[d2_139 + -4:word32]:byte] = (byte) d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039A8:
	byte v518_486 = Mem483[a7_463 + 56:byte] - 0x66
	Mem487[a7_463 + 56:byte] = v518_486
	branch v518_486 == 0x00 l000039F4
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039F4:
	d2_139 = (d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem487[a7_463 + 52:word32]
	Mem531[Mem487[d2_139 + -4:word32]:word16] = (word16) d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039B0:
	byte v519_490 = Mem487[a7_463 + 56:byte] - 0x04
	Mem491[a7_463 + 56:byte] = v519_490
	branch v519_490 == 0x00 l000039D8
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039D8:
	d2_139 = (d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem491[a7_463 + 52:word32]
	Mem518[Mem491[d2_139 + -4:word32]:word32] = d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039B6:
// DataOut: a1 a2 a3 a5 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A2C:
	d2_139 = (d2_139 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem491[a7_463 + 52:word32]
	Mem505[Mem491[d2_139 + -4:word32]:word32] = d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B1E:
	Mem461[a7_149 + 60:word32] = Mem391[a7_149 + 60:word32] + 0x00000001
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B22:
	a4_146 = a3_1685
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C20:
	branch d3_165 == 0x00000000 l00003C2A
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C24:
	branch Mem0[a4_146:byte] != 0x00 l00002C4A
// DataOut: a1 a2 a4 a5 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C2A:
	branch d5_1256 != 0xFFFFFFFF l00003C3C
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C32:
	branch Mem0[a7_149 + 60:word32] != 0x00000000 l00003C3C
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C3C:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C38:
// DataOut: a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C40:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d0:<invalid> d3:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

fn00002C28_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 a4:a4 a2:a2 d4:d4 d5:d5 d0:<invalid> d3:d3 d6:d6 d7:d7 a3:a3 a5:a5 a6:a6 a0:<invalid> a1:<invalid> d1:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>



word32 fn00003C4C(word32 d4, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d4
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn00003C4C_entry:
// DataOut: a2 a3 a4 a5 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00003C4C:
	word32 d0_24 = __swap(dwArg08)
	word32 d1_26 = __swap(dwArg10)
	word32 d4_30 = SEQ(SLICE(d4, word16, 16), (word16) dwArg08) *u (word16) dwArg10
	word32 d1_102 = d1_26 *u (word16) d0_24
	word32 d2_40 = dwArg08 *u (word16) d1_26 + __swap(SEQ(SLICE(d4_30, word16, 16), (word16) d4_30 ^ (word16) d4_30)) + dwArg10 *u (word16) d0_24
	branch d2_40 >=u 0x00000000 l00003C80
// DataOut: a2 a3 a4 a5 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32)

l00003C7A:
	d1_102 = d1_102 + 0x00010000
// DataOut: a2 a3 a4 a5 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d5:<invalid> d6:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> d3:<invalid> d4:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32)

l00003C80:
	word32 d2_44 = __swap(d2_40)
	word32 d3_60 = __swap(dwArg0C) *u (word16) dwArg08
	word32 d3_66 = __swap(SEQ(SLICE(d3_60, word16, 16), (word16) (d3_60 + __swap(dwArg08) *u (word16) dwArg0C)))
	word32 d3_78 = __swap(dwArg04) *u (word16) dwArg10
	word32 d3_84 = __swap(SEQ(SLICE(d3_78, word16, 16), (word16) (d3_78 + __swap(dwArg10) *u (word16) dwArg04)))
	word32 d1_53
	*d1Out = SEQ(SLICE(d2_44, word16, 16), (word16) d4_30)
	return (uint32) (uint16) (word16) d2_44 + d1_102 + (dwArg0C *u (word16) dwArg08 + SEQ(SLICE(d3_66, word16, 16), (word16) d3_66 ^ (word16) d3_66)) + (dwArg04 *u (word16) dwArg10 + SEQ(SLICE(d3_84, word16, 16), (word16) d3_84 ^ (word16) d3_84))
// DataOut: a2 a3 a4 a5 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d5:<invalid> d6:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> d3:<invalid> d4:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6

fn00003C4C_exit:
// DataOut: d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d5:d5 d6:d6 d0:<invalid> d1:<invalid> d2:d2 d3:d3 d4:d4 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6



word32 fn00003CCC(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5
// Stack args: Stack +0004(32)
fn00003CCC_entry:
// DataOut: d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00003CCC:
	word32 d0_141
	word32 a1_28
	word32 a5_29
	word32 d1_30
	*d1Out = fn00002424(out a1_28, out a5_29)
	branch dwArg04 != 0x00000000 l00003CE4
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00003CE4:
	branch (Mem0[dwArg04 + 24:word32] & 42) == 32 l00003CF6
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003CF6:
	Mem87[dwArg04 + 24:word32] = Mem0[dwArg04 + 24:word32] | 1
	word32 d0_101 = Mem87[dwArg04 + 24:word32] & 0x00000200
	branch d0_101 == 0x00000000 l00003D0E
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D08:
	word32 a1_217
	word32 a5_218
	d0_101 = fn00003DC8(out a1_217, out a5_218)
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D0E:
	branch Mem87[dwArg04 + 28:word32] != 0x00000000 l00003D2C
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D14:
	d0_101 = Mem87[dwArg04 + 24:word32] & 4
	branch d0_101 == 0x00000000 l00003D24
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D24:
	Mem215[dwArg04 + 28:word32] = 0x00000400
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D1C:
	Mem212[dwArg04 + 28:word32] = 1
	d0_101 = 1
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D2C:
	branch Mem87[dwArg04 + 8:word32] != 0x00000000 l00003D68
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D32:
	word32 d4_177
	branch (Mem87[dwArg04 + 24:word32] & 0x00000080) == 0x00000000 l00003D46
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D46:
	d4_177 = 1
// DataOut: a1 a2 a5 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D42:
	d4_177 = 2
// DataOut: a1 a2 a5 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D48:
	word32 d1_185
	word32 a0_186
	word32 a1_187
	word32 d0_188 = fn00002050(d4_177 + Mem87[dwArg04 + 28:word32], out d1_185, out a0_186, out a1_187)
	d0_101 = d0_188
	branch d0_188 != 0x00000000 l00003D60
// DataOut: a1 a2 a3 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d4:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D60:
	Mem198[dwArg04 + 8:word32] = d0_188 + 1
	word32 a1_196
	*a1Out = d0_188 + 1
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D68:
	Mem120[dwArg04 + 4:word32] = Mem87[dwArg04 + 8:word32]
	word32 d1_123
	*d1Out = Mem120[dwArg04:word32]
	execPrivate2()
	Mem127[dwArg04 + 20:word32] = d0_101
	word32 v26_128 = Mem127[dwArg04 + 20:word32] - 0x00000001
	Mem129[dwArg04 + 20:word32] = v26_128
	branch v26_128 >= 0x00000000 l00003DAE
// DataOut: a1 a2 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003DAE:
	word32 a0_158 = Mem129[dwArg04 + 4:word32]
	Mem162[dwArg04 + 4:word32] = a0_158 + 1
	word32 a1_157
	*a1Out = dwArg04 + 4
	d0_141 = SEQ(SLICE(d0_101, word24, 8), Mem162[a0_158:byte]) & 0x000000FF
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D8C:
	branch Mem129[dwArg04 + 20:word32] != -1 l00003D9E
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D9E:
	Mem153[dwArg04 + 24:word32] = Mem129[dwArg04 + 24:word32] | 16
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:-1 d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D94:
	Mem146[dwArg04 + 24:word32] = Mem129[dwArg04 + 24:word32] | 8
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:-1 d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003DA6:
	Mem140[dwArg04 + 20:word32] = 0x00000000
	d0_141 = -1
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003D5C:
	d0_141 = -1
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003CF0:
	d0_141 = -1
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003CDE:
	d0_141 = -1
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003DC2:
	return d0_141
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 d1:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> a6:<invalid> a1:<invalid> a4:<invalid> d4:<invalid> a3:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6

fn00003CCC_exit:
// DataOut: a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:<invalid> d2:d2 d3:d3 d4:d4 d5:d5 a3:a3 a4:a4 a6:a6 d1:<invalid> a0:<invalid> a1:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6



word32 fn00003DC8(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a7
fn00003DC8_entry:
	*a1Out = a1
	*a5Out = a5
// DataOut: a1 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00003DC8:
	word32 a2_40 = Mem0[0x00003FFC:word32]
	word32 d0_24 = a2_40
	branch a2_40 == 0x00000000 l00003E00
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00003DD6:
	branch (Mem0[a2_40 + 24:word32] & 0x00000202) != 0x00000202 l00003DF6
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00003DE8:
	branch Mem0[a2_40:word32] == 0x00000000 l00003DF6
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00003DEC:
	word32 a0_66
	word32 a1_67
	word32 a5_68
	fn00001FA4(a2_40, out a0_66, out a1_67, out a5_68)
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00003DF6:
	a2_40 = Mem0[a2_40 + 12:word32]
	d0_24 = a2_40
	branch a2_40 != 0x00000000 l00003DD6
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00003E00:
	return d0_24
// DataOut: a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2

fn00003DC8_exit:
// DataOut: a1 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2



word32 fn00003E04(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
// Stack args: Stack +0004(32)
fn00003E04_entry:
	*a5Out = a5
	*d1Out = d1
	*a1Out = a1
// DataOut: a1 a5 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00003E04:
	word32 d0_107
	word32 a2_109 = dwArg04
	word32 d2_110 = 0
	branch Mem0[dwArg04:byte] == 0x00 l00003E84
// DataOut: a1 a2 a5 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00003E12:
	word32 d1_138
	word32 a0_82 = Mem0[0x00003FF4:word32]
	Mem86[a0_82 + 24:word32] = Mem0[a0_82 + 24:word32] | 2
	word32 v15_88 = Mem86[a0_82 + 20:word32] - 0x00000001
	Mem89[a0_82 + 20:word32] = v15_88
	word32 d0_120 = 2
	branch v15_88 < 0x00000000 l00003E5A
// DataOut: a2 a5 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:-1 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E28:
	branch Mem89[a2_109:byte] != 0x0A l00003E40
// DataOut: a2 a5 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:2 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E2E:
	d0_120 = Mem89[Mem89[0x00003FF4:word32] + 24:word32] & 0x00000080
	branch d0_120 != 0x00000000 l00003E5A
// DataOut: a2 a5 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:2 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E5A:
	word32 a0_134
	word32 a1_135
	word32 a5_136
	*d1Out = fn00001E90((int32) (int16) (int8) SEQ(SLICE(d0_120, word24, 8), Mem89[a2_109:byte]), Mem89[0x00003FF4:word32], out a0_134, out a1_135, out a5_136)
// DataOut: a1 a2 a5 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:<invalid> d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E40:
	word32 a1_149 = Mem89[0x00003FF4:word32]
	word32 a0_151 = Mem89[a1_149 + 4:word32]
	Mem155[a1_149 + 4:word32] = a0_151 + 1
	Mem157[a0_151:byte] = Mem155[a2_109:byte]
	word32 a1_150
	*a1Out = a1_149 + 4
	*d1Out = (uint32) (uint8) (byte) SEQ(SLICE(d0_120, word24, 8), Mem157[a0_151:byte])
// DataOut: a1 a2 a5 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:<invalid> d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E72:
	branch d1_138 != -1 l00003E7C
// DataOut: a1 a2 a5 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:<invalid> d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E7C:
	a2_109 = a2_109 + 1
	d2_110 = d2_110 + 0x00000001
	branch Mem89[a2_109:byte] != 0x00 l00003E12
// DataOut: a1 a2 a5 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:-1 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E84:
	d0_107 = d2_110
// DataOut: a1 a5 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:-1 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E78:
	d0_107 = -1
// DataOut: a1 a5 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:-1 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00003E86:
	return d0_107
// DataOut: a1 a5 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3

fn00003E04_exit:
// DataOut: a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d2:d2 d0:<invalid> a3:a3 a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3



