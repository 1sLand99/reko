void fn00001000(word32 d0, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5
// Preserved: a7 d7
fn00001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001000:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000100A:
	word32 a6_9 = Mem0[0x00000004:word32]
	word32 d2_102 = d0
	word32 a2_290 = a0
	branch Mem0[a6_9 + 20:word16] >=u 0x0024 l00001036
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001020:
	word32 a0_13 = 0x00002B88
	word32 d0_16 = 0x0000ABAE >>u 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001030:
	Mem19[a0_13:word32] = 0x00000000
	a0_13 = a0_13 + 4
	d0_16 = d0_16 - 0x00000001
	branch d0_16 != 0x00000000 l00001030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001036:
	Mem30[0x00002B88:word32] = fp
	Mem34[0x00002B8C:word32] = a6_9
	word32 d0_36 = FindTask(0x00000000)
	word32 d0_112 = OpenLibrary(0x000012BC, 0)
	branch d0_112 == 0x00000000 l00001226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001226:
	Alert(0x00038007)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001056:
	word32 d4_74
	Mem67[0x00002B90:word32] = d0_112
	branch Mem67[d0_36 + 172:word32] != 0x00000000 l00001066
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001066:
	word32 a0_73 = a0
	d4_74 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000106A:
	branch Mem67[a0_703:byte] != 0x20 l00001072
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001070:
	d4_74 = SEQ(SLICE(d4_74, word16, 16), SLICE(d4_74, word16, 0) + 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001072:
	a0_73 = a0_703 + 1
	a0_703 = a0_73
	branch Mem67[a0_703:byte] != 0x00 l0000106A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001060:
	d4_74 = 2
	d2_102 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001076:
	word32 d0_100 = d4_74 << 0x00000002
	word32 d0_107 = d0_100 + d2_102
	word32 d1_111 = 0x00010001
	d0_112 = AllocMem(d0_107 + 0x00000011, 0x00010001)
	branch d0_112 == 0x00000000 l0000123E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000123E:
	CloseLibrary(Mem67[0x00002B90:word32])
	Alert(0x00010000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000125C:
	branch Mem153[d0_36 + 172:word32] != 0x00000000 l00001268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001262:
	fn00001214(d0_36)
	fn0000126C(d0_112)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001268:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001096:
	word32 dwLoc0C_560
	word32 a0_447
	Mem169[d0_112:word32] = d0_107 + 0x00000011
	Mem173[d0_112 + 12:word32] = d4_74 - 0x00000001
	Mem177[d0_112 + 8:word32] = d0_112 + 16 + d0_100
	Mem179[0x00000000:word32] = 0x00000000
	word32 d0_180 = Mem179[d0_36 + 172:word32]
	branch d0_180 == 0x00000000 l00001190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001190:
	fn00001214(d0_36)
	Mem187[0x00002B94:word32] = d0_180
	Mem189[0x00002B98:word32] = d0_180
	Mem194[0x00000000:word32] = 0x00000000
	dwLoc0C_560 = d0_180
	word32 d0_197 = Mem194[d0_180 + 36:word32]
	branch d0_197 == 0x00000000 l000011B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011AE:
	Enable()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011B6:
	Supervisor(d0_112)
	Mem209[d0_112 + 4:word32] = d0_197
	d2_102 = 0x000003ED
	branch d0_197 != 0x00000000 l000011D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011D2:
	Mem214[0x00002B9C:word32] = d0_197
	Mem216[0x00002BA0:word32] = d0_197
	Mem218[0x00002BA4:word32] = d0_197
	Mem221[d0_36 + 156:word32] = d0_197
	Mem223[d0_36 + 160:word32] = d0_197
	word32 d0_227 = Mem223[(d0_197 << 0x00000002) + 8:word32]
	branch d0_227 == 0x00000000 l000011F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F0:
	Mem231[d0_36 + 164:word32] = d0_227
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CE_thunk_fn0000127C:
	fn0000127C()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010B6:
	word32 d0_252 = Mem179[(d0_180 << 0x00000002) + 16:word32]
	word32 a1_255 = Mem179[d0_112 + 8:word32]
	word32 a0_260 = (d0_252 << 0x00000002) + 1
	word32 d0_262 = (uint32) (uint8) Mem179[d0_252 << 0x00000002:byte]
	Mem263[a0_260 + d0_262:byte] = 0x00
	Mem265[d0_112 + 16:word32] = a0_260
	word32 a6_266 = d0_112 + 20
	word32 d3_267 = 1
	word32 a0_272 = a0 + d2_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DA:
	a0_272 = a0_272 - 1
	branch Mem265[a0_272:byte] >u 0x20 l000010E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DE_1:
	word16 v37_280 = SLICE(d2_102, word16, 0)
	d2_102 = SEQ(SLICE(d2_102, word16, 16), v37_280 - 1)
	branch v37_280 != 0x0000 l000010DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E2:
	Mem285[a0_272 + 1:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E6:
	byte v40_292 = Mem291[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v40_292)
	branch v40_292 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010EA:
	branch v40_292 == 0x20 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F0:
	branch v40_292 == 0x09 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F6:
	branch d3_267 - Mem291[d0_112 + 12:word32] == 0x00000000 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010FC:
	Mem313[a6_266:word32] = a1_255
	a6_266 = a6_266 + 4
	d3_267 = SEQ(SLICE(d3_267, word16, 16), SLICE(d3_267, word16, 0) + 0x0001)
	branch v40_292 == 0x22 l0000111A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111A:
	byte v71_324 = Mem323[a2_290:byte]
	word24 v72_327 = SLICE(d1_111, word24, 8)
	a2_290 = a2_290 + 1
	d1_111 = SEQ(v72_327, v71_324)
	branch v71_324 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111E:
	branch v71_324 == 0x22 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001124:
	branch v71_324 != 0x2A l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000112A:
	byte v75_337 = Mem323[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(v72_327, v75_337)
	d2_102 = SEQ(SLICE(d2_102, word24, 8), v75_337 & 0xDF)
	branch (v75_337 & 0xDF) != 0x4E l0000113C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000113C:
	branch (v75_337 & 0xDF) != 0x45 l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001142:
	d1_111 = 27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001138:
	d1_111 = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001144:
	Mem362[a1_255:byte] = SLICE(d1_111, byte, 0)
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001106:
	Mem366[a1_255:byte] = v40_292
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001108:
	byte v50_371 = Mem370[a2_290:byte]
	a2_290 = a2_290 + 1
	d1_111 = SEQ(SLICE(d1_111, word24, 8), v50_371)
	branch v50_371 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001148:
	Mem380[a1_255:byte] = 0x00
	Mem385[a6_266:word32] = 0x00000000
	execPrivate4()
	Mem416[0x00002B9C:word32] = d0_262
	execPrivate5()
	Mem418[0x00002BA0:word32] = d0_262
	dwLoc0C_560 = d0_112 + 16
	dwLoc10 = d3_267
	branch Mem418[Mem418[0x00002B8C:word32] + 20:word16] <u 0x0024 l0000117A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001172:
	word32 v92_428 = Mem418[d0_36 + 224:word32]
	Mem429[0x00002BA4:word32] = v92_428
	branch v92_428 != 0x00000000 l0000117E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117A:
	Mem435[0x00002BA4:word32] = d0_262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117E:
	branch Mem439[d0_36 + 8:byte] != 0x0D l000011F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F8:
	a0_447 = Mem445[d0_36 + 58:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001186:
	word32 a0_450 = Mem439[d0_36 + 176:word32]
	a0_447 = a0_450 + 4 - Mem439[a0_450:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001202:
	Mem461[0x00002BB0:word32] = a0_447
	Mem469[0x00002BB4:word32] = fp - 16
	fn00001354(d2_102, dwLoc10, dwLoc0C_560)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001212_thunk_fn0000127C:
	fn0000127C()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000110C:
	branch v50_371 == 0x20 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001116:
	Mem509[a1_255:byte] = 0x00
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001112:
	Mem516[a1_255:byte] = v50_371
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001214_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000126C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001278(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a5
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1 d2
// Preserved: a7
fn00001278_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278_thunk_fn0000127C:
	return fn0000127C()
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001278_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000127C()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a5
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000127C:
	word32 a7_6 = Mem0[0x00002B88:word32]
	word32 v7_11 = Mem0[a7_6 - 4:word32]
	word32 v5_8 = Mem0[a7_6 - 8:word32]
	branch Mem0[v7_11 + 4:word32] == 0x00000000 l0000129E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001296:
	execPrivate1()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000129E:
	CloseLibrary(Mem0[0x00002B90:word32])
	branch v5_8 == 0x00000000 l000012B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012AE:
	fn0000126C(v5_8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012B0:
	FreeMem(v7_11, Mem0[v7_11:word32])
	return v7_11
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000127C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000012D0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a5
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012D0:
	branch 0x00002CD0 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012E2:
	word32 d2_16 = 1
	branch Mem11[0x00002CD4:word32] == 0x00000000 l000012F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012EA:
	d2_16 = d2_16 + 0x00000001
	branch Mem11[0x00002CD0 + (d2_16 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012F6:
	word32 d2_33 = d2_16 - 0x00000001
	branch d2_33 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012FA:
	word32 d0_38 = d2_33 << 0x00000002
	call Mem11[0x00002CD0 + d0_38:word32] (retsize: 4;)
		uses: d0:d0_38,Stack +0008:dwArg04
	d2_33 = d2_33 - 0x00000001
	branch d2_33 != 0x00000000 l000012FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001308:
	return fn00001278(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000012D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000131C(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a5
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000131C:
	branch Mem8[0x00002BB8:word32] != 0x00000000 l0000134E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001328:
	word32 a3_13 = Mem8[0x00002CE0:word32]
	Mem16[0x00002BB8:word32] = 1
	branch a3_13 == 0x00000000 l00001346
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000133A:
	call Mem16[a3_13 + 4:word32] (retsize: 4;)
		uses: d0:a3_25,Stack +0008:dwArg04
	a3_13 = Mem16[a3_13:word32]
	branch a3_13 != 0x00000000 l0000133A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001346:
	a5 = fn000012D0(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000134E:
	return a5
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000131C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001354(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001354:
	word32 a3_17 = 0x00002CC8
	branch 0x00002CC4 == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001366:
	branch Mem8[0x00002CC8:word32] == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000136A:
	call Mem8[a3_17:word32] (retsize: 4;)
		uses: Stack +0008:dwArg04,Stack +000C:dwArg08
	a3_17 = a3_17 + 4
	branch Mem8[a3_17:word32] != 0x00000000 l0000136A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001372:
	fn0000131C(fn00001390(d2))
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001354_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001390(word32 d2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[1..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5
fn00001390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001390:
	word24 v9_17 = SLICE(d3, word24, 8)
	word32 d2_16 = SEQ(SLICE(d2, word31, 1), true)
	byte v11_19 = SLICE(SEQ(v9_17, 0x8F) + d2_16, byte, 0)
	word32 d0_28 = (uint32) (uint8) SLICE(d2_16 - SEQ(v9_17, v11_19), byte, 0)
	word32 d1_32 = (uint32) (uint8) v11_19
	word32 d4_37 = __swap(d0_28) *u SLICE(d1_32, word16, 0)
	byte v32_48 = SLICE(d0_28 *u SLICE(d1_32, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_37, word16, 16), SLICE(d4_37 + __swap(d1_32) *u SLICE(d0_28, word16, 0), word16, 0))), word16, 16), 0x0000), byte, 0)
	word32 d2_50 = SEQ(SLICE(d2_16, word24, 8), v32_48)
	fn00002A88(d2_50, (uint32) (uint8) SLICE(fn00002AC8(d2_50, (uint32) (uint8) v11_19, (uint32) (uint8) v32_48), byte, 0), (uint32) (uint8) v32_48)
	return fn0000143C((uint32) (uint8) SLICE((uint32) (uint8) v32_48 << 0x00000005, byte, 0), 0x0000142C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000143C(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn0000143C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000143C:
	return fn00001458(d0, Mem10[0x00002CE8:word32], dwArg04, fp + 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000143C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001458(word32 d0, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4 d5 d6 d7
fn00001458_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001458:
	word32 d0_1952
	word32 a7_1968 = fp + -112
	word32 d3_1482 = dwArg0C
	word32 a5_1579 = dwArg04
	word32 a4_1925 = dwArg08
	word32 d6_1480 = 0
	branch Mem36[dwArg08:byte] == 0x00 l00001D9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001474:
	branch Mem46[a4_1925:byte] != 0x25 l00001D78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D78:
	word32 a7_51 = a7_1968 - 4
	Mem54[a7_51:word32] = a5_1579
	Mem64[a7_51 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0, word24, 8), Mem54[a4_1925:byte])
	a4_1925 = a4_1925 + 1
	word32 a0_66
	d0 = fn00001DD8(Mem64[a7_51 - 4:word32], Mem64[a7_51:word32], out a0_66, out a5_1579)
	a7_1968 = a7_51 + 4
	branch d0 != 0xFFFFFFFF l00001D96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D96:
	d6_1480 = d6_1480 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D92:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000147C:
	Mem85[a7_1968 + 64:word32] = 0x00000000
	Mem87[a7_1968 + 72:word32] = 0x00000000
	Mem91[a7_1968 + 102:word32] = 0x00000000
	word32 d5_256 = -1
	word32 d4_376 = 105
	word32 a3_1270 = a7_1968 + 76
	word32 d7_1024 = 0
	word32 a2_135 = a4_1925 + 1
	word32 d2_1005 = Mem91[a7_1968 + 72:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000149A:
	word32 d1_103 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000149C:
	word32 a7_99 = a7_1968 - 4
	Mem102[a7_99:word32] = d0
	d0 = Mem102[a7_99:word32]
	branch Mem102[0x00001DB0 + d1_103:byte] - Mem102[a2_135:byte] != 0x00 l000014C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014C0:
	d1_103 = d1_103 + 0x00000001
	branch d1_103 <u 0x00000005 l0000149C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014AE:
	Mem121[a7_99:word32] = d1_103
	word32 d1_123 = 1 << d1_103
	d0 = d1_123
	d1_103 = Mem121[a7_99:word32]
	d2_1005 = d2_1005 | d1_123
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014CA:
	branch d1_103 <u 0x00000005 l0000149A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D2:
	word32 a0_1447
	word32 d0_159
	Mem143[a7_1968 + 72:word32] = d2_1005
	branch Mem143[a2_135:byte] != 0x2A l00001510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001510:
	a0_1447 = 0x0000275D + (SEQ(SLICE(d0, word24, 8), Mem143[a2_135:byte]) & 0x000000FF)
	word32 d0_158 = (uint32) (uint8) Mem143[a0_1447:byte]
	d0_159 = d0_158 & 0x00000004
	branch (d0_158 & 0x00000004) == 0x00000000 l0000157C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000152C:
	d2_1005 = Mem143[a7_1968 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001530:
	Mem171[a7_1968 - 4:word32] = d3_1482
	word32 d1_177 = __swap(10) *u SLICE(d2_1005, word16, 0)
	word32 d1_185 = SEQ(SLICE(__swap(SEQ(SLICE(d1_177, word16, 16), SLICE(d1_177 + __swap(d2_1005) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_186 = SLICE(d2_1005, word16, 0) *u 10 + d1_185
	a2_135 = a2_135 + 1
	a0_1447 = 0x0000275D + (SEQ(SLICE(d0_186, word24, 8), Mem171[a2_135:byte]) & 0x000000FF)
	word32 d1_196 = (int32) (int16) (int8) SEQ(SLICE(d1_185, word24, 8), Mem171[a2_135:byte])
	word32 d0_210 = (uint32) (uint8) Mem171[a0_1447:byte]
	d3_1482 = Mem171[a7_1968 - 4:word32]
	d1_103 = d1_196 - 0x00000030
	d2_1005 = d1_196 - 0x00000030 + d0_186
	d0_159 = d0_210 & 0x00000004
	branch (d0_210 & 0x00000004) != 0x00000000 l00001530
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001578:
	Mem217[a7_1968 + 64:word32] = d2_1005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014DC:
	d0_159 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v37_232 = Mem143[d0_159:word32]
	Mem233[a7_1968 + 44:word32] = v37_232
	a2_135 = a2_135 + 1
	d3_1482 = d0_159 + 0x00000004
	a0_1447 = d0_159 + 0x00000004
	branch v37_232 >= 0x00000000 l00001508
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001508:
	Mem237[a7_1968 + 64:word32] = Mem233[a7_1968 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014F4:
	Mem240[a7_1968 + 72:word32] = Mem233[a7_1968 + 72:word32] | 0x00000004
	d0_159 = -Mem240[a7_1968 + 44:word32]
	Mem245[a7_1968 + 64:word32] = d0_159
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000157C:
	branch Mem248[a2_135:byte] != 0x2E l00001610
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001584:
	a2_135 = a2_135 + 1
	branch Mem248[a2_135:byte] != 0x2A l000015AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015AA:
	a0_1447 = 0x0000275D + (SEQ(SLICE(d0_159, word24, 8), Mem248[a2_135:byte]) & 0x000000FF)
	word32 d0_267 = (uint32) (uint8) Mem248[a0_1447:byte]
	d5_256 = 0
	d0_159 = d0_267 & 0x00000004
	branch (d0_267 & 0x00000004) == 0x00000000 l00001610
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015C8:
	word32 a7_275 = a7_1968 - 4
	Mem278[a7_275:word32] = d2_1005
	word32 d1_284 = __swap(10) *u SLICE(d5_256, word16, 0)
	word32 d1_292 = SEQ(SLICE(__swap(SEQ(SLICE(d1_284, word16, 16), SLICE(d1_284 + __swap(d5_256) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_293 = SLICE(d5_256, word16, 0) *u 10 + d1_292
	a2_135 = a2_135 + 1
	a0_1447 = 0x0000275D + (SEQ(SLICE(d0_293, word24, 8), Mem278[a2_135:byte]) & 0x000000FF)
	word32 d1_303 = (int32) (int16) (int8) SEQ(SLICE(d1_292, word24, 8), Mem278[a2_135:byte])
	word32 d0_317 = (uint32) (uint8) Mem278[a0_1447:byte]
	d2_1005 = Mem278[a7_275:word32]
	d1_103 = d1_303 - 0x00000030
	d5_256 = d1_303 - 0x00000030 + d0_293
	d0_159 = d0_317 & 0x00000004
	branch (d0_317 & 0x00000004) != 0x00000000 l000015C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000158C:
	d0_159 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v45_333 = Mem248[d0_159:word32]
	Mem335[a7_1968 + 44:word32] = v45_333
	a2_135 = a2_135 + 1
	d3_1482 = d0_159 + 0x00000004
	a0_1447 = d0_159 + 0x00000004
	branch v45_333 < 0x00000000 l00001610
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015A4:
	d5_256 = Mem335[a7_1968 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001610:
	word32 a7_1465 = a7_1968
	branch Mem341[a2_135:byte] == 0x68 l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001616:
	branch Mem341[a2_135:byte] == 0x6C l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000161C:
	branch Mem341[a2_135:byte] == 0x4C l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001622:
	branch Mem341[a2_135:byte] == 0x6A l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001628:
	branch Mem341[a2_135:byte] == 0x7A l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000162E:
	branch Mem341[a2_135:byte] != 0x74 l0000163A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001634:
	a2_135 = a2_135 + 1
	d4_376 = (int32) (int16) (int8) (uint32) (uint8) Mem341[a2_135:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000163A:
	branch d4_376 != 0x00000068 l0000164C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001642:
	branch Mem341[a2_135:byte] != 0x68 l0000164C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001648:
	d4_376 = 2
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000164C:
	branch d4_376 != 0x0000006C l0000165E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001654:
	branch Mem341[a2_135:byte] != 0x6C l0000165E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165A:
	d4_376 = 1
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165E:
	branch d4_376 != 0x0000006A l00001668
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001666:
	d4_376 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001668:
	branch d4_376 != 0x0000007A l00001672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001670:
	d4_376 = 108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001672:
	branch d4_376 != 0x00000074 l0000167C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000167A:
	d4_376 = 105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000167C:
	word32 d5_1481
	byte v101_428 = Mem341[a2_135:byte]
	word32 a2_1892 = a2_135 + 1
	word32 d1_1068 = SEQ(SLICE(d1_103, word24, 8), v101_428)
	word32 d0_1471 = SEQ(SLICE(d0_159, word24, 8), v101_428)
	branch v101_428 == 0x25 l00001B04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B04:
	Mem465[a7_1968 + 102:word32] = 0x00000001
	a3_1270 = 0x00001DAC
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001688:
	branch v101_428 == 0x58 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000168E:
	branch v101_428 == 0x63 l00001A84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A84:
	branch d4_376 != 0x0000006C l00001AA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AA0:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem510[a3_1270:byte] = Mem341[d0_1471 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A8C:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem521[a3_1270:byte] = Mem341[d0_1471 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AB2:
	a0_1447 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1482 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem525[a7_1968 + 102:word32] = 0x00000001
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001696:
	branch v101_428 == 0x64 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000169C:
	branch v101_428 == 0x69 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016A2:
	Mem535[a7_1968 + 44:byte] = v101_428
	branch v101_428 == 0x6E l00001B16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B16:
	branch d4_376 != 0x00000001 l00001B38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B38:
	branch d4_376 != 0x0000006C l00001B56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B56:
	branch d4_376 != 0x00000068 l00001B74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B74:
	branch d4_376 != 0x00000002 l00001B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B92:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem575[a0_1447:word32] = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B7C:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem587[a0_1447:byte] = SLICE(d6_1480, byte, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B5E:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem599[a0_1447:word16] = SLICE(d6_1480, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B40:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem611[a0_1447:word32] = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B1E:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1447 = Mem535[d0_1471:word32]
	Mem623[a0_1447 + 4:word32] = d6_1480
	Mem624[a0_1447:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BA6:
	d3_1482 = (d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem631[a7_1968 + 64:word32] = 0x00000000
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016AE:
	branch Mem535[a7_1968 + 44:byte] <=u 0x70 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016BC:
	byte v118_646 = Mem535[a7_1968 + 44:byte]
	branch v118_646 == 0x73 l00001AC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AC0:
	d0_1471 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3_1270 = Mem535[d0_1471:word32]
	Mem662[a7_1968 + 102:word32] = 0x00000000
	d3_1482 = d0_1471 + 0x00000004
	a0_1447 = d0_1471 + 0x00000004
	word32 a1_661 = a3_1270
	branch d5_256 == 0x00000000 l00001AE2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ADC:
	branch d5_256 - Mem662[a7_1968 + 102:word32] <=u 0x00000000 l00001AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AE2:
	branch Mem662[a3_1270:byte] == 0x00 l00001AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AE6:
	d0_1471 = Mem662[a7_1968 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AEA:
	d0_1471 = d0_1471 + 0x00000001
	a1_661 = a1_661 + 1
	branch d5_256 <=u 0x00000000 l00001AF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF2:
	branch d5_256 - d0_1471 <=u 0x00000000 l00001AFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF6:
	branch Mem662[a1_661:byte] != 0x00 l00001AEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AFA:
	Mem719[a7_1968 + 102:word32] = d0_1471
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AFE:
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016C8:
	branch v118_646 == 0x75 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016CE:
	branch v118_646 != 0x78 l00001BAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BAE:
	branch v101_428 != 0x00 l00001BB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BB2:
	a2_1892 = a2_1892 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BB4:
	d0_1471 = a2_1892 - a4_1925
	Mem756[a7_1968 + 102:word32] = d0_1471
	Mem758[a7_1968 + 64:word32] = 0x00000000
	a3_1270 = a4_1925
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016D6:
	branch v101_428 != 0x70 l000016E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016DC:
	Mem772[a7_1968 + 72:word32] = Mem770[a7_1968 + 72:word32] | 0x00000001
	d4_376 = 108
	d1_1068 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E8:
	word32 d3_1050
	word32 a7_1020
	branch SLICE(d1_1068, byte, 0) == 0x64 l000016F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016EE:
	branch SLICE(d1_1068, byte, 0) != 0x69 l00001840
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001840:
	branch d4_376 != 0x00000001 l00001864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001864:
	branch d4_376 != 0x0000006C l00001886
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001886:
	word32 d0_796 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem804[a7_1968 + 60:word32] = Mem801[d0_796:word32]
	Mem805[a7_1968 + 56:word32] = 0x00000000
	d3_1050 = d0_796 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000186C:
	word32 d0_813 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem819[a7_1968 + 60:word32] = Mem801[d0_813:word32]
	Mem820[a7_1968 + 56:word32] = 0x00000000
	d3_1050 = d0_813 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001848:
	word32 d0_828 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem834[a7_1968 + 60:word32] = Mem801[d0_828 + 0x00000004:word32]
	Mem836[a7_1968 + 56:word32] = Mem834[d0_828:word32]
	d3_1050 = d0_828 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000189E:
	branch d4_376 != 0x00000068 l000018BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018A6:
	word16 v264_844 = Mem843[a7_1968 + 62:word16]
	word32 a7_848 = a7_1968 - 4
	Mem851[a7_848:word32] = d1_1068
	Mem857[a7_848 + 64:word32] = (uint32) (uint16) v264_844
	Mem858[a7_848 + 60:word32] = 0x00000000
	d1_1068 = Mem858[a7_848:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018BA:
	branch d4_376 != 0x00000002 l000018D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018C2:
	byte v279_869 = Mem868[a7_1968 + 63:byte]
	word32 a7_873 = a7_1968 - 4
	Mem876[a7_873:word32] = d1_1068
	Mem882[a7_873 + 64:word32] = (uint32) (uint8) v279_869
	Mem883[a7_873 + 60:word32] = 0x00000000
	d1_1068 = Mem883[a7_873:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018D6:
	word32 d0_891 = Mem890[a7_1968 + 72:word32] & 1
	Mem894[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	a7_1020 = a7_1968
	branch d0_891 == 0x00000000 l00001974
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018E6:
	branch SLICE(d1_1068, byte, 0) != 0x6F l00001922
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018EC:
	branch d5_256 != 0x00000000 l00001916
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018F0:
	word32 a7_911 = a7_1968 - 4
	Mem913[a7_911:word32] = d0_891
	Mem916[a7_911 - 4:word32] = d1_1068
	word32 d0_917 = Mem916[a7_911 + 64:word32]
	word32 d1_918 = Mem916[a7_911 + 60:word32]
	Mem935[a7_911 - 8:word32] = d2_1005
	d2_1005 = Mem935[a7_911 - 8:word32]
	d1_1068 = Mem935[a7_911 - 4:word32]
	d0_891 = Mem935[a7_911:word32]
	branch d1_918 - (d0_917 <u 0x00000000) == 0x00000000 l00001922
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001916:
	Mem975[a7_1968 + 106:byte] = 0x30
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001922:
	a7_1020 = a7_1968
	branch SLICE(d1_1068, byte, 0) == 0x78 l00001932
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001928:
	Mem984[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	branch SLICE(d1_1068, byte, 0) != 0x58 l00001974
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001932:
	Mem991[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	word32 a7_992 = a7_1968 - 4
	Mem997[a7_992:word32] = d0_891
	Mem1000[a7_992 - 4:word32] = d1_1068
	word32 d0_1001 = Mem1000[a7_992 + 64:word32]
	word32 d1_1002 = Mem1000[a7_992 + 60:word32]
	Mem1008[a7_992 - 8:word32] = d2_1005
	word32 d1_1017 = Mem1008[a7_992 - 4:word32]
	a7_1020 = a7_992 + 4
	branch d1_1002 - (d0_1001 <u 0x00000000) == 0x00000000 l00001974
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000195C:
	Mem1028[a7_992 + 110 + d7_1024:byte] = 0x30
	word32 d7_1026 = d7_1024 + 0x00000001
	Mem1033[a7_992 + 110 + d7_1026:byte] = SLICE(d1_1017, byte, 0)
	Mem1035[a7_992 + 48:byte] = SLICE(d1_1017, byte, 0)
	d7_1024 = d7_1026 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016F6:
	word32 d0_1062
	branch d4_376 != 0x00000001 l0000171C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000171C:
	branch d4_376 != 0x0000006C l00001748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001748:
	word32 d0_1048 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1053 = Mem801[d0_1048:word32]
	Mem1056[a7_1968 + 52:word32] = d0_1053
	word32 a7_1057 = a7_1968 - 4
	Mem1060[a7_1057:word32] = d1_1068
	Mem1065[a7_1057 + 52:word32] = d0_1053 >> 31
	word32 v237_1066 = Mem1065[a7_1057:word32]
	d3_1050 = d0_1048 + 0x00000004
	d0_1062 = d0_1053 >> 31
	d1_1068 = v237_1066
	branch d4_376 != 0x00000068 l0000178E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001772:
	word16 v239_1072 = Mem1065[a7_1057 + 58:word16]
	Mem1077[a7_1057:word32] = v237_1066
	word32 d1_1081 = (int32) (int16) SEQ(SLICE(v237_1066, word16, 16), v239_1072)
	Mem1083[a7_1057 + 56:word32] = d1_1081
	Mem1086[a7_1057 - 4:word32] = SEQ(SLICE(d0_1053 >> 31, word16, 16), v239_1072)
	Mem1091[a7_1057 + 52:word32] = d1_1081 >> 31
	d1_1068 = Mem1091[a7_1057 - 4:word32]
	d0_1062 = Mem1091[a7_1057:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000178E:
	branch d4_376 != 0x00000002 l000017B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001796:
	byte v250_1105 = Mem1104[a7_1968 + 55:byte]
	word32 a7_1109 = a7_1968 - 4
	Mem1112[a7_1109:word32] = d1_1068
	word32 d1_1117 = (int32) (int16) (int8) SEQ(SLICE(d1_1068, word24, 8), v250_1105)
	Mem1119[a7_1109 + 56:word32] = d1_1117
	Mem1122[a7_1109 - 4:word32] = SEQ(SLICE(d0_1062, word24, 8), v250_1105)
	Mem1127[a7_1109 + 52:word32] = d1_1117 >> 31
	d1_1068 = Mem1127[a7_1109 - 4:word32]
	d0_1062 = Mem1127[a7_1109:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001724:
	word32 d0_1138 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1142 = Mem801[d0_1138:word32]
	Mem1144[a7_1968 + 52:word32] = d0_1142
	word32 a7_1145 = a7_1968 - 4
	Mem1147[a7_1145:word32] = d1_1068
	Mem1152[a7_1145 + 52:word32] = d0_1142 >> 31
	d3_1050 = d0_1138 + 0x00000004
	d0_1062 = d0_1142 >> 31
	d1_1068 = Mem1152[a7_1145:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016FE:
	d0_1062 = d3_1482 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1166[a7_1968 + 52:word32] = Mem801[d0_1062 + 0x00000004:word32]
	Mem1168[a7_1968 + 48:word32] = Mem1166[d0_1062:word32]
	d3_1050 = d0_1062 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017B4:
	Mem1173[a7_1968 + 44:byte] = SLICE(d1_1068, byte, 0)
	word32 a7_1174 = a7_1968 - 4
	Mem1177[a7_1174:word32] = d0_1062
	Mem1180[a7_1174 - 4:word32] = d1_1068
	word32 d0_1181 = Mem1180[a7_1174 + 56:word32]
	word32 d1_1182 = Mem1180[a7_1174 + 52:word32]
	Mem1188[a7_1174 - 8:word32] = d2_1005
	a7_1020 = a7_1174 + 4
	branch d1_1182 - (d0_1181 <u 0x00000000) >= 0x00000000 l000017FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017FE:
	byte v165_1202 = Mem1188[a7_1174 + 48:byte]
	branch (Mem1188[a7_1174 + 76:word32] & 16) == 0x00000000 l00001818
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001818:
	branch (Mem1188[a7_1174 + 76:word32] & 8) == 0x00000000 l0000182C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001820:
	Mem1225[a7_1174 + 110:byte] = 0x20
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000180A:
	Mem1232[a7_1174 + 110:byte] = 0x2B
	d7_1024 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000182C:
	Mem1237[a7_1174 + 64:word32] = Mem1235[a7_1174 + 56:word32]
	Mem1239[a7_1174 + 60:word32] = Mem1237[a7_1174 + 52:word32]
	Mem1242[a7_1174 + 48:byte] = v165_1202
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017DE:
	Mem1248[a7_1174 + 110:byte] = 0x2D
	d7_1024 = 0x00000001
	a7_1020 = Mem1248[a7_1174 + 0x00000040:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001974:
	byte v153_1266 = Mem1265[a7_1020 + 44:byte]
	a3_1270 = a7_1020 + 98
	branch v153_1266 == 0x78 l00001988
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001982:
	branch v153_1266 != 0x58 l00001992
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001992:
	branch v153_1266 != 0x6F l000019A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019A2:
	Mem1281[a7_1020 + 48:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001998:
	Mem1284[a7_1020 + 48:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019AA:
	Mem1289[a7_1020 + 44:word32] = Mem1287[a7_1020 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001988:
	Mem1293[a7_1020 + 44:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019B0:
	word32 a6_1305
	Mem1298[a7_1020 + 108:word32] = Mem1296[a7_1020 + 44:word32]
	branch v153_1266 == 0x58 l000019C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019C2:
	a6_1305 = 0x00001DC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019BC:
	a6_1305 = 0x00001DB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019C6:
	Mem1310[a7_1020 + 44:word32] = a6_1305
	Mem1326[a7_1020 + 124:word32] = d3_1050
	Mem1340[a7_1020 + 68:word32] = d5_256
	Mem1359[a7_1020 + 48:word32] = d6_1480
	Mem1367[a7_1020 + 98:word32] = d7_1024
	word32 v189_1368 = a7_1020 + 56
	word32 d6_1369 = Mem1367[v189_1368:word32]
	word32 d7_1371 = Mem1367[v189_1368 + 4:word32]
	word32 d3_1373 = Mem1367[a7_1020 + 102:word32]
	word32 a1_1375 = Mem1367[a7_1020 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019E8:
	word32 d1_1378 = Mem1377[a7_1020 + 108:word32]
	word32 a7_1383 = a7_1020 - 4
	Mem1385[a7_1383:word32] = d1_1378 >> 31
	Mem1388[a7_1383 - 4:word32] = d1_1378
	Mem1392[a7_1383 - 8:word32] = a1_1375
	Mem1395[a7_1383 - 12:word32] = d1_1378
	Mem1397[a7_1383 - 16:word32] = d1_1378 >> 31
	Mem1400[a7_1383 - 20:word32] = d7_1371
	Mem1403[a7_1383 - 24:word32] = d6_1369
	word32 d1_1406 = fn00002648(Mem1403[a7_1383 - 24:word32], Mem1403[a7_1383 - 20:word32], Mem1403[a7_1383 - 16:word32], Mem1403[a7_1383 - 12:word32])
	word32 v193_1414 = Mem1403[a7_1383 - 8:word32]
	word32 d1_1419 = Mem1403[a7_1383 - 4:word32]
	word32 d0_1421 = Mem1403[a7_1383:word32]
	a3_1270 = a3_1270 - 1
	Mem1428[a3_1270:byte] = Mem1403[v193_1414 + d1_1406:byte]
	Mem1431[a7_1383:word32] = d0_1421
	Mem1434[a7_1383 - 4:word32] = d1_1419
	Mem1437[a7_1383 - 8:word32] = v193_1414
	Mem1440[a7_1383 - 12:word32] = d1_1419
	Mem1442[a7_1383 - 16:word32] = d0_1421
	Mem1444[a7_1383 - 20:word32] = d7_1371
	Mem1446[a7_1383 - 24:word32] = d6_1369
	word32 d1_1450
	word32 d0_1449 = fn000023F8(Mem1446[a7_1383 - 24:word32], Mem1446[a7_1383 - 20:word32], Mem1446[a7_1383 - 16:word32], Mem1446[a7_1383 - 12:word32], out d1_1450, out a0_1447)
	a1_1375 = Mem1446[a7_1383 - 8:word32]
	d6_1369 = d0_1449
	d7_1371 = d1_1450
	a7_1465 = a7_1383 + 4
	d3_1373 = d3_1373 + 0x00000001
	d0_1471 = d1_1450
	branch d0_1449 - (d1_1450 <u 0x00000000) != 0x00000000 l000019E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A56:
	Mem1478[a7_1383 + 106:word32] = d3_1373
	d7_1024 = Mem1478[a7_1383 + 102:word32]
	d6_1480 = Mem1478[a7_1383 + 52:word32]
	d5_1481 = Mem1478[a7_1383 + 72:word32]
	d3_1482 = Mem1478[a7_1383 + 128:word32]
	branch d5_1481 != 0xFFFFFFFF l00001A78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A78:
	Mem1487[a7_1383 + 76:word32] = Mem1478[a7_1383 + 76:word32] & 0xFFFFFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A72:
	d5_1481 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BC4:
	branch d5_1481 - Mem1496[a7_1465 + 102:word32] >u 0x00000000 l00001BD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BD2:
	Mem1502[a7_1465 + 44:word32] = d5_1481
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BCA:
	Mem1505[a7_1465 + 44:word32] = Mem1496[a7_1465 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BD6:
	word32 a7_1508 = a7_1465 - 4
	Mem1516[a7_1508:word32] = d0_1471
	Mem1531[a7_1508 + 52:word32] = Mem1516[a7_1508 + 48:word32] + d7_1024
	Mem1537[a7_1508:word32] = Mem1531[a7_1508:word32]
	word32 d0_1541 = Mem1537[a7_1508:word32]
	branch Mem1537[a7_1508 + 52:word32] - Mem1537[a7_1508 + 68:word32] <u 0x00000000 l00001BFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BFA:
	Mem1546[a7_1508:word32] = d0_1541
	Mem1551[a7_1508 + 48:word32] = Mem1546[a7_1508 + 68:word32] - Mem1546[a7_1508 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BF4:
	Mem1556[a7_1508 + 48:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C0A:
	Mem1564[a7_1465 + 48:word32] = Mem1562[a7_1465 + 44:word32]
	word32 d0_1566 = Mem1564[a7_1465 + 72:word32] & 2
	branch d0_1566 == 0x00000000 l00001C4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C18:
	word32 d2_1571 = 0
	branch d7_1024 == 0x00000000 l00001C4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C1E:
	word32 a7_1578 = a7_1465 - 4
	Mem1581[a7_1578:word32] = a5_1579
	Mem1593[a7_1578 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1566, word24, 8), Mem1581[a7_1578 + 110 + d2_1571:byte])
	d0_1566 = fn00001DD8(Mem1593[a7_1578 - 4:word32], Mem1593[a7_1578:word32], out a0_1447, out a5_1579)
	branch d0_1566 != 0xFFFFFFFF l00001C44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C44:
	d2_1571 = d2_1571 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d7_1024 - d2_1571 >u 0x00000000 l00001C1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C4C:
	branch (Mem1619[a7_1465 + 72:word32] & 4) != 0x00000000 l00001C9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C54:
	word32 d2_1625 = 0
	branch Mem1619[a7_1465 + 48:word32] == 0x00000000 l00001C9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C5C:
	word32 d4_1630 = Mem1619[a7_1465 + 72:word32]
	word32 a4_1632 = Mem1619[a7_1465 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C64:
	word32 a0_1647
	word32 a7_1634 = a7_1465 - 4
	Mem1637[a7_1634:word32] = a5_1579
	branch (d4_1630 & 2) == 0x00000000 l00001C72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C72:
	a0_1647 = SEQ(SLICE(a0_1447, word16, 16), 0x0020)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C6C:
	a0_1647 = SEQ(SLICE(a0_1447, word16, 16), 0x0030)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C76:
	Mem1654[a7_1465 - 8:word32] = a0_1647
	branch fn00001DD8(Mem1654[a7_1465 - 8:word32], Mem1654[a7_1465 - 4:word32], out a0_1447, out a5_1579) != 0xFFFFFFFF l00001C8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C8E:
	d2_1625 = d2_1625 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a4_1632 - d2_1625 >u 0x00000000 l00001C64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C96:
	Mem1683[a7_1634 + 52:word32] = a4_1632
	Mem1686[a7_1634 + 76:word32] = d4_1630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C9E:
	word32 d0_1691 = Mem1690[a7_1465 + 72:word32] & 2
	branch d0_1691 != 0x00000000 l00001CDA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA6:
	word32 d2_1696 = 0
	branch d7_1024 == 0x00000000 l00001CDA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CAC:
	word32 a7_1706 = a7_1465 - 4
	Mem1709[a7_1706:word32] = a5_1579
	Mem1721[a7_1706 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1691, word24, 8), Mem1709[a7_1706 + 110 + d2_1696:byte])
	word32 a0_2918
	d0_1691 = fn00001DD8(Mem1721[a7_1706 - 4:word32], Mem1721[a7_1706:word32], out a0_2918, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001CD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CD2:
	d2_1696 = d2_1696 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d7_1024 - d2_1696 >u 0x00000000 l00001CAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CDA:
	word32 d2_1747 = Mem1746[a7_1465 + 102:word32]
	branch d5_1481 - Mem1746[a7_1465 + 102:word32] <=u 0x00000000 l00001D08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CE4:
	word32 a7_1761 = a7_1465 - 4
	Mem1764[a7_1761:word32] = a5_1579
	Mem1767[a7_1761 - 0x00000004:word32] = 0x00000030
	word32 a0_2919
	d0_1691 = fn00001DD8(Mem1767[a7_1761 - 0x00000004:word32], Mem1767[a7_1761:word32], out a0_2919, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D00:
	d2_1747 = d2_1747 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch d5_1481 - d2_1747 >u 0x00000000 l00001CE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D08:
	word32 d2_1791 = 0
	branch Mem1793[a7_1465 + 102:word32] == 0x00000000 l00001D3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D10:
	word32 a4_1798 = Mem1793[a7_1465 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D14:
	word32 a7_1800 = a7_1465 - 4
	Mem1803[a7_1800:word32] = a5_1579
	Mem1815[a7_1800 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_1691, word24, 8), Mem1803[a3_1270 + d2_1791:byte])
	word32 a0_2920
	d0_1691 = fn00001DD8(Mem1815[a7_1800 - 4:word32], Mem1815[a7_1800:word32], out a0_2920, out a5_1579)
	branch d0_1691 != 0xFFFFFFFF l00001D36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D36:
	d2_1791 = d2_1791 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a4_1798 - d2_1791 >u 0x00000000 l00001D14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D3E:
	d0 = Mem1841[a7_1465 + 72:word32] & 4
	branch d0 == 0x00000000 l00001D74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D46:
	word32 d2_1847 = 0
	branch Mem1841[a7_1465 + 48:word32] == 0x00000000 l00001D74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D4E:
	word32 a3_1852 = Mem1841[a7_1465 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D52:
	word32 a7_1854 = a7_1465 - 4
	Mem1857[a7_1854:word32] = a5_1579
	Mem1860[a7_1854 - 0x00000004:word32] = 0x00000020
	word32 a0_2921
	d0 = fn00001DD8(Mem1860[a7_1854 - 0x00000004:word32], Mem1860[a7_1854:word32], out a0_2921, out a5_1579)
	branch d0 != 0xFFFFFFFF l00001D6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D6C:
	d2_1847 = d2_1847 + 0x00000001
	d6_1480 = d6_1480 + 0x00000001
	branch a3_1852 - d2_1847 >u 0x00000000 l00001D52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D74:
	a7_1968 = a7_1465
	a4_1925 = a2_1892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D98:
	branch Mem1927[a4_1925:byte] != 0x00 l00001474
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D9E:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D68:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D32:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CFA:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CCC:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C88:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C3E:
	d0_1952 = d6_1480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA0:
	return d0_1952
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001458_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001DD8(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00001DD8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD8:
	word32 a0_104
	word32 d1_53
	Mem17[dwArg08 + 24:word32] = Mem11[dwArg08 + 24:word32] | 2
	word32 v13_19 = Mem17[dwArg08 + 20:word32] - 0x00000001
	Mem20[dwArg08 + 20:word32] = v13_19
	branch v13_19 < 0x00000000 l00001E1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DF4:
	branch dwArg04 != 10 l00001E06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DFA:
	branch (Mem20[dwArg08 + 24:word32] & 0x00000080) != 0x00000000 l00001E1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E1C:
	d1_53 = fn00001E34(dwArg04, dwArg08, out a0_104, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E06:
	a0_104 = Mem20[dwArg08 + 4:word32]
	Mem63[dwArg08 + 4:word32] = a0_104 + 1
	Mem66[a0_104:byte] = SLICE(dwArg04, byte, 0)
	d1_53 = (uint32) (uint8) Mem66[a0_104:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E2A:
	a0Out = a0_104
	a5Out = a5
	return d1_53
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001DD8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001E34(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn00001E34_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E34:
	word32 d0_109
	word32 a5_127 = fn000023C8()
	branch dwArg08 != 0x00000000 l00001E50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E50:
	branch (Mem29[dwArg08 + 24:word32] & 73) == 64 l00001E62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E62:
	branch Mem29[dwArg08 + 28:word32] != 0x00000000 l00001E80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E68:
	branch (Mem29[dwArg08 + 24:word32] & 4) == 0x00000000 l00001E78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E78:
	Mem62[dwArg08 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E70:
	Mem66[dwArg08 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E80:
	branch Mem69[dwArg08 + 8:word32] != 0x00000000 l00001EC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EC0:
	branch Mem69[dwArg08:word32] == 0x00000000 l00001F1A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F1A:
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EC4:
	word32 d0_101 = Mem69[dwArg08 + 24:word32] & 0x00000080
	branch d0_101 == 0x00000000 l00001EF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED0:
	d0_101 = 10
	branch dwArg04 != 10 l00001EF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EF0:
	word32 d4_95 = Mem69[dwArg08 + 4:word32] - Mem69[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_95 - d0_101 == 0x00000000 l00001F1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F0E:
	Mem108[dwArg08 + 24:word32] = Mem69[dwArg08 + 24:word32] | 16
	a0 = dwArg08 + 24
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED6:
	word32 a0_112 = Mem69[dwArg08 + 4:word32]
	Mem116[dwArg08 + 4:word32] = a0_112 + 1
	Mem118[a0_112:byte] = SLICE(dwArg04, byte, 0)
	d0_109 = fn00001F48(dwArg08, out a0, out a5_127)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E86:
	word32 d4_143
	branch (Mem69[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l00001E9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9A:
	d4_143 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E96:
	d4_143 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9C:
	word32 d0_160 = fn00001FF4(d4_143 + Mem69[dwArg08 + 28:word32], out a0)
	branch d0_160 != 0x00000000 l00001EB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB6:
	Mem174[dwArg08 + 8:word32] = d0_160 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F1E:
	Mem181[dwArg08 + 24:word32] = Mem179[dwArg08 + 24:word32] | 2
	a0 = Mem181[dwArg08 + 8:word32]
	Mem188[a0:byte] = SLICE(dwArg04, byte, 0)
	Mem192[dwArg08 + 4:word32] = Mem188[dwArg08 + 8:word32] + 1
	Mem197[dwArg08 + 20:word32] = Mem192[dwArg08 + 28:word32] - 0x00000001
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB0:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E5C:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E4A:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F42:
	a0Out = a0
	a5Out = a5_127
	return d0_109
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001E34_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F48(word32 dwArg04, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn00001F48_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F48:
	word32 d0_153
	word32 a5_23 = fn000023C8()
	branch dwArg04 != 0x00000000 l00001F5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F5E:
	branch Mem17[dwArg04 + 28:word32] != 0x00000000 l00001F7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F64:
	branch (Mem17[dwArg04 + 24:word32] & 4) == 0x00000000 l00001F74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F74:
	Mem42[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F6C:
	Mem46[dwArg04 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F7C:
	branch Mem49[dwArg04 + 8:word32] != 0x00000000 l00001F86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F86:
	word32 d0_55 = Mem49[dwArg04 + 24:word32] & 2
	branch d0_55 == 0x00000000 l00001FCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F8E:
	branch Mem49[dwArg04:word32] == 0x00000000 l00001FBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FBC:
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F92:
	word32 d4_68 = Mem49[dwArg04 + 4:word32] - Mem49[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_68 - d0_55 == 0x00000000 l00001FC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC0:
	Mem78[dwArg04 + 4:word32] = Mem49[dwArg04 + 8:word32]
	Mem80[dwArg04 + 20:word32] = Mem78[dwArg04 + 28:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FCC:
	Mem87[dwArg04 + 24:word32] = Mem85[dwArg04 + 24:word32] & -4
	a0 = dwArg04 + 24
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB0:
	Mem93[dwArg04 + 24:word32] = Mem49[dwArg04 + 24:word32] | 16
	a0 = dwArg04 + 24
	d0_153 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F82:
	d0_153 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F5A:
	d0_153 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FD6:
	a0Out = a0
	a5Out = a5_23
	return d0_153
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F48_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001FF4(word32 dwArg04, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 d0
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn00001FF4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF4:
	word32 d0_106
	branch dwArg04 != 0x00000000 l00002002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002002:
	branch Mem5[0x00002BC0:word32] != 0x00000000 l00002026
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000200A:
	word32 a0_13 = Mem5[0x00002BBC:word32]
	Mem21[0x00000000:word32] = 0x00000000
	Mem36[0x00002BC0:word32] = fn000022E8(dwLoc10, a0_13, a0_13, out a0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002026:
	branch Mem39[0x00002BC0:word32] != 0x00000000 l00002032
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002032:
	word32 d0_58 = fn000021C4(Mem51[0x00002BC0:word32], dwArg04 + 4, out a0)
	branch d0_58 != 0x00000000 l00002050
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002050:
	Mem72[d0_58:word32] = dwArg04
	a0 = d0_58 + 4
	d0_106 = d0_58 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000204C:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000202E:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FFE:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002058:
	a0Out = a0
	return d0_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001FF4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002060(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00002060_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002060:
	branch dwArg04 == 0x00000000 l0000208A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000206A:
	branch Mem0[0x00002BC0:word32] == 0x00000000 l0000208A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002072:
	fn00002128(Mem23[0x00002BC0:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000208A:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002060_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002128(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn00002128_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002128:
	branch Mem20[Mem20[0x00002B8C:word32] + 20:word16] <u 0x0027 l00002158
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002158:
	branch dwArg04 == 0x00000000 l000021BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000215C:
	branch dwArg08 == 0x00000000 l000021BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002160:
	word32 a3_36 = dwArg08 + -12
	branch dwArg0C - Mem20[dwArg04 + 20:word32] >=u 0x00000000 l000021A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000216C:
	word32 a2_40 = dwArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000216E:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0x00000000 l000021BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002174:
	branch Mem20[a2_40 + 8:byte] == 0x00 l0000216E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000217A:
	branch dwArg08 - Mem20[a2_40 + 20:word32] <u 0x00000000 l0000216E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002180:
	branch dwArg08 - Mem20[a2_40 + 24:word32] >=u 0x00000000 l0000216E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002186:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28:word32] - Mem20[dwArg04 + 16:word32] != 0x00000000 l000021BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021A0:
	a3_36 = a2_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021A2:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4
	FreeMem(a3_74, Mem20[a3_74:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002146:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021BC:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002128_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000021C4(word32 dwArg04, word32 dwArg08, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn000021C4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021C4:
	word32 d0_158
	word32 a0_115 = Mem26[0x00002B8C:word32]
	branch Mem26[a0_115 + 20:word16] <u 0x0027 l000021F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021F0:
	word32 a3_120 = 0x00000000
	branch dwArg04 == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021F8:
	branch dwArg08 == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021FE:
	branch dwArg08 - Mem26[dwArg04 + 20:word32] >=u 0x00000000 l000022B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022B2:
	word32 d0_50 = AllocMem(dwArg08 + 16, Mem26[dwArg04 + 12:word32])
	a3_120 = d0_50
	branch d0_50 == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022CC:
	Mem56[d0_50:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_50 + 4)
	Mem62[d0_50 + 12:word32] = 0x00000000
	a0_115 = dwArg04
	a3_120 = d0_50 + 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002206:
	word32 a5_162 = Mem26[dwArg04:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002208:
	branch Mem26[a5_162:word32] == 0x00000000 l0000222A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000222A:
	word32 d3_77 = Mem26[dwArg04 + 16:word32] + 40
	word32 d0_82 = AllocMem(d3_77, Mem26[dwArg04 + 12:word32])
	a3_120 = d0_82
	branch d0_82 == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002248:
	Mem88[d0_82:word32] = d3_77
	Mem91[d0_82 + 12:byte] = 0x0A
	Mem95[d0_82 + 20:word32] = d0_82 + 40
	Mem97[d0_82 + 24:word32] = d0_82 + 40
	Mem99[Mem97[d0_82 + 20:word32]:word32] = 0x00000000
	word32 a2_100 = Mem99[d0_82 + 20:word32]
	Mem103[a2_100 + 4:word32] = Mem99[dwArg04 + 16:word32]
	Mem106[d0_82 + 32:word32] = Mem103[a2_100 + 4:word32]
	Mem110[d0_82 + 28:word32] = Mem106[d0_82 + 32:word32] + Mem106[d0_82 + 20:word32]
	AddHead(dwArg04, d0_82 + 4)
	a0_115 = d0_82 + 4
	a3_120 = Allocate(d0_82 + 4, dwArg08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000220C:
	branch Mem26[a5_162 + 8:byte] == 0x00 l00002226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002212:
	word32 d0_128 = Allocate(a5_162, dwArg08)
	a0_115 = a5_162
	a3_120 = d0_128
	branch d0_128 != 0x00000000 l00002296
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002296:
	branch (Mem135[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022A2:
	word32 a2_142 = a3_120
	word32 d2_145 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022A8:
	Mem148[a2_142:word32] = 0x00000000
	word32 a2_149 = a2_142 + 4
	Mem150[a2_149:word32] = 0x00000000
	a2_142 = a2_149 + 4
	d2_145 = d2_145 - 0x00000001
	branch d2_145 != 0x00000000 l000022A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022B0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E0:
	d0_158 = a3_120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002226:
	a5_162 = Mem26[a5_162:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021DE:
	a0_115 = dwArg04
	d0_158 = AllocPooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E2:
	a0Out = a0_115
	return d0_158
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000021C4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000022E8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn000022E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E8:
	word32 d0_51
	word32 a0_17 = Mem14[0x00002B8C:word32]
	branch Mem14[a0_17 + 20:word16] <u 0x0027 l00002316
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002316:
	word32 a1_21 = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l00002350
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000231C:
	word32 d0_30 = AllocMem(24, 0)
	a1_21 = d0_30
	branch d0_30 == 0x00000000 l00002350
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002332:
	Mem37[d0_30:word32] = d0_30 + 4
	Mem38[d0_30 + 4:word32] = 0x00000000
	Mem40[d0_30 + 8:word32] = d0_30
	Mem42[d0_30 + 12:word32] = dwArg04
	Mem46[d0_30 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem48[d0_30 + 20:word32] = dwArg0C
	a0_17 = d0_30 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002350:
	d0_51 = a1_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002302:
	d0_51 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002352:
	a0Out = a0_17
	return d0_51
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000022E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002358(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn00002358_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002358:
	branch Mem11[Mem11[0x00002B8C:word32] + 20:word16] <u 0x0027 l0000237C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000237C:
	branch dwArg04 == 0x00000000 l000023C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002380:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0x00000000 l000023B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002392:
	word32 a2_29 = a2_24 - 4
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0x00000000 l00002392
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B2:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000236E:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023C0:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002358_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000023C8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a5
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn000023C8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023C8:
	SetSignal(0, 0x00001000)
	branch 0x00000000 == 0x00000000 l000023F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023E6:
	a5 = fn0000131C(0x00000014)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023F2:
	return a5
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000023C8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000023F8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn000023F8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023F8:
	word32 d0_196
	word32 d1_142 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_166 = dwArg10
	branch dwArg0C != 0x00000000 l0000244E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000244E:
	branch dwArg04 - dwArg0C >=u 0x00000000 l00002458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002458:
	word32 d4_29 = 24
	word32 d6_30 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l00002476
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002462:
	d4_29 = 16
	d6_30 = __rol(d6_30, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l00002476
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000246A:
	d4_29 = 8
	d6_30 = __rol(d6_30, 0x00000008)
	branch SLICE(d6_30, byte, 0) != 0x00 l00002476
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002472:
	d4_29 = 0
	d6_30 = SEQ(SLICE(d6_30, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002476:
	word32 d4_61 = SEQ(SLICE(d4_29, word24, 8), SLICE(d4_29, byte, 0) + Mem17[0x00002BC4 + (int32) ((int16) SEQ(SLICE(d6_30, word16, 16), SLICE(d6_30, word16, 0) & 0x00FF)):byte])
	word32 d5_63 = 32 - d4_61
	branch d5_63 != 0x00000000 l00002496
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002496:
	word32 d1_86
	word32 d2_322
	word32 d0_85 = fn000024FC(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_322)
	word32 d3_72 = dwArg10 << d5_63
	word32 d5_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u SLICE(d5_101, word16, 0)
	word32 d2_107 = __swap(d0_85 *u SLICE(d3_72, word16, 0))
	word16 v34_108 = SLICE(d2_107 + d3_102, word16, 0)
	word16 v35_109 = SLICE(d2_107, word16, 16)
	word32 d4_104 = d0_85 *u SLICE(d6_103, word16, 0)
	word16 v39_116 = SLICE(SEQ(v35_109, v34_108) + d4_104, word16, 0)
	word32 d6_82 = dwArg08 << d5_63
	word32 d2_124 = __swap(SEQ(v35_109, v39_116))
	word32 d5_105 = d5_101 *u SLICE(d6_103, word16, 0)
	a0_20 = d6_82
	d1_142 = d0_85
	word32 v48_134 = d1_86 - ((__swap(SEQ(SLICE(d3_102, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_104, word16, 16), 0x0000))) + SEQ(SLICE(d5_105, word16, 16), (SLICE(d5_105, word16, 0) + (v34_108 <u 0x0000)) + (v39_116 <u 0x0000)))
	branch v48_134 <u 0x00000000 l000024F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024EC:
	branch v48_134 != 0x00000000 l000024F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024EE:
	branch d6_82 - d2_124 >=u 0x00000000 l000024F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024F2:
	d1_142 = d0_85 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000248A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002492
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000248E:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002452
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002492:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002452:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002410:
	branch dwArg04 - dwArg10 >=u 0x00000000 l00002422
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002422:
	branch dwArg10 != 0x00000000 l0000242E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002426:
	d3_166 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000242E:
	word32 d1_175
	word32 d2_176
	word32 d0_174 = fn000024FC(0, dwArg04, d3_166, out d1_175, out d2_176)
	word32 d2_321
	word32 d1_320
	d1_142 = fn000024FC(d1_175, dwArg08, d2_176, out d1_320, out d2_321)
	d0_196 = d0_174
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002414:
	word32 d2_319
	word32 d1_318
	d1_142 = fn000024FC(dwArg04, dwArg08, dwArg10, out d1_318, out d2_319)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024F4:
	d0_196 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024F6:
	d1Out = d1_142
	a0Out = a0_20
	return d0_196
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000023F8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000024FC(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn000024FC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024FC:
	word32 d7_13 = d2
	branch d2 == 0x00000000 l00002516
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002504:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0x00000000 l00002524
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002524:
	word32 d2_22 = __swap(d2)
	branch SLICE(d2_22, word16, 0) != 0x0000 l0000254C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000254C:
	byte bLoc26_362 = 0x00
	word32 d0_44 = 0
	branch d2 < 0x00000000 l00002568
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000255E:
	d6_17 = d6_17 * 0x00000002
	d0_44 = SEQ(SLICE(d0_44, word16, 16), SLICE(d0_44, word16, 0) + 0x0001)
	d5_19 = d5_19 * 0x00000002 + (d6_17 <u 0x00000000)
	d7_13 = d7_13 * 0x00000002
	branch d7_13 > 0x00000000 l0000255E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002568:
	word16 v41_64 = SLICE(d0_44, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000256A:
	word32 d1_104
	word32 d2_73 = __swap(d5_19)
	word32 d3_74 = __swap(d7_13)
	branch SLICE(d2_73 - d3_74, word16, 0) != 0x0000 l0000257C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000257C:
	d1_104 = __swap(SEQ(SLICE(__swap(SEQ((uint16) (d5_19 % SLICE(d3_74, uint16, 0)), (uint16) (d5_19 /u SLICE(d3_74, uint16, 0)))), word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002576:
	d1_104 = 0x0000FFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002586:
	word32 d6_98 = __swap(SEQ(SLICE(d6_17, word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000258C:
	word32 d4_113 = __swap(d5_19 - __swap(d7_13) *u SLICE(d1_104, word16, 0))
	word16 wLoc22_442 = SLICE(dwLoc24, word16, 0)
	word32 d2_106 = d1_104 *u SLICE(d7_13, word16, 0)
	word32 d4_121 = SEQ(SLICE(d4_113, word16, 16), SLICE(d6_98, word16, 0))
	branch SLICE(d4_113, word16, 0) != 0x0000 l000025AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A4:
	branch d2_106 - d4_121 <=u 0x00000000 l000025AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025AC:
	word32 d6_133 = __swap(d1_104)
	word32 d3_140 = __swap(d6_133)
	word32 d4_142 = __swap(d7_13)
	word32 d5_141 = d7_13 *u SLICE(d3_140, word16, 0)
	word32 d6_146 = __swap(d6_133 *u SLICE(d7_13, word16, 0))
	word16 v56_147 = SLICE(d6_146 + d5_141, word16, 0)
	word16 v57_148 = SLICE(d6_146, word16, 16)
	word32 d2_143 = d6_133 *u SLICE(d4_142, word16, 0)
	word16 v60_155 = SLICE(SEQ(v57_148, v56_147) + d2_143, word16, 0)
	word32 d3_144 = d3_140 *u SLICE(d4_142, word16, 0)
	word32 d6_178 = d6_17 - __swap(SEQ(v57_148, v60_155))
	word32 d5_181 = d5_19 - ((__swap(SEQ(SLICE(d5_141, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d2_143, word16, 16), 0x0000))) + SEQ(SLICE(d3_144, word16, 16), (SLICE(d3_144, word16, 0) + (v56_147 <u 0x0000)) + (v60_155 <u 0x0000))) - (d6_178 <u 0x00000000)
	branch d5_181 >=u 0x00000000 l00002604
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025EE:
	d6_178 = d6_178 + SEQ(SLICE(__swap(d7_13), word16, 16), 0x0000)
	d1_104 = d1_104 - 0x00000001
	d5_181 = d5_181 + (d6_178 <u 0x00000000) + __swap(SEQ(SLICE(d7_13, word16, 16), 0x0000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002604:
	branch bLoc26_362 != 0x00 l00002620
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002620:
	word32 d6_220 = __swap(SEQ(SLICE(d6_178, word16, 16), SLICE(d5_181, word16, 0)))
	d0 = SEQ(SLICE(dwLoc24, word16, 16), SLICE(d1_104, word16, 0))
	word32 d5_221 = __swap(d5_181)
	word16 v83_224 = SLICE(d7_13, word16, 16)
	branch v41_64 == 0x0000 l0000263A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002630:
	word32 d7_230 = SEQ(v83_224, v41_64 - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002632:
	d5_221 = d5_221 >>u 0x00000001
	word16 v87_241 = SLICE(d7_230, word16, 0)
	d6_220 = __rcr(d6_220, 0x00000001, SLICE(cond(d5_221), bool, 4))
	d7_230 = SEQ(SLICE(d7_230, word16, 16), v87_241 - 1)
	branch v87_241 != 0x0000 l00002632
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000263A:
	d1 = d6_220
	d2 = d2_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000260A:
	word32 d5_266 = __swap(d5_181)
	word32 d6_267 = __swap(d6_178)
	d5_19 = SEQ(SLICE(d5_266, word16, 16), SLICE(d6_267, word16, 0))
	d6_17 = SEQ(SLICE(d6_267, word16, 16), 0x0000)
	bLoc26_362 = true
	dwLoc24 = SEQ(SLICE(d1_104, word16, 0), wLoc22_442) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A8:
	d1_104 = d1_104 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252A:
	word32 d0_281 = __swap(d0)
	word32 d1_282 = __swap(d1)
	word32 d0_285 = SEQ(SLICE(d0_281, word16, 16), SLICE(d1_282, word16, 0))
	word32 d0_295 = SEQ((uint16) (d0_285 % SLICE(d2, uint16, 0)), SLICE(__swap(d1_282), word16, 0))
	d2 = SEQ(SLICE(__swap((uint32) (uint16) (d0_285 /u SLICE(d2, uint16, 0))), word16, 16), (uint16) (d0_295 /u SLICE(d2, uint16, 0)))
	d1 = __swap(SEQ((uint16) (d0_295 % SLICE(d2, uint16, 0)), 0x0000))
	d0 = d2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000250A:
	branch d1 == 0x00000000 l00002642
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002510:
	branch d2 - d1 >u 0x00000000 l00002642
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002516:
	d0 = fn00002AFA(d1, d2, d2, out d1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002642:
	d1Out = d1
	d2Out = d2
	return d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000024FC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002648(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn00002648_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002648:
	word32 d1_171 = dwArg08
	word32 d3_202 = dwArg10
	branch dwArg0C != 0x00000000 l0000269A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000269A:
	branch dwArg04 - dwArg0C <u 0x00000000 l00002754
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026A0:
	word32 d4_32 = 24
	word32 d6_33 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000026BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026AA:
	d4_32 = 16
	d6_33 = __rol(d6_33, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000026BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026B2:
	d4_32 = 8
	d6_33 = __rol(d6_33, 0x00000008)
	branch SLICE(d6_33, byte, 0) != 0x00 l000026BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026BA:
	d4_32 = 0
	d6_33 = SEQ(SLICE(d6_33, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026BE:
	word32 d4_64 = SEQ(SLICE(d4_32, word24, 8), SLICE(d4_32, byte, 0) + Mem20[0x00002BC4 + (int32) ((int16) SEQ(SLICE(d6_33, word16, 16), SLICE(d6_33, word16, 0) & 0x00FF)):byte])
	word32 d5_66 = 32 - d4_64
	branch d5_66 != 0x00000000 l000026E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E0:
	word32 d1_89
	word32 d2_90
	word32 d0_88 = fn000024FC(dwArg04 >>u d4_64, dwArg04 << d5_66 | dwArg08 >>u d4_64, dwArg0C << d5_66 | dwArg10 >>u d4_64, out d1_89, out d2_90)
	word32 d3_75 = dwArg10 << d5_66
	word32 d7_104 = __swap(d0_88)
	word32 d6_106 = __swap(d3_75)
	word32 d3_105 = d3_75 *u SLICE(d7_104, word16, 0)
	word32 d2_110 = __swap(d0_88 *u SLICE(d3_75, word16, 0))
	word16 v36_111 = SLICE(d2_110 + d3_105, word16, 0)
	word16 v37_112 = SLICE(d2_110, word16, 16)
	word32 d4_107 = d0_88 *u SLICE(d6_106, word16, 0)
	word16 v40_119 = SLICE(SEQ(v37_112, v36_111) + d4_107, word16, 0)
	word32 d2_127 = __swap(SEQ(v37_112, v40_119))
	word32 d7_108 = d7_104 *u SLICE(d6_106, word16, 0)
	word32 d6_85 = dwArg08 << d5_66
	word32 d3_135 = __swap(SEQ(SLICE(d3_105, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_107, word16, 16), 0x0000)) + SEQ(SLICE(d7_108, word16, 16), (SLICE(d7_108, word16, 0) + (v36_111 <u 0x0000)) + (v40_119 <u 0x0000))
	word32 v49_137 = d1_89 - d2_127
	branch v49_137 <u 0x00000000 l0000273C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002736:
	branch v49_137 != 0x00000000 l00002740
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002738:
	branch d6_85 - d3_135 >=u 0x00000000 l00002740
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000273C:
	d3_135 = d3_135 - d3_75
	d2_127 = d2_127 - d2_90 - (d3_135 <u 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002740:
	word32 d6_157 = d6_85 - d3_135
	d1_171 = d1_89 - d2_127 - (d6_157 <u 0x00000000) << 32 - d5_66 | d6_157 >>u d5_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D2:
	branch dwArg0C - dwArg04 <u 0x00000000 l000026DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D6:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002754
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026DA:
	d1_171 = dwArg08 - dwArg10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002660:
	branch dwArg04 - dwArg10 >=u 0x00000000 l00002672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002672:
	branch dwArg10 != 0x00000000 l0000267E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002676:
	d3_202 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000267E:
	word32 d1_211
	word32 d2_212
	fn000024FC(0, dwArg04, d3_202, out d1_211, out d2_212)
	word32 d2_355
	fn000024FC(d1_211, dwArg08, d2_212, out d1_171, out d2_355)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002664:
	word32 d2_354
	fn000024FC(dwArg04, dwArg08, dwArg10, out d1_171, out d2_354)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002754:
	return d1_171
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002648_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002A44(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002A44_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A44:
	branch dwArg04 == 0x00000000 l00002A5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A5C:
	word32 a2_10 = Mem5[0x00002CF0:word32]
	branch a2_10 == 0x00000000 l00002A82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A66:
	branch (Mem16[a2_10 + 24:word32] & 2) == 0x00000000 l00002A78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A6E:
	word32 a0_103
	word32 a5_104
	fn00001F48(a2_10, out a0_103, out a5_104)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A78:
	a2_10 = Mem41[a2_10 + 12:word32]
	branch a2_10 != 0x00000000 l00002A66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A50:
	word32 a0_50
	word32 a5_53
	fn00001F48(dwArg04, out a0_50, out a5_53)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A82:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002A44_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002A88(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX d0 d1
// Preserved: a7
fn00002A88_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A88:
	branch dwArg08 < 0x00000000 l00002A9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A9C:
	word32 d1_13 = -dwArg08
	branch dwArg04 < 0x00000000 l00002AB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AB2:
	word32 d1_23
	fn00002AFA(-dwArg04, d1_13, d2, out d1_23)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AA2:
	word32 d1_34
	fn00002AFA(dwArg04, d1_13, d2, out d1_34)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A92:
	branch dwArg04 < 0x00000000 l00002AA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AA8:
	word32 d1_49
	fn00002AFA(-dwArg04, dwArg08, d2, out d1_49)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A96:
	word32 d1_60
	fn00002AFA(dwArg04, dwArg08, d2, out d1_60)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002A88_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002AC8(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn00002AC8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AC8:
	branch dwArg04 > 0x00000000 l00002AE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AE8:
	branch dwArg08 > 0x00000000 l00002AEA_thunk_fn00002AFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AEA_thunk_fn00002AFA:
	word32 d1_88
	return fn00002AFA(dwArg04, dwArg08, d2, out d1_88)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AEC:
	word32 d1_89
	return -fn00002AFA(dwArg04, -dwArg08, d2, out d1_89)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AD2:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0x00000000 l00002AE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AE0:
	word32 d1_43
	return -fn00002AFA(d0_36, dwArg08, d2, out d1_43)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AD8:
	word32 d1_55
	return fn00002AFA(d0_36, -dwArg08, d2, out d1_55)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002AC8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002AFA(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn00002AFA_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AFA:
	word32 d1_22 = __swap(d1)
	word16 v10_9 = SLICE(d1_22, word16, 0)
	word16 v11_10 = SLICE(d2, word16, 16)
	word32 d2_11 = SEQ(v11_10, v10_9)
	branch v10_9 != 0x0000 l00002B20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B20:
	word32 d3_18 = 16
	branch SLICE(d1_22, word16, 0) >=u 0x0080 l00002B2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B2A:
	d1_22 = __rol(d1_22, 0x00000008)
	d3_18 = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B2E:
	branch SLICE(d1_22, word16, 0) >=u 0x0800 l00002B38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B34:
	d1_22 = __rol(d1_22, 0x00000004)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0004)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B38:
	branch SLICE(d1_22, word16, 0) >=u 0x2000 l00002B42
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B3E:
	d1_22 = __rol(d1_22, 0x00000002)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0002)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B42:
	branch SLICE(d1_22, word16, 0) < 0x0000 l00002B4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B46:
	d1_22 = __rol(d1_22, 0x00000001)
	d3_18 = SEQ(SLICE(d3_18, word16, 16), SLICE(d3_18, word16, 0) - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B4A:
	word32 d0_71 = d0 >>u d3_18
	word32 d2_75 = SEQ(SLICE(__swap(SEQ(v11_10, SLICE(d0, word16, 0))), word16, 16), 0x0000) >>u d3_18
	word16 v53_82 = SLICE(__swap(d3_18), word16, 16)
	uint16 v51_79 = (uint16) (d0_71 /u SLICE(d1_22, uint16, 0))
	word32 d1_90 = __swap(d1_22)
	word32 d3_102 = SEQ(v53_82, v51_79)
	word32 d0_108 = SEQ((uint16) (d0_71 % SLICE(d1_22, uint16, 0)), SLICE(d2_75, word16, 0)) - SEQ(SLICE(d2_75, word16, 16), v51_79) *u SLICE(d1_90, word16, 0)
	branch d0_108 >=u 0x00000000 l00002B6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B66:
	d3_102 = SEQ(v53_82, v51_79 - 0x0001)
	d0_108 = d0_108 + d1_90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B6A:
	branch d0_108 >=u 0x00000000 l00002B6A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B6C:
	d1Out = __swap(__rol(d0_108, __swap(d3_102)))
	return (uint32) (uint16) SLICE(d3_102, word16, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B02:
	word32 d0_134 = __swap(d0)
	word32 d1_135 = __swap(d1_22)
	word16 v14_137 = SLICE(d0_134, word16, 0)
	word32 d2_139 = SEQ(SLICE(__swap(d2_11), word16, 16), v14_137)
	branch v14_137 == 0x0000 l00002B10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B0C:
	uint16 v17_143 = (uint16) (d2_139 /u SLICE(d1_135, uint16, 0))
	d2_139 = SEQ((uint16) (d2_139 % SLICE(d1_135, uint16, 0)), v17_143)
	d0_134 = SEQ(SLICE(d0_134, word16, 16), v17_143)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B10:
	word32 d0_150 = __swap(d0_134)
	word32 d2_154 = SEQ(SLICE(d2_139, word16, 16), SLICE(d0_150, word16, 0))
	uint16 v34_157 = (uint16) (d2_154 /u SLICE(d1_135, uint16, 0))
	d1Out = SEQ(SLICE(d1_135, word16, 16), SLICE(__swap(SEQ((uint16) (d2_154 % SLICE(d1_135, uint16, 0)), v34_157)), word16, 0))
	return SEQ(SLICE(d0_150, word16, 16), v34_157)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002AFA_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



