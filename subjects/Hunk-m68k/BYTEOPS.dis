void fn00001000(word32 d0, word32 d6, word32 d7, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31] d6:[0..31] d7:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn00001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001000:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000100A:
	word32 a6_9 = Mem0[0x00000004:word32]
	word32 d2_102 = d0
	word32 a2_196 = a0
	branch Mem0[a6_9 + 20:word16] >=u 0x0024 l00001036
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001020:
	word32 a0_13 = 0x00002B88
	word32 d0_16 = 0x0000ABAE >>u 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001030:
	Mem19[a0_13:word32] = 0x00000000
	a0_13 = a0_13 + 4
	d0_16 = d0_16 - 0x00000001
	branch d0_16 != 0x00000000 l00001030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001036:
	Mem30[0x00002B88:word32] = fp
	Mem34[0x00002B8C:word32] = a6_9
	word32 d0_37 = FindTask(0x00000000)
	word32 a1_255 = 0x000012BC
	word32 d0_112 = OpenLibrary(0x000012BC, 0)
	branch d0_112 == 0x00000000 l00001226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001226:
	Alert(0x00038007)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001056:
	word32 d4_75
	Mem68[0x00002B90:word32] = d0_112
	branch Mem68[d0_37 + 172:word32] != 0x00000000 l00001066
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001066:
	word32 a0_74 = a0
	d4_75 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000106A:
	branch Mem68[a0_750:byte] != 0x20 l00001072
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001070:
	d4_75 = DPB(d4_75, (word16) d4_75 + 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001072:
	a0_74 = a0_750 + 1
	a0_750 = a0_74
	branch Mem68[a0_750:byte] != 0x00 l0000106A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001060:
	d4_75 = 2
	d2_102 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001076:
	word32 d0_100 = d4_75 << 0x00000002
	word32 d0_107 = d0_100 + d2_102
	word32 d1_111 = 0x00010001
	d0_112 = AllocMem(d0_107 + 0x00000011, 0x00010001)
	branch d0_112 == 0x00000000 l0000123E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000123E:
	CloseLibrary(Mem68[0x00002B90:word32])
	Alert(0x00010000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000125C:
	branch Mem153[d0_37 + 172:word32] != 0x00000000 l00001268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001262:
	fn00001214(d0_37)
	fn0000126C(d0_112)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001268:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001096:
	word32 dwLoc0C_617
	word32 a6_235
	word32 a0_436
	Mem169[d0_112:word32] = d0_107 + 0x00000011
	Mem173[d0_112 + 12:word32] = d4_75 - 0x00000001
	Mem177[d0_112 + 8:word32] = d0_112 + 16 + d0_100
	Mem179[0x00000000:word32] = 0x00000000
	word32 d0_180 = Mem179[d0_37 + 172:word32]
	branch d0_180 == 0x00000000 l00001190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001190:
	fn00001214(d0_37)
	Mem187[0x00002B94:word32] = d0_180
	Mem189[0x00002B98:word32] = d0_180
	Mem194[0x00000000:word32] = 0x00000000
	dwLoc0C_617 = d0_180
	a2_196 = d0_180
	word32 d0_197 = Mem194[d0_180 + 36:word32]
	branch d0_197 == 0x00000000 l000011B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011AE:
	Enable()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011B6:
	Supervisor(d0_112)
	Mem209[d0_112 + 4:word32] = d0_197
	d1_111 = 0x000012C8
	d2_102 = 0x000003ED
	branch d0_197 != 0x00000000 l000011D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011D2:
	Mem214[0x00002B9C:word32] = d0_197
	Mem216[0x00002BA0:word32] = d0_197
	Mem218[0x00002BA4:word32] = d0_197
	Mem221[d0_37 + 156:word32] = d0_197
	Mem223[d0_37 + 160:word32] = d0_197
	word32 d0_227 = Mem223[(d0_197 << 0x00000002) + 8:word32]
	branch d0_227 == 0x00000000 l000011F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F0:
	Mem231[d0_37 + 164:word32] = d0_227
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F4:
	a6_235 = Mem234[0x00002B8C:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CE_thunk_fn0000127C:
	fn0000127C(20, out a4_746, out a5_747)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010B6:
	word32 d0_252 = Mem179[(d0_180 << 0x00000002) + 16:word32]
	a1_255 = Mem179[d0_112 + 8:word32]
	word32 a0_260 = (d0_252 << 0x00000002) + 1
	word32 d0_261 = (int32) Mem179[d0_252 << 0x00000002:byte]
	Mem262[a0_260 + d0_261:byte] = 0x00
	Mem264[d0_112 + 16:word32] = a0_260
	word32 a6_265 = d0_112 + 20
	word32 d3_266 = 1
	word32 a0_271 = a0 + d2_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DA:
	a0_271 = a0_271 - 1
	branch Mem264[a0_271:byte] >u 0x20 l000010E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DE_1:
	d2_102 = d2_102 - 0x00000001
	branch d2_102 != 0xFFFFFFFF l000010DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E2:
	Mem281[a0_271 + 1:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E6:
	byte v37_288 = Mem287[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v37_288, 0)
	branch v37_288 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010EA:
	branch v37_288 == 0x20 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F0:
	branch v37_288 == 0x09 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F6:
	branch d3_266 - Mem287[d0_112 + 12:word32] == 0x00000000 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010FC:
	Mem308[a6_265:word32] = a1_255
	a6_265 = a6_265 + 4
	d3_266 = DPB(d3_266, (word16) d3_266 + 0x0001, 0)
	branch v37_288 == 0x22 l0000111A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111A:
	byte v64_318 = Mem317[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v64_318, 0)
	branch v64_318 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111E:
	branch v64_318 == 0x22 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001124:
	branch v64_318 != 0x2A l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000112A:
	byte v67_330 = Mem317[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v67_330, 0)
	d2_102 = DPB(d2_102, v67_330 & 0xDF, 0)
	branch (v67_330 & 0xDF) != 0x4E l0000113C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000113C:
	branch (v67_330 & 0xDF) != 0x45 l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001142:
	d1_111 = 27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001138:
	d1_111 = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001144:
	Mem352[a1_255:byte] = (byte) d1_111
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001106:
	Mem356[a1_255:byte] = v37_288
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001108:
	byte v45_361 = Mem360[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v45_361, 0)
	branch v45_361 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001148:
	Mem369[a1_255:byte] = 0x00
	Mem374[a6_265:word32] = 0x00000000
	execPrivate4()
	Mem405[0x00002B9C:word32] = d0_261
	execPrivate5()
	Mem407[0x00002BA0:word32] = d0_261
	a6_235 = Mem407[0x00002B8C:word32]
	dwLoc0C_617 = d0_112 + 16
	dwLoc10 = d3_266
	branch Mem407[a6_235 + 20:word16] <u 0x0024 l0000117A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001172:
	word32 v81_417 = Mem407[d0_37 + 224:word32]
	Mem418[0x00002BA4:word32] = v81_417
	branch v81_417 != 0x00000000 l0000117E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117A:
	Mem424[0x00002BA4:word32] = d0_261
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117E:
	branch Mem428[d0_37 + 8:byte] != 0x0D l000011F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F8:
	a0_436 = Mem434[d0_37 + 58:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001186:
	word32 a0_439 = Mem428[d0_37 + 176:word32]
	a0_436 = a0_439 + 4 - Mem428[a0_439:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001202:
	Mem450[0x00002BB0:word32] = a0_436
	Mem458[0x00002BB4:word32] = fp - 16
	fn00001354(d1_111, d2_102, d6, d7, a0_436, a1_255, a2_196, d0_37, 0x0000AB7E, d0_112, a6_235, dwLoc10, dwLoc0C_617)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001212_thunk_fn0000127C:
	fn0000127C(0, out a4_748, out a5_749)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000110C:
	branch v45_361 == 0x20 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001116:
	Mem560[a1_255:byte] = 0x00
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001112:
	Mem567[a1_255:byte] = v45_361
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001214_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000126C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001278(word32 dwArg04, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a4 a5
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1 d2
// Preserved:
fn00001278_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278_thunk_fn0000127C:
	word32 a4_8
	word32 a5_9
	word32 a1_6 = fn0000127C(dwArg04, out a4_8, out a5_9)
	a4Out = a4_8
	a5Out = a5_9
	return a1_6
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001278_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000127C(word32 d2, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31]
// LiveOut: a1 a4 a5
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000127C:
	word32 a7_4 = Mem0[0x00002B88:word32]
	word32 v8_9 = Mem0[a7_4 - 4:word32]
	word32 v6_6 = Mem0[a7_4 - 8:word32]
	branch Mem0[v8_9 + 4:word32] == 0x00000000 l0000129E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001296:
	execPrivate1()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000129E:
	CloseLibrary(Mem0[0x00002B90:word32])
	branch v6_6 == 0x00000000 l000012B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012AE:
	fn0000126C(v6_6)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012B0:
	FreeMem(v8_9, Mem0[v8_9:word32])
	a4Out = 0x0000AB7E
	a5Out = v8_9
	return v8_9
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000127C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000012D0(word32 d1, word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a4 a5
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012D0:
	branch 0x00002CD0 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012E2:
	word32 d2_16 = 1
	branch Mem11[0x00002CD4:word32] == 0x00000000 l000012F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012EA:
	d2_16 = d2_16 + 0x00000001
	branch Mem11[0x00002CD0 + (d2_16 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012F6:
	word32 d2_33 = d2_16 - 0x00000001
	branch d2_33 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012FA:
	word32 d0_38 = d2_33 << 0x00000002
	word32 a2_42 = Mem11[0x00002CD0 + d0_38:word32]
	call a2_42 (retsize: 4;)
		uses: a1:a1,a2:a2_42,a3:0x00002CD0,a4:a4,a5:a5,a6:a6,a7:fp - 12,d0:d0_38,d1:d1,d2:d2_36,Stack +0000:dwLoc10,Stack +0004:d2,Stack +0008:a2,Stack +000C:a3,Stack +0014:dwArg04
	d2_33 = d2_33 - 0x00000001
	branch d2_33 != 0x00000000 l000012FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001308:
	word32 a4_61
	word32 a5_62
	word32 a1_59 = fn00001278(dwArg04, out a4_61, out a5_62)
	a4Out = a4_61
	a5Out = a5_62
	return a1_59
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000012D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000131C(word32 d1, word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a4 a5
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000131C:
	branch Mem8[0x00002BB8:word32] != 0x00000000 l0000134E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001328:
	word32 a3_13 = Mem8[0x00002CE0:word32]
	Mem16[0x00002BB8:word32] = 1
	word32 d0_17 = a3_13
	branch a3_13 == 0x00000000 l00001346
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000133A:
	a2 = Mem16[a3_13 + 4:word32]
	call a2 (retsize: 4;)
		uses: a1:a1,a2:a2_22,a3:a3_20,a4:a4,a5:a5,a6:a6,a7:fp - 8,d0:d0_24,d1:d1,d2:d2,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04
	a3_13 = Mem16[a3_13:word32]
	d0_17 = a3_13
	branch a3_13 != 0x00000000 l0000133A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001346:
	a1 = fn000012D0(d1, d2, a1, a2, a3_13, a4, a5, a6, dwArg04, out a4, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000134E:
	a4Out = a4
	a5Out = a5
	return a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000131C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001354(word32 d1, word32 d2, word32 d6, word32 d7, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] d1:[0..31] d2:[0..31] d6:[0..31] d7:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1 d6 d7
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001354:
	word32 a3_17 = 0x00002CC8
	word32 d0_10 = 0x00002CC4
	branch 0x00002CC4 == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001366:
	branch Mem8[0x00002CC8:word32] == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000136A:
	word32 v11_19 = Mem8[a3_17:word32]
	a3_17 = a3_17 + 4
	call v11_19 (retsize: 4;)
		uses: a0:a0_85,a1:a1,a2:v11_19,a3:a3_20,a4:a4,a5:a5,a6:a6,a7:fp - 8,d0:d0_23,d1:d1,d2:d2,d6:d6,d7:d7,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04,Stack +0014:dwArg08,Stack +FFFFFFF8:dwLoc14,Stack +FFFFFFFC:dwLoc10
		defs: a0:a0_86,d0:d0_24
	branch Mem8[a3_17:word32] != 0x00000000 l0000136A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001372:
	word32 a1_49
	word32 a2_50
	word32 a3_51
	word32 a4_52
	word32 a5_53
	word32 a6_54
	word32 d1_56
	fn0000131C(d1_56, d2, a1_49, a2_50, a3_51, a4_52, a5_53, a6_54, fn00001390(d2, a1, a3_17, out d1_56, out a1_49, out a2_50, out a3_51, out a4_52, out a5_53, out a6_54), out a4_120, out a5_121)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001354_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001390(word32 d2, word32 a1, word32 a3, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] d2:[1..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d6 d7
// Preserved: a7 d2 d3 d4 d5
fn00001390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001390:
	word32 d2_15 = DPB(d2, true, 0)
	byte v9_17 = (byte) (DPB(d3, 0x8F, 0) + d2_15)
	word32 d0_23 = (int32) (byte) (d2_15 - DPB(d3, v9_17, 0))
	word32 d1_26 = (int32) v9_17
	word32 d4_31 = __swap(d0_23) *u (word16) d1_26
	byte v24_40 = (byte) (d0_23 *u (word16) d1_26 + DPB(__swap(DPB(d4_31, (word16) (d4_31 + __swap(d1_26) *u (word16) d0_23), 0)), 0x0000, 0))
	word32 d2_41 = DPB(d2, v24_40, 0)
	fn00002A88(d2_41, (int32) (byte) fn00002AC8(d2_41, (int32) v9_17, (int32) v24_40), (int32) v24_40)
	word32 a1_132
	word32 a2_133
	word32 a3_134
	word32 a4_135
	word32 a5_136
	word32 a6_137
	word32 d1_139
	word32 d0_138 = fn0000143C((int32) (byte) ((int32) v24_40 << 0x00000005), a1, a3, 0x0000142C, out d1_139, out a1_132, out a2_133, out a3_134, out a4_135, out a5_136, out a6_137)
	d1Out = d1_139
	a1Out = a1_132
	a2Out = a2_133
	a3Out = a3_134
	a4Out = a4_135
	a5Out = a5_136
	a6Out = a6_137
	return d0_138
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000143C(word32 d0, word32 a1, word32 a3, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] d0:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a7
fn0000143C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000143C:
	word32 a2_19
	word32 a3_20
	word32 a4_21
	word32 a5_22
	word32 a6_23
	word32 a1_32
	word32 d1_33
	word32 d0_25 = fn00001458(d0, a1, a3, Mem10[0x00002CE8:word32], dwArg04, fp + 8, out d1_33, out a1_32, out a2_19, out a3_20, out a4_21, out a5_22, out a6_23)
	d1Out = d1_33
	a1Out = a1_32
	a2Out = a2_19
	a3Out = a3_20
	a4Out = a4_21
	a5Out = a5_22
	a6Out = a6_23
	return d0_25
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000143C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001458(word32 d0, word32 a1, word32 a3, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn00001458_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001458:
	word32 d0_1935
	word32 a7_1578 = fp + -112
	word32 d3_1453 = dwArg0C
	word32 a5_1550 = dwArg04
	word32 a4_1605 = dwArg08
	word32 d6_1451 = 0
	branch Mem36[dwArg08:byte] == 0x00 l00001D9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001474:
	branch Mem46[a4_1605:byte] != 0x25 l00001D78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D78:
	word32 a7_51 = a7_1578 - 4
	Mem54[a7_51:word32] = a5_1550
	Mem63[a7_51 - 4:word32] = (int32) (int16) Mem54[a4_1605:byte]
	a4_1605 = a4_1605 + 1
	d0 = fn00001DD8(a1, a3, a4_1605, a5_1550, Mem63[a7_51 - 4:word32], Mem63[a7_51:word32], out d1, out a0_67, out a1, out a5_1550)
	a7_1578 = a7_51 + 4
	branch d0 != 0xFFFFFFFF l00001D96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D96:
	d6_1451 = d6_1451 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D92:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000147C:
	Mem86[a7_1578 + 64:word32] = 0x00000000
	Mem88[a7_1578 + 72:word32] = 0x00000000
	Mem92[a7_1578 + 102:word32] = 0x00000000
	word32 d5_249 = -1
	word32 d4_361 = 105
	a3 = a7_1578 + 76
	word32 d7_1001 = 0
	word32 a2_135 = a4_1605 + 1
	word32 d2_130 = Mem92[a7_1578 + 72:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000149A:
	word32 d1_104 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000149C:
	word32 a7_100 = a7_1578 - 4
	Mem103[a7_100:word32] = d0
	d0 = Mem103[a7_100:word32]
	branch Mem103[0x00001DB0 + d1_104:byte] - Mem103[a2_135:byte] != 0x00 l000014C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014C0:
	d1_104 = d1_104 + 0x00000001
	branch d1_104 <u 0x00000005 l0000149C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014AE:
	Mem121[a7_100:word32] = d1_104
	word32 d1_123 = 1 << d1_104
	d0 = d1_123
	d1_104 = Mem121[a7_100:word32]
	d2_130 = d2_130 | d1_123
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014CA:
	branch d1_104 <u 0x00000005 l0000149A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D2:
	word32 a0_1418
	word32 d0_157
	Mem143[a7_1578 + 72:word32] = d2_130
	branch Mem143[a2_135:byte] != 0x2A l00001510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001510:
	a0_1418 = 0x0000275D + (DPB(d0, Mem143[a2_135:byte], 0) & 0x000000FF)
	word32 d0_156 = (int32) Mem143[a0_1418:byte]
	d0_157 = d0_156 & 0x00000004
	branch (d0_156 & 0x00000004) == 0x00000000 l0000157C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000152C:
	d2_130 = Mem143[a7_1578 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001530:
	Mem169[a7_1578 - 4:word32] = d3_1453
	word32 d1_175 = __swap(10) *u (word16) d2_130
	word32 d0_182 = (word16) d2_130 *u 10 + DPB(__swap(DPB(d1_175, (word16) (d1_175 + __swap(d2_130) *u 0x000A), 0)), 0x0000, 0)
	a2_135 = a2_135 + 1
	a0_1418 = 0x0000275D + (DPB(d0_182, Mem169[a2_135:byte], 0) & 0x000000FF)
	word32 d1_191 = (int32) (int16) Mem169[a2_135:byte]
	word32 d0_203 = (int32) Mem169[a0_1418:byte]
	d3_1453 = Mem169[a7_1578 - 4:word32]
	d1_104 = d1_191 - 0x00000030
	d2_130 = d1_191 - 0x00000030 + d0_182
	d0_157 = d0_203 & 0x00000004
	branch (d0_203 & 0x00000004) != 0x00000000 l00001530
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001578:
	Mem210[a7_1578 + 64:word32] = d2_130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014DC:
	d0_157 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v36_225 = Mem143[d0_157:word32]
	Mem226[a7_1578 + 44:word32] = v36_225
	a2_135 = a2_135 + 1
	d3_1453 = d0_157 + 0x00000004
	a0_1418 = d0_157 + 0x00000004
	branch v36_225 >= 0x00000000 l00001508
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001508:
	Mem230[a7_1578 + 64:word32] = Mem226[a7_1578 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014F4:
	Mem233[a7_1578 + 72:word32] = Mem226[a7_1578 + 72:word32] | 0x00000004
	d0_157 = -Mem233[a7_1578 + 44:word32]
	Mem238[a7_1578 + 64:word32] = d0_157
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000157C:
	branch Mem241[a2_135:byte] != 0x2E l00001610
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001584:
	a2_135 = a2_135 + 1
	branch Mem241[a2_135:byte] != 0x2A l000015AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015AA:
	a0_1418 = 0x0000275D + (DPB(d0_157, Mem241[a2_135:byte], 0) & 0x000000FF)
	word32 d0_258 = (int32) Mem241[a0_1418:byte]
	d5_249 = 0
	d0_157 = d0_258 & 0x00000004
	branch (d0_258 & 0x00000004) == 0x00000000 l00001610
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015C8:
	word32 a7_266 = a7_1578 - 4
	Mem269[a7_266:word32] = d2_130
	word32 d1_275 = __swap(10) *u (word16) d5_249
	word32 d0_282 = (word16) d5_249 *u 10 + DPB(__swap(DPB(d1_275, (word16) (d1_275 + __swap(d5_249) *u 0x000A), 0)), 0x0000, 0)
	a2_135 = a2_135 + 1
	a0_1418 = 0x0000275D + (DPB(d0_282, Mem269[a2_135:byte], 0) & 0x000000FF)
	word32 d1_291 = (int32) (int16) Mem269[a2_135:byte]
	word32 d0_303 = (int32) Mem269[a0_1418:byte]
	d2_130 = Mem269[a7_266:word32]
	d1_104 = d1_291 - 0x00000030
	d5_249 = d1_291 - 0x00000030 + d0_282
	d0_157 = d0_303 & 0x00000004
	branch (d0_303 & 0x00000004) != 0x00000000 l000015C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000158C:
	d0_157 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v44_319 = Mem241[d0_157:word32]
	Mem321[a7_1578 + 44:word32] = v44_319
	a2_135 = a2_135 + 1
	d3_1453 = d0_157 + 0x00000004
	a0_1418 = d0_157 + 0x00000004
	branch v44_319 < 0x00000000 l00001610
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015A4:
	d5_249 = Mem321[a7_1578 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001610:
	word32 a7_1436 = a7_1578
	branch Mem327[a2_135:byte] == 0x68 l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001616:
	branch Mem327[a2_135:byte] == 0x6C l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000161C:
	branch Mem327[a2_135:byte] == 0x4C l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001622:
	branch Mem327[a2_135:byte] == 0x6A l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001628:
	branch Mem327[a2_135:byte] == 0x7A l00001634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000162E:
	branch Mem327[a2_135:byte] != 0x74 l0000163A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001634:
	a2_135 = a2_135 + 1
	d4_361 = (int32) (int16) Mem327[a2_135:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000163A:
	branch d4_361 != 0x00000068 l0000164C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001642:
	branch Mem327[a2_135:byte] != 0x68 l0000164C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001648:
	d4_361 = 2
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000164C:
	branch d4_361 != 0x0000006C l0000165E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001654:
	branch Mem327[a2_135:byte] != 0x6C l0000165E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165A:
	d4_361 = 1
	a2_135 = a2_135 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165E:
	branch d4_361 != 0x0000006A l00001668
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001666:
	d4_361 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001668:
	branch d4_361 != 0x0000007A l00001672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001670:
	d4_361 = 108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001672:
	branch d4_361 != 0x00000074 l0000167C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000167A:
	d4_361 = 105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000167C:
	word32 d5_1452
	byte v84_413 = Mem327[a2_135:byte]
	word32 a2_1875 = a2_135 + 1
	d1 = DPB(d1_104, v84_413, 0)
	word32 d0_1442 = DPB(d0_157, v84_413, 0)
	branch v84_413 == 0x25 l00001B04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B04:
	Mem448[a7_1578 + 102:word32] = 0x00000001
	a3 = 0x00001DAC
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001688:
	branch v84_413 == 0x58 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000168E:
	branch v84_413 == 0x63 l00001A84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A84:
	branch d4_361 != 0x0000006C l00001AA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AA0:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem493[a3:byte] = Mem327[d0_1442 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A8C:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem504[a3:byte] = Mem327[d0_1442 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AB2:
	a0_1418 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1453 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem508[a7_1578 + 102:word32] = 0x00000001
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001696:
	branch v84_413 == 0x64 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000169C:
	branch v84_413 == 0x69 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016A2:
	Mem518[a7_1578 + 44:byte] = v84_413
	branch v84_413 == 0x6E l00001B16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B16:
	branch d4_361 != 0x00000001 l00001B38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B38:
	branch d4_361 != 0x0000006C l00001B56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B56:
	branch d4_361 != 0x00000068 l00001B74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B74:
	branch d4_361 != 0x00000002 l00001B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B92:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem558[a0_1418:word32] = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B7C:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem570[a0_1418:byte] = (byte) d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B5E:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem582[a0_1418:word16] = (word16) d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B40:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem594[a0_1418:word32] = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B1E:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem518[d0_1442:word32]
	Mem606[a0_1418 + 4:word32] = d6_1451
	Mem607[a0_1418:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BA6:
	d3_1453 = (d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem614[a7_1578 + 64:word32] = 0x00000000
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016AE:
	branch Mem518[a7_1578 + 44:byte] <=u 0x70 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016BC:
	byte v97_627 = Mem518[a7_1578 + 44:byte]
	branch v97_627 == 0x73 l00001AC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AC0:
	d0_1442 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3 = Mem518[d0_1442:word32]
	Mem642[a7_1578 + 102:word32] = 0x00000000
	d3_1453 = d0_1442 + 0x00000004
	a0_1418 = d0_1442 + 0x00000004
	a1 = a3
	branch d5_249 == 0x00000000 l00001AE2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ADC:
	branch d5_249 - Mem642[a7_1578 + 102:word32] <=u 0x00000000 l00001AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AE2:
	branch Mem642[a3:byte] == 0x00 l00001AFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AE6:
	d0_1442 = Mem642[a7_1578 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AEA:
	d0_1442 = d0_1442 + 0x00000001
	a1 = a1 + 1
	branch d5_249 <=u 0x00000000 l00001AF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF2:
	branch d5_249 - d0_1442 <=u 0x00000000 l00001AFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF6:
	branch Mem642[a1:byte] != 0x00 l00001AEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AFA:
	Mem700[a7_1578 + 102:word32] = d0_1442
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AFE:
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016C8:
	branch v97_627 == 0x75 l000016D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016CE:
	branch v97_627 != 0x78 l00001BAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BAE:
	branch v84_413 != 0x00 l00001BB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BB2:
	a2_1875 = a2_1875 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BB4:
	d0_1442 = a2_1875 - a4_1605
	Mem737[a7_1578 + 102:word32] = d0_1442
	Mem739[a7_1578 + 64:word32] = 0x00000000
	a3 = a4_1605
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016D6:
	branch v84_413 != 0x70 l000016E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016DC:
	Mem753[a7_1578 + 72:word32] = Mem751[a7_1578 + 72:word32] | 0x00000001
	d4_361 = 108
	d1 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E8:
	word32 d3_1027
	word32 a7_1173
	branch (byte) d1 == 0x64 l000016F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016EE:
	branch (byte) d1 != 0x69 l00001840
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001840:
	branch d4_361 != 0x00000001 l00001864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001864:
	branch d4_361 != 0x0000006C l00001886
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001886:
	word32 d0_777 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem785[a7_1578 + 60:word32] = Mem782[d0_777:word32]
	Mem786[a7_1578 + 56:word32] = 0x00000000
	d3_1027 = d0_777 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000186C:
	word32 d0_794 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem800[a7_1578 + 60:word32] = Mem782[d0_794:word32]
	Mem801[a7_1578 + 56:word32] = 0x00000000
	d3_1027 = d0_794 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001848:
	word32 d0_809 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem815[a7_1578 + 60:word32] = Mem782[d0_809 + 0x00000004:word32]
	Mem817[a7_1578 + 56:word32] = Mem815[d0_809:word32]
	d3_1027 = d0_809 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000189E:
	branch d4_361 != 0x00000068 l000018BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018A6:
	word16 v231_825 = Mem824[a7_1578 + 62:word16]
	word32 a7_828 = a7_1578 - 4
	Mem831[a7_828:word32] = d1
	Mem836[a7_828 + 64:word32] = (int32) v231_825
	Mem837[a7_828 + 60:word32] = 0x00000000
	d1 = Mem837[a7_828:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018BA:
	branch d4_361 != 0x00000002 l000018D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018C2:
	byte v244_848 = Mem847[a7_1578 + 63:byte]
	word32 a7_851 = a7_1578 - 4
	Mem854[a7_851:word32] = d1
	Mem859[a7_851 + 64:word32] = (int32) v244_848
	Mem860[a7_851 + 60:word32] = 0x00000000
	d1 = Mem860[a7_851:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018D6:
	word32 d0_868 = Mem867[a7_1578 + 72:word32] & 1
	Mem871[a7_1578 + 44:byte] = (byte) d1
	a7_1173 = a7_1578
	branch d0_868 == 0x00000000 l00001974
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018E6:
	branch (byte) d1 != 0x6F l00001922
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018EC:
	branch d5_249 != 0x00000000 l00001916
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018F0:
	word32 a7_888 = a7_1578 - 4
	Mem890[a7_888:word32] = d0_868
	Mem893[a7_888 - 4:word32] = d1
	word32 d0_894 = Mem893[a7_888 + 64:word32]
	word32 d1_895 = Mem893[a7_888 + 60:word32]
	Mem912[a7_888 - 8:word32] = d2_130
	d2_130 = Mem912[a7_888 - 8:word32]
	d1 = Mem912[a7_888 - 4:word32]
	d0_868 = Mem912[a7_888:word32]
	branch d1_895 - (d0_894 <u 0x00000000) == 0x00000000 l00001922
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001916:
	Mem952[a7_1578 + 106:byte] = 0x30
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001922:
	a7_1173 = a7_1578
	branch (byte) d1 == 0x78 l00001932
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001928:
	Mem961[a7_1578 + 44:byte] = (byte) d1
	branch (byte) d1 != 0x58 l00001974
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001932:
	Mem968[a7_1578 + 44:byte] = (byte) d1
	word32 a7_969 = a7_1578 - 4
	Mem974[a7_969:word32] = d0_868
	Mem977[a7_969 - 4:word32] = d1
	word32 d0_978 = Mem977[a7_969 + 64:word32]
	word32 d1_979 = Mem977[a7_969 + 60:word32]
	Mem985[a7_969 - 8:word32] = d2_130
	word32 d1_994 = Mem985[a7_969 - 4:word32]
	a7_1173 = a7_969 + 4
	branch d1_979 - (d0_978 <u 0x00000000) == 0x00000000 l00001974
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000195C:
	Mem1005[a7_969 + 110 + d7_1001:byte] = 0x30
	word32 d7_1003 = d7_1001 + 0x00000001
	Mem1010[a7_969 + 110 + d7_1003:byte] = (byte) d1_994
	Mem1012[a7_969 + 48:byte] = (byte) d1_994
	d7_1001 = d7_1003 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016F6:
	word32 d0_1039
	branch d4_361 != 0x00000001 l0000171C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000171C:
	branch d4_361 != 0x0000006C l00001748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001748:
	word32 d0_1025 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1030 = Mem782[d0_1025:word32]
	Mem1033[a7_1578 + 52:word32] = d0_1030
	word32 a7_1034 = a7_1578 - 4
	Mem1037[a7_1034:word32] = d1
	Mem1042[a7_1034 + 52:word32] = d0_1030 >> 31
	word32 v208_1043 = Mem1042[a7_1034:word32]
	d3_1027 = d0_1025 + 0x00000004
	d0_1039 = d0_1030 >> 31
	d1 = v208_1043
	branch d4_361 != 0x00000068 l0000178E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001772:
	word16 v210_1049 = Mem1042[a7_1034 + 58:word16]
	Mem1053[a7_1034:word32] = v208_1043
	word32 d1_1056 = (int32) v210_1049
	Mem1058[a7_1034 + 56:word32] = d1_1056
	Mem1061[a7_1034 - 4:word32] = DPB(d0_1030 >> 31, v210_1049, 0)
	Mem1066[a7_1034 + 52:word32] = d1_1056 >> 31
	d1 = Mem1066[a7_1034 - 4:word32]
	d0_1039 = Mem1066[a7_1034:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000178E:
	branch d4_361 != 0x00000002 l000017B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001796:
	byte v219_1080 = Mem1079[a7_1578 + 55:byte]
	word32 a7_1083 = a7_1578 - 4
	Mem1086[a7_1083:word32] = d1
	word32 d1_1090 = (int32) (int16) v219_1080
	Mem1092[a7_1083 + 56:word32] = d1_1090
	Mem1095[a7_1083 - 4:word32] = DPB(d0_1039, v219_1080, 0)
	Mem1100[a7_1083 + 52:word32] = d1_1090 >> 31
	d1 = Mem1100[a7_1083 - 4:word32]
	d0_1039 = Mem1100[a7_1083:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001724:
	word32 d0_1111 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1115 = Mem782[d0_1111:word32]
	Mem1117[a7_1578 + 52:word32] = d0_1115
	word32 a7_1118 = a7_1578 - 4
	Mem1120[a7_1118:word32] = d1
	Mem1125[a7_1118 + 52:word32] = d0_1115 >> 31
	d3_1027 = d0_1111 + 0x00000004
	d0_1039 = d0_1115 >> 31
	d1 = Mem1125[a7_1118:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016FE:
	d0_1039 = d3_1453 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1139[a7_1578 + 52:word32] = Mem782[d0_1039 + 0x00000004:word32]
	Mem1141[a7_1578 + 48:word32] = Mem1139[d0_1039:word32]
	d3_1027 = d0_1039 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017B4:
	Mem1146[a7_1578 + 44:byte] = (byte) d1
	word32 a7_1147 = a7_1578 - 4
	Mem1150[a7_1147:word32] = d0_1039
	Mem1153[a7_1147 - 4:word32] = d1
	word32 d0_1154 = Mem1153[a7_1147 + 56:word32]
	word32 d1_1155 = Mem1153[a7_1147 + 52:word32]
	Mem1161[a7_1147 - 8:word32] = d2_130
	a7_1173 = a7_1147 + 4
	branch d1_1155 - (d0_1154 <u 0x00000000) >= 0x00000000 l000017FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017FE:
	byte v142_1175 = Mem1161[a7_1147 + 48:byte]
	branch (Mem1161[a7_1147 + 76:word32] & 16) == 0x00000000 l00001818
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001818:
	branch (Mem1161[a7_1147 + 76:word32] & 8) == 0x00000000 l0000182C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001820:
	Mem1197[a7_1147 + 110:byte] = 0x20
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000180A:
	Mem1204[a7_1147 + 110:byte] = 0x2B
	d7_1001 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000182C:
	Mem1209[a7_1147 + 64:word32] = Mem1207[a7_1147 + 56:word32]
	Mem1211[a7_1147 + 60:word32] = Mem1209[a7_1147 + 52:word32]
	Mem1214[a7_1147 + 48:byte] = v142_1175
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017DE:
	Mem1220[a7_1147 + 110:byte] = 0x2D
	d7_1001 = 0x00000001
	a7_1173 = Mem1220[a7_1147 + 0x00000040:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001974:
	byte v131_1238 = Mem1237[a7_1173 + 44:byte]
	a3 = a7_1173 + 98
	branch v131_1238 == 0x78 l00001988
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001982:
	branch v131_1238 != 0x58 l00001992
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001992:
	branch v131_1238 != 0x6F l000019A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019A2:
	Mem1252[a7_1173 + 48:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001998:
	Mem1255[a7_1173 + 48:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019AA:
	Mem1260[a7_1173 + 44:word32] = Mem1258[a7_1173 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001988:
	Mem1264[a7_1173 + 44:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019B0:
	word32 a6_1276
	Mem1269[a7_1173 + 108:word32] = Mem1267[a7_1173 + 44:word32]
	branch v131_1238 == 0x58 l000019C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019C2:
	a6_1276 = 0x00001DC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019BC:
	a6_1276 = 0x00001DB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019C6:
	Mem1281[a7_1173 + 44:word32] = a6_1276
	Mem1297[a7_1173 + 124:word32] = d3_1027
	Mem1311[a7_1173 + 68:word32] = d5_249
	Mem1330[a7_1173 + 48:word32] = d6_1451
	Mem1338[a7_1173 + 98:word32] = d7_1001
	word32 v164_1339 = a7_1173 + 56
	word32 d6_1340 = Mem1338[v164_1339:word32]
	word32 d7_1342 = Mem1338[v164_1339 + 4:word32]
	word32 d3_1344 = Mem1338[a7_1173 + 102:word32]
	a1 = Mem1338[a7_1173 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019E8:
	word32 d1_1349 = Mem1348[a7_1173 + 108:word32]
	word32 a7_1354 = a7_1173 - 4
	Mem1356[a7_1354:word32] = d1_1349 >> 31
	Mem1359[a7_1354 - 4:word32] = d1_1349
	Mem1363[a7_1354 - 8:word32] = a1
	Mem1366[a7_1354 - 12:word32] = d1_1349
	Mem1368[a7_1354 - 16:word32] = d1_1349 >> 31
	Mem1371[a7_1354 - 20:word32] = d7_1342
	Mem1374[a7_1354 - 24:word32] = d6_1340
	word32 d1_1377 = fn00002648(Mem1374[a7_1354 - 24:word32], Mem1374[a7_1354 - 20:word32], Mem1374[a7_1354 - 16:word32], Mem1374[a7_1354 - 12:word32])
	word32 v168_1385 = Mem1374[a7_1354 - 8:word32]
	word32 d1_1390 = Mem1374[a7_1354 - 4:word32]
	word32 d0_1392 = Mem1374[a7_1354:word32]
	a3 = a3 - 1
	Mem1399[a3:byte] = Mem1374[v168_1385 + d1_1377:byte]
	Mem1402[a7_1354:word32] = d0_1392
	Mem1405[a7_1354 - 4:word32] = d1_1390
	Mem1408[a7_1354 - 8:word32] = v168_1385
	Mem1411[a7_1354 - 12:word32] = d1_1390
	Mem1413[a7_1354 - 16:word32] = d0_1392
	Mem1415[a7_1354 - 20:word32] = d7_1342
	Mem1417[a7_1354 - 24:word32] = d6_1340
	word32 d1_1421
	word32 d0_1420 = fn000023F8(Mem1417[a7_1354 - 24:word32], Mem1417[a7_1354 - 20:word32], Mem1417[a7_1354 - 16:word32], Mem1417[a7_1354 - 12:word32], out d1_1421, out a0_1418)
	a1 = Mem1417[a7_1354 - 8:word32]
	d6_1340 = d0_1420
	d7_1342 = d1_1421
	a7_1436 = a7_1354 + 4
	d3_1344 = d3_1344 + 0x00000001
	d0_1442 = d1_1421
	d1 = d0_1420 - (d1_1421 <u 0x00000000)
	branch d1 != 0x00000000 l000019E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A56:
	Mem1449[a7_1354 + 106:word32] = d3_1344
	d7_1001 = Mem1449[a7_1354 + 102:word32]
	d6_1451 = Mem1449[a7_1354 + 52:word32]
	d5_1452 = Mem1449[a7_1354 + 72:word32]
	d3_1453 = Mem1449[a7_1354 + 128:word32]
	branch d5_1452 != 0xFFFFFFFF l00001A78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A78:
	Mem1458[a7_1354 + 76:word32] = Mem1449[a7_1354 + 76:word32] & 0xFFFFFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A72:
	d5_1452 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BC4:
	branch d5_1452 - Mem1467[a7_1436 + 102:word32] >u 0x00000000 l00001BD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BD2:
	Mem1473[a7_1436 + 44:word32] = d5_1452
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BCA:
	Mem1476[a7_1436 + 44:word32] = Mem1467[a7_1436 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BD6:
	word32 a7_1479 = a7_1436 - 4
	Mem1487[a7_1479:word32] = d0_1442
	Mem1502[a7_1479 + 52:word32] = Mem1487[a7_1479 + 48:word32] + d7_1001
	Mem1508[a7_1479:word32] = Mem1502[a7_1479:word32]
	word32 d0_1512 = Mem1508[a7_1479:word32]
	branch Mem1508[a7_1479 + 52:word32] - Mem1508[a7_1479 + 68:word32] <u 0x00000000 l00001BFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BFA:
	Mem1517[a7_1479:word32] = d0_1512
	Mem1522[a7_1479 + 48:word32] = Mem1517[a7_1479 + 68:word32] - Mem1517[a7_1479 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BF4:
	Mem1527[a7_1479 + 48:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C0A:
	Mem1535[a7_1436 + 48:word32] = Mem1533[a7_1436 + 44:word32]
	branch (Mem1535[a7_1436 + 72:word32] & 2) == 0x00000000 l00001C4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C18:
	word32 d2_1542 = 0
	branch d7_1001 == 0x00000000 l00001C4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C1E:
	word32 a7_1549 = a7_1436 - 4
	Mem1552[a7_1549:word32] = a5_1550
	Mem1563[a7_1549 - 4:word32] = (int32) (int16) Mem1552[a7_1549 + 110 + d2_1542:byte]
	a7_1578 = a7_1549 + 4
	branch fn00001DD8(a1, a3, a4_1605, a5_1550, Mem1563[a7_1549 - 4:word32], Mem1563[a7_1549:word32], out d1, out a0_1418, out a1, out a5_1550) != 0xFFFFFFFF l00001C44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C44:
	d2_1542 = d2_1542 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d7_1001 - d2_1542 >u 0x00000000 l00001C1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C4C:
	branch (Mem1592[a7_1436 + 72:word32] & 4) != 0x00000000 l00001C9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C54:
	word32 d2_1598 = 0
	branch Mem1592[a7_1436 + 48:word32] == 0x00000000 l00001C9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C5C:
	word32 d4_1603 = Mem1592[a7_1436 + 72:word32]
	a4_1605 = Mem1592[a7_1436 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C64:
	word32 a0_1619
	word32 a7_1607 = a7_1436 - 4
	Mem1610[a7_1607:word32] = a5_1550
	branch (d4_1603 & 2) == 0x00000000 l00001C72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C72:
	a0_1619 = DPB(a0_1418, 0x0020, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C6C:
	a0_1619 = DPB(a0_1418, 0x0030, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C76:
	Mem1625[a7_1436 - 8:word32] = a0_1619
	a7_1578 = a7_1436
	branch fn00001DD8(a1, a3, a4_1605, a5_1550, Mem1625[a7_1436 - 8:word32], Mem1625[a7_1436 - 4:word32], out d1, out a0_1418, out a1, out a5_1550) != 0xFFFFFFFF l00001C8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C8E:
	d2_1598 = d2_1598 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a4_1605 - d2_1598 >u 0x00000000 l00001C64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C96:
	Mem1659[a7_1607 + 52:word32] = a4_1605
	Mem1662[a7_1607 + 76:word32] = d4_1603
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C9E:
	branch (Mem1666[a7_1436 + 72:word32] & 2) != 0x00000000 l00001CDA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA6:
	word32 d2_1672 = 0
	branch d7_1001 == 0x00000000 l00001CDA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CAC:
	word32 a7_1682 = a7_1436 - 4
	Mem1685[a7_1682:word32] = a5_1550
	Mem1696[a7_1682 - 4:word32] = (int32) (int16) Mem1685[a7_1682 + 110 + d2_1672:byte]
	a7_1578 = a7_1682 + 4
	branch fn00001DD8(a1, a3, a4_1605, a5_1550, Mem1696[a7_1682 - 4:word32], Mem1696[a7_1682:word32], out d1, out a0_2278, out a1, out a5_1550) != 0xFFFFFFFF l00001CD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CD2:
	d2_1672 = d2_1672 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d7_1001 - d2_1672 >u 0x00000000 l00001CAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CDA:
	word32 d2_1725 = Mem1724[a7_1436 + 102:word32]
	branch d5_1452 - Mem1724[a7_1436 + 102:word32] <=u 0x00000000 l00001D08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CE4:
	word32 a7_1739 = a7_1436 - 4
	Mem1742[a7_1739:word32] = a5_1550
	Mem1745[a7_1739 - 0x00000004:word32] = 0x00000030
	a7_1578 = a7_1739 + 0x00000004
	branch fn00001DD8(a1, a3, a4_1605, a5_1550, Mem1745[a7_1739 - 0x00000004:word32], Mem1745[a7_1739:word32], out d1, out a0_2279, out a1, out a5_1550) != 0xFFFFFFFF l00001D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D00:
	d2_1725 = d2_1725 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch d5_1452 - d2_1725 >u 0x00000000 l00001CE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D08:
	word32 d2_1772 = 0
	branch Mem1774[a7_1436 + 102:word32] == 0x00000000 l00001D3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D10:
	a4_1605 = Mem1774[a7_1436 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D14:
	word32 a7_1781 = a7_1436 - 4
	Mem1784[a7_1781:word32] = a5_1550
	Mem1795[a7_1781 - 4:word32] = (int32) (int16) Mem1784[a3 + d2_1772:byte]
	a7_1578 = a7_1781 + 4
	branch fn00001DD8(a1, a3, a4_1605, a5_1550, Mem1795[a7_1781 - 4:word32], Mem1795[a7_1781:word32], out d1, out a0_2280, out a1, out a5_1550) != 0xFFFFFFFF l00001D36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D36:
	d2_1772 = d2_1772 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a4_1605 - d2_1772 >u 0x00000000 l00001D14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D3E:
	d0 = Mem1822[a7_1436 + 72:word32] & 4
	branch d0 == 0x00000000 l00001D74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D46:
	word32 d2_1828 = 0
	branch Mem1822[a7_1436 + 48:word32] == 0x00000000 l00001D74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D4E:
	a3 = Mem1822[a7_1436 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D52:
	word32 a7_1835 = a7_1436 - 4
	Mem1838[a7_1835:word32] = a5_1550
	Mem1841[a7_1835 - 0x00000004:word32] = 0x00000020
	d0 = fn00001DD8(a1, a3, a4_1605, a5_1550, Mem1841[a7_1835 - 0x00000004:word32], Mem1841[a7_1835:word32], out d1, out a0_2281, out a1, out a5_1550)
	a7_1578 = a7_1835 + 0x00000004
	branch d0 != 0xFFFFFFFF l00001D6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D6C:
	d2_1828 = d2_1828 + 0x00000001
	d6_1451 = d6_1451 + 0x00000001
	branch a3 - d2_1828 >u 0x00000000 l00001D52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D74:
	a7_1578 = a7_1436
	a4_1605 = a2_1875
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D98:
	branch Mem1910[a4_1605:byte] != 0x00 l00001474
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D9E:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D68:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D32:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CFA:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CCC:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C88:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C3E:
	d0_1935 = d6_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA0:
	word32 a7_1956 = a7_1578 + 4
	word32 a2_1967 = Mem1953[a7_1956 + 20:word32]
	word32 a3_1969 = Mem1953[a7_1956 + 24:word32]
	word32 a4_1971 = Mem1953[a7_1956 + 28:word32]
	word32 a5_1973 = Mem1953[a7_1956 + 32:word32]
	word32 a6_1975 = Mem1953[a7_1956 + 36:word32]
	d1Out = d1
	a1Out = a1
	a2Out = a2_1967
	a3Out = a3_1969
	a4Out = a4_1971
	a5Out = a5_1973
	a6Out = a6_1975
	return d0_1935
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001458_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001DD8(word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00001DD8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD8:
	word32 a1_110
	word32 a0_109
	word32 d1_60
	Mem17[dwArg08 + 24:word32] = Mem11[dwArg08 + 24:word32] | 2
	word32 v13_19 = Mem17[dwArg08 + 20:word32] - 0x00000001
	Mem20[dwArg08 + 20:word32] = v13_19
	branch v13_19 < 0x00000000 l00001E1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DF4:
	branch 10 - dwArg04 != 0x00000000 l00001E06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DFA:
	branch (Mem20[dwArg08 + 24:word32] & 0x00000080) != 0x00000000 l00001E1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E1C:
	d1_60 = fn00001E34(dwArg04, a1, a3, a4, a5, dwArg04, dwArg08, out a0_109, out a1_110, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E06:
	a0_109 = Mem20[dwArg08 + 4:word32]
	Mem70[dwArg08 + 4:word32] = a0_109 + 1
	Mem73[a0_109:byte] = (byte) dwArg04
	a1_110 = dwArg08 + 4
	d1_60 = (int32) Mem73[a0_109:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E2A:
	d1Out = d1_60
	a0Out = a0_109
	a1Out = a1_110
	a5Out = a5
	return d1_60
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001DD8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001E34(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn00001E34_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E34:
	word32 d0_111
	word32 a5_132
	word32 a1_130 = fn000023C8(d2, a1, dwArg08, a3, a4, a5, out a4_342, out a5_132)
	branch dwArg08 != 0x00000000 l00001E50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E50:
	branch 64 - (Mem29[dwArg08 + 24:word32] & 73) == 0x00000000 l00001E62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E62:
	branch Mem29[dwArg08 + 28:word32] != 0x00000000 l00001E80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E68:
	branch (Mem29[dwArg08 + 24:word32] & 4) == 0x00000000 l00001E78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E78:
	Mem64[dwArg08 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E70:
	Mem68[dwArg08 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E80:
	branch Mem71[dwArg08 + 8:word32] != 0x00000000 l00001EC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EC0:
	branch Mem71[dwArg08:word32] == 0x00000000 l00001F1A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F1A:
	d0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EC4:
	word32 d0_103 = Mem71[dwArg08 + 24:word32] & 0x00000080
	branch d0_103 == 0x00000000 l00001EF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED0:
	d0_103 = 10
	branch 10 - dwArg04 != 0x00000000 l00001EF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EF0:
	word32 d4_97 = Mem71[dwArg08 + 4:word32] - Mem71[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_97 - d0_103 == 0x00000000 l00001F1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F0E:
	Mem110[dwArg08 + 24:word32] = Mem71[dwArg08 + 24:word32] | 16
	a0 = dwArg08 + 24
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED6:
	word32 a0_114 = Mem71[dwArg08 + 4:word32]
	Mem118[dwArg08 + 4:word32] = a0_114 + 1
	Mem120[a0_114:byte] = (byte) dwArg04
	d0_111 = fn00001F48(d2, dwArg08 + 4, a3, a0_114 + 1, a5_132, dwArg08, out a0, out a1_130, out a4_343, out a5_132)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E86:
	word32 d4_148
	branch (Mem71[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l00001E9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9A:
	d4_148 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E96:
	d4_148 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9C:
	word32 d0_165 = fn00001FF4(d4_148 + Mem71[dwArg08 + 28:word32], out a0, out a1_130)
	branch d0_165 != 0x00000000 l00001EB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB6:
	Mem179[dwArg08 + 8:word32] = d0_165 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F1E:
	Mem186[dwArg08 + 24:word32] = Mem184[dwArg08 + 24:word32] | 2
	a0 = Mem186[dwArg08 + 8:word32]
	Mem193[a0:byte] = (byte) dwArg04
	word32 a1_194 = Mem193[dwArg08 + 8:word32]
	Mem197[dwArg08 + 4:word32] = a1_194 + 1
	Mem202[dwArg08 + 20:word32] = Mem197[dwArg08 + 28:word32] - 0x00000001
	a1_130 = a1_194 + 1
	d0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB0:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E5C:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E4A:
	d0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F42:
	a0Out = a0
	a1Out = a1_130
	a5Out = a5_132
	return d0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001E34_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F48(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a0 a1 a4 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn00001F48_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F48:
	word32 d0_100
	word32 a4_26
	word32 a5_27
	word32 a1_25 = fn000023C8(d2, a1, dwArg04, a3, a4, a5, out a4_26, out a5_27)
	branch dwArg04 != 0x00000000 l00001F5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F5E:
	branch Mem17[dwArg04 + 28:word32] != 0x00000000 l00001F7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F64:
	branch (Mem17[dwArg04 + 24:word32] & 4) == 0x00000000 l00001F74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F74:
	Mem46[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F6C:
	Mem50[dwArg04 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F7C:
	branch Mem53[dwArg04 + 8:word32] != 0x00000000 l00001F86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F86:
	word32 d0_59 = Mem53[dwArg04 + 24:word32] & 2
	branch d0_59 == 0x00000000 l00001FCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F8E:
	branch Mem53[dwArg04:word32] == 0x00000000 l00001FBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FBC:
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F92:
	word32 d4_72 = Mem53[dwArg04 + 4:word32] - Mem53[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_72 - d0_59 == 0x00000000 l00001FC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC0:
	Mem82[dwArg04 + 4:word32] = Mem53[dwArg04 + 8:word32]
	Mem84[dwArg04 + 20:word32] = Mem82[dwArg04 + 28:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FCC:
	Mem91[dwArg04 + 24:word32] = Mem89[dwArg04 + 24:word32] & -4
	a0 = dwArg04 + 24
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB0:
	Mem97[dwArg04 + 24:word32] = Mem53[dwArg04 + 24:word32] | 16
	a0 = dwArg04 + 24
	d0_100 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F82:
	d0_100 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F5A:
	d0_100 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FD6:
	a0Out = a0
	a1Out = a1_25
	a4Out = a4_26
	a5Out = a5_27
	return d0_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F48_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001FF4(word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 d0
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn00001FF4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FF4:
	word32 d0_106
	branch dwArg04 != 0x00000000 l00002002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002002:
	branch Mem5[0x00002BC0:word32] != 0x00000000 l00002026
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000200A:
	word32 a0_13 = Mem5[0x00002BBC:word32]
	Mem21[0x00000000:word32] = 0x00000000
	Mem36[0x00002BC0:word32] = fn000022E8(dwLoc10, a0_13, a0_13, out a0, out a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002026:
	branch Mem39[0x00002BC0:word32] != 0x00000000 l00002032
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002032:
	word32 d0_58 = fn000021C4(Mem51[0x00002BC0:word32], dwArg04 + 4, out a0)
	a1 = d0_58
	branch d0_58 != 0x00000000 l00002050
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002050:
	Mem72[d0_58:word32] = dwArg04
	a0 = d0_58 + 4
	d0_106 = d0_58 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000204C:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000202E:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FFE:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002058:
	a0Out = a0
	a1Out = a1
	return d0_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001FF4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002060(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00002060_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002060:
	branch dwArg04 == 0x00000000 l0000208A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000206A:
	branch Mem0[0x00002BC0:word32] == 0x00000000 l0000208A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002072:
	fn00002128(Mem23[0x00002BC0:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000208A:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002060_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002128(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn00002128_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002128:
	branch Mem20[Mem20[0x00002B8C:word32] + 20:word16] <u 0x0027 l00002158
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002158:
	branch dwArg04 == 0x00000000 l000021BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000215C:
	branch dwArg08 == 0x00000000 l000021BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002160:
	word32 a3_36 = dwArg08 + -12
	branch dwArg0C - Mem20[dwArg04 + 20:word32] >=u 0x00000000 l000021A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000216C:
	word32 a2_40 = dwArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000216E:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0x00000000 l000021BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002174:
	branch Mem20[a2_40 + 8:byte] == 0x00 l0000216E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000217A:
	branch dwArg08 - Mem20[a2_40 + 20:word32] <u 0x00000000 l0000216E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002180:
	branch dwArg08 - Mem20[a2_40 + 24:word32] >=u 0x00000000 l0000216E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002186:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28:word32] - Mem20[dwArg04 + 16:word32] != 0x00000000 l000021BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021A0:
	a3_36 = a2_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021A2:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4
	FreeMem(a3_74, Mem20[a3_74:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002146:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021BC:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002128_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000021C4(word32 dwArg04, word32 dwArg08, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn000021C4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021C4:
	word32 d0_159
	word32 a0_116 = Mem26[0x00002B8C:word32]
	branch Mem26[a0_116 + 20:word16] <u 0x0027 l000021F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021F0:
	word32 a3_121 = 0x00000000
	branch dwArg04 == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021F8:
	branch dwArg08 == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021FE:
	branch dwArg08 - Mem26[dwArg04 + 20:word32] >=u 0x00000000 l000022B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022B2:
	word32 d0_51 = AllocMem(dwArg08 + 16, Mem26[dwArg04 + 12:word32])
	a3_121 = d0_51
	branch d0_51 == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022CC:
	Mem57[d0_51:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_51 + 4)
	Mem63[d0_51 + 12:word32] = 0x00000000
	a0_116 = dwArg04
	a3_121 = d0_51 + 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002206:
	word32 a5_163 = Mem26[dwArg04:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002208:
	branch Mem26[a5_163:word32] == 0x00000000 l0000222A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000222A:
	word32 d3_78 = Mem26[dwArg04 + 16:word32] + 40
	word32 d0_83 = AllocMem(d3_78, Mem26[dwArg04 + 12:word32])
	a3_121 = d0_83
	branch d0_83 == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002248:
	Mem89[d0_83:word32] = d3_78
	Mem92[d0_83 + 12:byte] = 0x0A
	Mem96[d0_83 + 20:word32] = d0_83 + 40
	Mem98[d0_83 + 24:word32] = d0_83 + 40
	Mem100[Mem98[d0_83 + 20:word32]:word32] = 0x00000000
	word32 a2_101 = Mem100[d0_83 + 20:word32]
	Mem104[a2_101 + 4:word32] = Mem100[dwArg04 + 16:word32]
	Mem107[d0_83 + 32:word32] = Mem104[a2_101 + 4:word32]
	Mem111[d0_83 + 28:word32] = Mem107[d0_83 + 32:word32] + Mem107[d0_83 + 20:word32]
	AddHead(dwArg04, d0_83 + 4)
	a0_116 = d0_83 + 4
	a3_121 = Allocate(d0_83 + 4, dwArg08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000220C:
	branch Mem26[a5_163 + 8:byte] == 0x00 l00002226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002212:
	word32 d0_129 = Allocate(a5_163, dwArg08)
	a0_116 = a5_163
	a3_121 = d0_129
	branch d0_129 != 0x00000000 l00002296
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002296:
	branch (Mem136[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l000022E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022A2:
	word32 a2_143 = a3_121
	word32 d2_146 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022A8:
	Mem149[a2_143:word32] = 0x00000000
	word32 a2_150 = a2_143 + 4
	Mem151[a2_150:word32] = 0x00000000
	a2_143 = a2_150 + 4
	d2_146 = d2_146 - 0x00000001
	branch d2_146 != 0x00000000 l000022A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022B0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E0:
	d0_159 = a3_121
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002226:
	a5_163 = Mem26[a5_163:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021DE:
	a0_116 = dwArg04
	d0_159 = AllocPooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E2:
	a0Out = a0_116
	return d0_159
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000021C4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000022E8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 a1 d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn000022E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E8:
	word32 d0_52
	word32 a0_17 = Mem14[0x00002B8C:word32]
	branch Mem14[a0_17 + 20:word16] <u 0x0027 l00002316
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002316:
	a1 = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l00002350
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000231C:
	word32 d0_31 = AllocMem(24, 0)
	a1 = d0_31
	branch d0_31 == 0x00000000 l00002350
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002332:
	Mem38[d0_31:word32] = d0_31 + 4
	Mem39[d0_31 + 4:word32] = 0x00000000
	Mem41[d0_31 + 8:word32] = d0_31
	Mem43[d0_31 + 12:word32] = dwArg04
	Mem47[d0_31 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem49[d0_31 + 20:word32] = dwArg0C
	a0_17 = d0_31 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002350:
	d0_52 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002302:
	d0_52 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002352:
	a0Out = a0_17
	a1Out = a1
	return d0_52
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000022E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002358(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn00002358_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002358:
	branch Mem11[Mem11[0x00002B8C:word32] + 20:word16] <u 0x0027 l0000237C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000237C:
	branch dwArg04 == 0x00000000 l000023C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002380:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0x00000000 l000023B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002392:
	word32 a2_29 = a2_24 - 4
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0x00000000 l00002392
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B2:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000236E:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023C0:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002358_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000023C8(word32 d2, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31]
// LiveOut: a1 a4 a5
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn000023C8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023C8:
	word32 a6_6 = Mem5[0x00002B8C:word32]
	SetSignal(0, 0x00001000)
	branch 0x00000000 == 0x00000000 l000023F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023E6:
	a1 = fn0000131C(0x00001000, d2, a1, a2, a3, a4, a5, a6_6, 0x00000014, out a4, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023F2:
	a4Out = a4
	a5Out = a5
	return a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000023C8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000023F8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn000023F8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023F8:
	word32 d0_188
	word32 d1_133 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_158 = dwArg10
	branch dwArg0C != 0x00000000 l0000244E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000244E:
	branch dwArg04 - dwArg0C >=u 0x00000000 l00002458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002458:
	word32 d4_29 = 24
	word32 d6_30 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_30 != 0x00 l00002476
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002462:
	d4_29 = 16
	d6_30 = __rol(d6_30, 0x00000008)
	branch (byte) d6_30 != 0x00 l00002476
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000246A:
	d4_29 = 8
	d6_30 = __rol(d6_30, 0x00000008)
	branch (byte) d6_30 != 0x00 l00002476
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002472:
	d4_29 = 0
	d6_30 = DPB(d6_30, (byte) dwArg0C, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002476:
	word32 d4_58 = DPB(d4_29, (byte) d4_29 + Mem17[0x00002BC4 + (int32) ((word16) d6_30 & 0x00FF):byte], 0)
	word32 d5_60 = 32 - d4_58
	branch d5_60 != 0x00000000 l00002496
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002496:
	word32 d1_83
	word32 d0_82 = fn000024FC(dwArg04 >>u d4_58, dwArg04 << d5_60 | dwArg08 >>u d4_58, dwArg0C << d5_60 | dwArg10 >>u d4_58, out d1_83, out d2_314)
	word32 d3_69 = dwArg10 << d5_60
	word32 d5_98 = __swap(d0_82)
	word32 d6_100 = __swap(d3_69)
	word32 d3_99 = d3_69 *u (word16) d5_98
	word32 d2_104 = __swap(d0_82 *u (word16) d3_69)
	word16 v31_105 = (word16) (d2_104 + d3_99)
	word32 d4_101 = d0_82 *u (word16) d6_100
	word16 v34_111 = (word16) (DPB(d2_104, v31_105, 0) + d4_101)
	word32 d6_79 = dwArg08 << d5_60
	word32 d2_117 = __swap(DPB(d2_104, v34_111, 0))
	word32 d5_102 = d5_98 *u (word16) d6_100
	a0_20 = d6_79
	d1_133 = d0_82
	word32 v39_125 = d1_83 - ((__swap(DPB(d3_99, 0x0000, 0)) + __swap(DPB(d4_101, 0x0000, 0))) + DPB(d5_102, ((word16) d5_102 + (v31_105 <u 0x0000)) + (v34_111 <u 0x0000), 0))
	branch v39_125 <u 0x00000000 l000024F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024EC:
	branch v39_125 != 0x00000000 l000024F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024EE:
	branch d6_79 - d2_117 >=u 0x00000000 l000024F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024F2:
	d1_133 = d0_82 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000248A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002492
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000248E:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002452
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002492:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002452:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002410:
	branch dwArg04 - dwArg10 >=u 0x00000000 l00002422
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002422:
	branch dwArg10 != 0x00000000 l0000242E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002426:
	d3_158 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000242E:
	word32 d1_167
	word32 d2_168
	word32 d0_166 = fn000024FC(0, dwArg04, d3_158, out d1_167, out d2_168)
	d1_133 = fn000024FC(d1_167, dwArg08, d2_168, out d1_312, out d2_313)
	d0_188 = d0_166
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002414:
	d1_133 = fn000024FC(dwArg04, dwArg08, dwArg10, out d1_310, out d2_311)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024F4:
	d0_188 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024F6:
	d1Out = d1_133
	a0Out = a0_20
	return d0_188
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000023F8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000024FC(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn000024FC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024FC:
	word32 d7_13 = d2
	branch d2 == 0x00000000 l00002516
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002504:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0x00000000 l00002524
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002524:
	word32 d2_22 = __swap(d2)
	branch (word16) d2_22 != 0x0000 l0000254C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000254C:
	byte bLoc26_337 = 0x00
	word32 d0_44 = 0
	branch d2 < 0x00000000 l00002568
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000255E:
	d6_17 = d6_17 * 0x00000002
	d0_44 = DPB(d0_44, (word16) d0_44 + 0x0001, 0)
	d5_19 = d5_19 * 0x00000002 + (d6_17 <u 0x00000000)
	d7_13 = d7_13 * 0x00000002
	branch d7_13 > 0x00000000 l0000255E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002568:
	word16 v35_63 = (word16) d0_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000256A:
	word32 d1_101
	word32 d2_72 = __swap(d5_19)
	word32 d3_73 = __swap(d7_13)
	branch (word16) (d2_72 - d3_73) != 0x0000 l0000257C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000257C:
	d1_101 = __swap(DPB(__swap(DPB(DPB(d5_19, (uint16) (d5_19 % (uint16) d3_73), 16), (uint16) (d5_19 /u (uint16) d3_73), 0)), 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002576:
	d1_101 = 65535
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002586:
	word32 d6_95 = __swap(DPB(d6_17, 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000258C:
	word32 d4_110 = __swap(d5_19 - __swap(d7_13) *u (word16) d1_101)
	word32 d2_103 = d1_101 *u (word16) d7_13
	word32 d4_116 = DPB(d4_110, (word16) d6_95, 0)
	branch (word16) d4_110 != 0x0000 l000025AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A4:
	branch d2_103 - d4_116 <=u 0x00000000 l000025AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025AC:
	word32 d6_128 = __swap(d1_101)
	word32 d3_135 = __swap(d6_128)
	word32 d4_137 = __swap(d7_13)
	word32 d5_136 = d7_13 *u (word16) d3_135
	word32 d6_141 = __swap(d6_128 *u (word16) d7_13)
	word16 v45_142 = (word16) (d6_141 + d5_136)
	word32 d2_138 = d6_128 *u (word16) d4_137
	word16 v47_148 = (word16) (DPB(d6_141, v45_142, 0) + d2_138)
	word32 d3_139 = d3_135 *u (word16) d4_137
	word32 d6_167 = d6_17 - __swap(DPB(d6_141, v47_148, 0))
	word32 d5_170 = d5_19 - ((__swap(DPB(d5_136, 0x0000, 0)) + __swap(DPB(d2_138, 0x0000, 0))) + DPB(d3_139, ((word16) d3_139 + (v45_142 <u 0x0000)) + (v47_148 <u 0x0000), 0)) - (d6_167 <u 0x00000000)
	branch d5_170 >=u 0x00000000 l00002604
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025EE:
	d6_167 = d6_167 + DPB(__swap(d7_13), 0x0000, 0)
	d1_101 = d1_101 - 0x00000001
	d5_170 = d5_170 + (d6_167 <u 0x00000000) + __swap(DPB(d7_13, 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002604:
	branch bLoc26_337 != 0x00 l00002620
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002620:
	word32 d6_205 = __swap(DPB(d6_167, (word16) d5_170, 0))
	d0 = DPB(dwLoc24, (word16) d1_101, 0)
	word32 d5_206 = __swap(d5_170)
	branch v35_63 == 0x0000 l0000263A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002630:
	word32 d7_213 = DPB(d7_13, v35_63 - 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002632:
	d5_206 = d5_206 >>u 0x00000001
	d6_205 = __rcr(d6_205, 0x00000001, SLICE(cond(d5_206), bool, 4))
	d7_213 = d7_213 - 0x00000001
	branch d7_213 != 0xFFFFFFFF l00002632
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000263A:
	d1 = d6_205
	d2 = d2_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000260A:
	word32 d5_246 = __swap(d5_170)
	word32 d6_247 = __swap(d6_167)
	d5_19 = DPB(d5_246, (word16) d6_247, 0)
	d6_17 = DPB(d6_247, 0x0000, 0)
	bLoc26_337 = true
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025A8:
	d1_101 = d1_101 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000252A:
	word32 d0_259 = __swap(d0)
	word32 d1_260 = __swap(d1)
	word32 d0_262 = DPB(d0_259, (word16) d1_260, 0)
	word32 d0_271 = DPB(DPB(d0_262, (uint16) (d0_262 % (uint16) d2), 16), (word16) __swap(d1_260), 0)
	d2 = DPB(__swap((int32) (uint16) (d0_262 /u (uint16) d2)), (uint16) (d0_271 /u (uint16) d2), 0)
	d1 = __swap(DPB(DPB(d0_271, (uint16) (d0_271 % (uint16) d2), 16), 0x0000, 0))
	d0 = d2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000250A:
	branch d1 == 0x00000000 l00002642
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002510:
	branch d2 - d1 >u 0x00000000 l00002642
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002516:
	d0 = fn00002AFA(d1, d2, d2, out d1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002642:
	d1Out = d1
	d2Out = d2
	return d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000024FC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002648(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn00002648_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002648:
	word32 d1_162 = dwArg08
	word32 d3_194 = dwArg10
	branch dwArg0C != 0x00000000 l0000269A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000269A:
	branch dwArg04 - dwArg0C <u 0x00000000 l00002754
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026A0:
	word32 d4_32 = 24
	word32 d6_33 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_33 != 0x00 l000026BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026AA:
	d4_32 = 16
	d6_33 = __rol(d6_33, 0x00000008)
	branch (byte) d6_33 != 0x00 l000026BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026B2:
	d4_32 = 8
	d6_33 = __rol(d6_33, 0x00000008)
	branch (byte) d6_33 != 0x00 l000026BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026BA:
	d4_32 = 0
	d6_33 = DPB(d6_33, (byte) dwArg0C, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026BE:
	word32 d4_61 = DPB(d4_32, (byte) d4_32 + Mem20[0x00002BC4 + (int32) ((word16) d6_33 & 0x00FF):byte], 0)
	word32 d5_63 = 32 - d4_61
	branch d5_63 != 0x00000000 l000026E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E0:
	word32 d1_86
	word32 d2_87
	word32 d0_85 = fn000024FC(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_87)
	word32 d3_72 = dwArg10 << d5_63
	word32 d7_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u (word16) d7_101
	word32 d2_107 = __swap(d0_85 *u (word16) d3_72)
	word16 v33_108 = (word16) (d2_107 + d3_102)
	word32 d4_104 = d0_85 *u (word16) d6_103
	word16 v35_114 = (word16) (DPB(d2_107, v33_108, 0) + d4_104)
	word32 d2_120 = __swap(DPB(d2_107, v35_114, 0))
	word32 d7_105 = d7_101 *u (word16) d6_103
	word32 d6_82 = dwArg08 << d5_63
	word32 d3_126 = __swap(DPB(d3_102, 0x0000, 0)) + __swap(DPB(d4_104, 0x0000, 0)) + DPB(d7_105, ((word16) d7_105 + (v33_108 <u 0x0000)) + (v35_114 <u 0x0000), 0)
	word32 v40_128 = d1_86 - d2_120
	branch v40_128 <u 0x00000000 l0000273C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002736:
	branch v40_128 != 0x00000000 l00002740
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002738:
	branch d6_82 - d3_126 >=u 0x00000000 l00002740
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000273C:
	d3_126 = d3_126 - d3_72
	d2_120 = d2_120 - d2_87 - (d3_126 <u 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002740:
	word32 d6_148 = d6_82 - d3_126
	d1_162 = d1_86 - d2_120 - (d6_148 <u 0x00000000) << 32 - d5_63 | d6_148 >>u d5_63
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D2:
	branch dwArg0C - dwArg04 <u 0x00000000 l000026DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D6:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002754
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026DA:
	d1_162 = dwArg08 - dwArg10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002660:
	branch dwArg04 - dwArg10 >=u 0x00000000 l00002672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002672:
	branch dwArg10 != 0x00000000 l0000267E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002676:
	d3_194 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000267E:
	word32 d1_203
	word32 d2_204
	fn000024FC(0, dwArg04, d3_194, out d1_203, out d2_204)
	fn000024FC(d1_203, dwArg08, d2_204, out d1_162, out d2_347)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002664:
	fn000024FC(dwArg04, dwArg08, dwArg10, out d1_162, out d2_346)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002754:
	return d1_162
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002648_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002A44(word32 d2, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002A44_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A44:
	branch dwArg04 == 0x00000000 l00002A5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A5C:
	word32 a2_10 = Mem5[0x00002CF0:word32]
	branch a2_10 == 0x00000000 l00002A82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A66:
	branch (Mem16[a2_10 + 24:word32] & 2) == 0x00000000 l00002A78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A6E:
	fn00001F48(d2, a1, a3, a4, a5, a2_10, out a0_109, out a1, out a4, out a5)
	Mem46 = Mem25
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A78:
	a2_10 = Mem46[a2_10 + 12:word32]
	branch a2_10 != 0x00000000 l00002A66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A50:
	fn00001F48(d2, a1, a3, a4, a5, dwArg04, out a0_60, out a1_61, out a4_62, out a5_63)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A82:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002A44_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002A88(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX d0 d1
// Preserved: a7
fn00002A88_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A88:
	branch dwArg08 < 0x00000000 l00002A9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A9C:
	word32 d1_13 = -dwArg08
	branch dwArg04 < 0x00000000 l00002AB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AB2:
	fn00002AFA(-dwArg04, d1_13, d2, out d1_23)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AA2:
	fn00002AFA(dwArg04, d1_13, d2, out d1_34)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A92:
	branch dwArg04 < 0x00000000 l00002AA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AA8:
	fn00002AFA(-dwArg04, dwArg08, d2, out d1_49)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002A96:
	fn00002AFA(dwArg04, dwArg08, d2, out d1_60)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002A88_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002AC8(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn00002AC8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AC8:
	branch dwArg04 > 0x00000000 l00002AE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AE8:
	branch dwArg08 > 0x00000000 l00002AEA_thunk_fn00002AFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AEA_thunk_fn00002AFA:
	return fn00002AFA(dwArg04, dwArg08, d2, out d1_88)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AEC:
	return -fn00002AFA(dwArg04, -dwArg08, d2, out d1_89)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AD2:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0x00000000 l00002AE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AE0:
	return -fn00002AFA(d0_36, dwArg08, d2, out d1_43)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AD8:
	return fn00002AFA(d0_36, -dwArg08, d2, out d1_55)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002AC8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002AFA(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn00002AFA_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002AFA:
	word32 d1_21 = __swap(d1)
	word16 v10_9 = (word16) d1_21
	word32 d2_10 = DPB(d2, v10_9, 0)
	branch v10_9 != 0x0000 l00002B20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B20:
	word32 d3_17 = 16
	branch (word16) d1_21 >=u 0x0080 l00002B2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B2A:
	d1_21 = __rol(d1_21, 0x00000008)
	d3_17 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B2E:
	branch (word16) d1_21 >=u 0x0800 l00002B38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B34:
	d1_21 = __rol(d1_21, 0x00000004)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0004, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B38:
	branch (word16) d1_21 >=u 0x2000 l00002B42
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B3E:
	d1_21 = __rol(d1_21, 0x00000002)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0002, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B42:
	branch (word16) d1_21 < 0x0000 l00002B4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B46:
	d1_21 = __rol(d1_21, 0x00000001)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B4A:
	word32 d2_68 = DPB(__swap(DPB(d2, (word16) d0, 0)), 0x0000, 0) >>u d3_17
	word32 d0_65 = d0 >>u d3_17
	word32 d3_69 = __swap(d3_17)
	uint16 v39_72 = (uint16) (d0_65 /u (uint16) d1_21)
	word32 d1_81 = __swap(d1_21)
	word32 d3_76 = DPB(d3_69, v39_72, 0)
	word32 d0_83 = DPB(DPB(d0_65, (uint16) (d0_65 % (uint16) d1_21), 16), (word16) d2_68, 0) - DPB(d2_68, v39_72, 0) *u (word16) d1_81
	branch d0_83 >=u 0x00000000 l00002B6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B66:
	d3_76 = DPB(d3_69, v39_72 - 0x0001, 0)
	d0_83 = d0_83 + d1_81
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B6A:
	branch d0_83 >=u 0x00000000 l00002B6A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B6C:
	d1Out = __swap(__rol(d0_83, __swap(d3_76)))
	return (int32) (word16) d3_76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B02:
	word32 d0_123 = __swap(d0)
	word32 d1_124 = __swap(d1_21)
	word16 v13_126 = (word16) d0_123
	word32 d2_127 = DPB(__swap(d2_10), v13_126, 0)
	branch v13_126 == 0x0000 l00002B10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B0C:
	uint16 v15_131 = (uint16) (d2_127 /u (uint16) d1_124)
	d2_127 = DPB(DPB(d2_127, (uint16) (d2_127 % (uint16) d1_124), 16), v15_131, 0)
	d0_123 = DPB(d0_123, v15_131, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002B10:
	word32 d0_138 = __swap(d0_123)
	word32 d2_141 = DPB(d2_127, (word16) d0_138, 0)
	uint16 v28_144 = (uint16) (d2_141 /u (uint16) d1_124)
	d1Out = DPB(d1_124, (word16) __swap(DPB(DPB(d2_141, (uint16) (d2_141 % (uint16) d1_124), 16), v28_144, 0)), 0)
	return DPB(d0_138, v28_144, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002AFA_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



