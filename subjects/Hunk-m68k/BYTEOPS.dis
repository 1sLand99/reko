// fn00001000
// Return size: 4
define fn00001000
fn00001000_entry:
	// succ:  l00001000
l00001000:
	a7 = fp
	// succ:  l0000100A
l0000100A:
	d2 = d0
	CVZN = cond(d2)
	a2 = a0
	a4 = 0x0000AB7E
	a6 = Mem0[0x00000004:word32]
	v10 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v10)
	branch Test(UGE,C) l00001036
	// succ:  l00001020 l00001036
l00001020:
	a0 = 0x00002B88
	d0 = 0x00000030
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	// succ:  l00001030
l00001030:
	Mem0[a0:word32] = 0x00000000
	a0 = a0 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00001030
	// succ:  l00001036 l00001030
l00001036:
	v16 = a7
	Mem0[a4 + -32758:word32] = v16
	CVZN = cond(v16)
	v17 = a6
	Mem0[a4 + -32754:word32] = v17
	CVZN = cond(v17)
	a1 = a1 - a1
	CVZNX = cond(a1)
	d0 = FindTask(a1)
	a3 = d0
	d0 = 0
	CVZN = cond(d0)
	a1 = 0x000012BC
	d0 = OpenLibrary(a1, d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001226
	// succ:  l00001056 l00001226
l00001056:
	v21 = d0
	Mem0[a4 + -32750:word32] = v21
	CVZN = cond(v21)
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(NE,Z) l00001066
	// succ:  l00001060 l00001066
l00001060:
	d4 = 2
	CVZN = cond(d4)
	d2 = 8
	CVZN = cond(d2)
	goto l00001076
	// succ:  l00001076
l00001066:
	a0 = a2
	d4 = 3
	CVZN = cond(d4)
	// succ:  l0000106A
l0000106A:
	v48 = Mem0[a0:byte] - 0x20
	CVZN = cond(v48)
	branch Test(NE,Z) l00001072
	// succ:  l00001070 l00001072
l00001070:
	v49 = (word16) d4 + 0x0001
	d4 = DPB(d4, v49, 0)
	CVZNX = cond(v49)
	// succ:  l00001072
l00001072:
	v55 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v55 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000106A
	// succ:  l00001076 l0000106A
l00001076:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d0 = d0 + 0x00000011
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000123E
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d0 = d0 + 0x00000011
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000123E
	// succ:  l00001096 l0000123E
l00001096:
	a7 = a7 - 0x00000004
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	a5 = d0
	v29 = d3
	Mem0[a5:word32] = v29
	CVZN = cond(v29)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	v30 = d4
	Mem0[a5 + 12:word32] = v30
	CVZN = cond(v30)
	a0 = a5 + 16
	a0 = a0 + d5
	v31 = a0
	Mem0[a5 + 8:word32] = v31
	CVZN = cond(v31)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	a7 = a7 - 0x00000004
	v56 = d0
	Mem0[a7:word32] = v56
	CVZN = cond(v56)
	a5 = d0
	v57 = d3
	Mem0[a5:word32] = v57
	CVZN = cond(v57)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	v58 = d4
	Mem0[a5 + 12:word32] = v58
	CVZN = cond(v58)
	a0 = a5 + 16
	a0 = a0 + d5
	v59 = a0
	Mem0[a5 + 8:word32] = v59
	CVZN = cond(v59)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	// succ:  l000010B6 l00001190
l000010B6:
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 16:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a1 = Mem0[a5 + 8:word32]
	a6 = a5 + 16
	a0 = d0
	d0 = 0
	CVZN = cond(d0)
	v32 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	Mem0[a0 + d0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v33 = a0
	Mem0[a6:word32] = v33
	a6 = a6 + 0x00000004
	CVZN = cond(v33)
	d3 = 1
	CVZN = cond(d3)
	a0 = a2 + d2
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 16:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a1 = Mem0[a5 + 8:word32]
	a6 = a5 + 16
	a0 = d0
	d0 = 0
	CVZN = cond(d0)
	v60 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v60, 0)
	CVZN = cond(v60)
	Mem0[a0 + d0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v61 = a0
	Mem0[a6:word32] = v61
	a6 = a6 + 0x00000004
	CVZN = cond(v61)
	d3 = 1
	CVZN = cond(d3)
	a0 = a2 + d2
	// succ:  l000010DA
l000010DA:
	a0 = a0 - 0x00000001
	v34 = Mem0[a0:byte] - 0x20
	CVZN = cond(v34)
	branch Test(ULE,CZ) l000010E2
	// succ:  l000010DE_1 l000010E2
l000010DE_1:
	d2 = d2 - 0x00000001
	branch d2 != 0xFFFFFFFF l000010DA
	// succ:  l000010E2 l000010DA
l000010E2:
	Mem0[a0 + 1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000010E6
l000010E6:
	v37 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	branch Test(EQ,Z) l00001148
	// succ:  l000010EA l00001148
l000010EA:
	v38 = (byte) d1 - 0x20
	CVZN = cond(v38)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F0 l000010E6
l000010F0:
	v39 = (byte) d1 - 0x09
	CVZN = cond(v39)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F6 l000010E6
l000010F6:
	v40 = d3 - Mem0[a5 + 12:word32]
	CVZN = cond(v40)
	branch Test(EQ,Z) l00001148
	// succ:  l000010FC l00001148
l000010FC:
	v41 = a1
	Mem0[a6:word32] = v41
	a6 = a6 + 0x00000004
	CVZN = cond(v41)
	v42 = (word16) d3 + 0x0001
	d3 = DPB(d3, v42, 0)
	CVZNX = cond(v42)
	v43 = (byte) d1 - 0x22
	CVZN = cond(v43)
	branch Test(EQ,Z) l0000111A
	// succ:  l00001106 l0000111A
l00001106:
	v44 = (byte) d1
	Mem0[a1:byte] = v44
	a1 = a1 + 0x00000001
	CVZN = cond(v44)
	// succ:  l00001108
l00001108:
	v45 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v45, 0)
	CVZN = cond(v45)
	branch Test(EQ,Z) l00001148
	// succ:  l0000110C l00001148
l0000110C:
	v46 = (byte) d1 - 0x20
	CVZN = cond(v46)
	branch Test(EQ,Z) l00001116
	// succ:  l00001112 l00001116
l00001112:
	v47 = (byte) d1
	Mem0[a1:byte] = v47
	a1 = a1 + 0x00000001
	CVZN = cond(v47)
	goto l00001108
	// succ:  l00001108
l00001116:
	Mem0[a1:byte] = 0x00
	a1 = a1 + 0x00000001
	Z = true
	C = false
	N = false
	V = false
	goto l000010E6
	// succ:  l000010E6
l0000111A:
	v70 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v70, 0)
	CVZN = cond(v70)
	branch Test(EQ,Z) l00001148
	// succ:  l0000111E l00001148
l0000111E:
	v71 = (byte) d1 - 0x22
	CVZN = cond(v71)
	branch Test(EQ,Z) l00001116
	// succ:  l00001124 l00001116
l00001124:
	v72 = (byte) d1 - 0x2A
	CVZN = cond(v72)
	branch Test(NE,Z) l00001144
	// succ:  l0000112A l00001144
l0000112A:
	v73 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v73, 0)
	CVZN = cond(v73)
	v74 = (byte) d1
	d2 = DPB(d2, v74, 0)
	CVZN = cond(v74)
	v75 = (byte) d2 & 0xDF
	d2 = DPB(d2, v75, 0)
	ZN = cond(v75)
	C = false
	V = false
	v76 = (byte) d2 - 0x4E
	CVZN = cond(v76)
	branch Test(NE,Z) l0000113C
	// succ:  l00001138 l0000113C
l00001138:
	d1 = 10
	CVZN = cond(d1)
	goto l00001144
	// succ:  l00001144
l0000113C:
	v79 = (byte) d2 - 0x45
	CVZN = cond(v79)
	branch Test(NE,Z) l00001144
	// succ:  l00001142 l00001144
l00001142:
	d1 = 27
	CVZN = cond(d1)
	// succ:  l00001144
l00001144:
	v80 = (byte) d1
	Mem0[a1:byte] = v80
	a1 = a1 + 0x00000001
	CVZN = cond(v80)
	goto l0000111A
	// succ:  l0000111A
l00001148:
	Mem0[a1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	Mem0[a6:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + 16
	a7 = a7 - 0x00000004
	v83 = d3
	Mem0[a7:word32] = v83
	CVZN = cond(v83)
	a6 = Mem0[a4 + -32750:word32]
	execPrivate4()
	v84 = d0
	Mem0[a4 + -32738:word32] = v84
	CVZN = cond(v84)
	execPrivate5()
	v85 = d0
	Mem0[a4 + -32734:word32] = v85
	CVZN = cond(v85)
	a6 = Mem0[a4 + -32754:word32]
	v86 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v86)
	branch Test(ULT,C) l0000117A
	// succ:  l00001172 l0000117A
l00001172:
	v87 = Mem0[a3 + 224:word32]
	Mem0[a4 + -32730:word32] = v87
	CVZN = cond(v87)
	branch Test(NE,Z) l0000117E
	// succ:  l0000117A l0000117E
l0000117A:
	v88 = d0
	Mem0[a4 + -32730:word32] = v88
	CVZN = cond(v88)
	// succ:  l0000117E
l0000117E:
	v89 = Mem0[a3 + 8:byte] - 0x0D
	CVZN = cond(v89)
	branch Test(NE,Z) l000011F8
	// succ:  l00001186 l000011F8
l00001186:
	a0 = Mem0[a3 + 176:word32]
	v90 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	d0 = v90
	CVZN = cond(d0)
	a0 = a0 - d0
	CVZNX = cond(a0)
	goto l00001202
	// succ:  l00001202
l00001190:
	call fn00001214 (retsize: 4;)
	v50 = d0
	Mem0[a7:word32] = v50
	CVZN = cond(v50)
	v51 = d0
	Mem0[a4 + -32746:word32] = v51
	CVZN = cond(v51)
	v52 = d0
	Mem0[a4 + -32742:word32] = v52
	CVZN = cond(v52)
	a7 = a7 - 0x00000004
	v53 = d0
	Mem0[a7:word32] = v53
	CVZN = cond(v53)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a6 = Mem0[a4 + -32750:word32]
	a2 = d0
	d0 = Mem0[a2 + 36:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011B6
	// succ:  l000011AE l000011B6
l000011AE:
	a0 = d0
	d1 = Mem0[a0:word32]
	CVZN = cond(d1)
	Enable()
	// succ:  l000011B6
l000011B6:
	a0 = 0x000012C8
	d1 = a0
	CVZN = cond(d1)
	d2 = 0x000003ED
	CVZN = cond(d2)
	Supervisor(a5)
	v54 = d0
	Mem0[a5 + 4:word32] = v54
	CVZN = cond(v54)
	branch Test(NE,Z) l000011D2
	// succ:  l000011CC l000011D2
l000011CC:
	d2 = 20
	CVZN = cond(d2)
	// succ:  l000011CC_thunk_fn0000127C
l000011CC_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l000011D2:
	v64 = d0
	Mem0[a4 + -32738:word32] = v64
	CVZN = cond(v64)
	v65 = d0
	Mem0[a4 + -32734:word32] = v65
	CVZN = cond(v65)
	v66 = d0
	Mem0[a4 + -32730:word32] = v66
	CVZN = cond(v66)
	v67 = d0
	Mem0[a3 + 156:word32] = v67
	CVZN = cond(v67)
	v68 = d0
	Mem0[a3 + 160:word32] = v68
	CVZN = cond(v68)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 8:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011F4
	// succ:  l000011F0 l000011F4
l000011F0:
	v69 = d0
	Mem0[a3 + 164:word32] = v69
	CVZN = cond(v69)
	// succ:  l000011F4
l000011F4:
	a6 = Mem0[a4 + -32754:word32]
	// succ:  l000011F8
l000011F8:
	d0 = Mem0[a3 + 62:word32]
	CVZN = cond(d0)
	a0 = Mem0[a3 + 58:word32]
	d0 = d0 - a0
	CVZNX = cond(d0)
	// succ:  l00001202
l00001202:
	v77 = a0
	Mem0[a4 + -32718:word32] = v77
	CVZN = cond(v77)
	v78 = a7
	Mem0[a4 + -32714:word32] = v78
	CVZN = cond(v78)
	call fn00001354 (retsize: 4;)
	d2 = 0
	CVZN = cond(d2)
	// succ:  l00001212_thunk_fn0000127C
l00001212_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l00001226:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = 0x00038007
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	goto l0000125C
	// succ:  l0000125C
l0000123E:
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = 0x00010000
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	// succ:  l0000125C
l0000125C:
	ZN = cond(Mem0[a3 + 172:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001268
	// succ:  l00001262 l00001268
l00001262:
	call fn00001214 (retsize: 4;)
	a2 = d0
	call fn0000126C (retsize: 4;)
	// succ:  l00001268
l00001268:
	d0 = 20
	CVZN = cond(d0)
	return
	// succ:  fn00001000_exit
fn00001000_exit:


// fn00001214
// Return size: 4
define fn00001214
fn00001214_entry:
	// succ:  l00001214
l00001214:
	a7 = fp
	a0 = a3 + 92
	WaitPort(a0)
	a0 = a3 + 92
	GetMsg(a0)
	return
	// succ:  fn00001214_exit
fn00001214_exit:


// fn0000126C
// Return size: 4
define fn0000126C
fn0000126C_entry:
	// succ:  l0000126C
l0000126C:
	a7 = fp
	Forbid()
	a1 = a2
	ReplyMsg(a1)
	return
	// succ:  fn0000126C_exit
fn0000126C_exit:


// fn00001278
// Return size: 0
define fn00001278
fn00001278_entry:
	// succ:  l00001278
l00001278:
	a7 = fp
	d2 = Mem0[a7 + 4:word32]
	CVZN = cond(d2)
	// succ:  l00001278_thunk_fn0000127C
l00001278_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001278_exit
fn00001278_exit:


// fn0000127C
// Return size: 4
define fn0000127C
fn0000127C_entry:
	// succ:  l0000127C
l0000127C:
	a7 = v3
	a4 = 0x0000AB7E
	a6 = Mem0[a4 + -32754:word32]
	a7 = Mem0[a4 + -32758:word32]
	a7 = a7 - 0x00000008
	v6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v6
	v8 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = v8
	d1 = Mem0[a5 + 4:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l0000129E
	// succ:  l00001296 l0000129E
l00001296:
	a6 = Mem0[a4 + -32750:word32]
	execPrivate1()
	// succ:  l0000129E
l0000129E:
	a6 = Mem0[a4 + -32754:word32]
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l000012B0
	// succ:  l000012AE l000012B0
l000012AE:
	call fn0000126C (retsize: 4;)
	// succ:  l000012B0
l000012B0:
	a1 = a5
	d0 = Mem0[a5:word32]
	CVZN = cond(d0)
	FreeMem(a1, d0)
	d0 = d2
	CVZN = cond(d0)
	return
	// succ:  fn0000127C_exit
fn0000127C_exit:


// fn000012D0
// Return size: 4
define fn000012D0
fn000012D0_entry:
	// succ:  l000012D0
l000012D0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = 0x00002CD0
	d0 = 0x00002CD0
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001308
	// succ:  l000012E2 l00001308
l000012E2:
	d2 = 1
	CVZN = cond(d2)
	ZN = cond(Mem0[a3 + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000012F6
	// succ:  l000012EA l000012F6
l000012EA:
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	ZN = cond(Mem0[a3 + d0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000012EA
	// succ:  l000012F6 l000012EA
l000012F6:
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(EQ,Z) l00001308
	// succ:  l000012FA l00001308
l000012FA:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a2 = Mem0[a3 + d0:word32]
	call a2 (retsize: 4;)
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(NE,Z) l000012FA
	// succ:  l00001308 l000012FA
l00001308:
	v13 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn00001278 (retsize: 4;)
	a7 = a7 + 0x0004
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000012D0_exit
fn000012D0_exit:


// fn0000131C
// Return size: 4
define fn0000131C
fn0000131C_entry:
	// succ:  l0000131C
l0000131C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	ZN = cond(Mem0[0x00002BB8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000134E
	// succ:  l00001328 l0000134E
l00001328:
	a3 = Mem0[0x00002CE0:word32]
	d0 = 1
	CVZN = cond(d0)
	v11 = d0
	Mem0[0x00002BB8:word32] = v11
	CVZN = cond(v11)
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001346
	// succ:  l0000133A l00001346
l0000133A:
	a2 = Mem0[a3 + 4:word32]
	call a2 (retsize: 4;)
	a3 = Mem0[a3:word32]
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l0000133A
	// succ:  l00001346 l0000133A
l00001346:
	v12 = Mem0[a7 + 12:word32]
	a7 = a7 - 0x00000004
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn000012D0 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l0000134E
l0000134E:
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000131C_exit
fn0000131C_exit:


// fn00001354
// Return size: 4
define fn00001354
fn00001354_entry:
	// succ:  l00001354
l00001354:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a3 = 0x00002CC8
	d0 = 0x00002CC4
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001372
	// succ:  l00001366 l00001372
l00001366:
	ZN = cond(Mem0[a3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001372
	// succ:  l0000136A l00001372
l0000136A:
	v11 = Mem0[a3:word32]
	a3 = a3 + 0x00000004
	a2 = v11
	call a2 (retsize: 4;)
	ZN = cond(Mem0[a3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000136A
	// succ:  l00001372 l0000136A
l00001372:
	v12 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	v14 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn00001390 (retsize: 4;)
	a7 = a7 - 0x00000004
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	call fn0000131C (retsize: 4;)
	a7 = a7 + 12
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001354_exit
fn00001354_exit:


// fn00001390
// Return size: 4
define fn00001390
fn00001390_entry:
	// succ:  l00001390
l00001390:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = DPB(d2, true, 0)
	d3 = DPB(d3, 0x8F, 0)
	CVZN = cond(0x8F)
	v9 = (byte) d3 + (byte) d2
	d3 = DPB(d3, v9, 0)
	CVZNX = cond(v9)
	v11 = (byte) d2 - (byte) d3
	d2 = DPB(d2, v11, 0)
	CVZNX = cond(v11)
	d0 = 0
	CVZN = cond(d0)
	v13 = (byte) d2
	d0 = DPB(d0, v13, 0)
	CVZN = cond(v13)
	d1 = 0
	CVZN = cond(d1)
	v15 = (byte) d3
	d1 = DPB(d1, v15, 0)
	CVZN = cond(v15)
	d4 = d0
	CVZN = cond(d4)
	d5 = d1
	CVZN = cond(d5)
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d4 = d4 *u (word16) d1
	VZN = cond(d4)
	C = false
	d5 = d5 *u (word16) d0
	VZN = cond(d5)
	C = false
	d0 = d0 *u (word16) d1
	VZN = cond(d0)
	C = false
	v20 = (word16) d4 + (word16) d5
	d4 = DPB(d4, v20, 0)
	CVZNX = cond(v20)
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d4
	CVZNX = cond(d0)
	v24 = (byte) d0
	d2 = DPB(d2, v24, 0)
	CVZN = cond(v24)
	d0 = 0
	CVZN = cond(d0)
	v25 = (byte) d3
	d0 = DPB(d0, v25, 0)
	CVZN = cond(v25)
	d1 = 0
	CVZN = cond(d1)
	v26 = (byte) d2
	d1 = DPB(d1, v26, 0)
	CVZN = cond(v26)
	a7 = a7 - 0x00000004
	v27 = d1
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	a7 = a7 - 0x00000004
	v28 = d1
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	a7 = a7 - 0x00000004
	v29 = d0
	Mem0[a7:word32] = v29
	CVZN = cond(v29)
	call fn00002AC8 (retsize: 4;)
	a7 = a7 + 0x0008
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	v30 = (byte) d0
	d3 = DPB(d3, v30, 0)
	CVZN = cond(v30)
	d0 = 0
	CVZN = cond(d0)
	v31 = (byte) d3
	d0 = DPB(d0, v31, 0)
	CVZN = cond(v31)
	d1 = 0
	CVZN = cond(d1)
	v32 = (byte) d2
	d1 = DPB(d1, v32, 0)
	CVZN = cond(v32)
	a7 = a7 - 0x00000004
	v33 = d1
	Mem0[a7:word32] = v33
	CVZN = cond(v33)
	a7 = a7 - 0x00000004
	v34 = d1
	Mem0[a7:word32] = v34
	CVZN = cond(v34)
	a7 = a7 - 0x00000004
	v35 = d0
	Mem0[a7:word32] = v35
	CVZN = cond(v35)
	call fn00002A88 (retsize: 4;)
	a7 = a7 + 0x0008
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	v36 = (byte) d0
	d3 = DPB(d3, v36, 0)
	CVZN = cond(v36)
	d0 = 0
	CVZN = cond(d0)
	v37 = (byte) d2
	d0 = DPB(d0, v37, 0)
	CVZN = cond(v37)
	d0 = d0 << 0x00000005
	CVZNX = cond(d0)
	v38 = (byte) d0
	d2 = DPB(d2, v38, 0)
	CVZN = cond(v38)
	d0 = 0
	CVZN = cond(d0)
	v39 = (byte) d3
	d0 = DPB(d0, v39, 0)
	CVZN = cond(v39)
	d1 = 0
	CVZN = cond(d1)
	v40 = (byte) d2
	d1 = DPB(d1, v40, 0)
	CVZN = cond(v40)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v41 = (byte) d0
	d3 = DPB(d3, v41, 0)
	CVZN = cond(v41)
	d0 = 0
	CVZN = cond(d0)
	v42 = (byte) d3
	d0 = DPB(d0, v42, 0)
	CVZN = cond(v42)
	a7 = a7 - 0x00000004
	v43 = d0
	Mem0[a7:word32] = v43
	CVZN = cond(v43)
	d0 = 0
	CVZN = cond(d0)
	v44 = (byte) d2
	d0 = DPB(d0, v44, 0)
	CVZN = cond(v44)
	a7 = a7 - 0x00000004
	v45 = d0
	Mem0[a7:word32] = v45
	CVZN = cond(v45)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x0000142C
	call fn0000143C (retsize: 4;)
	a7 = a7 + 12
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001390_exit
fn00001390_exit:


// fn0000143C
// Return size: 4
define fn0000143C
fn0000143C_entry:
	// succ:  l0000143C
l0000143C:
	a7 = fp
	a0 = a7 + 8
	a7 = a7 - 0x00000004
	v4 = a0
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	v6 = Mem0[a7 + 8:word32]
	a7 = a7 - 0x00000004
	v7 = v6
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	v8 = Mem0[0x00002CE8:word32]
	a7 = a7 - 0x00000004
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn00001458 (retsize: 4;)
	a7 = a7 + 12
	return
	// succ:  fn0000143C_exit
fn0000143C_exit:


// fn00001458
// Return size: 4
define fn00001458
fn00001458_entry:
	// succ:  l00001458
l00001458:
	a7 = fp
	a7 = a7 + -68
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d3 = Mem0[a7 + 124:word32]
	CVZN = cond(d3)
	a5 = Mem0[a7 + 116:word32]
	a4 = Mem0[a7 + 120:word32]
	d6 = 0
	CVZN = cond(d6)
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001D9E
	// succ:  l00001474 l00001D9E
l00001474:
	v19 = Mem0[a4:byte] - 0x25
	CVZN = cond(v19)
	branch Test(NE,Z) l00001D78
	// succ:  l0000147C l00001D78
l0000147C:
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d5 = -1
	CVZN = cond(d5)
	Mem0[a7 + 72:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d4 = 105
	CVZN = cond(d4)
	a3 = a7 + 76
	d7 = 0
	CVZN = cond(d7)
	Mem0[a7 + 102:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a2 = a4 + 1
	d2 = Mem0[a7 + 72:word32]
	CVZN = cond(d2)
	// succ:  l0000149A
l0000149A:
	d1 = 0
	CVZN = cond(d1)
	// succ:  l0000149C
l0000149C:
	a0 = 0x00001DB0
	a7 = a7 - 0x00000004
	v27 = d0
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	v28 = Mem0[a0 + d1:byte]
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	v29 = (byte) d0 - Mem0[a2:byte]
	CVZN = cond(v29)
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(NE,Z) l000014C0
	// succ:  l000014AE l000014C0
l000014AE:
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v30 = d1
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	v32 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v32
	CVZN = cond(d1)
	d2 = d2 | d0
	ZN = cond(d2)
	C = false
	V = false
	a2 = a2 + 0x00000001
	goto l000014CA
	// succ:  l000014CA
l000014C0:
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v40 = d1 - 0x00000005
	CVZN = cond(v40)
	branch Test(ULT,C) l0000149C
	// succ:  l000014CA l0000149C
l000014CA:
	v33 = d1 - 0x00000005
	CVZN = cond(v33)
	branch Test(ULT,C) l0000149A
	v41 = d1 - 0x00000005
	CVZN = cond(v41)
	branch Test(ULT,C) l0000149A
	// succ:  l000014D2 l0000149A
l000014D2:
	v34 = d2
	Mem0[a7 + 72:word32] = v34
	CVZN = cond(v34)
	v35 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v35)
	branch Test(NE,Z) l00001510
	v42 = d2
	Mem0[a7 + 72:word32] = v42
	CVZN = cond(v42)
	v43 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v43)
	branch Test(NE,Z) l00001510
	// succ:  l000014DC l00001510
l000014DC:
	a2 = a2 + 0x00000001
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v36 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v36
	CVZN = cond(v36)
	branch Test(GE,VN) l00001508
	a2 = a2 + 0x00000001
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v44 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v44
	CVZN = cond(v44)
	branch Test(GE,VN) l00001508
	// succ:  l000014F4 l00001508
l000014F4:
	v38 = Mem0[a7 + 72:word32] | 0x00000004
	Mem0[a7 + 72:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	d0 = Mem0[a7 + 44:word32]
	CVZN = cond(d0)
	d0 = -d0
	CVZNX = cond(d0)
	v39 = d0
	Mem0[a7 + 64:word32] = v39
	CVZN = cond(v39)
	v45 = Mem0[a7 + 72:word32] | 0x00000004
	Mem0[a7 + 72:word32] = v45
	ZN = cond(v45)
	C = false
	V = false
	d0 = Mem0[a7 + 44:word32]
	CVZN = cond(d0)
	d0 = -d0
	CVZNX = cond(d0)
	v46 = d0
	Mem0[a7 + 64:word32] = v46
	CVZN = cond(v46)
	goto l0000157C
	// succ:  l0000157C
l00001508:
	v47 = Mem0[a7 + 44:word32]
	Mem0[a7 + 64:word32] = v47
	CVZN = cond(v47)
	goto l0000157C
	// succ:  l0000157C
l00001510:
	v69 = Mem0[a2:byte]
	d0 = DPB(d0, v69, 0)
	CVZN = cond(v69)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000275D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v70 = Mem0[a0:byte]
	d0 = DPB(d0, v70, 0)
	CVZN = cond(v70)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000157C
	// succ:  l0000152C l0000157C
l0000152C:
	d2 = Mem0[a7 + 64:word32]
	CVZN = cond(d2)
	// succ:  l00001530
l00001530:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v71 = d3
	Mem0[a7:word32] = v71
	CVZN = cond(v71)
	d1 = d0
	CVZN = cond(d1)
	d3 = d2
	CVZN = cond(d3)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d1 = d1 *u (word16) d2
	VZN = cond(d1)
	C = false
	d3 = d3 *u (word16) d0
	VZN = cond(d3)
	C = false
	d0 = d0 *u (word16) d2
	VZN = cond(d0)
	C = false
	v72 = (word16) d1 + (word16) d3
	d1 = DPB(d1, v72, 0)
	CVZNX = cond(v72)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v74 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = v74
	CVZN = cond(d3)
	v75 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v75, 0)
	CVZN = cond(v75)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + d0
	CVZNX = cond(d2)
	v76 = Mem0[a2:byte]
	d0 = DPB(d0, v76, 0)
	CVZN = cond(v76)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000275D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v77 = Mem0[a0:byte]
	d0 = DPB(d0, v77, 0)
	CVZN = cond(v77)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001530
	// succ:  l00001578 l00001530
l00001578:
	v78 = d2
	Mem0[a7 + 64:word32] = v78
	CVZN = cond(v78)
	// succ:  l0000157C
l0000157C:
	v48 = Mem0[a2:byte] - 0x2E
	CVZN = cond(v48)
	branch Test(NE,Z) l00001610
	// succ:  l00001584 l00001610
l00001584:
	a2 = a2 + 0x00000001
	v49 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v49)
	branch Test(NE,Z) l000015AA
	// succ:  l0000158C l000015AA
l0000158C:
	a2 = a2 + 0x00000001
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v50 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v50
	CVZN = cond(v50)
	branch Test(LT,CZ) l00001610
	// succ:  l000015A4 l00001610
l000015A4:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	goto l00001610
	// succ:  l00001610
l000015AA:
	d5 = 0
	CVZN = cond(d5)
	v52 = Mem0[a2:byte]
	d0 = DPB(d0, v52, 0)
	CVZN = cond(v52)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000275D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v53 = Mem0[a0:byte]
	d0 = DPB(d0, v53, 0)
	CVZN = cond(v53)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001610
	// succ:  l000015C8 l00001610
l000015C8:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v54 = d2
	Mem0[a7:word32] = v54
	CVZN = cond(v54)
	d1 = d0
	CVZN = cond(d1)
	d2 = d5
	CVZN = cond(d2)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d1 = d1 *u (word16) d5
	VZN = cond(d1)
	C = false
	d2 = d2 *u (word16) d0
	VZN = cond(d2)
	C = false
	d0 = d0 *u (word16) d5
	VZN = cond(d0)
	C = false
	v56 = (word16) d1 + (word16) d2
	d1 = DPB(d1, v56, 0)
	CVZNX = cond(v56)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v58 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v58
	CVZN = cond(d2)
	v59 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v59, 0)
	CVZN = cond(v59)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d5 = d1
	CVZN = cond(d5)
	d5 = d5 + d0
	CVZNX = cond(d5)
	v60 = Mem0[a2:byte]
	d0 = DPB(d0, v60, 0)
	CVZN = cond(v60)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x0000275D
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v61 = Mem0[a0:byte]
	d0 = DPB(d0, v61, 0)
	CVZN = cond(v61)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l000015C8
	// succ:  l00001610 l000015C8
l00001610:
	v62 = Mem0[a2:byte] - 0x68
	CVZN = cond(v62)
	branch Test(EQ,Z) l00001634
	// succ:  l00001616 l00001634
l00001616:
	v63 = Mem0[a2:byte] - 0x6C
	CVZN = cond(v63)
	branch Test(EQ,Z) l00001634
	// succ:  l0000161C l00001634
l0000161C:
	v64 = Mem0[a2:byte] - 0x4C
	CVZN = cond(v64)
	branch Test(EQ,Z) l00001634
	// succ:  l00001622 l00001634
l00001622:
	v65 = Mem0[a2:byte] - 0x6A
	CVZN = cond(v65)
	branch Test(EQ,Z) l00001634
	// succ:  l00001628 l00001634
l00001628:
	v66 = Mem0[a2:byte] - 0x7A
	CVZN = cond(v66)
	branch Test(EQ,Z) l00001634
	// succ:  l0000162E l00001634
l0000162E:
	v67 = Mem0[a2:byte] - 0x74
	CVZN = cond(v67)
	branch Test(NE,Z) l0000163A
	// succ:  l00001634 l0000163A
l00001634:
	v68 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d4 = DPB(d4, v68, 0)
	CVZN = cond(v68)
	d4 = (int16) (int8) d4
	ZN = cond(d4)
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	// succ:  l0000163A
l0000163A:
	v79 = d4 - 0x00000068
	CVZN = cond(v79)
	branch Test(NE,Z) l0000164C
	// succ:  l00001642 l0000164C
l00001642:
	v80 = Mem0[a2:byte] - 0x68
	CVZN = cond(v80)
	branch Test(NE,Z) l0000164C
	// succ:  l00001648 l0000164C
l00001648:
	d4 = 2
	CVZN = cond(d4)
	a2 = a2 + 0x00000001
	// succ:  l0000164C
l0000164C:
	v81 = d4 - 0x0000006C
	CVZN = cond(v81)
	branch Test(NE,Z) l0000165E
	// succ:  l00001654 l0000165E
l00001654:
	v82 = Mem0[a2:byte] - 0x6C
	CVZN = cond(v82)
	branch Test(NE,Z) l0000165E
	// succ:  l0000165A l0000165E
l0000165A:
	d4 = 1
	CVZN = cond(d4)
	a2 = a2 + 0x00000001
	// succ:  l0000165E
l0000165E:
	v83 = d4 - 0x0000006A
	CVZN = cond(v83)
	branch Test(NE,Z) l00001668
	// succ:  l00001666 l00001668
l00001666:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00001668
l00001668:
	v84 = d4 - 0x0000007A
	CVZN = cond(v84)
	branch Test(NE,Z) l00001672
	// succ:  l00001670 l00001672
l00001670:
	d4 = 108
	CVZN = cond(d4)
	// succ:  l00001672
l00001672:
	v89 = d4 - 0x00000074
	CVZN = cond(v89)
	branch Test(NE,Z) l0000167C
	// succ:  l0000167A l0000167C
l0000167A:
	d4 = 105
	CVZN = cond(d4)
	// succ:  l0000167C
l0000167C:
	v90 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v90, 0)
	CVZN = cond(v90)
	v91 = (byte) d1
	d0 = DPB(d0, v91, 0)
	CVZN = cond(v91)
	v92 = (byte) d1 - 0x25
	CVZN = cond(v92)
	branch Test(EQ,Z) l00001B04
	// succ:  l00001688 l00001B04
l00001688:
	v93 = (byte) d0 - 0x58
	CVZN = cond(v93)
	branch Test(EQ,Z) l000016D6
	// succ:  l0000168E l000016D6
l0000168E:
	v94 = (byte) d0 - 0x63
	CVZN = cond(v94)
	branch Test(EQ,Z) l00001A84
	// succ:  l00001696 l00001A84
l00001696:
	v95 = (byte) d0 - 0x64
	CVZN = cond(v95)
	branch Test(EQ,Z) l000016D6
	// succ:  l0000169C l000016D6
l0000169C:
	v96 = (byte) d0 - 0x69
	CVZN = cond(v96)
	branch Test(EQ,Z) l000016D6
	// succ:  l000016A2 l000016D6
l000016A2:
	v97 = (byte) d0
	Mem0[a7 + 44:byte] = v97
	CVZN = cond(v97)
	v98 = (byte) d0 - 0x6E
	CVZN = cond(v98)
	branch Test(EQ,Z) l00001B16
	// succ:  l000016AE l00001B16
l000016AE:
	v99 = Mem0[a7 + 44:byte]
	d0 = DPB(d0, v99, 0)
	CVZN = cond(v99)
	v100 = (byte) d0 - 0x6F
	d0 = DPB(d0, v100, 0)
	CVZNX = cond(v100)
	v101 = (byte) d0 - 0x01
	CVZN = cond(v101)
	branch Test(ULE,VZ) l000016D6
	// succ:  l000016BC l000016D6
l000016BC:
	v103 = Mem0[a7 + 44:byte]
	d0 = DPB(d0, v103, 0)
	CVZN = cond(v103)
	v104 = (byte) d0 - 0x73
	CVZN = cond(v104)
	branch Test(EQ,Z) l00001AC0
	// succ:  l000016C8 l00001AC0
l000016C8:
	v105 = (byte) d0 - 0x75
	CVZN = cond(v105)
	branch Test(EQ,Z) l000016D6
	// succ:  l000016CE l000016D6
l000016CE:
	v106 = (byte) d0 - 0x78
	CVZN = cond(v106)
	branch Test(NE,Z) l00001BAE
	// succ:  l000016D6 l00001BAE
l000016D6:
	v107 = (byte) d1 - 0x70
	CVZN = cond(v107)
	branch Test(NE,Z) l000016E8
	// succ:  l000016DC l000016E8
l000016DC:
	d4 = 108
	CVZN = cond(d4)
	d1 = 120
	CVZN = cond(d1)
	v108 = Mem0[a7 + 72:word32] | 0x00000001
	Mem0[a7 + 72:word32] = v108
	ZN = cond(v108)
	C = false
	V = false
	// succ:  l000016E8
l000016E8:
	v109 = (byte) d1 - 0x64
	CVZN = cond(v109)
	branch Test(EQ,Z) l000016F6
	// succ:  l000016EE l000016F6
l000016EE:
	v110 = (byte) d1 - 0x69
	CVZN = cond(v110)
	branch Test(NE,Z) l00001840
	// succ:  l000016F6 l00001840
l000016F6:
	v111 = d4 - 0x00000001
	CVZN = cond(v111)
	branch Test(NE,Z) l0000171C
	// succ:  l000016FE l0000171C
l000016FE:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000008
	CVZNX = cond(d3)
	a0 = d3
	v112 = Mem0[a0 + -4:word32]
	Mem0[a7 + 52:word32] = v112
	CVZN = cond(v112)
	v113 = Mem0[a0 + -8:word32]
	Mem0[a7 + 48:word32] = v113
	CVZN = cond(v113)
	goto l000017B4
	// succ:  l000017B4
l0000171C:
	v119 = d4 - 0x0000006C
	CVZN = cond(v119)
	branch Test(NE,Z) l00001748
	// succ:  l00001724 l00001748
l00001724:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	d0 = Mem0[a0 + -4:word32]
	CVZN = cond(d0)
	v120 = d0
	Mem0[a7 + 52:word32] = v120
	CVZN = cond(v120)
	a7 = a7 - 0x00000004
	v121 = d1
	Mem0[a7:word32] = v121
	CVZN = cond(v121)
	d1 = 31
	CVZN = cond(d1)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v122 = d0
	Mem0[a7 + 52:word32] = v122
	CVZN = cond(v122)
	v123 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v123
	CVZN = cond(d1)
	goto l000017B4
	// succ:  l000017B4
l00001748:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	d0 = Mem0[a0 + -4:word32]
	CVZN = cond(d0)
	v210 = d0
	Mem0[a7 + 52:word32] = v210
	CVZN = cond(v210)
	a7 = a7 - 0x00000004
	v211 = d1
	Mem0[a7:word32] = v211
	CVZN = cond(v211)
	d1 = 31
	CVZN = cond(d1)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v212 = d0
	Mem0[a7 + 52:word32] = v212
	CVZN = cond(v212)
	v213 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v213
	CVZN = cond(d1)
	v214 = d4 - 0x00000068
	CVZN = cond(v214)
	branch Test(NE,Z) l0000178E
	// succ:  l00001772 l0000178E
l00001772:
	v215 = Mem0[a7 + 54:word16]
	d0 = DPB(d0, v215, 0)
	CVZN = cond(v215)
	a7 = a7 - 0x00000004
	v216 = d1
	Mem0[a7:word32] = v216
	CVZN = cond(v216)
	v217 = (word16) d0
	d1 = DPB(d1, v217, 0)
	CVZN = cond(v217)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	v218 = d1
	Mem0[a7 + 56:word32] = v218
	CVZN = cond(v218)
	a7 = a7 - 0x00000004
	v219 = d0
	Mem0[a7:word32] = v219
	CVZN = cond(v219)
	d0 = 31
	CVZN = cond(d0)
	d1 = d1 >> d0
	CVZNX = cond(d1)
	v220 = d1
	Mem0[a7 + 56:word32] = v220
	CVZN = cond(v220)
	v221 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v221
	CVZN = cond(d1)
	v222 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v222
	CVZN = cond(d0)
	// succ:  l0000178E
l0000178E:
	v223 = d4 - 0x00000002
	CVZN = cond(v223)
	branch Test(NE,Z) l000017B4
	// succ:  l00001796 l000017B4
l00001796:
	v224 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v224, 0)
	CVZN = cond(v224)
	a7 = a7 - 0x00000004
	v225 = d1
	Mem0[a7:word32] = v225
	CVZN = cond(v225)
	v226 = (byte) d0
	d1 = DPB(d1, v226, 0)
	CVZN = cond(v226)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	v227 = d1
	Mem0[a7 + 56:word32] = v227
	CVZN = cond(v227)
	a7 = a7 - 0x00000004
	v228 = d0
	Mem0[a7:word32] = v228
	CVZN = cond(v228)
	d0 = 31
	CVZN = cond(d0)
	d1 = d1 >> d0
	CVZNX = cond(d1)
	v229 = d1
	Mem0[a7 + 56:word32] = v229
	CVZN = cond(v229)
	v230 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v230
	CVZN = cond(d1)
	v231 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v231
	CVZN = cond(d0)
	// succ:  l000017B4
l000017B4:
	v124 = (byte) d1
	Mem0[a7 + 44:byte] = v124
	CVZN = cond(v124)
	a7 = a7 - 0x00000004
	v125 = d0
	Mem0[a7:word32] = v125
	CVZN = cond(v125)
	a7 = a7 - 0x00000004
	v126 = d1
	Mem0[a7:word32] = v126
	CVZN = cond(v126)
	d0 = Mem0[a7 + 60:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 56:word32]
	CVZN = cond(d1)
	a7 = a7 - 0x00000004
	v127 = d2
	Mem0[a7:word32] = v127
	CVZN = cond(v127)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(GE,VN) l000017FE
	// succ:  l000017DE l000017FE
l000017DE:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v129 = 0x2D
	Mem0[a0:byte] = v129
	CVZN = cond(v129)
	v130 = a7 + 48
	d0 = Mem0[v130:word32]
	v130 = v130 + 0x00000004
	d1 = Mem0[v130:word32]
	v130 = v130 + 0x00000004
	d1 = -d1
	CVZNX = cond(d1)
	d0 = -d0 - X
	CVZNX = cond(d0)
	v131 = a7 + 56
	a6 = Mem0[v131:word32]
	v131 = v131 + 0x00000004
	a7 = Mem0[v131:word32]
	v131 = v131 + 0x00000004
	goto l00001974
	// succ:  l00001974
l000017FE:
	v147 = Mem0[a7 + 44:byte]
	d1 = DPB(d1, v147, 0)
	CVZN = cond(v147)
	d0 = 16
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001818
	// succ:  l0000180A l00001818
l0000180A:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v148 = 0x2B
	Mem0[a0:byte] = v148
	CVZN = cond(v148)
	goto l0000182C
	// succ:  l0000182C
l00001818:
	d0 = 8
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000182C
	// succ:  l00001820 l0000182C
l00001820:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v208 = 0x20
	Mem0[a0:byte] = v208
	CVZN = cond(v208)
	// succ:  l0000182C
l0000182C:
	v161 = Mem0[a7 + 52:word32]
	Mem0[a7 + 60:word32] = v161
	CVZN = cond(v161)
	v162 = Mem0[a7 + 48:word32]
	Mem0[a7 + 56:word32] = v162
	CVZN = cond(v162)
	v163 = (byte) d1
	Mem0[a7 + 44:byte] = v163
	CVZN = cond(v163)
	goto l00001974
	// succ:  l00001974
l00001840:
	v232 = d4 - 0x00000001
	CVZN = cond(v232)
	branch Test(NE,Z) l00001864
	// succ:  l00001848 l00001864
l00001848:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000008
	CVZNX = cond(d3)
	a0 = d3
	v233 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v233
	CVZN = cond(v233)
	v234 = Mem0[a0 + -8:word32]
	Mem0[a7 + 56:word32] = v234
	CVZN = cond(v234)
	goto l0000189E
	// succ:  l0000189E
l00001864:
	v242 = d4 - 0x0000006C
	CVZN = cond(v242)
	branch Test(NE,Z) l00001886
	// succ:  l0000186C l00001886
l0000186C:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v243 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v243
	CVZN = cond(v243)
	Mem0[a7 + 56:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l0000189E
	// succ:  l0000189E
l00001886:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v264 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v264
	CVZN = cond(v264)
	Mem0[a7 + 56:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l0000189E
l0000189E:
	v235 = d4 - 0x00000068
	CVZN = cond(v235)
	branch Test(NE,Z) l000018BA
	// succ:  l000018A6 l000018BA
l000018A6:
	v236 = Mem0[a7 + 62:word16]
	d0 = DPB(d0, v236, 0)
	CVZN = cond(v236)
	a7 = a7 - 0x00000004
	v237 = d1
	Mem0[a7:word32] = v237
	CVZN = cond(v237)
	d1 = 0
	CVZN = cond(d1)
	v238 = (word16) d0
	d1 = DPB(d1, v238, 0)
	CVZN = cond(v238)
	v239 = d1
	Mem0[a7 + 64:word32] = v239
	CVZN = cond(v239)
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v241 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v241
	CVZN = cond(d1)
	// succ:  l000018BA
l000018BA:
	v248 = d4 - 0x00000002
	CVZN = cond(v248)
	branch Test(NE,Z) l000018D6
	// succ:  l000018C2 l000018D6
l000018C2:
	v249 = Mem0[a7 + 63:byte]
	d0 = DPB(d0, v249, 0)
	CVZN = cond(v249)
	a7 = a7 - 0x00000004
	v250 = d1
	Mem0[a7:word32] = v250
	CVZN = cond(v250)
	d1 = 0
	CVZN = cond(d1)
	v251 = (byte) d0
	d1 = DPB(d1, v251, 0)
	CVZN = cond(v251)
	v252 = d1
	Mem0[a7 + 64:word32] = v252
	CVZN = cond(v252)
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v254 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = v254
	CVZN = cond(d1)
	// succ:  l000018D6
l000018D6:
	d0 = 1
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	v258 = (byte) d1
	Mem0[a7 + 44:byte] = v258
	CVZN = cond(v258)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001974
	// succ:  l000018E6 l00001974
l000018E6:
	v259 = (byte) d1 - 0x6F
	CVZN = cond(v259)
	branch Test(NE,Z) l00001922
	// succ:  l000018EC l00001922
l000018EC:
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001916
	// succ:  l000018F0 l00001916
l000018F0:
	a7 = a7 - 0x00000004
	v260 = d0
	Mem0[a7:word32] = v260
	CVZN = cond(v260)
	a7 = a7 - 0x00000004
	v261 = d1
	Mem0[a7:word32] = v261
	CVZN = cond(v261)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 64:word32]
	CVZN = cond(d1)
	a7 = a7 - 0x00000004
	v262 = d2
	Mem0[a7:word32] = v262
	CVZN = cond(v262)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(EQ,Z) l00001922
	// succ:  l00001916 l00001922
l00001916:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v263 = 0x30
	Mem0[a0:byte] = v263
	CVZN = cond(v263)
	// succ:  l00001922
l00001922:
	v268 = (byte) d1 - 0x78
	CVZN = cond(v268)
	branch Test(EQ,Z) l00001932
	// succ:  l00001928 l00001932
l00001928:
	v269 = (byte) d1
	Mem0[a7 + 44:byte] = v269
	CVZN = cond(v269)
	v270 = (byte) d1 - 0x58
	CVZN = cond(v270)
	branch Test(NE,Z) l00001974
	// succ:  l00001932 l00001974
l00001932:
	v271 = (byte) d1
	Mem0[a7 + 44:byte] = v271
	CVZN = cond(v271)
	a7 = a7 - 0x00000004
	v272 = d0
	Mem0[a7:word32] = v272
	CVZN = cond(v272)
	a7 = a7 - 0x00000004
	v273 = d1
	Mem0[a7:word32] = v273
	CVZN = cond(v273)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 64:word32]
	CVZN = cond(d1)
	a7 = a7 - 0x00000004
	v274 = d2
	Mem0[a7:word32] = v274
	CVZN = cond(v274)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(EQ,Z) l00001974
	// succ:  l0000195C l00001974
l0000195C:
	a0 = a7 + 106
	a1 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v275 = 0x30
	Mem0[a1:byte] = v275
	CVZN = cond(v275)
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v276 = (byte) d1
	Mem0[a0:byte] = v276
	CVZN = cond(v276)
	v277 = (byte) d1
	Mem0[a7 + 44:byte] = v277
	CVZN = cond(v277)
	// succ:  l00001974
l00001974:
	v136 = Mem0[a7 + 44:byte]
	d1 = DPB(d1, v136, 0)
	CVZN = cond(v136)
	a3 = a7 + 98
	v137 = (byte) d1 - 0x78
	CVZN = cond(v137)
	branch Test(EQ,Z) l00001988
	// succ:  l00001982 l00001988
l00001982:
	v138 = (byte) d1 - 0x58
	CVZN = cond(v138)
	branch Test(NE,Z) l00001992
	// succ:  l00001988 l00001992
l00001988:
	v139 = 0x00000010
	Mem0[a7 + 44:word32] = v139
	CVZN = cond(v139)
	goto l000019B0
	// succ:  l000019B0
l00001992:
	v151 = (byte) d1 - 0x6F
	CVZN = cond(v151)
	branch Test(NE,Z) l000019A2
	// succ:  l00001998 l000019A2
l00001998:
	v152 = 0x00000008
	Mem0[a7 + 48:word32] = v152
	CVZN = cond(v152)
	goto l000019AA
	// succ:  l000019AA
l000019A2:
	v195 = 0x0000000A
	Mem0[a7 + 48:word32] = v195
	CVZN = cond(v195)
	// succ:  l000019AA
l000019AA:
	v182 = Mem0[a7 + 48:word32]
	Mem0[a7 + 44:word32] = v182
	CVZN = cond(v182)
	// succ:  l000019B0
l000019B0:
	v149 = Mem0[a7 + 44:word32]
	Mem0[a7 + 108:word32] = v149
	CVZN = cond(v149)
	v150 = (byte) d1 - 0x58
	CVZN = cond(v150)
	branch Test(EQ,Z) l000019C2
	// succ:  l000019BC l000019C2
l000019BC:
	a6 = 0x00001DB8
	goto l000019C6
	// succ:  l000019C6
l000019C2:
	a6 = 0x00001DC8
	// succ:  l000019C6
l000019C6:
	v164 = a6
	Mem0[a7 + 44:word32] = v164
	CVZN = cond(v164)
	v165 = d3
	Mem0[a7 + 124:word32] = v165
	CVZN = cond(v165)
	v166 = d5
	Mem0[a7 + 68:word32] = v166
	CVZN = cond(v166)
	v167 = d6
	Mem0[a7 + 48:word32] = v167
	CVZN = cond(v167)
	v168 = d7
	Mem0[a7 + 98:word32] = v168
	CVZN = cond(v168)
	v169 = a7 + 56
	d6 = Mem0[v169:word32]
	v169 = v169 + 0x00000004
	d7 = Mem0[v169:word32]
	v169 = v169 + 0x00000004
	d3 = Mem0[a7 + 102:word32]
	CVZN = cond(d3)
	a1 = Mem0[a7 + 44:word32]
	// succ:  l000019E8
l000019E8:
	d1 = Mem0[a7 + 108:word32]
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	a7 = a7 - 0x00000004
	v170 = d0
	Mem0[a7:word32] = v170
	CVZN = cond(v170)
	a7 = a7 - 0x00000004
	v171 = d1
	Mem0[a7:word32] = v171
	CVZN = cond(v171)
	a7 = a7 - 0x00000004
	v172 = a1
	Mem0[a7:word32] = v172
	CVZN = cond(v172)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	call fn00002648 (retsize: 4;)
	a7 = a7 + 16
	v173 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = v173
	d4 = d0
	CVZN = cond(d4)
	d5 = d1
	CVZN = cond(d5)
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = d5
	CVZN = cond(d2)
	v174 = Mem0[a1 + d2:byte]
	a3 = a3 - 0x00000001
	v175 = v174
	Mem0[a3:byte] = v175
	CVZN = cond(v175)
	a7 = a7 - 0x00000004
	v176 = d0
	Mem0[a7:word32] = v176
	CVZN = cond(v176)
	a7 = a7 - 0x00000004
	v177 = d1
	Mem0[a7:word32] = v177
	CVZN = cond(v177)
	a7 = a7 - 0x00000004
	v178 = a1
	Mem0[a7:word32] = v178
	CVZN = cond(v178)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	call fn000023F8 (retsize: 4;)
	a7 = a7 + 16
	v179 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = v179
	d6 = d0
	CVZN = cond(d6)
	d7 = d1
	CVZN = cond(d7)
	d1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d0 = d7
	CVZN = cond(d0)
	d1 = d6
	CVZN = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	branch Test(NE,Z) l000019E8
	// succ:  l00001A56 l000019E8
l00001A56:
	v180 = d3
	Mem0[a7 + 102:word32] = v180
	CVZN = cond(v180)
	d7 = Mem0[a7 + 98:word32]
	CVZN = cond(d7)
	d6 = Mem0[a7 + 48:word32]
	CVZN = cond(d6)
	d5 = Mem0[a7 + 68:word32]
	CVZN = cond(d5)
	d3 = Mem0[a7 + 124:word32]
	CVZN = cond(d3)
	v181 = d5 - 0xFFFFFFFF
	CVZN = cond(v181)
	branch Test(NE,Z) l00001A78
	// succ:  l00001A72 l00001A78
l00001A72:
	d5 = 0
	CVZN = cond(d5)
	goto l00001BC4
	// succ:  l00001BC4
l00001A78:
	v185 = Mem0[a7 + 72:word32] & 0xFFFFFFFD
	Mem0[a7 + 72:word32] = v185
	ZN = cond(v185)
	C = false
	V = false
	goto l00001BC4
	// succ:  l00001BC4
l00001A84:
	v281 = d4 - 0x0000006C
	CVZN = cond(v281)
	branch Test(NE,Z) l00001AA0
	// succ:  l00001A8C l00001AA0
l00001A8C:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v282 = Mem0[a0 + -1:byte]
	Mem0[a3:byte] = v282
	CVZN = cond(v282)
	goto l00001AB2
	// succ:  l00001AB2
l00001AA0:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v283 = Mem0[a0 + -1:byte]
	Mem0[a3:byte] = v283
	CVZN = cond(v283)
	// succ:  l00001AB2
l00001AB2:
	v284 = 0x00000001
	Mem0[a7 + 102:word32] = v284
	CVZN = cond(v284)
	d5 = 0
	CVZN = cond(d5)
	goto l00001BC4
	// succ:  l00001BC4
l00001AC0:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a3 = Mem0[a0 + -4:word32]
	a1 = a3
	Mem0[a7 + 102:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001AE2
	// succ:  l00001ADC l00001AE2
l00001ADC:
	v116 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v116)
	branch Test(ULE,VZ) l00001AFE
	// succ:  l00001AE2 l00001AFE
l00001AE2:
	ZN = cond(Mem0[a1:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001AFE
	// succ:  l00001AE6 l00001AFE
l00001AE6:
	d0 = Mem0[a7 + 102:word32]
	CVZN = cond(d0)
	// succ:  l00001AEA
l00001AEA:
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	a1 = a1 + 0x00000001
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(ULE,VZ) l00001AF6
	// succ:  l00001AF2 l00001AF6
l00001AF2:
	v117 = d5 - d0
	CVZN = cond(v117)
	branch Test(ULE,VZ) l00001AFA
	// succ:  l00001AF6 l00001AFA
l00001AF6:
	ZN = cond(Mem0[a1:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001AEA
	// succ:  l00001AFA l00001AEA
l00001AFA:
	v118 = d0
	Mem0[a7 + 102:word32] = v118
	CVZN = cond(v118)
	// succ:  l00001AFE
l00001AFE:
	d5 = 0
	CVZN = cond(d5)
	goto l00001BC4
	// succ:  l00001BC4
l00001B04:
	a3 = 0x00001DAC
	v285 = 0x00000001
	Mem0[a7 + 102:word32] = v285
	CVZN = cond(v285)
	d5 = 0
	CVZN = cond(d5)
	goto l00001BC4
	// succ:  l00001BC4
l00001B16:
	v245 = d4 - 0x00000001
	CVZN = cond(v245)
	branch Test(NE,Z) l00001B38
	// succ:  l00001B1E l00001B38
l00001B1E:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v246 = d6
	Mem0[a0 + 4:word32] = v246
	CVZN = cond(v246)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001BA6
	// succ:  l00001BA6
l00001B38:
	v256 = d4 - 0x0000006C
	CVZN = cond(v256)
	branch Test(NE,Z) l00001B56
	// succ:  l00001B40 l00001B56
l00001B40:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v257 = d6
	Mem0[a0:word32] = v257
	CVZN = cond(v257)
	goto l00001BA6
	// succ:  l00001BA6
l00001B56:
	v266 = d4 - 0x00000068
	CVZN = cond(v266)
	branch Test(NE,Z) l00001B74
	// succ:  l00001B5E l00001B74
l00001B5E:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v267 = (word16) d6
	Mem0[a0:word16] = v267
	CVZN = cond(v267)
	goto l00001BA6
	// succ:  l00001BA6
l00001B74:
	v278 = d4 - 0x00000002
	CVZN = cond(v278)
	branch Test(NE,Z) l00001B92
	// succ:  l00001B7C l00001B92
l00001B7C:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v279 = (byte) d6
	Mem0[a0:byte] = v279
	CVZN = cond(v279)
	goto l00001BA6
	// succ:  l00001BA6
l00001B92:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v280 = d6
	Mem0[a0:word32] = v280
	CVZN = cond(v280)
	// succ:  l00001BA6
l00001BA6:
	d5 = 0
	CVZN = cond(d5)
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001BC4
	// succ:  l00001BC4
l00001BAE:
	ZN = cond((byte) d1 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001BB4
	// succ:  l00001BB2 l00001BB4
l00001BB2:
	a2 = a2 - 0x00000001
	// succ:  l00001BB4
l00001BB4:
	a3 = a4
	d0 = a2
	CVZN = cond(d0)
	d0 = d0 - a4
	CVZNX = cond(d0)
	v132 = d0
	Mem0[a7 + 102:word32] = v132
	CVZN = cond(v132)
	d5 = 0
	CVZN = cond(d5)
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00001BC4
l00001BC4:
	v134 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v134)
	branch Test(UGT,CZ) l00001BD2
	// succ:  l00001BCA l00001BD2
l00001BCA:
	v135 = Mem0[a7 + 102:word32]
	Mem0[a7 + 44:word32] = v135
	CVZN = cond(v135)
	goto l00001BD6
	// succ:  l00001BD6
l00001BD2:
	v146 = d5
	Mem0[a7 + 44:word32] = v146
	CVZN = cond(v146)
	// succ:  l00001BD6
l00001BD6:
	a7 = a7 - 0x00000004
	v140 = d0
	Mem0[a7:word32] = v140
	CVZN = cond(v140)
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	d0 = d0 + d7
	CVZNX = cond(d0)
	v141 = d0
	Mem0[a7 + 52:word32] = v141
	CVZN = cond(v141)
	v142 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v142
	CVZN = cond(d0)
	a7 = a7 - 0x00000004
	v143 = d0
	Mem0[a7:word32] = v143
	CVZN = cond(v143)
	d0 = Mem0[a7 + 52:word32]
	CVZN = cond(d0)
	v144 = d0 - Mem0[a7 + 68:word32]
	CVZN = cond(v144)
	d0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	branch Test(ULT,C) l00001BFA
	// succ:  l00001BF4 l00001BFA
l00001BF4:
	Mem0[a7 + 44:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001C0A
	// succ:  l00001C0A
l00001BFA:
	a7 = a7 - 0x00000004
	v158 = d0
	Mem0[a7:word32] = v158
	CVZN = cond(v158)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d0 = d0 - Mem0[a7 + 52:word32]
	CVZNX = cond(d0)
	v159 = d0
	Mem0[a7 + 48:word32] = v159
	CVZN = cond(v159)
	v160 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d0 = v160
	CVZN = cond(d0)
	// succ:  l00001C0A
l00001C0A:
	v153 = Mem0[a7 + 44:word32]
	Mem0[a7 + 48:word32] = v153
	CVZN = cond(v153)
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001C4C
	// succ:  l00001C18 l00001C4C
l00001C18:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001C4C
	// succ:  l00001C1E l00001C4C
l00001C1E:
	a7 = a7 - 0x00000004
	v154 = a5
	Mem0[a7:word32] = v154
	CVZN = cond(v154)
	a0 = a7 + 110
	a0 = a0 + d2
	v155 = Mem0[a0:byte]
	d0 = DPB(d0, v155, 0)
	CVZN = cond(v155)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v156 = d0
	Mem0[a7:word32] = v156
	CVZN = cond(v156)
	call fn00001DD8 (retsize: 4;)
	a7 = a7 + 0x0008
	v157 = d0 - 0xFFFFFFFF
	CVZN = cond(v157)
	branch Test(NE,Z) l00001C44
	// succ:  l00001C3E l00001C44
l00001C3E:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DA0
	// succ:  l00001DA0
l00001C44:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v183 = d7 - d2
	CVZN = cond(v183)
	branch Test(UGT,CZ) l00001C1E
	// succ:  l00001C4C l00001C1E
l00001C4C:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001C9E
	// succ:  l00001C54 l00001C9E
l00001C54:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001C9E
	// succ:  l00001C5C l00001C9E
l00001C5C:
	d4 = Mem0[a7 + 72:word32]
	CVZN = cond(d4)
	a4 = Mem0[a7 + 48:word32]
	// succ:  l00001C64
l00001C64:
	a7 = a7 - 0x00000004
	v184 = a5
	Mem0[a7:word32] = v184
	CVZN = cond(v184)
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & d4
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001C72
	// succ:  l00001C6C l00001C72
l00001C6C:
	a0 = DPB(a0, 0x0030, 0)
	goto l00001C76
	// succ:  l00001C76
l00001C72:
	a0 = DPB(a0, 0x0020, 0)
	// succ:  l00001C76
l00001C76:
	a7 = a7 - 0x00000004
	v186 = a0
	Mem0[a7:word32] = v186
	CVZN = cond(v186)
	call fn00001DD8 (retsize: 4;)
	a7 = a7 + 0x0008
	v187 = d0 - 0xFFFFFFFF
	CVZN = cond(v187)
	branch Test(NE,Z) l00001C8E
	// succ:  l00001C88 l00001C8E
l00001C88:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DA0
	// succ:  l00001DA0
l00001C8E:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v192 = a4 - d2
	CVZN = cond(v192)
	branch Test(UGT,CZ) l00001C64
	// succ:  l00001C96 l00001C64
l00001C96:
	v193 = a4
	Mem0[a7 + 48:word32] = v193
	CVZN = cond(v193)
	v194 = d4
	Mem0[a7 + 72:word32] = v194
	CVZN = cond(v194)
	// succ:  l00001C9E
l00001C9E:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001CDA
	// succ:  l00001CA6 l00001CDA
l00001CA6:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001CDA
	// succ:  l00001CAC l00001CDA
l00001CAC:
	a7 = a7 - 0x00000004
	v188 = a5
	Mem0[a7:word32] = v188
	CVZN = cond(v188)
	a0 = a7 + 110
	a0 = a0 + d2
	v189 = Mem0[a0:byte]
	d0 = DPB(d0, v189, 0)
	CVZN = cond(v189)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v190 = d0
	Mem0[a7:word32] = v190
	CVZN = cond(v190)
	call fn00001DD8 (retsize: 4;)
	a7 = a7 + 0x0008
	v191 = d0 - 0xFFFFFFFF
	CVZN = cond(v191)
	branch Test(NE,Z) l00001CD2
	// succ:  l00001CCC l00001CD2
l00001CCC:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DA0
	// succ:  l00001DA0
l00001CD2:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v196 = d7 - d2
	CVZN = cond(v196)
	branch Test(UGT,CZ) l00001CAC
	// succ:  l00001CDA l00001CAC
l00001CDA:
	d2 = Mem0[a7 + 102:word32]
	CVZN = cond(d2)
	v197 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v197)
	branch Test(ULE,VZ) l00001D08
	// succ:  l00001CE4 l00001D08
l00001CE4:
	a7 = a7 - 0x00000004
	v198 = a5
	Mem0[a7:word32] = v198
	CVZN = cond(v198)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000030
	call fn00001DD8 (retsize: 4;)
	a7 = a7 + 0x0008
	v199 = d0 - 0xFFFFFFFF
	CVZN = cond(v199)
	branch Test(NE,Z) l00001D00
	// succ:  l00001CFA l00001D00
l00001CFA:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DA0
	// succ:  l00001DA0
l00001D00:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v200 = d5 - d2
	CVZN = cond(v200)
	branch Test(UGT,CZ) l00001CE4
	// succ:  l00001D08 l00001CE4
l00001D08:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 102:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001D3E
	// succ:  l00001D10 l00001D3E
l00001D10:
	a4 = Mem0[a7 + 102:word32]
	// succ:  l00001D14
l00001D14:
	a7 = a7 - 0x00000004
	v201 = a5
	Mem0[a7:word32] = v201
	CVZN = cond(v201)
	a0 = a3 + d2
	v202 = Mem0[a0:byte]
	d0 = DPB(d0, v202, 0)
	CVZN = cond(v202)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v203 = d0
	Mem0[a7:word32] = v203
	CVZN = cond(v203)
	call fn00001DD8 (retsize: 4;)
	a7 = a7 + 0x0008
	v204 = d0 - 0xFFFFFFFF
	CVZN = cond(v204)
	branch Test(NE,Z) l00001D36
	// succ:  l00001D32 l00001D36
l00001D32:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DA0
	// succ:  l00001DA0
l00001D36:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v205 = a4 - d2
	CVZN = cond(v205)
	branch Test(UGT,CZ) l00001D14
	// succ:  l00001D3E l00001D14
l00001D3E:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001D74
	// succ:  l00001D46 l00001D74
l00001D46:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001D74
	// succ:  l00001D4E l00001D74
l00001D4E:
	a3 = Mem0[a7 + 48:word32]
	// succ:  l00001D52
l00001D52:
	a7 = a7 - 0x00000004
	v206 = a5
	Mem0[a7:word32] = v206
	CVZN = cond(v206)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000020
	call fn00001DD8 (retsize: 4;)
	a7 = a7 + 0x0008
	v207 = d0 - 0xFFFFFFFF
	CVZN = cond(v207)
	branch Test(NE,Z) l00001D6C
	// succ:  l00001D68 l00001D6C
l00001D68:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DA0
	// succ:  l00001DA0
l00001D6C:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v209 = a3 - d2
	CVZN = cond(v209)
	branch Test(UGT,CZ) l00001D52
	// succ:  l00001D74 l00001D52
l00001D74:
	a4 = a2
	goto l00001D98
	// succ:  l00001D98
l00001D78:
	a7 = a7 - 0x00000004
	v85 = a5
	Mem0[a7:word32] = v85
	CVZN = cond(v85)
	v86 = Mem0[a4:byte]
	a4 = a4 + 0x00000001
	d0 = DPB(d0, v86, 0)
	CVZN = cond(v86)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 0x00000004
	v87 = d0
	Mem0[a7:word32] = v87
	CVZN = cond(v87)
	call fn00001DD8 (retsize: 4;)
	a7 = a7 + 0x0008
	v88 = d0 - 0xFFFFFFFF
	CVZN = cond(v88)
	branch Test(NE,Z) l00001D96
	// succ:  l00001D92 l00001D96
l00001D92:
	d0 = d6
	CVZN = cond(d0)
	goto l00001DA0
	// succ:  l00001DA0
l00001D96:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	// succ:  l00001D98
l00001D98:
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001474
	// succ:  l00001D9E l00001474
l00001D9E:
	d0 = d6
	CVZN = cond(d0)
	d0 = d6
	CVZN = cond(d0)
	// succ:  l00001DA0
l00001DA0:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a7 = a7 + 68
	return
	// succ:  fn00001458_exit
fn00001458_exit:


// fn00001DD8
// Return size: 4
define fn00001DD8
fn00001DD8_entry:
	// succ:  l00001DD8
l00001DD8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 16:word32]
	CVZN = cond(d2)
	a2 = Mem0[a7 + 20:word32]
	a0 = a2 + 24
	d0 = 2
	CVZN = cond(d0)
	v9 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	a0 = a2 + 20
	v13 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v13
	CVZNX = cond(v13)
	branch Test(LT,CZ) l00001E1C
	// succ:  l00001DF4 l00001E1C
l00001DF4:
	d0 = 10
	CVZN = cond(d0)
	v16 = d0 - d2
	CVZN = cond(v16)
	branch Test(NE,Z) l00001E06
	// succ:  l00001DFA l00001E06
l00001DFA:
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001E1C
	// succ:  l00001E06 l00001E1C
l00001E06:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a3 = a0
	a3 = a3 + 0x00000001
	v19 = a3
	Mem0[a1:word32] = v19
	CVZN = cond(v19)
	v20 = (byte) d2
	Mem0[a0:byte] = v20
	CVZN = cond(v20)
	v21 = Mem0[a0:byte]
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	d1 = 0
	CVZN = cond(d1)
	v23 = (byte) d0
	d1 = DPB(d1, v23, 0)
	CVZN = cond(v23)
	goto l00001E2A
	// succ:  l00001E2A
l00001E1C:
	a7 = a7 - 0x00000004
	v24 = a2
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	a7 = a7 - 0x00000004
	v25 = d2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00001E34 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 0x0008
	// succ:  l00001E2A
l00001E2A:
	d0 = d1
	CVZN = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001DD8_exit
fn00001DD8_exit:


// fn00001E34
// Return size: 4
define fn00001E34
fn00001E34_entry:
	// succ:  l00001E34
l00001E34:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d5 = Mem0[a7 + 40:word32]
	CVZN = cond(d5)
	a2 = Mem0[a7 + 44:word32]
	call fn000023C8 (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00001E50
	// succ:  l00001E4A l00001E50
l00001E4A:
	d0 = -1
	CVZN = cond(d0)
	goto l00001F42
	// succ:  l00001F42
l00001E50:
	d0 = 73
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	d6 = 64
	CVZN = cond(d6)
	v18 = d6 - d0
	CVZN = cond(v18)
	branch Test(EQ,Z) l00001E62
	// succ:  l00001E5C l00001E62
l00001E5C:
	d0 = -1
	CVZN = cond(d0)
	goto l00001F42
	// succ:  l00001F42
l00001E62:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001E80
	// succ:  l00001E68 l00001E80
l00001E68:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001E78
	// succ:  l00001E70 l00001E78
l00001E70:
	d0 = 1
	CVZN = cond(d0)
	v19 = d0
	Mem0[a2 + 28:word32] = v19
	CVZN = cond(v19)
	goto l00001E80
	// succ:  l00001E80
l00001E78:
	v36 = 0x00000400
	Mem0[a2 + 28:word32] = v36
	CVZN = cond(v36)
	// succ:  l00001E80
l00001E80:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001EC0
	// succ:  l00001E86 l00001EC0
l00001E86:
	a1 = a2 + 28
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001E9A
	// succ:  l00001E96 l00001E9A
l00001E96:
	d4 = 2
	CVZN = cond(d4)
	goto l00001E9C
	// succ:  l00001E9C
l00001E9A:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00001E9C
l00001E9C:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + Mem0[a1:word32]
	CVZNX = cond(d0)
	a7 = a7 - 0x00000004
	v27 = d0
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	call fn00001FF4 (retsize: 4;)
	a3 = d0
	a7 = a7 + 0x0004
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00001EB6
	// succ:  l00001EB0 l00001EB6
l00001EB0:
	d0 = -1
	CVZN = cond(d0)
	goto l00001F42
	// succ:  l00001F42
l00001EB6:
	a1 = a3 + 1
	v31 = a1
	Mem0[a2 + 8:word32] = v31
	CVZN = cond(v31)
	goto l00001F1E
	// succ:  l00001F1E
l00001EC0:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001F1A
	// succ:  l00001EC4 l00001F1A
l00001EC4:
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001EF0
	// succ:  l00001ED0 l00001EF0
l00001ED0:
	d0 = 10
	CVZN = cond(d0)
	v21 = d0 - d5
	CVZN = cond(v21)
	branch Test(NE,Z) l00001EF0
	// succ:  l00001ED6 l00001EF0
l00001ED6:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a4 = a0
	a4 = a4 + 0x00000001
	v23 = a4
	Mem0[a1:word32] = v23
	CVZN = cond(v23)
	v24 = (byte) d5
	Mem0[a0:byte] = v24
	CVZN = cond(v24)
	a7 = a7 - 0x00000004
	v25 = a2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00001F48 (retsize: 4;)
	a7 = a7 + 0x0004
	goto l00001F42
	// succ:  l00001F42
l00001EF0:
	a0 = a2 + 8
	d4 = Mem0[a2 + 4:word32]
	CVZN = cond(d4)
	d4 = d4 - Mem0[a0:word32]
	CVZNX = cond(d4)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00002B90:word32]
	d3 = d4
	CVZN = cond(d3)
	execPrivate3()
	v29 = d4 - d0
	CVZN = cond(v29)
	branch Test(EQ,Z) l00001F1E
	// succ:  l00001F0E l00001F1E
l00001F0E:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v30 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l00001F42
	// succ:  l00001F42
l00001F1A:
	d0 = 0
	CVZN = cond(d0)
	goto l00001F42
	// succ:  l00001F42
l00001F1E:
	a0 = a2 + 24
	d0 = 2
	CVZN = cond(d0)
	v32 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	a1 = a2 + 8
	a0 = Mem0[a1:word32]
	v33 = (byte) d5
	Mem0[a0:byte] = v33
	CVZN = cond(v33)
	a1 = Mem0[a1:word32]
	a1 = a1 + 0x00000001
	v34 = a1
	Mem0[a2 + 4:word32] = v34
	CVZN = cond(v34)
	d0 = Mem0[a2 + 28:word32]
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	v35 = d0
	Mem0[a2 + 20:word32] = v35
	CVZN = cond(v35)
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00001F42
l00001F42:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001E34_exit
fn00001E34_exit:


// fn00001F48
// Return size: 4
define fn00001F48
fn00001F48_entry:
	// succ:  l00001F48
l00001F48:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a2 = Mem0[a7 + 24:word32]
	call fn000023C8 (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00001F5E
	// succ:  l00001F5A l00001F5E
l00001F5A:
	d0 = -1
	CVZN = cond(d0)
	goto l00001FD6
	// succ:  l00001FD6
l00001F5E:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001F7C
	// succ:  l00001F64 l00001F7C
l00001F64:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001F74
	// succ:  l00001F6C l00001F74
l00001F6C:
	d0 = 1
	CVZN = cond(d0)
	v14 = d0
	Mem0[a2 + 28:word32] = v14
	CVZN = cond(v14)
	goto l00001F7C
	// succ:  l00001F7C
l00001F74:
	v15 = 0x00000400
	Mem0[a2 + 28:word32] = v15
	CVZN = cond(v15)
	// succ:  l00001F7C
l00001F7C:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001F86
	// succ:  l00001F82 l00001F86
l00001F82:
	d0 = 0
	CVZN = cond(d0)
	goto l00001FD6
	// succ:  l00001FD6
l00001F86:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001FCC
	// succ:  l00001F8E l00001FCC
l00001F8E:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001FBC
	// succ:  l00001F92 l00001FBC
l00001F92:
	a0 = a2 + 8
	d4 = Mem0[a2 + 4:word32]
	CVZN = cond(d4)
	d4 = d4 - Mem0[a0:word32]
	CVZNX = cond(d4)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00002B90:word32]
	d3 = d4
	CVZN = cond(d3)
	execPrivate3()
	v19 = d4 - d0
	CVZN = cond(v19)
	branch Test(EQ,Z) l00001FC0
	// succ:  l00001FB0 l00001FC0
l00001FB0:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v20 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l00001FD6
	// succ:  l00001FD6
l00001FBC:
	d0 = 0
	CVZN = cond(d0)
	goto l00001FD6
	// succ:  l00001FD6
l00001FC0:
	v22 = Mem0[a2 + 8:word32]
	Mem0[a2 + 4:word32] = v22
	CVZN = cond(v22)
	v23 = Mem0[a2 + 28:word32]
	Mem0[a2 + 20:word32] = v23
	CVZN = cond(v23)
	// succ:  l00001FCC
l00001FCC:
	a0 = a2 + 24
	d0 = -4
	CVZN = cond(d0)
	v21 = Mem0[a0:word32] & d0
	Mem0[a0:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00001FD6
l00001FD6:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001F48_exit
fn00001F48_exit:


// fn00001FF4
// Return size: 4
define fn00001FF4
fn00001FF4_entry:
	// succ:  l00001FF4
l00001FF4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 8:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l00002002
	// succ:  l00001FFE l00002002
l00001FFE:
	d0 = 0
	CVZN = cond(d0)
	goto l00002058
	// succ:  l00002058
l00002002:
	ZN = cond(Mem0[0x00002BC0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002026
	// succ:  l0000200A l00002026
l0000200A:
	a0 = Mem0[0x00002BBC:word32]
	a7 = a7 - 0x00000004
	v11 = a0
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	a7 = a7 - 0x00000004
	v12 = a0
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn000022E8 (retsize: 4;)
	v14 = d0
	Mem0[0x00002BC0:word32] = v14
	CVZN = cond(v14)
	a7 = a7 + 12
	// succ:  l00002026
l00002026:
	ZN = cond(Mem0[0x00002BC0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002032
	// succ:  l0000202E l00002032
l0000202E:
	d0 = 0
	CVZN = cond(d0)
	goto l00002058
	// succ:  l00002058
l00002032:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 + d2
	CVZNX = cond(d0)
	a7 = a7 - 0x00000004
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	v17 = Mem0[0x00002BC0:word32]
	a7 = a7 - 0x00000004
	v18 = v17
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn000021C4 (retsize: 4;)
	a1 = d0
	a7 = a7 + 0x0008
	d0 = a1
	CVZN = cond(d0)
	branch Test(NE,Z) l00002050
	// succ:  l0000204C l00002050
l0000204C:
	d0 = 0
	CVZN = cond(d0)
	goto l00002058
	// succ:  l00002058
l00002050:
	v20 = d2
	Mem0[a1:word32] = v20
	CVZN = cond(v20)
	a0 = a1 + 4
	d0 = a0
	CVZN = cond(d0)
	// succ:  l00002058
l00002058:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001FF4_exit
fn00001FF4_exit:


// fn000021C4
// Return size: 4
define fn000021C4
fn000021C4_entry:
	// succ:  l000021C4
l000021C4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 40:word32]
	CVZN = cond(d2)
	a4 = Mem0[a7 + 36:word32]
	a0 = Mem0[0x00002B8C:word32]
	v13 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v13)
	branch Test(ULT,C) l000021F0
	// succ:  l000021DE l000021F0
l000021DE:
	a6 = Mem0[0x00002B8C:word32]
	a0 = a4
	d0 = d2
	CVZN = cond(d0)
	d0 = AllocPooled(d0, a0)
	goto l000022E2
	// succ:  l000022E2
l000021F0:
	a3 = a3 - a3
	CVZNX = cond(a3)
	d4 = a4
	CVZN = cond(d4)
	branch Test(EQ,Z) l000022E0
	// succ:  l000021F8 l000022E0
l000021F8:
	ZN = cond(d2 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000022E0
	// succ:  l000021FE l000022E0
l000021FE:
	v20 = d2 - Mem0[a4 + 20:word32]
	CVZN = cond(v20)
	branch Test(UGE,C) l000022B2
	// succ:  l00002206 l000022B2
l00002206:
	a5 = Mem0[a4:word32]
	// succ:  l00002208
l00002208:
	ZN = cond(Mem0[a5:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000222A
	// succ:  l0000220C l0000222A
l0000220C:
	ZN = cond(Mem0[a5 + 8:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00002226
	// succ:  l00002212 l00002226
l00002212:
	a6 = Mem0[0x00002B8C:word32]
	a0 = a5
	d0 = d2
	CVZN = cond(d0)
	d0 = Allocate(a0, d0)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00002296
	// succ:  l00002226 l00002296
l00002226:
	a5 = Mem0[a5:word32]
	goto l00002208
	// succ:  l00002208
l0000222A:
	d3 = 40
	CVZN = cond(d3)
	d3 = d3 + Mem0[a4 + 16:word32]
	CVZNX = cond(d3)
	d1 = Mem0[a4 + 12:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00002B8C:word32]
	d0 = d3
	CVZN = cond(d0)
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l000022E0
	// succ:  l00002248 l000022E0
l00002248:
	v22 = d3
	Mem0[a3:word32] = v22
	a3 = a3 + 0x00000004
	CVZN = cond(v22)
	v23 = 0x0A
	Mem0[a3 + 8:byte] = v23
	CVZN = cond(v23)
	a2 = a3 + 36
	a0 = a3 + 16
	v24 = a2
	Mem0[a0:word32] = v24
	CVZN = cond(v24)
	v25 = a2
	Mem0[a3 + 20:word32] = v25
	CVZN = cond(v25)
	a1 = Mem0[a0:word32]
	Mem0[a1:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a2 = Mem0[a0:word32]
	a2 = a2 + 0x00000004
	v29 = Mem0[a4 + 16:word32]
	Mem0[a2:word32] = v29
	CVZN = cond(v29)
	a1 = a3 + 28
	v30 = Mem0[a2:word32]
	Mem0[a1:word32] = v30
	CVZN = cond(v30)
	a1 = Mem0[a1:word32]
	a1 = a1 + Mem0[a0:word32]
	v31 = a1
	Mem0[a3 + 24:word32] = v31
	CVZN = cond(v31)
	a6 = Mem0[0x00002B8C:word32]
	a0 = a4
	a1 = a3
	AddHead(a0, a1)
	a6 = Mem0[0x00002B8C:word32]
	a0 = a3
	d0 = d2
	CVZN = cond(d0)
	d0 = Allocate(a0, d0)
	a3 = d0
	// succ:  l00002296
l00002296:
	d0 = 0x00010000
	CVZN = cond(d0)
	d0 = d0 & Mem0[a4 + 12:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000022E0
	// succ:  l000022A2 l000022E0
l000022A2:
	a2 = a3
	d2 = d2 + 0x00000007
	CVZNX = cond(d2)
	d2 = d2 >>u 0x00000003
	CVZNX = cond(d2)
	// succ:  l000022A8
l000022A8:
	Mem0[a2:word32] = 0x00000000
	a2 = a2 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	Mem0[a2:word32] = 0x00000000
	a2 = a2 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(NE,Z) l000022A8
	// succ:  l000022B0 l000022A8
l000022B0:
	goto l000022E0
	// succ:  l000022E0
l000022B2:
	d3 = 16
	CVZN = cond(d3)
	d3 = d3 + d2
	CVZNX = cond(d3)
	d1 = Mem0[a4 + 12:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00002B8C:word32]
	d0 = d3
	CVZN = cond(d0)
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l000022E0
	// succ:  l000022CC l000022E0
l000022CC:
	v32 = d3
	Mem0[a3:word32] = v32
	a3 = a3 + 0x00000004
	CVZN = cond(v32)
	a6 = Mem0[0x00002B8C:word32]
	a0 = a4
	a1 = a3
	AddTail(a0, a1)
	a3 = a3 + 0x00000008
	Mem0[a3:word32] = 0x00000000
	a3 = a3 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000022E0
l000022E0:
	d0 = a3
	CVZN = cond(d0)
	// succ:  l000022E2
l000022E2:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000021C4_exit
fn000021C4_exit:


// fn000022E8
// Return size: 4
define fn000022E8
fn000022E8_entry:
	// succ:  l000022E8
l000022E8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d3 = Mem0[a7 + 24:word32]
	CVZN = cond(d3)
	a2 = Mem0[a7 + 28:word32]
	a0 = Mem0[0x00002B8C:word32]
	v9 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v9)
	branch Test(ULT,C) l00002316
	// succ:  l00002302 l00002316
l00002302:
	a6 = Mem0[0x00002B8C:word32]
	d0 = Mem0[a7 + 20:word32]
	CVZN = cond(d0)
	d1 = d3
	CVZN = cond(d1)
	d2 = a2
	CVZN = cond(d2)
	d0 = CreatePrivatePool(d0, d1, d2)
	goto l00002352
	// succ:  l00002352
l00002316:
	a1 = a1 - a1
	CVZNX = cond(a1)
	v15 = d3 - a2
	CVZN = cond(v15)
	branch Test(ULT,C) l00002350
	// succ:  l0000231C l00002350
l0000231C:
	d3 = d3 + 0x00000007
	CVZNX = cond(d3)
	a6 = Mem0[0x00002B8C:word32]
	d0 = 24
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	a1 = d0
	d0 = a1
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002350
	// succ:  l00002332 l00002350
l00002332:
	a0 = a1 + 4
	v17 = a0
	Mem0[a1:word32] = v17
	CVZN = cond(v17)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v21 = a1
	Mem0[a1 + 8:word32] = v21
	CVZN = cond(v21)
	v22 = Mem0[a7 + 20:word32]
	Mem0[a1 + 12:word32] = v22
	CVZN = cond(v22)
	d0 = -8
	CVZN = cond(d0)
	d0 = d0 & d3
	ZN = cond(d0)
	C = false
	V = false
	v24 = d0
	Mem0[a1 + 16:word32] = v24
	CVZN = cond(v24)
	v25 = a2
	Mem0[a1 + 20:word32] = v25
	CVZN = cond(v25)
	// succ:  l00002350
l00002350:
	d0 = a1
	CVZN = cond(d0)
	// succ:  l00002352
l00002352:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000022E8_exit
fn000022E8_exit:


// fn000023C8
// Return size: 4
define fn000023C8
fn000023C8_entry:
	// succ:  l000023C8
l000023C8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = Mem0[0x00002B8C:word32]
	d0 = 0
	CVZN = cond(d0)
	d1 = 0x00001000
	CVZN = cond(d1)
	SetSignal(d0, d1)
	d0 = d0 & 0x00001000
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000023F2
	// succ:  l000023E6 l000023F2
l000023E6:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000014
	call fn0000131C (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l000023F2
l000023F2:
	v11 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = v11
	return
	// succ:  fn000023C8_exit
fn000023C8_exit:


// fn000023F8
// Return size: 4
define fn000023F8
fn000023F8_entry:
	// succ:  l000023F8
l000023F8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 28:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 24:word32]
	CVZN = cond(d0)
	a0 = d1
	d3 = Mem0[a7 + 36:word32]
	CVZN = cond(d3)
	d2 = Mem0[a7 + 32:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l0000244E
	// succ:  l00002410 l0000244E
l00002410:
	v13 = d0 - d3
	CVZN = cond(v13)
	branch Test(UGE,C) l00002422
	// succ:  l00002414 l00002422
l00002414:
	d2 = d3
	CVZN = cond(d2)
	call fn000024FC (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	goto l000024F4
	// succ:  l000024F4
l00002422:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000242E
	// succ:  l00002426 l0000242E
l00002426:
	d4 = 1
	CVZN = cond(d4)
	v20 = (uint16) (d4 % (uint16) d3)
	v21 = (uint16) (d4 /u (uint16) d3)
	d4 = DPB(d4, v20, 16)
	d4 = DPB(d4, v21, 0)
	VZN = cond(v21)
	C = false
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	d3 = d4
	CVZN = cond(d3)
	// succ:  l0000242E
l0000242E:
	d1 = d0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	d2 = d3
	CVZN = cond(d2)
	call fn000024FC (retsize: 4;)
	a1 = d0
	d0 = d1
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	call fn000024FC (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	d0 = a1
	CVZN = cond(d0)
	goto l000024F6
	// succ:  l000024F6
l0000244E:
	v15 = d0 - d2
	CVZN = cond(v15)
	branch Test(UGE,C) l00002458
	// succ:  l00002452 l00002458
l00002452:
	d0 = 0
	CVZN = cond(d0)
	goto l000024F4
	// succ:  l000024F4
l00002458:
	d6 = d2
	CVZN = cond(d6)
	d4 = 24
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002476
	// succ:  l00002462 l00002476
l00002462:
	d4 = 16
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002476
	// succ:  l0000246A l00002476
l0000246A:
	d4 = 8
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002476
	// succ:  l00002472 l00002476
l00002472:
	d4 = 0
	CVZN = cond(d4)
	v19 = (byte) d2
	d6 = DPB(d6, v19, 0)
	CVZN = cond(v19)
	// succ:  l00002476
l00002476:
	a1 = 0x00002BC4
	v24 = (word16) d6 & 0x00FF
	d6 = DPB(d6, v24, 0)
	ZN = cond(v24)
	C = false
	V = false
	v25 = (byte) d4 + Mem0[a1 + (int32) ((int16) d6):byte]
	d4 = DPB(d4, v25, 0)
	CVZNX = cond(v25)
	d5 = 32
	CVZN = cond(d5)
	d5 = d5 - d4
	CVZNX = cond(d5)
	branch Test(NE,Z) l00002496
	// succ:  l0000248A l00002496
l0000248A:
	v27 = d2 - d0
	CVZN = cond(v27)
	branch Test(ULT,C) l00002492
	// succ:  l0000248E l00002492
l0000248E:
	v28 = d3 - a0
	CVZN = cond(v28)
	branch Test(UGT,CZ) l00002452
	// succ:  l00002492 l00002452
l00002492:
	d0 = 1
	CVZN = cond(d0)
	goto l000024F4
	// succ:  l000024F4
l00002496:
	d2 = d2 << d5
	CVZNX = cond(d2)
	d6 = d3
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d2 = d2 | d6
	ZN = cond(d2)
	C = false
	V = false
	d3 = d3 << d5
	CVZNX = cond(d3)
	d1 = d0
	CVZN = cond(d1)
	d0 = d0 >>u d4
	CVZNX = cond(d0)
	d1 = d1 << d5
	CVZNX = cond(d1)
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 << d5
	CVZNX = cond(d6)
	a0 = d6
	call fn000024FC (retsize: 4;)
	d2 = d0
	CVZN = cond(d2)
	v30 = d0
	d0 = d1
	d1 = v30
	ZN = cond(d1)
	C = false
	V = false
	d4 = d2
	CVZN = cond(d4)
	d5 = d2
	CVZN = cond(d5)
	d6 = d3
	CVZN = cond(d6)
	d2 = d2 *u (word16) d3
	VZN = cond(d2)
	C = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d3 = d3 *u (word16) d5
	VZN = cond(d3)
	C = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d4 = d4 *u (word16) d6
	VZN = cond(d4)
	C = false
	d5 = d5 *u (word16) d6
	VZN = cond(d5)
	C = false
	d6 = 0
	CVZN = cond(d6)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v31 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v31, 0)
	CVZNX = cond(v31)
	v33 = (word16) d6 + (word16) d5 + X
	d5 = DPB(d5, v33, 0)
	CVZNX = cond(v33)
	v34 = (word16) d2 + (word16) d4
	d2 = DPB(d2, v34, 0)
	CVZNX = cond(v34)
	v35 = (word16) d6 + (word16) d5 + X
	d5 = DPB(d5, v35, 0)
	CVZNX = cond(v35)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 + d4
	CVZNX = cond(d3)
	d3 = d3 + d5
	CVZNX = cond(d3)
	v39 = d0 - d3
	CVZN = cond(v39)
	branch Test(ULT,C) l000024F2
	// succ:  l000024EC l000024F2
l000024EC:
	branch Test(NE,Z) l000024F4
	// succ:  l000024EE l000024F4
l000024EE:
	v40 = a0 - d2
	CVZN = cond(v40)
	branch Test(UGE,C) l000024F4
	// succ:  l000024F2 l000024F4
l000024F2:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	// succ:  l000024F4
l000024F4:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l000024F6
l000024F6:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000023F8_exit
fn000023F8_exit:


// fn000024FC
// Return size: 4
define fn000024FC
fn000024FC_entry:
	// succ:  l000024FC
l000024FC:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	d7 = d2
	CVZN = cond(d7)
	branch Test(EQ,Z) l00002516
	// succ:  l00002504 l00002516
l00002504:
	d6 = d1
	CVZN = cond(d6)
	d5 = d0
	CVZN = cond(d5)
	branch Test(NE,Z) l00002524
	// succ:  l0000250A l00002524
l0000250A:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002642
	// succ:  l00002510 l00002642
l00002510:
	v14 = d2 - d1
	CVZN = cond(v14)
	branch Test(UGT,CZ) l00002642
	// succ:  l00002516 l00002642
l00002516:
	d0 = d1
	CVZN = cond(d0)
	d1 = d2
	CVZN = cond(d1)
	call fn00002AFA (retsize: 4;)
	goto l00002642
	// succ:  l00002642
l00002524:
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	ZN = cond((word16) d2 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l0000254C
	// succ:  l0000252A l0000254C
l0000252A:
	d2 = 0
	CVZN = cond(d2)
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v16 = (word16) d1
	d0 = DPB(d0, v16, 0)
	CVZN = cond(v16)
	v17 = (uint16) (d0 % (uint16) d7)
	v18 = (uint16) (d0 /u (uint16) d7)
	d0 = DPB(d0, v17, 16)
	d0 = DPB(d0, v18, 0)
	VZN = cond(v18)
	C = false
	v20 = (word16) d0
	d2 = DPB(d2, v20, 0)
	CVZN = cond(v20)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v21 = (word16) d1
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	v22 = (uint16) (d0 % (uint16) d7)
	v23 = (uint16) (d0 /u (uint16) d7)
	d0 = DPB(d0, v22, 16)
	d0 = DPB(d0, v23, 0)
	VZN = cond(v23)
	C = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v24 = (word16) d0
	d2 = DPB(d2, v24, 0)
	CVZN = cond(v24)
	d0 = DPB(d0, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = d0
	CVZN = cond(d1)
	d0 = d2
	CVZN = cond(d0)
	goto l00002642
	// succ:  l00002642
l0000254C:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a1
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a0
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a7 = a7 - 0x00000008
	Mem0[a7 + 2:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d1 = 0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l00002568
	// succ:  l0000255E l00002568
l0000255E:
	v32 = (word16) d0 + 0x0001
	d0 = DPB(d0, v32, 0)
	CVZNX = cond(v32)
	d6 = d6 + d6
	CVZNX = cond(d6)
	d5 = d5 + d5 + X
	CVZNX = cond(d5)
	d7 = d7 + d7
	CVZNX = cond(d7)
	branch Test(GT,N) l0000255E
	// succ:  l00002568 l0000255E
l00002568:
	v35 = (word16) d0
	Mem0[a7:word16] = v35
	CVZN = cond(v35)
	// succ:  l0000256A
l0000256A:
	d3 = d7
	CVZN = cond(d3)
	d2 = d5
	CVZN = cond(d2)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v36 = (word16) d2 - (word16) d3
	CVZN = cond(v36)
	branch Test(NE,Z) l0000257C
	// succ:  l00002576 l0000257C
l00002576:
	d1 = DPB(d1, 0xFFFF, 0)
	CVZN = cond(0xFFFF)
	goto l00002586
	// succ:  l00002586
l0000257C:
	d1 = d5
	CVZN = cond(d1)
	v37 = (uint16) (d1 % (uint16) d3)
	v38 = (uint16) (d1 /u (uint16) d3)
	d1 = DPB(d1, v37, 16)
	d1 = DPB(d1, v38, 0)
	VZN = cond(v38)
	C = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	// succ:  l00002586
l00002586:
	a1 = d6
	d6 = DPB(d6, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	// succ:  l0000258C
l0000258C:
	d3 = d7
	CVZN = cond(d3)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 *u (word16) d7
	VZN = cond(d2)
	C = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = d3 *u (word16) d1
	VZN = cond(d3)
	C = false
	d4 = d5
	CVZN = cond(d4)
	d4 = d4 - d3
	CVZNX = cond(d4)
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	v41 = (word16) d4
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d6
	d4 = DPB(d4, v42, 0)
	CVZN = cond(v42)
	ZN = cond((word16) d0 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l000025AC
	// succ:  l000025A4 l000025AC
l000025A4:
	v43 = d2 - d4
	CVZN = cond(v43)
	branch Test(ULE,VZ) l000025AC
	// succ:  l000025A8 l000025AC
l000025A8:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	goto l0000258C
	// succ:  l0000258C
l000025AC:
	a0 = d5
	d6 = d1
	CVZN = cond(d6)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = d7
	CVZN = cond(d5)
	d2 = d6
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	d4 = d5
	CVZN = cond(d4)
	d6 = d6 *u (word16) d5
	VZN = cond(d6)
	C = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d5 = d5 *u (word16) d3
	VZN = cond(d5)
	C = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d2 = d2 *u (word16) d4
	VZN = cond(d2)
	C = false
	d3 = d3 *u (word16) d4
	VZN = cond(d3)
	C = false
	d4 = 0
	CVZN = cond(d4)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	v45 = (word16) d6 + (word16) d5
	d6 = DPB(d6, v45, 0)
	CVZNX = cond(v45)
	v46 = (word16) d4 + (word16) d3 + X
	d3 = DPB(d3, v46, 0)
	CVZNX = cond(v46)
	v47 = (word16) d6 + (word16) d2
	d6 = DPB(d6, v47, 0)
	CVZNX = cond(v47)
	v48 = (word16) d4 + (word16) d3 + X
	d3 = DPB(d3, v48, 0)
	CVZNX = cond(v48)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = DPB(d5, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d5 = d5 + d2
	CVZNX = cond(d5)
	d5 = d5 + d3
	CVZNX = cond(d5)
	d2 = d5
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	d5 = a0
	CVZN = cond(d5)
	d6 = a1
	CVZN = cond(d6)
	d6 = d6 - d3
	CVZNX = cond(d6)
	d5 = d5 - d2 - X
	CVZNX = cond(d5)
	branch Test(UGE,C) l00002604
	// succ:  l000025EE l00002604
l000025EE:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d3 = d7
	CVZN = cond(d3)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d6 = d6 + d3
	CVZNX = cond(d6)
	d5 = d2 + d5 + X
	CVZNX = cond(d5)
	d3 = d7
	CVZN = cond(d3)
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d5 = d5 + d3
	CVZNX = cond(d5)
	// succ:  l00002604
l00002604:
	ZN = cond(Mem0[a7 + 2:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002620
	// succ:  l0000260A l00002620
l0000260A:
	v53 = (word16) d1
	Mem0[a7 + 4:word16] = v53
	CVZN = cond(v53)
	d1 = 0
	CVZN = cond(d1)
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	v54 = (word16) d6
	d5 = DPB(d5, v54, 0)
	CVZN = cond(v54)
	d6 = DPB(d6, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 2:bool] = true
	goto l0000256A
	// succ:  l0000256A
l00002620:
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	v57 = (word16) d1
	d0 = DPB(d0, v57, 0)
	CVZN = cond(v57)
	v58 = (word16) d5
	d6 = DPB(d6, v58, 0)
	CVZN = cond(v58)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	v59 = Mem0[a7:word16]
	d7 = DPB(d7, v59, 0)
	CVZN = cond(v59)
	branch Test(EQ,Z) l0000263A
	// succ:  l00002630 l0000263A
l00002630:
	v60 = (word16) d7 - 0x0001
	d7 = DPB(d7, v60, 0)
	CVZNX = cond(v60)
	// succ:  l00002632
l00002632:
	d5 = d5 >>u 0x00000001
	CVZNX = cond(d5)
	d6 = __rcr(d6, 0x00000001, X)
	CZNX = cond(d6)
	V = false
	d7 = d7 - 0x00000001
	branch d7 != 0xFFFFFFFF l00002632
	// succ:  l0000263A l00002632
l0000263A:
	d1 = d6
	CVZN = cond(d1)
	a7 = a7 + 0x00000008
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a0 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a1 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	// succ:  l00002642
l00002642:
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000024FC_exit
fn000024FC_exit:


// fn00002648
// Return size: 4
define fn00002648
fn00002648_entry:
	// succ:  l00002648
l00002648:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 32:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 28:word32]
	CVZN = cond(d0)
	a0 = d1
	d3 = Mem0[a7 + 40:word32]
	CVZN = cond(d3)
	d2 = Mem0[a7 + 36:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l0000269A
	// succ:  l00002660 l0000269A
l00002660:
	v14 = d0 - d3
	CVZN = cond(v14)
	branch Test(UGE,C) l00002672
	// succ:  l00002664 l00002672
l00002664:
	d2 = d3
	CVZN = cond(d2)
	call fn000024FC (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	goto l00002754
	// succ:  l00002754
l00002672:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000267E
	// succ:  l00002676 l0000267E
l00002676:
	d4 = 1
	CVZN = cond(d4)
	v29 = (uint16) (d4 % (uint16) d3)
	v30 = (uint16) (d4 /u (uint16) d3)
	d4 = DPB(d4, v29, 16)
	d4 = DPB(d4, v30, 0)
	VZN = cond(v30)
	C = false
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	d3 = d4
	CVZN = cond(d3)
	// succ:  l0000267E
l0000267E:
	d1 = d0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	d2 = d3
	CVZN = cond(d2)
	call fn000024FC (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	call fn000024FC (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	goto l00002754
	// succ:  l00002754
l0000269A:
	v16 = d0 - d2
	CVZN = cond(v16)
	branch Test(ULT,C) l00002754
	// succ:  l000026A0 l00002754
l000026A0:
	d6 = d2
	CVZN = cond(d6)
	d4 = 24
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000026BE
	// succ:  l000026AA l000026BE
l000026AA:
	d4 = 16
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000026BE
	// succ:  l000026B2 l000026BE
l000026B2:
	d4 = 8
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000026BE
	// succ:  l000026BA l000026BE
l000026BA:
	d4 = 0
	CVZN = cond(d4)
	v20 = (byte) d2
	d6 = DPB(d6, v20, 0)
	CVZN = cond(v20)
	// succ:  l000026BE
l000026BE:
	a1 = 0x00002BC4
	v22 = (word16) d6 & 0x00FF
	d6 = DPB(d6, v22, 0)
	ZN = cond(v22)
	C = false
	V = false
	v23 = (byte) d4 + Mem0[a1 + (int32) ((int16) d6):byte]
	d4 = DPB(d4, v23, 0)
	CVZNX = cond(v23)
	d5 = 32
	CVZN = cond(d5)
	d5 = d5 - d4
	CVZNX = cond(d5)
	branch Test(NE,Z) l000026E0
	// succ:  l000026D2 l000026E0
l000026D2:
	v25 = d2 - d0
	CVZN = cond(v25)
	branch Test(ULT,C) l000026DA
	// succ:  l000026D6 l000026DA
l000026D6:
	v26 = d3 - d1
	CVZN = cond(v26)
	branch Test(UGT,CZ) l00002754
	// succ:  l000026DA l00002754
l000026DA:
	d1 = d1 - d3
	CVZNX = cond(d1)
	d0 = d0 - d2 - X
	CVZNX = cond(d0)
	goto l00002754
	// succ:  l00002754
l000026E0:
	d2 = d2 << d5
	CVZNX = cond(d2)
	d6 = d3
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d2 = d2 | d6
	ZN = cond(d2)
	C = false
	V = false
	d3 = d3 << d5
	CVZNX = cond(d3)
	d1 = d0
	CVZN = cond(d1)
	d0 = d0 >>u d4
	CVZNX = cond(d0)
	d1 = d1 << d5
	CVZNX = cond(d1)
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 << d5
	CVZNX = cond(d6)
	a0 = d6
	call fn000024FC (retsize: 4;)
	v32 = d2
	d2 = d0
	d0 = v32
	ZN = cond(d0)
	C = false
	V = false
	a1 = d3
	d4 = d2
	CVZN = cond(d4)
	d7 = d2
	CVZN = cond(d7)
	d6 = d3
	CVZN = cond(d6)
	d2 = d2 *u (word16) d3
	VZN = cond(d2)
	C = false
	d7 = __swap(d7)
	ZN = cond(d7)
	C = false
	V = false
	d3 = d3 *u (word16) d7
	VZN = cond(d3)
	C = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d4 = d4 *u (word16) d6
	VZN = cond(d4)
	C = false
	d7 = d7 *u (word16) d6
	VZN = cond(d7)
	C = false
	d6 = 0
	CVZN = cond(d6)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v33 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v33, 0)
	CVZNX = cond(v33)
	v34 = (word16) d6 + (word16) d7 + X
	d7 = DPB(d7, v34, 0)
	CVZNX = cond(v34)
	v35 = (word16) d2 + (word16) d4
	d2 = DPB(d2, v35, 0)
	CVZNX = cond(v35)
	v36 = (word16) d6 + (word16) d7 + X
	d7 = DPB(d7, v36, 0)
	CVZNX = cond(v36)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 + d4
	CVZNX = cond(d3)
	d3 = d3 + d7
	CVZNX = cond(d3)
	v40 = d1 - d2
	CVZN = cond(v40)
	branch Test(ULT,C) l0000273C
	// succ:  l00002736 l0000273C
l00002736:
	branch Test(NE,Z) l00002740
	// succ:  l00002738 l00002740
l00002738:
	v41 = a0 - d3
	CVZN = cond(v41)
	branch Test(UGE,C) l00002740
	// succ:  l0000273C l00002740
l0000273C:
	d3 = d3 - a1
	CVZNX = cond(d3)
	d2 = d2 - d0 - X
	CVZNX = cond(d2)
	// succ:  l00002740
l00002740:
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 - d3
	CVZNX = cond(d6)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d4 = 32
	CVZN = cond(d4)
	d4 = d4 - d5
	CVZNX = cond(d4)
	d1 = d1 << d4
	CVZNX = cond(d1)
	d6 = d6 >>u d5
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d0 = d0 >>u d5
	CVZNX = cond(d0)
	// succ:  l00002754
l00002754:
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d4 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002648_exit
fn00002648_exit:


// fn00002A88
// Return size: 4
define fn00002A88
fn00002A88_entry:
	// succ:  l00002A88
l00002A88:
	a7 = fp
	v3 = a7 + 4
	d0 = Mem0[v3:word32]
	v3 = v3 + 0x00000004
	d1 = Mem0[v3:word32]
	v3 = v3 + 0x00000004
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l00002A9C
	// succ:  l00002A92 l00002A9C
l00002A92:
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l00002AA8
	// succ:  l00002A96 l00002AA8
l00002A96:
	call fn00002AFA (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn00002A88_exit
l00002A9C:
	d1 = -d1
	CVZNX = cond(d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l00002AB2
	// succ:  l00002AA2 l00002AB2
l00002AA2:
	call fn00002AFA (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn00002A88_exit
l00002AA8:
	d0 = -d0
	CVZNX = cond(d0)
	call fn00002AFA (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn00002A88_exit
l00002AB2:
	d0 = -d0
	CVZNX = cond(d0)
	call fn00002AFA (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	return
	// succ:  fn00002A88_exit
fn00002A88_exit:


// fn00002AC8
// Return size: 4
define fn00002AC8
fn00002AC8_entry:
	// succ:  l00002AC8
l00002AC8:
	a7 = fp
	v3 = a7 + 4
	d0 = Mem0[v3:word32]
	v3 = v3 + 0x00000004
	d1 = Mem0[v3:word32]
	v3 = v3 + 0x00000004
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00002AE8
	// succ:  l00002AD2 l00002AE8
l00002AD2:
	d0 = -d0
	CVZNX = cond(d0)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00002AE0
	// succ:  l00002AD8 l00002AE0
l00002AD8:
	d1 = -d1
	CVZNX = cond(d1)
	call fn00002AFA (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn00002AC8_exit
l00002AE0:
	call fn00002AFA (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn00002AC8_exit
l00002AE8:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00002AEA_thunk_fn00002AFA
	goto l00002AEC
	// succ:  l00002AEC l00002AEA_thunk_fn00002AFA
l00002AEA_thunk_fn00002AFA:
	call fn00002AFA (retsize: 4;)
	return
	// succ:  fn00002AC8_exit
l00002AEC:
	d1 = -d1
	CVZNX = cond(d1)
	call fn00002AFA (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	return
	// succ:  fn00002AC8_exit
fn00002AC8_exit:


// fn00002AFA
// Return size: 4
define fn00002AFA
fn00002AFA_entry:
	// succ:  l00002AFA
l00002AFA:
	a7 = fp
	a7 = a7 - 0x00000004
	v4 = d2
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v10 = (word16) d1
	d2 = DPB(d2, v10, 0)
	CVZN = cond(v10)
	branch Test(NE,Z) l00002B20
	// succ:  l00002B02 l00002B20
l00002B02:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v13 = (word16) d0
	d2 = DPB(d2, v13, 0)
	CVZN = cond(v13)
	branch Test(EQ,Z) l00002B10
	// succ:  l00002B0C l00002B10
l00002B0C:
	v14 = (uint16) (d2 % (uint16) d1)
	v15 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v14, 16)
	d2 = DPB(d2, v15, 0)
	VZN = cond(v15)
	C = false
	v17 = (word16) d2
	d0 = DPB(d0, v17, 0)
	CVZN = cond(v17)
	// succ:  l00002B10
l00002B10:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v26 = (word16) d0
	d2 = DPB(d2, v26, 0)
	CVZN = cond(v26)
	v27 = (uint16) (d2 % (uint16) d1)
	v28 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v27, 16)
	d2 = DPB(d2, v28, 0)
	VZN = cond(v28)
	C = false
	v29 = (word16) d2
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v30 = (word16) d2
	d1 = DPB(d1, v30, 0)
	CVZN = cond(v30)
	v31 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v31
	CVZN = cond(d2)
	return
	// succ:  fn00002AFA_exit
l00002B20:
	a7 = a7 - 0x00000004
	v19 = d3
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	d3 = 16
	CVZN = cond(d3)
	v20 = (word16) d1 - 0x0080
	CVZN = cond(v20)
	branch Test(UGE,C) l00002B2E
	// succ:  l00002B2A l00002B2E
l00002B2A:
	d1 = __rol(d1, 0x00000008)
	CZN = cond(d1)
	V = false
	v22 = (word16) d3 - 0x0008
	d3 = DPB(d3, v22, 0)
	CVZNX = cond(v22)
	// succ:  l00002B2E
l00002B2E:
	v24 = (word16) d1 - 0x0800
	CVZN = cond(v24)
	branch Test(UGE,C) l00002B38
	// succ:  l00002B34 l00002B38
l00002B34:
	d1 = __rol(d1, 0x00000004)
	CZN = cond(d1)
	V = false
	v25 = (word16) d3 - 0x0004
	d3 = DPB(d3, v25, 0)
	CVZNX = cond(v25)
	// succ:  l00002B38
l00002B38:
	v32 = (word16) d1 - 0x2000
	CVZN = cond(v32)
	branch Test(UGE,C) l00002B42
	// succ:  l00002B3E l00002B42
l00002B3E:
	d1 = __rol(d1, 0x00000002)
	CZN = cond(d1)
	V = false
	v33 = (word16) d3 - 0x0002
	d3 = DPB(d3, v33, 0)
	CVZNX = cond(v33)
	// succ:  l00002B42
l00002B42:
	ZN = cond((word16) d1 - 0x0000)
	C = false
	V = false
	branch Test(LT,N) l00002B4A
	// succ:  l00002B46 l00002B4A
l00002B46:
	d1 = __rol(d1, 0x00000001)
	CZN = cond(d1)
	V = false
	v35 = (word16) d3 - 0x0001
	d3 = DPB(d3, v35, 0)
	CVZNX = cond(v35)
	// succ:  l00002B4A
l00002B4A:
	v36 = (word16) d0
	d2 = DPB(d2, v36, 0)
	CVZN = cond(v36)
	d0 = d0 >>u d3
	CVZNX = cond(d0)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 >>u d3
	CVZNX = cond(d2)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v38 = (uint16) (d0 % (uint16) d1)
	v39 = (uint16) (d0 /u (uint16) d1)
	d0 = DPB(d0, v38, 16)
	d0 = DPB(d0, v39, 0)
	VZN = cond(v39)
	C = false
	v40 = (word16) d0
	d3 = DPB(d3, v40, 0)
	CVZN = cond(v40)
	v41 = (word16) d2
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d3
	d2 = DPB(d2, v42, 0)
	CVZN = cond(v42)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d0 = d0 - d2
	CVZNX = cond(d0)
	branch Test(UGE,C) l00002B6C
	// succ:  l00002B66 l00002B6C
l00002B66:
	v43 = (word16) d3 - 0x0001
	d3 = DPB(d3, v43, 0)
	CVZNX = cond(v43)
	d0 = d0 + d1
	CVZNX = cond(d0)
	// succ:  l00002B6A
l00002B6A:
	branch Test(UGE,C) l00002B6A
	// succ:  l00002B6C l00002B6A
l00002B6C:
	d1 = 0
	CVZN = cond(d1)
	v44 = (word16) d3
	d1 = DPB(d1, v44, 0)
	CVZN = cond(v44)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d0 = __rol(d0, d3)
	CZN = cond(d0)
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v45 = d0
	d0 = d1
	d1 = v45
	ZN = cond(d1)
	C = false
	V = false
	v46 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d3 = v46
	CVZN = cond(d3)
	v47 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	d2 = v47
	CVZN = cond(d2)
	return
	// succ:  fn00002AFA_exit
fn00002AFA_exit:


