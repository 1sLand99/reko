// fn00001000
// Return size: 4
define fn00001000
fn00001000_entry:
	// succ:  l00001000
l00001000:
	a7 = fp
	// succ:  l0000100A
l0000100A:
	d2 = d0
	CVZN = cond(d2)
	a2 = a0
	a4 = 0x0000BD86
	a6 = Mem0[0x00000004:word32]
	v10 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v10)
	branch Test(UGE,C) l00001036
	// succ:  l00001020 l00001036
l00001020:
	a0 = 0x00003D90
	d0 = 0x00000030
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	// succ:  l00001030
l00001030:
	Mem0[a0:word32] = 0x00000000
	a0 = a0 + 4
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00001030
	// succ:  l00001036 l00001030
l00001036:
	v16 = a7
	Mem0[a4 + -32758:word32] = v16
	CVZN = cond(v16)
	v17 = a6
	Mem0[a4 + -32754:word32] = v17
	CVZN = cond(v17)
	a1 = a1 - a1
	CVZNX = cond(a1)
	d0 = FindTask(a1)
	a3 = d0
	d0 = 0
	CVZN = cond(d0)
	a1 = 0x000012BC
	d0 = OpenLibrary(a1, d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001226
	// succ:  l00001056 l00001226
l00001056:
	v21 = d0
	Mem0[a4 + -32750:word32] = v21
	CVZN = cond(v21)
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(NE,Z) l00001066
	// succ:  l00001060 l00001066
l00001060:
	d4 = 2
	CVZN = cond(d4)
	d2 = 8
	CVZN = cond(d2)
	goto l00001076
	// succ:  l00001076
l00001066:
	a0 = a2
	d4 = 3
	CVZN = cond(d4)
	// succ:  l0000106A
l0000106A:
	v48 = Mem0[a0:byte] - 0x20
	CVZN = cond(v48)
	branch Test(NE,Z) l00001072
	// succ:  l00001070 l00001072
l00001070:
	v49 = (word16) d4 + 0x0001
	d4 = DPB(d4, v49, 0)
	CVZNX = cond(v49)
	// succ:  l00001072
l00001072:
	v55 = Mem0[a0:byte]
	a0 = a0 + 1
	ZN = cond(v55 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000106A
	// succ:  l00001076 l0000106A
l00001076:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d0 = d0 + 0x00000011
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000123E
	// succ:  l00001096 l0000123E
l00001096:
	a7 = a7 - 4
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	a5 = d0
	v29 = d3
	Mem0[a5:word32] = v29
	CVZN = cond(v29)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	v30 = d4
	Mem0[a5 + 12:word32] = v30
	CVZN = cond(v30)
	a0 = a5 + 16
	a0 = a0 + d5
	v31 = a0
	Mem0[a5 + 8:word32] = v31
	CVZN = cond(v31)
	a7 = a7 - 4
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	// succ:  l000010B6 l00001190
l000010B6:
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 16:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a1 = Mem0[a5 + 8:word32]
	a6 = a5 + 16
	a0 = d0
	d0 = 0
	CVZN = cond(d0)
	v32 = Mem0[a0:byte]
	a0 = a0 + 1
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	Mem0[a0 + d0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v33 = a0
	Mem0[a6:word32] = v33
	a6 = a6 + 4
	CVZN = cond(v33)
	d3 = 1
	CVZN = cond(d3)
	a0 = a2 + d2
	// succ:  l000010DA
l000010DA:
	a0 = a0 - 1
	v34 = Mem0[a0:byte] - 0x20
	CVZN = cond(v34)
	branch Test(UGT,CZ) l000010E2
	// succ:  l000010DE_1 l000010E2
l000010DE_1:
	d2 = d2 - 0x00000001
	branch d2 != 0xFFFFFFFF l000010DA
	// succ:  l000010E2 l000010DA
l000010E2:
	Mem0[a0 + 1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000010E6
l000010E6:
	v37 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	branch Test(EQ,Z) l00001148
	// succ:  l000010EA l00001148
l000010EA:
	v38 = (byte) d1 - 0x20
	CVZN = cond(v38)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F0 l000010E6
l000010F0:
	v39 = (byte) d1 - 0x09
	CVZN = cond(v39)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F6 l000010E6
l000010F6:
	v40 = d3 - Mem0[a5 + 12:word32]
	CVZN = cond(v40)
	branch Test(EQ,Z) l00001148
	// succ:  l000010FC l00001148
l000010FC:
	v41 = a1
	Mem0[a6:word32] = v41
	a6 = a6 + 4
	CVZN = cond(v41)
	v42 = (word16) d3 + 0x0001
	d3 = DPB(d3, v42, 0)
	CVZNX = cond(v42)
	v43 = (byte) d1 - 0x22
	CVZN = cond(v43)
	branch Test(EQ,Z) l0000111A
	// succ:  l00001106 l0000111A
l00001106:
	v44 = (byte) d1
	Mem0[a1:byte] = v44
	a1 = a1 + 1
	CVZN = cond(v44)
	// succ:  l00001108
l00001108:
	v45 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v45, 0)
	CVZN = cond(v45)
	branch Test(EQ,Z) l00001148
	// succ:  l0000110C l00001148
l0000110C:
	v46 = (byte) d1 - 0x20
	CVZN = cond(v46)
	branch Test(EQ,Z) l00001116
	// succ:  l00001112 l00001116
l00001112:
	v47 = (byte) d1
	Mem0[a1:byte] = v47
	a1 = a1 + 1
	CVZN = cond(v47)
	goto l00001108
	// succ:  l00001108
l00001116:
	Mem0[a1:byte] = 0x00
	a1 = a1 + 1
	Z = true
	C = false
	N = false
	V = false
	goto l000010E6
	// succ:  l000010E6
l0000111A:
	v64 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v64, 0)
	CVZN = cond(v64)
	branch Test(EQ,Z) l00001148
	// succ:  l0000111E l00001148
l0000111E:
	v65 = (byte) d1 - 0x22
	CVZN = cond(v65)
	branch Test(EQ,Z) l00001116
	// succ:  l00001124 l00001116
l00001124:
	v66 = (byte) d1 - 0x2A
	CVZN = cond(v66)
	branch Test(NE,Z) l00001144
	// succ:  l0000112A l00001144
l0000112A:
	v67 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v67, 0)
	CVZN = cond(v67)
	v68 = (byte) d1
	d2 = DPB(d2, v68, 0)
	CVZN = cond(v68)
	v69 = (byte) d2 & 0xDF
	d2 = DPB(d2, v69, 0)
	ZN = cond(v69)
	C = false
	V = false
	v70 = (byte) d2 - 0x4E
	CVZN = cond(v70)
	branch Test(NE,Z) l0000113C
	// succ:  l00001138 l0000113C
l00001138:
	d1 = 10
	CVZN = cond(d1)
	goto l00001144
	// succ:  l00001144
l0000113C:
	v73 = (byte) d2 - 0x45
	CVZN = cond(v73)
	branch Test(NE,Z) l00001144
	// succ:  l00001142 l00001144
l00001142:
	d1 = 27
	CVZN = cond(d1)
	// succ:  l00001144
l00001144:
	v74 = (byte) d1
	Mem0[a1:byte] = v74
	a1 = a1 + 1
	CVZN = cond(v74)
	goto l0000111A
	// succ:  l0000111A
l00001148:
	Mem0[a1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	Mem0[a6:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + 16
	a7 = a7 - 4
	v77 = d3
	Mem0[a7:word32] = v77
	CVZN = cond(v77)
	a6 = Mem0[a4 + -32750:word32]
	execPrivate4()
	v78 = d0
	Mem0[a4 + -32738:word32] = v78
	CVZN = cond(v78)
	execPrivate5()
	v79 = d0
	Mem0[a4 + -32734:word32] = v79
	CVZN = cond(v79)
	a6 = Mem0[a4 + -32754:word32]
	v80 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v80)
	branch Test(ULT,C) l0000117A
	// succ:  l00001172 l0000117A
l00001172:
	v81 = Mem0[a3 + 224:word32]
	Mem0[a4 + -32730:word32] = v81
	CVZN = cond(v81)
	branch Test(NE,Z) l0000117E
	// succ:  l0000117A l0000117E
l0000117A:
	v82 = d0
	Mem0[a4 + -32730:word32] = v82
	CVZN = cond(v82)
	// succ:  l0000117E
l0000117E:
	v83 = Mem0[a3 + 8:byte] - 0x0D
	CVZN = cond(v83)
	branch Test(NE,Z) l000011F8
	// succ:  l00001186 l000011F8
l00001186:
	a0 = Mem0[a3 + 176:word32]
	v84 = Mem0[a0:word32]
	a0 = a0 + 4
	d0 = v84
	CVZN = cond(d0)
	a0 = a0 - d0
	CVZNX = cond(a0)
	goto l00001202
	// succ:  l00001202
l00001190:
	call fn00001214 (retsize: 4;)
	v50 = d0
	Mem0[a7:word32] = v50
	CVZN = cond(v50)
	v51 = d0
	Mem0[a4 + -32746:word32] = v51
	CVZN = cond(v51)
	v52 = d0
	Mem0[a4 + -32742:word32] = v52
	CVZN = cond(v52)
	a7 = a7 - 4
	v53 = d0
	Mem0[a7:word32] = v53
	CVZN = cond(v53)
	a7 = a7 - 4
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a6 = Mem0[a4 + -32750:word32]
	a2 = d0
	d0 = Mem0[a2 + 36:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011B6
	// succ:  l000011AE l000011B6
l000011AE:
	a0 = d0
	d1 = Mem0[a0:word32]
	CVZN = cond(d1)
	Enable()
	// succ:  l000011B6
l000011B6:
	a0 = 0x000012C8
	d1 = a0
	CVZN = cond(d1)
	d2 = 0x000003ED
	CVZN = cond(d2)
	Supervisor(a5)
	v54 = d0
	Mem0[a5 + 4:word32] = v54
	CVZN = cond(v54)
	branch Test(NE,Z) l000011D2
	// succ:  l000011CC l000011D2
l000011CC:
	d2 = 20
	CVZN = cond(d2)
	// succ:  l000011CE_thunk_fn0000127C
l000011CE_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l000011D2:
	v58 = d0
	Mem0[a4 + -32738:word32] = v58
	CVZN = cond(v58)
	v59 = d0
	Mem0[a4 + -32734:word32] = v59
	CVZN = cond(v59)
	v60 = d0
	Mem0[a4 + -32730:word32] = v60
	CVZN = cond(v60)
	v61 = d0
	Mem0[a3 + 156:word32] = v61
	CVZN = cond(v61)
	v62 = d0
	Mem0[a3 + 160:word32] = v62
	CVZN = cond(v62)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 8:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011F4
	// succ:  l000011F0 l000011F4
l000011F0:
	v63 = d0
	Mem0[a3 + 164:word32] = v63
	CVZN = cond(v63)
	// succ:  l000011F4
l000011F4:
	a6 = Mem0[a4 + -32754:word32]
	// succ:  l000011F8
l000011F8:
	d0 = Mem0[a3 + 62:word32]
	CVZN = cond(d0)
	a0 = Mem0[a3 + 58:word32]
	d0 = d0 - a0
	CVZNX = cond(d0)
	// succ:  l00001202
l00001202:
	v71 = a0
	Mem0[a4 + -32718:word32] = v71
	CVZN = cond(v71)
	v72 = a7
	Mem0[a4 + -32714:word32] = v72
	CVZN = cond(v72)
	call fn00001354 (retsize: 4;)
	d2 = 0
	CVZN = cond(d2)
	// succ:  l00001212_thunk_fn0000127C
l00001212_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l00001226:
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	d7 = 0x00038007
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	goto l0000125C
	// succ:  l0000125C
l0000123E:
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	d7 = 0x00010000
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	// succ:  l0000125C
l0000125C:
	ZN = cond(Mem0[a3 + 172:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001268
	// succ:  l00001262 l00001268
l00001262:
	call fn00001214 (retsize: 4;)
	a2 = d0
	call fn0000126C (retsize: 4;)
	// succ:  l00001268
l00001268:
	d0 = 20
	CVZN = cond(d0)
	return
	// succ:  fn00001000_exit
fn00001000_exit:


// fn00001214
// Return size: 4
define fn00001214
fn00001214_entry:
	// succ:  l00001214
l00001214:
	a7 = fp
	a0 = a3 + 92
	WaitPort(a0)
	a0 = a3 + 92
	GetMsg(a0)
	return
	// succ:  fn00001214_exit
fn00001214_exit:


// fn0000126C
// Return size: 4
define fn0000126C
fn0000126C_entry:
	// succ:  l0000126C
l0000126C:
	a7 = fp
	Forbid()
	a1 = a2
	ReplyMsg(a1)
	return
	// succ:  fn0000126C_exit
fn0000126C_exit:


// fn00001278
// Return size: 0
define fn00001278
fn00001278_entry:
	// succ:  l00001278
l00001278:
	a7 = fp
	d2 = Mem0[a7 + 4:word32]
	CVZN = cond(d2)
	// succ:  l00001278_thunk_fn0000127C
l00001278_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001278_exit
fn00001278_exit:


// fn0000127C
// Return size: 4
define fn0000127C
fn0000127C_entry:
	// succ:  l0000127C
l0000127C:
	a7 = v3
	a4 = 0x0000BD86
	a6 = Mem0[a4 + -32754:word32]
	a7 = Mem0[a4 + -32758:word32]
	a7 = a7 - 8
	v6 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v6
	v8 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = v8
	d1 = Mem0[a5 + 4:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l0000129E
	// succ:  l00001296 l0000129E
l00001296:
	a6 = Mem0[a4 + -32750:word32]
	execPrivate1()
	// succ:  l0000129E
l0000129E:
	a6 = Mem0[a4 + -32754:word32]
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l000012B0
	// succ:  l000012AE l000012B0
l000012AE:
	call fn0000126C (retsize: 4;)
	// succ:  l000012B0
l000012B0:
	a1 = a5
	d0 = Mem0[a5:word32]
	CVZN = cond(d0)
	FreeMem(a1, d0)
	d0 = d2
	CVZN = cond(d0)
	return
	// succ:  fn0000127C_exit
fn0000127C_exit:


// fn000012D0
// Return size: 4
define fn000012D0
fn000012D0_entry:
	// succ:  l000012D0
l000012D0:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a3 = 0x00003ED8
	d0 = 0x00003ED8
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001308
	// succ:  l000012E2 l00001308
l000012E2:
	d2 = 1
	CVZN = cond(d2)
	ZN = cond(Mem0[a3 + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000012F6
	// succ:  l000012EA l000012F6
l000012EA:
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	ZN = cond(Mem0[a3 + d0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000012EA
	// succ:  l000012F6 l000012EA
l000012F6:
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(EQ,Z) l00001308
	// succ:  l000012FA l00001308
l000012FA:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a2 = Mem0[a3 + d0:word32]
	call a2 (retsize: 4;)
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(NE,Z) l000012FA
	// succ:  l00001308 l000012FA
l00001308:
	v13 = Mem0[a7 + 16:word32]
	a7 = a7 - 4
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn00001278 (retsize: 4;)
	a7 = a7 + 4
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn000012D0_exit
fn000012D0_exit:


// fn0000131C
// Return size: 4
define fn0000131C
fn0000131C_entry:
	// succ:  l0000131C
l0000131C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	ZN = cond(Mem0[0x00003DC0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000134E
	// succ:  l00001328 l0000134E
l00001328:
	a3 = Mem0[0x00003EE8:word32]
	d0 = 1
	CVZN = cond(d0)
	v11 = d0
	Mem0[0x00003DC0:word32] = v11
	CVZN = cond(v11)
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001346
	// succ:  l0000133A l00001346
l0000133A:
	a2 = Mem0[a3 + 4:word32]
	call a2 (retsize: 4;)
	a3 = Mem0[a3:word32]
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l0000133A
	// succ:  l00001346 l0000133A
l00001346:
	v12 = Mem0[a7 + 12:word32]
	a7 = a7 - 4
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn000012D0 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l0000134E
l0000134E:
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn0000131C_exit
fn0000131C_exit:


// fn00001354
// Return size: 4
define fn00001354
fn00001354_entry:
	// succ:  l00001354
l00001354:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a3 = 0x00003ED0
	d0 = 0x00003ECC
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001372
	// succ:  l00001366 l00001372
l00001366:
	ZN = cond(Mem0[a3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001372
	// succ:  l0000136A l00001372
l0000136A:
	v11 = Mem0[a3:word32]
	a3 = a3 + 4
	a2 = v11
	call a2 (retsize: 4;)
	ZN = cond(Mem0[a3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000136A
	// succ:  l00001372 l0000136A
l00001372:
	v12 = Mem0[a7 + 16:word32]
	a7 = a7 - 4
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	v14 = Mem0[a7 + 16:word32]
	a7 = a7 - 4
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn00001390 (retsize: 4;)
	a7 = a7 - 4
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	call fn0000131C (retsize: 4;)
	a7 = a7 + 12
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00001354_exit
fn00001354_exit:


// fn00001390
// Return size: 4
define fn00001390
fn00001390_entry:
	// succ:  l00001390
l00001390:
	a7 = fp
	a7 = a7 - 8
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000013DC
	call fn00002F18 (retsize: 4;)
	a0 = a7 + 8
	a7 = a7 - 4
	v4 = a0
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	a0 = a7 + 8
	a7 = a7 - 4
	v6 = a0
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000013F0
	call fn0000141C (retsize: 4;)
	a7 = a7 + 16
	d0 = Mem0[a7:word32]
	CVZN = cond(d0)
	v8 = d0 - Mem0[a7 + 4:word32]
	CVZN = cond(v8)
	branch Test(EQ,Z) l000013D8
	// succ:  l000013BE l000013D8
l000013BE:
	v10 = Mem0[a7 + 4:word32]
	a7 = a7 - 4
	v11 = v10
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	v12 = Mem0[a7 + 4:word32]
	a7 = a7 - 4
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn00001408 (retsize: 4;)
	a7 = a7 - 4
	v14 = d0
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000013F8
	call fn00002F18 (retsize: 4;)
	a7 = a7 + 16
	// succ:  l000013D8
l000013D8:
	a7 = a7 + 8
	return
	// succ:  fn00001390_exit
fn00001390_exit:


// fn00001408
// Return size: 4
define fn00001408
fn00001408_entry:
	// succ:  l00001408
l00001408:
	a7 = fp
	d1 = Mem0[a7 + 8:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	v6 = d1 - d0
	CVZN = cond(v6)
	branch Test(GE,VN) l00001416
	// succ:  l00001414 l00001416
l00001414:
	goto l00001418
	// succ:  l00001418
l00001416:
	d0 = d1
	CVZN = cond(d0)
	// succ:  l00001418
l00001418:
	return
	// succ:  fn00001408_exit
fn00001408_exit:


// fn0000141C
// Return size: 4
define fn0000141C
fn0000141C_entry:
	// succ:  l0000141C
l0000141C:
	a7 = fp
	a0 = a7 + 8
	a7 = a7 - 4
	v4 = a0
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	v6 = Mem0[a7 + 8:word32]
	a7 = a7 - 4
	v7 = v6
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	v8 = Mem0[0x00003EF4:word32]
	a7 = a7 - 4
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn00001468 (retsize: 4;)
	a7 = a7 + 12
	return
	// succ:  fn0000141C_exit
fn0000141C_exit:


// fn00001438
// Return size: 4
define fn00001438
fn00001438_entry:
	// succ:  l00001438
l00001438:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a2 = Mem0[a7 + 12:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001462
	// succ:  l00001444 l00001462
l00001444:
	d0 = Mem0[a2 + 4:word32]
	CVZN = cond(d0)
	v7 = d0 - Mem0[a2 + 8:word32]
	CVZN = cond(v7)
	branch Test(UGE,C) l00001456
	// succ:  l0000144E l00001456
l0000144E:
	a0 = Mem0[a2 + 4:word32]
	v10 = Mem0[a7 + 11:byte]
	Mem0[a0:byte] = v10
	CVZN = cond(v10)
	// succ:  l00001456
l00001456:
	a0 = a2 + 20
	v12 = Mem0[a0:word32] + 0x00000001
	Mem0[a0:word32] = v12
	CVZNX = cond(v12)
	a0 = a2 + 4
	v14 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v14
	CVZNX = cond(v14)
	// succ:  l00001462
l00001462:
	v11 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v11
	return
	// succ:  fn00001438_exit
fn00001438_exit:


// fn00001468
// Return size: 4
define fn00001468
fn00001468_entry:
	// succ:  l00001468
l00001468:
	a7 = fp
	a7 = a7 + -76
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	a4 = Mem0[a7 + 128:word32]
	a2 = Mem0[a7 + 124:word32]
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d4 = 0
	CVZN = cond(d4)
	d5 = 0
	CVZN = cond(d5)
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000246A
	// succ:  l0000148A l0000246A
l0000148A:
	d3 = 0
	CVZN = cond(d3)
	v21 = Mem0[a4:byte] - 0x25
	CVZN = cond(v21)
	branch Test(NE,Z) l00002368
	// succ:  l00001494 l00002368
l00001494:
	d6 = -1
	CVZN = cond(d6)
	v22 = 0x69
	Mem0[a7 + 72:byte] = v22
	CVZN = cond(v22)
	Mem0[a7 + 73:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	a3 = a4 + 1
	d0 = 0
	CVZN = cond(d0)
	v25 = Mem0[a3:byte]
	d0 = DPB(d0, v25, 0)
	CVZN = cond(v25)
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v27 = Mem0[a0:byte]
	d0 = DPB(d0, v27, 0)
	CVZN = cond(v27)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001518
	// succ:  l000014BC l00001518
l000014BC:
	d6 = 0
	CVZN = cond(d6)
	d0 = 0
	CVZN = cond(d0)
	v28 = Mem0[a3:byte]
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v29 = Mem0[a0:byte]
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001518
	// succ:  l000014D6 l00001518
l000014D6:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 4
	v30 = d2
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	d1 = d0
	CVZN = cond(d1)
	d2 = d6
	CVZN = cond(d2)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d1 = d1 *u (word16) d6
	VZN = cond(d1)
	C = false
	d2 = d2 *u (word16) d0
	VZN = cond(d2)
	C = false
	d0 = d0 *u (word16) d6
	VZN = cond(d0)
	C = false
	v33 = (word16) d1 + (word16) d2
	d1 = DPB(d1, v33, 0)
	CVZNX = cond(v33)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v36 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v36
	CVZN = cond(d2)
	d1 = 0
	CVZN = cond(d1)
	v37 = Mem0[a3:byte]
	a3 = a3 + 1
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d6 = d1
	CVZN = cond(d6)
	d6 = d6 + d0
	CVZNX = cond(d6)
	d0 = 0
	CVZN = cond(d0)
	v38 = Mem0[a3:byte]
	d0 = DPB(d0, v38, 0)
	CVZN = cond(v38)
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v39 = Mem0[a0:byte]
	d0 = DPB(d0, v39, 0)
	CVZN = cond(v39)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l000014D6
	// succ:  l00001518 l000014D6
l00001518:
	v40 = Mem0[a3:byte] - 0x68
	CVZN = cond(v40)
	branch Test(EQ,Z) l00001542
	// succ:  l0000151E l00001542
l0000151E:
	v41 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v41)
	branch Test(EQ,Z) l00001542
	// succ:  l00001524 l00001542
l00001524:
	v42 = Mem0[a3:byte] - 0x4C
	CVZN = cond(v42)
	branch Test(EQ,Z) l00001542
	// succ:  l0000152A l00001542
l0000152A:
	v43 = Mem0[a3:byte] - 0x7A
	CVZN = cond(v43)
	branch Test(EQ,Z) l00001542
	// succ:  l00001530 l00001542
l00001530:
	v44 = Mem0[a3:byte] - 0x6A
	CVZN = cond(v44)
	branch Test(EQ,Z) l00001542
	// succ:  l00001536 l00001542
l00001536:
	v45 = Mem0[a3:byte] - 0x74
	CVZN = cond(v45)
	branch Test(EQ,Z) l00001542
	// succ:  l0000153C l00001542
l0000153C:
	v46 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v46)
	branch Test(NE,Z) l000015AA
	// succ:  l00001542 l000015AA
l00001542:
	v47 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v47, 0)
	CVZN = cond(v47)
	v48 = Mem0[a7 + 72:byte]
	d1 = DPB(d1, v48, 0)
	CVZN = cond(v48)
	// succ:  l0000154A
l0000154A:
	v49 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v49)
	branch Test(NE,Z) l00001554
	// succ:  l00001550 l00001554
l00001550:
	d7 = 1
	CVZN = cond(d7)
	goto l00001576
	// succ:  l00001576
l00001554:
	v51 = (byte) d1 - 0x68
	CVZN = cond(v51)
	branch Test(NE,Z) l00001564
	// succ:  l0000155A l00001564
l0000155A:
	v52 = Mem0[a3:byte] - 0x68
	CVZN = cond(v52)
	branch Test(NE,Z) l00001564
	// succ:  l00001560 l00001564
l00001560:
	d1 = 2
	CVZN = cond(d1)
	goto l00001576
	// succ:  l00001576
l00001564:
	v62 = (byte) d1 - 0x6C
	CVZN = cond(v62)
	branch Test(NE,Z) l00001574
	// succ:  l0000156A l00001574
l0000156A:
	v63 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v63)
	branch Test(NE,Z) l00001574
	// succ:  l00001570 l00001574
l00001570:
	d1 = 1
	CVZN = cond(d1)
	goto l00001576
	// succ:  l00001576
l00001574:
	v68 = Mem0[a3:byte]
	d1 = DPB(d1, v68, 0)
	CVZN = cond(v68)
	// succ:  l00001576
l00001576:
	a3 = a3 + 1
	v53 = Mem0[a3:byte] - 0x68
	CVZN = cond(v53)
	branch Test(EQ,Z) l0000154A
	// succ:  l0000157E l0000154A
l0000157E:
	v54 = Mem0[a3:byte] - 0x6C
	CVZN = cond(v54)
	branch Test(EQ,Z) l0000154A
	// succ:  l00001584 l0000154A
l00001584:
	v55 = Mem0[a3:byte] - 0x4C
	CVZN = cond(v55)
	branch Test(EQ,Z) l0000154A
	// succ:  l0000158A l0000154A
l0000158A:
	v56 = Mem0[a3:byte] - 0x7A
	CVZN = cond(v56)
	branch Test(EQ,Z) l0000154A
	// succ:  l00001590 l0000154A
l00001590:
	v57 = Mem0[a3:byte] - 0x6A
	CVZN = cond(v57)
	branch Test(EQ,Z) l0000154A
	// succ:  l00001596 l0000154A
l00001596:
	v58 = Mem0[a3:byte] - 0x74
	CVZN = cond(v58)
	branch Test(EQ,Z) l0000154A
	// succ:  l0000159C l0000154A
l0000159C:
	v59 = Mem0[a3:byte] - 0x2A
	CVZN = cond(v59)
	branch Test(EQ,Z) l0000154A
	// succ:  l000015A2 l0000154A
l000015A2:
	v60 = (byte) d1
	Mem0[a7 + 72:byte] = v60
	CVZN = cond(v60)
	v61 = (byte) d7
	Mem0[a7 + 73:byte] = v61
	CVZN = cond(v61)
	// succ:  l000015AA
l000015AA:
	v64 = Mem0[a7 + 72:byte] - 0x6A
	CVZN = cond(v64)
	branch Test(NE,Z) l000015B8
	// succ:  l000015B2 l000015B8
l000015B2:
	v65 = 0x01
	Mem0[a7 + 72:byte] = v65
	CVZN = cond(v65)
	// succ:  l000015B8
l000015B8:
	v66 = Mem0[a7 + 72:byte] - 0x74
	CVZN = cond(v66)
	branch Test(NE,Z) l000015C6
	// succ:  l000015C0 l000015C6
l000015C0:
	v67 = 0x69
	Mem0[a7 + 72:byte] = v67
	CVZN = cond(v67)
	// succ:  l000015C6
l000015C6:
	v69 = Mem0[a7 + 72:byte] - 0x7A
	CVZN = cond(v69)
	branch Test(NE,Z) l000015D4
	// succ:  l000015CE l000015D4
l000015CE:
	v70 = 0x6C
	Mem0[a7 + 72:byte] = v70
	CVZN = cond(v70)
	// succ:  l000015D4
l000015D4:
	v71 = Mem0[a3:byte]
	a3 = a3 + 1
	d7 = DPB(d7, v71, 0)
	CVZN = cond(v71)
	branch Test(EQ,Z) l0000164A
	// succ:  l000015D8 l0000164A
l000015D8:
	v72 = (byte) d7 - 0x25
	CVZN = cond(v72)
	branch Test(EQ,Z) l0000164A
	// succ:  l000015DE l0000164A
l000015DE:
	v73 = (byte) d7 - 0x63
	CVZN = cond(v73)
	branch Test(EQ,Z) l0000164A
	// succ:  l000015E4 l0000164A
l000015E4:
	v74 = (byte) d7 - 0x6E
	CVZN = cond(v74)
	branch Test(EQ,Z) l0000164A
	// succ:  l000015EA l0000164A
l000015EA:
	v75 = (byte) d7 - 0x5B
	CVZN = cond(v75)
	branch Test(EQ,Z) l0000164A
	// succ:  l000015F0 l0000164A
l000015F0:
	a0 = a2 + 24
	v76 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v76
	ZN = cond(v76)
	C = false
	V = false
	a0 = a2 + 20
	v77 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v77
	CVZNX = cond(v77)
	branch Test(LT,CZ) l0000161A
	// succ:  l00001602 l0000161A
l00001602:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v80 = a2
	Mem0[a7:word32] = v80
	CVZN = cond(v80)
	a2 = a0
	a2 = a2 + 1
	v81 = a2
	Mem0[a1:word32] = v81
	CVZN = cond(v81)
	v82 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v82
	v83 = Mem0[a0:byte]
	d0 = DPB(d0, v83, 0)
	CVZN = cond(v83)
	d1 = 0
	CVZN = cond(d1)
	v84 = (byte) d0
	d1 = DPB(d1, v84, 0)
	CVZN = cond(v84)
	goto l00001626
	// succ:  l00001626
l0000161A:
	a7 = a7 - 4
	v112 = a2
	Mem0[a7:word32] = v112
	CVZN = cond(v112)
	call fn00002604 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l00001626
l00001626:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v94 = (byte) d1
	d0 = DPB(d0, v94, 0)
	CVZN = cond(v94)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v95 = Mem0[a0:byte]
	d0 = DPB(d0, v95, 0)
	CVZN = cond(v95)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l000015F0
	// succ:  l00001648 l000015F0
l00001648:
	d3 = 1
	CVZN = cond(d3)
	// succ:  l0000164A
l0000164A:
	v120 = (byte) d7
	d1 = DPB(d1, v120, 0)
	CVZN = cond(v120)
	v121 = (byte) d1 - 0x25
	d1 = DPB(d1, v121, 0)
	CVZNX = cond(v121)
	branch Test(EQ,Z) l00001A96
	// succ:  l00001654 l00001A96
l00001654:
	v122 = (byte) d1 - 0x36
	d1 = DPB(d1, v122, 0)
	CVZNX = cond(v122)
	branch Test(EQ,Z) l00001792
	// succ:  l0000165C l00001792
l0000165C:
	v123 = (byte) d1 - 0x08
	d1 = DPB(d1, v123, 0)
	CVZNX = cond(v123)
	branch Test(EQ,Z) l00001672
	// succ:  l00001660 l00001672
l00001660:
	v124 = (byte) d1 - 0x0B
	d1 = DPB(d1, v124, 0)
	CVZNX = cond(v124)
	branch Test(EQ,Z) l00001B04
	// succ:  l00001668 l00001B04
l00001668:
	v125 = (byte) d1 - 0x05
	d1 = DPB(d1, v125, 0)
	CVZNX = cond(v125)
	branch Test(EQ,Z) l000019B0
	// succ:  l0000166E l000019B0
l0000166E:
	goto l00001BA6
	// succ:  l00001BA6
l00001672:
	v211 = d6 - 0xFFFFFFFF
	CVZN = cond(v211)
	branch Test(NE,Z) l0000167C
	// succ:  l0000167A l0000167C
l0000167A:
	d6 = 1
	CVZN = cond(d6)
	// succ:  l0000167C
l0000167C:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001696
	// succ:  l00001682 l00001696
l00001682:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a1 = Mem0[a0 + -4:word32]
	goto l00001698
	// succ:  l00001698
l00001696:
	a1 = a1 - a1
	CVZNX = cond(a1)
	// succ:  l00001698
l00001698:
	a0 = a2 + 24
	v229 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v229
	ZN = cond(v229)
	C = false
	V = false
	a0 = a2 + 20
	v230 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v230
	CVZNX = cond(v230)
	v231 = a1
	Mem0[a7 + 44:word32] = v231
	CVZN = cond(v231)
	ZN = cond(Mem0[a0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LT,CZ) l000016D0
	// succ:  l000016B0 l000016D0
l000016B0:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v232 = a2
	Mem0[a7:word32] = v232
	CVZN = cond(v232)
	a2 = a0
	a2 = a2 + 1
	v233 = a2
	Mem0[a1:word32] = v233
	CVZN = cond(v233)
	v234 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v234
	v235 = Mem0[a0:byte]
	d0 = DPB(d0, v235, 0)
	CVZN = cond(v235)
	a7 = a7 - 4
	v236 = d1
	Mem0[a7:word32] = v236
	CVZN = cond(v236)
	d1 = 0
	CVZN = cond(d1)
	v237 = (byte) d0
	d1 = DPB(d1, v237, 0)
	CVZN = cond(v237)
	v238 = d1
	Mem0[a7 + 56:word32] = v238
	CVZN = cond(v238)
	v239 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v239
	CVZN = cond(d1)
	goto l000016EE
	// succ:  l000016EE
l000016D0:
	a1 = Mem0[a7 + 44:word32]
	a7 = a7 - 4
	v269 = a2
	Mem0[a7:word32] = v269
	CVZN = cond(v269)
	v270 = a1
	Mem0[a7 + 48:word32] = v270
	CVZN = cond(v270)
	call fn00002604 (retsize: 4;)
	v271 = d0
	Mem0[a7 + 56:word32] = v271
	CVZN = cond(v271)
	a1 = Mem0[a7 + 48:word32]
	v272 = a1
	Mem0[a7 + 48:word32] = v272
	CVZN = cond(v272)
	a7 = a7 + 4
	// succ:  l000016EE
l000016EE:
	a1 = Mem0[a7 + 44:word32]
	d5 = Mem0[a7 + 52:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v246 = Mem0[a7 + 52:word32] - 0xFFFFFFFF
	CVZN = cond(v246)
	branch Test(EQ,Z) l00001766
	// succ:  l00001704 l00001766
l00001704:
	v247 = a1
	Mem0[a7 + 44:word32] = v247
	CVZN = cond(v247)
	v248 = d6 - d3
	CVZN = cond(v248)
	branch Test(ULT,C) l00001766
	// succ:  l0000170C l00001766
l0000170C:
	v249 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v249, 0)
	CVZN = cond(v249)
	a4 = Mem0[a7 + 44:word32]
	// succ:  l00001714
l00001714:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000171A
	// succ:  l00001718 l0000171A
l00001718:
	v250 = (byte) d5
	Mem0[a4:byte] = v250
	a4 = a4 + 1
	CVZN = cond(v250)
	// succ:  l0000171A
l0000171A:
	a0 = a2 + 24
	v255 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v255
	ZN = cond(v255)
	C = false
	V = false
	a0 = a2 + 20
	v256 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v256
	CVZNX = cond(v256)
	branch Test(LT,CZ) l00001744
	// succ:  l0000172C l00001744
l0000172C:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v257 = a2
	Mem0[a7:word32] = v257
	CVZN = cond(v257)
	a2 = a0
	a2 = a2 + 1
	v258 = a2
	Mem0[a1:word32] = v258
	CVZN = cond(v258)
	v259 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v259
	v260 = Mem0[a0:byte]
	d0 = DPB(d0, v260, 0)
	CVZN = cond(v260)
	d1 = 0
	CVZN = cond(d1)
	v261 = (byte) d0
	d1 = DPB(d1, v261, 0)
	CVZN = cond(v261)
	goto l00001750
	// succ:  l00001750
l00001744:
	a7 = a7 - 4
	v265 = a2
	Mem0[a7:word32] = v265
	CVZN = cond(v265)
	call fn00002604 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l00001750
l00001750:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v262 = d1 - 0xFFFFFFFF
	CVZN = cond(v262)
	branch Test(EQ,Z) l00001762
	// succ:  l0000175E l00001762
l0000175E:
	v263 = d6 - d3
	CVZN = cond(v263)
	branch Test(UGE,C) l00001714
	// succ:  l00001762 l00001714
l00001762:
	v264 = (byte) d7
	Mem0[a7 + 73:byte] = v264
	CVZN = cond(v264)
	// succ:  l00001766
l00001766:
	v266 = d5 - 0xFFFFFFFF
	CVZN = cond(v266)
	branch Test(EQ,Z) l00001778
	// succ:  l0000176E l00001778
l0000176E:
	a7 = a7 - 4
	v267 = a2
	Mem0[a7:word32] = v267
	CVZN = cond(v267)
	a7 = a7 - 4
	v268 = d5
	Mem0[a7:word32] = v268
	CVZN = cond(v268)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001778
l00001778:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002362
	// succ:  l00001784 l00002362
l00001784:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002362
	// succ:  l0000178A l00002362
l0000178A:
	v277 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v277
	CVZNX = cond(v277)
	goto l00002362
	// succ:  l00002362
l00001792:
	Mem0[a7 + 44:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v444 = Mem0[a3:byte] - 0x5E
	CVZN = cond(v444)
	branch Test(NE,Z) l000017A4
	// succ:  l0000179C l000017A4
l0000179C:
	v445 = 0x01
	Mem0[a7 + 44:byte] = v445
	CVZN = cond(v445)
	a3 = a3 + 1
	// succ:  l000017A4
l000017A4:
	Mem0[a7 + 52:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v455 = Mem0[a7 + 44:byte]
	d7 = DPB(d7, v455, 0)
	CVZN = cond(v455)
	d1 = Mem0[a7 + 52:word32]
	CVZN = cond(d1)
	// succ:  l000017B0
l000017B0:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000017BC
	// succ:  l000017B4 l000017BC
l000017B4:
	d5 = 0x000000FF
	CVZN = cond(d5)
	goto l000017BE
	// succ:  l000017BE
l000017BC:
	d5 = 0
	CVZN = cond(d5)
	// succ:  l000017BE
l000017BE:
	a0 = a7 + 78
	v460 = (byte) d5
	Mem0[a5 + d1:byte] = v460
	CVZN = cond(v460)
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v461 = d1 - 0x00000020
	CVZN = cond(v461)
	branch Test(ULT,C) l000017B0
	// succ:  l000017D0 l000017B0
l000017D0:
	v462 = d2
	Mem0[a7 + 132:word32] = v462
	CVZN = cond(v462)
	v463 = (byte) d7
	Mem0[a7 + 44:byte] = v463
	CVZN = cond(v463)
	v464 = Mem0[a7 + 44:byte]
	d2 = DPB(d2, v464, 0)
	CVZN = cond(v464)
	// succ:  l000017DC
l000017DC:
	ZN = cond(Mem0[a3:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001852
	// succ:  l000017E0 l00001852
l000017E0:
	v465 = Mem0[a3:byte]
	a3 = a3 + 1
	d1 = DPB(d1, v465, 0)
	CVZN = cond(v465)
	v466 = Mem0[a3:byte] - 0x2D
	CVZN = cond(v466)
	branch Test(NE,Z) l000017F4
	// succ:  l000017E8 l000017F4
l000017E8:
	v467 = (byte) d1 - Mem0[a3 + 1:byte]
	CVZN = cond(v467)
	branch Test(UGE,C) l000017F4
	// succ:  l000017EE l000017F4
l000017EE:
	a3 = a3 + 1
	v468 = Mem0[a3:byte]
	a3 = a3 + 1
	d7 = DPB(d7, v468, 0)
	CVZN = cond(v468)
	goto l000017F6
	// succ:  l000017F6
l000017F4:
	v475 = (byte) d1
	d7 = DPB(d7, v475, 0)
	CVZN = cond(v475)
	// succ:  l000017F6
l000017F6:
	d5 = 0
	CVZN = cond(d5)
	v470 = (byte) d1
	d5 = DPB(d5, v470, 0)
	CVZN = cond(v470)
	d0 = 0
	CVZN = cond(d0)
	v471 = (byte) d7
	d0 = DPB(d0, v471, 0)
	CVZN = cond(v471)
	v472 = d0 - d5
	CVZN = cond(v472)
	branch Test(ULT,C) l0000184C
	// succ:  l00001802 l0000184C
l00001802:
	ZN = cond((byte) d2 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001826
	// succ:  l00001806 l00001826
l00001806:
	a0 = a7 + 78
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 >>u 0x00000003
	CVZNX = cond(d0)
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d0 = ~d0
	ZN = cond(d0)
	C = false
	V = false
	d1 = 0
	CVZN = cond(d1)
	v473 = Mem0[a0:byte]
	d1 = DPB(d1, v473, 0)
	CVZN = cond(v473)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	v474 = (byte) d0
	Mem0[a0:byte] = v474
	CVZN = cond(v474)
	goto l00001842
	// succ:  l00001842
l00001826:
	a0 = a7 + 78
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 >>u 0x00000003
	CVZNX = cond(d0)
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v479 = Mem0[a0:byte]
	d1 = DPB(d1, v479, 0)
	CVZN = cond(v479)
	d0 = d0 | d1
	ZN = cond(d0)
	C = false
	V = false
	v480 = (byte) d0
	Mem0[a0:byte] = v480
	CVZN = cond(v480)
	// succ:  l00001842
l00001842:
	d5 = d5 + 0x00000001
	CVZNX = cond(d5)
	d0 = 0
	CVZN = cond(d0)
	v476 = (byte) d7
	d0 = DPB(d0, v476, 0)
	CVZN = cond(v476)
	v477 = d0 - d5
	CVZN = cond(v477)
	branch Test(UGE,C) l00001802
	// succ:  l0000184C l00001802
l0000184C:
	v478 = Mem0[a3:byte] - 0x5D
	CVZN = cond(v478)
	branch Test(NE,Z) l000017DC
	// succ:  l00001852 l000017DC
l00001852:
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	a3 = a3 + 1
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001872
	// succ:  l0000185E l00001872
l0000185E:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a6 = Mem0[a0 + -4:word32]
	goto l00001874
	// succ:  l00001874
l00001872:
	a6 = a6 - a6
	CVZNX = cond(a6)
	// succ:  l00001874
l00001874:
	a0 = a2 + 24
	v481 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v481
	ZN = cond(v481)
	C = false
	V = false
	a0 = a2 + 20
	v482 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v482
	CVZNX = cond(v482)
	branch Test(LT,CZ) l000018A6
	// succ:  l00001886 l000018A6
l00001886:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v483 = a2
	Mem0[a7:word32] = v483
	CVZN = cond(v483)
	a2 = a0
	a2 = a2 + 1
	v484 = a2
	Mem0[a1:word32] = v484
	CVZN = cond(v484)
	v485 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v485
	v486 = Mem0[a0:byte]
	d0 = DPB(d0, v486, 0)
	CVZN = cond(v486)
	a7 = a7 - 4
	v487 = d1
	Mem0[a7:word32] = v487
	CVZN = cond(v487)
	d1 = 0
	CVZN = cond(d1)
	v488 = (byte) d0
	d1 = DPB(d1, v488, 0)
	CVZN = cond(v488)
	v489 = d1
	Mem0[a7 + 48:word32] = v489
	CVZN = cond(v489)
	v490 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v490
	CVZN = cond(d1)
	goto l000018B4
	// succ:  l000018B4
l000018A6:
	a7 = a7 - 4
	v501 = a2
	Mem0[a7:word32] = v501
	CVZN = cond(v501)
	call fn00002604 (retsize: 4;)
	v502 = d0
	Mem0[a7 + 48:word32] = v502
	CVZN = cond(v502)
	a7 = a7 + 4
	// succ:  l000018B4
l000018B4:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v491 = Mem0[a7 + 44:word32] - 0xFFFFFFFF
	CVZN = cond(v491)
	branch Test(EQ,Z) l00001982
	// succ:  l000018C8 l00001982
l000018C8:
	a0 = a7 + 78
	a7 = a7 - 4
	v492 = a0
	Mem0[a7:word32] = v492
	CVZN = cond(v492)
	a7 = a7 - 4
	v493 = a1
	Mem0[a7:word32] = v493
	CVZN = cond(v493)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000008
	a7 = a7 - 4
	v494 = d5
	Mem0[a7:word32] = v494
	CVZN = cond(v494)
	call fn0000254C (retsize: 4;)
	a7 = a7 + 8
	v495 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v495
	v496 = Mem0[a7:word32]
	a7 = a7 + 4
	a0 = v496
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v497 = Mem0[a0:byte]
	d1 = DPB(d1, v497, 0)
	CVZN = cond(v497)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001982
	// succ:  l000018F8 l00001982
l000018F8:
	v498 = d6 - d3
	CVZN = cond(v498)
	branch Test(ULT,C) l00001982
	// succ:  l000018FE l00001982
l000018FE:
	v499 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v499, 0)
	CVZN = cond(v499)
	// succ:  l00001902
l00001902:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001908
	// succ:  l00001906 l00001908
l00001906:
	v500 = (byte) d5
	Mem0[a6:byte] = v500
	a6 = a6 + 1
	CVZN = cond(v500)
	// succ:  l00001908
l00001908:
	a0 = a2 + 24
	v503 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v503
	ZN = cond(v503)
	C = false
	V = false
	a0 = a2 + 20
	v504 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v504
	CVZNX = cond(v504)
	branch Test(LT,CZ) l00001932
	// succ:  l0000191A l00001932
l0000191A:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v505 = a2
	Mem0[a7:word32] = v505
	CVZN = cond(v505)
	a2 = a0
	a2 = a2 + 1
	v506 = a2
	Mem0[a1:word32] = v506
	CVZN = cond(v506)
	v507 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v507
	v508 = Mem0[a0:byte]
	d0 = DPB(d0, v508, 0)
	CVZN = cond(v508)
	d1 = 0
	CVZN = cond(d1)
	v509 = (byte) d0
	d1 = DPB(d1, v509, 0)
	CVZN = cond(v509)
	goto l0000193E
	// succ:  l0000193E
l00001932:
	a7 = a7 - 4
	v522 = a2
	Mem0[a7:word32] = v522
	CVZN = cond(v522)
	call fn00002604 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l0000193E
l0000193E:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v513 = d1 - 0xFFFFFFFF
	CVZN = cond(v513)
	branch Test(EQ,Z) l0000197E
	// succ:  l0000194C l0000197E
l0000194C:
	a0 = a7 + 78
	a7 = a7 - 4
	v514 = a0
	Mem0[a7:word32] = v514
	CVZN = cond(v514)
	a7 = a7 - 4
	v515 = a1
	Mem0[a7:word32] = v515
	CVZN = cond(v515)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000008
	a7 = a7 - 4
	v516 = d5
	Mem0[a7:word32] = v516
	CVZN = cond(v516)
	call fn0000254C (retsize: 4;)
	a7 = a7 + 8
	v517 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v517
	v518 = Mem0[a7:word32]
	a7 = a7 + 4
	a0 = v518
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	d0 = d0 & d5
	ZN = cond(d0)
	C = false
	V = false
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	v519 = Mem0[a0:byte]
	d1 = DPB(d1, v519, 0)
	CVZN = cond(v519)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000197E
	// succ:  l0000197A l0000197E
l0000197A:
	v520 = d6 - d3
	CVZN = cond(v520)
	branch Test(UGE,C) l00001902
	// succ:  l0000197E l00001902
l0000197E:
	v521 = (byte) d7
	Mem0[a7 + 73:byte] = v521
	CVZN = cond(v521)
	// succ:  l00001982
l00001982:
	v510 = d5 - 0xFFFFFFFF
	CVZN = cond(v510)
	branch Test(EQ,Z) l00001994
	// succ:  l0000198A l00001994
l0000198A:
	a7 = a7 - 4
	v511 = a2
	Mem0[a7:word32] = v511
	CVZN = cond(v511)
	a7 = a7 - 4
	v512 = d5
	Mem0[a7:word32] = v512
	CVZN = cond(v512)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001994
l00001994:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002362
	// succ:  l000019A0 l00002362
l000019A0:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002362
	// succ:  l000019A6 l00002362
l000019A6:
	Mem0[a6:byte] = 0x00
	a6 = a6 + 1
	Z = true
	C = false
	N = false
	V = false
	v523 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v523
	CVZNX = cond(v523)
	goto l00002362
	// succ:  l00002362
l000019B0:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000019CA
	// succ:  l000019B6 l000019CA
l000019B6:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a5 = Mem0[a0 + -4:word32]
	goto l000019CC
	// succ:  l000019CC
l000019CA:
	a5 = a5 - a5
	CVZNX = cond(a5)
	// succ:  l000019CC
l000019CC:
	v150 = d5 - 0xFFFFFFFF
	CVZN = cond(v150)
	branch Test(EQ,Z) l00001A68
	// succ:  l000019D6 l00001A68
l000019D6:
	v151 = (byte) d5
	d0 = DPB(d0, v151, 0)
	CVZN = cond(v151)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v152 = Mem0[a0:byte]
	d0 = DPB(d0, v152, 0)
	CVZN = cond(v152)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001A68
	// succ:  l000019F2 l00001A68
l000019F2:
	v153 = d6 - d3
	CVZN = cond(v153)
	branch Test(ULT,C) l00001A68
	// succ:  l000019F6 l00001A68
l000019F6:
	v154 = Mem0[a7 + 73:byte]
	d7 = DPB(d7, v154, 0)
	CVZN = cond(v154)
	// succ:  l000019FA
l000019FA:
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001A00
	// succ:  l000019FE l00001A00
l000019FE:
	v155 = (byte) d5
	Mem0[a5:byte] = v155
	a5 = a5 + 1
	CVZN = cond(v155)
	// succ:  l00001A00
l00001A00:
	a0 = a2 + 24
	v159 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v159
	ZN = cond(v159)
	C = false
	V = false
	a0 = a2 + 20
	v160 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v160
	CVZNX = cond(v160)
	branch Test(LT,CZ) l00001A2A
	// succ:  l00001A12 l00001A2A
l00001A12:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v161 = a2
	Mem0[a7:word32] = v161
	CVZN = cond(v161)
	a2 = a0
	a2 = a2 + 1
	v162 = a2
	Mem0[a1:word32] = v162
	CVZN = cond(v162)
	v163 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v163
	v164 = Mem0[a0:byte]
	d0 = DPB(d0, v164, 0)
	CVZN = cond(v164)
	d1 = 0
	CVZN = cond(d1)
	v165 = (byte) d0
	d1 = DPB(d1, v165, 0)
	CVZN = cond(v165)
	goto l00001A36
	// succ:  l00001A36
l00001A2A:
	a7 = a7 - 4
	v175 = a2
	Mem0[a7:word32] = v175
	CVZN = cond(v175)
	call fn00002604 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l00001A36
l00001A36:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v168 = d1 - 0xFFFFFFFF
	CVZN = cond(v168)
	branch Test(EQ,Z) l00001A64
	// succ:  l00001A44 l00001A64
l00001A44:
	v169 = (byte) d5
	d0 = DPB(d0, v169, 0)
	CVZN = cond(v169)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v170 = Mem0[a0:byte]
	d0 = DPB(d0, v170, 0)
	CVZN = cond(v170)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001A64
	// succ:  l00001A60 l00001A64
l00001A60:
	v171 = d6 - d3
	CVZN = cond(v171)
	branch Test(UGE,C) l000019FA
	// succ:  l00001A64 l000019FA
l00001A64:
	v172 = (byte) d7
	Mem0[a7 + 73:byte] = v172
	CVZN = cond(v172)
	// succ:  l00001A68
l00001A68:
	v177 = d5 - 0xFFFFFFFF
	CVZN = cond(v177)
	branch Test(EQ,Z) l00001A7A
	// succ:  l00001A70 l00001A7A
l00001A70:
	a7 = a7 - 4
	v178 = a2
	Mem0[a7:word32] = v178
	CVZN = cond(v178)
	a7 = a7 - 4
	v179 = d5
	Mem0[a7:word32] = v179
	CVZN = cond(v179)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001A7A
l00001A7A:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002362
	// succ:  l00001A86 l00002362
l00001A86:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002362
	// succ:  l00001A8C l00002362
l00001A8C:
	Mem0[a5:byte] = 0x00
	a5 = a5 + 1
	Z = true
	C = false
	N = false
	V = false
	v195 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v195
	CVZNX = cond(v195)
	goto l00002362
	// succ:  l00002362
l00001A96:
	a0 = a2 + 24
	v126 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v126
	ZN = cond(v126)
	C = false
	V = false
	a0 = a2 + 20
	v127 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v127
	CVZNX = cond(v127)
	branch Test(LT,CZ) l00001AC8
	// succ:  l00001AA8 l00001AC8
l00001AA8:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v128 = a2
	Mem0[a7:word32] = v128
	CVZN = cond(v128)
	a2 = a0
	a2 = a2 + 1
	v129 = a2
	Mem0[a1:word32] = v129
	CVZN = cond(v129)
	v130 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v130
	v131 = Mem0[a0:byte]
	d0 = DPB(d0, v131, 0)
	CVZN = cond(v131)
	a7 = a7 - 4
	v132 = d1
	Mem0[a7:word32] = v132
	CVZN = cond(v132)
	d1 = 0
	CVZN = cond(d1)
	v133 = (byte) d0
	d1 = DPB(d1, v133, 0)
	CVZN = cond(v133)
	v134 = d1
	Mem0[a7 + 48:word32] = v134
	CVZN = cond(v134)
	v135 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v135
	CVZN = cond(d1)
	goto l00001AD6
	// succ:  l00001AD6
l00001AC8:
	a7 = a7 - 4
	v143 = a2
	Mem0[a7:word32] = v143
	CVZN = cond(v143)
	call fn00002604 (retsize: 4;)
	v144 = d0
	Mem0[a7 + 48:word32] = v144
	CVZN = cond(v144)
	a7 = a7 + 4
	// succ:  l00001AD6
l00001AD6:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v139 = Mem0[a7 + 44:word32] - 0x00000025
	CVZN = cond(v139)
	branch Test(EQ,Z) l00002362
	// succ:  l00001AEA l00002362
l00001AEA:
	v140 = d5 - 0xFFFFFFFF
	CVZN = cond(v140)
	branch Test(EQ,Z) l00001AFC
	// succ:  l00001AF2 l00001AFC
l00001AF2:
	a7 = a7 - 4
	v141 = a2
	Mem0[a7:word32] = v141
	CVZN = cond(v141)
	a7 = a7 - 4
	v142 = d5
	Mem0[a7:word32] = v142
	CVZN = cond(v142)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001AFC
l00001AFC:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l00002362
	// succ:  l00002362
l00001B04:
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001B9C
	// succ:  l00001B0C l00001B9C
l00001B0C:
	v147 = Mem0[a7 + 72:byte] - 0x01
	CVZN = cond(v147)
	branch Test(NE,Z) l00001B2E
	// succ:  l00001B14 l00001B2E
l00001B14:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v148 = d4
	Mem0[a0 + 4:word32] = v148
	CVZN = cond(v148)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00001B9C
	// succ:  l00001B9C
l00001B2E:
	v156 = Mem0[a7 + 72:byte] - 0x6C
	CVZN = cond(v156)
	branch Test(NE,Z) l00001B4C
	// succ:  l00001B36 l00001B4C
l00001B36:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v157 = d4
	Mem0[a0:word32] = v157
	CVZN = cond(v157)
	goto l00001B9C
	// succ:  l00001B9C
l00001B4C:
	v166 = Mem0[a7 + 72:byte] - 0x68
	CVZN = cond(v166)
	branch Test(NE,Z) l00001B6A
	// succ:  l00001B54 l00001B6A
l00001B54:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v167 = (word16) d4
	Mem0[a0:word16] = v167
	CVZN = cond(v167)
	goto l00001B9C
	// succ:  l00001B9C
l00001B6A:
	v173 = Mem0[a7 + 72:byte] - 0x02
	CVZN = cond(v173)
	branch Test(NE,Z) l00001B88
	// succ:  l00001B72 l00001B88
l00001B72:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v174 = (byte) d4
	Mem0[a0:byte] = v174
	CVZN = cond(v174)
	goto l00001B9C
	// succ:  l00001B9C
l00001B88:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v176 = d4
	Mem0[a0:word32] = v176
	CVZN = cond(v176)
	// succ:  l00001B9C
l00001B9C:
	d3 = 1
	CVZN = cond(d3)
	v158 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v158
	CVZNX = cond(v158)
	goto l00002362
	// succ:  l00002362
l00001BA6:
	Mem0[a7 + 48:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 44:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 110:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	ZN = cond((byte) d7 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00001BB8
	// succ:  l00001BB6 l00001BB8
l00001BB6:
	a3 = a3 - 1
	// succ:  l00001BB8
l00001BB8:
	v145 = (byte) d7 - 0x70
	CVZN = cond(v145)
	branch Test(NE,Z) l00001BC6
	// succ:  l00001BBE l00001BC6
l00001BBE:
	v146 = 0x6C
	Mem0[a7 + 72:byte] = v146
	CVZN = cond(v146)
	d7 = 120
	CVZN = cond(d7)
	// succ:  l00001BC6
l00001BC6:
	v180 = d5 - 0x0000002D
	CVZN = cond(v180)
	branch Test(NE,Z) l00001BD4
	// succ:  l00001BCE l00001BD4
l00001BCE:
	v181 = (byte) d7 - 0x75
	CVZN = cond(v181)
	branch Test(NE,Z) l00001BDC
	// succ:  l00001BD4 l00001BDC
l00001BD4:
	v182 = d5 - 0x0000002B
	CVZN = cond(v182)
	branch Test(NE,Z) l00001C2C
	// succ:  l00001BDC l00001C2C
l00001BDC:
	v183 = d6 - d3
	CVZN = cond(v183)
	branch Test(ULT,C) l00001C2C
	// succ:  l00001BE0 l00001C2C
l00001BE0:
	v184 = d5
	Mem0[a7 + 110:word32] = v184
	CVZN = cond(v184)
	a0 = a2 + 24
	v185 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v185
	ZN = cond(v185)
	C = false
	V = false
	a0 = a2 + 20
	v186 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v186
	CVZNX = cond(v186)
	branch Test(LT,CZ) l00001C16
	// succ:  l00001BF6 l00001C16
l00001BF6:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v187 = a2
	Mem0[a7:word32] = v187
	CVZN = cond(v187)
	a2 = a0
	a2 = a2 + 1
	v188 = a2
	Mem0[a1:word32] = v188
	CVZN = cond(v188)
	v189 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v189
	v190 = Mem0[a0:byte]
	d0 = DPB(d0, v190, 0)
	CVZN = cond(v190)
	a7 = a7 - 4
	v191 = d1
	Mem0[a7:word32] = v191
	CVZN = cond(v191)
	d1 = 0
	CVZN = cond(d1)
	v192 = (byte) d0
	d1 = DPB(d1, v192, 0)
	CVZN = cond(v192)
	v193 = d1
	Mem0[a7 + 56:word32] = v193
	CVZN = cond(v193)
	v194 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v194
	CVZN = cond(d1)
	goto l00001C24
	// succ:  l00001C24
l00001C16:
	a7 = a7 - 4
	v196 = a2
	Mem0[a7:word32] = v196
	CVZN = cond(v196)
	call fn00002604 (retsize: 4;)
	v197 = d0
	Mem0[a7 + 56:word32] = v197
	CVZN = cond(v197)
	a7 = a7 + 4
	// succ:  l00001C24
l00001C24:
	d5 = Mem0[a7 + 52:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	// succ:  l00001C2C
l00001C2C:
	v198 = (byte) d7 - 0x69
	CVZN = cond(v198)
	branch Test(NE,Z) l00001D9E
	// succ:  l00001C34 l00001D9E
l00001C34:
	v199 = d5 - 0x00000030
	CVZN = cond(v199)
	branch Test(NE,Z) l00001D60
	// succ:  l00001C3E l00001D60
l00001C3E:
	v200 = d6 - d3
	CVZN = cond(v200)
	branch Test(ULT,C) l00001D60
	// succ:  l00001C44 l00001D60
l00001C44:
	a0 = a2 + 24
	v201 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v201
	ZN = cond(v201)
	C = false
	V = false
	a0 = a2 + 20
	v202 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v202
	CVZNX = cond(v202)
	branch Test(LT,CZ) l00001C76
	// succ:  l00001C56 l00001C76
l00001C56:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v203 = a2
	Mem0[a7:word32] = v203
	CVZN = cond(v203)
	a2 = a0
	a2 = a2 + 1
	v204 = a2
	Mem0[a1:word32] = v204
	CVZN = cond(v204)
	v205 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v205
	v206 = Mem0[a0:byte]
	d0 = DPB(d0, v206, 0)
	CVZN = cond(v206)
	a7 = a7 - 4
	v207 = d1
	Mem0[a7:word32] = v207
	CVZN = cond(v207)
	d1 = 0
	CVZN = cond(d1)
	v208 = (byte) d0
	d1 = DPB(d1, v208, 0)
	CVZN = cond(v208)
	v209 = d1
	Mem0[a7 + 56:word32] = v209
	CVZN = cond(v209)
	v210 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v210
	CVZN = cond(d1)
	goto l00001C84
	// succ:  l00001C84
l00001C76:
	a7 = a7 - 4
	v215 = a2
	Mem0[a7:word32] = v215
	CVZN = cond(v215)
	call fn00002604 (retsize: 4;)
	v216 = d0
	Mem0[a7 + 56:word32] = v216
	CVZN = cond(v216)
	a7 = a7 + 4
	// succ:  l00001C84
l00001C84:
	v212 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v212
	CVZN = cond(v212)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v213 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v213, 0)
	CVZN = cond(v213)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BEC
	Z = __btst(Mem0[a0 + 1 + (int32) ((int16) d0):byte], 0x0000)
	branch Test(EQ,Z) l00001CAA
	// succ:  l00001CA6 l00001CAA
l00001CA6:
	v214 = (byte) d0 | 0x20
	d0 = DPB(d0, v214, 0)
	ZN = cond(v214)
	C = false
	V = false
	// succ:  l00001CAA
l00001CAA:
	v217 = d0 - 0x00000078
	CVZN = cond(v217)
	branch Test(NE,Z) l00001D42
	// succ:  l00001CB4 l00001D42
l00001CB4:
	v218 = d6 - d3
	CVZN = cond(v218)
	branch Test(ULT,C) l00001D42
	// succ:  l00001CBA l00001D42
l00001CBA:
	a0 = a2 + 24
	v219 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v219
	ZN = cond(v219)
	C = false
	V = false
	a0 = a2 + 20
	v220 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v220
	CVZNX = cond(v220)
	branch Test(LT,CZ) l00001CEC
	// succ:  l00001CCC l00001CEC
l00001CCC:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v221 = a2
	Mem0[a7:word32] = v221
	CVZN = cond(v221)
	a2 = a0
	a2 = a2 + 1
	v222 = a2
	Mem0[a1:word32] = v222
	CVZN = cond(v222)
	v223 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v223
	v224 = Mem0[a0:byte]
	d0 = DPB(d0, v224, 0)
	CVZN = cond(v224)
	a7 = a7 - 4
	v225 = d1
	Mem0[a7:word32] = v225
	CVZN = cond(v225)
	d1 = 0
	CVZN = cond(d1)
	v226 = (byte) d0
	d1 = DPB(d1, v226, 0)
	CVZN = cond(v226)
	v227 = d1
	Mem0[a7 + 56:word32] = v227
	CVZN = cond(v227)
	v228 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v228
	CVZN = cond(d1)
	goto l00001CFA
	// succ:  l00001CFA
l00001CEC:
	a7 = a7 - 4
	v244 = a2
	Mem0[a7:word32] = v244
	CVZN = cond(v244)
	call fn00002604 (retsize: 4;)
	v245 = d0
	Mem0[a7 + 56:word32] = v245
	CVZN = cond(v245)
	a7 = a7 + 4
	// succ:  l00001CFA
l00001CFA:
	v240 = Mem0[a7 + 52:word32]
	Mem0[a7 + 74:word32] = v240
	CVZN = cond(v240)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v241 = (byte) d5
	d0 = DPB(d0, v241, 0)
	CVZN = cond(v241)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v242 = Mem0[a0:byte]
	d0 = DPB(d0, v242, 0)
	CVZN = cond(v242)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001D26
	// succ:  l00001D20 l00001D26
l00001D20:
	v243 = d6 - d3
	CVZN = cond(v243)
	branch Test(ULT,C) l00001D26
	// succ:  l00001D24 l00001D26
l00001D24:
	d7 = 120
	CVZN = cond(d7)
	// succ:  l00001D26
l00001D26:
	v251 = Mem0[a7 + 74:word32] - 0xFFFFFFFF
	CVZN = cond(v251)
	branch Test(EQ,Z) l00001D3C
	// succ:  l00001D30 l00001D3C
l00001D30:
	a7 = a7 - 4
	v252 = a2
	Mem0[a7:word32] = v252
	CVZN = cond(v252)
	v253 = Mem0[a7 + 78:word32]
	a7 = a7 - 4
	v254 = v253
	Mem0[a7:word32] = v254
	CVZN = cond(v254)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001D3C
l00001D3C:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l00001D44
	// succ:  l00001D44
l00001D42:
	d7 = 111
	CVZN = cond(d7)
	// succ:  l00001D44
l00001D44:
	v273 = Mem0[a7 + 64:word32] - 0xFFFFFFFF
	CVZN = cond(v273)
	branch Test(EQ,Z) l00001D5A
	// succ:  l00001D4E l00001D5A
l00001D4E:
	a7 = a7 - 4
	v274 = a2
	Mem0[a7:word32] = v274
	CVZN = cond(v274)
	v275 = Mem0[a7 + 68:word32]
	a7 = a7 - 4
	v276 = v275
	Mem0[a7:word32] = v276
	CVZN = cond(v276)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001D5A
l00001D5A:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	goto l00001D9E
	// succ:  l00001D9E
l00001D60:
	v278 = (byte) d5
	d0 = DPB(d0, v278, 0)
	CVZN = cond(v278)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v279 = Mem0[a0:byte]
	d0 = DPB(d0, v279, 0)
	CVZN = cond(v279)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00001D9E
	// succ:  l00001D7C l00001D9E
l00001D7C:
	v280 = (byte) d5
	d0 = DPB(d0, v280, 0)
	CVZN = cond(v280)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v281 = Mem0[a0:byte]
	d0 = DPB(d0, v281, 0)
	CVZN = cond(v281)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001D9E
	// succ:  l00001D98 l00001D9E
l00001D98:
	v282 = d6 - d3
	CVZN = cond(v282)
	branch Test(ULT,C) l00001D9E
	// succ:  l00001D9C l00001D9E
l00001D9C:
	d7 = 120
	CVZN = cond(d7)
	// succ:  l00001D9E
l00001D9E:
	v283 = (byte) d7 - 0x78
	CVZN = cond(v283)
	branch Test(NE,Z) l00001ED2
	// succ:  l00001DA6 l00001ED2
l00001DA6:
	v284 = d5 - 0x00000030
	CVZN = cond(v284)
	branch Test(NE,Z) l00001ED2
	// succ:  l00001DB0 l00001ED2
l00001DB0:
	v285 = d6 - d3
	CVZN = cond(v285)
	branch Test(ULT,C) l00001ED2
	// succ:  l00001DB6 l00001ED2
l00001DB6:
	a0 = a2 + 24
	v286 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v286
	ZN = cond(v286)
	C = false
	V = false
	a0 = a2 + 20
	v287 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v287
	CVZNX = cond(v287)
	branch Test(LT,CZ) l00001DE8
	// succ:  l00001DC8 l00001DE8
l00001DC8:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v288 = a2
	Mem0[a7:word32] = v288
	CVZN = cond(v288)
	a2 = a0
	a2 = a2 + 1
	v289 = a2
	Mem0[a1:word32] = v289
	CVZN = cond(v289)
	v290 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v290
	v291 = Mem0[a0:byte]
	d0 = DPB(d0, v291, 0)
	CVZN = cond(v291)
	a7 = a7 - 4
	v292 = d1
	Mem0[a7:word32] = v292
	CVZN = cond(v292)
	d1 = 0
	CVZN = cond(d1)
	v293 = (byte) d0
	d1 = DPB(d1, v293, 0)
	CVZN = cond(v293)
	v294 = d1
	Mem0[a7 + 56:word32] = v294
	CVZN = cond(v294)
	v295 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v295
	CVZN = cond(d1)
	goto l00001DF6
	// succ:  l00001DF6
l00001DE8:
	a7 = a7 - 4
	v299 = a2
	Mem0[a7:word32] = v299
	CVZN = cond(v299)
	call fn00002604 (retsize: 4;)
	v300 = d0
	Mem0[a7 + 56:word32] = v300
	CVZN = cond(v300)
	a7 = a7 + 4
	// succ:  l00001DF6
l00001DF6:
	v296 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v296
	CVZN = cond(v296)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v297 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v297, 0)
	CVZN = cond(v297)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BEC
	Z = __btst(Mem0[a0 + 1 + (int32) ((int16) d0):byte], 0x0000)
	branch Test(EQ,Z) l00001E1C
	// succ:  l00001E18 l00001E1C
l00001E18:
	v298 = (byte) d0 | 0x20
	d0 = DPB(d0, v298, 0)
	ZN = cond(v298)
	C = false
	V = false
	// succ:  l00001E1C
l00001E1C:
	v301 = d0 - 0x00000078
	CVZN = cond(v301)
	branch Test(NE,Z) l00001EB8
	// succ:  l00001E26 l00001EB8
l00001E26:
	v302 = d6 - d3
	CVZN = cond(v302)
	branch Test(ULT,C) l00001EB8
	// succ:  l00001E2C l00001EB8
l00001E2C:
	a0 = a2 + 24
	v303 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v303
	ZN = cond(v303)
	C = false
	V = false
	a0 = a2 + 20
	v304 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v304
	CVZNX = cond(v304)
	branch Test(LT,CZ) l00001E5E
	// succ:  l00001E3E l00001E5E
l00001E3E:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v305 = a2
	Mem0[a7:word32] = v305
	CVZN = cond(v305)
	a2 = a0
	a2 = a2 + 1
	v306 = a2
	Mem0[a1:word32] = v306
	CVZN = cond(v306)
	v307 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v307
	v308 = Mem0[a0:byte]
	d0 = DPB(d0, v308, 0)
	CVZN = cond(v308)
	a7 = a7 - 4
	v309 = d1
	Mem0[a7:word32] = v309
	CVZN = cond(v309)
	d1 = 0
	CVZN = cond(d1)
	v310 = (byte) d0
	d1 = DPB(d1, v310, 0)
	CVZN = cond(v310)
	v311 = d1
	Mem0[a7 + 56:word32] = v311
	CVZN = cond(v311)
	v312 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v312
	CVZN = cond(d1)
	goto l00001E6C
	// succ:  l00001E6C
l00001E5E:
	a7 = a7 - 4
	v420 = a2
	Mem0[a7:word32] = v420
	CVZN = cond(v420)
	call fn00002604 (retsize: 4;)
	v421 = d0
	Mem0[a7 + 56:word32] = v421
	CVZN = cond(v421)
	a7 = a7 + 4
	// succ:  l00001E6C
l00001E6C:
	v320 = Mem0[a7 + 52:word32]
	Mem0[a7 + 74:word32] = v320
	CVZN = cond(v320)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v321 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v321, 0)
	CVZN = cond(v321)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v322 = Mem0[a0:byte]
	d0 = DPB(d0, v322, 0)
	CVZN = cond(v322)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00001E9E
	// succ:  l00001E94 l00001E9E
l00001E94:
	v323 = d6 - d3
	CVZN = cond(v323)
	branch Test(ULT,C) l00001E9E
	// succ:  l00001E98 l00001E9E
l00001E98:
	d5 = Mem0[a7 + 74:word32]
	CVZN = cond(d5)
	goto l00001ED2
	// succ:  l00001ED2
l00001E9E:
	v401 = Mem0[a7 + 74:word32] - 0xFFFFFFFF
	CVZN = cond(v401)
	branch Test(EQ,Z) l00001EB4
	// succ:  l00001EA8 l00001EB4
l00001EA8:
	a7 = a7 - 4
	v402 = a2
	Mem0[a7:word32] = v402
	CVZN = cond(v402)
	v403 = Mem0[a7 + 78:word32]
	a7 = a7 - 4
	v404 = v403
	Mem0[a7:word32] = v404
	CVZN = cond(v404)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001EB4
l00001EB4:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l00001EB8
l00001EB8:
	v316 = Mem0[a7 + 64:word32] - 0xFFFFFFFF
	CVZN = cond(v316)
	branch Test(EQ,Z) l00001ECE
	// succ:  l00001EC2 l00001ECE
l00001EC2:
	a7 = a7 - 4
	v317 = a2
	Mem0[a7:word32] = v317
	CVZN = cond(v317)
	v318 = Mem0[a7 + 68:word32]
	a7 = a7 - 4
	v319 = v318
	Mem0[a7:word32] = v319
	CVZN = cond(v319)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001ECE
l00001ECE:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l00001ED2
l00001ED2:
	v313 = (byte) d7 - 0x78
	CVZN = cond(v313)
	branch Test(EQ,Z) l00001EDE
	// succ:  l00001ED8 l00001EDE
l00001ED8:
	v314 = (byte) d7 - 0x58
	CVZN = cond(v314)
	branch Test(NE,Z) l00001EE8
	// succ:  l00001EDE l00001EE8
l00001EDE:
	v315 = 0x00000010
	Mem0[a7 + 64:word32] = v315
	CVZN = cond(v315)
	goto l00001F06
	// succ:  l00001F06
l00001EE8:
	v418 = (byte) d7 - 0x6F
	CVZN = cond(v418)
	branch Test(NE,Z) l00001EF8
	// succ:  l00001EEE l00001EF8
l00001EEE:
	v419 = 0x00000008
	Mem0[a7 + 52:word32] = v419
	CVZN = cond(v419)
	goto l00001F00
	// succ:  l00001F00
l00001EF8:
	v422 = 0x0000000A
	Mem0[a7 + 52:word32] = v422
	CVZN = cond(v422)
	// succ:  l00001F00
l00001F00:
	v423 = Mem0[a7 + 52:word32]
	Mem0[a7 + 64:word32] = v423
	CVZN = cond(v423)
	// succ:  l00001F06
l00001F06:
	v324 = Mem0[a7 + 64:word32]
	Mem0[a7 + 114:word32] = v324
	CVZN = cond(v324)
	v325 = (byte) d5
	d0 = DPB(d0, v325, 0)
	CVZN = cond(v325)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v326 = Mem0[a0:byte]
	d0 = DPB(d0, v326, 0)
	CVZN = cond(v326)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	v327 = d2
	Mem0[a7 + 132:word32] = v327
	CVZN = cond(v327)
	v328 = d4
	Mem0[a7 + 52:word32] = v328
	CVZN = cond(v328)
	v329 = (byte) d7
	Mem0[a7 + 74:byte] = v329
	CVZN = cond(v329)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000216E
	// succ:  l00001F38 l0000216E
l00001F38:
	v330 = Mem0[a7 + 114:word32] - 0x0000000A
	CVZN = cond(v330)
	branch Test(NE,Z) l00001F6E
	// succ:  l00001F42 l00001F6E
l00001F42:
	v331 = (byte) d5
	d0 = DPB(d0, v331, 0)
	CVZN = cond(v331)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v332 = Mem0[a0:byte]
	d0 = DPB(d0, v332, 0)
	CVZN = cond(v332)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	v333 = d2
	Mem0[a7 + 132:word32] = v333
	CVZN = cond(v333)
	v334 = d4
	Mem0[a7 + 52:word32] = v334
	CVZN = cond(v334)
	v335 = (byte) d7
	Mem0[a7 + 74:byte] = v335
	CVZN = cond(v335)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000216E
	// succ:  l00001F6E l0000216E
l00001F6E:
	v336 = Mem0[a7 + 114:word32] - 0x00000008
	CVZN = cond(v336)
	branch Test(NE,Z) l00001F8E
	// succ:  l00001F78 l00001F8E
l00001F78:
	v337 = d2
	Mem0[a7 + 132:word32] = v337
	CVZN = cond(v337)
	v338 = d4
	Mem0[a7 + 52:word32] = v338
	CVZN = cond(v338)
	v339 = (byte) d7
	Mem0[a7 + 74:byte] = v339
	CVZN = cond(v339)
	v340 = d5 - 0x00000037
	CVZN = cond(v340)
	branch Test(GT,VZN) l0000216E
	// succ:  l00001F8E l0000216E
l00001F8E:
	v341 = d2
	Mem0[a7 + 132:word32] = v341
	CVZN = cond(v341)
	v342 = d4
	Mem0[a7 + 52:word32] = v342
	CVZN = cond(v342)
	v343 = d6
	Mem0[a7 + 64:word32] = v343
	CVZN = cond(v343)
	v344 = (byte) d7
	Mem0[a7 + 74:byte] = v344
	CVZN = cond(v344)
	v345 = d6 - d3
	CVZN = cond(v345)
	branch Test(ULT,C) l0000216E
	// succ:  l00001FA4 l0000216E
l00001FA4:
	d7 = Mem0[a7 + 114:word32]
	CVZN = cond(d7)
	a4 = Mem0[a7 + 64:word32]
	// succ:  l00001FAC
l00001FAC:
	d1 = d7
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v346 = d2
	Mem0[a7:word32] = v346
	CVZN = cond(v346)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v347 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v347
	CVZN = cond(d2)
	a7 = a7 - 4
	v348 = d0
	Mem0[a7:word32] = v348
	CVZN = cond(v348)
	a7 = a7 - 4
	v349 = d1
	Mem0[a7:word32] = v349
	CVZN = cond(v349)
	a7 = a7 - 4
	v350 = a1
	Mem0[a7:word32] = v350
	CVZN = cond(v350)
	v351 = Mem0[a7 + 60:word32]
	a7 = a7 - 4
	v352 = v351
	Mem0[a7:word32] = v352
	CVZN = cond(v352)
	v353 = Mem0[a7 + 60:word32]
	a7 = a7 - 4
	v354 = v353
	Mem0[a7:word32] = v354
	CVZN = cond(v354)
	a7 = a7 - 4
	Mem0[a7:word32] = d1
	a7 = a7 - 4
	Mem0[a7:word32] = d0
	call fn0000248C (retsize: 4;)
	a7 = a7 + 16
	v355 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v355
	v356 = d0
	Mem0[a7 + 72:word32] = v356
	CVZN = cond(v356)
	v357 = d1
	Mem0[a7 + 76:word32] = v357
	CVZN = cond(v357)
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	v358 = (byte) d5
	d0 = DPB(d0, v358, 0)
	CVZN = cond(v358)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v359 = Mem0[a0:byte]
	d0 = DPB(d0, v359, 0)
	CVZN = cond(v359)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000200C
	// succ:  l00002002 l0000200C
l00002002:
	d4 = d5
	CVZN = cond(d4)
	d4 = d4 - 0x00000030
	CVZNX = cond(d4)
	goto l0000200E
	// succ:  l0000200E
l0000200C:
	d4 = 0
	CVZN = cond(d4)
	// succ:  l0000200E
l0000200E:
	d1 = d4
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v360 = d2
	Mem0[a7:word32] = v360
	CVZN = cond(v360)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v361 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v361
	CVZN = cond(d2)
	a7 = a7 - 4
	v362 = d2
	Mem0[a7:word32] = v362
	CVZN = cond(v362)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 72:word32]
	CVZNX = cond(d2)
	v363 = d2
	Mem0[a7 + 52:word32] = v363
	CVZN = cond(v363)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 4
	v364 = d3
	Mem0[a7:word32] = v364
	CVZN = cond(v364)
	d3 = Mem0[a7 + 72:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v366 = d2
	Mem0[a7 + 52:word32] = v366
	CVZN = cond(v366)
	v367 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v367
	CVZN = cond(d3)
	v368 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v368
	CVZN = cond(d2)
	v369 = (byte) d5
	d0 = DPB(d0, v369, 0)
	CVZN = cond(v369)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v370 = Mem0[a0:byte]
	d0 = DPB(d0, v370, 0)
	CVZN = cond(v370)
	d0 = d0 & 0x00000001
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000205E
	// succ:  l00002054 l0000205E
l00002054:
	d6 = d5
	CVZN = cond(d6)
	d6 = d6 - 0x00000037
	CVZNX = cond(d6)
	goto l00002060
	// succ:  l00002060
l0000205E:
	d6 = 0
	CVZN = cond(d6)
	// succ:  l00002060
l00002060:
	d1 = d6
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v371 = d2
	Mem0[a7:word32] = v371
	CVZN = cond(v371)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v372 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v372
	CVZN = cond(d2)
	a7 = a7 - 4
	v373 = d2
	Mem0[a7:word32] = v373
	CVZN = cond(v373)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 52:word32]
	CVZNX = cond(d2)
	v374 = d2
	Mem0[a7 + 72:word32] = v374
	CVZN = cond(v374)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 4
	v375 = d3
	Mem0[a7:word32] = v375
	CVZN = cond(v375)
	d3 = Mem0[a7 + 52:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v376 = d2
	Mem0[a7 + 72:word32] = v376
	CVZN = cond(v376)
	v377 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v377
	CVZN = cond(d3)
	v378 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v378
	CVZN = cond(d2)
	v379 = (byte) d5
	d0 = DPB(d0, v379, 0)
	CVZN = cond(v379)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v380 = Mem0[a0:byte]
	d0 = DPB(d0, v380, 0)
	CVZN = cond(v380)
	d0 = d0 & 0x00000002
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000020B0
	// succ:  l000020A6 l000020B0
l000020A6:
	d2 = d5
	CVZN = cond(d2)
	d2 = d2 - 0x00000057
	CVZNX = cond(d2)
	goto l000020B2
	// succ:  l000020B2
l000020B0:
	d2 = 0
	CVZN = cond(d2)
	// succ:  l000020B2
l000020B2:
	d1 = d2
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v381 = d2
	Mem0[a7:word32] = v381
	CVZN = cond(v381)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	v382 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v382
	CVZN = cond(d2)
	a7 = a7 - 4
	v383 = d2
	Mem0[a7:word32] = v383
	CVZN = cond(v383)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + Mem0[a7 + 72:word32]
	CVZNX = cond(d2)
	v384 = d2
	Mem0[a7 + 52:word32] = v384
	CVZN = cond(v384)
	d2 = d0
	CVZN = cond(d2)
	a7 = a7 - 4
	v385 = d3
	Mem0[a7:word32] = v385
	CVZN = cond(v385)
	d3 = Mem0[a7 + 72:word32]
	CVZN = cond(d3)
	d2 = d3 + d2 + X
	CVZNX = cond(d2)
	v386 = d2
	Mem0[a7 + 52:word32] = v386
	CVZN = cond(v386)
	v387 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v387
	CVZN = cond(d3)
	v388 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v388
	CVZN = cond(d2)
	a0 = a2 + 24
	d0 = 1
	CVZN = cond(d0)
	v389 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v389
	ZN = cond(v389)
	C = false
	V = false
	a0 = a2 + 20
	v390 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v390
	CVZNX = cond(v390)
	branch Test(LT,CZ) l00002104
	// succ:  l000020EC l00002104
l000020EC:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v391 = a2
	Mem0[a7:word32] = v391
	CVZN = cond(v391)
	a2 = a0
	a2 = a2 + 1
	v392 = a2
	Mem0[a1:word32] = v392
	CVZN = cond(v392)
	v393 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v393
	v394 = Mem0[a0:byte]
	d0 = DPB(d0, v394, 0)
	CVZN = cond(v394)
	d1 = 0
	CVZN = cond(d1)
	v395 = (byte) d0
	d1 = DPB(d1, v395, 0)
	CVZN = cond(v395)
	goto l00002110
	// succ:  l00002110
l00002104:
	a7 = a7 - 4
	v414 = a2
	Mem0[a7:word32] = v414
	CVZN = cond(v414)
	call fn00002604 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l00002110
l00002110:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	v405 = Mem0[a7 + 52:word32] + 0x00000001
	Mem0[a7 + 52:word32] = v405
	CVZNX = cond(v405)
	v406 = (byte) d1
	d0 = DPB(d0, v406, 0)
	CVZN = cond(v406)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v407 = Mem0[a0:byte]
	d0 = DPB(d0, v407, 0)
	CVZN = cond(v407)
	d0 = d0 & 0x00000044
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000216E
	// succ:  l00002134 l0000216E
l00002134:
	v408 = d7 - 0x0000000A
	CVZN = cond(v408)
	branch Test(NE,Z) l00002158
	// succ:  l0000213C l00002158
l0000213C:
	v409 = (byte) d5
	d0 = DPB(d0, v409, 0)
	CVZN = cond(v409)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v410 = Mem0[a0:byte]
	d0 = DPB(d0, v410, 0)
	CVZN = cond(v410)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000216E
	// succ:  l00002158 l0000216E
l00002158:
	v411 = d7 - 0x00000008
	CVZN = cond(v411)
	branch Test(NE,Z) l00002168
	// succ:  l00002160 l00002168
l00002160:
	v412 = d5 - 0x00000037
	CVZN = cond(v412)
	branch Test(GT,VZN) l0000216E
	// succ:  l00002168 l0000216E
l00002168:
	v413 = a4 - d3
	CVZN = cond(v413)
	branch Test(UGE,C) l00001FAC
	// succ:  l0000216E l00001FAC
l0000216E:
	v396 = Mem0[a7 + 74:byte]
	d7 = DPB(d7, v396, 0)
	CVZN = cond(v396)
	d4 = Mem0[a7 + 52:word32]
	CVZN = cond(d4)
	d2 = Mem0[a7 + 132:word32]
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 110:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000021A2
	// succ:  l00002180 l000021A2
l00002180:
	v397 = d3 - 0x00000002
	CVZN = cond(v397)
	branch Test(NE,Z) l000021A2
	// succ:  l00002188 l000021A2
l00002188:
	v398 = d5 - 0xFFFFFFFF
	CVZN = cond(v398)
	branch Test(EQ,Z) l0000219A
	// succ:  l00002190 l0000219A
l00002190:
	a7 = a7 - 4
	v399 = a2
	Mem0[a7:word32] = v399
	CVZN = cond(v399)
	a7 = a7 - 4
	v400 = d5
	Mem0[a7:word32] = v400
	CVZN = cond(v400)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l0000219A
l0000219A:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	d5 = Mem0[a7 + 110:word32]
	CVZN = cond(d5)
	// succ:  l000021A2
l000021A2:
	v415 = d5 - 0xFFFFFFFF
	CVZN = cond(v415)
	branch Test(EQ,Z) l000021B4
	// succ:  l000021AA l000021B4
l000021AA:
	a7 = a7 - 4
	v416 = a2
	Mem0[a7:word32] = v416
	CVZN = cond(v416)
	a7 = a7 - 4
	v417 = d5
	Mem0[a7:word32] = v417
	CVZN = cond(v417)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l000021B4
l000021B4:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	ZN = cond(Mem0[a7 + 73:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002362
	// succ:  l000021C0 l00002362
l000021C0:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002362
	// succ:  l000021C6 l00002362
l000021C6:
	v424 = (byte) d7 - 0x75
	CVZN = cond(v424)
	branch Test(NE,Z) l00002288
	// succ:  l000021CE l00002288
l000021CE:
	a7 = a7 - 4
	v425 = d0
	Mem0[a7:word32] = v425
	CVZN = cond(v425)
	v426 = Mem0[a7 + 76:byte]
	d0 = DPB(d0, v426, 0)
	CVZN = cond(v426)
	v427 = (byte) d0 - 0x01
	d0 = DPB(d0, v427, 0)
	CVZNX = cond(v427)
	v428 = (byte) d0
	Mem0[a7 + 56:byte] = v428
	CVZN = cond(v428)
	v429 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v429
	CVZN = cond(d0)
	ZN = cond(Mem0[a7 + 52:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000021F8
	// succ:  l000021E2 l000021F8
l000021E2:
	v430 = Mem0[a7 + 52:byte] - 0x01
	Mem0[a7 + 52:byte] = v430
	CVZNX = cond(v430)
	branch Test(EQ,Z) l00002250
	// succ:  l000021E8 l00002250
l000021E8:
	v431 = Mem0[a7 + 52:byte] - 0x66
	Mem0[a7 + 52:byte] = v431
	CVZNX = cond(v431)
	branch Test(EQ,Z) l00002234
	// succ:  l000021F0 l00002234
l000021F0:
	v432 = Mem0[a7 + 52:byte] - 0x04
	Mem0[a7 + 52:byte] = v432
	CVZNX = cond(v432)
	branch Test(EQ,Z) l00002218
	// succ:  l000021F6 l00002218
l000021F6:
	goto l0000226C
	// succ:  l0000226C
l000021F8:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v433 = Mem0[a7 + 48:word32]
	Mem0[a0 + 4:word32] = v433
	CVZN = cond(v433)
	v434 = Mem0[a7 + 44:word32]
	Mem0[a0:word32] = v434
	CVZN = cond(v434)
	goto l0000235E
	// succ:  l0000235E
l00002218:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v436 = d0
	Mem0[a0:word32] = v436
	CVZN = cond(v436)
	goto l0000235E
	// succ:  l0000235E
l00002234:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v438 = (word16) d0
	Mem0[a0:word16] = v438
	CVZN = cond(v438)
	goto l0000235E
	// succ:  l0000235E
l00002250:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v439 = (byte) d0
	Mem0[a0:byte] = v439
	CVZN = cond(v439)
	goto l0000235E
	// succ:  l0000235E
l0000226C:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	v435 = d0
	Mem0[a0:word32] = v435
	CVZN = cond(v435)
	goto l0000235E
	// succ:  l0000235E
l00002288:
	v440 = Mem0[a7 + 110:word32] - 0x0000002D
	CVZN = cond(v440)
	branch Test(NE,Z) l000022A4
	// succ:  l00002292 l000022A4
l00002292:
	v441 = a7 + 44
	d0 = Mem0[v441:word32]
	v441 = v441 + 4
	d1 = Mem0[v441:word32]
	v441 = v441 + 4
	d1 = -d1
	CVZNX = cond(d1)
	d0 = -d0 - X
	CVZNX = cond(d0)
	v442 = a7 + 52
	a6 = Mem0[v442:word32]
	v442 = v442 + 0x00000004
	a7 = Mem0[v442:word32]
	v442 = v442 + 0x00000004
	goto l000022B0
	// succ:  l000022B0
l000022A4:
	v525 = Mem0[a7 + 48:word32]
	Mem0[a7 + 56:word32] = v525
	CVZN = cond(v525)
	v526 = Mem0[a7 + 44:word32]
	Mem0[a7 + 52:word32] = v526
	CVZN = cond(v526)
	// succ:  l000022B0
l000022B0:
	a7 = a7 - 4
	v446 = d0
	Mem0[a7:word32] = v446
	CVZN = cond(v446)
	v447 = Mem0[a7 + 76:byte]
	d0 = DPB(d0, v447, 0)
	CVZN = cond(v447)
	v448 = (byte) d0 - 0x01
	d0 = DPB(d0, v448, 0)
	CVZNX = cond(v448)
	v449 = (byte) d0
	Mem0[a7 + 48:byte] = v449
	CVZN = cond(v449)
	v450 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v450
	CVZN = cond(d0)
	ZN = cond(Mem0[a7 + 44:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000022DA
	// succ:  l000022C4 l000022DA
l000022C4:
	v451 = Mem0[a7 + 44:byte] - 0x01
	Mem0[a7 + 44:byte] = v451
	CVZNX = cond(v451)
	branch Test(EQ,Z) l0000232C
	// succ:  l000022CA l0000232C
l000022CA:
	v452 = Mem0[a7 + 44:byte] - 0x66
	Mem0[a7 + 44:byte] = v452
	CVZNX = cond(v452)
	branch Test(EQ,Z) l00002312
	// succ:  l000022D2 l00002312
l000022D2:
	v453 = Mem0[a7 + 44:byte] - 0x04
	Mem0[a7 + 44:byte] = v453
	CVZNX = cond(v453)
	branch Test(EQ,Z) l000022F8
	// succ:  l000022D8 l000022F8
l000022D8:
	goto l00002346
	// succ:  l00002346
l000022DA:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	v456 = Mem0[a7 + 56:word32]
	Mem0[a0 + 4:word32] = v456
	CVZN = cond(v456)
	v457 = Mem0[a7 + 52:word32]
	Mem0[a0:word32] = v457
	CVZN = cond(v457)
	goto l0000235E
	// succ:  l0000235E
l000022F8:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v469 = d0
	Mem0[a0:word32] = v469
	CVZN = cond(v469)
	goto l0000235E
	// succ:  l0000235E
l00002312:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v458 = (word16) d0
	Mem0[a0:word16] = v458
	CVZN = cond(v458)
	goto l0000235E
	// succ:  l0000235E
l0000232C:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v524 = (byte) d0
	Mem0[a0:byte] = v524
	CVZN = cond(v524)
	goto l0000235E
	// succ:  l0000235E
l00002346:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d2 = d0
	CVZN = cond(d2)
	d2 = d2 + 0x00000004
	CVZNX = cond(d2)
	a0 = d2
	a0 = Mem0[a0 + -4:word32]
	d0 = Mem0[a7 + 56:word32]
	CVZN = cond(d0)
	v459 = d0
	Mem0[a0:word32] = v459
	CVZN = cond(v459)
	// succ:  l0000235E
l0000235E:
	v437 = Mem0[a7 + 60:word32] + 0x00000001
	Mem0[a7 + 60:word32] = v437
	CVZNX = cond(v437)
	// succ:  l00002362
l00002362:
	a4 = a3
	goto l00002460
	// succ:  l00002460
l00002368:
	v85 = Mem0[a4:byte]
	d0 = DPB(d0, v85, 0)
	CVZN = cond(v85)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v86 = Mem0[a0:byte]
	d0 = DPB(d0, v86, 0)
	CVZN = cond(v86)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000023F4
	// succ:  l00002384 l000023F4
l00002384:
	a0 = a2 + 24
	v87 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v87
	ZN = cond(v87)
	C = false
	V = false
	a0 = a2 + 20
	v88 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v88
	CVZNX = cond(v88)
	branch Test(LT,CZ) l000023AE
	// succ:  l00002396 l000023AE
l00002396:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v89 = a2
	Mem0[a7:word32] = v89
	CVZN = cond(v89)
	a2 = a0
	a2 = a2 + 1
	v90 = a2
	Mem0[a1:word32] = v90
	CVZN = cond(v90)
	v91 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v91
	v92 = Mem0[a0:byte]
	d0 = DPB(d0, v92, 0)
	CVZN = cond(v92)
	d1 = 0
	CVZN = cond(d1)
	v93 = (byte) d0
	d1 = DPB(d1, v93, 0)
	CVZN = cond(v93)
	goto l000023BA
	// succ:  l000023BA
l000023AE:
	a7 = a7 - 4
	v101 = a2
	Mem0[a7:word32] = v101
	CVZN = cond(v101)
	call fn00002604 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 4
	// succ:  l000023BA
l000023BA:
	d5 = d1
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v96 = (byte) d1
	d0 = DPB(d0, v96, 0)
	CVZN = cond(v96)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v97 = Mem0[a0:byte]
	d0 = DPB(d0, v97, 0)
	CVZN = cond(v97)
	d0 = d0 & 0x00000008
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l00002384
	// succ:  l000023DC l00002384
l000023DC:
	v98 = d5 - 0xFFFFFFFF
	CVZN = cond(v98)
	branch Test(EQ,Z) l000023EE
	// succ:  l000023E4 l000023EE
l000023E4:
	a7 = a7 - 4
	v99 = a2
	Mem0[a7:word32] = v99
	CVZN = cond(v99)
	a7 = a7 - 4
	v100 = d5
	Mem0[a7:word32] = v100
	CVZN = cond(v100)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l000023EE
l000023EE:
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	d3 = 1
	CVZN = cond(d3)
	goto l0000245E
	// succ:  l0000245E
l000023F4:
	a0 = a2 + 24
	v102 = Mem0[a0:word32] | 0x00000001
	Mem0[a0:word32] = v102
	ZN = cond(v102)
	C = false
	V = false
	a0 = a2 + 20
	v103 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v103
	CVZNX = cond(v103)
	branch Test(LT,CZ) l00002426
	// succ:  l00002406 l00002426
l00002406:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a7 = a7 - 4
	v104 = a2
	Mem0[a7:word32] = v104
	CVZN = cond(v104)
	a2 = a0
	a2 = a2 + 1
	v105 = a2
	Mem0[a1:word32] = v105
	CVZN = cond(v105)
	v106 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v106
	v107 = Mem0[a0:byte]
	d0 = DPB(d0, v107, 0)
	CVZN = cond(v107)
	a7 = a7 - 4
	v108 = d1
	Mem0[a7:word32] = v108
	CVZN = cond(v108)
	d1 = 0
	CVZN = cond(d1)
	v109 = (byte) d0
	d1 = DPB(d1, v109, 0)
	CVZN = cond(v109)
	v110 = d1
	Mem0[a7 + 48:word32] = v110
	CVZN = cond(v110)
	v111 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v111
	CVZN = cond(d1)
	goto l00002434
	// succ:  l00002434
l00002426:
	a7 = a7 - 4
	v118 = a2
	Mem0[a7:word32] = v118
	CVZN = cond(v118)
	call fn00002604 (retsize: 4;)
	v119 = d0
	Mem0[a7 + 48:word32] = v119
	CVZN = cond(v119)
	a7 = a7 + 4
	// succ:  l00002434
l00002434:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v113 = Mem0[a4:byte]
	d0 = DPB(d0, v113, 0)
	CVZN = cond(v113)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	v114 = d0 - Mem0[a7 + 44:word32]
	CVZN = cond(v114)
	branch Test(EQ,Z) l0000245E
	// succ:  l00002448 l0000245E
l00002448:
	v115 = d5 - 0xFFFFFFFF
	CVZN = cond(v115)
	branch Test(EQ,Z) l0000245A
	// succ:  l00002450 l0000245A
l00002450:
	a7 = a7 - 4
	v116 = a2
	Mem0[a7:word32] = v116
	CVZN = cond(v116)
	a7 = a7 - 4
	v117 = d5
	Mem0[a7:word32] = v117
	CVZN = cond(v117)
	call fn00001438 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l0000245A
l0000245A:
	d3 = d3 - 0x00000001
	CVZNX = cond(d3)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	// succ:  l0000245E
l0000245E:
	a4 = a4 + 1
	// succ:  l00002460
l00002460:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000246A
	// succ:  l00002464 l0000246A
l00002464:
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000148A
	// succ:  l0000246A l0000148A
l0000246A:
	v50 = d5 - 0xFFFFFFFF
	CVZN = cond(v50)
	branch Test(NE,Z) l0000247C
	// succ:  l00002472 l0000247C
l00002472:
	ZN = cond(Mem0[a7 + 60:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000247C
	// succ:  l00002478 l0000247C
l00002478:
	d0 = d5
	CVZN = cond(d0)
	goto l00002480
	// succ:  l00002480
l0000247C:
	d0 = Mem0[a7 + 60:word32]
	CVZN = cond(d0)
	// succ:  l00002480
l00002480:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a7 + 76
	return
	// succ:  fn00001468_exit
fn00001468_exit:


// fn0000248C
// Return size: 4
define fn0000248C
fn0000248C_entry:
	// succ:  l0000248C
l0000248C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d5 = Mem0[a7 + 28:word32]
	CVZN = cond(d5)
	d6 = Mem0[a7 + 36:word32]
	CVZN = cond(d6)
	d0 = d5
	CVZN = cond(d0)
	d1 = d6
	CVZN = cond(d1)
	d2 = d0
	CVZN = cond(d2)
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d3 = d1
	CVZN = cond(d3)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v14 = (word16) d2
	d4 = DPB(d4, v14, 0)
	CVZN = cond(v14)
	d4 = d4 *u (word16) d3
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d3 = d3 *u (word16) d0
	VZN = cond(d3)
	C = false
	d1 = d1 *u (word16) d0
	VZN = cond(d1)
	C = false
	d0 = d4
	CVZN = cond(d0)
	v16 = (word16) d0 ^ (word16) d0
	d0 = DPB(d0, v16, 0)
	ZN = cond(v16)
	C = false
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d2 = d2 + d0
	CVZNX = cond(d2)
	d2 = d2 + d3
	CVZNX = cond(d2)
	branch Test(UGE,C) l000024C0
	// succ:  l000024BA l000024C0
l000024BA:
	d1 = d1 + 0x00010000
	CVZNX = cond(d1)
	// succ:  l000024C0
l000024C0:
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	v18 = (word16) d2
	d0 = DPB(d0, v18, 0)
	CVZN = cond(v18)
	v19 = (word16) d4
	d2 = DPB(d2, v19, 0)
	CVZN = cond(v19)
	d0 = d0 + d1
	CVZNX = cond(d0)
	d1 = d2
	CVZN = cond(d1)
	d2 = Mem0[a7 + 32:word32]
	CVZN = cond(d2)
	d3 = d2
	CVZN = cond(d3)
	d4 = d5
	CVZN = cond(d4)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 *u (word16) d5
	VZN = cond(d3)
	C = false
	d4 = d4 *u (word16) d2
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d5
	VZN = cond(d2)
	C = false
	v20 = (word16) d3 + (word16) d4
	d3 = DPB(d3, v20, 0)
	CVZNX = cond(v20)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v21 = (word16) d3 ^ (word16) d3
	d3 = DPB(d3, v21, 0)
	ZN = cond(v21)
	C = false
	V = false
	d2 = d2 + d3
	CVZNX = cond(d2)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d2 = Mem0[a7 + 24:word32]
	CVZN = cond(d2)
	d3 = d2
	CVZN = cond(d3)
	d4 = d6
	CVZN = cond(d4)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 *u (word16) d6
	VZN = cond(d3)
	C = false
	d4 = d4 *u (word16) d2
	VZN = cond(d4)
	C = false
	d2 = d2 *u (word16) d6
	VZN = cond(d2)
	C = false
	v22 = (word16) d3 + (word16) d4
	d3 = DPB(d3, v22, 0)
	CVZNX = cond(v22)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v23 = (word16) d3 ^ (word16) d3
	d3 = DPB(d3, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
	d2 = d2 + d3
	CVZNX = cond(d2)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn0000248C_exit
fn0000248C_exit:


// fn0000254C
// Return size: 4
define fn0000254C
fn0000254C_entry:
	// succ:  l0000254C
l0000254C:
	a7 = fp
	v3 = a7 + 4
	d0 = Mem0[v3:word32]
	v3 = v3 + 4
	d1 = Mem0[v3:word32]
	v3 = v3 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l0000256C
	// succ:  l00002556 l0000256C
l00002556:
	d0 = -d0
	CVZNX = cond(d0)
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l00002564
	// succ:  l0000255C l00002564
l0000255C:
	d1 = -d1
	CVZNX = cond(d1)
	call fn0000257E (retsize: 4;)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn0000254C_exit
l00002564:
	call fn0000257E (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	d1 = -d1
	CVZNX = cond(d1)
	return
	// succ:  fn0000254C_exit
l0000256C:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(GT,N) l0000256E_thunk_fn0000257E
	goto l00002570
	// succ:  l00002570 l0000256E_thunk_fn0000257E
l0000256E_thunk_fn0000257E:
	call fn0000257E (retsize: 0;)
	return
	// succ:  fn0000254C_exit
l00002570:
	d1 = -d1
	CVZNX = cond(d1)
	call fn0000257E (retsize: 4;)
	d0 = -d0
	CVZNX = cond(d0)
	return
	// succ:  fn0000254C_exit
fn0000254C_exit:


// fn0000257E
// Return size: 4
define fn0000257E
fn0000257E_entry:
	// succ:  l0000257E
l0000257E:
	a7 = fp
	a7 = a7 - 4
	v4 = d2
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v10 = (word16) d1
	d2 = DPB(d2, v10, 0)
	CVZN = cond(v10)
	branch Test(NE,Z) l000025A4
	// succ:  l00002586 l000025A4
l00002586:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v13 = (word16) d0
	d2 = DPB(d2, v13, 0)
	CVZN = cond(v13)
	branch Test(EQ,Z) l00002594
	// succ:  l00002590 l00002594
l00002590:
	v14 = (uint16) (d2 % (uint16) d1)
	v15 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v14, 16)
	d2 = DPB(d2, v15, 0)
	VZN = cond(v15)
	C = false
	v17 = (word16) d2
	d0 = DPB(d0, v17, 0)
	CVZN = cond(v17)
	// succ:  l00002594
l00002594:
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v26 = (word16) d0
	d2 = DPB(d2, v26, 0)
	CVZN = cond(v26)
	v27 = (uint16) (d2 % (uint16) d1)
	v28 = (uint16) (d2 /u (uint16) d1)
	d2 = DPB(d2, v27, 16)
	d2 = DPB(d2, v28, 0)
	VZN = cond(v28)
	C = false
	v29 = (word16) d2
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v30 = (word16) d2
	d1 = DPB(d1, v30, 0)
	CVZN = cond(v30)
	v31 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v31
	CVZN = cond(d2)
	return
	// succ:  fn0000257E_exit
l000025A4:
	a7 = a7 - 4
	v19 = d3
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	d3 = 16
	CVZN = cond(d3)
	v20 = (word16) d1 - 0x0080
	CVZN = cond(v20)
	branch Test(UGE,C) l000025B2
	// succ:  l000025AE l000025B2
l000025AE:
	d1 = __rol(d1, 0x00000008)
	CZN = cond(d1)
	V = false
	v22 = (word16) d3 - 0x0008
	d3 = DPB(d3, v22, 0)
	CVZNX = cond(v22)
	// succ:  l000025B2
l000025B2:
	v24 = (word16) d1 - 0x0800
	CVZN = cond(v24)
	branch Test(UGE,C) l000025BC
	// succ:  l000025B8 l000025BC
l000025B8:
	d1 = __rol(d1, 0x00000004)
	CZN = cond(d1)
	V = false
	v25 = (word16) d3 - 0x0004
	d3 = DPB(d3, v25, 0)
	CVZNX = cond(v25)
	// succ:  l000025BC
l000025BC:
	v32 = (word16) d1 - 0x2000
	CVZN = cond(v32)
	branch Test(UGE,C) l000025C6
	// succ:  l000025C2 l000025C6
l000025C2:
	d1 = __rol(d1, 0x00000002)
	CZN = cond(d1)
	V = false
	v33 = (word16) d3 - 0x0002
	d3 = DPB(d3, v33, 0)
	CVZNX = cond(v33)
	// succ:  l000025C6
l000025C6:
	ZN = cond((word16) d1 - 0x0000)
	C = false
	V = false
	branch Test(LT,N) l000025CE
	// succ:  l000025CA l000025CE
l000025CA:
	d1 = __rol(d1, 0x00000001)
	CZN = cond(d1)
	V = false
	v35 = (word16) d3 - 0x0001
	d3 = DPB(d3, v35, 0)
	CVZNX = cond(v35)
	// succ:  l000025CE
l000025CE:
	v36 = (word16) d0
	d2 = DPB(d2, v36, 0)
	CVZN = cond(v36)
	d0 = d0 >>u d3
	CVZNX = cond(d0)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 >>u d3
	CVZNX = cond(d2)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v38 = (uint16) (d0 % (uint16) d1)
	v39 = (uint16) (d0 /u (uint16) d1)
	d0 = DPB(d0, v38, 16)
	d0 = DPB(d0, v39, 0)
	VZN = cond(v39)
	C = false
	v40 = (word16) d0
	d3 = DPB(d3, v40, 0)
	CVZN = cond(v40)
	v41 = (word16) d2
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d3
	d2 = DPB(d2, v42, 0)
	CVZN = cond(v42)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = d2 *u (word16) d1
	VZN = cond(d2)
	C = false
	d0 = d0 - d2
	CVZNX = cond(d0)
	branch Test(UGE,C) l000025F0
	// succ:  l000025EA l000025F0
l000025EA:
	v43 = (word16) d3 - 0x0001
	d3 = DPB(d3, v43, 0)
	CVZNX = cond(v43)
	d0 = d0 + d1
	CVZNX = cond(d0)
	// succ:  l000025EE
l000025EE:
	branch Test(UGE,C) l000025EE
	// succ:  l000025F0 l000025EE
l000025F0:
	d1 = 0
	CVZN = cond(d1)
	v44 = (word16) d3
	d1 = DPB(d1, v44, 0)
	CVZN = cond(v44)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d0 = __rol(d0, d3)
	CZN = cond(d0)
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v45 = d0
	d0 = d1
	d1 = v45
	ZN = cond(d1)
	C = false
	V = false
	v46 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v46
	CVZN = cond(d3)
	v47 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v47
	CVZN = cond(d2)
	return
	// succ:  fn0000257E_exit
fn0000257E_exit:


// fn00002604
// Return size: 4
define fn00002604
fn00002604_entry:
	// succ:  l00002604
l00002604:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a2 = Mem0[a7 + 36:word32]
	call fn00002BBC (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l0000261C
	// succ:  l00002616 l0000261C
l00002616:
	d0 = -1
	CVZN = cond(d0)
	goto l000026FA
	// succ:  l000026FA
l0000261C:
	d0 = 42
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	d5 = 32
	CVZN = cond(d5)
	v17 = d5 - d0
	CVZN = cond(v17)
	branch Test(EQ,Z) l0000262E
	// succ:  l00002628 l0000262E
l00002628:
	d0 = -1
	CVZN = cond(d0)
	goto l000026FA
	// succ:  l000026FA
l0000262E:
	a0 = a2 + 24
	d0 = 1
	CVZN = cond(d0)
	v19 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v19
	ZN = cond(v19)
	C = false
	V = false
	d0 = 0x00000200
	CVZN = cond(d0)
	d0 = d0 & Mem0[a0:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002646
	// succ:  l00002640 l00002646
l00002640:
	call fn00002AEC (retsize: 4;)
	// succ:  l00002646
l00002646:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002664
	// succ:  l0000264C l00002664
l0000264C:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000265C
	// succ:  l00002654 l0000265C
l00002654:
	d0 = 1
	CVZN = cond(d0)
	v20 = d0
	Mem0[a2 + 28:word32] = v20
	CVZN = cond(v20)
	goto l00002664
	// succ:  l00002664
l0000265C:
	v22 = 0x00000400
	Mem0[a2 + 28:word32] = v22
	CVZN = cond(v22)
	// succ:  l00002664
l00002664:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000026A0
	// succ:  l0000266A l000026A0
l0000266A:
	a1 = a2 + 28
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000267E
	// succ:  l0000267A l0000267E
l0000267A:
	d4 = 2
	CVZN = cond(d4)
	goto l00002680
	// succ:  l00002680
l0000267E:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00002680
l00002680:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + Mem0[a1:word32]
	CVZNX = cond(d0)
	a7 = a7 - 4
	v31 = d0
	Mem0[a7:word32] = v31
	CVZN = cond(v31)
	call fn00002718 (retsize: 4;)
	a3 = d0
	a7 = a7 + 4
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00002698
	// succ:  l00002694 l00002698
l00002694:
	d0 = -1
	CVZN = cond(d0)
	goto l000026FA
	// succ:  l000026FA
l00002698:
	a1 = a3 + 1
	v35 = a1
	Mem0[a2 + 8:word32] = v35
	CVZN = cond(v35)
	// succ:  l000026A0
l000026A0:
	a0 = a2 + 4
	v23 = Mem0[a2 + 8:word32]
	Mem0[a0:word32] = v23
	CVZN = cond(v23)
	d3 = Mem0[a2 + 28:word32]
	CVZN = cond(d3)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003D98:word32]
	execPrivate2()
	a0 = a2 + 20
	v25 = d0
	Mem0[a0:word32] = v25
	CVZN = cond(v25)
	v26 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v26
	CVZNX = cond(v26)
	branch Test(GE,VN) l000026E6
	// succ:  l000026C4 l000026E6
l000026C4:
	d0 = -1
	CVZN = cond(d0)
	v29 = d0 - Mem0[a2 + 20:word32]
	CVZN = cond(v29)
	branch Test(NE,Z) l000026D6
	// succ:  l000026CC l000026D6
l000026CC:
	a0 = a2 + 24
	d0 = 8
	CVZN = cond(d0)
	v30 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	goto l000026DE
	// succ:  l000026DE
l000026D6:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v32 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	// succ:  l000026DE
l000026DE:
	Mem0[a2 + 20:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l000026FA
	// succ:  l000026FA
l000026E6:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a4 = a0
	a4 = a4 + 1
	v36 = a4
	Mem0[a1:word32] = v36
	CVZN = cond(v36)
	v37 = Mem0[a0:byte]
	d0 = DPB(d0, v37, 0)
	CVZN = cond(v37)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	// succ:  l000026FA
l000026FA:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002604_exit
fn00002604_exit:


// fn00002718
// Return size: 4
define fn00002718
fn00002718_entry:
	// succ:  l00002718
l00002718:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 8:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l00002726
	// succ:  l00002722 l00002726
l00002722:
	d0 = 0
	CVZN = cond(d0)
	goto l0000277C
	// succ:  l0000277C
l00002726:
	ZN = cond(Mem0[0x00003DC8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000274A
	// succ:  l0000272E l0000274A
l0000272E:
	a0 = Mem0[0x00003DC4:word32]
	a7 = a7 - 4
	v11 = a0
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	a7 = a7 - 4
	v12 = a0
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	a7 = a7 - 4
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	call fn00002A0C (retsize: 4;)
	v14 = d0
	Mem0[0x00003DC8:word32] = v14
	CVZN = cond(v14)
	a7 = a7 + 12
	// succ:  l0000274A
l0000274A:
	ZN = cond(Mem0[0x00003DC8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002756
	// succ:  l00002752 l00002756
l00002752:
	d0 = 0
	CVZN = cond(d0)
	goto l0000277C
	// succ:  l0000277C
l00002756:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 + d2
	CVZNX = cond(d0)
	a7 = a7 - 4
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	v17 = Mem0[0x00003DC8:word32]
	a7 = a7 - 4
	v18 = v17
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn000028E8 (retsize: 4;)
	a1 = d0
	a7 = a7 + 8
	d0 = a1
	CVZN = cond(d0)
	branch Test(NE,Z) l00002774
	// succ:  l00002770 l00002774
l00002770:
	d0 = 0
	CVZN = cond(d0)
	goto l0000277C
	// succ:  l0000277C
l00002774:
	v20 = d2
	Mem0[a1:word32] = v20
	CVZN = cond(v20)
	a0 = a1 + 4
	d0 = a0
	CVZN = cond(d0)
	// succ:  l0000277C
l0000277C:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002718_exit
fn00002718_exit:


// fn00002784
// Return size: 4
define fn00002784
fn00002784_entry:
	// succ:  l00002784
l00002784:
	a7 = fp
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	a0 = d0
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000027AE
	// succ:  l0000278E l000027AE
l0000278E:
	ZN = cond(Mem0[0x00003DC8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000027AE
	// succ:  l00002796 l000027AE
l00002796:
	d0 = 4
	CVZN = cond(d0)
	a0 = a0 - 4
	d0 = d0 + Mem0[a0:word32]
	CVZNX = cond(d0)
	a7 = a7 - 4
	v11 = d0
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	a7 = a7 - 4
	v12 = a0
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	v13 = Mem0[0x00003DC8:word32]
	a7 = a7 - 4
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn0000284C (retsize: 4;)
	a7 = a7 + 12
	// succ:  l000027AE
l000027AE:
	return
	// succ:  fn00002784_exit
fn00002784_exit:


// fn0000284C
// Return size: 4
define fn0000284C
fn0000284C_entry:
	// succ:  l0000284C
l0000284C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 32:word32]
	CVZN = cond(d1)
	a5 = Mem0[a7 + 36:word32]
	a4 = Mem0[a7 + 28:word32]
	a0 = Mem0[0x00003D94:word32]
	v12 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v12)
	branch Test(ULT,C) l0000287C
	// succ:  l0000286A l0000287C
l0000286A:
	a6 = Mem0[0x00003D94:word32]
	a0 = a4
	a1 = d1
	d0 = a5
	CVZN = cond(d0)
	FreePooled(a1, a0)
	goto l000028E0
	// succ:  l000028E0
l0000287C:
	d2 = a4
	CVZN = cond(d2)
	branch Test(EQ,Z) l000028E0
	// succ:  l00002880 l000028E0
l00002880:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000028E0
	// succ:  l00002884 l000028E0
l00002884:
	a3 = d1
	a3 = a3 + -12
	v19 = a5 - Mem0[a4 + 20:word32]
	CVZN = cond(v19)
	branch Test(UGE,C) l000028C6
	// succ:  l00002890 l000028C6
l00002890:
	a2 = a4
	// succ:  l00002892
l00002892:
	a2 = Mem0[a2:word32]
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000028E0
	// succ:  l00002898 l000028E0
l00002898:
	ZN = cond(Mem0[a2 + 8:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00002892
	// succ:  l0000289E l00002892
l0000289E:
	v20 = d1 - Mem0[a2 + 20:word32]
	CVZN = cond(v20)
	branch Test(ULT,C) l00002892
	// succ:  l000028A4 l00002892
l000028A4:
	v21 = d1 - Mem0[a2 + 24:word32]
	CVZN = cond(v21)
	branch Test(UGE,C) l00002892
	// succ:  l000028AA l00002892
l000028AA:
	a6 = Mem0[0x00003D94:word32]
	a0 = a2
	a1 = d1
	d0 = a5
	CVZN = cond(d0)
	Deallocate(a0, a1, d0)
	d0 = Mem0[a2 + 28:word32]
	CVZN = cond(d0)
	v22 = d0 - Mem0[a4 + 16:word32]
	CVZN = cond(v22)
	branch Test(NE,Z) l000028E0
	// succ:  l000028C4 l000028E0
l000028C4:
	a3 = a2
	// succ:  l000028C6
l000028C6:
	a6 = Mem0[0x00003D94:word32]
	a1 = a3
	Remove(a1)
	a3 = a3 - 4
	d0 = Mem0[a3:word32]
	CVZN = cond(d0)
	a6 = Mem0[0x00003D94:word32]
	a1 = a3
	FreeMem(a1, d0)
	// succ:  l000028E0
l000028E0:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn0000284C_exit
fn0000284C_exit:


// fn000028E8
// Return size: 4
define fn000028E8
fn000028E8_entry:
	// succ:  l000028E8
l000028E8:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 40:word32]
	CVZN = cond(d2)
	a4 = Mem0[a7 + 36:word32]
	a0 = Mem0[0x00003D94:word32]
	v13 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v13)
	branch Test(ULT,C) l00002914
	// succ:  l00002902 l00002914
l00002902:
	a6 = Mem0[0x00003D94:word32]
	a0 = a4
	d0 = d2
	CVZN = cond(d0)
	d0 = AllocPooled(d0, a0)
	goto l00002A06
	// succ:  l00002A06
l00002914:
	a3 = a3 - a3
	CVZNX = cond(a3)
	d4 = a4
	CVZN = cond(d4)
	branch Test(EQ,Z) l00002A04
	// succ:  l0000291C l00002A04
l0000291C:
	ZN = cond(d2 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002A04
	// succ:  l00002922 l00002A04
l00002922:
	v20 = d2 - Mem0[a4 + 20:word32]
	CVZN = cond(v20)
	branch Test(UGE,C) l000029D6
	// succ:  l0000292A l000029D6
l0000292A:
	a5 = Mem0[a4:word32]
	// succ:  l0000292C
l0000292C:
	ZN = cond(Mem0[a5:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000294E
	// succ:  l00002930 l0000294E
l00002930:
	ZN = cond(Mem0[a5 + 8:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000294A
	// succ:  l00002936 l0000294A
l00002936:
	a6 = Mem0[0x00003D94:word32]
	a0 = a5
	d0 = d2
	CVZN = cond(d0)
	d0 = Allocate(a0, d0)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l000029BA
	// succ:  l0000294A l000029BA
l0000294A:
	a5 = Mem0[a5:word32]
	goto l0000292C
	// succ:  l0000292C
l0000294E:
	d3 = 40
	CVZN = cond(d3)
	d3 = d3 + Mem0[a4 + 16:word32]
	CVZNX = cond(d3)
	d1 = Mem0[a4 + 12:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003D94:word32]
	d0 = d3
	CVZN = cond(d0)
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002A04
	// succ:  l0000296C l00002A04
l0000296C:
	v22 = d3
	Mem0[a3:word32] = v22
	a3 = a3 + 4
	CVZN = cond(v22)
	v23 = 0x0A
	Mem0[a3 + 8:byte] = v23
	CVZN = cond(v23)
	a2 = a3 + 36
	a0 = a3 + 16
	v24 = a2
	Mem0[a0:word32] = v24
	CVZN = cond(v24)
	v25 = a2
	Mem0[a3 + 20:word32] = v25
	CVZN = cond(v25)
	a1 = Mem0[a0:word32]
	Mem0[a1:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a2 = Mem0[a0:word32]
	a2 = a2 + 4
	v29 = Mem0[a4 + 16:word32]
	Mem0[a2:word32] = v29
	CVZN = cond(v29)
	a1 = a3 + 28
	v30 = Mem0[a2:word32]
	Mem0[a1:word32] = v30
	CVZN = cond(v30)
	a1 = Mem0[a1:word32]
	a1 = a1 + Mem0[a0:word32]
	v31 = a1
	Mem0[a3 + 24:word32] = v31
	CVZN = cond(v31)
	a6 = Mem0[0x00003D94:word32]
	a0 = a4
	a1 = a3
	AddHead(a0, a1)
	a6 = Mem0[0x00003D94:word32]
	a0 = a3
	d0 = d2
	CVZN = cond(d0)
	d0 = Allocate(a0, d0)
	a3 = d0
	// succ:  l000029BA
l000029BA:
	d0 = 0x00010000
	CVZN = cond(d0)
	d0 = d0 & Mem0[a4 + 12:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002A04
	// succ:  l000029C6 l00002A04
l000029C6:
	a2 = a3
	d2 = d2 + 0x00000007
	CVZNX = cond(d2)
	d2 = d2 >>u 0x00000003
	CVZNX = cond(d2)
	// succ:  l000029CC
l000029CC:
	Mem0[a2:word32] = 0x00000000
	a2 = a2 + 4
	Z = true
	C = false
	N = false
	V = false
	Mem0[a2:word32] = 0x00000000
	a2 = a2 + 4
	Z = true
	C = false
	N = false
	V = false
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(NE,Z) l000029CC
	// succ:  l000029D4 l000029CC
l000029D4:
	goto l00002A04
	// succ:  l00002A04
l000029D6:
	d3 = 16
	CVZN = cond(d3)
	d3 = d3 + d2
	CVZNX = cond(d3)
	d1 = Mem0[a4 + 12:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003D94:word32]
	d0 = d3
	CVZN = cond(d0)
	d0 = AllocMem(d0, d1)
	a3 = d0
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002A04
	// succ:  l000029F0 l00002A04
l000029F0:
	v32 = d3
	Mem0[a3:word32] = v32
	a3 = a3 + 4
	CVZN = cond(v32)
	a6 = Mem0[0x00003D94:word32]
	a0 = a4
	a1 = a3
	AddTail(a0, a1)
	a3 = a3 + 8
	Mem0[a3:word32] = 0x00000000
	a3 = a3 + 4
	Z = true
	C = false
	N = false
	V = false
	// succ:  l00002A04
l00002A04:
	d0 = a3
	CVZN = cond(d0)
	// succ:  l00002A06
l00002A06:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn000028E8_exit
fn000028E8_exit:


// fn00002A0C
// Return size: 4
define fn00002A0C
fn00002A0C_entry:
	// succ:  l00002A0C
l00002A0C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d3 = Mem0[a7 + 24:word32]
	CVZN = cond(d3)
	a2 = Mem0[a7 + 28:word32]
	a0 = Mem0[0x00003D94:word32]
	v9 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v9)
	branch Test(ULT,C) l00002A3A
	// succ:  l00002A26 l00002A3A
l00002A26:
	a6 = Mem0[0x00003D94:word32]
	d0 = Mem0[a7 + 20:word32]
	CVZN = cond(d0)
	d1 = d3
	CVZN = cond(d1)
	d2 = a2
	CVZN = cond(d2)
	d0 = CreatePrivatePool(d0, d1, d2)
	goto l00002A76
	// succ:  l00002A76
l00002A3A:
	a1 = a1 - a1
	CVZNX = cond(a1)
	v15 = d3 - a2
	CVZN = cond(v15)
	branch Test(ULT,C) l00002A74
	// succ:  l00002A40 l00002A74
l00002A40:
	d3 = d3 + 0x00000007
	CVZNX = cond(d3)
	a6 = Mem0[0x00003D94:word32]
	d0 = 24
	CVZN = cond(d0)
	d1 = 0
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	a1 = d0
	d0 = a1
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002A74
	// succ:  l00002A56 l00002A74
l00002A56:
	a0 = a1 + 4
	v17 = a0
	Mem0[a1:word32] = v17
	CVZN = cond(v17)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v21 = a1
	Mem0[a1 + 8:word32] = v21
	CVZN = cond(v21)
	v22 = Mem0[a7 + 20:word32]
	Mem0[a1 + 12:word32] = v22
	CVZN = cond(v22)
	d0 = -8
	CVZN = cond(d0)
	d0 = d0 & d3
	ZN = cond(d0)
	C = false
	V = false
	v24 = d0
	Mem0[a1 + 16:word32] = v24
	CVZN = cond(v24)
	v25 = a2
	Mem0[a1 + 20:word32] = v25
	CVZN = cond(v25)
	// succ:  l00002A74
l00002A74:
	d0 = a1
	CVZN = cond(d0)
	// succ:  l00002A76
l00002A76:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002A0C_exit
fn00002A0C_exit:


// fn00002A7C
// Return size: 4
define fn00002A7C
fn00002A7C_entry:
	// succ:  l00002A7C
l00002A7C:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 16:word32]
	CVZN = cond(d2)
	a0 = Mem0[0x00003D94:word32]
	v8 = Mem0[a0 + 20:word16] - 0x0027
	CVZN = cond(v8)
	branch Test(ULT,C) l00002AA0
	// succ:  l00002A92 l00002AA0
l00002A92:
	a6 = Mem0[0x00003D94:word32]
	a0 = d2
	DeletePrivatePool(a0)
	goto l00002AE4
	// succ:  l00002AE4
l00002AA0:
	ZN = cond(d2 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002AE4
	// succ:  l00002AA4 l00002AE4
l00002AA4:
	a6 = Mem0[0x00003D94:word32]
	a0 = d2
	RemHead(a0)
	a2 = d0
	d1 = a2
	CVZN = cond(d1)
	branch Test(EQ,Z) l00002AD6
	// succ:  l00002AB6 l00002AD6
l00002AB6:
	a2 = a2 - 4
	d0 = Mem0[a2:word32]
	CVZN = cond(d0)
	a6 = Mem0[0x00003D94:word32]
	a1 = a2
	FreeMem(a1, d0)
	a6 = Mem0[0x00003D94:word32]
	a0 = d2
	RemHead(a0)
	a2 = d0
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00002AB6
	// succ:  l00002AD6 l00002AB6
l00002AD6:
	a6 = Mem0[0x00003D94:word32]
	a1 = d2
	d0 = 24
	CVZN = cond(d0)
	FreeMem(a1, d0)
	// succ:  l00002AE4
l00002AE4:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002A7C_exit
fn00002A7C_exit:


// fn00002AEC
// Return size: 4
define fn00002AEC
fn00002AEC_entry:
	// succ:  l00002AEC
l00002AEC:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a2 = Mem0[0x00003EEC:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002B24
	// succ:  l00002AFA l00002B24
l00002AFA:
	d0 = 0x00000202
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	v10 = d0 - 0x00000202
	CVZN = cond(v10)
	branch Test(NE,Z) l00002B1A
	// succ:  l00002B0C l00002B1A
l00002B0C:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002B1A
	// succ:  l00002B10 l00002B1A
l00002B10:
	a7 = a7 - 4
	v11 = a2
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn00002B28 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l00002B1A
l00002B1A:
	a0 = a2 + 12
	a2 = Mem0[a0:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00002AFA
	// succ:  l00002B24 l00002AFA
l00002B24:
	v12 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v12
	return
	// succ:  fn00002AEC_exit
fn00002AEC_exit:


// fn00002B28
// Return size: 4
define fn00002B28
fn00002B28_entry:
	// succ:  l00002B28
l00002B28:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a2 = Mem0[a7 + 24:word32]
	call fn00002BBC (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00002B3E
	// succ:  l00002B3A l00002B3E
l00002B3A:
	d0 = -1
	CVZN = cond(d0)
	goto l00002BB6
	// succ:  l00002BB6
l00002B3E:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002B5C
	// succ:  l00002B44 l00002B5C
l00002B44:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002B54
	// succ:  l00002B4C l00002B54
l00002B4C:
	d0 = 1
	CVZN = cond(d0)
	v14 = d0
	Mem0[a2 + 28:word32] = v14
	CVZN = cond(v14)
	goto l00002B5C
	// succ:  l00002B5C
l00002B54:
	v15 = 0x00000400
	Mem0[a2 + 28:word32] = v15
	CVZN = cond(v15)
	// succ:  l00002B5C
l00002B5C:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002B66
	// succ:  l00002B62 l00002B66
l00002B62:
	d0 = 0
	CVZN = cond(d0)
	goto l00002BB6
	// succ:  l00002BB6
l00002B66:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002BAC
	// succ:  l00002B6E l00002BAC
l00002B6E:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002B9C
	// succ:  l00002B72 l00002B9C
l00002B72:
	a0 = a2 + 8
	d4 = Mem0[a2 + 4:word32]
	CVZN = cond(d4)
	d4 = d4 - Mem0[a0:word32]
	CVZNX = cond(d4)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003D98:word32]
	d3 = d4
	CVZN = cond(d3)
	execPrivate3()
	v19 = d4 - d0
	CVZN = cond(v19)
	branch Test(EQ,Z) l00002BA0
	// succ:  l00002B90 l00002BA0
l00002B90:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v20 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v20
	ZN = cond(v20)
	C = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l00002BB6
	// succ:  l00002BB6
l00002B9C:
	d0 = 0
	CVZN = cond(d0)
	goto l00002BB6
	// succ:  l00002BB6
l00002BA0:
	v22 = Mem0[a2 + 8:word32]
	Mem0[a2 + 4:word32] = v22
	CVZN = cond(v22)
	v23 = Mem0[a2 + 28:word32]
	Mem0[a2 + 20:word32] = v23
	CVZN = cond(v23)
	// succ:  l00002BAC
l00002BAC:
	a0 = a2 + 24
	d0 = -4
	CVZN = cond(d0)
	v21 = Mem0[a0:word32] & d0
	Mem0[a0:word32] = v21
	ZN = cond(v21)
	C = false
	V = false
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00002BB6
l00002BB6:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00002B28_exit
fn00002B28_exit:


// fn00002BBC
// Return size: 4
define fn00002BBC
fn00002BBC_entry:
	// succ:  l00002BBC
l00002BBC:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a6 = Mem0[0x00003D94:word32]
	d0 = 0
	CVZN = cond(d0)
	d1 = 0x00001000
	CVZN = cond(d1)
	SetSignal(d0, d1)
	d0 = d0 & 0x00001000
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002BE6
	// succ:  l00002BDA l00002BE6
l00002BDA:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000014
	call fn0000131C (retsize: 4;)
	a7 = a7 + 4
	// succ:  l00002BE6
l00002BE6:
	v11 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = v11
	return
	// succ:  fn00002BBC_exit
fn00002BBC_exit:


// fn00002ED4
// Return size: 4
define fn00002ED4
fn00002ED4_entry:
	// succ:  l00002ED4
l00002ED4:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a2 = Mem0[a7 + 8:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002EEC
	// succ:  l00002EE0 l00002EEC
l00002EE0:
	a7 = a7 - 4
	v7 = a2
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	call fn00002B28 (retsize: 4;)
	a7 = a7 + 4
	goto l00002F12
	// succ:  l00002F12
l00002EEC:
	a2 = Mem0[0x00003EEC:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002F12
	// succ:  l00002EF6 l00002F12
l00002EF6:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00002F08
	// succ:  l00002EFE l00002F08
l00002EFE:
	a7 = a7 - 4
	v11 = a2
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn00002B28 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l00002F08
l00002F08:
	a0 = a2 + 12
	a2 = Mem0[a0:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00002EF6
	// succ:  l00002F12 l00002EF6
l00002F12:
	d0 = 0
	CVZN = cond(d0)
	v12 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v12
	return
	// succ:  fn00002ED4_exit
fn00002ED4_exit:


// fn00002F18
// Return size: 4
define fn00002F18
fn00002F18_entry:
	// succ:  l00002F18
l00002F18:
	a7 = fp
	a0 = a7 + 8
	a7 = a7 - 4
	v4 = a0
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	v6 = Mem0[a7 + 8:word32]
	a7 = a7 - 4
	v7 = v6
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	v8 = Mem0[0x00003EF8:word32]
	a7 = a7 - 4
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn00002F34 (retsize: 4;)
	a7 = a7 + 12
	return
	// succ:  fn00002F18_exit
fn00002F18_exit:


// fn00002F34
// Return size: 4
define fn00002F34
fn00002F34_entry:
	// succ:  l00002F34
l00002F34:
	a7 = fp
	a7 = a7 + -68
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a5
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d3 = Mem0[a7 + 124:word32]
	CVZN = cond(d3)
	a5 = Mem0[a7 + 116:word32]
	a4 = Mem0[a7 + 120:word32]
	d6 = 0
	CVZN = cond(d6)
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l0000387A
	// succ:  l00002F50 l0000387A
l00002F50:
	v19 = Mem0[a4:byte] - 0x25
	CVZN = cond(v19)
	branch Test(NE,Z) l00003854
	// succ:  l00002F58 l00003854
l00002F58:
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d5 = -1
	CVZN = cond(d5)
	Mem0[a7 + 72:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d4 = 105
	CVZN = cond(d4)
	a3 = a7 + 76
	d7 = 0
	CVZN = cond(d7)
	Mem0[a7 + 102:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a2 = a4 + 1
	d2 = Mem0[a7 + 72:word32]
	CVZN = cond(d2)
	// succ:  l00002F76
l00002F76:
	d1 = 0
	CVZN = cond(d1)
	// succ:  l00002F78
l00002F78:
	a0 = 0x0000388C
	a7 = a7 - 4
	v27 = d0
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	v28 = Mem0[a0 + d1:byte]
	d0 = DPB(d0, v28, 0)
	CVZN = cond(v28)
	v29 = (byte) d0 - Mem0[a2:byte]
	CVZN = cond(v29)
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(NE,Z) l00002F9C
	// succ:  l00002F8A l00002F9C
l00002F8A:
	d0 = d1
	CVZN = cond(d0)
	a7 = a7 - 4
	v30 = d1
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	d1 = 1
	CVZN = cond(d1)
	d1 = d1 << d0
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	v32 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v32
	CVZN = cond(d1)
	d2 = d2 | d0
	ZN = cond(d2)
	C = false
	V = false
	a2 = a2 + 1
	goto l00002FA6
	// succ:  l00002FA6
l00002F9C:
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v40 = d1 - 0x00000005
	CVZN = cond(v40)
	branch Test(ULT,C) l00002F78
	// succ:  l00002FA6 l00002F78
l00002FA6:
	v33 = d1 - 0x00000005
	CVZN = cond(v33)
	branch Test(ULT,C) l00002F76
	// succ:  l00002FAE l00002F76
l00002FAE:
	v34 = d2
	Mem0[a7 + 72:word32] = v34
	CVZN = cond(v34)
	v35 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v35)
	branch Test(NE,Z) l00002FEC
	// succ:  l00002FB8 l00002FEC
l00002FB8:
	a2 = a2 + 1
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v36 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v36
	CVZN = cond(v36)
	branch Test(GE,VN) l00002FE4
	// succ:  l00002FD0 l00002FE4
l00002FD0:
	v38 = Mem0[a7 + 72:word32] | 0x00000004
	Mem0[a7 + 72:word32] = v38
	ZN = cond(v38)
	C = false
	V = false
	d0 = Mem0[a7 + 44:word32]
	CVZN = cond(d0)
	d0 = -d0
	CVZNX = cond(d0)
	v39 = d0
	Mem0[a7 + 64:word32] = v39
	CVZN = cond(v39)
	goto l00003058
	// succ:  l00003058
l00002FE4:
	v41 = Mem0[a7 + 44:word32]
	Mem0[a7 + 64:word32] = v41
	CVZN = cond(v41)
	goto l00003058
	// succ:  l00003058
l00002FEC:
	v63 = Mem0[a2:byte]
	d0 = DPB(d0, v63, 0)
	CVZN = cond(v63)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v64 = Mem0[a0:byte]
	d0 = DPB(d0, v64, 0)
	CVZN = cond(v64)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003058
	// succ:  l00003008 l00003058
l00003008:
	d2 = Mem0[a7 + 64:word32]
	CVZN = cond(d2)
	// succ:  l0000300C
l0000300C:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 4
	v65 = d3
	Mem0[a7:word32] = v65
	CVZN = cond(v65)
	d1 = d0
	CVZN = cond(d1)
	d3 = d2
	CVZN = cond(d3)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d1 = d1 *u (word16) d2
	VZN = cond(d1)
	C = false
	d3 = d3 *u (word16) d0
	VZN = cond(d3)
	C = false
	d0 = d0 *u (word16) d2
	VZN = cond(d0)
	C = false
	v66 = (word16) d1 + (word16) d3
	d1 = DPB(d1, v66, 0)
	CVZNX = cond(v66)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v68 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v68
	CVZN = cond(d3)
	v69 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v69, 0)
	CVZN = cond(v69)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 + d0
	CVZNX = cond(d2)
	v70 = Mem0[a2:byte]
	d0 = DPB(d0, v70, 0)
	CVZN = cond(v70)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v71 = Mem0[a0:byte]
	d0 = DPB(d0, v71, 0)
	CVZN = cond(v71)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l0000300C
	// succ:  l00003054 l0000300C
l00003054:
	v72 = d2
	Mem0[a7 + 64:word32] = v72
	CVZN = cond(v72)
	// succ:  l00003058
l00003058:
	v42 = Mem0[a2:byte] - 0x2E
	CVZN = cond(v42)
	branch Test(NE,Z) l000030EC
	// succ:  l00003060 l000030EC
l00003060:
	a2 = a2 + 1
	v43 = Mem0[a2:byte] - 0x2A
	CVZN = cond(v43)
	branch Test(NE,Z) l00003086
	// succ:  l00003068 l00003086
l00003068:
	a2 = a2 + 1
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v44 = Mem0[a0 + -4:word32]
	Mem0[a7 + 44:word32] = v44
	CVZN = cond(v44)
	branch Test(LT,CZ) l000030EC
	// succ:  l00003080 l000030EC
l00003080:
	d5 = Mem0[a7 + 44:word32]
	CVZN = cond(d5)
	goto l000030EC
	// succ:  l000030EC
l00003086:
	d5 = 0
	CVZN = cond(d5)
	v46 = Mem0[a2:byte]
	d0 = DPB(d0, v46, 0)
	CVZN = cond(v46)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v47 = Mem0[a0:byte]
	d0 = DPB(d0, v47, 0)
	CVZN = cond(v47)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000030EC
	// succ:  l000030A4 l000030EC
l000030A4:
	d0 = 10
	CVZN = cond(d0)
	a7 = a7 - 4
	v48 = d2
	Mem0[a7:word32] = v48
	CVZN = cond(v48)
	d1 = d0
	CVZN = cond(d1)
	d2 = d5
	CVZN = cond(d2)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d1 = d1 *u (word16) d5
	VZN = cond(d1)
	C = false
	d2 = d2 *u (word16) d0
	VZN = cond(d2)
	C = false
	d0 = d0 *u (word16) d5
	VZN = cond(d0)
	C = false
	v50 = (word16) d1 + (word16) d2
	d1 = DPB(d1, v50, 0)
	CVZNX = cond(v50)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 + d1
	CVZNX = cond(d0)
	v52 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = v52
	CVZN = cond(d2)
	v53 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v53, 0)
	CVZN = cond(v53)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	d1 = d1 - 0x00000030
	CVZNX = cond(d1)
	d5 = d1
	CVZN = cond(d5)
	d5 = d5 + d0
	CVZNX = cond(d5)
	v54 = Mem0[a2:byte]
	d0 = DPB(d0, v54, 0)
	CVZN = cond(v54)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	a0 = 0x00002BED
	a0 = a0 + d0
	d0 = 0
	CVZN = cond(d0)
	v55 = Mem0[a0:byte]
	d0 = DPB(d0, v55, 0)
	CVZN = cond(v55)
	d0 = d0 & 0x00000004
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l000030A4
	// succ:  l000030EC l000030A4
l000030EC:
	v56 = Mem0[a2:byte] - 0x68
	CVZN = cond(v56)
	branch Test(EQ,Z) l00003110
	// succ:  l000030F2 l00003110
l000030F2:
	v57 = Mem0[a2:byte] - 0x6C
	CVZN = cond(v57)
	branch Test(EQ,Z) l00003110
	// succ:  l000030F8 l00003110
l000030F8:
	v58 = Mem0[a2:byte] - 0x4C
	CVZN = cond(v58)
	branch Test(EQ,Z) l00003110
	// succ:  l000030FE l00003110
l000030FE:
	v59 = Mem0[a2:byte] - 0x6A
	CVZN = cond(v59)
	branch Test(EQ,Z) l00003110
	// succ:  l00003104 l00003110
l00003104:
	v60 = Mem0[a2:byte] - 0x7A
	CVZN = cond(v60)
	branch Test(EQ,Z) l00003110
	// succ:  l0000310A l00003110
l0000310A:
	v61 = Mem0[a2:byte] - 0x74
	CVZN = cond(v61)
	branch Test(NE,Z) l00003116
	// succ:  l00003110 l00003116
l00003110:
	v62 = Mem0[a2:byte]
	a2 = a2 + 1
	d4 = DPB(d4, v62, 0)
	CVZN = cond(v62)
	d4 = (int16) (int8) d4
	ZN = cond(d4)
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	// succ:  l00003116
l00003116:
	v73 = d4 - 0x00000068
	CVZN = cond(v73)
	branch Test(NE,Z) l00003128
	// succ:  l0000311E l00003128
l0000311E:
	v74 = Mem0[a2:byte] - 0x68
	CVZN = cond(v74)
	branch Test(NE,Z) l00003128
	// succ:  l00003124 l00003128
l00003124:
	d4 = 2
	CVZN = cond(d4)
	a2 = a2 + 1
	// succ:  l00003128
l00003128:
	v75 = d4 - 0x0000006C
	CVZN = cond(v75)
	branch Test(NE,Z) l0000313A
	// succ:  l00003130 l0000313A
l00003130:
	v76 = Mem0[a2:byte] - 0x6C
	CVZN = cond(v76)
	branch Test(NE,Z) l0000313A
	// succ:  l00003136 l0000313A
l00003136:
	d4 = 1
	CVZN = cond(d4)
	a2 = a2 + 1
	// succ:  l0000313A
l0000313A:
	v77 = d4 - 0x0000006A
	CVZN = cond(v77)
	branch Test(NE,Z) l00003144
	// succ:  l00003142 l00003144
l00003142:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00003144
l00003144:
	v78 = d4 - 0x0000007A
	CVZN = cond(v78)
	branch Test(NE,Z) l0000314E
	// succ:  l0000314C l0000314E
l0000314C:
	d4 = 108
	CVZN = cond(d4)
	// succ:  l0000314E
l0000314E:
	v83 = d4 - 0x00000074
	CVZN = cond(v83)
	branch Test(NE,Z) l00003158
	// succ:  l00003156 l00003158
l00003156:
	d4 = 105
	CVZN = cond(d4)
	// succ:  l00003158
l00003158:
	v84 = Mem0[a2:byte]
	a2 = a2 + 1
	d1 = DPB(d1, v84, 0)
	CVZN = cond(v84)
	v85 = (byte) d1
	d0 = DPB(d0, v85, 0)
	CVZN = cond(v85)
	v86 = (byte) d1 - 0x25
	CVZN = cond(v86)
	branch Test(EQ,Z) l000035E0
	// succ:  l00003164 l000035E0
l00003164:
	v87 = (byte) d0 - 0x58
	CVZN = cond(v87)
	branch Test(EQ,Z) l000031B2
	// succ:  l0000316A l000031B2
l0000316A:
	v88 = (byte) d0 - 0x63
	CVZN = cond(v88)
	branch Test(EQ,Z) l00003560
	// succ:  l00003172 l00003560
l00003172:
	v89 = (byte) d0 - 0x64
	CVZN = cond(v89)
	branch Test(EQ,Z) l000031B2
	// succ:  l00003178 l000031B2
l00003178:
	v90 = (byte) d0 - 0x69
	CVZN = cond(v90)
	branch Test(EQ,Z) l000031B2
	// succ:  l0000317E l000031B2
l0000317E:
	v91 = (byte) d0
	Mem0[a7 + 44:byte] = v91
	CVZN = cond(v91)
	v92 = (byte) d0 - 0x6E
	CVZN = cond(v92)
	branch Test(EQ,Z) l000035F2
	// succ:  l0000318A l000035F2
l0000318A:
	v93 = Mem0[a7 + 44:byte]
	d0 = DPB(d0, v93, 0)
	CVZN = cond(v93)
	v94 = (byte) d0 - 0x6F
	d0 = DPB(d0, v94, 0)
	CVZNX = cond(v94)
	v95 = (byte) d0 - 0x01
	CVZN = cond(v95)
	branch Test(ULE,VZ) l000031B2
	// succ:  l00003198 l000031B2
l00003198:
	v97 = Mem0[a7 + 44:byte]
	d0 = DPB(d0, v97, 0)
	CVZN = cond(v97)
	v98 = (byte) d0 - 0x73
	CVZN = cond(v98)
	branch Test(EQ,Z) l0000359C
	// succ:  l000031A4 l0000359C
l000031A4:
	v99 = (byte) d0 - 0x75
	CVZN = cond(v99)
	branch Test(EQ,Z) l000031B2
	// succ:  l000031AA l000031B2
l000031AA:
	v100 = (byte) d0 - 0x78
	CVZN = cond(v100)
	branch Test(NE,Z) l0000368A
	// succ:  l000031B2 l0000368A
l000031B2:
	v101 = (byte) d1 - 0x70
	CVZN = cond(v101)
	branch Test(NE,Z) l000031C4
	// succ:  l000031B8 l000031C4
l000031B8:
	d4 = 108
	CVZN = cond(d4)
	d1 = 120
	CVZN = cond(d1)
	v102 = Mem0[a7 + 72:word32] | 0x00000001
	Mem0[a7 + 72:word32] = v102
	ZN = cond(v102)
	C = false
	V = false
	// succ:  l000031C4
l000031C4:
	v103 = (byte) d1 - 0x64
	CVZN = cond(v103)
	branch Test(EQ,Z) l000031D2
	// succ:  l000031CA l000031D2
l000031CA:
	v104 = (byte) d1 - 0x69
	CVZN = cond(v104)
	branch Test(NE,Z) l0000331C
	// succ:  l000031D2 l0000331C
l000031D2:
	v105 = d4 - 0x00000001
	CVZN = cond(v105)
	branch Test(NE,Z) l000031F8
	// succ:  l000031DA l000031F8
l000031DA:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000008
	CVZNX = cond(d3)
	a0 = d3
	v106 = Mem0[a0 + -4:word32]
	Mem0[a7 + 52:word32] = v106
	CVZN = cond(v106)
	v107 = Mem0[a0 + -8:word32]
	Mem0[a7 + 48:word32] = v107
	CVZN = cond(v107)
	goto l00003290
	// succ:  l00003290
l000031F8:
	v113 = d4 - 0x0000006C
	CVZN = cond(v113)
	branch Test(NE,Z) l00003224
	// succ:  l00003200 l00003224
l00003200:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	d0 = Mem0[a0 + -4:word32]
	CVZN = cond(d0)
	v114 = d0
	Mem0[a7 + 52:word32] = v114
	CVZN = cond(v114)
	a7 = a7 - 4
	v115 = d1
	Mem0[a7:word32] = v115
	CVZN = cond(v115)
	d1 = 31
	CVZN = cond(d1)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v116 = d0
	Mem0[a7 + 52:word32] = v116
	CVZN = cond(v116)
	v117 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v117
	CVZN = cond(d1)
	goto l00003290
	// succ:  l00003290
l00003224:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	d0 = Mem0[a0 + -4:word32]
	CVZN = cond(d0)
	v204 = d0
	Mem0[a7 + 52:word32] = v204
	CVZN = cond(v204)
	a7 = a7 - 4
	v205 = d1
	Mem0[a7:word32] = v205
	CVZN = cond(v205)
	d1 = 31
	CVZN = cond(d1)
	d0 = d0 >> d1
	CVZNX = cond(d0)
	v206 = d0
	Mem0[a7 + 52:word32] = v206
	CVZN = cond(v206)
	v207 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v207
	CVZN = cond(d1)
	v208 = d4 - 0x00000068
	CVZN = cond(v208)
	branch Test(NE,Z) l0000326A
	// succ:  l0000324E l0000326A
l0000324E:
	v209 = Mem0[a7 + 54:word16]
	d0 = DPB(d0, v209, 0)
	CVZN = cond(v209)
	a7 = a7 - 4
	v210 = d1
	Mem0[a7:word32] = v210
	CVZN = cond(v210)
	v211 = (word16) d0
	d1 = DPB(d1, v211, 0)
	CVZN = cond(v211)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	v212 = d1
	Mem0[a7 + 56:word32] = v212
	CVZN = cond(v212)
	a7 = a7 - 4
	v213 = d0
	Mem0[a7:word32] = v213
	CVZN = cond(v213)
	d0 = 31
	CVZN = cond(d0)
	d1 = d1 >> d0
	CVZNX = cond(d1)
	v214 = d1
	Mem0[a7 + 56:word32] = v214
	CVZN = cond(v214)
	v215 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v215
	CVZN = cond(d1)
	v216 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v216
	CVZN = cond(d0)
	// succ:  l0000326A
l0000326A:
	v217 = d4 - 0x00000002
	CVZN = cond(v217)
	branch Test(NE,Z) l00003290
	// succ:  l00003272 l00003290
l00003272:
	v218 = Mem0[a7 + 55:byte]
	d0 = DPB(d0, v218, 0)
	CVZN = cond(v218)
	a7 = a7 - 4
	v219 = d1
	Mem0[a7:word32] = v219
	CVZN = cond(v219)
	v220 = (byte) d0
	d1 = DPB(d1, v220, 0)
	CVZN = cond(v220)
	d1 = (int16) (int8) d1
	ZN = cond(d1)
	d1 = (int32) (int16) d1
	ZN = cond(d1)
	v221 = d1
	Mem0[a7 + 56:word32] = v221
	CVZN = cond(v221)
	a7 = a7 - 4
	v222 = d0
	Mem0[a7:word32] = v222
	CVZN = cond(v222)
	d0 = 31
	CVZN = cond(d0)
	d1 = d1 >> d0
	CVZNX = cond(d1)
	v223 = d1
	Mem0[a7 + 56:word32] = v223
	CVZN = cond(v223)
	v224 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v224
	CVZN = cond(d1)
	v225 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v225
	CVZN = cond(d0)
	// succ:  l00003290
l00003290:
	v118 = (byte) d1
	Mem0[a7 + 44:byte] = v118
	CVZN = cond(v118)
	a7 = a7 - 4
	v119 = d0
	Mem0[a7:word32] = v119
	CVZN = cond(v119)
	a7 = a7 - 4
	v120 = d1
	Mem0[a7:word32] = v120
	CVZN = cond(v120)
	d0 = Mem0[a7 + 60:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 56:word32]
	CVZN = cond(d1)
	a7 = a7 - 4
	v121 = d2
	Mem0[a7:word32] = v121
	CVZN = cond(v121)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(GE,VN) l000032DA
	// succ:  l000032BA l000032DA
l000032BA:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v123 = 0x2D
	Mem0[a0:byte] = v123
	CVZN = cond(v123)
	v124 = a7 + 48
	d0 = Mem0[v124:word32]
	v124 = v124 + 4
	d1 = Mem0[v124:word32]
	v124 = v124 + 4
	d1 = -d1
	CVZNX = cond(d1)
	d0 = -d0 - X
	CVZNX = cond(d0)
	v125 = a7 + 56
	a6 = Mem0[v125:word32]
	v125 = v125 + 0x00000004
	a7 = Mem0[v125:word32]
	v125 = v125 + 0x00000004
	goto l00003450
	// succ:  l00003450
l000032DA:
	v141 = Mem0[a7 + 44:byte]
	d1 = DPB(d1, v141, 0)
	CVZN = cond(v141)
	d0 = 16
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000032F4
	// succ:  l000032E6 l000032F4
l000032E6:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v142 = 0x2B
	Mem0[a0:byte] = v142
	CVZN = cond(v142)
	goto l00003308
	// succ:  l00003308
l000032F4:
	d0 = 8
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003308
	// succ:  l000032FC l00003308
l000032FC:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v202 = 0x20
	Mem0[a0:byte] = v202
	CVZN = cond(v202)
	// succ:  l00003308
l00003308:
	v155 = Mem0[a7 + 52:word32]
	Mem0[a7 + 60:word32] = v155
	CVZN = cond(v155)
	v156 = Mem0[a7 + 48:word32]
	Mem0[a7 + 56:word32] = v156
	CVZN = cond(v156)
	v157 = (byte) d1
	Mem0[a7 + 44:byte] = v157
	CVZN = cond(v157)
	goto l00003450
	// succ:  l00003450
l0000331C:
	v226 = d4 - 0x00000001
	CVZN = cond(v226)
	branch Test(NE,Z) l00003340
	// succ:  l00003324 l00003340
l00003324:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000008
	CVZNX = cond(d3)
	a0 = d3
	v227 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v227
	CVZN = cond(v227)
	v228 = Mem0[a0 + -8:word32]
	Mem0[a7 + 56:word32] = v228
	CVZN = cond(v228)
	goto l0000337A
	// succ:  l0000337A
l00003340:
	v236 = d4 - 0x0000006C
	CVZN = cond(v236)
	branch Test(NE,Z) l00003362
	// succ:  l00003348 l00003362
l00003348:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v237 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v237
	CVZN = cond(v237)
	Mem0[a7 + 56:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l0000337A
	// succ:  l0000337A
l00003362:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v258 = Mem0[a0 + -4:word32]
	Mem0[a7 + 60:word32] = v258
	CVZN = cond(v258)
	Mem0[a7 + 56:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l0000337A
l0000337A:
	v229 = d4 - 0x00000068
	CVZN = cond(v229)
	branch Test(NE,Z) l00003396
	// succ:  l00003382 l00003396
l00003382:
	v230 = Mem0[a7 + 62:word16]
	d0 = DPB(d0, v230, 0)
	CVZN = cond(v230)
	a7 = a7 - 4
	v231 = d1
	Mem0[a7:word32] = v231
	CVZN = cond(v231)
	d1 = 0
	CVZN = cond(d1)
	v232 = (word16) d0
	d1 = DPB(d1, v232, 0)
	CVZN = cond(v232)
	v233 = d1
	Mem0[a7 + 64:word32] = v233
	CVZN = cond(v233)
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v235 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v235
	CVZN = cond(d1)
	// succ:  l00003396
l00003396:
	v242 = d4 - 0x00000002
	CVZN = cond(v242)
	branch Test(NE,Z) l000033B2
	// succ:  l0000339E l000033B2
l0000339E:
	v243 = Mem0[a7 + 63:byte]
	d0 = DPB(d0, v243, 0)
	CVZN = cond(v243)
	a7 = a7 - 4
	v244 = d1
	Mem0[a7:word32] = v244
	CVZN = cond(v244)
	d1 = 0
	CVZN = cond(d1)
	v245 = (byte) d0
	d1 = DPB(d1, v245, 0)
	CVZN = cond(v245)
	v246 = d1
	Mem0[a7 + 64:word32] = v246
	CVZN = cond(v246)
	Mem0[a7 + 60:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	v248 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = v248
	CVZN = cond(d1)
	// succ:  l000033B2
l000033B2:
	d0 = 1
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	v252 = (byte) d1
	Mem0[a7 + 44:byte] = v252
	CVZN = cond(v252)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003450
	// succ:  l000033C2 l00003450
l000033C2:
	v253 = (byte) d1 - 0x6F
	CVZN = cond(v253)
	branch Test(NE,Z) l000033FE
	// succ:  l000033C8 l000033FE
l000033C8:
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000033F2
	// succ:  l000033CC l000033F2
l000033CC:
	a7 = a7 - 4
	v254 = d0
	Mem0[a7:word32] = v254
	CVZN = cond(v254)
	a7 = a7 - 4
	v255 = d1
	Mem0[a7:word32] = v255
	CVZN = cond(v255)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 64:word32]
	CVZN = cond(d1)
	a7 = a7 - 4
	v256 = d2
	Mem0[a7:word32] = v256
	CVZN = cond(v256)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(EQ,Z) l000033FE
	// succ:  l000033F2 l000033FE
l000033F2:
	a0 = a7 + 106
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v257 = 0x30
	Mem0[a0:byte] = v257
	CVZN = cond(v257)
	// succ:  l000033FE
l000033FE:
	v262 = (byte) d1 - 0x78
	CVZN = cond(v262)
	branch Test(EQ,Z) l0000340E
	// succ:  l00003404 l0000340E
l00003404:
	v263 = (byte) d1
	Mem0[a7 + 44:byte] = v263
	CVZN = cond(v263)
	v264 = (byte) d1 - 0x58
	CVZN = cond(v264)
	branch Test(NE,Z) l00003450
	// succ:  l0000340E l00003450
l0000340E:
	v265 = (byte) d1
	Mem0[a7 + 44:byte] = v265
	CVZN = cond(v265)
	a7 = a7 - 4
	v266 = d0
	Mem0[a7:word32] = v266
	CVZN = cond(v266)
	a7 = a7 - 4
	v267 = d1
	Mem0[a7:word32] = v267
	CVZN = cond(v267)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d1 = Mem0[a7 + 64:word32]
	CVZN = cond(d1)
	a7 = a7 - 4
	v268 = d2
	Mem0[a7:word32] = v268
	CVZN = cond(v268)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(EQ,Z) l00003450
	// succ:  l00003438 l00003450
l00003438:
	a0 = a7 + 106
	a1 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v269 = 0x30
	Mem0[a1:byte] = v269
	CVZN = cond(v269)
	a0 = a0 + d7
	d7 = d7 + 0x00000001
	CVZNX = cond(d7)
	v270 = (byte) d1
	Mem0[a0:byte] = v270
	CVZN = cond(v270)
	v271 = (byte) d1
	Mem0[a7 + 44:byte] = v271
	CVZN = cond(v271)
	// succ:  l00003450
l00003450:
	v130 = Mem0[a7 + 44:byte]
	d1 = DPB(d1, v130, 0)
	CVZN = cond(v130)
	a3 = a7 + 98
	v131 = (byte) d1 - 0x78
	CVZN = cond(v131)
	branch Test(EQ,Z) l00003464
	// succ:  l0000345E l00003464
l0000345E:
	v132 = (byte) d1 - 0x58
	CVZN = cond(v132)
	branch Test(NE,Z) l0000346E
	// succ:  l00003464 l0000346E
l00003464:
	v133 = 0x00000010
	Mem0[a7 + 44:word32] = v133
	CVZN = cond(v133)
	goto l0000348C
	// succ:  l0000348C
l0000346E:
	v145 = (byte) d1 - 0x6F
	CVZN = cond(v145)
	branch Test(NE,Z) l0000347E
	// succ:  l00003474 l0000347E
l00003474:
	v146 = 0x00000008
	Mem0[a7 + 48:word32] = v146
	CVZN = cond(v146)
	goto l00003486
	// succ:  l00003486
l0000347E:
	v189 = 0x0000000A
	Mem0[a7 + 48:word32] = v189
	CVZN = cond(v189)
	// succ:  l00003486
l00003486:
	v176 = Mem0[a7 + 48:word32]
	Mem0[a7 + 44:word32] = v176
	CVZN = cond(v176)
	// succ:  l0000348C
l0000348C:
	v143 = Mem0[a7 + 44:word32]
	Mem0[a7 + 108:word32] = v143
	CVZN = cond(v143)
	v144 = (byte) d1 - 0x58
	CVZN = cond(v144)
	branch Test(EQ,Z) l0000349E
	// succ:  l00003498 l0000349E
l00003498:
	a6 = 0x00003894
	goto l000034A2
	// succ:  l000034A2
l0000349E:
	a6 = 0x000038A4
	// succ:  l000034A2
l000034A2:
	v158 = a6
	Mem0[a7 + 44:word32] = v158
	CVZN = cond(v158)
	v159 = d3
	Mem0[a7 + 124:word32] = v159
	CVZN = cond(v159)
	v160 = d5
	Mem0[a7 + 68:word32] = v160
	CVZN = cond(v160)
	v161 = d6
	Mem0[a7 + 48:word32] = v161
	CVZN = cond(v161)
	v162 = d7
	Mem0[a7 + 98:word32] = v162
	CVZN = cond(v162)
	v163 = a7 + 56
	d6 = Mem0[v163:word32]
	v163 = v163 + 4
	d7 = Mem0[v163:word32]
	v163 = v163 + 4
	d3 = Mem0[a7 + 102:word32]
	CVZN = cond(d3)
	a1 = Mem0[a7 + 44:word32]
	// succ:  l000034C4
l000034C4:
	d1 = Mem0[a7 + 108:word32]
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d2 = 31
	CVZN = cond(d2)
	d0 = d0 >> d2
	CVZNX = cond(d0)
	a7 = a7 - 4
	v164 = d0
	Mem0[a7:word32] = v164
	CVZN = cond(v164)
	a7 = a7 - 4
	v165 = d1
	Mem0[a7:word32] = v165
	CVZN = cond(v165)
	a7 = a7 - 4
	v166 = a1
	Mem0[a7:word32] = v166
	CVZN = cond(v166)
	a7 = a7 - 4
	Mem0[a7:word32] = d1
	a7 = a7 - 4
	Mem0[a7:word32] = d0
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	call fn00003C74 (retsize: 4;)
	a7 = a7 + 16
	v167 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v167
	d4 = d0
	CVZN = cond(d4)
	d5 = d1
	CVZN = cond(d5)
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	d2 = d5
	CVZN = cond(d2)
	v168 = Mem0[a1 + d2:byte]
	a3 = a3 - 1
	v169 = v168
	Mem0[a3:byte] = v169
	CVZN = cond(v169)
	a7 = a7 - 4
	v170 = d0
	Mem0[a7:word32] = v170
	CVZN = cond(v170)
	a7 = a7 - 4
	v171 = d1
	Mem0[a7:word32] = v171
	CVZN = cond(v171)
	a7 = a7 - 4
	v172 = a1
	Mem0[a7:word32] = v172
	CVZN = cond(v172)
	a7 = a7 - 4
	Mem0[a7:word32] = d1
	a7 = a7 - 4
	Mem0[a7:word32] = d0
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	call fn00003A24 (retsize: 4;)
	a7 = a7 + 16
	v173 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = v173
	d6 = d0
	CVZN = cond(d6)
	d7 = d1
	CVZN = cond(d7)
	d1 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	d0 = d7
	CVZN = cond(d0)
	d1 = d6
	CVZN = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d0 = d0 - 0x00000000
	CVZNX = cond(d0)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	branch Test(NE,Z) l000034C4
	// succ:  l00003532 l000034C4
l00003532:
	v174 = d3
	Mem0[a7 + 102:word32] = v174
	CVZN = cond(v174)
	d7 = Mem0[a7 + 98:word32]
	CVZN = cond(d7)
	d6 = Mem0[a7 + 48:word32]
	CVZN = cond(d6)
	d5 = Mem0[a7 + 68:word32]
	CVZN = cond(d5)
	d3 = Mem0[a7 + 124:word32]
	CVZN = cond(d3)
	v175 = d5 - 0xFFFFFFFF
	CVZN = cond(v175)
	branch Test(NE,Z) l00003554
	// succ:  l0000354E l00003554
l0000354E:
	d5 = 0
	CVZN = cond(d5)
	goto l000036A0
	// succ:  l000036A0
l00003554:
	v179 = Mem0[a7 + 72:word32] & 0xFFFFFFFD
	Mem0[a7 + 72:word32] = v179
	ZN = cond(v179)
	C = false
	V = false
	goto l000036A0
	// succ:  l000036A0
l00003560:
	v275 = d4 - 0x0000006C
	CVZN = cond(v275)
	branch Test(NE,Z) l0000357C
	// succ:  l00003568 l0000357C
l00003568:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v276 = Mem0[a0 + -1:byte]
	Mem0[a3:byte] = v276
	CVZN = cond(v276)
	goto l0000358E
	// succ:  l0000358E
l0000357C:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	v277 = Mem0[a0 + -1:byte]
	Mem0[a3:byte] = v277
	CVZN = cond(v277)
	// succ:  l0000358E
l0000358E:
	v278 = 0x00000001
	Mem0[a7 + 102:word32] = v278
	CVZN = cond(v278)
	d5 = 0
	CVZN = cond(d5)
	goto l000036A0
	// succ:  l000036A0
l0000359C:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a3 = Mem0[a0 + -4:word32]
	a1 = a3
	Mem0[a7 + 102:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000035BE
	// succ:  l000035B8 l000035BE
l000035B8:
	v110 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v110)
	branch Test(ULE,VZ) l000035DA
	// succ:  l000035BE l000035DA
l000035BE:
	ZN = cond(Mem0[a1:byte] - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l000035DA
	// succ:  l000035C2 l000035DA
l000035C2:
	d0 = Mem0[a7 + 102:word32]
	CVZN = cond(d0)
	// succ:  l000035C6
l000035C6:
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	a1 = a1 + 1
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(ULE,VZ) l000035D2
	// succ:  l000035CE l000035D2
l000035CE:
	v111 = d5 - d0
	CVZN = cond(v111)
	branch Test(ULE,VZ) l000035D6
	// succ:  l000035D2 l000035D6
l000035D2:
	ZN = cond(Mem0[a1:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000035C6
	// succ:  l000035D6 l000035C6
l000035D6:
	v112 = d0
	Mem0[a7 + 102:word32] = v112
	CVZN = cond(v112)
	// succ:  l000035DA
l000035DA:
	d5 = 0
	CVZN = cond(d5)
	goto l000036A0
	// succ:  l000036A0
l000035E0:
	a3 = 0x00003888
	v279 = 0x00000001
	Mem0[a7 + 102:word32] = v279
	CVZN = cond(v279)
	d5 = 0
	CVZN = cond(d5)
	goto l000036A0
	// succ:  l000036A0
l000035F2:
	v239 = d4 - 0x00000001
	CVZN = cond(v239)
	branch Test(NE,Z) l00003614
	// succ:  l000035FA l00003614
l000035FA:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v240 = d6
	Mem0[a0 + 4:word32] = v240
	CVZN = cond(v240)
	Mem0[a0:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l00003682
	// succ:  l00003682
l00003614:
	v250 = d4 - 0x0000006C
	CVZN = cond(v250)
	branch Test(NE,Z) l00003632
	// succ:  l0000361C l00003632
l0000361C:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v251 = d6
	Mem0[a0:word32] = v251
	CVZN = cond(v251)
	goto l00003682
	// succ:  l00003682
l00003632:
	v260 = d4 - 0x00000068
	CVZN = cond(v260)
	branch Test(NE,Z) l00003650
	// succ:  l0000363A l00003650
l0000363A:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v261 = (word16) d6
	Mem0[a0:word16] = v261
	CVZN = cond(v261)
	goto l00003682
	// succ:  l00003682
l00003650:
	v272 = d4 - 0x00000002
	CVZN = cond(v272)
	branch Test(NE,Z) l0000366E
	// succ:  l00003658 l0000366E
l00003658:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v273 = (byte) d6
	Mem0[a0:byte] = v273
	CVZN = cond(v273)
	goto l00003682
	// succ:  l00003682
l0000366E:
	d0 = d3
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	a0 = d3
	a0 = Mem0[a0 + -4:word32]
	v274 = d6
	Mem0[a0:word32] = v274
	CVZN = cond(v274)
	// succ:  l00003682
l00003682:
	d5 = 0
	CVZN = cond(d5)
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l000036A0
	// succ:  l000036A0
l0000368A:
	ZN = cond((byte) d1 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003690
	// succ:  l0000368E l00003690
l0000368E:
	a2 = a2 - 1
	// succ:  l00003690
l00003690:
	a3 = a4
	d0 = a2
	CVZN = cond(d0)
	d0 = d0 - a4
	CVZNX = cond(d0)
	v126 = d0
	Mem0[a7 + 102:word32] = v126
	CVZN = cond(v126)
	d5 = 0
	CVZN = cond(d5)
	Mem0[a7 + 64:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000036A0
l000036A0:
	v128 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v128)
	branch Test(UGT,CZ) l000036AE
	// succ:  l000036A6 l000036AE
l000036A6:
	v129 = Mem0[a7 + 102:word32]
	Mem0[a7 + 44:word32] = v129
	CVZN = cond(v129)
	goto l000036B2
	// succ:  l000036B2
l000036AE:
	v140 = d5
	Mem0[a7 + 44:word32] = v140
	CVZN = cond(v140)
	// succ:  l000036B2
l000036B2:
	a7 = a7 - 4
	v134 = d0
	Mem0[a7:word32] = v134
	CVZN = cond(v134)
	d0 = Mem0[a7 + 48:word32]
	CVZN = cond(d0)
	d0 = d0 + d7
	CVZNX = cond(d0)
	v135 = d0
	Mem0[a7 + 52:word32] = v135
	CVZN = cond(v135)
	v136 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v136
	CVZN = cond(d0)
	a7 = a7 - 4
	v137 = d0
	Mem0[a7:word32] = v137
	CVZN = cond(v137)
	d0 = Mem0[a7 + 52:word32]
	CVZN = cond(d0)
	v138 = d0 - Mem0[a7 + 68:word32]
	CVZN = cond(v138)
	d0 = Mem0[a7:word32]
	a7 = a7 + 4
	branch Test(ULT,C) l000036D6
	// succ:  l000036D0 l000036D6
l000036D0:
	Mem0[a7 + 44:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	goto l000036E6
	// succ:  l000036E6
l000036D6:
	a7 = a7 - 4
	v152 = d0
	Mem0[a7:word32] = v152
	CVZN = cond(v152)
	d0 = Mem0[a7 + 68:word32]
	CVZN = cond(d0)
	d0 = d0 - Mem0[a7 + 52:word32]
	CVZNX = cond(d0)
	v153 = d0
	Mem0[a7 + 48:word32] = v153
	CVZN = cond(v153)
	v154 = Mem0[a7:word32]
	a7 = a7 + 4
	d0 = v154
	CVZN = cond(d0)
	// succ:  l000036E6
l000036E6:
	v147 = Mem0[a7 + 44:word32]
	Mem0[a7 + 48:word32] = v147
	CVZN = cond(v147)
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003728
	// succ:  l000036F4 l00003728
l000036F4:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003728
	// succ:  l000036FA l00003728
l000036FA:
	a7 = a7 - 4
	v148 = a5
	Mem0[a7:word32] = v148
	CVZN = cond(v148)
	a0 = a7 + 110
	a0 = a0 + d2
	v149 = Mem0[a0:byte]
	d0 = DPB(d0, v149, 0)
	CVZN = cond(v149)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v150 = d0
	Mem0[a7:word32] = v150
	CVZN = cond(v150)
	call fn000038B4 (retsize: 4;)
	a7 = a7 + 8
	v151 = d0 - 0xFFFFFFFF
	CVZN = cond(v151)
	branch Test(NE,Z) l00003720
	// succ:  l0000371A l00003720
l0000371A:
	d0 = d6
	CVZN = cond(d0)
	goto l0000387C
	// succ:  l0000387C
l00003720:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v177 = d7 - d2
	CVZN = cond(v177)
	branch Test(UGT,CZ) l000036FA
	// succ:  l00003728 l000036FA
l00003728:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l0000377A
	// succ:  l00003730 l0000377A
l00003730:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000377A
	// succ:  l00003738 l0000377A
l00003738:
	d4 = Mem0[a7 + 72:word32]
	CVZN = cond(d4)
	a4 = Mem0[a7 + 48:word32]
	// succ:  l00003740
l00003740:
	a7 = a7 - 4
	v178 = a5
	Mem0[a7:word32] = v178
	CVZN = cond(v178)
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & d4
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l0000374E
	// succ:  l00003748 l0000374E
l00003748:
	a0 = DPB(a0, 0x0030, 0)
	goto l00003752
	// succ:  l00003752
l0000374E:
	a0 = DPB(a0, 0x0020, 0)
	// succ:  l00003752
l00003752:
	a7 = a7 - 4
	v180 = a0
	Mem0[a7:word32] = v180
	CVZN = cond(v180)
	call fn000038B4 (retsize: 4;)
	a7 = a7 + 8
	v181 = d0 - 0xFFFFFFFF
	CVZN = cond(v181)
	branch Test(NE,Z) l0000376A
	// succ:  l00003764 l0000376A
l00003764:
	d0 = d6
	CVZN = cond(d0)
	goto l0000387C
	// succ:  l0000387C
l0000376A:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v186 = a4 - d2
	CVZN = cond(v186)
	branch Test(UGT,CZ) l00003740
	// succ:  l00003772 l00003740
l00003772:
	v187 = a4
	Mem0[a7 + 48:word32] = v187
	CVZN = cond(v187)
	v188 = d4
	Mem0[a7 + 72:word32] = v188
	CVZN = cond(v188)
	// succ:  l0000377A
l0000377A:
	d0 = 2
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l000037B6
	// succ:  l00003782 l000037B6
l00003782:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000037B6
	// succ:  l00003788 l000037B6
l00003788:
	a7 = a7 - 4
	v182 = a5
	Mem0[a7:word32] = v182
	CVZN = cond(v182)
	a0 = a7 + 110
	a0 = a0 + d2
	v183 = Mem0[a0:byte]
	d0 = DPB(d0, v183, 0)
	CVZN = cond(v183)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v184 = d0
	Mem0[a7:word32] = v184
	CVZN = cond(v184)
	call fn000038B4 (retsize: 4;)
	a7 = a7 + 8
	v185 = d0 - 0xFFFFFFFF
	CVZN = cond(v185)
	branch Test(NE,Z) l000037AE
	// succ:  l000037A8 l000037AE
l000037A8:
	d0 = d6
	CVZN = cond(d0)
	goto l0000387C
	// succ:  l0000387C
l000037AE:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v190 = d7 - d2
	CVZN = cond(v190)
	branch Test(UGT,CZ) l00003788
	// succ:  l000037B6 l00003788
l000037B6:
	d2 = Mem0[a7 + 102:word32]
	CVZN = cond(d2)
	v191 = d5 - Mem0[a7 + 102:word32]
	CVZN = cond(v191)
	branch Test(ULE,VZ) l000037E4
	// succ:  l000037C0 l000037E4
l000037C0:
	a7 = a7 - 4
	v192 = a5
	Mem0[a7:word32] = v192
	CVZN = cond(v192)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000030
	call fn000038B4 (retsize: 4;)
	a7 = a7 + 8
	v193 = d0 - 0xFFFFFFFF
	CVZN = cond(v193)
	branch Test(NE,Z) l000037DC
	// succ:  l000037D6 l000037DC
l000037D6:
	d0 = d6
	CVZN = cond(d0)
	goto l0000387C
	// succ:  l0000387C
l000037DC:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v194 = d5 - d2
	CVZN = cond(v194)
	branch Test(UGT,CZ) l000037C0
	// succ:  l000037E4 l000037C0
l000037E4:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 102:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000381A
	// succ:  l000037EC l0000381A
l000037EC:
	a4 = Mem0[a7 + 102:word32]
	// succ:  l000037F0
l000037F0:
	a7 = a7 - 4
	v195 = a5
	Mem0[a7:word32] = v195
	CVZN = cond(v195)
	a0 = a3 + d2
	v196 = Mem0[a0:byte]
	d0 = DPB(d0, v196, 0)
	CVZN = cond(v196)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v197 = d0
	Mem0[a7:word32] = v197
	CVZN = cond(v197)
	call fn000038B4 (retsize: 4;)
	a7 = a7 + 8
	v198 = d0 - 0xFFFFFFFF
	CVZN = cond(v198)
	branch Test(NE,Z) l00003812
	// succ:  l0000380E l00003812
l0000380E:
	d0 = d6
	CVZN = cond(d0)
	goto l0000387C
	// succ:  l0000387C
l00003812:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v199 = a4 - d2
	CVZN = cond(v199)
	branch Test(UGT,CZ) l000037F0
	// succ:  l0000381A l000037F0
l0000381A:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a7 + 72:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003850
	// succ:  l00003822 l00003850
l00003822:
	d2 = 0
	CVZN = cond(d2)
	ZN = cond(Mem0[a7 + 48:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003850
	// succ:  l0000382A l00003850
l0000382A:
	a3 = Mem0[a7 + 48:word32]
	// succ:  l0000382E
l0000382E:
	a7 = a7 - 4
	v200 = a5
	Mem0[a7:word32] = v200
	CVZN = cond(v200)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000020
	call fn000038B4 (retsize: 4;)
	a7 = a7 + 8
	v201 = d0 - 0xFFFFFFFF
	CVZN = cond(v201)
	branch Test(NE,Z) l00003848
	// succ:  l00003844 l00003848
l00003844:
	d0 = d6
	CVZN = cond(d0)
	goto l0000387C
	// succ:  l0000387C
l00003848:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v203 = a3 - d2
	CVZN = cond(v203)
	branch Test(UGT,CZ) l0000382E
	// succ:  l00003850 l0000382E
l00003850:
	a4 = a2
	goto l00003874
	// succ:  l00003874
l00003854:
	a7 = a7 - 4
	v79 = a5
	Mem0[a7:word32] = v79
	CVZN = cond(v79)
	v80 = Mem0[a4:byte]
	a4 = a4 + 1
	d0 = DPB(d0, v80, 0)
	CVZN = cond(v80)
	d0 = (int16) (int8) d0
	ZN = cond(d0)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v81 = d0
	Mem0[a7:word32] = v81
	CVZN = cond(v81)
	call fn000038B4 (retsize: 4;)
	a7 = a7 + 8
	v82 = d0 - 0xFFFFFFFF
	CVZN = cond(v82)
	branch Test(NE,Z) l00003872
	// succ:  l0000386E l00003872
l0000386E:
	d0 = d6
	CVZN = cond(d0)
	goto l0000387C
	// succ:  l0000387C
l00003872:
	d6 = d6 + 0x00000001
	CVZNX = cond(d6)
	// succ:  l00003874
l00003874:
	ZN = cond(Mem0[a4:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002F50
	// succ:  l0000387A l00002F50
l0000387A:
	d0 = d6
	CVZN = cond(d0)
	// succ:  l0000387C
l0000387C:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a5 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a7 + 68
	return
	// succ:  fn00002F34_exit
fn00002F34_exit:


// fn000038B4
// Return size: 4
define fn000038B4
fn000038B4_entry:
	// succ:  l000038B4
l000038B4:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d2 = Mem0[a7 + 16:word32]
	CVZN = cond(d2)
	a2 = Mem0[a7 + 20:word32]
	a0 = a2 + 24
	d0 = 2
	CVZN = cond(d0)
	v9 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v9
	ZN = cond(v9)
	C = false
	V = false
	a0 = a2 + 20
	v13 = Mem0[a0:word32] - 0x00000001
	Mem0[a0:word32] = v13
	CVZNX = cond(v13)
	branch Test(LT,CZ) l000038F8
	// succ:  l000038D0 l000038F8
l000038D0:
	d0 = 10
	CVZN = cond(d0)
	v16 = d0 - d2
	CVZN = cond(v16)
	branch Test(NE,Z) l000038E2
	// succ:  l000038D6 l000038E2
l000038D6:
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(NE,Z) l000038F8
	// succ:  l000038E2 l000038F8
l000038E2:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a3 = a0
	a3 = a3 + 1
	v19 = a3
	Mem0[a1:word32] = v19
	CVZN = cond(v19)
	v20 = (byte) d2
	Mem0[a0:byte] = v20
	CVZN = cond(v20)
	v21 = Mem0[a0:byte]
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	d1 = 0
	CVZN = cond(d1)
	v23 = (byte) d0
	d1 = DPB(d1, v23, 0)
	CVZN = cond(v23)
	goto l00003906
	// succ:  l00003906
l000038F8:
	a7 = a7 - 4
	v24 = a2
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	a7 = a7 - 4
	v25 = d2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00003910 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	a7 = a7 + 8
	// succ:  l00003906
l00003906:
	d0 = d1
	CVZN = cond(d0)
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn000038B4_exit
fn000038B4_exit:


// fn00003910
// Return size: 4
define fn00003910
fn00003910_entry:
	// succ:  l00003910
l00003910:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a6
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d5 = Mem0[a7 + 40:word32]
	CVZN = cond(d5)
	a2 = Mem0[a7 + 44:word32]
	call fn00002BBC (retsize: 4;)
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l0000392C
	// succ:  l00003926 l0000392C
l00003926:
	d0 = -1
	CVZN = cond(d0)
	goto l00003A1E
	// succ:  l00003A1E
l0000392C:
	d0 = 73
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	d6 = 64
	CVZN = cond(d6)
	v18 = d6 - d0
	CVZN = cond(v18)
	branch Test(EQ,Z) l0000393E
	// succ:  l00003938 l0000393E
l00003938:
	d0 = -1
	CVZN = cond(d0)
	goto l00003A1E
	// succ:  l00003A1E
l0000393E:
	ZN = cond(Mem0[a2 + 28:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000395C
	// succ:  l00003944 l0000395C
l00003944:
	d0 = 4
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003954
	// succ:  l0000394C l00003954
l0000394C:
	d0 = 1
	CVZN = cond(d0)
	v19 = d0
	Mem0[a2 + 28:word32] = v19
	CVZN = cond(v19)
	goto l0000395C
	// succ:  l0000395C
l00003954:
	v36 = 0x00000400
	Mem0[a2 + 28:word32] = v36
	CVZN = cond(v36)
	// succ:  l0000395C
l0000395C:
	ZN = cond(Mem0[a2 + 8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000399C
	// succ:  l00003962 l0000399C
l00003962:
	a1 = a2 + 28
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l00003976
	// succ:  l00003972 l00003976
l00003972:
	d4 = 2
	CVZN = cond(d4)
	goto l00003978
	// succ:  l00003978
l00003976:
	d4 = 1
	CVZN = cond(d4)
	// succ:  l00003978
l00003978:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + Mem0[a1:word32]
	CVZNX = cond(d0)
	a7 = a7 - 4
	v27 = d0
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	call fn00002718 (retsize: 4;)
	a3 = d0
	a7 = a7 + 4
	d0 = a3
	CVZN = cond(d0)
	branch Test(NE,Z) l00003992
	// succ:  l0000398C l00003992
l0000398C:
	d0 = -1
	CVZN = cond(d0)
	goto l00003A1E
	// succ:  l00003A1E
l00003992:
	a1 = a3 + 1
	v31 = a1
	Mem0[a2 + 8:word32] = v31
	CVZN = cond(v31)
	goto l000039FA
	// succ:  l000039FA
l0000399C:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000039F6
	// succ:  l000039A0 l000039F6
l000039A0:
	d0 = 0x00000080
	CVZN = cond(d0)
	d0 = d0 & Mem0[a2 + 24:word32]
	ZN = cond(d0)
	C = false
	V = false
	branch Test(EQ,Z) l000039CC
	// succ:  l000039AC l000039CC
l000039AC:
	d0 = 10
	CVZN = cond(d0)
	v21 = d0 - d5
	CVZN = cond(v21)
	branch Test(NE,Z) l000039CC
	// succ:  l000039B2 l000039CC
l000039B2:
	a1 = a2 + 4
	a0 = Mem0[a1:word32]
	a4 = a0
	a4 = a4 + 1
	v23 = a4
	Mem0[a1:word32] = v23
	CVZN = cond(v23)
	v24 = (byte) d5
	Mem0[a0:byte] = v24
	CVZN = cond(v24)
	a7 = a7 - 4
	v25 = a2
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00002B28 (retsize: 4;)
	a7 = a7 + 4
	goto l00003A1E
	// succ:  l00003A1E
l000039CC:
	a0 = a2 + 8
	d4 = Mem0[a2 + 4:word32]
	CVZN = cond(d4)
	d4 = d4 - Mem0[a0:word32]
	CVZNX = cond(d4)
	d2 = Mem0[a0:word32]
	CVZN = cond(d2)
	d1 = Mem0[a2:word32]
	CVZN = cond(d1)
	a6 = Mem0[0x00003D98:word32]
	d3 = d4
	CVZN = cond(d3)
	execPrivate3()
	v29 = d4 - d0
	CVZN = cond(v29)
	branch Test(EQ,Z) l000039FA
	// succ:  l000039EA l000039FA
l000039EA:
	a0 = a2 + 24
	d0 = 16
	CVZN = cond(d0)
	v30 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v30
	ZN = cond(v30)
	C = false
	V = false
	d0 = -1
	CVZN = cond(d0)
	goto l00003A1E
	// succ:  l00003A1E
l000039F6:
	d0 = 0
	CVZN = cond(d0)
	goto l00003A1E
	// succ:  l00003A1E
l000039FA:
	a0 = a2 + 24
	d0 = 2
	CVZN = cond(d0)
	v32 = Mem0[a0:word32] | d0
	Mem0[a0:word32] = v32
	ZN = cond(v32)
	C = false
	V = false
	a1 = a2 + 8
	a0 = Mem0[a1:word32]
	v33 = (byte) d5
	Mem0[a0:byte] = v33
	CVZN = cond(v33)
	a1 = Mem0[a1:word32]
	a1 = a1 + 1
	v34 = a1
	Mem0[a2 + 4:word32] = v34
	CVZN = cond(v34)
	d0 = Mem0[a2 + 28:word32]
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	v35 = d0
	Mem0[a2 + 20:word32] = v35
	CVZN = cond(v35)
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00003A1E
l00003A1E:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00003910_exit
fn00003910_exit:


// fn00003A24
// Return size: 4
define fn00003A24
fn00003A24_entry:
	// succ:  l00003A24
l00003A24:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 28:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 24:word32]
	CVZN = cond(d0)
	a0 = d1
	d3 = Mem0[a7 + 36:word32]
	CVZN = cond(d3)
	d2 = Mem0[a7 + 32:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l00003A7A
	// succ:  l00003A3C l00003A7A
l00003A3C:
	v13 = d0 - d3
	CVZN = cond(v13)
	branch Test(UGE,C) l00003A4E
	// succ:  l00003A40 l00003A4E
l00003A40:
	d2 = d3
	CVZN = cond(d2)
	call fn00003B28 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	goto l00003B20
	// succ:  l00003B20
l00003A4E:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003A5A
	// succ:  l00003A52 l00003A5A
l00003A52:
	d4 = 1
	CVZN = cond(d4)
	v20 = (uint16) (d4 % (uint16) d3)
	v21 = (uint16) (d4 /u (uint16) d3)
	d4 = DPB(d4, v20, 16)
	d4 = DPB(d4, v21, 0)
	VZN = cond(v21)
	C = false
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	d3 = d4
	CVZN = cond(d3)
	// succ:  l00003A5A
l00003A5A:
	d1 = d0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	d2 = d3
	CVZN = cond(d2)
	call fn00003B28 (retsize: 4;)
	a1 = d0
	d0 = d1
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	call fn00003B28 (retsize: 4;)
	d1 = d0
	CVZN = cond(d1)
	d0 = a1
	CVZN = cond(d0)
	goto l00003B22
	// succ:  l00003B22
l00003A7A:
	v15 = d0 - d2
	CVZN = cond(v15)
	branch Test(UGE,C) l00003A84
	// succ:  l00003A7E l00003A84
l00003A7E:
	d0 = 0
	CVZN = cond(d0)
	goto l00003B20
	// succ:  l00003B20
l00003A84:
	d6 = d2
	CVZN = cond(d6)
	d4 = 24
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003AA2
	// succ:  l00003A8E l00003AA2
l00003A8E:
	d4 = 16
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003AA2
	// succ:  l00003A96 l00003AA2
l00003A96:
	d4 = 8
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003AA2
	// succ:  l00003A9E l00003AA2
l00003A9E:
	d4 = 0
	CVZN = cond(d4)
	v19 = (byte) d2
	d6 = DPB(d6, v19, 0)
	CVZN = cond(v19)
	// succ:  l00003AA2
l00003AA2:
	a1 = 0x00003DCC
	v24 = (word16) d6 & 0x00FF
	d6 = DPB(d6, v24, 0)
	ZN = cond(v24)
	C = false
	V = false
	v25 = (byte) d4 + Mem0[a1 + (int32) ((int16) d6):byte]
	d4 = DPB(d4, v25, 0)
	CVZNX = cond(v25)
	d5 = 32
	CVZN = cond(d5)
	d5 = d5 - d4
	CVZNX = cond(d5)
	branch Test(NE,Z) l00003AC2
	// succ:  l00003AB6 l00003AC2
l00003AB6:
	v27 = d2 - d0
	CVZN = cond(v27)
	branch Test(ULT,C) l00003ABE
	// succ:  l00003ABA l00003ABE
l00003ABA:
	v28 = d3 - a0
	CVZN = cond(v28)
	branch Test(UGT,CZ) l00003A7E
	// succ:  l00003ABE l00003A7E
l00003ABE:
	d0 = 1
	CVZN = cond(d0)
	goto l00003B20
	// succ:  l00003B20
l00003AC2:
	d2 = d2 << d5
	CVZNX = cond(d2)
	d6 = d3
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d2 = d2 | d6
	ZN = cond(d2)
	C = false
	V = false
	d3 = d3 << d5
	CVZNX = cond(d3)
	d1 = d0
	CVZN = cond(d1)
	d0 = d0 >>u d4
	CVZNX = cond(d0)
	d1 = d1 << d5
	CVZNX = cond(d1)
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 << d5
	CVZNX = cond(d6)
	a0 = d6
	call fn00003B28 (retsize: 4;)
	d2 = d0
	CVZN = cond(d2)
	v30 = d0
	d0 = d1
	d1 = v30
	ZN = cond(d1)
	C = false
	V = false
	d4 = d2
	CVZN = cond(d4)
	d5 = d2
	CVZN = cond(d5)
	d6 = d3
	CVZN = cond(d6)
	d2 = d2 *u (word16) d3
	VZN = cond(d2)
	C = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d3 = d3 *u (word16) d5
	VZN = cond(d3)
	C = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d4 = d4 *u (word16) d6
	VZN = cond(d4)
	C = false
	d5 = d5 *u (word16) d6
	VZN = cond(d5)
	C = false
	d6 = 0
	CVZN = cond(d6)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v31 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v31, 0)
	CVZNX = cond(v31)
	v33 = (word16) d6 + (word16) d5 + X
	d5 = DPB(d5, v33, 0)
	CVZNX = cond(v33)
	v34 = (word16) d2 + (word16) d4
	d2 = DPB(d2, v34, 0)
	CVZNX = cond(v34)
	v35 = (word16) d6 + (word16) d5 + X
	d5 = DPB(d5, v35, 0)
	CVZNX = cond(v35)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 + d4
	CVZNX = cond(d3)
	d3 = d3 + d5
	CVZNX = cond(d3)
	v39 = d0 - d3
	CVZN = cond(v39)
	branch Test(ULT,C) l00003B1E
	// succ:  l00003B18 l00003B1E
l00003B18:
	branch Test(NE,Z) l00003B20
	// succ:  l00003B1A l00003B20
l00003B1A:
	v40 = a0 - d2
	CVZN = cond(v40)
	branch Test(UGE,C) l00003B20
	// succ:  l00003B1E l00003B20
l00003B1E:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	// succ:  l00003B20
l00003B20:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00003B22
l00003B22:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00003A24_exit
fn00003A24_exit:


// fn00003B28
// Return size: 4
define fn00003B28
fn00003B28_entry:
	// succ:  l00003B28
l00003B28:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	d7 = d2
	CVZN = cond(d7)
	branch Test(EQ,Z) l00003B42
	// succ:  l00003B30 l00003B42
l00003B30:
	d6 = d1
	CVZN = cond(d6)
	d5 = d0
	CVZN = cond(d5)
	branch Test(NE,Z) l00003B50
	// succ:  l00003B36 l00003B50
l00003B36:
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00003C6E
	// succ:  l00003B3C l00003C6E
l00003B3C:
	v14 = d2 - d1
	CVZN = cond(v14)
	branch Test(UGT,CZ) l00003C6E
	// succ:  l00003B42 l00003C6E
l00003B42:
	d0 = d1
	CVZN = cond(d0)
	d1 = d2
	CVZN = cond(d1)
	call fn0000257E (retsize: 4;)
	goto l00003C6E
	// succ:  l00003C6E
l00003B50:
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	ZN = cond((word16) d2 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l00003B78
	// succ:  l00003B56 l00003B78
l00003B56:
	d2 = 0
	CVZN = cond(d2)
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v16 = (word16) d1
	d0 = DPB(d0, v16, 0)
	CVZN = cond(v16)
	v17 = (uint16) (d0 % (uint16) d7)
	v18 = (uint16) (d0 /u (uint16) d7)
	d0 = DPB(d0, v17, 16)
	d0 = DPB(d0, v18, 0)
	VZN = cond(v18)
	C = false
	v20 = (word16) d0
	d2 = DPB(d2, v20, 0)
	CVZN = cond(v20)
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	v21 = (word16) d1
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	v22 = (uint16) (d0 % (uint16) d7)
	v23 = (uint16) (d0 /u (uint16) d7)
	d0 = DPB(d0, v22, 16)
	d0 = DPB(d0, v23, 0)
	VZN = cond(v23)
	C = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v24 = (word16) d0
	d2 = DPB(d2, v24, 0)
	CVZN = cond(v24)
	d0 = DPB(d0, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	d1 = d0
	CVZN = cond(d1)
	d0 = d2
	CVZN = cond(d0)
	goto l00003C6E
	// succ:  l00003C6E
l00003B78:
	a7 = a7 - 4
	Mem0[a7:word32] = a1
	a7 = a7 - 4
	Mem0[a7:word32] = a0
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	a7 = a7 - 8
	Mem0[a7 + 2:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	d1 = 0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	ZN = cond(d7 - 0x00000000)
	C = false
	V = false
	branch Test(LT,N) l00003B94
	// succ:  l00003B8A l00003B94
l00003B8A:
	v32 = (word16) d0 + 0x0001
	d0 = DPB(d0, v32, 0)
	CVZNX = cond(v32)
	d6 = d6 + d6
	CVZNX = cond(d6)
	d5 = d5 + d5 + X
	CVZNX = cond(d5)
	d7 = d7 + d7
	CVZNX = cond(d7)
	branch Test(GT,N) l00003B8A
	// succ:  l00003B94 l00003B8A
l00003B94:
	v35 = (word16) d0
	Mem0[a7:word16] = v35
	CVZN = cond(v35)
	// succ:  l00003B96
l00003B96:
	d3 = d7
	CVZN = cond(d3)
	d2 = d5
	CVZN = cond(d2)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	v36 = (word16) d2 - (word16) d3
	CVZN = cond(v36)
	branch Test(NE,Z) l00003BA8
	// succ:  l00003BA2 l00003BA8
l00003BA2:
	d1 = DPB(d1, 0xFFFF, 0)
	CVZN = cond(0xFFFF)
	goto l00003BB2
	// succ:  l00003BB2
l00003BA8:
	d1 = d5
	CVZN = cond(d1)
	v37 = (uint16) (d1 % (uint16) d3)
	v38 = (uint16) (d1 /u (uint16) d3)
	d1 = DPB(d1, v37, 16)
	d1 = DPB(d1, v38, 0)
	VZN = cond(v38)
	C = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	d1 = DPB(d1, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d1 = __swap(d1)
	ZN = cond(d1)
	C = false
	V = false
	// succ:  l00003BB2
l00003BB2:
	a1 = d6
	d6 = DPB(d6, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	// succ:  l00003BB8
l00003BB8:
	d3 = d7
	CVZN = cond(d3)
	d2 = d1
	CVZN = cond(d2)
	d2 = d2 *u (word16) d7
	VZN = cond(d2)
	C = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = d3 *u (word16) d1
	VZN = cond(d3)
	C = false
	d4 = d5
	CVZN = cond(d4)
	d4 = d4 - d3
	CVZNX = cond(d4)
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	v41 = (word16) d4
	d0 = DPB(d0, v41, 0)
	CVZN = cond(v41)
	v42 = (word16) d6
	d4 = DPB(d4, v42, 0)
	CVZN = cond(v42)
	ZN = cond((word16) d0 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l00003BD8
	// succ:  l00003BD0 l00003BD8
l00003BD0:
	v43 = d2 - d4
	CVZN = cond(v43)
	branch Test(ULE,VZ) l00003BD8
	// succ:  l00003BD4 l00003BD8
l00003BD4:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	goto l00003BB8
	// succ:  l00003BB8
l00003BD8:
	a0 = d5
	d6 = d1
	CVZN = cond(d6)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = d7
	CVZN = cond(d5)
	d2 = d6
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	d4 = d5
	CVZN = cond(d4)
	d6 = d6 *u (word16) d5
	VZN = cond(d6)
	C = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d5 = d5 *u (word16) d3
	VZN = cond(d5)
	C = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d2 = d2 *u (word16) d4
	VZN = cond(d2)
	C = false
	d3 = d3 *u (word16) d4
	VZN = cond(d3)
	C = false
	d4 = 0
	CVZN = cond(d4)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	v45 = (word16) d6 + (word16) d5
	d6 = DPB(d6, v45, 0)
	CVZNX = cond(v45)
	v46 = (word16) d4 + (word16) d3 + X
	d3 = DPB(d3, v46, 0)
	CVZNX = cond(v46)
	v47 = (word16) d6 + (word16) d2
	d6 = DPB(d6, v47, 0)
	CVZNX = cond(v47)
	v48 = (word16) d4 + (word16) d3 + X
	d3 = DPB(d3, v48, 0)
	CVZNX = cond(v48)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = DPB(d5, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d2 = DPB(d2, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d5 = d5 + d2
	CVZNX = cond(d5)
	d5 = d5 + d3
	CVZNX = cond(d5)
	d2 = d5
	CVZN = cond(d2)
	d3 = d6
	CVZN = cond(d3)
	d5 = a0
	CVZN = cond(d5)
	d6 = a1
	CVZN = cond(d6)
	d6 = d6 - d3
	CVZNX = cond(d6)
	d5 = d5 - d2 - X
	CVZNX = cond(d5)
	branch Test(UGE,C) l00003C30
	// succ:  l00003C1A l00003C30
l00003C1A:
	d1 = d1 - 0x00000001
	CVZNX = cond(d1)
	d2 = 0
	CVZN = cond(d2)
	d3 = d7
	CVZN = cond(d3)
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d6 = d6 + d3
	CVZNX = cond(d6)
	d5 = d2 + d5 + X
	CVZNX = cond(d5)
	d3 = d7
	CVZN = cond(d3)
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d5 = d5 + d3
	CVZNX = cond(d5)
	// succ:  l00003C30
l00003C30:
	ZN = cond(Mem0[a7 + 2:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003C4C
	// succ:  l00003C36 l00003C4C
l00003C36:
	v53 = (word16) d1
	Mem0[a7 + 4:word16] = v53
	CVZN = cond(v53)
	d1 = 0
	CVZN = cond(d1)
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	v54 = (word16) d6
	d5 = DPB(d5, v54, 0)
	CVZN = cond(v54)
	d6 = DPB(d6, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	Mem0[a7 + 2:bool] = true
	goto l00003B96
	// succ:  l00003B96
l00003C4C:
	d0 = Mem0[a7 + 4:word32]
	CVZN = cond(d0)
	v57 = (word16) d1
	d0 = DPB(d0, v57, 0)
	CVZN = cond(v57)
	v58 = (word16) d5
	d6 = DPB(d6, v58, 0)
	CVZN = cond(v58)
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d5 = __swap(d5)
	ZN = cond(d5)
	C = false
	V = false
	v59 = Mem0[a7:word16]
	d7 = DPB(d7, v59, 0)
	CVZN = cond(v59)
	branch Test(EQ,Z) l00003C66
	// succ:  l00003C5C l00003C66
l00003C5C:
	v60 = (word16) d7 - 0x0001
	d7 = DPB(d7, v60, 0)
	CVZNX = cond(v60)
	// succ:  l00003C5E
l00003C5E:
	d5 = d5 >>u 0x00000001
	CVZNX = cond(d5)
	d6 = __rcr(d6, 0x00000001, X)
	CZNX = cond(d6)
	V = false
	d7 = d7 - 0x00000001
	branch d7 != 0xFFFFFFFF l00003C5E
	// succ:  l00003C66 l00003C5E
l00003C66:
	d1 = d6
	CVZN = cond(d1)
	a7 = a7 + 8
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	a0 = Mem0[a7:word32]
	a7 = a7 + 4
	a1 = Mem0[a7:word32]
	a7 = a7 + 4
	// succ:  l00003C6E
l00003C6E:
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00003B28_exit
fn00003B28_exit:


// fn00003C74
// Return size: 4
define fn00003C74
fn00003C74_entry:
	// succ:  l00003C74
l00003C74:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a7 = a7 - 4
	Mem0[a7:word32] = d2
	d1 = Mem0[a7 + 32:word32]
	CVZN = cond(d1)
	d0 = Mem0[a7 + 28:word32]
	CVZN = cond(d0)
	a0 = d1
	d3 = Mem0[a7 + 40:word32]
	CVZN = cond(d3)
	d2 = Mem0[a7 + 36:word32]
	CVZN = cond(d2)
	branch Test(NE,Z) l00003CC6
	// succ:  l00003C8C l00003CC6
l00003C8C:
	v14 = d0 - d3
	CVZN = cond(v14)
	branch Test(UGE,C) l00003C9E
	// succ:  l00003C90 l00003C9E
l00003C90:
	d2 = d3
	CVZN = cond(d2)
	call fn00003B28 (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	goto l00003D80
	// succ:  l00003D80
l00003C9E:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00003CAA
	// succ:  l00003CA2 l00003CAA
l00003CA2:
	d4 = 1
	CVZN = cond(d4)
	v29 = (uint16) (d4 % (uint16) d3)
	v30 = (uint16) (d4 /u (uint16) d3)
	d4 = DPB(d4, v29, 16)
	d4 = DPB(d4, v30, 0)
	VZN = cond(v30)
	C = false
	d4 = (int32) (int16) d4
	ZN = cond(d4)
	d3 = d4
	CVZN = cond(d3)
	// succ:  l00003CAA
l00003CAA:
	d1 = d0
	CVZN = cond(d1)
	d0 = 0
	CVZN = cond(d0)
	d2 = d3
	CVZN = cond(d2)
	call fn00003B28 (retsize: 4;)
	d0 = d1
	CVZN = cond(d0)
	d1 = a0
	CVZN = cond(d1)
	call fn00003B28 (retsize: 4;)
	d0 = 0
	CVZN = cond(d0)
	goto l00003D80
	// succ:  l00003D80
l00003CC6:
	v16 = d0 - d2
	CVZN = cond(v16)
	branch Test(ULT,C) l00003D80
	// succ:  l00003CCC l00003D80
l00003CCC:
	d6 = d2
	CVZN = cond(d6)
	d4 = 24
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003CEA
	// succ:  l00003CD6 l00003CEA
l00003CD6:
	d4 = 16
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003CEA
	// succ:  l00003CDE l00003CEA
l00003CDE:
	d4 = 8
	CVZN = cond(d4)
	d6 = __rol(d6, 0x00000008)
	CZN = cond(d6)
	V = false
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00003CEA
	// succ:  l00003CE6 l00003CEA
l00003CE6:
	d4 = 0
	CVZN = cond(d4)
	v20 = (byte) d2
	d6 = DPB(d6, v20, 0)
	CVZN = cond(v20)
	// succ:  l00003CEA
l00003CEA:
	a1 = 0x00003DCC
	v22 = (word16) d6 & 0x00FF
	d6 = DPB(d6, v22, 0)
	ZN = cond(v22)
	C = false
	V = false
	v23 = (byte) d4 + Mem0[a1 + (int32) ((int16) d6):byte]
	d4 = DPB(d4, v23, 0)
	CVZNX = cond(v23)
	d5 = 32
	CVZN = cond(d5)
	d5 = d5 - d4
	CVZNX = cond(d5)
	branch Test(NE,Z) l00003D0C
	// succ:  l00003CFE l00003D0C
l00003CFE:
	v25 = d2 - d0
	CVZN = cond(v25)
	branch Test(ULT,C) l00003D06
	// succ:  l00003D02 l00003D06
l00003D02:
	v26 = d3 - d1
	CVZN = cond(v26)
	branch Test(UGT,CZ) l00003D80
	// succ:  l00003D06 l00003D80
l00003D06:
	d1 = d1 - d3
	CVZNX = cond(d1)
	d0 = d0 - d2 - X
	CVZNX = cond(d0)
	goto l00003D80
	// succ:  l00003D80
l00003D0C:
	d2 = d2 << d5
	CVZNX = cond(d2)
	d6 = d3
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d2 = d2 | d6
	ZN = cond(d2)
	C = false
	V = false
	d3 = d3 << d5
	CVZNX = cond(d3)
	d1 = d0
	CVZN = cond(d1)
	d0 = d0 >>u d4
	CVZNX = cond(d0)
	d1 = d1 << d5
	CVZNX = cond(d1)
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 >>u d4
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 << d5
	CVZNX = cond(d6)
	a0 = d6
	call fn00003B28 (retsize: 4;)
	v32 = d2
	d2 = d0
	d0 = v32
	ZN = cond(d0)
	C = false
	V = false
	a1 = d3
	d4 = d2
	CVZN = cond(d4)
	d7 = d2
	CVZN = cond(d7)
	d6 = d3
	CVZN = cond(d6)
	d2 = d2 *u (word16) d3
	VZN = cond(d2)
	C = false
	d7 = __swap(d7)
	ZN = cond(d7)
	C = false
	V = false
	d3 = d3 *u (word16) d7
	VZN = cond(d3)
	C = false
	d6 = __swap(d6)
	ZN = cond(d6)
	C = false
	V = false
	d4 = d4 *u (word16) d6
	VZN = cond(d4)
	C = false
	d7 = d7 *u (word16) d6
	VZN = cond(d7)
	C = false
	d6 = 0
	CVZN = cond(d6)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	v33 = (word16) d2 + (word16) d3
	d2 = DPB(d2, v33, 0)
	CVZNX = cond(v33)
	v34 = (word16) d6 + (word16) d7 + X
	d7 = DPB(d7, v34, 0)
	CVZNX = cond(v34)
	v35 = (word16) d2 + (word16) d4
	d2 = DPB(d2, v35, 0)
	CVZNX = cond(v35)
	v36 = (word16) d6 + (word16) d7 + X
	d7 = DPB(d7, v36, 0)
	CVZNX = cond(v36)
	d2 = __swap(d2)
	ZN = cond(d2)
	C = false
	V = false
	d3 = DPB(d3, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d4 = DPB(d4, 0x0000, 0)
	Z = true
	C = false
	N = false
	V = false
	d3 = __swap(d3)
	ZN = cond(d3)
	C = false
	V = false
	d4 = __swap(d4)
	ZN = cond(d4)
	C = false
	V = false
	d3 = d3 + d4
	CVZNX = cond(d3)
	d3 = d3 + d7
	CVZNX = cond(d3)
	v40 = d1 - d2
	CVZN = cond(v40)
	branch Test(ULT,C) l00003D68
	// succ:  l00003D62 l00003D68
l00003D62:
	branch Test(NE,Z) l00003D6C
	// succ:  l00003D64 l00003D6C
l00003D64:
	v41 = a0 - d3
	CVZN = cond(v41)
	branch Test(UGE,C) l00003D6C
	// succ:  l00003D68 l00003D6C
l00003D68:
	d3 = d3 - a1
	CVZNX = cond(d3)
	d2 = d2 - d0 - X
	CVZNX = cond(d2)
	// succ:  l00003D6C
l00003D6C:
	d6 = a0
	CVZN = cond(d6)
	d6 = d6 - d3
	CVZNX = cond(d6)
	d1 = d1 - d2 - X
	CVZNX = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d4 = 32
	CVZN = cond(d4)
	d4 = d4 - d5
	CVZNX = cond(d4)
	d1 = d1 << d4
	CVZNX = cond(d1)
	d6 = d6 >>u d5
	CVZNX = cond(d6)
	d1 = d1 | d6
	ZN = cond(d1)
	C = false
	V = false
	d0 = d0 >>u d5
	CVZNX = cond(d0)
	// succ:  l00003D80
l00003D80:
	d2 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn00003C74_exit
fn00003C74_exit:


