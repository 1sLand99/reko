// fn00001000
// Return size: 4
void fn00001000()
fn00001000_entry:
	// succ:  l00001000
l00001000:
	a7 = fp
	// succ:  l0000100A
l0000100A:
	d2 = d0
	CVZN = cond(d2)
	a2 = a0
	a4 = 0x000093BE
	a6 = Mem0[0x00000004:word32]
	v10 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v10)
	branch Test(UGE,C) l00001036
	// succ:  l00001020 l00001036
l00001020:
	a0 = 0x000013C8
	d0 = 0x00000030
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d0 = d0 >>u 0x00000002
	CVZNX = cond(d0)
	// succ:  l00001030
l00001030:
	Mem0[a0:word32] = 0x00000000
	a0 = a0 + 0x00000004
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00001030
	// succ:  l00001036 l00001030
l00001036:
	v16 = a7
	Mem0[a4 + -32758:word32] = v16
	CVZN = cond(v16)
	v17 = a6
	Mem0[a4 + -32754:word32] = v17
	CVZN = cond(v17)
	a1 = a1 - a1
	CVZNX = cond(a1)
	d0 = FindTask(a1)
	a3 = d0
	d0 = 0
	CVZN = cond(d0)
	a1 = 0x000012BC
	d0 = OpenLibrary(a1, d0)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001226
	// succ:  l00001056 l00001226
l00001056:
	v21 = d0
	Mem0[a4 + -32750:word32] = v21
	CVZN = cond(v21)
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(NE,Z) l00001066
	// succ:  l00001060 l00001066
l00001060:
	d4 = 2
	CVZN = cond(d4)
	d2 = 8
	CVZN = cond(d2)
	goto l00001076
	// succ:  l00001076
l00001066:
	a0 = a2
	d4 = 3
	CVZN = cond(d4)
	// succ:  l0000106A
l0000106A:
	v48 = Mem0[a0:byte] - 0x20
	CVZN = cond(v48)
	branch Test(NE,Z) l00001072
	// succ:  l00001070 l00001072
l00001070:
	v49 = (word16) d4 + 0x0001
	d4 = DPB(d4, v49, 0)
	CVZNX = cond(v49)
	// succ:  l00001072
l00001072:
	v55 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	ZN = cond(v55 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000106A
	// succ:  l00001076 l0000106A
l00001076:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d0 = d0 + 0x00000011
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000123E
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	d5 = d0
	CVZN = cond(d5)
	d0 = d0 + d2
	CVZNX = cond(d0)
	d0 = d0 + 0x00000011
	CVZNX = cond(d0)
	d3 = d0
	CVZN = cond(d3)
	d1 = 0x00010001
	CVZN = cond(d1)
	d0 = AllocMem(d0, d1)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000123E
	// succ:  l00001096 l0000123E
l00001096:
	a7 = a7 - 0x00000004
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	a5 = d0
	v29 = d3
	Mem0[a5:word32] = v29
	CVZN = cond(v29)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	v30 = d4
	Mem0[a5 + 12:word32] = v30
	CVZN = cond(v30)
	a0 = a5 + 16
	a0 = a0 + d5
	v31 = a0
	Mem0[a5 + 8:word32] = v31
	CVZN = cond(v31)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	a7 = a7 - 0x00000004
	v56 = d0
	Mem0[a7:word32] = v56
	CVZN = cond(v56)
	a5 = d0
	v57 = d3
	Mem0[a5:word32] = v57
	CVZN = cond(v57)
	d4 = d4 - 0x00000001
	CVZNX = cond(d4)
	v58 = d4
	Mem0[a5 + 12:word32] = v58
	CVZN = cond(v58)
	a0 = a5 + 16
	a0 = a0 + d5
	v59 = a0
	Mem0[a5 + 8:word32] = v59
	CVZN = cond(v59)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	d0 = Mem0[a3 + 172:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001190
	// succ:  l000010B6 l00001190
l000010B6:
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 16:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a1 = Mem0[a5 + 8:word32]
	a6 = a5 + 16
	a0 = d0
	d0 = 0
	CVZN = cond(d0)
	v32 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	Mem0[a0 + d0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v33 = a0
	Mem0[a6:word32] = v33
	a6 = a6 + 0x00000004
	CVZN = cond(v33)
	d3 = 1
	CVZN = cond(d3)
	a0 = a2 + d2
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 16:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a1 = Mem0[a5 + 8:word32]
	a6 = a5 + 16
	a0 = d0
	d0 = 0
	CVZN = cond(d0)
	v60 = Mem0[a0:byte]
	a0 = a0 + 0x00000001
	d0 = DPB(d0, v60, 0)
	CVZN = cond(v60)
	Mem0[a0 + d0:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	v61 = a0
	Mem0[a6:word32] = v61
	a6 = a6 + 0x00000004
	CVZN = cond(v61)
	d3 = 1
	CVZN = cond(d3)
	a0 = a2 + d2
	// succ:  l000010DA
l000010DA:
	a0 = a0 - 0x00000001
	v34 = Mem0[a0:byte] - 0x20
	CVZN = cond(v34)
	branch d2 != 0xFFFFFFFF l000010DA
	// succ:  l000010E2 l000010DA
l000010E2:
	d2 = d2 - 0x00000001
	Mem0[a0 + 1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l000010E6
l000010E6:
	v37 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v37, 0)
	CVZN = cond(v37)
	branch Test(EQ,Z) l00001148
	// succ:  l000010EA l00001148
l000010EA:
	v38 = (byte) d1 - 0x20
	CVZN = cond(v38)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F0 l000010E6
l000010F0:
	v39 = (byte) d1 - 0x09
	CVZN = cond(v39)
	branch Test(EQ,Z) l000010E6
	// succ:  l000010F6 l000010E6
l000010F6:
	v40 = d3 - Mem0[a5 + 12:word32]
	CVZN = cond(v40)
	branch Test(EQ,Z) l00001148
	// succ:  l000010FC l00001148
l000010FC:
	v41 = a1
	Mem0[a6:word32] = v41
	a6 = a6 + 0x00000004
	CVZN = cond(v41)
	v42 = (word16) d3 + 0x0001
	d3 = DPB(d3, v42, 0)
	CVZNX = cond(v42)
	v43 = (byte) d1 - 0x22
	CVZN = cond(v43)
	branch Test(EQ,Z) l0000111A
	// succ:  l00001106 l0000111A
l00001106:
	v44 = (byte) d1
	Mem0[a1:byte] = v44
	a1 = a1 + 0x00000001
	CVZN = cond(v44)
	// succ:  l00001108
l00001108:
	v45 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v45, 0)
	CVZN = cond(v45)
	branch Test(EQ,Z) l00001148
	// succ:  l0000110C l00001148
l0000110C:
	v46 = (byte) d1 - 0x20
	CVZN = cond(v46)
	branch Test(EQ,Z) l00001116
	// succ:  l00001112 l00001116
l00001112:
	v47 = (byte) d1
	Mem0[a1:byte] = v47
	a1 = a1 + 0x00000001
	CVZN = cond(v47)
	goto l00001108
	// succ:  l00001108
l00001116:
	Mem0[a1:byte] = 0x00
	a1 = a1 + 0x00000001
	Z = true
	C = false
	N = false
	V = false
	goto l000010E6
	// succ:  l000010E6
l0000111A:
	v70 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v70, 0)
	CVZN = cond(v70)
	branch Test(EQ,Z) l00001148
	// succ:  l0000111E l00001148
l0000111E:
	v71 = (byte) d1 - 0x22
	CVZN = cond(v71)
	branch Test(EQ,Z) l00001116
	// succ:  l00001124 l00001116
l00001124:
	v72 = (byte) d1 - 0x2A
	CVZN = cond(v72)
	branch Test(NE,Z) l00001144
	// succ:  l0000112A l00001144
l0000112A:
	v73 = Mem0[a2:byte]
	a2 = a2 + 0x00000001
	d1 = DPB(d1, v73, 0)
	CVZN = cond(v73)
	v74 = (byte) d1
	d2 = DPB(d2, v74, 0)
	CVZN = cond(v74)
	v75 = (byte) d2 & 0xDF
	d2 = DPB(d2, v75, 0)
	ZN = cond(v75)
	C = false
	V = false
	v76 = (byte) d2 - 0x4E
	CVZN = cond(v76)
	branch Test(NE,Z) l0000113C
	// succ:  l00001138 l0000113C
l00001138:
	d1 = 10
	CVZN = cond(d1)
	goto l00001144
	// succ:  l00001144
l0000113C:
	v79 = (byte) d2 - 0x45
	CVZN = cond(v79)
	branch Test(NE,Z) l00001144
	// succ:  l00001142 l00001144
l00001142:
	d1 = 27
	CVZN = cond(d1)
	// succ:  l00001144
l00001144:
	v80 = (byte) d1
	Mem0[a1:byte] = v80
	a1 = a1 + 0x00000001
	CVZN = cond(v80)
	goto l0000111A
	// succ:  l0000111A
l00001148:
	Mem0[a1:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	Mem0[a6:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + 16
	a7 = a7 - 0x00000004
	v83 = d3
	Mem0[a7:word32] = v83
	CVZN = cond(v83)
	a6 = Mem0[a4 + -32750:word32]
	execPrivate4()
	v84 = d0
	Mem0[a4 + -32738:word32] = v84
	CVZN = cond(v84)
	execPrivate5()
	v85 = d0
	Mem0[a4 + -32734:word32] = v85
	CVZN = cond(v85)
	a6 = Mem0[a4 + -32754:word32]
	v86 = Mem0[a6 + 20:word16] - 0x0024
	CVZN = cond(v86)
	branch Test(ULT,C) l0000117A
	// succ:  l00001172 l0000117A
l00001172:
	v87 = Mem0[a3 + 224:word32]
	Mem0[a4 + -32730:word32] = v87
	CVZN = cond(v87)
	branch Test(NE,Z) l0000117E
	// succ:  l0000117A l0000117E
l0000117A:
	v88 = d0
	Mem0[a4 + -32730:word32] = v88
	CVZN = cond(v88)
	// succ:  l0000117E
l0000117E:
	v89 = Mem0[a3 + 8:byte] - 0x0D
	CVZN = cond(v89)
	branch Test(NE,Z) l000011F8
	// succ:  l00001186 l000011F8
l00001186:
	a0 = Mem0[a3 + 176:word32]
	v90 = Mem0[a0:word32]
	a0 = a0 + 0x00000004
	d0 = v90
	CVZN = cond(d0)
	a0 = a0 - d0
	CVZNX = cond(a0)
	goto l00001202
	// succ:  l00001202
l00001190:
	call fn00001214 (retsize: 4;)
	v50 = d0
	Mem0[a7:word32] = v50
	CVZN = cond(v50)
	v51 = d0
	Mem0[a4 + -32746:word32] = v51
	CVZN = cond(v51)
	v52 = d0
	Mem0[a4 + -32742:word32] = v52
	CVZN = cond(v52)
	a7 = a7 - 0x00000004
	v53 = d0
	Mem0[a7:word32] = v53
	CVZN = cond(v53)
	a7 = a7 - 0x00000004
	Mem0[0x00000000:word32] = 0x00000000
	Z = true
	C = false
	N = false
	V = false
	a6 = Mem0[a4 + -32750:word32]
	a2 = d0
	d0 = Mem0[a2 + 36:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011B6
	// succ:  l000011AE l000011B6
l000011AE:
	a0 = d0
	d1 = Mem0[a0:word32]
	CVZN = cond(d1)
	Enable()
	// succ:  l000011B6
l000011B6:
	a0 = 0x000012C8
	d1 = a0
	CVZN = cond(d1)
	d2 = 0x000003ED
	CVZN = cond(d2)
	Supervisor(a5)
	v54 = d0
	Mem0[a5 + 4:word32] = v54
	CVZN = cond(v54)
	branch Test(NE,Z) l000011D2
	// succ:  l000011CC l000011D2
l000011CC:
	d2 = 20
	CVZN = cond(d2)
	// succ:  l000011CC_thunk_fn0000127C
l000011CC_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l000011D2:
	v64 = d0
	Mem0[a4 + -32738:word32] = v64
	CVZN = cond(v64)
	v65 = d0
	Mem0[a4 + -32734:word32] = v65
	CVZN = cond(v65)
	v66 = d0
	Mem0[a4 + -32730:word32] = v66
	CVZN = cond(v66)
	v67 = d0
	Mem0[a3 + 156:word32] = v67
	CVZN = cond(v67)
	v68 = d0
	Mem0[a3 + 160:word32] = v68
	CVZN = cond(v68)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a0 = d0
	d0 = Mem0[a0 + 8:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000011F4
	// succ:  l000011F0 l000011F4
l000011F0:
	v69 = d0
	Mem0[a3 + 164:word32] = v69
	CVZN = cond(v69)
	// succ:  l000011F4
l000011F4:
	a6 = Mem0[a4 + -32754:word32]
	// succ:  l000011F8
l000011F8:
	d0 = Mem0[a3 + 62:word32]
	CVZN = cond(d0)
	a0 = Mem0[a3 + 58:word32]
	d0 = d0 - a0
	CVZNX = cond(d0)
	// succ:  l00001202
l00001202:
	v77 = a0
	Mem0[a4 + -32718:word32] = v77
	CVZN = cond(v77)
	v78 = a7
	Mem0[a4 + -32714:word32] = v78
	CVZN = cond(v78)
	call fn00001354 (retsize: 4;)
	d2 = 0
	CVZN = cond(d2)
	// succ:  l00001212_thunk_fn0000127C
l00001212_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001000_exit
l00001226:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = 0x00038007
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	goto l0000125C
	// succ:  l0000125C
l0000123E:
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d7
	d7 = 0x00010000
	CVZN = cond(d7)
	a6 = Mem0[0x00000004:word32]
	Alert(d7)
	d7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	// succ:  l0000125C
l0000125C:
	ZN = cond(Mem0[a3 + 172:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001268
	// succ:  l00001262 l00001268
l00001262:
	call fn00001214 (retsize: 4;)
	a2 = d0
	call fn0000126C (retsize: 4;)
	// succ:  l00001268
l00001268:
	d0 = 20
	CVZN = cond(d0)
	return
	// succ:  fn00001000_exit
fn00001000_exit:


// fn00001214
// Return size: 4
void fn00001214()
fn00001214_entry:
	// succ:  l00001214
l00001214:
	a7 = fp
	a0 = a3 + 92
	WaitPort(a0)
	a0 = a3 + 92
	GetMsg(a0)
	return
	// succ:  fn00001214_exit
fn00001214_exit:


// fn0000126C
// Return size: 4
void fn0000126C()
fn0000126C_entry:
	// succ:  l0000126C
l0000126C:
	a7 = fp
	Forbid()
	a1 = a2
	ReplyMsg(a1)
	return
	// succ:  fn0000126C_exit
fn0000126C_exit:


// fn00001278
// Return size: 0
void fn00001278()
fn00001278_entry:
	// succ:  l00001278
l00001278:
	a7 = fp
	d2 = Mem0[a7 + 4:word32]
	CVZN = cond(d2)
	// succ:  l00001278_thunk_fn0000127C
l00001278_thunk_fn0000127C:
	call fn0000127C (retsize: 0;)
	return
	// succ:  fn00001278_exit
fn00001278_exit:


// fn0000127C
// Return size: 4
void fn0000127C()
fn0000127C_entry:
	// succ:  l0000127C
l0000127C:
	a4 = 0x000093BE
	a6 = Mem0[a4 + -32754:word32]
	a7 = Mem0[a4 + -32758:word32]
	a7 = a7 - 0x00000008
	v5 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v5
	v7 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a5 = v7
	d1 = Mem0[a5 + 4:word32]
	CVZN = cond(d1)
	branch Test(EQ,Z) l0000129E
	// succ:  l00001296 l0000129E
l00001296:
	a6 = Mem0[a4 + -32750:word32]
	execPrivate1()
	// succ:  l0000129E
l0000129E:
	a6 = Mem0[a4 + -32754:word32]
	a1 = Mem0[a4 + -32750:word32]
	CloseLibrary(a1)
	d0 = a2
	CVZN = cond(d0)
	branch Test(EQ,Z) l000012B0
	// succ:  l000012AE l000012B0
l000012AE:
	call fn0000126C (retsize: 4;)
	// succ:  l000012B0
l000012B0:
	a1 = a5
	d0 = Mem0[a5:word32]
	CVZN = cond(d0)
	FreeMem(a1, d0)
	d0 = d2
	CVZN = cond(d0)
	return
	// succ:  fn0000127C_exit
fn0000127C_exit:


// fn000012D0
// Return size: 4
void fn000012D0()
fn000012D0_entry:
	// succ:  l000012D0
l000012D0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = d2
	a3 = 0x00001404
	d0 = 0x00001404
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001308
	// succ:  l000012E2 l00001308
l000012E2:
	d2 = 1
	CVZN = cond(d2)
	ZN = cond(Mem0[a3 + 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000012F6
	// succ:  l000012EA l000012F6
l000012EA:
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	ZN = cond(Mem0[a3 + d0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000012EA
	// succ:  l000012F6 l000012EA
l000012F6:
	d2 = d2 - 0x00000001
	CVZNX = cond(d2)
	branch Test(EQ,Z) l00001308
	// succ:  l000012FA l00001308
l000012FA:
	d0 = d2
	CVZN = cond(d0)
	d0 = d0 << 0x00000002
	CVZNX = cond(d0)
	a2 = Mem0[a3 + d0:word32]
l00001308:
	v13 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn00001278 (retsize: 4;)
	a7 = a7 + 0x0004
	d2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000012D0_exit
fn000012D0_exit:


// fn0000131C
// Return size: 4
void fn0000131C()
fn0000131C_entry:
	// succ:  l0000131C
l0000131C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	ZN = cond(Mem0[0x000013F8:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000134E
	// succ:  l00001328 l0000134E
l00001328:
	a3 = Mem0[0x0000140C:word32]
	d0 = 1
	CVZN = cond(d0)
	v11 = d0
	Mem0[0x000013F8:word32] = v11
	CVZN = cond(v11)
	d0 = a3
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001346
	// succ:  l0000133A l00001346
l0000133A:
	a2 = Mem0[a3 + 4:word32]
l00001346:
	v12 = Mem0[a7 + 12:word32]
	a7 = a7 - 0x00000004
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn000012D0 (retsize: 4;)
	a7 = a7 + 0x0004
	// succ:  l0000134E
l0000134E:
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000131C_exit
fn0000131C_exit:


// fn00001354
// Return size: 4
void fn00001354()
fn00001354_entry:
	// succ:  l00001354
l00001354:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a3
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a3 = 0x00001400
	d0 = 0x000013FC
	CVZN = cond(d0)
	branch Test(EQ,Z) l00001372
	// succ:  l00001366 l00001372
l00001366:
	ZN = cond(Mem0[a3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001372
	// succ:  l0000136A l00001372
l0000136A:
	v11 = Mem0[a3:word32]
	a3 = a3 + 0x00000004
	a2 = v11
l00001372:
	v12 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v13 = v12
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	v14 = Mem0[a7 + 16:word32]
	a7 = a7 - 0x00000004
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn00001390 (retsize: 4;)
	a7 = a7 - 0x00000004
	v16 = d0
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	call fn0000131C (retsize: 4;)
	a7 = a7 + 12
	a2 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a3 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001354_exit
fn00001354_exit:


// fn00001390
// Return size: 4
void fn00001390()
fn00001390_entry:
	// succ:  l00001390
l00001390:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a2
	a2 = 0x000013A4
	a7 = a7 - 0x00000004
	v4 = a2
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	call fn000013AC (retsize: 4;)
	a7 = a7 + 0x0004
	v6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	a2 = v6
	return
	// succ:  fn00001390_exit
fn00001390_exit:


// fn000013AC
// Return size: 4
void fn000013AC()
fn000013AC_entry:
	// succ:  l000013AC
l000013AC:
	a7 = fp
	a1 = Mem0[a7 + 4:word32]
	d0 = 0
	CVZN = cond(d0)
	goto l000013B6
	// succ:  l000013B6
l000013B4:
	d0 = d0 + 0x00000001
	CVZNX = cond(d0)
	// succ:  l000013B6
l000013B6:
	a0 = a1
	a1 = a1 + 0x00000001
	ZN = cond(Mem0[a0:byte] - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l000013B4
	// succ:  l000013BE l000013B4
l000013BE:
	return
	// succ:  fn000013AC_exit
fn000013AC_exit:


