void fn00001000(word32 d0, word32 d7, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 d0 d7
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5
// Preserved: a5 a7 d7
fn00001000_entry:
// DataOut: a0 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0010(32)

l00001000:
// DataOut: a0 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0010(32)

l0000100A:
	word32 a6_8 = Mem0[0x00000004:word32]
	word32 d2_192 = d0
	word32 a2_204 = a0
	branch Mem0[a6_8 + 20:word16] >=u 0x0024 l00001036
// DataOut: a2 a4 a6 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0010(32)

l00001020:
	word32 a0_474 = 0x000040F8
	word32 d0_477 = 0x0000000C
// DataOut: a0 a2 a4 a6 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001030:
	Mem481[a0_474:word32] = 0x00000000
	a0_474 = a0_474 + 4
	d0_477 = d0_477 - 0x00000001
	branch d0_477 != 0x00000000 l00001030
// DataOut: a0 a2 a4 a6 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a0:<invalid> d0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001036:
	Mem16[0x000040F8:word32] = fp
	Mem18[0x000040FC:word32] = a6_8
	word32 d0_20 = FindTask(0x00000000)
	word32 d0_24 = OpenLibrary(0x000012BC, 0)
	branch d0_24 == 0x00000000 l00001226
// DataOut: a2 a3 a4 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a0:<invalid> d0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001226:
	Alert(0x00038007)
// DataOut: a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid>

l00001056:
	word32 d4_428
	Mem83[0x00004100:word32] = d0_24
	branch Mem83[d0_20 + 172:word32] != 0x00000000 l00001066
// DataOut: a2 a3 a4 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001066:
	word32 a0_431 = a0
	d4_428 = 3
// DataOut: a0 a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l0000106A:
	branch Mem83[a0_486:byte] != 0x20 l00001072
// DataOut: a0 a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid> d4:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001070:
	d4_428 = SEQ(SLICE(d4_428, word16, 16), SLICE(d4_428, word16, 0) + 0x0001)
// DataOut: a0 a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid> d4:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001072:
	a0_431 = a0_486 + 1
	word32 a0_486 = a0_431
	branch Mem83[a0_486:byte] != 0x00 l0000106A
// DataOut: a0 a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid> d4:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001060:
	d4_428 = 2
	d2_192 = 8
// DataOut: a2 a3 a4 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d0 a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001076:
	word32 d0_92 = d4_428 << 0x00000002
	word32 d0_94 = d0_92 + d2_192
	word32 d1_208 = 0x00010001
	d0_24 = AllocMem(d0_94 + 0x00000011, 0x00010001)
	branch d0_24 == 0x00000000 l0000123E
// DataOut: a2 a3 a4 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l0000123E:
	CloseLibrary(Mem83[0x00004100:word32])
	Alert(0x00010000)
// DataOut: a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a0:<invalid>

l0000125C:
	branch Mem18[d0_20 + 172:word32] != 0x00000000 l00001268
// DataOut: a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d7:d7 a5:a5 a0:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 -12(fp):d7 -8(fp):a5 -4(fp):<invalid>

l00001262:
	fn00001214(d0_20)
	fn0000126C(d0_24)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d7:d7 a5:a5 a0:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 -12(fp):d7 -8(fp):a5 -4(fp):<invalid>

l00001268:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d7:d7 a5:a5 a0:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 -12(fp):d7 -8(fp):a5 -4(fp):<invalid>

l00001096:
	word32 dwLoc0C_127
	word32 a0_133
	Mem109[d0_24:word32] = d0_94 + 0x00000011
	Mem113[d0_24 + 12:word32] = d4_428 - 0x00000001
	Mem117[d0_24 + 8:word32] = d0_24 + 16 + d0_92
	Mem119[0x00000000:word32] = 0x00000000
	word32 d0_120 = Mem119[d0_20 + 172:word32]
	branch d0_120 == 0x00000000 l00001190
// DataOut: a2 a3 a4 a5 d0 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a0:<invalid>
// LocalsOut: fp(32) Local -0010(32)

l00001190:
	fn00001214(d0_20)
	Mem362[0x00004104:word32] = d0_120
	Mem364[0x00004108:word32] = d0_120
	Mem369[0x00000000:word32] = 0x00000000
	dwLoc0C_127 = d0_120
	word32 d0_372 = Mem369[d0_120 + 36:word32]
	branch d0_372 == 0x00000000 l000011B6
// DataOut: a3 a4 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011AE:
	Enable()
// DataOut: a3 a4 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a5:<invalid> a0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011B6:
	Supervisor(d0_24)
	Mem379[d0_24 + 4:word32] = d0_372
	branch d0_372 != 0x00000000 l000011D2
// DataOut: a3 a4 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011D2:
	Mem388[0x0000410C:word32] = d0_372
	Mem390[0x00004110:word32] = d0_372
	Mem392[0x00004114:word32] = d0_372
	Mem394[d0_20 + 156:word32] = d0_372
	Mem396[d0_20 + 160:word32] = d0_372
	word32 d0_400 = Mem396[(d0_372 << 0x00000002) + 8:word32]
	branch d0_400 == 0x00000000 l000011F4
// DataOut: a3 a4 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0x000003ED a2:<invalid> a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:000012C8 -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011F0:
	Mem406[d0_20 + 164:word32] = d0_400
// DataOut: a3 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0x000003ED a2:<invalid> a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011F4:
// DataOut: a3 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0x000003ED a2:<invalid> a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011CC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0x000003ED a2:<invalid> a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:000012C8 -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

l000011CE_thunk_fn0000127C:
	word32 a1_384
	word32 a5_385
	fn0000127C(out a1_384, out a5_385)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:20 a2:<invalid> a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:000012C8 a5:<invalid> a0:000012C8 -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

l000010B6:
	word32 d0_173 = Mem119[(d0_120 << 0x00000002) + 16:word32]
	word32 a1_176 = Mem119[d0_24 + 8:word32]
	word32 a0_181 = (d0_173 << 0x00000002) + 1
	word32 d0_183 = (uint32) (uint8) Mem119[d0_173 << 0x00000002:byte]
	Mem184[a0_181 + d0_183:byte] = 0x00
	Mem186[d0_24 + 16:word32] = a0_181
	word32 a6_187 = d0_24 + 20
	word32 d3_188 = 1
	word32 a0_190 = a0 + d2_192
// DataOut: a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:000012BC d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010DA:
	a0_190 = a0_190 - 1
	branch Mem186[a0_190:byte] >u 0x20 l000010E2
// DataOut: a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:1 d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010DE_1:
	word16 v37_355 = SLICE(d2_192, word16, 0)
	d2_192 = SEQ(SLICE(d2_192, word16, 16), v37_355 - 1)
	branch v37_355 != 0x0000 l000010DA
// DataOut: a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:1 d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010E2:
	Mem198[a0_190 + 1:byte] = 0x00
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:a0 a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:1 d1:0x00010001 a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010E6:
	byte v40_213 = Mem198[a2_204:byte]
	a2_204 = a2_204 + 1
	d1_208 = SEQ(SLICE(d1_208, word24, 8), v40_213)
	branch v40_213 == 0x00 l00001148
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010EA:
	branch SLICE(d1_208, byte, 0) == 0x20 l000010E6
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010F0:
	branch SLICE(d1_208, byte, 0) == 0x09 l000010E6
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010F6:
	branch d3_188 - Mem198[d0_24 + 12:word32] == 0x00000000 l00001148
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l000010FC:
	Mem271[a6_187:word32] = a1_176
	a6_187 = a6_187 + 4
	d3_188 = SEQ(SLICE(d3_188, word16, 16), SLICE(d3_188, word16, 0) + 0x0001)
	branch SLICE(d1_208, byte, 0) == 0x22 l0000111A
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l0000111A:
	byte v71_315 = Mem271[a2_204:byte]
	a2_204 = a2_204 + 1
	d1_208 = SEQ(SLICE(d1_208, word24, 8), v71_315)
	branch v71_315 == 0x00 l00001148
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l0000111E:
	branch SLICE(d1_208, byte, 0) == 0x22 l00001116
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001124:
	branch SLICE(d1_208, byte, 0) != 0x2A l00001144
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l0000112A:
	d1_208 = SEQ(SLICE(d1_208, word24, 8), Mem271[a2_204:byte])
	word32 d2_341 = SEQ(SLICE(d2_192, word24, 8), SLICE(d1_208, byte, 0))
	d2_192 = SEQ(SLICE(d2_341, word24, 8), SLICE(d2_341, byte, 0) & 0xDF)
	a2_204 = a2_204 + 1
	branch SLICE(d2_192, byte, 0) != 0x4E l0000113C
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l0000113C:
	branch SLICE(d2_192, byte, 0) != 0x45 l00001144
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001142:
	d1_208 = 27
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001138:
	d1_208 = 10
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001144:
	Mem332[a1_176:byte] = SLICE(d1_208, byte, 0)
	a1_176 = a1_176 + 1
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001106:
	Mem292[a1_176:byte] = SLICE(d1_208, byte, 0)
	a1_176 = a1_176 + 1
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001108:
	byte v50_298 = Mem292[a2_204:byte]
	a2_204 = a2_204 + 1
	d1_208 = SEQ(SLICE(d1_208, word24, 8), v50_298)
	branch v50_298 == 0x00 l00001148
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001148:
	Mem227[a1_176:byte] = 0x00
	Mem228[a6_187:word32] = 0x00000000
	execPrivate4()
	Mem236[0x0000410C:word32] = d0_183
	execPrivate5()
	Mem238[0x00004110:word32] = d0_183
	dwLoc0C_127 = d0_24 + 16
	dwLoc10 = d3_188
	branch Mem238[Mem238[0x000040FC:word32] + 20:word16] <u 0x0024 l0000117A
// DataOut: a3 a4 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l00001172:
	word32 v92_257 = Mem238[d0_20 + 224:word32]
	Mem258[0x00004114:word32] = v92_257
	branch v92_257 != 0x00000000 l0000117E
// DataOut: a3 a4 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l0000117A:
	Mem255[0x00004114:word32] = d0_183
// DataOut: a3 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l0000117E:
	branch Mem238[d0_20 + 8:byte] != 0x0D l000011F8
// DataOut: a3 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l000011F8:
	a0_133 = Mem119[d0_20 + 58:word32]
// DataOut: a0 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l00001186:
	word32 a0_247 = Mem238[d0_20 + 176:word32]
	a0_133 = a0_247 + 4 - Mem238[a0_247:word32]
// DataOut: a0 a4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Local -0010(32)

l00001202:
	Mem141[0x00004120:word32] = a0_133
	Mem143[0x00004124:word32] = fp - 16
	fn00001354(d7, dwLoc10, dwLoc0C_127)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

l00001212_thunk_fn0000127C:
	word32 a1_148
	word32 a5_149
	fn0000127C(out a1_148, out a5_149)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d2:0 a2:<invalid> a4:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

fn00001000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a2:<invalid> a4:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d7:d7 a5:<invalid> a0:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

l0000110C:
	branch SLICE(d1_208, byte, 0) == 0x20 l00001116
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001116:
	Mem285[a1_176:byte] = 0x00
	a1_176 = a1_176 + 1
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)

l00001112:
	Mem308[a1_176:byte] = SLICE(d1_208, byte, 0)
	a1_176 = a1_176 + 1
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d2:<invalid> a2:<invalid> a4:0000C0EE a6:<invalid> a1:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d1:<invalid> a5:<invalid> a0:<invalid> -4(fp):<invalid>
// LocalsOut: fp(32)



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut: a3 a4 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut: a3 a4 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00001214_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a0:a3 + 92



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut: a0 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut: a0 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn0000126C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a1:a2



word32 fn00001278(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1 d2
// Preserved: a7
fn00001278_entry:
// DataOut: a0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001278:
// DataOut: a0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001278_thunk_fn0000127C:
	word32 a1_5
	word32 a5_6
	return fn0000127C(out a1_5, out a5_6)
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid>

fn00001278_exit:
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d2:<invalid> a4:<invalid> a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> d0:<invalid>



word32 fn0000127C(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1
// Preserved: a7
fn0000127C_entry:
// DataOut: a0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l0000127C:
	word32 a7_5 = Mem0[0x000040F8:word32]
	word32 v7_10 = Mem0[a7_5 - 4:word32]
	word32 v5_7 = Mem0[a7_5 - 8:word32]
	word32 a5_12
	*a5Out = v7_10
	word32 d1_13 = Mem0[v7_10 + 4:word32]
	branch d1_13 == 0x00000000 l0000129E
// DataOut: a0 a2 a4 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001296:
	execPrivate1()
// DataOut: a0 a2 a4 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a4:0000C0EE a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid>

l0000129E:
	CloseLibrary(Mem0[0x00004100:word32])
	branch v5_7 == 0x00000000 l000012B0
// DataOut: a0 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a4:0000C0EE a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid>

l000012AE:
	fn0000126C(v5_7)
// DataOut: a0 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a4:0000C0EE a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> d0:<invalid>

l000012B0:
	FreeMem(v7_10, Mem0[v7_10:word32])
	word32 a1_21
	*a1Out = v7_10
	return d1_13
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a4:0000C0EE a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> d0:<invalid>

fn0000127C_exit:
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a4:0000C0EE a6:<invalid> a2:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> d0:d2



word32 fn000012D0(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
// Stack args: Stack +0004(32)
fn000012D0_entry:
// DataOut: a0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000012D0:
	word32 a3_11 = 0x00004240
	branch 0x00004240 == 0x00000000 l00001308
// DataOut: a0 a3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000012E2:
	word32 d2_43 = 1
	branch Mem0[0x00004244:word32] == 0x00000000 l000012F6
// DataOut: a0 a3 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00004240 d0:0x00004240 -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l000012EA:
	d2_43 = d2_43 + 0x00000001
	branch Mem0[0x00004240 + (d2_43 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut: a0 a3 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00004240 d0:<invalid> d2:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l000012F6:
	word32 d2_54 = d2_43 - 0x00000001
	branch d2_54 == 0x00000000 l00001308
// DataOut: a0 a3 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00004240 d0:<invalid> d2:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l000012FA:
	word32 d0_60 = d2_54 << 0x00000002
	word32 a2_62 = Mem0[a3_11 + d0_60:word32]
	word32 a7_67
	word32 a2_69
	word32 d2_70
	word32 d0_71
	byte CVZN_72
	bool Z_73
	byte ZN_74
	bool C_75
	bool V_76
	byte CVZNX_77
	word32 d1_78
	word32 a1_79
	word32 a5_80
	call a2_62 (retsize: 4; depth: 16)
		uses: a1,a2_62,a3_58,a5,a7_8,C_50,CVZN_13,CVZNX_61,d0_60,d1,d2_57,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10,V_49,Z_56,ZN_51
		defs: a1_79,a2_69,a3_68,a5_80,a7_67,C_75,CVZN_72,CVZNX_77,d0_71,d1_78,d2_70,V_76,Z_73,ZN_74
	d2_54 = d2_70 - 0x00000001
	branch d2_70 != 0x00000001 l000012FA
// DataOut: a0 a3 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00004240 d0:<invalid> d2:<invalid> a2:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l00001308:
	word32 a1_31
	word32 a5_32
	return fn00001278(dwArg04, out a1_31, out a5_32)
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a3:00004240 d0:<invalid> d2:<invalid> a2:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3

fn000012D0_exit:
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a3:a3 d0:<invalid> d2:d2 a2:a2 a4:<invalid> a6:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3



word32 fn0000131C(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
// Stack args: Stack +0004(32)
fn0000131C_entry:
	*a1Out = a1
	*a5Out = a5
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l0000131C:
	branch Mem0[0x00004128:word32] != 0x00000000 l0000134E
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001328:
	word32 a3_35 = Mem0[0x00004250:word32]
	Mem38[0x00004128:word32] = 1
	branch a3_35 == 0x00000000 l00001346
// DataOut: a0 a3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l0000133A:
	word32 a2_60 = Mem38[a3_35 + 4:word32]
	word32 a7_61
	word32 a3_62
	word32 a2_63
	byte ZN_64
	bool C_65
	bool V_66
	bool Z_67
	word32 d0_68
	byte CVZN_69
	word32 d1_70
	word32 a1_71
	word32 a5_72
	call a2_60 (retsize: 4; depth: 12)
		uses: a1,a2_60,a3_59,a5,a7_5,C_11,CVZN_40,d0_39,d1,dwLoc04_4,dwLoc08_7,dwLoc0C,V_12,Z_41,ZN_9
		defs: a1_71,a2_63,a3_62,a5_72,a7_61,C_65,CVZN_69,d0_68,d1_70,V_66,Z_67,ZN_64
	a3_35 = Mem38[a3_62:word32]
	branch a3_35 != 0x00000000 l0000133A
// DataOut: a0 a3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Stack +0004(32)

l00001346:
	word32 a1_55
	word32 a5_56
	d1 = fn000012D0(dwArg04, out a1_55, out a5_56)
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000134E:
	return d1
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> a4:<invalid> a6:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a3

fn0000131C_exit:
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 a3:a3 d0:<invalid> a4:<invalid> a6:<invalid> a5:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a3



void fn00001354(word32 d7, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d7
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut: d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001354:
	word32 a3_50 = 0x00004238
	branch 0x00004234 == 0x00000000 l00001372
// DataOut: a3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001366:
	branch Mem0[0x00004238:word32] == 0x00000000 l00001372
// DataOut: a3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:00004238 d0:0x00004234 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000136A:
	word32 a7_60
	word32 a2_62
	word32 d0_63
	byte CVZN_64
	bool Z_65
	byte ZN_66
	bool C_67
	bool V_68
	word32 a1_70
	word32 a5_71
	word32 d1_72
	call Mem0[a3_50:word32] (retsize: 4; depth: 12)
		uses: a1,a2_53,a3_52,a5,a7_5,C_48,CVZN_10,d0_9,d1,d7,dwLoc04_4,dwLoc08_7,dwLoc0C,dwLoc10,dwLoc14,V_49,Z_47,ZN_46
		defs: a1_70,a2_62,a3_61,a5_71,a7_60,C_67,CVZN_64,d0_63,d1_72,d7_69,V_68,Z_65,ZN_66
	branch Mem0[a3_50:word32] != 0x00000000 l0000136A
// DataOut: a3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001372:
	word32 a1_37
	word32 a5_38
	fn0000131C(fn00001390(d7), out a1_37, out a5_38)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 a3:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a3

fn00001354_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a3:a3 d0:<invalid> a2:a2 a0:<invalid> d1:<invalid> a4:<invalid> a6:<invalid> a5:<invalid> a1:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a3



word32 fn00001390(word32 d7)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d7
// LiveOut: d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00001390_entry:
// DataOut: d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0004(32) Local -0014(32) Local -0030(32) Local -0038(32) Local -0040(32) Local -0048(32)

l00001390:
	word32 d1_20
	word32 a1_21
	word32 d0_22 = fn00004068(0x000016B0, out d1_20, out a1_21)
	word32 d1_31
	word32 a1_32
	word32 d1_42
	word32 a1_43
	word32 d0_44 = fn000016FC(fn00002E40(d0_22, d1_20, d7, a1_21, 0x000016CC, out d1_31, out a1_32), 0x000016D0, out d1_42, out a1_43)
	word32 d1_52
	word32 a1_53
	word32 d0_54 = fn00002E40(d0_44, d1_42, d7, a1_43, 0x000016EC, out d1_52, out a1_53)
	word32 d1_62
	word32 a1_63
	word32 d0_115 = fn00002E40(d0_54, d1_52, d7, a1_53, 0x000016F0, out d1_62, out a1_63)
	word32 d3_119 = 1
// DataOut: d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0004(32) Local -0014(32) Local -0034(32)

l0000168E:
	branch d3_119 - dwLoc04 <= 0x00000000 l000013EA
// DataOut: d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFD8 a0:<invalid> d3:<invalid> d2:<invalid> d0:<invalid> d1:<invalid> d4:<invalid> d5:<invalid> d6:<invalid> a1:<invalid> a5:<invalid> -76(fp):000016F0 -72(fp):fp + 0xFFFFFFF0 -68(fp):000016EC -64(fp):fp + 0xFFFFFFEC -60(fp):000016D0 -56(fp):<invalid> -52(fp):000016CC -48(fp):fp + 0xFFFFFFFC -44(fp):000016B0 -40(fp):d2 -36(fp):d3 -32(fp):d4 -28(fp):d5 -24(fp):d6 -20(fp):<invalid>
// LocalsOut: fp(32) Local -0004(32) Local -0014(32) Local -0034(32)

l000013EA:
	word32 d2_106 = 1
// DataOut: d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFD8 a0:<invalid> d3:<invalid> d2:<invalid> d0:<invalid> d1:<invalid> d4:<invalid> d5:<invalid> d6:<invalid> a1:<invalid> a5:<invalid> -76(fp):000016F0 -72(fp):fp + 0xFFFFFFF0 -68(fp):000016EC -64(fp):fp + 0xFFFFFFEC -60(fp):000016D0 -56(fp):<invalid> -52(fp):000016CC -48(fp):fp + 0xFFFFFFFC -44(fp):000016B0 -40(fp):d2 -36(fp):d3 -32(fp):d4 -28(fp):d5 -24(fp):d6 -20(fp):<invalid>
// LocalsOut: fp(32) Local -0004(32) Local -0014(32) Local -0034(32)

l00001684:
	d0_115 = 40
	branch d2_106 <= 40 l000013F0
// DataOut: d0 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFD8 a0:<invalid> d3:<invalid> d2:<invalid> d0:<invalid> d1:<invalid> d4:<invalid> d5:<invalid> d6:<invalid> a1:<invalid> a5:<invalid> -76(fp):000016F0 -72(fp):fp + 0xFFFFFFF0 -68(fp):000016EC -64(fp):fp + 0xFFFFFFEC -60(fp):000016D0 -56(fp):<invalid> -52(fp):000016CC -48(fp):fp + 0xFFFFFFFC -44(fp):000016B0 -40(fp):d2 -36(fp):d3 -32(fp):d4 -28(fp):d5 -24(fp):d6 -20(fp):<invalid>
// LocalsOut: fp(32) Local -0004(32) Local -0014(32) Local -0034(32)

l000013F0:
	word32 d4_127 = __swap(3) *u SLICE(dwLoc14, word16, 0)
	word32 d0_136 = SLICE(dwLoc14, word16, 0) *u 3 + SEQ(SLICE(__swap(SEQ(SLICE(d4_127, word16, 16), SLICE(d4_127 + __swap(dwLoc14) *u 0x0003, word16, 0))), word16, 16), 0x0000)
	word32 d4_142 = __swap(d0_136) *u SLICE(dwLoc14, word16, 0)
	word32 d0_151 = d0_136 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_142, word16, 16), SLICE(d4_142 + __swap(dwLoc14) *u SLICE(d0_136, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_157 = __swap(d0_151) *u SLICE(dwLoc14, word16, 0)
	word32 d0_166 = d0_151 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_157, word16, 16), SLICE(d4_157 + __swap(dwLoc14) *u SLICE(d0_151, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_172 = __swap(d0_166) *u SLICE(dwLoc14, word16, 0)
	word32 d0_181 = d0_166 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_172, word16, 16), SLICE(d4_172 + __swap(dwLoc14) *u SLICE(d0_166, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_187 = __swap(d0_181) *u SLICE(dwLoc14, word16, 0)
	word32 d0_196 = d0_181 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_187, word16, 16), SLICE(d4_187 + __swap(dwLoc14) *u SLICE(d0_181, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_202 = __swap(d0_196) *u SLICE(dwLoc14, word16, 0)
	word32 d0_211 = d0_196 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_202, word16, 16), SLICE(d4_202 + __swap(dwLoc14) *u SLICE(d0_196, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_217 = __swap(d0_211) *u SLICE(dwLoc14, word16, 0)
	word32 d0_226 = d0_211 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_217, word16, 16), SLICE(d4_217 + __swap(dwLoc14) *u SLICE(d0_211, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_232 = __swap(d0_226) *u SLICE(dwLoc14, word16, 0)
	word32 d0_241 = d0_226 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_232, word16, 16), SLICE(d4_232 + __swap(dwLoc14) *u SLICE(d0_226, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_247 = __swap(d0_241) *u SLICE(dwLoc14, word16, 0)
	word32 d0_256 = d0_241 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_247, word16, 16), SLICE(d4_247 + __swap(dwLoc14) *u SLICE(d0_241, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_262 = __swap(d0_256) *u SLICE(dwLoc14, word16, 0)
	word32 d0_271 = d0_256 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_262, word16, 16), SLICE(d4_262 + __swap(dwLoc14) *u SLICE(d0_256, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_277 = __swap(d0_271) *u SLICE(dwLoc14, word16, 0)
	word32 d0_286 = d0_271 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_277, word16, 16), SLICE(d4_277 + __swap(dwLoc14) *u SLICE(d0_271, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_292 = __swap(d0_286) *u SLICE(dwLoc14, word16, 0)
	word32 d0_301 = d0_286 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_292, word16, 16), SLICE(d4_292 + __swap(dwLoc14) *u SLICE(d0_286, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_307 = __swap(d0_301) *u SLICE(dwLoc14, word16, 0)
	word32 d0_316 = d0_301 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_307, word16, 16), SLICE(d4_307 + __swap(dwLoc14) *u SLICE(d0_301, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_322 = __swap(d0_316) *u SLICE(dwLoc14, word16, 0)
	word32 d0_331 = d0_316 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_322, word16, 16), SLICE(d4_322 + __swap(dwLoc14) *u SLICE(d0_316, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_337 = __swap(d0_331) *u SLICE(dwLoc14, word16, 0)
	word32 d0_346 = d0_331 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_337, word16, 16), SLICE(d4_337 + __swap(dwLoc14) *u SLICE(d0_331, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_352 = __swap(d0_346) *u SLICE(dwLoc14, word16, 0)
	word32 d0_361 = d0_346 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_352, word16, 16), SLICE(d4_352 + __swap(dwLoc14) *u SLICE(d0_346, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_367 = __swap(d0_361) *u SLICE(dwLoc14, word16, 0)
	word32 d0_376 = d0_361 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_367, word16, 16), SLICE(d4_367 + __swap(dwLoc14) *u SLICE(d0_361, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_382 = __swap(d0_376) *u SLICE(dwLoc14, word16, 0)
	word32 d0_391 = d0_376 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_382, word16, 16), SLICE(d4_382 + __swap(dwLoc14) *u SLICE(d0_376, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_397 = __swap(d0_391) *u SLICE(dwLoc14, word16, 0)
	word32 d0_406 = d0_391 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_397, word16, 16), SLICE(d4_397 + __swap(dwLoc14) *u SLICE(d0_391, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_412 = __swap(d0_406) *u SLICE(dwLoc14, word16, 0)
	word32 d0_421 = d0_406 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_412, word16, 16), SLICE(d4_412 + __swap(dwLoc14) *u SLICE(d0_406, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_427 = __swap(d0_421) *u SLICE(dwLoc14, word16, 0)
	word32 d0_436 = d0_421 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_427, word16, 16), SLICE(d4_427 + __swap(dwLoc14) *u SLICE(d0_421, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_442 = __swap(d0_436) *u SLICE(dwLoc14, word16, 0)
	word32 d0_451 = d0_436 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_442, word16, 16), SLICE(d4_442 + __swap(dwLoc14) *u SLICE(d0_436, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_457 = __swap(d0_451) *u SLICE(dwLoc14, word16, 0)
	word32 d0_466 = d0_451 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_457, word16, 16), SLICE(d4_457 + __swap(dwLoc14) *u SLICE(d0_451, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d4_472 = __swap(d0_466) *u SLICE(dwLoc14, word16, 0)
	word32 d0_481 = d0_466 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_472, word16, 16), SLICE(d4_472 + __swap(dwLoc14) *u SLICE(d0_466, word16, 0), word16, 0))), word16, 16), 0x0000)
	word32 d5_488 = __swap(d0_481) *u SLICE(dwLoc14, word16, 0)
	dwLoc14 = d0_481 *u SLICE(dwLoc14, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d5_488, word16, 16), SLICE(d5_488 + __swap(dwLoc14) *u SLICE(d0_481, word16, 0), word16, 0))), word16, 16), 0x0000)
	d2_106 = d2_106 + 0x00000001
// DataOut: d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFD8 a0:<invalid> d3:<invalid> d2:<invalid> d0:40 d1:<invalid> d4:<invalid> d5:<invalid> d6:<invalid> a1:<invalid> a5:<invalid> -76(fp):000016F0 -72(fp):fp + 0xFFFFFFF0 -68(fp):000016EC -64(fp):fp + 0xFFFFFFEC -60(fp):000016D0 -56(fp):<invalid> -52(fp):000016CC -48(fp):fp + 0xFFFFFFFC -44(fp):000016B0 -40(fp):d2 -36(fp):d3 -32(fp):d4 -28(fp):d5 -24(fp):d6 -20(fp):<invalid>
// LocalsOut: fp(32) Local -0004(32) Local -0014(32) Local -0034(32)

l0000168C:
	d3_119 = d3_119 + 0x00000001
// DataOut: d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFD8 a0:<invalid> d3:<invalid> d2:<invalid> d0:40 d1:<invalid> d4:<invalid> d5:<invalid> d6:<invalid> a1:<invalid> a5:<invalid> -76(fp):000016F0 -72(fp):fp + 0xFFFFFFF0 -68(fp):000016EC -64(fp):fp + 0xFFFFFFEC -60(fp):000016D0 -56(fp):<invalid> -52(fp):000016CC -48(fp):fp + 0xFFFFFFFC -44(fp):000016B0 -40(fp):d2 -36(fp):d3 -32(fp):d4 -28(fp):d5 -24(fp):d6 -20(fp):<invalid>
// LocalsOut: fp(32) Local -0004(32) Local -0014(32) Local -0034(32)

l00001696:
	word32 d1_91
	word32 a1_92
	return fn000016FC(d0_115, 0x000016F4, out d1_91, out a1_92)
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp + 0xFFFFFFD8 a0:<invalid> d3:<invalid> d2:<invalid> d0:<invalid> d1:<invalid> d4:<invalid> d5:<invalid> d6:<invalid> a1:<invalid> a5:<invalid> -76(fp):000016F0 -72(fp):fp + 0xFFFFFFF0 -68(fp):000016EC -64(fp):fp + 0xFFFFFFEC -60(fp):000016D0 -56(fp):<invalid> -52(fp):000016CC -48(fp):fp + 0xFFFFFFFC -44(fp):000016B0 -40(fp):d2 -36(fp):d3 -32(fp):d4 -28(fp):d5 -24(fp):d6 -20(fp):<invalid>

fn00001390_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a0:<invalid> d3:d3 d2:d2 d4:d4 d5:d5 d6:d6 d0:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> -76(fp):000016F0 -72(fp):fp + 0xFFFFFFF0 -68(fp):000016EC -64(fp):fp + 0xFFFFFFEC -60(fp):000016D0 -56(fp):<invalid> -52(fp):000016CC -48(fp):000016F4 -44(fp):<invalid> -40(fp):d2 -36(fp):d3 -32(fp):d4 -28(fp):d5 -24(fp):d6 -20(fp):<invalid>



word32 fn000016FC(word32 d0, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0
// LiveOut: a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
// Stack args: Stack +0004(32)
fn000016FC_entry:
// DataOut: d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000016FC:
	word32 d1_18
	word32 a1_19
	return fn00001718(d0, Mem0[0x00004258:word32], dwArg04, fp + 8, out d1_18, out a1_19)
// DataOut: a1 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn000016FC_exit:
// DataOut: a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):fp + 8



word32 fn00001718(word32 d0, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0
// LiveOut: a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4 d5 d6 d7
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32)
fn00001718_entry:
	*d1Out = d1
	*a1Out = a1
// DataOut: a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l00001718:
	word32 d0_121
	word32 a7_146 = fp + -112
	word32 d3_136 = dwArg0C
	word32 a5_144 = dwArg04
	word32 a4_143 = dwArg08
	word32 d6_113 = 0
	branch Mem0[dwArg08:byte] == 0x00 l0000205E
// DataOut: a1 a4 a5 a7 d0 d1 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001734:
	branch Mem0[a4_143:byte] != 0x25 l00002038
// DataOut: a1 a4 a5 a7 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002038:
	word32 a7_1843 = a7_146 - 4
	Mem1845[a7_1843:word32] = a5_144
	Mem1854[a7_1843 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0, word24, 8), Mem1845[a4_143:byte])
	a4_143 = a4_143 + 1
	word32 d1_1856
	word32 a0_1857
	word32 a1_1858
	d0 = fn00002098(dwArg00, dwArg04, out d1_1856, out a0_1857, out a1_1858, out a5_144)
	a7_146 = a7_1843 + 4
	branch d0 != 0xFFFFFFFF l00002056
// DataOut: a1 a4 a5 a7 d0 d1 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002056:
	d6_113 = d6_113 + 0x00000001
// DataOut: a1 a4 a5 a7 d0 d1 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002052:
	d0_121 = d6_113
// DataOut: a1 a7 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000173C:
	Mem176[a7_146 + 64:word32] = 0x00000000
	Mem178[a7_146 + 72:word32] = 0x00000000
	Mem182[a7_146 + 102:word32] = 0x00000000
	word32 d5_1660 = -1
	word32 d4_1350 = 105
	word32 a3_1398 = a7_146 + 76
	word32 d7_1005 = 0
	word32 a2_1612 = a4_143 + 1
	word32 d2_1178 = Mem182[a7_146 + 72:word32]
// DataOut: a1 a2 a3 a4 a5 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000175A:
	word32 d1_1709 = 0
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000175C:
	word32 a7_204 = a7_146 - 4
	Mem206[a7_204:word32] = d0
	d0 = Mem206[a7_204:word32]
	branch SLICE(SEQ(SLICE(d0, word24, 8), Mem206[0x00002070 + d1_1709:byte]), byte, 0) - Mem206[a2_1612:byte] != 0x00 l00001780
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001780:
	d1_1709 = d1_1709 + 0x00000001
	branch d1_1709 <u 0x00000005 l0000175C
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00002070 d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000176E:
	Mem1825[a7_204:word32] = d1_1709
	word32 d1_1827 = 1 << d1_1709
	d0 = d1_1827
	d1_1709 = Mem1825[a7_204:word32]
	d2_1178 = d2_1178 | d1_1827
	a2_1612 = a2_1612 + 1
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00002070 d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000178A:
	branch d1_1709 <u 0x00000005 l0000175A
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00002070 d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001792:
	word32 a0_1418
	word32 d0_1651
	Mem227[a7_146 + 72:word32] = d2_1178
	branch Mem227[a2_1612:byte] != 0x2A l000017D0
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00002070 d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017D0:
	a0_1418 = 0x00002B15 + (SEQ(SLICE(d0, word24, 8), Mem227[a2_1612:byte]) & 0x000000FF)
	word32 d0_1761 = (uint32) (uint8) Mem227[a0_1418:byte]
	d0_1651 = d0_1761 & 0x00000004
	branch (d0_1761 & 0x00000004) == 0x00000000 l0000183C
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00002070 d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017EC:
	d2_1178 = Mem227[a7_146 + 64:word32]
// DataOut: a1 a2 a3 a4 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017F0:
	Mem1776[a7_146 - 4:word32] = d3_136
	word32 d1_1781 = __swap(10) *u SLICE(d2_1178, word16, 0)
	word32 d1_1789 = SEQ(SLICE(__swap(SEQ(SLICE(d1_1781, word16, 16), SLICE(d1_1781 + __swap(d2_1178) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_1790 = SLICE(d2_1178, word16, 0) *u 10 + d1_1789
	a2_1612 = a2_1612 + 1
	a0_1418 = 0x00002B15 + (SEQ(SLICE(d0_1790, word24, 8), Mem1776[a2_1612:byte]) & 0x000000FF)
	word32 d1_1799 = (int32) (int16) (int8) SEQ(SLICE(d1_1789, word24, 8), Mem1776[a2_1612:byte])
	word32 d0_1813 = (uint32) (uint8) Mem1776[a0_1418:byte]
	d3_136 = Mem1776[a7_146 - 4:word32]
	d1_1709 = d1_1799 - 0x00000030
	d2_1178 = d1_1799 - 0x00000030 + d0_1790
	d0_1651 = d0_1813 & 0x00000004
	branch (d0_1813 & 0x00000004) != 0x00000000 l000017F0
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001838:
	Mem1820[a7_146 + 64:word32] = d2_1178
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000179C:
	d0_1651 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v37_1737 = Mem227[d0_1651:word32]
	Mem1738[a7_146 + 44:word32] = v37_1737
	a2_1612 = a2_1612 + 1
	d3_136 = d0_1651 + 0x00000004
	a0_1418 = d0_1651 + 0x00000004
	branch v37_1737 >= 0x00000000 l000017C8
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:00002070 d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017C8:
	Mem1750[a7_146 + 64:word32] = Mem1738[a7_146 + 44:word32]
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000017B4:
	Mem1742[a7_146 + 72:word32] = Mem1738[a7_146 + 72:word32] | 0x00000004
	d0_1651 = -Mem1742[a7_146 + 44:word32]
	Mem1747[a7_146 + 64:word32] = d0_1651
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000183C:
	branch Mem227[a2_1612:byte] != 0x2E l000018D0
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001844:
	a2_1612 = a2_1612 + 1
	branch Mem227[a2_1612:byte] != 0x2A l0000186A
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000186A:
	a0_1418 = 0x00002B15 + (SEQ(SLICE(d0_1651, word24, 8), Mem227[a2_1612:byte]) & 0x000000FF)
	word32 d0_1672 = (uint32) (uint8) Mem227[a0_1418:byte]
	d5_1660 = 0
	d0_1651 = d0_1672 & 0x00000004
	branch (d0_1672 & 0x00000004) == 0x00000000 l000018D0
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001888:
	word32 a7_1683 = a7_146 - 4
	Mem1685[a7_1683:word32] = d2_1178
	word32 d1_1690 = __swap(10) *u SLICE(d5_1660, word16, 0)
	word32 d1_1698 = SEQ(SLICE(__swap(SEQ(SLICE(d1_1690, word16, 16), SLICE(d1_1690 + __swap(d5_1660) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	word32 d0_1699 = SLICE(d5_1660, word16, 0) *u 10 + d1_1698
	a2_1612 = a2_1612 + 1
	a0_1418 = 0x00002B15 + (SEQ(SLICE(d0_1699, word24, 8), Mem1685[a2_1612:byte]) & 0x000000FF)
	word32 d1_1708 = (int32) (int16) (int8) SEQ(SLICE(d1_1698, word24, 8), Mem1685[a2_1612:byte])
	word32 d0_1722 = (uint32) (uint8) Mem1685[a0_1418:byte]
	d2_1178 = Mem1685[a7_1683:word32]
	d1_1709 = d1_1708 - 0x00000030
	d5_1660 = d1_1708 - 0x00000030 + d0_1699
	d0_1651 = d0_1722 & 0x00000004
	branch (d0_1722 & 0x00000004) != 0x00000000 l00001888
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000184C:
	d0_1651 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v45_1656 = Mem227[d0_1651:word32]
	Mem1657[a7_146 + 44:word32] = v45_1656
	a2_1612 = a2_1612 + 1
	d3_136 = d0_1651 + 0x00000004
	a0_1418 = d0_1651 + 0x00000004
	branch v45_1656 < 0x00000000 l000018D0
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001864:
	d5_1660 = Mem1657[a7_146 + 44:word32]
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:-1 d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018D0:
	word32 a7_258 = a7_146
	branch Mem227[a2_1612:byte] == 0x68 l000018F4
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018D6:
	branch Mem227[a2_1612:byte] == 0x6C l000018F4
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018DC:
	branch Mem227[a2_1612:byte] == 0x4C l000018F4
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018E2:
	branch Mem227[a2_1612:byte] == 0x6A l000018F4
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018E8:
	branch Mem227[a2_1612:byte] == 0x7A l000018F4
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018EE:
	branch Mem227[a2_1612:byte] != 0x74 l000018FA
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018F4:
	a2_1612 = a2_1612 + 1
	d4_1350 = (int32) (int16) (int8) (uint32) (uint8) Mem227[a2_1612:byte]
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:105 a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000018FA:
	branch d4_1350 != 0x00000068 l0000190C
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001902:
	branch Mem227[a2_1612:byte] != 0x68 l0000190C
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001908:
	d4_1350 = 2
	a2_1612 = a2_1612 + 1
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000190C:
	branch d4_1350 != 0x0000006C l0000191E
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001914:
	branch Mem227[a2_1612:byte] != 0x6C l0000191E
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000191A:
	d4_1350 = 1
	a2_1612 = a2_1612 + 1
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000191E:
	branch d4_1350 != 0x0000006A l00001928
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001926:
	d4_1350 = 1
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001928:
	branch d4_1350 != 0x0000007A l00001932
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001930:
	d4_1350 = 108
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001932:
	branch d4_1350 != 0x00000074 l0000193C
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000193A:
	d4_1350 = 105
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000193C:
	word32 d5_1404
	word32 d1_1046 = SEQ(SLICE(d1_1709, word24, 8), Mem227[a2_1612:byte])
	*d1Out = d1_1046
	word32 a2_1397 = a2_1612 + 1
	word32 d0_1400 = SEQ(SLICE(d0_1651, word24, 8), SLICE(d1_1046, byte, 0))
	branch SLICE(d1_1046, byte, 0) == 0x25 l00001DC4
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DC4:
	Mem1598[a7_146 + 102:word32] = 0x00000001
	a3_1398 = 0x0000206C
	d5_1404 = 0
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001948:
	branch SLICE(d0_1400, byte, 0) == 0x58 l00001996
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000194E:
	branch SLICE(d0_1400, byte, 0) == 0x63 l00001D44
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D44:
	branch d4_1350 != 0x0000006C l00001D60
// DataOut: a1 a2 a3 a5 a7 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D60:
	d0_1400 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1594[a3_1398:byte] = Mem227[d0_1400 + 0x00000003:byte]
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D4C:
	d0_1400 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1583[a3_1398:byte] = Mem227[d0_1400 + 0x00000003:byte]
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D72:
	a0_1418 = (d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_136 = (d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem1571[a7_146 + 102:word32] = 0x00000001
	d5_1404 = 0
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001956:
	branch SLICE(d0_1400, byte, 0) == 0x64 l00001996
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000195C:
	branch SLICE(d0_1400, byte, 0) == 0x69 l00001996
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001962:
	Mem1367[a7_146 + 44:byte] = SLICE(d0_1400, byte, 0)
	branch SLICE(d0_1400, byte, 0) == 0x6E l00001DD6
// DataOut: a0 a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DD6:
	branch d4_1350 != 0x00000001 l00001DF8
// DataOut: a1 a2 a3 a5 a7 d1 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DF8:
	branch d4_1350 != 0x0000006C l00001E16
// DataOut: a1 a2 a3 a5 a7 d1 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E16:
	branch d4_1350 != 0x00000068 l00001E34
// DataOut: a1 a2 a3 a5 a7 d1 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E34:
	branch d4_1350 != 0x00000002 l00001E52
// DataOut: a1 a2 a3 a5 a7 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E52:
	d0_1400 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem1367[d0_1400:word32]
	Mem1561[a0_1418:word32] = d6_113
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E3C:
	d0_1400 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem1367[d0_1400:word32]
	Mem1549[a0_1418:byte] = SLICE(d6_113, byte, 0)
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E1E:
	d0_1400 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem1367[d0_1400:word32]
	Mem1534[a0_1418:word16] = SLICE(d6_113, word16, 0)
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E00:
	d0_1400 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem1367[d0_1400:word32]
	Mem1519[a0_1418:word32] = d6_113
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DDE:
	d0_1400 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1418 = Mem1367[d0_1400:word32]
	Mem1500[a0_1418 + 4:word32] = d6_113
	Mem1501[a0_1418:word32] = 0x00000000
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E66:
	d3_136 = (d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem1485[a7_146 + 64:word32] = 0x00000000
	d5_1404 = 0
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000196E:
	word32 d0_1373 = SEQ(SLICE(d0_1400, word24, 8), Mem1367[a7_146 + 44:byte])
	word32 d0_1376 = SEQ(SLICE(d0_1373, word24, 8), SLICE(d0_1373, byte, 0) - 0x6F)
	byte v115_1378 = SLICE(d0_1376, byte, 0) - 0x01
	byte CZ_1380 = cond(v115_1378)
	branch v115_1378 <=u 0x00 l00001996
// DataOut: a0 a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000197C:
	word32 d0_1383 = SEQ(SLICE(d0_1376, word24, 8), Mem1367[a7_146 + 44:byte])
	branch SLICE(d0_1383, byte, 0) == 0x73 l00001D80
// DataOut: a0 a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D80:
	d0_1400 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3_1398 = Mem1367[d0_1400:word32]
	Mem1421[a7_146 + 102:word32] = 0x00000000
	d3_136 = d0_1400 + 0x00000004
	a0_1418 = d0_1400 + 0x00000004
	word32 a1_1420 = a3_1398
	*a1Out = a1_1420
	branch d5_1660 == 0x00000000 l00001DA2
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D9C:
	word32 v131_1473 = d5_1660 - Mem1421[a7_146 + 102:word32]
	CZ_1380 = cond(v131_1473) (alias)
	branch v131_1473 <=u 0x00000000 l00001DBE
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DA2:
	branch Mem1421[a3_1398:byte] == 0x00 l00001DBE
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DA6:
	d0_1400 = Mem1421[a7_146 + 102:word32]
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DAA:
	d0_1400 = d0_1400 + 0x00000001
	a1_1420 = a1_1420 + 1
	*a1Out = a1_1420
	CZ_1380 = DPB(CZ_1380, false, 0) (alias)
	branch CZ_1380 l00001DB6
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DB2:
	word32 v132_1470 = d5_1660 - d0_1400
	CZ_1380 = cond(v132_1470) (alias)
	branch v132_1470 <=u 0x00000000 l00001DBA
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DB6:
	branch Mem1421[a1_1420:byte] != 0x00 l00001DAA
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DBA:
	Mem1462[a7_146 + 102:word32] = d0_1400
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001DBE:
	d5_1404 = 0
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001988:
	branch SLICE(d0_1383, byte, 0) == 0x75 l00001996
// DataOut: a0 a1 a2 a4 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000198E:
	branch SLICE(d0_1383, byte, 0) != 0x78 l00001E6E
// DataOut: a0 a1 a2 a4 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E6E:
	branch SLICE(d1_1046, byte, 0) != 0x00 l00001E74
// DataOut: a0 a1 a2 a4 a5 a7 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E72:
	a2_1397 = a2_1397 - 1
// DataOut: a0 a1 a2 a4 a5 a7 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E74:
	d0_1400 = a2_1397 - a4_143
	Mem1403[a7_146 + 102:word32] = d0_1400
	Mem1405[a7_146 + 64:word32] = 0x00000000
	a3_1398 = a4_143
	d5_1404 = 0
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001996:
	branch SLICE(d1_1046, byte, 0) != 0x70 l000019A8
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000199C:
	Mem1353[a7_146 + 72:word32] = Mem227[a7_146 + 72:word32] | 0x00000001
	d4_1350 = 108
	d1_1046 = 120
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019A8:
	word32 d3_1015
	word32 a7_1158
	branch SLICE(d1_1046, byte, 0) == 0x64 l000019B6
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019AE:
	branch SLICE(d1_1046, byte, 0) != 0x69 l00001B00
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B00:
	word32 d0_1145
	branch d4_1350 != 0x00000001 l00001B24
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B24:
	branch d4_1350 != 0x0000006C l00001B46
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B46:
	d0_1145 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1344[a7_146 + 60:word32] = Mem227[d0_1145:word32]
	Mem1345[a7_146 + 56:word32] = 0x00000000
	d3_1015 = d0_1145 + 0x00000004
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B2C:
	d0_1145 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1329[a7_146 + 60:word32] = Mem227[d0_1145:word32]
	Mem1330[a7_146 + 56:word32] = 0x00000000
	d3_1015 = d0_1145 + 0x00000004
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B08:
	d0_1145 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1313[a7_146 + 60:word32] = Mem227[d0_1145 + 0x00000004:word32]
	Mem1315[a7_146 + 56:word32] = Mem1313[d0_1145:word32]
	d3_1015 = d0_1145 + 0x00000008
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B5E:
	branch d4_1350 != 0x00000068 l00001B7A
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B66:
	d0_1145 = SEQ(SLICE(d0_1145, word16, 16), Mem227[a7_146 + 62:word16])
	word32 a7_1290 = a7_146 - 4
	Mem1292[a7_1290:word32] = d1_1046
	Mem1298[a7_1290 + 64:word32] = (uint32) (uint16) SLICE(d0_1145, word16, 0)
	Mem1299[a7_1290 + 60:word32] = 0x00000000
	d1_1046 = Mem1299[a7_1290:word32]
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B7A:
	branch d4_1350 != 0x00000002 l00001B96
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B82:
	word32 d0_1272 = SEQ(SLICE(d0_1145, word24, 8), Mem227[a7_146 + 63:byte])
	word32 a7_1273 = a7_146 - 4
	Mem1275[a7_1273:word32] = d1_1046
	Mem1281[a7_1273 + 64:word32] = (uint32) (uint8) SLICE(d0_1272, byte, 0)
	Mem1282[a7_1273 + 60:word32] = 0x00000000
	d1_1046 = Mem1282[a7_1273:word32]
// DataOut: a2 a5 a7 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001B96:
	word32 d0_1160 = Mem227[a7_146 + 72:word32] & 1
	Mem1162[a7_146 + 44:byte] = SLICE(d1_1046, byte, 0)
	a7_1158 = a7_146
	branch d0_1160 == 0x00000000 l00001C34
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BA6:
	branch SLICE(d1_1046, byte, 0) != 0x6F l00001BE2
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BAC:
	branch d5_1660 != 0x00000000 l00001BD6
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BB0:
	word32 a7_1246 = a7_146 - 4
	Mem1248[a7_1246:word32] = d0_1160
	Mem1251[a7_1246 - 4:word32] = d1_1046
	word32 d0_1252 = Mem1251[a7_1246 + 64:word32]
	word32 d1_1253 = Mem1251[a7_1246 + 60:word32]
	Mem1256[a7_1246 - 8:word32] = d2_1178
	d2_1178 = Mem1256[a7_1246 - 8:word32]
	d1_1046 = Mem1256[a7_1246 - 4:word32]
	d0_1160 = Mem1256[a7_1246:word32]
	branch d1_1253 - (d0_1252 <u 0x00000000) == 0x00000000 l00001BE2
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BD6:
	Mem1244[a7_146 + 106:byte] = 0x30
	d7_1005 = 0x00000001
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BE2:
	a7_1158 = a7_146
	branch SLICE(d1_1046, byte, 0) == 0x78 l00001BF2
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BE8:
	Mem1225[a7_146 + 44:byte] = SLICE(d1_1046, byte, 0)
	branch SLICE(d1_1046, byte, 0) != 0x58 l00001C34
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001BF2:
	Mem1186[a7_146 + 44:byte] = SLICE(d1_1046, byte, 0)
	word32 a7_1187 = a7_146 - 4
	Mem1189[a7_1187:word32] = d0_1160
	Mem1192[a7_1187 - 4:word32] = d1_1046
	word32 d0_1193 = Mem1192[a7_1187 + 64:word32]
	word32 d1_1194 = Mem1192[a7_1187 + 60:word32]
	Mem1197[a7_1187 - 8:word32] = d2_1178
	d1_1046 = Mem1197[a7_1187 - 4:word32]
	a7_1158 = a7_1187 + 4
	branch d1_1194 - (d0_1193 <u 0x00000000) == 0x00000000 l00001C34
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C1C:
	Mem1215[a7_1187 + 110 + d7_1005:byte] = 0x30
	word32 d7_1213 = d7_1005 + 0x00000001
	Mem1220[a7_1187 + 110 + d7_1213:byte] = SLICE(d1_1046, byte, 0)
	Mem1222[a7_1187 + 48:byte] = SLICE(d1_1046, byte, 0)
	d7_1005 = d7_1213 + 0x00000001
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019B6:
	word32 d0_1013
	branch d4_1350 != 0x00000001 l000019DC
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019DC:
	branch d4_1350 != 0x0000006C l00001A08
// DataOut: a2 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A08:
	word32 d0_1051 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1055 = Mem227[d0_1051:word32]
	Mem1057[a7_146 + 52:word32] = d0_1055
	word32 a7_1058 = a7_146 - 4
	Mem1060[a7_1058:word32] = d1_1046
	Mem1065[a7_1058 + 52:word32] = d0_1055 >> 31
	word32 v235_1066 = Mem1065[a7_1058:word32]
	d3_1015 = d0_1051 + 0x00000004
	d0_1013 = d0_1055 >> 31
	d1_1046 = v235_1066
	branch d4_1350 != 0x00000068 l00001A4E
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A32:
	word32 d0_1109 = SEQ(SLICE(d0_1055 >> 31, word16, 16), Mem1065[a7_1058 + 58:word16])
	Mem1112[a7_1058:word32] = v235_1066
	word32 d1_1116 = (int32) (int16) SEQ(SLICE(v235_1066, word16, 16), SLICE(d0_1109, word16, 0))
	Mem1118[a7_1058 + 56:word32] = d1_1116
	Mem1121[a7_1058 - 4:word32] = d0_1109
	Mem1126[a7_1058 + 52:word32] = d1_1116 >> 31
	d1_1046 = Mem1126[a7_1058 - 4:word32]
	d0_1013 = Mem1126[a7_1058:word32]
// DataOut: a2 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A4E:
	branch d4_1350 != 0x00000002 l00001A74
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A56:
	word32 d0_1081 = SEQ(SLICE(d0_1013, word24, 8), Mem1065[a7_146 + 55:byte])
	word32 a7_1082 = a7_146 - 4
	Mem1084[a7_1082:word32] = d1_1046
	word32 d1_1089 = (int32) (int16) (int8) SEQ(SLICE(d1_1046, word24, 8), SLICE(d0_1081, byte, 0))
	Mem1091[a7_1082 + 56:word32] = d1_1089
	Mem1094[a7_1082 - 4:word32] = d0_1081
	Mem1099[a7_1082 + 52:word32] = d1_1089 >> 31
	d1_1046 = Mem1099[a7_1082 - 4:word32]
	d0_1013 = Mem1099[a7_1082:word32]
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019E4:
	word32 d0_1029 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1033 = Mem227[d0_1029:word32]
	Mem1035[a7_146 + 52:word32] = d0_1033
	word32 a7_1036 = a7_146 - 4
	Mem1038[a7_1036:word32] = d1_1046
	Mem1043[a7_1036 + 52:word32] = d0_1033 >> 31
	d3_1015 = d0_1029 + 0x00000004
	d0_1013 = d0_1033 >> 31
	d1_1046 = Mem1043[a7_1036:word32]
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l000019BE:
	d0_1013 = d3_136 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1019[a7_146 + 52:word32] = Mem227[d0_1013 + 0x00000004:word32]
	Mem1021[a7_146 + 48:word32] = Mem1019[d0_1013:word32]
	d3_1015 = d0_1013 + 0x00000008
// DataOut: a2 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A74:
	Mem921[a7_146 + 44:byte] = SLICE(d1_1046, byte, 0)
	word32 a7_922 = a7_146 - 4
	Mem924[a7_922:word32] = d0_1013
	Mem927[a7_922 - 4:word32] = d1_1046
	word32 d0_928 = Mem927[a7_922 + 56:word32]
	word32 d1_929 = Mem927[a7_922 + 52:word32]
	Mem932[a7_922 - 8:word32] = d2_1178
	word32 d1_942 = Mem932[a7_922 - 4:word32]
	a7_1158 = a7_922 + 4
	branch d1_929 - (d0_928 <u 0x00000000) >= 0x00000000 l00001ABE
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001ABE:
	d1_1046 = SEQ(SLICE(d1_942, word24, 8), Mem932[a7_922 + 48:byte])
	branch (Mem932[a7_922 + 76:word32] & 16) == 0x00000000 l00001AD8
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001AD8:
	branch (Mem932[a7_922 + 76:word32] & 8) == 0x00000000 l00001AEC
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001AE0:
	Mem1008[a7_922 + 110:byte] = 0x20
	d7_1005 = 0x00000001
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001ACA:
	Mem995[a7_922 + 110:byte] = 0x2B
	d7_1005 = 0x00000001
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001AEC:
	Mem984[a7_922 + 64:word32] = Mem932[a7_922 + 56:word32]
	Mem986[a7_922 + 60:word32] = Mem984[a7_922 + 52:word32]
	Mem988[a7_922 + 48:byte] = SLICE(d1_1046, byte, 0)
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001A9E:
	Mem950[a7_922 + 110:byte] = 0x2D
	d7_1005 = 0x00000001
	d1_1046 = -Mem950[a7_922 + 56:word32]
	a7_1158 = Mem950[a7_922 + 0x00000040:word32]
// DataOut: a2 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:0 a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C34:
	word32 d1_758 = SEQ(SLICE(d1_1046, word24, 8), Mem227[a7_1158 + 44:byte])
	a3_1398 = a7_1158 + 98
	branch SLICE(d1_758, byte, 0) == 0x78 l00001C48
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C42:
	branch SLICE(d1_758, byte, 0) != 0x58 l00001C52
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C52:
	branch SLICE(d1_758, byte, 0) != 0x6F l00001C62
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C62:
	Mem908[a7_1158 + 48:word32] = 0x0000000A
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C58:
	Mem905[a7_1158 + 48:word32] = 0x00000008
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C6A:
	Mem902[a7_1158 + 44:word32] = Mem227[a7_1158 + 48:word32]
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C48:
	Mem893[a7_1158 + 44:word32] = 0x00000010
// DataOut: a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C70:
	word32 a6_768
	Mem764[a7_1158 + 108:word32] = Mem227[a7_1158 + 44:word32]
	branch SLICE(d1_758, byte, 0) == 0x58 l00001C82
// DataOut: a2 a3 a5 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C82:
	a6_768 = 0x00002088
// DataOut: a2 a3 a5 a6 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C7C:
	a6_768 = 0x00002078
// DataOut: a2 a3 a5 a6 a7 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001C86:
	Mem770[a7_1158 + 44:word32] = a6_768
	Mem772[a7_1158 + 124:word32] = d3_1015
	Mem774[a7_1158 + 68:word32] = d5_1660
	Mem776[a7_1158 + 48:word32] = d6_113
	Mem778[a7_1158 + 98:word32] = d7_1005
	word32 v187_779 = a7_1158 + 56
	word32 d6_780 = Mem778[v187_779:word32]
	word32 d7_782 = Mem778[v187_779 + 4:word32]
	word32 d3_784 = Mem778[a7_1158 + 102:word32]
	word32 a1_786 = Mem778[a7_1158 + 44:word32]
// DataOut: a1 a2 a3 a5 a7 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001CA8:
	word32 d1_793 = Mem778[a7_1158 + 108:word32]
	word32 a7_798 = a7_1158 - 4
	Mem800[a7_798:word32] = d1_793 >> 31
	Mem803[a7_798 - 4:word32] = d1_793
	Mem806[a7_798 - 8:word32] = a1_786
	Mem809[a7_798 - 12:word32] = d1_793
	Mem811[a7_798 - 16:word32] = d1_793 >> 31
	Mem813[a7_798 - 20:word32] = d7_782
	Mem815[a7_798 - 24:word32] = d6_780
	word32 d1_816 = fn00002A00(dwArg00, dwArg04, dwArg08, dwArg0C)
	word32 v191_818 = Mem815[a7_798 - 8:word32]
	word32 d1_823 = Mem815[a7_798 - 4:word32]
	word32 d0_825 = Mem815[a7_798:word32]
	a3_1398 = a3_1398 - 1
	Mem831[a3_1398:byte] = Mem815[v191_818 + d1_816:byte]
	Mem834[a7_798:word32] = d0_825
	Mem837[a7_798 - 4:word32] = d1_823
	Mem840[a7_798 - 8:word32] = v191_818
	Mem843[a7_798 - 12:word32] = d1_823
	Mem845[a7_798 - 16:word32] = d0_825
	Mem847[a7_798 - 20:word32] = d7_782
	Mem849[a7_798 - 24:word32] = d6_780
	word32 d1_850
	word32 d0_852 = fn000026B8(dwArg00, dwArg04, dwArg08, dwArg0C, out d1_850, out a0_1418)
	a1_786 = Mem849[a7_798 - 8:word32]
	*a1Out = a1_786
	d6_780 = d0_852
	d7_782 = d1_850
	a7_258 = a7_798 + 4
	d3_784 = d3_784 + 0x00000001
	d0_1400 = d1_850
	word32 d1_870 = d0_852 - (d1_850 <u 0x00000000)
	*d1Out = d1_870
	branch d1_870 != 0x00000000 l00001CA8
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D16:
	Mem874[a7_798 + 106:word32] = d3_784
	d7_1005 = Mem874[a7_798 + 102:word32]
	d6_113 = Mem874[a7_798 + 52:word32]
	d5_1404 = Mem874[a7_798 + 72:word32]
	d3_136 = Mem874[a7_798 + 128:word32]
	branch d5_1404 != 0xFFFFFFFF l00001D38
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D38:
	Mem885[a7_798 + 76:word32] = Mem874[a7_798 + 76:word32] & 0xFFFFFFFD
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001D32:
	d5_1404 = 0
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a6:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E84:
	branch d5_1404 - Mem227[a7_258 + 102:word32] >u 0x00000000 l00001E92
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E92:
	Mem721[a7_258 + 44:word32] = d5_1404
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E8A:
	Mem718[a7_258 + 44:word32] = Mem227[a7_258 + 102:word32]
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001E96:
	word32 a7_322 = a7_258 - 4
	Mem324[a7_322:word32] = d0_1400
	Mem329[a7_322 + 52:word32] = Mem324[a7_322 + 48:word32] + d7_1005
	Mem335[a7_322:word32] = Mem329[a7_322:word32]
	word32 d0_340 = Mem335[a7_322:word32]
	branch Mem335[a7_322 + 52:word32] - Mem335[a7_322 + 68:word32] <u 0x00000000 l00001EBA
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001EBA:
	Mem707[a7_322:word32] = d0_340
	Mem712[a7_322 + 48:word32] = Mem707[a7_322 + 68:word32] - Mem707[a7_322 + 52:word32]
// DataOut: a0 a1 a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001EB4:
	Mem700[a7_322 + 48:word32] = 0x00000000
// DataOut: a0 a1 a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001ECA:
	Mem347[a7_258 + 48:word32] = Mem335[a7_258 + 44:word32]
	word32 d0_349 = Mem347[a7_258 + 72:word32] & 2
	branch d0_349 == 0x00000000 l00001F0C
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001ED8:
	word32 d2_657 = 0
	branch d7_1005 == 0x00000000 l00001F0C
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001EDE:
	word32 a7_669 = a7_258 - 4
	Mem671[a7_669:word32] = a5_144
	Mem681[a7_669 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_349, word24, 8), Mem671[a7_669 + 110 + d2_657:byte])
	word32 d1_683
	word32 a1_685
	d0_349 = fn00002098(dwArg00, dwArg04, out d1_683, out a0_1418, out a1_685, out a5_144)
	branch d0_349 != 0xFFFFFFFF l00001F04
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F04:
	d2_657 = d2_657 + 0x00000001
	d6_113 = d6_113 + 0x00000001
	branch d7_1005 - d2_657 >u 0x00000000 l00001EDE
// DataOut: a0 a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F0C:
	branch (Mem347[a7_258 + 72:word32] & 4) != 0x00000000 l00001F5E
// DataOut: a0 a1 a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F14:
	word32 d2_599 = 0
	branch Mem347[a7_258 + 48:word32] == 0x00000000 l00001F5E
// DataOut: a0 a1 a2 a3 a5 a7 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F1C:
	word32 d4_604 = Mem347[a7_258 + 72:word32]
	word32 a4_606 = Mem347[a7_258 + 48:word32]
// DataOut: a0 a2 a3 a4 a5 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F24:
	word32 a0_626
	word32 a7_617 = a7_258 - 4
	Mem619[a7_617:word32] = a5_144
	branch (d4_604 & 2) == 0x00000000 l00001F32
// DataOut: a0 a2 a3 a4 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F32:
	a0_626 = SEQ(SLICE(a0_1418, word16, 16), 0x0020)
// DataOut: a0 a2 a3 a4 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F2C:
	a0_626 = SEQ(SLICE(a0_1418, word16, 16), 0x0030)
// DataOut: a0 a2 a3 a4 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F36:
	Mem629[a7_258 - 8:word32] = a0_626
	word32 d1_631
	word32 a1_633
	branch fn00002098(dwArg00, dwArg04, out d1_631, out a0_1418, out a1_633, out a5_144) != 0xFFFFFFFF l00001F4E
// DataOut: a0 a1 a2 a3 a4 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F4E:
	d2_599 = d2_599 + 0x00000001
	d6_113 = d6_113 + 0x00000001
	branch a4_606 - d2_599 >u 0x00000000 l00001F24
// DataOut: a0 a1 a2 a3 a4 a5 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F56:
	Mem649[a7_617 + 52:word32] = a4_606
	Mem651[a7_617 + 76:word32] = d4_604
// DataOut: a1 a2 a3 a5 a7 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F5E:
	word32 d0_383 = Mem347[a7_258 + 72:word32] & 2
	branch d0_383 != 0x00000000 l00001F9A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F66:
	word32 d2_556 = 0
	branch d7_1005 == 0x00000000 l00001F9A
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F6C:
	word32 a7_568 = a7_258 - 4
	Mem570[a7_568:word32] = a5_144
	Mem580[a7_568 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_383, word24, 8), Mem570[a7_568 + 110 + d2_556:byte])
	word32 d1_582
	word32 a0_583
	word32 a1_584
	d0_383 = fn00002098(dwArg00, dwArg04, out d1_582, out a0_583, out a1_584, out a5_144)
	branch d0_383 != 0xFFFFFFFF l00001F92
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F92:
	d2_556 = d2_556 + 0x00000001
	d6_113 = d6_113 + 0x00000001
	branch d7_1005 - d2_556 >u 0x00000000 l00001F6C
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F9A:
	word32 d2_400 = Mem347[a7_258 + 102:word32]
	branch d5_1404 - Mem347[a7_258 + 102:word32] <=u 0x00000000 l00001FC8
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FA4:
	word32 a7_533 = a7_258 - 4
	Mem535[a7_533:word32] = a5_144
	Mem538[a7_533 - 0x00000004:word32] = 0x00000030
	word32 d1_539
	word32 a0_540
	word32 a1_541
	d0_383 = fn00002098(dwArg00, dwArg04, out d1_539, out a0_540, out a1_541, out a5_144)
	branch d0_383 != 0xFFFFFFFF l00001FC0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FC0:
	d2_400 = d2_400 + 0x00000001
	d6_113 = d6_113 + 0x00000001
	branch d5_1404 - d2_400 >u 0x00000000 l00001FA4
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FC8:
	word32 d2_414 = 0
	branch Mem347[a7_258 + 102:word32] == 0x00000000 l00001FFE
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FD0:
	word32 a4_489 = Mem347[a7_258 + 102:word32]
// DataOut: a2 a3 a4 a5 a7 d0 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FD4:
	word32 a7_497 = a7_258 - 4
	Mem499[a7_497:word32] = a5_144
	Mem508[a7_497 - 4:word32] = (int32) (int16) (int8) SEQ(SLICE(d0_383, word24, 8), Mem499[a3_1398 + d2_414:byte])
	word32 d1_510
	word32 a0_511
	word32 a1_512
	d0_383 = fn00002098(dwArg00, dwArg04, out d1_510, out a0_511, out a1_512, out a5_144)
	branch d0_383 != 0xFFFFFFFF l00001FF6
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FF6:
	d2_414 = d2_414 + 0x00000001
	d6_113 = d6_113 + 0x00000001
	branch a4_489 - d2_414 >u 0x00000000 l00001FD4
// DataOut: a1 a2 a3 a4 a5 a7 d0 d1 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FFE:
	d0 = Mem347[a7_258 + 72:word32] & 4
	branch d0 == 0x00000000 l00002034
// DataOut: a1 a2 a5 a7 d0 d1 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002006:
	word32 d2_453 = 0
	branch Mem347[a7_258 + 48:word32] == 0x00000000 l00002034
// DataOut: a1 a2 a5 a7 d0 d1 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000200E:
	word32 a3_458 = Mem347[a7_258 + 48:word32]
// DataOut: a2 a3 a5 a7 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:0 d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002012:
	word32 a7_465 = a7_258 - 4
	Mem467[a7_465:word32] = a5_144
	Mem470[a7_465 - 0x00000004:word32] = 0x00000020
	word32 d1_472
	word32 a0_473
	word32 a1_474
	d0 = fn00002098(dwArg00, dwArg04, out d1_472, out a0_473, out a1_474, out a5_144)
	branch d0 != 0xFFFFFFFF l0000202C
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000202C:
	d2_453 = d2_453 + 0x00000001
	d6_113 = d6_113 + 0x00000001
	branch a3_458 - d2_453 >u 0x00000000 l00002012
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002034:
	a7_146 = a7_258
	a4_143 = a2_1397
// DataOut: a1 a4 a5 a7 d0 d1 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002058:
	branch Mem0[a4_143:byte] != 0x00 l00001734
// DataOut: a1 a4 a5 a7 d0 d1 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l0000205E:
	d0_121 = d6_113
// DataOut: a1 a7 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002028:
	d0_121 = d6_113
// DataOut: a1 a7 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FF2:
	d0_121 = d6_113
// DataOut: a1 a7 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001FBA:
	d0_121 = d6_113
// DataOut: a1 a7 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F8C:
	d0_121 = d6_113
// DataOut: a1 a7 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001F48:
	d0_121 = d6_113
// DataOut: a1 a7 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00001EFE:
	d0_121 = d6_113
// DataOut: a1 a7 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

l00002060:
	return d0_121
// DataOut: a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d3:<invalid> a5:<invalid> a4:<invalid> d6:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d5:<invalid> d4:<invalid> a3:<invalid> d7:<invalid> a2:<invalid> d2:<invalid> a6:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>

fn00001718_exit:
// DataOut: a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d3:d3 a5:a5 a4:a4 d6:d6 d0:<invalid> d2:d2 d4:d4 d5:d5 d7:d7 a2:a2 a3:a3 a6:a6 a0:<invalid> d1:<invalid> a1:<invalid> -124(fp):<invalid> -120(fp):<invalid> -116(fp):<invalid> -112(fp):d2 -108(fp):d3 -104(fp):d4 -100(fp):d5 -96(fp):d6 -92(fp):d7 -88(fp):a2 -84(fp):a3 -80(fp):a4 -76(fp):a5 -72(fp):a6 -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -36(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> -5(fp):<invalid>



word32 fn00002098(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
// Stack args: Stack +0004(32) Stack +0008(32)
fn00002098_entry:
	*a5Out = a5
// DataOut: a4 a5 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00002098:
	word32 d1_38
	Mem19[dwArg08 + 24:word32] = Mem0[dwArg08 + 24:word32] | 2
	word32 v13_21 = Mem19[dwArg08 + 20:word32] - 0x00000001
	Mem22[dwArg08 + 20:word32] = v13_21
	branch v13_21 < 0x00000000 l000020DC
// DataOut: a2 a4 a5 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000020B4:
	word32 d0_69 = 10
	branch dwArg04 != 10 l000020C6
// DataOut: a2 a4 a5 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:2 -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000020BA:
	d0_69 = Mem22[dwArg08 + 24:word32] & 0x00000080
	branch d0_69 != 0x00000000 l000020DC
// DataOut: a2 a4 a5 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:10 -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000020DC:
	word32 a0_62
	word32 a1_63
	word32 a5_64
	*d1Out = fn000020F4(dwArg04, dwArg08, out a0_62, out a1_63, out a5_64)
// DataOut: a0 a1 a4 a5 d1 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000020C6:
	word32 a0_79 = Mem22[dwArg08 + 4:word32]
	*a0Out = a0_79
	Mem83[dwArg08 + 4:word32] = a0_79 + 1
	Mem85[a0_79:byte] = SLICE(dwArg04, byte, 0)
	word32 a1_78
	*a1Out = dwArg08 + 4
	*d1Out = (uint32) (uint8) SLICE(SEQ(SLICE(d0_69, word24, 8), Mem85[a0_79:byte]), byte, 0)
// DataOut: a0 a1 a4 a5 d1 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000020EA:
	return d1_38
// DataOut: a0 a1 a4 a5 d0 d1 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3

fn00002098_exit:
// DataOut: a0 a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 a2:a2 a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> a3:a3 a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3



word32 fn000020F4(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
// Stack args: Stack +0004(32) Stack +0008(32)
fn000020F4_entry:
	*a0Out = a0
// DataOut: a0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l000020F4:
	word32 d0_129
	word32 a1_34
	word32 a5_35
	fn00002688(out a1_34, out a5_35)
	branch dwArg08 != 0x00000000 l00002110
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002110:
	branch (Mem0[dwArg08 + 24:word32] & 73) == 64 l00002122
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002122:
	branch Mem0[dwArg08 + 28:word32] != 0x00000000 l00002140
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002128:
	branch (Mem0[dwArg08 + 24:word32] & 4) == 0x00000000 l00002138
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002138:
	Mem227[dwArg08 + 28:word32] = 0x00000400
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002130:
	Mem224[dwArg08 + 28:word32] = 1
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002140:
	branch Mem0[dwArg08 + 8:word32] != 0x00000000 l00002180
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002180:
	branch Mem0[dwArg08:word32] == 0x00000000 l000021DA
// DataOut: a0 a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l000021DA:
	d0_129 = 0
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002184:
	word32 d0_170 = Mem0[dwArg08 + 24:word32] & 0x00000080
	branch d0_170 == 0x00000000 l000021B0
// DataOut: a1 a2 a5 d0 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002190:
	d0_170 = 10
	branch dwArg04 != 10 l000021B0
// DataOut: a1 a2 a5 d0 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l000021B0:
	word32 d4_178 = Mem0[dwArg08 + 4:word32] - Mem0[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_178 - d0_170 == 0x00000000 l000021DE
// DataOut: a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l000021CE:
	Mem190[dwArg08 + 24:word32] = Mem0[dwArg08 + 24:word32] | 16
	word32 a0_187
	*a0Out = dwArg08 + 24
	d0_129 = -1
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002196:
	word32 a0_198 = Mem0[dwArg08 + 4:word32]
	Mem202[dwArg08 + 4:word32] = a0_198 + 1
	Mem204[a0_198:byte] = SLICE(dwArg04, byte, 0)
	word32 a0_209
	word32 a1_210
	word32 a5_211
	d0_129 = fn00002208(dwArg08, out a0_209, out a1_210, out a5_211)
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:10 d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002146:
	word32 d4_138
	branch (Mem0[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l0000215A
// DataOut: a1 a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000215A:
	d4_138 = 1
// DataOut: a1 a2 a5 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002156:
	d4_138 = 2
// DataOut: a1 a2 a5 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000215C:
	word32 d1_146
	word32 a0_147
	word32 a1_148
	word32 d0_149 = fn000022B4(d4_138 + Mem0[dwArg08 + 28:word32], out d1_146, out a0_147, out a1_148)
	branch d0_149 != 0x00000000 l00002176
// DataOut: a0 a1 a2 a3 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d4:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002176:
	Mem159[dwArg08 + 8:word32] = d0_149 + 1
// DataOut: a2 a5 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d4:<invalid> a0:<invalid> a3:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l000021DE:
	Mem115[dwArg08 + 24:word32] = Mem0[dwArg08 + 24:word32] | 2
	word32 a0_117 = Mem115[dwArg08 + 8:word32]
	*a0Out = a0_117
	Mem119[a0_117:byte] = SLICE(dwArg04, byte, 0)
	word32 a1_120 = Mem119[dwArg08 + 8:word32]
	Mem123[dwArg08 + 4:word32] = a1_120 + 1
	Mem128[dwArg08 + 20:word32] = Mem123[dwArg08 + 28:word32] - 0x00000001
	word32 a1_121
	*a1Out = a1_120 + 1
	d0_129 = 0
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a1:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002170:
	d0_129 = -1
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 a1:<invalid> d4:<invalid> a0:<invalid> a3:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000211C:
	d0_129 = -1
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000210A:
	d0_129 = -1
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002202:
	return d0_129
// DataOut: a0 a1 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 36 d5:<invalid> a2:<invalid> d0:<invalid> d6:64 d1:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> a3:<invalid> a4:<invalid> d2:<invalid> a6:<invalid> d3:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6

fn000020F4_exit:
// DataOut: a0 a1 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d5:d5 a2:a2 d0:<invalid> d2:d2 d3:d3 d4:d4 d6:d6 a3:a3 a4:a4 a6:a6 d1:<invalid> a1:<invalid> a0:<invalid> a5:<invalid> -40(fp):<invalid> -36(fp):d2 -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6



word32 fn00002208(word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
// Stack args: Stack +0004(32)
fn00002208_entry:
	*a0Out = a0
// DataOut: a0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002208:
	word32 d0_108
	word32 a1_19
	word32 a5_20
	fn00002688(out a1_19, out a5_20)
	branch dwArg04 != 0x00000000 l0000221E
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000221E:
	branch Mem0[dwArg04 + 28:word32] != 0x00000000 l0000223C
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002224:
	branch (Mem0[dwArg04 + 24:word32] & 4) == 0x00000000 l00002234
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002234:
	Mem128[dwArg04 + 28:word32] = 0x00000400
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000222C:
	Mem125[dwArg04 + 28:word32] = 1
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000223C:
	branch Mem0[dwArg04 + 8:word32] != 0x00000000 l00002246
// DataOut: a0 a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002246:
	word32 d0_68 = Mem0[dwArg04 + 24:word32] & 2
	branch d0_68 == 0x00000000 l0000228C
// DataOut: a0 a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000224E:
	branch Mem0[dwArg04:word32] == 0x00000000 l0000227C
// DataOut: a0 a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000227C:
	d0_108 = 0
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002252:
	word32 d4_95 = Mem0[dwArg04 + 4:word32] - Mem0[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_95 - d0_68 == 0x00000000 l00002280
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002280:
	Mem111[dwArg04 + 4:word32] = Mem0[dwArg04 + 8:word32]
	Mem113[dwArg04 + 20:word32] = Mem111[dwArg04 + 28:word32]
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000228C:
	Mem86[dwArg04 + 24:word32] = Mem0[dwArg04 + 24:word32] & -4
	word32 a0_83
	*a0Out = dwArg04 + 24
	d0_108 = 0
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002270:
	Mem107[dwArg04 + 24:word32] = Mem0[dwArg04 + 24:word32] | 16
	word32 a0_104
	*a0Out = dwArg04 + 24
	d0_108 = -1
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> a0:<invalid> d4:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002242:
	d0_108 = 0
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000221A:
	d0_108 = -1
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002296:
	return d0_108
// DataOut: a0 a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d4:<invalid> d2:<invalid> a6:<invalid> d3:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6

fn00002208_exit:
// DataOut: a0 a1 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:<invalid> d2:d2 d3:d3 d4:d4 a6:a6 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6



word32 fn000022B4(word32 dwArg04, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2
// Stack args: Stack +0004(32)
fn000022B4_entry:
	*d1Out = d1
	*a1Out = a1
	*a0Out = a0
// DataOut: a0 a1 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000022B4:
	word32 d0_20
	branch dwArg04 != 0x00000000 l000022C2
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000022C2:
	branch Mem0[0x00004130:word32] != 0x00000000 l000022E6
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> -4(fp):d2
// LocalsOut: fp(32)

l000022CA:
	word32 a0_86 = Mem0[0x0000412C:word32]
	Mem94[0x00000000:word32] = 0x00000000
	word32 d1_100
	word32 a0_101
	word32 a1_102
	Mem105[0x00004130:word32] = fn000025A8(dwLoc10, a0_86, a0_86, out d1_100, out a0_101, out a1_102)
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> -4(fp):d2
// LocalsOut: fp(32)

l000022E6:
	branch Mem0[0x00004130:word32] != 0x00000000 l000022F2
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2
// LocalsOut: fp(32)

l000022F2:
	word32 d1_71
	word32 a0_72
	word32 d0_73 = fn00002484(Mem0[0x00004130:word32], dwArg04 + 4, out d1_71, out a0_72)
	word32 a1_74
	*a1Out = d0_73
	branch d0_73 != 0x00000000 l00002310
// DataOut: a0 a1 a2 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

l00002310:
	Mem82[d0_73:word32] = dwArg04
	word32 a0_83
	*a0Out = d0_73 + 4
	d0_20 = d0_73 + 4
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

l0000230C:
	d0_20 = 0
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

l000022EE:
	d0_20 = 0
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

l000022BE:
	d0_20 = 0
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> -4(fp):d2

l00002318:
	return d0_20
// DataOut: a0 a1 a2 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2

fn000022B4_exit:
// DataOut: a0 a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):d2



void fn00002320(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
// Stack args: Stack +0004(32)
fn00002320_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002320:
	branch dwArg04 == 0x00000000 l0000234A
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000232A:
	branch Mem0[0x00004130:word32] == 0x00000000 l0000234A
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> a0:<invalid>
// LocalsOut: fp(32)

l00002332:
	fn000023E8(Mem0[0x00004130:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> a0:<invalid>

l0000234A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

fn00002320_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>



void fn000023E8(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32)
fn000023E8_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l000023E8:
	branch Mem0[Mem0[0x000040FC:word32] + 20:word16] <u 0x0027 l00002418
// DataOut: a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002418:
	branch dwArg04 == 0x00000000 l0000247C
// DataOut: a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000241C:
	branch dwArg08 == 0x00000000 l0000247C
// DataOut: a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002420:
	word32 a3_113 = dwArg08 + -12
	branch dwArg0C - Mem0[dwArg04 + 20:word32] >=u 0x00000000 l00002462
// DataOut: a3 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000242C:
	word32 a2_87 = dwArg04
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000242E:
	a2_87 = Mem0[a2_87:word32]
	branch Mem0[a2_87:word32] == 0x00000000 l0000247C
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002434:
	branch Mem0[a2_87 + 8:byte] == 0x00 l0000242E
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000243A:
	branch dwArg08 - Mem0[a2_87 + 20:word32] <u 0x00000000 l0000242E
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002440:
	branch dwArg08 - Mem0[a2_87 + 24:word32] >=u 0x00000000 l0000242E
// DataOut: a2 a4 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002446:
	Deallocate(a2_87, dwArg08, dwArg0C)
	branch Mem0[a2_87 + 28:word32] - Mem0[dwArg04 + 16:word32] != 0x00000000 l0000247C
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002460:
	a3_113 = a2_87
// DataOut: a3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002462:
	Remove(a3_113)
	word32 a3_82 = a3_113 - 4
	FreeMem(a3_82, Mem0[a3_82:word32])
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002406:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000247C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> a5:<invalid> a4:<invalid> a0:<invalid> a6:<invalid> a1:<invalid> d0:<invalid> d2:<invalid> a3:<invalid> a2:<invalid> -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6

fn000023E8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d1:<invalid> a5:a5 a4:a4 a0:<invalid> a6:a6 a1:<invalid> d0:<invalid> d2:d2 a2:a2 a3:a3 -24(fp):d2 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6



word32 fn00002484(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
// Stack args: Stack +0004(32) Stack +0008(32)
fn00002484_entry:
	*d1Out = d1
// DataOut: d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00002484:
	word32 d0_45
	word32 a0_31 = Mem0[0x000040FC:word32]
	*a0Out = a0_31
	branch Mem0[a0_31 + 20:word16] <u 0x0027 l000024B0
// DataOut: a0 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000024B0:
	word32 a3_123 = 0x00000000
	branch dwArg04 == 0x00000000 l000025A0
// DataOut: a0 a3 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000024B8:
	branch dwArg08 == 0x00000000 l000025A0
// DataOut: a0 a3 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:0x00000000 d4:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000024BE:
	branch dwArg08 - Mem0[dwArg04 + 20:word32] >=u 0x00000000 l00002572
// DataOut: a0 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:0x00000000 d4:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002572:
	word32 d1_210 = Mem0[dwArg04 + 12:word32]
	*d1Out = d1_210
	word32 d0_213 = AllocMem(dwArg08 + 16, d1_210)
	a3_123 = d0_213
	branch d0_213 == 0x00000000 l000025A0
// DataOut: a0 a3 a4 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:0x00000000 d4:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000258C:
	Mem219[d0_213:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_213 + 4)
	Mem225[d0_213 + 12:word32] = 0x00000000
	word32 a0_222
	*a0Out = dwArg04
	a3_123 = d0_213 + 16
// DataOut: a0 a3 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> d3:<invalid> d1:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000024C6:
	word32 a5_104 = Mem0[dwArg04:word32]
// DataOut: a0 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:0x00000000 d4:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000024C8:
	branch Mem0[a5_104:word32] == 0x00000000 l000024EA
// DataOut: a0 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000024EA:
	word32 d3_164 = Mem0[dwArg04 + 16:word32] + 40
	word32 d1_166 = Mem0[dwArg04 + 12:word32]
	*d1Out = d1_166
	word32 d0_169 = AllocMem(d3_164, d1_166)
	a3_123 = d0_169
	branch d0_169 == 0x00000000 l000025A0
// DataOut: a0 a3 a4 d1 d2 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002508:
	Mem175[d0_169:word32] = d3_164
	Mem178[d0_169 + 12:byte] = 0x0A
	Mem182[d0_169 + 20:word32] = d0_169 + 40
	Mem184[d0_169 + 24:word32] = d0_169 + 40
	Mem186[Mem184[d0_169 + 20:word32]:word32] = 0x00000000
	word32 a2_187 = Mem186[d0_169 + 20:word32]
	Mem190[a2_187 + 4:word32] = Mem186[dwArg04 + 16:word32]
	Mem193[d0_169 + 32:word32] = Mem190[a2_187 + 4:word32]
	Mem197[d0_169 + 28:word32] = Mem193[d0_169 + 32:word32] + Mem193[d0_169 + 20:word32]
	AddHead(dwArg04, d0_169 + 4)
	word32 a0_202
	*a0Out = d0_169 + 4
	a3_123 = Allocate(d0_169 + 4, dwArg08)
// DataOut: a0 a3 a4 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> d3:<invalid> d1:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000024CC:
	branch Mem0[a5_104 + 8:byte] == 0x00 l000024E6
// DataOut: a0 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000024D2:
	word32 d0_158 = Allocate(a5_104, dwArg08)
	word32 a0_156
	*a0Out = a5_104
	a3_123 = d0_158
	branch d0_158 != 0x00000000 l00002556
// DataOut: a0 a3 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002556:
	branch (Mem0[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l000025A0
// DataOut: a0 a3 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> d3:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002562:
	word32 a2_131 = a3_123
	word32 d2_133 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut: a0 a2 a3 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> d3:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002568:
	Mem137[a2_131:word32] = 0x00000000
	word32 a2_138 = a2_131 + 4
	Mem139[a2_138:word32] = 0x00000000
	a2_131 = a2_138 + 4
	d2_133 = d2_133 - 0x00000001
	branch d2_133 != 0x00000000 l00002568
// DataOut: a0 a2 a3 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> d3:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l00002570:
// DataOut: a0 a3 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> d3:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000025A0:
	d0_45 = a3_123
// DataOut: a0 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> d3:<invalid> d1:<invalid> a6:<invalid> d0:<invalid> a1:<invalid> a5:<invalid> a2:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000024E6:
	a5_104 = Mem0[a5_104:word32]
// DataOut: a0 a4 a5 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a3:<invalid> d4:<invalid> a5:<invalid> a6:<invalid> d0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l0000249E:
	word32 a0_65
	*a0Out = dwArg04
	d0_45 = AllocPooled(dwArg08, dwArg04)
// DataOut: a0 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6
// LocalsOut: fp(32)

l000025A2:
	return d0_45
// DataOut: a0 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 d2:<invalid> a4:<invalid> a0:<invalid> a6:<invalid> d0:<invalid> a3:<invalid> d4:<invalid> d3:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a2:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6

fn00002484_exit:
// DataOut: a0 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 a4:a4 a0:<invalid> a6:a6 d0:<invalid> d3:d3 d4:d4 a2:a2 a3:a3 a5:a5 d1:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):a2 -16(fp):a3 -12(fp):a4 -8(fp):a5 -4(fp):a6



word32 fn000025A8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32)
fn000025A8_entry:
	*a1Out = a1
	*d1Out = d1
// DataOut: a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l000025A8:
	word32 d0_30
	word32 a0_19 = Mem0[0x000040FC:word32]
	*a0Out = a0_19
	branch Mem0[a0_19 + 20:word16] <u 0x0027 l000025D6
// DataOut: a0 a1 a2 a5 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000025D6:
	word32 a1_52
	*a1Out = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l00002610
// DataOut: a0 a1 a2 a5 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l000025DC:
	word32 d0_71 = AllocMem(24, 0)
	word32 d1_70
	*d1Out = 0
	*a1Out = d0_71
	branch d0_71 == 0x00000000 l00002610
// DataOut: a0 a1 a2 a5 d1 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> a1:0x00000000 -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l000025F2:
	Mem78[d0_71:word32] = d0_71 + 4
	Mem79[d0_71 + 4:word32] = 0x00000000
	Mem81[d0_71 + 8:word32] = d0_71
	Mem83[d0_71 + 12:word32] = dwArg04
	Mem87[d0_71 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem89[d0_71 + 20:word32] = dwArg0C
	word32 a0_76
	*a0Out = d0_71 + 4
// DataOut: a0 a1 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> a1:<invalid> a6:<invalid> d0:<invalid> d1:0 -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002610:
	d0_30 = a1_52
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> a1:<invalid> a6:<invalid> d0:<invalid> d1:0 -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l000025C2:
	word32 d1_45
	*d1Out = dwArg08
	d0_30 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002612:
	return d0_30
// DataOut: a0 a1 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 16 d3:<invalid> a2:<invalid> a0:<invalid> a6:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> a1:<invalid> -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6

fn000025A8_exit:
// DataOut: a0 a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d3:d3 a2:a2 a0:<invalid> a6:a6 d0:<invalid> d1:<invalid> d2:d2 a1:<invalid> -16(fp):d2 -12(fp):d3 -8(fp):a2 -4(fp):a6



void fn00002618(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
// Stack args: Stack +0004(32)
fn00002618_entry:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002618:
	branch Mem0[Mem0[0x000040FC:word32] + 20:word16] <u 0x0027 l0000263C
// DataOut: d0 d2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000263C:
	branch dwArg04 == 0x00000000 l00002680
// DataOut: d0 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002640:
	RemHead(dwArg04)
	word32 a2_47 = d0
	branch d0 == 0x00000000 l00002672
// DataOut: a2 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002652:
	word32 a2_59 = a2_47 - 4
	word32 d0_60 = Mem0[a2_59:word32]
	FreeMem(a2_59, d0_60)
	RemHead(dwArg04)
	a2_47 = d0_60
	branch d0_60 != 0x00000000 l00002652
// DataOut: a2 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> a6:<invalid> a2:<invalid> d1:d0 d0:<invalid> a1:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002672:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> a6:<invalid> a2:<invalid> d1:d0 d0:<invalid> a1:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000262E:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002680:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d2:<invalid> a0:<invalid> a6:<invalid> a2:<invalid> d1:d0 d0:24 a1:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6

fn00002618_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 a0:<invalid> a6:a6 a2:a2 d1:d0 d0:24 a1:<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a6



word32 fn00002688(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d1
// Trashed: CVZNX a1 a4 a5 d0 d1
// Preserved: a6 a7
fn00002688_entry:
	*a1Out = a1
	*a5Out = a5
// DataOut: a0 a1 a2 a5 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002688:
	SetSignal(0, 0x00001000)
	word32 d1_20 = 0x00001000
	branch 0x00000000 == 0x00000000 l000026B2
// DataOut: a0 a1 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000026A6:
	word32 a1_28
	word32 a5_29
	d1_20 = fn0000131C(0x00000014, out a1_28, out a5_29)
// DataOut: a0 a1 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a6:<invalid> d0:0x00000000 d1:0x00001000 -4(fp):a6

l000026B2:
	return d1_20
// DataOut: a0 a1 a2 a5 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a6:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):00000014 -4(fp):a6

fn00002688_exit:
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):00000014 -4(fp):a6



word32 fn000026B8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn000026B8_entry:
// DataOut: a2 a3 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l000026B8:
	word32 d0_115
	word32 d1_18
	*d1Out = dwArg08
	word32 a0_21
	*a0Out = dwArg08
	word32 d3_122 = dwArg10
	branch dwArg0C != 0x00000000 l0000270E
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000270E:
	branch dwArg04 - dwArg0C >=u 0x00000000 l00002718
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002718:
	word32 d4_140 = 24
	word32 d6_141 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_141, byte, 0) != 0x00 l00002736
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002722:
	d4_140 = 16
	d6_141 = __rol(d6_141, 0x00000008)
	branch SLICE(d6_141, byte, 0) != 0x00 l00002736
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:24 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l0000272A:
	d4_140 = 8
	d6_141 = __rol(d6_141, 0x00000008)
	branch SLICE(d6_141, byte, 0) != 0x00 l00002736
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:16 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002732:
	d4_140 = 0
	d6_141 = SEQ(SLICE(d6_141, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:8 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002736:
	word32 d4_159 = SEQ(SLICE(d4_140, word24, 8), SLICE(d4_140, byte, 0) + Mem0[0x00004134 + (int32) ((int16) SEQ(SLICE(d6_141, word16, 16), SLICE(d6_141, word16, 0) & 0x00FF)):byte])
	word32 d5_161 = 32 - d4_159
	branch d5_161 != 0x00000000 l00002756
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002756:
	word32 d1_188
	word32 d2_189
	word32 d0_190 = fn000027BC(dwArg04 >>u d4_159, dwArg04 << d5_161 | dwArg08 >>u d4_159, dwArg0C << d5_161 | dwArg10 >>u d4_159, out d1_188, out d2_189)
	word32 d3_177 = dwArg10 << d5_161
	word32 d5_199 = __swap(d0_190)
	word32 d6_201 = __swap(d3_177)
	word32 d3_200 = d3_177 *u SLICE(d5_199, word16, 0)
	word32 d2_205 = __swap(d0_190 *u SLICE(d3_177, word16, 0))
	word16 v34_206 = SLICE(d2_205 + d3_200, word16, 0)
	word32 d4_202 = d0_190 *u SLICE(d6_201, word16, 0)
	word32 d2_208 = SEQ(SLICE(d2_205, word16, 16), v34_206)
	word16 v39_214 = SLICE(d2_208 + d4_202, word16, 0)
	word32 d5_203 = d5_199 *u SLICE(d6_201, word16, 0)
	word32 d6_185 = dwArg08 << d5_161
	word32 d2_222 = __swap(SEQ(SLICE(d2_208, word16, 16), v39_214))
	word32 d5_213 = SEQ(SLICE(d5_203, word16, 16), SLICE(d5_203, word16, 0) + (v34_206 <u 0x0000))
	word32 a0_187
	*a0Out = d6_185
	word32 d1_194
	*d1Out = d0_190
	word32 v48_233 = d1_188 - ((__swap(SEQ(SLICE(d3_200, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_202, word16, 16), 0x0000))) + SEQ(SLICE(d5_213, word16, 16), SLICE(d5_213, word16, 0) + (v39_214 <u 0x0000)))
	branch v48_233 <u 0x00000000 l000027B2
// DataOut: a0 a2 a3 a5 d1 d2
// DataOut (flags): Z
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000027AC:
	branch v48_233 != 0x00000000 l000027B4
// DataOut: a0 a2 a3 a5 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000027AE:
	branch d6_185 - d2_222 >=u 0x00000000 l000027B4
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000027B2:
	word32 d1_246
	*d1Out = d0_190 - 0x00000001
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l0000274A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002752
// DataOut: a0 a2 a3 a5 d1 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l0000274E:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002712
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002752:
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l00002712:
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000026D0:
	branch dwArg04 - dwArg10 >=u 0x00000000 l000026E2
// DataOut: a0 a2 a3 a5 d0 d1 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000026E2:
	branch dwArg10 != 0x00000000 l000026EE
// DataOut: a0 a2 a3 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000026E6:
	d3_122 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut: a0 a2 a3 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000026EE:
	word32 d1_104
	word32 d2_105
	word32 d0_106 = fn000027BC(0, dwArg04, d3_122, out d1_104, out d2_105)
	word32 d1_111
	word32 d2_112
	word32 d1_114
	*d1Out = fn000027BC(d1_104, dwArg08, d2_105, out d1_111, out d2_112)
	d0_115 = d0_106
// DataOut: a0 a2 a3 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d4:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000026D4:
	word32 d1_80
	word32 d2_81
	word32 d1_83
	*d1Out = fn000027BC(dwArg04, dwArg08, dwArg10, out d1_80, out d2_81)
// DataOut: a0 a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000027B4:
	d0_115 = 0
// DataOut: a0 a2 a3 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32)

l000027B6:
	return d0_115
// DataOut: a0 a2 a3 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d4:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6

fn000026B8_exit:
// DataOut: a0 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d1:<invalid> d0:<invalid> a0:<invalid> d3:d3 d2:d2 d4:d4 a1:<invalid> d5:d5 d6:d6 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6



word32 fn000027BC(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0 d1 d2
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn000027BC_entry:
	*d2Out = d2
	*d1Out = d1
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0024(32)

l000027BC:
	word32 d7_12 = d2
	branch d2 == 0x00000000 l000027D6
// DataOut: a2 a3 a5 d0 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0024(32)

l000027C4:
	word32 d6_150 = d1
	word32 d5_149 = d0
	branch d0 != 0x00000000 l000027E4
// DataOut: a2 a3 a5 d0 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0024(32)

l000027E4:
	word32 d2_93 = __swap(d2)
	branch SLICE(d2_93, word16, 0) != 0x0000 l0000280C
// DataOut: a2 a3 a5 d0 d1 d2 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0024(32)

l0000280C:
	byte bLoc26_138 = 0x00
	word32 d0_140 = 0
	branch d2 < 0x00000000 l00002828
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 d2:<invalid> -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0)

l0000281E:
	d6_150 = d6_150 * 0x00000002
	d0_140 = SEQ(SLICE(d0_140, word16, 16), SLICE(d0_140, word16, 0) + 0x0001)
	d5_149 = d5_149 * 0x00000002 + (d6_150 <u 0x00000000)
	d7_12 = d7_12 * 0x00000002
	branch d7_12 > 0x00000000 l0000281E
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> -38(fp):0x00 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0)

l00002828:
	word16 v41_152 = SLICE(d0_140, word16, 0)
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> -38(fp):0x00 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l0000282A:
	word32 d1_179
	word32 d2_173 = __swap(d5_149)
	word32 d3_174 = __swap(d7_12)
	branch SLICE(d2_173 - d3_174, word16, 0) != 0x0000 l0000283C
// DataOut: a2 a3 a5 d0 d3 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l0000283C:
	d1_179 = __swap(SEQ(SLICE(__swap(SEQ((uint16) (d5_149 % SLICE(d3_174, uint16, 0)), (uint16) (d5_149 /u SLICE(d3_174, uint16, 0)))), word16, 16), 0x0000))
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002836:
	d1_179 = 0x0000FFFF
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:0 d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002846:
	word32 d6_183 = __swap(SEQ(SLICE(d6_150, word16, 16), 0x0000))
// DataOut: a1 a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l0000284C:
	word32 d4_199 = __swap(d5_149 - __swap(d7_12) *u SLICE(d1_179, word16, 0))
	word32 d2_193 = d1_179 *u SLICE(d7_12, word16, 0)
	d0_140 = SEQ(SLICE(d0_140, word16, 16), SLICE(d4_199, word16, 0))
	word32 d4_205 = SEQ(SLICE(d4_199, word16, 16), SLICE(d6_183, word16, 0))
	branch SLICE(d0_140, word16, 0) != 0x0000 l0000286C
// DataOut: a1 a2 a3 a5 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002864:
	branch d2_193 - d4_205 <=u 0x00000000 l0000286C
// DataOut: a1 a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l0000286C:
	word32 d6_214 = __swap(d1_179)
	word32 d3_220 = __swap(d6_214)
	word32 d4_222 = __swap(d7_12)
	word32 d5_221 = d7_12 *u SLICE(d3_220, word16, 0)
	word32 d6_226 = __swap(d6_214 *u SLICE(d7_12, word16, 0))
	word16 v55_227 = SLICE(d6_226 + d5_221, word16, 0)
	word32 d2_223 = d6_214 *u SLICE(d4_222, word16, 0)
	word32 d6_229 = SEQ(SLICE(d6_226, word16, 16), v55_227)
	word32 d3_224 = d3_220 *u SLICE(d4_222, word16, 0)
	word16 v59_235 = SLICE(d6_229 + d2_223, word16, 0)
	word32 d3_234 = SEQ(SLICE(d3_224, word16, 16), SLICE(d3_224, word16, 0) + (v55_227 <u 0x0000))
	word32 d6_256 = d6_150 - __swap(SEQ(SLICE(d6_229, word16, 16), v59_235))
	word32 d5_259 = d5_149 - ((__swap(SEQ(SLICE(d5_221, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d2_223, word16, 16), 0x0000))) + SEQ(SLICE(d3_234, word16, 16), SLICE(d3_234, word16, 0) + (v59_235 <u 0x0000))) - (d6_256 <u 0x00000000)
	branch d5_259 >=u 0x00000000 l000028C4
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l000028AE:
	d6_256 = d6_256 + SEQ(SLICE(__swap(d7_12), word16, 16), 0x0000)
	d1_179 = d1_179 - 0x00000001
	d5_259 = d5_259 + (d6_256 <u 0x00000000) + __swap(SEQ(SLICE(d7_12, word16, 16), 0x0000))
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l000028C4:
	branch bLoc26_138 != 0x00 l000028E0
// DataOut: a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0028(32)

l000028E0:
	word32 d6_296 = __swap(SEQ(SLICE(d6_256, word16, 16), SLICE(d5_259, word16, 0)))
	d0 = SEQ(SLICE(dwLoc24, word16, 16), SLICE(d1_179, word16, 0))
	word32 d5_297 = __swap(d5_259)
	word32 d7_300 = SEQ(SLICE(d7_12, word16, 16), v41_152)
	branch v41_152 == 0x0000 l000028FA
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32)

l000028F0:
	word32 d7_325 = SEQ(SLICE(d7_300, word16, 16), SLICE(d7_300, word16, 0) - 0x0001)
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32)

l000028F2:
	d5_297 = d5_297 >>u 0x00000001
	word16 v86_336 = SLICE(d7_325, word16, 0)
	d6_296 = __rcr(d6_296, 0x00000001, (bool) cond(d5_297))
	d7_325 = SEQ(SLICE(d7_325, word16, 16), v86_336 - 1)
	branch v86_336 != 0x0000 l000028F2
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32)

l000028FA:
	word32 d1_310
	*d1Out = d6_296
	word32 d2_313
	*d2Out = d2_93
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000028CA:
	word32 d5_276 = __swap(d5_259)
	word32 d6_277 = __swap(d6_256)
	d5_149 = SEQ(SLICE(d5_276, word16, 16), SLICE(d6_277, word16, 0))
	d6_150 = SEQ(SLICE(d6_277, word16, 16), 0x0000)
	bLoc26_138 = true
// DataOut: a2 a3 a5 d0 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:0 a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l00002868:
	d1_179 = d1_179 - 0x00000001
// DataOut: a1 a2 a3 a5 d0 d1 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 40 d7:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d1:<invalid> d0:<invalid> d3:<invalid> a1:<invalid> d4:<invalid> a0:<invalid> -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32) Local -0020(32) Local -0024(32) Local -0026(0) Local -0028(32)

l000027EA:
	word32 d0_99 = __swap(d0)
	word32 d1_100 = __swap(d1)
	word32 d0_103 = SEQ(SLICE(d0_99, word16, 16), SLICE(d1_100, word16, 0))
	word32 d0_106 = SEQ((uint16) (d0_103 % SLICE(d2, uint16, 0)), (uint16) (d0_103 /u SLICE(d2, uint16, 0)))
	word32 d0_113 = SEQ(SLICE(d0_106, word16, 16), SLICE(__swap(d1_100), word16, 0))
	word32 d0_116 = SEQ((uint16) (d0_113 % SLICE(d2, uint16, 0)), (uint16) (d0_113 /u SLICE(d2, uint16, 0)))
	word32 d2_120 = SEQ(SLICE(__swap((uint32) (uint16) SLICE(d0_106, word16, 0)), word16, 16), SLICE(d0_116, word16, 0))
	*d2Out = d2_120
	word32 d1_124
	*d1Out = __swap(SEQ(SLICE(d0_116, word16, 16), 0x0000))
	d0 = d2_120
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 d2:<invalid> -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027CA:
	branch d1 == 0x00000000 l00002902
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027D0:
	branch d2 - d1 >u 0x00000000 l00002902
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l000027D6:
	word32 d1_63
	d0 = fn0000297A(d1, d2, d2, out d1_63)
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:d2 d6:d1 d5:d0 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002902:
	return d0
// DataOut: a2 a3 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 d7:<invalid> d0:<invalid> d1:<invalid> d6:<invalid> d5:<invalid> d2:<invalid> d3:d3 a1:a1 d4:d4 a0:a0 -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7

fn000027BC_exit:
// DataOut: d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp d7:d7 d0:<invalid> d1:<invalid> d6:d6 d5:d5 d2:<invalid> d3:d3 a1:a1 d4:d4 a0:a0 -40(fp):<invalid> -38(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):a0 -16(fp):a1 -12(fp):d5 -8(fp):d6 -4(fp):d7



word32 fn00002948(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
// Stack args: Stack +0004(32) Stack +0008(32)
fn00002948_entry:
// DataOut: a2 a3 a6 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00002948:
	branch dwArg04 > 0x00000000 l00002968
// DataOut: a2 a3 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00002968:
	branch dwArg08 > 0x00000000 l0000296A_thunk_fn0000297A
// DataOut: a2 a3 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l0000296A_thunk_fn0000297A:
	word32 d1_48
	return fn0000297A(dwArg04, dwArg08, d2, out d1_48)
// DataOut: a2 a3 a6 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l0000296C:
	word32 d1_44
	return -fn0000297A(dwArg04, -dwArg08, d2, out d1_44)
// DataOut: a2 a3 a6 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l00002952:
	word32 d0_20 = -dwArg04
	branch dwArg08 > 0x00000000 l00002960
// DataOut: a2 a3 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l00002960:
	word32 d1_33
	return -fn0000297A(d0_20, dwArg08, d2, out d1_33)
// DataOut: a2 a3 a6 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

l00002958:
	word32 d1_29
	return fn0000297A(d0_20, -dwArg08, d2, out d1_29)
// DataOut: a2 a3 a6 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>

fn00002948_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp d0:<invalid> d1:<invalid>



word32 fn0000297A(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0 d1 d2
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn0000297A_entry:
// DataOut: a2 a3 a5 a6 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000297A:
	word32 d1_101 = __swap(d1)
	word16 v10_8 = SLICE(d1_101, word16, 0)
	word32 d2_10 = SEQ(SLICE(d2, word16, 16), v10_8)
	branch v10_8 != 0x0000 l000029A0
// DataOut: a2 a3 a5 a6 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000029A0:
	word32 d3_100 = 16
	branch SLICE(d1_101, word16, 0) >=u 0x0080 l000029AE
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d1:<invalid> d2:<invalid> -4(fp):d2
// LocalsOut: fp(32)

l000029AA:
	d1_101 = __rol(d1_101, 0x00000008)
	d3_100 = 0x00000008
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:16 -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029AE:
	branch SLICE(d1_101, word16, 0) >=u 0x0800 l000029B8
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029B4:
	d1_101 = __rol(d1_101, 0x00000004)
	d3_100 = SEQ(SLICE(d3_100, word16, 16), SLICE(d3_100, word16, 0) - 0x0004)
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029B8:
	branch SLICE(d1_101, word16, 0) >=u 0x2000 l000029C2
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029BE:
	d1_101 = __rol(d1_101, 0x00000002)
	d3_100 = SEQ(SLICE(d3_100, word16, 16), SLICE(d3_100, word16, 0) - 0x0002)
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029C2:
	branch SLICE(d1_101, word16, 0) < 0x0000 l000029CA
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029C6:
	d1_101 = __rol(d1_101, 0x00000001)
	d3_100 = SEQ(SLICE(d3_100, word16, 16), SLICE(d3_100, word16, 0) - 0x0001)
// DataOut: a2 a3 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029CA:
	word32 d0_105 = d0 >>u d3_100
	word32 d2_109 = SEQ(SLICE(__swap(SEQ(SLICE(d2_10, word16, 16), SLICE(d0, word16, 0))), word16, 16), 0x0000) >>u d3_100
	word32 d0_113 = SEQ((uint16) (d0_105 % SLICE(d1_101, uint16, 0)), (uint16) (d0_105 /u SLICE(d1_101, uint16, 0)))
	word32 d3_116 = SEQ(SLICE(__swap(d3_100), word16, 16), SLICE(d0_113, word16, 0))
	word32 d1_123 = __swap(d1_101)
	word32 d0_125 = SEQ(SLICE(d0_113, word16, 16), SLICE(d2_109, word16, 0)) - SEQ(SLICE(d2_109, word16, 16), SLICE(d3_116, word16, 0)) *u SLICE(d1_123, word16, 0)
	branch d0_125 >=u 0x00000000 l000029EC
// DataOut: a2 a3 a5 a6 d0 d1 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029E6:
	d3_116 = SEQ(SLICE(d3_116, word16, 16), SLICE(d3_116, word16, 0) - 0x0001)
	d0_125 = d0_125 + d1_123
// DataOut: a2 a3 a5 a6 d0 d3 d4 d5 d6 d7
// DataOut (flags): C
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029EA:
	branch d0_125 >=u 0x00000000 l000029EA
// DataOut: a2 a3 a5 a6 d0 d3 d4 d5 d6 d7
// DataOut (flags): C
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> -8(fp):d3 -4(fp):d2
// LocalsOut: fp(32)

l000029EC:
	word32 d1_147
	*d1Out = __swap(__rol(d0_125, __swap(d3_116)))
	return (uint32) (uint16) SLICE(d3_116, word16, 0)
// DataOut: a2 a3 a5 a6 d0 d1 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 8 d1:<invalid> d2:<invalid> d3:<invalid> d0:<invalid> -8(fp):d3 -4(fp):d2

l00002982:
	word32 d0_30 = __swap(d0)
	word32 d1_31 = __swap(d1_101)
	word16 v14_33 = SLICE(d0_30, word16, 0)
	word32 d2_35 = SEQ(SLICE(__swap(d2_10), word16, 16), v14_33)
	branch v14_33 == 0x0000 l00002990
// DataOut: a2 a3 a5 a6 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d1:<invalid> d2:<invalid> -4(fp):d2

l0000298C:
	d2_35 = SEQ((uint16) (d2_35 % SLICE(d1_31, uint16, 0)), (uint16) (d2_35 /u SLICE(d1_31, uint16, 0)))
	d0_30 = SEQ(SLICE(d0_30, word16, 16), SLICE(d2_35, word16, 0))
// DataOut: a2 a3 a5 a6 d0 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d1:<invalid> d2:<invalid> d0:<invalid> -4(fp):d2

l00002990:
	word32 d0_40 = __swap(d0_30)
	word32 d2_43 = SEQ(SLICE(d2_35, word16, 16), SLICE(d0_40, word16, 0))
	word32 d2_46 = SEQ((uint16) (d2_43 % SLICE(d1_31, uint16, 0)), (uint16) (d2_43 /u SLICE(d1_31, uint16, 0)))
	word32 d1_53
	*d1Out = SEQ(SLICE(d1_31, word16, 16), SLICE(__swap(d2_46), word16, 0))
	return SEQ(SLICE(d0_40, word16, 16), SLICE(d2_46, word16, 0))
// DataOut: a2 a3 a5 a6 d0 d1 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 d1:<invalid> d2:<invalid> d0:<invalid> -4(fp):d2

fn0000297A_exit:
// DataOut: d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d1:<invalid> d2:d2 d0:<invalid> d3:d3 -8(fp):d3 -4(fp):d2



word32 fn00002A00(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn00002A00_entry:
// DataOut: a2 a3 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00002A00:
	word32 d1_138 = dwArg08
	word32 d3_103 = dwArg10
	branch dwArg0C != 0x00000000 l00002A52
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002A52:
	branch dwArg04 - dwArg0C <u 0x00000000 l00002B0C
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A58:
	word32 d4_109 = 24
	word32 d6_110 = __rol(dwArg0C, 0x00000008)
	branch SLICE(d6_110, byte, 0) != 0x00 l00002A76
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A62:
	d4_109 = 16
	d6_110 = __rol(d6_110, 0x00000008)
	branch SLICE(d6_110, byte, 0) != 0x00 l00002A76
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:24 -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A6A:
	d4_109 = 8
	d6_110 = __rol(d6_110, 0x00000008)
	branch SLICE(d6_110, byte, 0) != 0x00 l00002A76
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:16 -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A72:
	d4_109 = 0
	d6_110 = SEQ(SLICE(d6_110, word24, 8), SLICE(dwArg0C, byte, 0))
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:8 -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A76:
	word32 d4_128 = SEQ(SLICE(d4_109, word24, 8), SLICE(d4_109, byte, 0) + Mem0[0x00004134 + (int32) ((int16) SEQ(SLICE(d6_110, word16, 16), SLICE(d6_110, word16, 0) & 0x00FF)):byte])
	word32 d5_130 = 32 - d4_128
	branch d5_130 != 0x00000000 l00002A98
// DataOut: a0 a2 a3 a5 d0 d1 d2 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A98:
	word32 d1_161
	word32 d2_162
	word32 d0_163 = fn000027BC(dwArg04 >>u d4_128, dwArg04 << d5_130 | dwArg08 >>u d4_128, dwArg0C << d5_130 | dwArg10 >>u d4_128, out d1_161, out d2_162)
	word32 d3_150 = dwArg10 << d5_130
	word32 d7_172 = __swap(d0_163)
	word32 d6_174 = __swap(d3_150)
	word32 d3_173 = d3_150 *u SLICE(d7_172, word16, 0)
	word32 d2_178 = __swap(d0_163 *u SLICE(d3_150, word16, 0))
	word16 v36_179 = SLICE(d2_178 + d3_173, word16, 0)
	word32 d4_175 = d0_163 *u SLICE(d6_174, word16, 0)
	word32 d2_181 = SEQ(SLICE(d2_178, word16, 16), v36_179)
	word16 v40_187 = SLICE(d2_181 + d4_175, word16, 0)
	word32 d7_176 = d7_172 *u SLICE(d6_174, word16, 0)
	word32 d2_195 = __swap(SEQ(SLICE(d2_181, word16, 16), v40_187))
	word32 d7_186 = SEQ(SLICE(d7_176, word16, 16), SLICE(d7_176, word16, 0) + (v36_179 <u 0x0000))
	word32 d6_158 = dwArg08 << d5_130
	word32 d3_203 = __swap(SEQ(SLICE(d3_173, word16, 16), 0x0000)) + __swap(SEQ(SLICE(d4_175, word16, 16), 0x0000)) + SEQ(SLICE(d7_186, word16, 16), SLICE(d7_186, word16, 0) + (v40_187 <u 0x0000))
	word32 v49_206 = d1_161 - d2_195
	branch v49_206 <u 0x00000000 l00002AF4
// DataOut: a0 a1 a2 a3 a5 d0 d1 d2 d3 d5
// DataOut (flags): Z
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002AEE:
	branch v49_206 != 0x00000000 l00002AF8
// DataOut: a0 a1 a2 a3 a5 d0 d1 d2 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002AF0:
	branch d6_158 - d3_203 >=u 0x00000000 l00002AF8
// DataOut: a0 a1 a2 a3 a5 d0 d1 d2 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002AF4:
	d3_203 = d3_203 - d3_150
	d2_195 = d2_195 - d2_162 - (d3_203 <u 0x00000000)
// DataOut: a0 a2 a3 a5 d1 d2 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002AF8:
	word32 d6_222 = d6_158 - d3_203
	d1_138 = d1_161 - d2_195 - (d6_222 <u 0x00000000) << 32 - d5_130 | d6_222 >>u d5_130
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:0 d4:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A8A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002A92
// DataOut: a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A8E:
	branch dwArg10 - dwArg08 >u 0x00000000 l00002B0C
// DataOut: a2 a3 a5 d0 d1 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A92:
	d1_138 = dwArg08 - dwArg10
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d6:<invalid> d4:<invalid> a1:00004134 d5:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A18:
	branch dwArg04 - dwArg10 >=u 0x00000000 l00002A2A
// DataOut: a0 a2 a3 a5 d0 d1 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A2A:
	branch dwArg10 != 0x00000000 l00002A36
// DataOut: a0 a2 a3 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A2E:
	d3_103 = (int32) (int16) SEQ((uint16) (1 % SLICE(dwArg10, uint16, 0)), (uint16) (1 /u SLICE(dwArg10, uint16, 0)))
// DataOut: a0 a2 a3 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A36:
	word32 d1_87
	word32 d2_88
	fn000027BC(0, dwArg04, d3_103, out d1_87, out d2_88)
	word32 d2_94
	fn000027BC(d1_87, dwArg08, d2_88, out d1_138, out d2_94)
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d4:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002A1C:
	word32 d2_64
	fn000027BC(dwArg04, dwArg08, dwArg10, out d1_138, out d2_64)
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7
// LocalsOut: fp(32)

l00002B0C:
	return d1_138
// DataOut: a2 a3 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 24 d1:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> d4:<invalid> d6:<invalid> a1:<invalid> d5:<invalid> d7:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7

fn00002A00_exit:
// DataOut: d1
// DataOut (flags): 
// SymbolicIn: a7:fp d1:<invalid> d0:<invalid> a0:<invalid> d3:d3 d2:d2 d4:d4 d5:d5 d6:d6 d7:d7 a1:<invalid> -24(fp):d2 -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):d7



void fn00002DFC(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a7
// Stack args: Stack +0004(32)
fn00002DFC_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002DFC:
	branch dwArg04 == 0x00000000 l00002E14
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002E14:
	word32 a2_36 = Mem0[0x00004260:word32]
	branch a2_36 == 0x00000000 l00002E3A
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00002E1E:
	branch (Mem0[a2_36 + 24:word32] & 2) == 0x00000000 l00002E30
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00002E26:
	word32 a0_70
	word32 a1_71
	word32 a5_72
	fn00002208(a2_36, out a0_70, out a1_71, out a5_72)
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00002E30:
	a2_36 = Mem0[a2_36 + 12:word32]
	branch a2_36 != 0x00000000 l00002E1E
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00002E08:
	word32 a0_27
	word32 a1_28
	word32 a5_29
	fn00002208(dwArg04, out a0_27, out a1_28, out a5_29)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> -4(fp):a2

l00002E3A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2

fn00002DFC_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:0 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2



word32 fn00002E40(word32 d0, word32 d1, word32 d7, word32 a1, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1 d0 d1 d7
// LiveOut: a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
// Stack args: Stack +0004(32)
fn00002E40_entry:
	*d1Out = d1
// DataOut: a1 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002E40:
	word32 a1_21
	return fn00002E8C(d0, d1, d7, a1, Mem0[0x00004254:word32], dwArg04, fp + 8, out a1_21)
// DataOut: a1 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00002E40_exit:
// DataOut: a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):fp + 8



word32 fn00002E5C(byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d0
// Trashed: CVZNX a0 d0
// Preserved: a2 a7
// Stack args: Stack +0007(8) Stack +0008(32)
fn00002E5C_entry:
// DataOut: a1 a3 a4 a5 a6 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0007(8) Stack +0008(32)

l00002E5C:
	word32 d0_13 = dwArg08
	branch dwArg08 == 0x00000000 l00002E86
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: Stack +0007(8)

l00002E68:
	d0_13 = Mem0[dwArg08 + 4:word32]
	branch d0_13 - Mem0[dwArg08 + 8:word32] >=u 0x00000000 l00002E7A
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> -4(fp):a2
// LocalsOut: Stack +0007(8)

l00002E72:
	Mem37[Mem0[dwArg08 + 4:word32]:byte] = bArg07
// DataOut: a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> -4(fp):a2

l00002E7A:
	Mem29[dwArg08 + 20:word32] = Mem0[dwArg08 + 20:word32] + 0x00000001
	Mem32[dwArg08 + 4:word32] = Mem29[dwArg08 + 4:word32] - 0x00000001
// DataOut: a1 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> -4(fp):a2

l00002E86:
	return d0_13
// DataOut: a1 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> -4(fp):a2

fn00002E5C_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:<invalid> a0:<invalid> -4(fp):a2



word32 fn00002E8C(word32 d0, word32 d1, word32 d7, word32 a1, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1 d0 d1 d7
// LiveOut: a1 d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d1 d2 d3 d4 d5 d6 d7
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32)
fn00002E8C_entry:
	*a1Out = a1
// DataOut: a1 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l00002E8C:
	word32 a7_150 = fp + -120
	word32 d2_140 = dwArg0C
	word32 a4_147 = dwArg08
	word32 a2_1037 = dwArg04
	word32 d4_141 = 0
	word32 d5_1257 = 0
	branch Mem0[dwArg08:byte] == 0x00 l00003E8E
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

l00002EAE:
	word32 d3_166
	word32 d3_151 = 0
	branch Mem0[a4_147:byte] != 0x25 l00003D8C
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003D8C:
	word32 d0_3021 = (uint32) (uint8) Mem0[0x00002B15 + (SEQ(SLICE(d0, word24, 8), Mem0[a4_147:byte]) & 0x000000FF):byte]
	d0 = d0_3021 & 0x00000008
	branch (d0_3021 & 0x00000008) == 0x00000000 l00003E18
// DataOut: a2 a4 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E18:
	word32 d0_3153
	word32 a0_3142 = a2_1037 + 24
	Mem3144[a0_3142:word32] = Mem0[a0_3142:word32] | 0x00000001
	word32 a0_3145 = a2_1037 + 20
	word32 v126_3146 = Mem3144[a0_3145:word32] - 0x00000001
	Mem3147[a0_3145:word32] = v126_3146
	VN = cond(v126_3146) (alias)
	branch v126_3146 < 0x00000000 l00003E4A
// DataOut: a2 a4 a7 d0 d1 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E4A:
	word32 a7_3215 = a7_150 - 4
	Mem3217[a7_3215:word32] = a2_1037
	word32 a5_3221
	d0_3153 = fn00003F30(dwArg00, out d1, out a1, out a5_3221)
	Mem3224[a7_3215 + 48:word32] = d0_3153
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E2A:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_3188 = Mem3147[a1:word32]
	word32 a7_3189 = a7_150 - 4
	Mem3191[a7_3189:word32] = a2_1037
	Mem3195[a1:word32] = a0_3188 + 1
	a2_1037 = Mem3195[a7_3189:word32]
	d0_3153 = SEQ(SLICE(d0_3021 & 0x00000008, word24, 8), Mem3195[a0_3188:byte])
	Mem3204[a7_3189:word32] = d1
	Mem3210[a7_3189 + 48:word32] = (uint32) (uint8) SLICE(d0_3153, byte, 0)
	d1 = Mem3210[a7_3189:word32]
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E58:
	d0 = (int32) (int16) (int8) SEQ(SLICE(d0_3153, word24, 8), Mem3147[a4_147:byte])
	d5_1257 = Mem3147[a7_150 + 44:word32]
	d3_166 = 0x00000001
	d4_141 = d4_141 + 0x00000001
	branch d0 - Mem3147[a7_150 + 44:word32] == 0x00000000 l00003E82
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E6C:
	branch d5_1257 == 0xFFFFFFFF l00003E7E
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0x00000001 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E74:
	word32 a7_3178 = a7_150 - 4
	Mem3180[a7_3178:word32] = a2_1037
	Mem3183[a7_3178 - 4:word32] = d5_1257
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0x00000001 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E7E:
	d3_166 = 0x00000000
	d4_141 = d4_141 - 0x00000001
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0x00000001 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003DA8:
	word32 d0_3069
	word32 a0_3059 = a2_1037 + 24
	Mem3061[a0_3059:word32] = Mem0[a0_3059:word32] | 0x00000001
	word32 a0_3062 = a2_1037 + 20
	word32 v105_3063 = Mem3061[a0_3062:word32] - 0x00000001
	Mem3064[a0_3062:word32] = v105_3063
	VN = cond(v105_3063) (alias)
	branch v105_3063 < 0x00000000 l00003DD2
// DataOut: a2 a4 a7 d0 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003DD2:
	Mem3133[a7_150 - 4:word32] = a2_1037
	word32 d1_3135
	word32 a5_3137
	d0_3069 = fn00003F30(dwArg00, out d1_3135, out a1, out a5_3137)
	d1 = d0_3069
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003DBA:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_3112 = Mem3064[a1:word32]
	word32 a7_3113 = a7_150 - 4
	Mem3115[a7_3113:word32] = a2_1037
	Mem3119[a1:word32] = a0_3112 + 1
	d0_3069 = SEQ(SLICE(d0, word24, 8), Mem3119[a0_3112:byte])
	a2_1037 = Mem3119[a7_3113:word32]
	d1 = (uint32) (uint8) SLICE(d0_3069, byte, 0)
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003DDE:
	word32 d0_3087 = (uint32) (uint8) Mem3064[0x00002B15 + (SEQ(SLICE(d0_3069, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1257 = d1
	d4_141 = d4_141 + 0x00000001
	d0 = d0_3087 & 0x00000008
	branch (d0_3087 & 0x00000008) != 0x00000000 l00003DA8
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E00:
	branch d1 == 0xFFFFFFFF l00003E12
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E08:
	word32 a7_3102 = a7_150 - 4
	Mem3104[a7_3102:word32] = a2_1037
	Mem3107[a7_3102 - 4:word32] = d1
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E12:
	d4_141 = d4_141 - 0x00000001
	d3_166 = 1
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E82:
	a4_147 = a4_147 + 1
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002EB8:
	Mem187[a7_150 + 72:byte] = 0x69
	Mem188[a7_150 + 73:byte] = 0x00
	word32 a3_189 = a4_147 + 1
	word32 d0_199 = (uint32) (uint8) Mem188[0x00002B15 + (uint32) ((uint8) Mem188[a3_189:byte]):byte]
	word32 d6_185 = -1
	d0 = d0_199 & 0x00000004
	branch (d0_199 & 0x00000004) == 0x00000000 l00002F3C
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002EE0:
	word32 d0_2957 = (uint32) (uint8) Mem188[0x00002B15 + (uint32) ((uint8) Mem188[a3_189:byte]):byte]
	d6_185 = 0
	d0 = d0_2957 & 0x00000004
	branch (d0_2957 & 0x00000004) == 0x00000000 l00002F3C
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:-1 a3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002EFA:
	word32 a7_2968 = a7_150 - 4
	Mem2970[a7_2968:word32] = d2_140
	word32 d1_2975 = __swap(10) *u SLICE(d6_185, word16, 0)
	word32 d0_2984 = SLICE(d6_185, word16, 0) *u 10 + SEQ(SLICE(__swap(SEQ(SLICE(d1_2975, word16, 16), SLICE(d1_2975 + __swap(d6_185) *u 0x000A, word16, 0))), word16, 16), 0x0000)
	a3_189 = a3_189 + 1
	word32 d1_2992 = (uint32) (uint8) Mem2970[a3_189:byte]
	word32 d0_3006 = (uint32) (uint8) Mem2970[0x00002B15 + (uint32) ((uint8) Mem2970[a3_189:byte]):byte]
	d2_140 = Mem2970[a7_2968:word32]
	d1 = d1_2992 - 0x00000030
	d6_185 = d1_2992 - 0x00000030 + d0_2984
	d0 = d0_3006 & 0x00000004
	branch (d0_3006 & 0x00000004) != 0x00000000 l00002EFA
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F3C:
	branch Mem188[a3_189:byte] == 0x68 l00002F66
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F42:
	branch Mem188[a3_189:byte] == 0x6C l00002F66
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F48:
	branch Mem188[a3_189:byte] == 0x4C l00002F66
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F4E:
	branch Mem188[a3_189:byte] == 0x7A l00002F66
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F54:
	branch Mem188[a3_189:byte] == 0x6A l00002F66
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F5A:
	branch Mem188[a3_189:byte] == 0x74 l00002F66
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F60:
	branch Mem188[a3_189:byte] != 0x2A l00002FCE
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F66:
	d7 = SEQ(SLICE(d7, word24, 8), Mem188[a7_150 + 73:byte])
	d1 = SEQ(SLICE(d1, word24, 8), Mem188[a7_150 + 72:byte])
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F6E:
	branch Mem188[a3_189:byte] != 0x2A l00002F78
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F78:
	branch SLICE(d1, byte, 0) != 0x68 l00002F88
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F7E:
	branch Mem188[a3_189:byte] != 0x68 l00002F88
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F88:
	branch SLICE(d1, byte, 0) != 0x6C l00002F98
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F8E:
	branch Mem188[a3_189:byte] != 0x6C l00002F98
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F98:
	d1 = SEQ(SLICE(d1, word24, 8), Mem188[a3_189:byte])
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F94:
	d1 = 1
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F84:
	d1 = 2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F74:
	d7 = 1
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002F9A:
	a3_189 = a3_189 + 1
	branch Mem188[a3_189:byte] == 0x68 l00002F6E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FA2:
	branch Mem188[a3_189:byte] == 0x6C l00002F6E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FA8:
	branch Mem188[a3_189:byte] == 0x4C l00002F6E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FAE:
	branch Mem188[a3_189:byte] == 0x7A l00002F6E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FB4:
	branch Mem188[a3_189:byte] == 0x6A l00002F6E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FBA:
	branch Mem188[a3_189:byte] == 0x74 l00002F6E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FC0:
	branch Mem188[a3_189:byte] == 0x2A l00002F6E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FC6:
	Mem2902[a7_150 + 72:byte] = SLICE(d1, byte, 0)
	Mem2904[a7_150 + 73:byte] = SLICE(d7, byte, 0)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FCE:
	branch Mem188[a7_150 + 72:byte] != 0x6A l00002FDC
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FD6:
	Mem2861[a7_150 + 72:byte] = 0x01
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FDC:
	branch Mem188[a7_150 + 72:byte] != 0x74 l00002FEA
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FE4:
	Mem2858[a7_150 + 72:byte] = 0x69
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FEA:
	branch Mem188[a7_150 + 72:byte] != 0x7A l00002FF8
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FF2:
	Mem2855[a7_150 + 72:byte] = 0x6C
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FF8:
	byte v83_231 = Mem188[a3_189:byte]
	word32 a3_1686 = a3_189 + 1
	d7 = SEQ(SLICE(d7, word24, 8), v83_231)
	branch v83_231 == 0x00 l0000306E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d7:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00002FFC:
	branch SLICE(d7, byte, 0) == 0x25 l0000306E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003002:
	branch SLICE(d7, byte, 0) == 0x63 l0000306E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003008:
	branch SLICE(d7, byte, 0) == 0x6E l0000306E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000300E:
	branch SLICE(d7, byte, 0) == 0x5B l0000306E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:0 d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003014:
	word32 d0_2797
	word32 a0_2787 = a2_1037 + 24
	Mem2789[a0_2787:word32] = Mem188[a0_2787:word32] | 0x00000001
	word32 a0_2790 = a2_1037 + 20
	word32 v90_2791 = Mem2789[a0_2790:word32] - 0x00000001
	Mem2792[a0_2790:word32] = v90_2791
	VN = cond(v90_2791) (alias)
	branch v90_2791 < 0x00000000 l0000303E
// DataOut: a2 a3 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000303E:
	Mem2845[a7_150 - 4:word32] = a2_1037
	word32 d1_2847
	word32 a5_2849
	d0_2797 = fn00003F30(dwArg00, out d1_2847, out a1, out a5_2849)
	d1 = d0_2797
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003026:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_2824 = Mem2792[a1:word32]
	word32 a7_2825 = a7_150 - 4
	Mem2827[a7_2825:word32] = a2_1037
	Mem2831[a1:word32] = a0_2824 + 1
	d0_2797 = SEQ(SLICE(d0, word24, 8), Mem2831[a0_2824:byte])
	a2_1037 = Mem2831[a7_2825:word32]
	d1 = (uint32) (uint8) SLICE(d0_2797, byte, 0)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000304A:
	word32 d0_2815 = (uint32) (uint8) Mem2792[0x00002B15 + (SEQ(SLICE(d0_2797, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1257 = d1
	d4_141 = d4_141 + 0x00000001
	d0 = d0_2815 & 0x00000008
	branch (d0_2815 & 0x00000008) != 0x00000000 l00003014
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000306C:
	d3_151 = 1
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000306E:
	word32 d1_254 = SEQ(SLICE(d1, word24, 8), SLICE(d7, byte, 0))
	byte v148_255 = SLICE(d1_254, byte, 0) - 0x25
	word32 d1_257 = SEQ(SLICE(d1_254, word24, 8), v148_255)
	branch v148_255 == 0x00 l000034BA
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034BA:
	word32 a0_2681 = a2_1037 + 24
	Mem2683[a0_2681:word32] = Mem188[a0_2681:word32] | 0x00000001
	word32 a0_2684 = a2_1037 + 20
	word32 v159_2685 = Mem2683[a0_2684:word32] - 0x00000001
	Mem2686[a0_2684:word32] = v159_2685
	VN = cond(v159_2685) (alias)
	branch v159_2685 < 0x00000000 l000034EC
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034EC:
	word32 a7_2749 = a7_150 - 4
	Mem2751[a7_2749:word32] = a2_1037
	word32 a5_2755
	d0 = fn00003F30(dwArg00, out d1, out a1, out a5_2755)
	Mem2758[a7_2749 + 48:word32] = d0
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034CC:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_2722 = Mem2686[a1:word32]
	word32 a7_2723 = a7_150 - 4
	Mem2725[a7_2723:word32] = a2_1037
	Mem2729[a1:word32] = a0_2722 + 1
	a2_1037 = Mem2729[a7_2723:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem2729[a0_2722:byte])
	Mem2738[a7_2723:word32] = d1_257
	Mem2744[a7_2723 + 48:word32] = (uint32) (uint8) SLICE(d0, byte, 0)
	d1 = Mem2744[a7_2723:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034FA:
	d5_1257 = Mem2686[a7_150 + 44:word32]
	d3_166 = d3_151 + 0x00000001
	d4_141 = d4_141 + 0x00000001
	branch Mem2686[a7_150 + 44:word32] == 0x00000025 l00003D86
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000350E:
	branch d5_1257 == 0xFFFFFFFF l00003520
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003516:
	word32 a7_2712 = a7_150 - 4
	Mem2714[a7_2712:word32] = a2_1037
	Mem2717[a7_2712 - 4:word32] = d5_1257
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003520:
	d3_166 = d3_166 - 0x00000001
	d4_141 = d4_141 - 0x00000001
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003078:
	byte v150_286 = SLICE(d1_257, byte, 0) - 0x36
	word32 d1_288 = SEQ(SLICE(d1_257, word24, 8), v150_286)
	branch v150_286 == 0x00 l000031B6
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031B6:
	Mem2210[a7_150 + 44:byte] = 0x00
	branch Mem2210[a3_1686:byte] != 0x5E l000031C8
// DataOut: a2 a3 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031C0:
	Mem2678[a7_150 + 44:byte] = 0x01
	a3_1686 = a3_1686 + 1
// DataOut: a2 a3 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031C8:
	Mem2215[a7_150 + 52:word32] = 0x00000000
	d7 = SEQ(SLICE(d7, word24, 8), Mem2215[a7_150 + 44:byte])
	word32 d1_2219 = Mem2215[a7_150 + 52:word32]
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031D4:
	word32 d5_2230
	branch SLICE(d7, byte, 0) == 0x00 l000031E0
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031E0:
	d5_2230 = 0
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031D8:
	d5_2230 = 0x000000FF
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031E2:
	Mem2233[a7_150 + 78 + d1_2219:byte] = SLICE(d5_2230, byte, 0)
	d1_2219 = d1_2219 + 0x00000001
	branch d1_2219 <u 0x00000020 l000031D4
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031F4:
	Mem2240[a7_150 + 132:word32] = d2_140
	Mem2242[a7_150 + 44:byte] = SLICE(d7, byte, 0)
	word32 d2_2245 = SEQ(SLICE(d2_140, word24, 8), Mem2242[a7_150 + 44:byte])
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003200:
	branch Mem2242[a3_1686:byte] == 0x00 l00003276
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003204:
	a3_1686 = a3_1686 + 1
	d1_2219 = SEQ(SLICE(d1_2219, word24, 8), Mem2242[a3_1686:byte])
	branch Mem2242[a3_1686:byte] != 0x2D l00003218
// DataOut: a2 a3 a7 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000320C:
	branch SLICE(d1_2219, byte, 0) - Mem2242[a3_1686 + 1:byte] >=u 0x00 l00003218
// DataOut: a2 a3 a7 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003218:
	d7 = SEQ(SLICE(d7, word24, 8), SLICE(d1_2219, byte, 0))
// DataOut: a2 a3 a7 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003212:
	a3_1686 = a3_1686 + 2
	d7 = SEQ(SLICE(d7, word24, 8), Mem2242[a3_1686 + 1:byte])
// DataOut: a2 a3 a7 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000321A:
	word32 d5_2582 = (uint32) (uint8) SLICE(d1_2219, byte, 0)
	d0 = (uint32) (uint8) SLICE(d7, byte, 0)
	branch d0 - d5_2582 <u 0x00000000 l00003270
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003226:
	branch SLICE(d2_2245, byte, 0) == 0x00 l0000324A
// DataOut: a2 a3 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000324A:
	word32 a0_2644 = a7_150 + 78 + (d5_2582 >>u 0x00000003)
	d1_2219 = (uint32) (uint8) Mem2242[a0_2644:byte]
	Mem2657[a0_2644:byte] = SLICE(1 << (d5_2582 & 7) | d1_2219, byte, 0)
// DataOut: a2 a3 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000322A:
	word32 a0_2625 = a7_150 + 78 + (d5_2582 >>u 0x00000003)
	d1_2219 = (uint32) (uint8) Mem2242[a0_2625:byte]
	Mem2639[a0_2625:byte] = SLICE(~(1 << (d5_2582 & 7)) & d1_2219, byte, 0)
// DataOut: a2 a3 a7 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003266:
	d5_2582 = d5_2582 + 0x00000001
	d0 = (uint32) (uint8) SLICE(d7, byte, 0)
	branch d0 - d5_2582 >=u 0x00000000 l00003226
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003270:
	branch Mem2242[a3_1686:byte] != 0x5D l00003200
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003276:
	word32 a6_2275
	d2_140 = Mem2242[a7_150 + 132:word32]
	a3_1686 = a3_1686 + 1
	branch Mem2242[a7_150 + 73:byte] != 0x00 l00003296
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003296:
	a6_2275 = 0x00000000
// DataOut: a2 a3 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003282:
	word32 d0_2562 = d2_140 + 0x00000003 >>u 0x00000002
	d2_140 = (d0_2562 << 0x00000002) + 0x00000004
	d0 = d0_2562 << 0x00000002
	a6_2275 = Mem2242[d2_140 + -4:word32]
// DataOut: a2 a3 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003298:
	word32 a0_2276 = a2_1037 + 24
	Mem2278[a0_2276:word32] = Mem2242[a0_2276:word32] | 0x00000001
	word32 a0_2279 = a2_1037 + 20
	word32 v581_2280 = Mem2278[a0_2279:word32] - 0x00000001
	Mem2281[a0_2279:word32] = v581_2280
	VN = cond(v581_2280) (alias)
	branch v581_2280 < 0x00000000 l000032CA
// DataOut: a2 a3 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032CA:
	word32 a7_2548 = a7_150 - 4
	Mem2550[a7_2548:word32] = a2_1037
	word32 a5_2554
	d0 = fn00003F30(dwArg00, out d1, out a1, out a5_2554)
	Mem2557[a7_2548 + 48:word32] = d0
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032AA:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_2521 = Mem2281[a1:word32]
	word32 a7_2522 = a7_150 - 4
	Mem2524[a7_2522:word32] = a2_1037
	Mem2528[a1:word32] = a0_2521 + 1
	a2_1037 = Mem2528[a7_2522:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem2528[a0_2521:byte])
	Mem2537[a7_2522:word32] = d1_2219
	Mem2543[a7_2522 + 48:word32] = (uint32) (uint8) SLICE(d0, byte, 0)
	d1 = Mem2543[a7_2522:word32]
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032D8:
	d5_1257 = Mem2281[a7_150 + 44:word32]
	word32 d3_2292 = d3_151 + 0x00000001
	word32 d4_2293 = d4_141 + 0x00000001
	branch Mem2281[a7_150 + 44:word32] == 0xFFFFFFFF l000033A6
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000032EC:
	word32 a7_2347 = a7_150 - 4
	Mem2349[a7_2347:word32] = a7_150 + 78
	Mem2352[a7_2347 - 4:word32] = a1
	Mem2354[a7_2347 - 0x00000008:word32] = 0x00000008
	Mem2357[a7_2347 - 0x0000000C:word32] = d5_1257
	d1 = (uint32) (uint8) Mem2357[Mem2357[a7_2347:word32] + fn00002948(d2_140, dwArg00, dwArg04):byte]
	*a1Out = Mem2357[a7_2347 - 0x00000004:word32]
	d0 = 1 << (d5_1257 & 7) & d1
	branch d0 == 0x00000000 l000033A6
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000331C:
	branch d6_185 - d3_2292 <u 0x00000000 l000033A6
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003322:
	d7 = SEQ(SLICE(d7, word24, 8), Mem2357[a7_2347 + 77:byte])
// DataOut: a2 a3 a6 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003326:
	branch SLICE(d7, byte, 0) != 0x00 l0000332C
// DataOut: a2 a3 a6 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000332A:
	Mem2517[a6_2275:byte] = SLICE(d5_1257, byte, 0)
	a6_2275 = a6_2275 + 1
// DataOut: a2 a3 a6 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000332C:
	word32 a0_2410 = a2_1037 + 24
	Mem2412[a0_2410:word32] = Mem2357[a0_2410:word32] | 0x00000001
	word32 a0_2413 = a2_1037 + 20
	word32 v607_2414 = Mem2412[a0_2413:word32] - 0x00000001
	Mem2415[a0_2413:word32] = v607_2414
	VN = cond(v607_2414) (alias)
	branch v607_2414 < 0x00000000 l00003356
// DataOut: a2 a3 a6 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003356:
	Mem2507[a7_150 - 4:word32] = a2_1037
	word32 d1_2509
	word32 a5_2511
	d0 = fn00003F30(dwArg00, out d1_2509, out a1, out a5_2511)
	d1 = d0
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000333E:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_2486 = Mem2415[a1:word32]
	word32 a7_2487 = a7_150 - 4
	Mem2489[a7_2487:word32] = a2_1037
	Mem2493[a1:word32] = a0_2486 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem2493[a0_2486:byte])
	a2_1037 = Mem2493[a7_2487:word32]
	d1 = (uint32) (uint8) SLICE(d0, byte, 0)
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003362:
	d5_1257 = d1
	d3_2292 = d3_2292 + 0x00000001
	d4_2293 = d4_2293 + 0x00000001
	branch d1 == 0xFFFFFFFF l000033A2
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003370:
	word32 a7_2446 = a7_150 - 4
	Mem2448[a7_2446:word32] = a7_150 + 78
	Mem2451[a7_2446 - 4:word32] = a1
	Mem2453[a7_2446 - 0x00000008:word32] = 0x00000008
	Mem2456[a7_2446 - 0x0000000C:word32] = d1
	d1 = (uint32) (uint8) Mem2456[Mem2456[a7_2446:word32] + fn00002948(d2_140, dwArg00, dwArg04):byte]
	*a1Out = Mem2456[a7_2446 - 0x00000004:word32]
	d0 = 1 << (d1 & 7) & d1
	branch d0 == 0x00000000 l000033A2
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000339E:
	branch d6_185 - d3_2292 >=u 0x00000000 l00003326
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033A2:
	Mem2443[a7_150 + 73:byte] = SLICE(d7, byte, 0)
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033A6:
	branch d5_1257 == 0xFFFFFFFF l000033B8
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033AE:
	word32 a7_2337 = a7_150 - 4
	Mem2339[a7_2337:word32] = a2_1037
	Mem2342[a7_2337 - 4:word32] = d5_1257
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033B8:
	d3_166 = d3_2292 - 0x00000001
	d4_141 = d4_2293 - 0x00000001
	branch Mem2281[a7_150 + 73:byte] != 0x00 l00003D86
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033C4:
	branch d3_166 == 0x00000000 l00003D86
// DataOut: a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033CA:
	Mem2332[a6_2275:byte] = 0x00
	Mem2335[a7_150 + 60:word32] = Mem2332[a7_150 + 60:word32] + 0x00000001
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003080:
	byte v152_291 = SLICE(d1_288, byte, 0) - 0x08
	word32 d1_293 = SEQ(SLICE(d1_288, word24, 8), v152_291)
	branch v152_291 == 0x00 l00003096
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003096:
	branch d6_185 != 0xFFFFFFFF l000030A0
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000309E:
	d6_185 = 1
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030A0:
	word32 a1_1982
	branch Mem188[a7_150 + 73:byte] != 0x00 l000030BA
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030BA:
	a1_1982 = 0x00000000
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030A6:
	d0 = d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_140 = d0 + 0x00000004
	a1_1982 = Mem188[d0:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030BC:
	word32 a0_1985 = a2_1037 + 24
	Mem1987[a0_1985:word32] = Mem188[a0_1985:word32] | 0x00000001
	word32 a0_1988 = a2_1037 + 20
	Mem1990[a0_1988:word32] = Mem1987[a0_1988:word32] - 0x00000001
	Mem1993[a7_150 + 44:word32] = a1_1982
	VN = DPB(VN, false, 0) (alias)
	branch VN l000030F4
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030F4:
	word32 a1_2180 = Mem1993[a7_150 + 44:word32]
	word32 a7_2181 = a7_150 - 4
	Mem2183[a7_2181:word32] = a2_1037
	Mem2185[a7_2181 + 48:word32] = a1_2180
	word32 a1_2188
	word32 a5_2189
	d0 = fn00003F30(dwArg00, out d1, out a1_2188, out a5_2189)
	Mem2192[a7_2181 + 56:word32] = d0
	Mem2195[a7_2181 + 48:word32] = Mem2192[a7_2181 + 48:word32]
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000030D4:
	word32 a1_2152 = a2_1037 + 4
	word32 a0_2153 = Mem1993[a1_2152:word32]
	word32 a7_2154 = a7_150 - 4
	Mem2156[a7_2154:word32] = a2_1037
	Mem2160[a1_2152:word32] = a0_2153 + 1
	a2_1037 = Mem2160[a7_2154:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem2160[a0_2153:byte])
	Mem2169[a7_2154:word32] = d1_293
	Mem2175[a7_2154 + 56:word32] = (uint32) (uint8) SLICE(d0, byte, 0)
	d1 = Mem2175[a7_2154:word32]
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003112:
	a1 = Mem1993[a7_150 + 44:word32]
	*a1Out = a1
	d5_1257 = Mem1993[a7_150 + 52:word32]
	word32 d3_2006 = d3_151 + 0x00000001
	word32 d4_2007 = d4_141 + 0x00000001
	branch Mem1993[a7_150 + 52:word32] == 0xFFFFFFFF l0000318A
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003128:
	Mem2059[a7_150 + 44:word32] = a1
	branch d6_185 - d3_2006 <u 0x00000000 l0000318A
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003130:
	d7 = SEQ(SLICE(d7, word24, 8), Mem2059[a7_150 + 73:byte])
	word32 a4_2067 = Mem2059[a7_150 + 44:word32]
// DataOut: a2 a3 a4 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003138:
	branch SLICE(d7, byte, 0) != 0x00 l0000313E
// DataOut: a2 a3 a4 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000313C:
	Mem2149[a4_2067:byte] = SLICE(d5_1257, byte, 0)
	a4_2067 = a4_2067 + 1
// DataOut: a2 a3 a4 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000313E:
	word32 a0_2088 = a2_1037 + 24
	Mem2090[a0_2088:word32] = Mem2059[a0_2088:word32] | 0x00000001
	word32 a0_2091 = a2_1037 + 20
	word32 v310_2092 = Mem2090[a0_2091:word32] - 0x00000001
	Mem2093[a0_2091:word32] = v310_2092
	VN = cond(v310_2092) (alias)
	branch v310_2092 < 0x00000000 l00003168
// DataOut: a2 a3 a4 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003168:
	Mem2139[a7_150 - 4:word32] = a2_1037
	word32 d1_2141
	word32 a5_2143
	d0 = fn00003F30(dwArg00, out d1_2141, out a1, out a5_2143)
	d1 = d0
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003150:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_2118 = Mem2093[a1:word32]
	word32 a7_2119 = a7_150 - 4
	Mem2121[a7_2119:word32] = a2_1037
	Mem2125[a1:word32] = a0_2118 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem2125[a0_2118:byte])
	a2_1037 = Mem2125[a7_2119:word32]
	d1 = (uint32) (uint8) SLICE(d0, byte, 0)
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003174:
	d5_1257 = d1
	d3_2006 = d3_2006 + 0x00000001
	d4_2007 = d4_2007 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003186
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003182:
	branch d6_185 - d3_2006 >=u 0x00000000 l00003138
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003186:
	Mem2112[a7_150 + 73:byte] = SLICE(d7, byte, 0)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000318A:
	branch d5_1257 == 0xFFFFFFFF l0000319C
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003192:
	word32 a7_2049 = a7_150 - 4
	Mem2051[a7_2049:word32] = a2_1037
	Mem2054[a7_2049 - 4:word32] = d5_1257
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000319C:
	d3_166 = d3_2006 - 0x00000001
	d4_141 = d4_2007 - 0x00000001
	branch Mem1993[a7_150 + 73:byte] != 0x00 l00003D86
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031A8:
	branch d3_166 == 0x00000000 l00003D86
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000031AE:
	Mem2047[a7_150 + 60:word32] = Mem1993[a7_150 + 60:word32] + 0x00000001
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003084:
	byte v154_296 = SLICE(d1_293, byte, 0) - 0x0B
	d1 = SEQ(SLICE(d1_293, word24, 8), v154_296)
	branch v154_296 == 0x00 l00003528
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003528:
	branch Mem188[a7_150 + 73:byte] != 0x00 l000035C0
// DataOut: a1 a2 a3 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003530:
	branch Mem188[a7_150 + 72:byte] != 0x01 l00003552
// DataOut: a1 a2 a3 a7 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003552:
	branch Mem188[a7_150 + 72:byte] != 0x6C l00003570
// DataOut: a1 a2 a3 a7 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003570:
	branch Mem188[a7_150 + 72:byte] != 0x68 l0000358E
// DataOut: a1 a2 a3 a7 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000358E:
	branch Mem188[a7_150 + 72:byte] != 0x02 l000035AC
// DataOut: a1 a2 a3 a7 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035AC:
	d0 = d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1971[Mem188[d0:word32]:word32] = d4_141
	d2_140 = d0 + 0x00000004
// DataOut: a1 a2 a3 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003596:
	d0 = d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1959[Mem188[d0:word32]:byte] = SLICE(d4_141, byte, 0)
	d2_140 = d0 + 0x00000004
// DataOut: a1 a2 a3 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003578:
	d0 = d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1944[Mem188[d0:word32]:word16] = SLICE(d4_141, word16, 0)
	d2_140 = d0 + 0x00000004
// DataOut: a1 a2 a3 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000355A:
	d0 = d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1929[Mem188[d0:word32]:word32] = d4_141
	d2_140 = d0 + 0x00000004
// DataOut: a1 a2 a3 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003538:
	d0 = d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 a0_1908 = Mem188[d0:word32]
	Mem1910[a0_1908 + 4:word32] = d4_141
	Mem1911[a0_1908:word32] = 0x00000000
	d2_140 = d0 + 0x00000004
// DataOut: a1 a2 a3 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035C0:
	Mem1895[a7_150 + 60:word32] = Mem188[a7_150 + 60:word32] + 0x00000001
	d3_166 = 1
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000308C:
	byte v156_301 = SLICE(d1, byte, 0) - 0x05
	d1 = SEQ(SLICE(d1, word24, 8), v156_301)
	branch v156_301 == 0x00 l000033D4
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033D4:
	word32 a5_1695
	branch Mem188[a7_150 + 73:byte] != 0x00 l000033EE
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033EE:
	a5_1695 = 0x00000000
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033DA:
	d0 = d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_140 = d0 + 0x00000004
	a5_1695 = Mem188[d0:word32]
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033F0:
	branch d5_1257 == 0xFFFFFFFF l0000348C
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000033FA:
	word32 d0_1755 = (uint32) (uint8) Mem188[0x00002B15 + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1257, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1755 & 0x00000008
	branch (d0_1755 & 0x00000008) != 0x00000000 l0000348C
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003416:
	branch d6_185 - d3_151 <u 0x00000000 l0000348C
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000341A:
	d7 = SEQ(SLICE(d7, word24, 8), Mem188[a7_150 + 73:byte])
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000341E:
	branch SLICE(d7, byte, 0) != 0x00 l00003424
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003422:
	Mem1868[a5_1695:byte] = SLICE(d5_1257, byte, 0)
	a5_1695 = a5_1695 + 1
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003424:
	word32 a0_1787 = a2_1037 + 24
	Mem1789[a0_1787:word32] = Mem188[a0_1787:word32] | 0x00000001
	word32 a0_1790 = a2_1037 + 20
	word32 v197_1791 = Mem1789[a0_1790:word32] - 0x00000001
	Mem1792[a0_1790:word32] = v197_1791
	VN = cond(v197_1791) (alias)
	branch v197_1791 < 0x00000000 l0000344E
// DataOut: a2 a3 a5 a7 d0 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000344E:
	Mem1858[a7_150 - 4:word32] = a2_1037
	word32 d1_1860
	d0 = fn00003F30(dwArg00, out d1_1860, out a1, out a5_1695)
	d1 = d0
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003436:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_1837 = Mem1792[a1:word32]
	word32 a7_1838 = a7_150 - 4
	Mem1840[a7_1838:word32] = a2_1037
	Mem1844[a1:word32] = a0_1837 + 1
	d0 = SEQ(SLICE(d0, word24, 8), Mem1844[a0_1837:byte])
	a2_1037 = Mem1844[a7_1838:word32]
	d1 = (uint32) (uint8) SLICE(d0, byte, 0)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000345A:
	d5_1257 = d1
	d3_151 = d3_151 + 0x00000001
	d4_141 = d4_141 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003488
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003468:
	word32 d0_1827 = (uint32) (uint8) Mem1792[0x00002B15 + (SEQ(SLICE(d0, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1827 & 0x00000008
	branch (d0_1827 & 0x00000008) != 0x00000000 l00003488
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003484:
	branch d6_185 - d3_151 >=u 0x00000000 l0000341E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003488:
	Mem1816[a7_150 + 73:byte] = SLICE(d7, byte, 0)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000348C:
	branch d5_1257 == 0xFFFFFFFF l0000349E
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003494:
	word32 a7_1737 = a7_150 - 4
	Mem1739[a7_1737:word32] = a2_1037
	Mem1742[a7_1737 - 4:word32] = d5_1257
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000349E:
	d3_166 = d3_151 - 0x00000001
	d4_141 = d4_141 - 0x00000001
	branch Mem188[a7_150 + 73:byte] != 0x00 l00003D86
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034AA:
	branch d3_166 == 0x00000000 l00003D86
// DataOut: a1 a2 a3 a5 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000034B0:
	Mem1732[a5_1695:byte] = 0x00
	Mem1735[a7_150 + 60:word32] = Mem1732[a7_150 + 60:word32] + 0x00000001
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a5:<invalid> a1:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003092:
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035CA:
	Mem306[a7_150 + 48:word32] = 0x00000000
	Mem307[a7_150 + 44:word32] = 0x00000000
	Mem308[a7_150 + 110:word32] = 0x00000000
	branch SLICE(d7, byte, 0) != 0x00 l000035DC
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035DA:
	a3_1686 = a3_1686 - 1
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035DC:
	branch SLICE(d7, byte, 0) != 0x70 l000035EA
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035E2:
	Mem1683[a7_150 + 72:byte] = 0x6C
	d7 = 120
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035EA:
	branch d5_1257 != 0x0000002D l000035F8
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035F2:
	branch SLICE(d7, byte, 0) != 0x75 l00003600
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000035F8:
	branch d5_1257 != 0x0000002B l00003650
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003600:
	branch d6_185 - d3_151 <u 0x00000000 l00003650
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003604:
	Mem1615[a7_150 + 110:word32] = d5_1257
	word32 a0_1616 = a2_1037 + 24
	Mem1618[a0_1616:word32] = Mem1615[a0_1616:word32] | 0x00000001
	word32 a0_1619 = a2_1037 + 20
	word32 v227_1620 = Mem1618[a0_1619:word32] - 0x00000001
	Mem1621[a0_1619:word32] = v227_1620
	VN = cond(v227_1620) (alias)
	branch v227_1620 < 0x00000000 l0000363A
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000363A:
	word32 a7_1664 = a7_150 - 4
	Mem1666[a7_1664:word32] = a2_1037
	word32 a5_1670
	d0 = fn00003F30(dwArg00, out d1, out a1, out a5_1670)
	Mem1673[a7_1664 + 56:word32] = d0
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000361A:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_1637 = Mem1621[a1:word32]
	word32 a7_1638 = a7_150 - 4
	Mem1640[a7_1638:word32] = a2_1037
	Mem1644[a1:word32] = a0_1637 + 1
	a2_1037 = Mem1644[a7_1638:word32]
	d0 = SEQ(SLICE(d0, word24, 8), Mem1644[a0_1637:byte])
	Mem1653[a7_1638:word32] = d1
	Mem1659[a7_1638 + 56:word32] = (uint32) (uint8) SLICE(d0, byte, 0)
	d1 = Mem1659[a7_1638:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003648:
	d5_1257 = Mem1621[a7_150 + 52:word32]
	d3_151 = d3_151 + 0x00000001
	d4_141 = d4_141 + 0x00000001
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003650:
	branch SLICE(d7, byte, 0) != 0x69 l000037C2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003658:
	branch d5_1257 != 0x00000030 l00003784
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003662:
	branch d6_185 - d3_151 <u 0x00000000 l00003784
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003784:
	word32 d0_1358 = (uint32) (uint8) Mem308[0x00002B15 + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1257, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1358 & 0x00000004
	branch (d0_1358 & 0x00000004) != 0x00000000 l000037C2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037A0:
	word32 d0_1373 = (uint32) (uint8) Mem308[0x00002B15 + (SEQ(SLICE(d0_1358 & 0x00000004, word24, 8), SLICE(d5_1257, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1373 & 0x00000044
	branch (d0_1373 & 0x00000044) == 0x00000000 l000037C2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037BC:
	branch d6_185 - d3_151 <u 0x00000000 l000037C2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037C0:
	d7 = 120
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003668:
	word32 d0_1397
	word32 a0_1387 = a2_1037 + 24
	Mem1389[a0_1387:word32] = Mem308[a0_1387:word32] | 0x00000001
	word32 a0_1390 = a2_1037 + 20
	word32 v245_1391 = Mem1389[a0_1390:word32] - 0x00000001
	Mem1392[a0_1390:word32] = v245_1391
	VN = cond(v245_1391) (alias)
	branch v245_1391 < 0x00000000 l0000369A
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000369A:
	word32 a7_1598 = a7_150 - 4
	Mem1600[a7_1598:word32] = a2_1037
	word32 a5_1604
	d0_1397 = fn00003F30(dwArg00, out d1, out a1, out a5_1604)
	Mem1607[a7_1598 + 56:word32] = d0_1397
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000367A:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_1571 = Mem1392[a1:word32]
	word32 a7_1572 = a7_150 - 4
	Mem1574[a7_1572:word32] = a2_1037
	Mem1578[a1:word32] = a0_1571 + 1
	a2_1037 = Mem1578[a7_1572:word32]
	d0_1397 = SEQ(SLICE(d0, word24, 8), Mem1578[a0_1571:byte])
	Mem1587[a7_1572:word32] = d1
	Mem1593[a7_1572 + 56:word32] = (uint32) (uint8) SLICE(d0_1397, byte, 0)
	d1 = Mem1593[a7_1572:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036A8:
	Mem1403[a7_150 + 64:word32] = Mem1392[a7_150 + 52:word32]
	word32 d0_1409 = SEQ(SLICE(d0_1397, word24, 8), Mem1403[a7_150 + 55:byte])
	word32 d3_1404 = d3_151 + 0x00000001
	d0 = d0_1409 & 0x000000FF
	branch __btst(Mem1403[0x00002B15 + (int32) ((int16) (d0_1409 & 0x000000FF)):byte], 0x0000) l000036CE
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036CA:
	d0 = SEQ(SLICE(d0_1409 & 0x000000FF, word24, 8), SLICE(d0_1409 & 0x000000FF, byte, 0) | 0x20)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036CE:
	branch d0 != 0x00000078 l00003766
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036D8:
	branch d6_185 - d3_1404 <u 0x00000000 l00003766
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003766:
	d7 = 111
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036DE:
	word32 d0_1473
	word32 a0_1463 = a2_1037 + 24
	Mem1465[a0_1463:word32] = Mem1403[a0_1463:word32] | 0x00000001
	word32 a0_1466 = a2_1037 + 20
	word32 v267_1467 = Mem1465[a0_1466:word32] - 0x00000001
	Mem1468[a0_1466:word32] = v267_1467
	VN = cond(v267_1467) (alias)
	branch v267_1467 < 0x00000000 l00003710
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003710:
	word32 a7_1552 = a7_150 - 4
	Mem1554[a7_1552:word32] = a2_1037
	word32 a5_1558
	d0_1473 = fn00003F30(dwArg00, out d1, out a1, out a5_1558)
	Mem1561[a7_1552 + 56:word32] = d0_1473
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000036F0:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_1525 = Mem1468[a1:word32]
	word32 a7_1526 = a7_150 - 4
	Mem1528[a7_1526:word32] = a2_1037
	Mem1532[a1:word32] = a0_1525 + 1
	a2_1037 = Mem1532[a7_1526:word32]
	d0_1473 = SEQ(SLICE(d0, word24, 8), Mem1532[a0_1525:byte])
	Mem1541[a7_1526:word32] = d1
	Mem1547[a7_1526 + 56:word32] = (uint32) (uint8) SLICE(d0_1473, byte, 0)
	d1 = Mem1547[a7_1526:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000371E:
	Mem1479[a7_150 + 74:word32] = Mem1468[a7_150 + 52:word32]
	word32 d0_1492 = (uint32) (uint8) Mem1479[0x00002B15 + (SEQ(SLICE(d0_1473, word24, 8), SLICE(d5_1257, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1492 & 0x00000044
	branch (d0_1492 & 0x00000044) == 0x00000000 l0000374A
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003744:
	branch d6_185 - (d3_1404 + 0x00000001) <u 0x00000000 l0000374A
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003748:
	d7 = 120
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000374A:
	branch Mem1479[a7_150 + 74:word32] == 0xFFFFFFFF l00003760
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003754:
	word32 a7_1509 = a7_150 - 4
	Mem1511[a7_1509:word32] = a2_1037
	Mem1515[a7_1509 - 4:word32] = Mem1511[a7_1509 + 78:word32]
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003760:
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003768:
	branch Mem1403[a7_150 + 64:word32] == 0xFFFFFFFF l0000377E
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003772:
	word32 a7_1447 = a7_150 - 4
	Mem1449[a7_1447:word32] = a2_1037
	Mem1453[a7_1447 - 4:word32] = Mem1449[a7_1447 + 68:word32]
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000377E:
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037C2:
	word32 d3_1183 = d3_151
	word32 d4_1068 = d4_141
	branch SLICE(d7, byte, 0) != 0x78 l000038F6
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037CA:
	branch d5_1257 != 0x00000030 l000038F6
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037D4:
	branch d6_185 - d3_151 <u 0x00000000 l000038F6
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037DA:
	word32 d0_1137
	word32 a0_1127 = a2_1037 + 24
	Mem1129[a0_1127:word32] = Mem308[a0_1127:word32] | 0x00000001
	word32 a0_1130 = a2_1037 + 20
	word32 v347_1131 = Mem1129[a0_1130:word32] - 0x00000001
	Mem1132[a0_1130:word32] = v347_1131
	VN = cond(v347_1131) (alias)
	branch v347_1131 < 0x00000000 l0000380C
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000380C:
	word32 a7_1333 = a7_150 - 4
	Mem1335[a7_1333:word32] = a2_1037
	word32 a5_1339
	d0_1137 = fn00003F30(dwArg00, out d1, out a1, out a5_1339)
	Mem1342[a7_1333 + 56:word32] = d0_1137
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000037EC:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_1306 = Mem1132[a1:word32]
	word32 a7_1307 = a7_150 - 4
	Mem1309[a7_1307:word32] = a2_1037
	Mem1313[a1:word32] = a0_1306 + 1
	a2_1037 = Mem1313[a7_1307:word32]
	d0_1137 = SEQ(SLICE(d0, word24, 8), Mem1313[a0_1306:byte])
	Mem1322[a7_1307:word32] = d1
	Mem1328[a7_1307 + 56:word32] = (uint32) (uint8) SLICE(d0_1137, byte, 0)
	d1 = Mem1328[a7_1307:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000381A:
	Mem1143[a7_150 + 64:word32] = Mem1132[a7_150 + 52:word32]
	word32 d0_1149 = SEQ(SLICE(d0_1137, word24, 8), Mem1143[a7_150 + 55:byte])
	word32 d3_1144 = d3_151 + 0x00000001
	word32 d4_1145 = d4_141 + 0x00000001
	d0 = d0_1149 & 0x000000FF
	branch __btst(Mem1143[0x00002B15 + (int32) ((int16) (d0_1149 & 0x000000FF)):byte], 0x0000) l00003840
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000383C:
	d0 = SEQ(SLICE(d0_1149 & 0x000000FF, word24, 8), SLICE(d0_1149 & 0x000000FF, byte, 0) | 0x20)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003840:
	branch d0 != 0x00000078 l000038DC
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000384A:
	branch d6_185 - d3_1144 <u 0x00000000 l000038DC
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003850:
	word32 d0_1209
	word32 a0_1199 = a2_1037 + 24
	Mem1201[a0_1199:word32] = Mem1143[a0_1199:word32] | 0x00000001
	word32 a0_1202 = a2_1037 + 20
	word32 v368_1203 = Mem1201[a0_1202:word32] - 0x00000001
	Mem1204[a0_1202:word32] = v368_1203
	VN = cond(v368_1203) (alias)
	branch v368_1203 < 0x00000000 l00003882
// DataOut: a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:00002B14 d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003882:
	word32 a7_1287 = a7_150 - 4
	Mem1289[a7_1287:word32] = a2_1037
	word32 a5_1293
	d0_1209 = fn00003F30(dwArg00, out d1, out a1, out a5_1293)
	Mem1296[a7_1287 + 56:word32] = d0_1209
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003862:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_1260 = Mem1204[a1:word32]
	word32 a7_1261 = a7_150 - 4
	Mem1263[a7_1261:word32] = a2_1037
	Mem1267[a1:word32] = a0_1260 + 1
	a2_1037 = Mem1267[a7_1261:word32]
	d0_1209 = SEQ(SLICE(d0, word24, 8), Mem1267[a0_1260:byte])
	Mem1276[a7_1261:word32] = d1
	Mem1282[a7_1261 + 56:word32] = (uint32) (uint8) SLICE(d0_1209, byte, 0)
	d1 = Mem1282[a7_1261:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003890:
	Mem1215[a7_150 + 74:word32] = Mem1204[a7_150 + 52:word32]
	word32 d0_1228 = (uint32) (uint8) Mem1215[0x00002B15 + (SEQ(SLICE(d0_1209, word24, 8), Mem1215[a7_150 + 55:byte]) & 0x000000FF):byte]
	d3_1183 = d3_1144 + 0x00000001
	d4_1068 = d4_1145 + 0x00000001
	d0 = d0_1228 & 0x00000044
	branch (d0_1228 & 0x00000044) == 0x00000000 l000038C2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038B8:
	branch d6_185 - (d3_1144 + 0x00000001) <u 0x00000000 l000038C2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038C2:
	branch Mem1215[a7_150 + 74:word32] == 0xFFFFFFFF l000038D8
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038CC:
	word32 a7_1244 = a7_150 - 4
	Mem1246[a7_1244:word32] = a2_1037
	Mem1250[a7_1244 - 4:word32] = Mem1246[a7_1244 + 78:word32]
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038D8:
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038DC:
	branch Mem1143[a7_150 + 64:word32] == 0xFFFFFFFF l000038F2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038E6:
	word32 a7_1186 = a7_150 - 4
	Mem1188[a7_1186:word32] = a2_1037
	Mem1192[a7_1186 - 4:word32] = Mem1188[a7_1186 + 68:word32]
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038F2:
	d3_1183 = d3_1144 - 0x00000001
	d4_1068 = d4_1145 - 0x00000001
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038BC:
	d5_1257 = Mem1215[a7_150 + 74:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038F6:
	branch SLICE(d7, byte, 0) == 0x78 l00003902
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000038FC:
	branch SLICE(d7, byte, 0) != 0x58 l0000390C
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000390C:
	branch SLICE(d7, byte, 0) != 0x6F l0000391C
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000391C:
	Mem1119[a7_150 + 52:word32] = 0x0000000A
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003912:
	Mem1116[a7_150 + 52:word32] = 0x00000008
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003924:
	Mem1113[a7_150 + 64:word32] = Mem308[a7_150 + 52:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003902:
	Mem1104[a7_150 + 64:word32] = 0x00000010
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000392A:
	Mem375[a7_150 + 114:word32] = Mem308[a7_150 + 64:word32]
	word32 d0_385 = (uint32) (uint8) Mem375[0x00002B15 + (SEQ(SLICE(d0, word24, 8), SLICE(d5_1257, byte, 0)) & 0x000000FF):byte]
	Mem388[a7_150 + 132:word32] = d2_140
	Mem390[a7_150 + 52:word32] = d4_1068
	Mem392[a7_150 + 74:byte] = SLICE(d7, byte, 0)
	d0 = d0_385 & 0x00000044
	branch (d0_385 & 0x00000044) == 0x00000000 l00003B92
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000395C:
	branch Mem392[a7_150 + 114:word32] != 0x0000000A l00003992
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003966:
	word32 d0_1090 = (uint32) (uint8) Mem392[0x00002B15 + (SEQ(SLICE(d0_385 & 0x00000044, word24, 8), SLICE(d5_1257, byte, 0)) & 0x000000FF):byte]
	Mem1093[a7_150 + 132:word32] = d2_140
	Mem1095[a7_150 + 52:word32] = d4_1068
	Mem1097[a7_150 + 74:byte] = SLICE(d7, byte, 0)
	d0 = d0_1090 & 0x00000004
	branch (d0_1090 & 0x00000004) == 0x00000000 l00003B92
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003992:
	branch Mem392[a7_150 + 114:word32] != 0x00000008 l000039B2
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l0000399C:
	Mem1073[a7_150 + 132:word32] = d2_140
	Mem1075[a7_150 + 52:word32] = d4_1068
	Mem1077[a7_150 + 74:byte] = SLICE(d7, byte, 0)
	branch d5_1257 > 0x00000037 l00003B92
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039B2:
	Mem732[a7_150 + 132:word32] = d2_140
	Mem734[a7_150 + 52:word32] = d4_1068
	Mem736[a7_150 + 64:word32] = d6_185
	Mem738[a7_150 + 74:byte] = SLICE(d7, byte, 0)
	branch d6_185 - d3_1183 <u 0x00000000 l00003B92
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039C8:
	d7 = Mem738[a7_150 + 114:word32]
	word32 a4_744 = Mem738[a7_150 + 64:word32]
// DataOut: a1 a2 a3 a4 a7 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l000039D0:
	word32 a7_759 = a7_150 - 4
	Mem761[a7_759:word32] = d2_140
	word32 v419_765 = Mem761[a7_759:word32]
	Mem770[a7_759:word32] = d7 >> 31
	Mem773[a7_759 - 4:word32] = d7
	Mem776[a7_759 - 8:word32] = a1
	Mem780[a7_759 - 12:word32] = Mem776[a7_759 + 52:word32]
	Mem784[a7_759 - 16:word32] = Mem780[a7_759 + 48:word32]
	Mem787[a7_759 - 20:word32] = d7
	Mem789[a7_759 - 24:word32] = d7 >> 31
	word32 d1_791
	Mem798[a7_759 + 68:word32] = fn00003EB0(d4_1068, dwArg00, dwArg04, dwArg08, dwArg0C, out d1_791)
	Mem800[a7_759 + 72:word32] = d1_791
	branch ((uint32) (uint8) Mem800[0x00002B15 + (SEQ(Mem800[a7_759 + 0x00000001:word24], SLICE(d5_1257, byte, 0)) & 0x000000FF):byte] & 0x00000004) == 0x00000000 l00003A30
// DataOut: a2 a3 a4 a7 d2 d3 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A30:
	d4_1068 = 0
// DataOut: a2 a3 a4 a7 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A26:
	d4_1068 = d5_1257 - 0x00000030
// DataOut: a2 a3 a4 a7 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A32:
	word32 d6_1063
	Mem826[a7_150 - 4:word32] = v419_765
	Mem834[a7_150 - 4:word32] = Mem826[a7_150 - 4:word32]
	word32 d2_836 = d4_1068 + Mem834[a7_150 + 68:word32]
	Mem840[a7_150 + 48:word32] = d2_836
	Mem844[a7_150 - 8:word32] = d3_1183
	word32 d0_828 = d4_1068 >> 31
	Mem849[a7_150 + 44:word32] = Mem844[a7_150 + 64:word32] + d0_828 + (d2_836 <u 0x00000000)
	word32 v441_850 = Mem849[a7_150 - 8:word32]
	word32 v442_853 = Mem849[a7_150 - 4:word32]
	branch ((uint32) (uint8) Mem849[0x00002B15 + (SEQ(SLICE(d0_828, word24, 8), SLICE(d5_1257, byte, 0)) & 0x000000FF):byte] & 0x00000001) == 0x00000000 l00003A82
// DataOut: a2 a3 a4 a7 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A82:
	d6_1063 = 0
// DataOut: a2 a3 a4 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A78:
	d6_1063 = d5_1257 - 0x00000037
// DataOut: a2 a3 a4 a7 d2 d3 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003A84:
	word32 d2_1058
	Mem877[a7_150 - 4:word32] = v442_853
	Mem885[a7_150 - 4:word32] = Mem877[a7_150 - 4:word32]
	word32 d2_887 = d6_1063 + Mem885[a7_150 + 48:word32]
	Mem891[a7_150 + 68:word32] = d2_887
	Mem895[a7_150 - 8:word32] = v441_850
	word32 d0_879 = d6_1063 >> 31
	Mem900[a7_150 + 64:word32] = Mem895[a7_150 + 44:word32] + d0_879 + (d2_887 <u 0x00000000)
	word32 v453_901 = Mem900[a7_150 - 8:word32]
	branch ((uint32) (uint8) Mem900[0x00002B15 + (SEQ(SLICE(d0_879, word24, 8), SLICE(d5_1257, byte, 0)) & 0x000000FF):byte] & 0x00000002) == 0x00000000 l00003AD4
// DataOut: a2 a3 a4 a7 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003AD4:
	d2_1058 = 0
// DataOut: a2 a3 a4 a7 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003ACA:
	d2_1058 = d5_1257 - 0x00000057
// DataOut: a2 a3 a4 a7 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003AD6:
	word32 d0_1040
	Mem928[a7_150 - 4:word32] = d2_1058
	Mem936[a7_150 - 4:word32] = Mem928[a7_150 - 4:word32]
	word32 d2_938 = d2_1058 + Mem936[a7_150 + 68:word32]
	Mem942[a7_150 + 48:word32] = d2_938
	Mem946[a7_150 - 8:word32] = v453_901
	Mem950[a7_150 + 44:word32] = Mem946[a7_150 + 64:word32] + (d2_1058 >> 31) + (d2_938 <u 0x00000000)
	word32 a0_957 = a2_1037 + 24
	word32 v465_951 = Mem950[a7_150 - 8:word32]
	d2_140 = Mem950[a7_150 - 4:word32]
	Mem960[a0_957:word32] = Mem950[a0_957:word32] | 1
	word32 a0_961 = a2_1037 + 20
	word32 v468_962 = Mem960[a0_961:word32] - 0x00000001
	Mem963[a0_961:word32] = v468_962
	VN = cond(v468_962) (alias)
	branch v468_962 < 0x00000000 l00003B28
// DataOut: a2 a3 a4 a7 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B28:
	Mem1048[a7_150 - 4:word32] = a2_1037
	word32 d1_1050
	word32 a5_1052
	d0_1040 = fn00003F30(dwArg00, out d1_1050, out a1, out a5_1052)
	d1 = d0_1040
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:1 a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B10:
	a1 = a2_1037 + 4
	*a1Out = a1
	word32 a0_1027 = Mem963[a1:word32]
	Mem1030[a7_150 - 4:word32] = a2_1037
	Mem1034[a1:word32] = a0_1027 + 1
	d0_1040 = (uint32) (uint8) Mem1034[a0_1027:byte]
	a2_1037 = Mem1034[a7_150 - 4:word32]
	d1 = (uint32) (uint8) SLICE(d0_1040, byte, 0)
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:1 a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B34:
	Mem976[a7_150 + 52:word32] = Mem963[a7_150 + 52:word32] + 0x00000001
	word32 d0_987 = (uint32) (uint8) Mem976[0x00002B15 + (SEQ(SLICE(d0_1040, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d5_1257 = d1
	d3_1183 = v465_951 + 0x00000001
	d0 = d0_987 & 0x00000044
	branch (d0_987 & 0x00000044) == 0x00000000 l00003B92
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B58:
	branch d7 != 0x0000000A l00003B7C
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B60:
	word32 d0_1020 = (uint32) (uint8) Mem976[0x00002B15 + (SEQ(SLICE(d0_987 & 0x00000044, word24, 8), SLICE(d1, byte, 0)) & 0x000000FF):byte]
	d0 = d0_1020 & 0x00000004
	branch (d0_1020 & 0x00000004) == 0x00000000 l00003B92
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B7C:
	branch d7 != 0x00000008 l00003B8C
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B84:
	branch d1 > 0x00000037 l00003B92
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B8C:
	branch a4_744 - (v465_951 + 0x00000001) >=u 0x00000000 l000039D0
// DataOut: a1 a2 a3 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003B92:
	d7 = SEQ(SLICE(d7, word24, 8), Mem392[a7_150 + 74:byte])
	word32 d4_417 = Mem392[a7_150 + 52:word32]
	d2_140 = Mem392[a7_150 + 132:word32]
	branch Mem392[a7_150 + 110:word32] == 0x00000000 l00003BC6
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BA4:
	branch d3_1183 != 0x00000002 l00003BC6
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BAC:
	branch d5_1257 == 0xFFFFFFFF l00003BBE
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BB4:
	word32 a7_710 = a7_150 - 4
	Mem712[a7_710:word32] = a2_1037
	Mem715[a7_710 - 4:word32] = d5_1257
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BBE:
	d3_1183 = d3_1183 - 0x00000001
	d4_417 = d4_417 - 0x00000001
	d5_1257 = Mem392[a7_150 + 110:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BC6:
	branch d5_1257 == 0xFFFFFFFF l00003BD8
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BCE:
	word32 a7_687 = a7_150 - 4
	Mem689[a7_687:word32] = a2_1037
	Mem692[a7_687 - 4:word32] = d5_1257
	d0 = fn00002E5C(bArg03, dwArg04)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BD8:
	d3_166 = d3_1183 - 0x00000001
	d4_141 = d4_417 - 0x00000001
	branch Mem392[a7_150 + 73:byte] != 0x00 l00003D86
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BE4:
	branch d3_166 == 0x00000000 l00003D86
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BEA:
	branch SLICE(d7, byte, 0) != 0x75 l00003CAC
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CAC:
	branch Mem392[a7_150 + 110:word32] != 0x0000002D l00003CC8
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CC8:
	Mem683[a7_150 + 56:word32] = Mem392[a7_150 + 48:word32]
	Mem685[a7_150 + 52:word32] = Mem683[a7_150 + 44:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CB6:
	word32 v528_667 = a7_150 + 44
	d1 = -Mem392[v528_667 + 4:word32]
	d0 = -Mem392[v528_667:word32] - (d1 <u 0x00000000)
	a7_150 = Mem392[a7_150 + 0x00000038:word32]
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CD4:
	word32 a7_570 = a7_150 - 4
	Mem572[a7_570:word32] = d0
	word32 d0_575 = SEQ(SLICE(d0, word24, 8), Mem572[a7_570 + 76:byte])
	Mem581[a7_570 + 48:byte] = SLICE(SEQ(SLICE(d0_575, word24, 8), SLICE(d0_575, byte, 0) - 0x01), byte, 0)
	a7_150 = a7_570 + 4
	branch Mem581[a7_570 + 48:byte] == 0x00 l00003CFE
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CFE:
	word32 d0_655 = d2_140 + 0x00000003 >>u 0x00000002
	d2_140 = (d0_655 << 0x00000002) + 0x00000004
	word32 a0_661 = Mem581[d2_140 + -4:word32]
	Mem663[a0_661 + 4:word32] = Mem581[a7_570 + 60:word32]
	Mem665[a0_661:word32] = Mem663[a7_570 + 56:word32]
	d0 = d0_655 << 0x00000002
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CE8:
	byte v540_589 = Mem581[a7_570 + 48:byte] - 0x01
	Mem590[a7_570 + 48:byte] = v540_589
	branch v540_589 == 0x00 l00003D50
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003D50:
	d2_140 = (d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem590[a7_570 + 60:word32]
	Mem651[Mem590[d2_140 + -4:word32]:byte] = SLICE(d0, byte, 0)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CEE:
	byte v541_593 = Mem590[a7_570 + 48:byte] - 0x66
	Mem594[a7_570 + 48:byte] = v541_593
	branch v541_593 == 0x00 l00003D36
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003D36:
	d2_140 = (d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem594[a7_570 + 60:word32]
	Mem638[Mem594[d2_140 + -4:word32]:word16] = SLICE(d0, word16, 0)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CF6:
	byte v542_597 = Mem594[a7_570 + 48:byte] - 0x04
	Mem598[a7_570 + 48:byte] = v542_597
	branch v542_597 == 0x00 l00003D1C
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003D1C:
	d2_140 = (d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem598[a7_570 + 60:word32]
	Mem625[Mem598[d2_140 + -4:word32]:word32] = d0
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003CFC:
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003D6A:
	d2_140 = (d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem598[a7_570 + 60:word32]
	Mem612[Mem598[d2_140 + -4:word32]:word32] = d0
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003BF2:
	word32 a7_464 = a7_150 - 4
	Mem466[a7_464:word32] = d0
	word32 d0_469 = SEQ(SLICE(d0, word24, 8), Mem466[a7_464 + 76:byte])
	Mem475[a7_464 + 56:byte] = SLICE(SEQ(SLICE(d0_469, word24, 8), SLICE(d0_469, byte, 0) - 0x01), byte, 0)
	a7_150 = a7_464 + 4
	branch Mem475[a7_464 + 56:byte] == 0x00 l00003C1C
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C1C:
	word32 d0_549 = d2_140 + 0x00000003 >>u 0x00000002
	d2_140 = (d0_549 << 0x00000002) + 0x00000004
	word32 a0_555 = Mem475[d2_140 + -4:word32]
	Mem557[a0_555 + 4:word32] = Mem475[a7_464 + 52:word32]
	Mem559[a0_555:word32] = Mem557[a7_464 + 48:word32]
	d0 = d0_549 << 0x00000002
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C06:
	byte v517_483 = Mem475[a7_464 + 56:byte] - 0x01
	Mem484[a7_464 + 56:byte] = v517_483
	branch v517_483 == 0x00 l00003C74
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C74:
	d2_140 = (d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem484[a7_464 + 52:word32]
	Mem545[Mem484[d2_140 + -4:word32]:byte] = SLICE(d0, byte, 0)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C0C:
	byte v518_487 = Mem484[a7_464 + 56:byte] - 0x66
	Mem488[a7_464 + 56:byte] = v518_487
	branch v518_487 == 0x00 l00003C58
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C58:
	d2_140 = (d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem488[a7_464 + 52:word32]
	Mem532[Mem488[d2_140 + -4:word32]:word16] = SLICE(d0, word16, 0)
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C14:
	byte v519_491 = Mem488[a7_464 + 56:byte] - 0x04
	Mem492[a7_464 + 56:byte] = v519_491
	branch v519_491 == 0x00 l00003C3C
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C3C:
	d2_140 = (d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem492[a7_464 + 52:word32]
	Mem519[Mem492[d2_140 + -4:word32]:word32] = d0
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C1A:
// DataOut: a1 a2 a3 a7 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003C90:
	d2_140 = (d2_140 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem492[a7_464 + 52:word32]
	Mem506[Mem492[d2_140 + -4:word32]:word32] = d0
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003D82:
	Mem462[a7_150 + 60:word32] = Mem392[a7_150 + 60:word32] + 0x00000001
// DataOut: a1 a2 a3 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> a5:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003D86:
	a4_147 = a3_1686
// DataOut: a1 a2 a4 a7 d0 d1 d2 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d6:<invalid> a3:<invalid> d0:<invalid> a0:<invalid> d7:<invalid> d1:<invalid> a1:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E84:
	branch d3_166 == 0x00000000 l00003E8E
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E88:
	branch Mem0[a4_147:byte] != 0x00 l00002EAE
// DataOut: a1 a2 a4 a7 d0 d1 d2 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E8E:
	word32 d0_120
	branch d5_1257 != 0xFFFFFFFF l00003EA0
// DataOut: a1 a7 d5
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E96:
	branch Mem0[a7_150 + 60:word32] != 0x00000000 l00003EA0
// DataOut: a1 a7 d5
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003EA0:
	d0_120 = Mem0[a7_150 + 60:word32]
// DataOut: a1 a7 d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003E9C:
	d0_120 = d5_1257
// DataOut: a1 a7 d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

l00003EA4:
	return d0_120
// DataOut: a1 d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> d2:<invalid> a4:<invalid> a2:<invalid> d4:<invalid> d5:<invalid> d0:<invalid> d3:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d6:<invalid> a3:<invalid> d7:<invalid> a5:<invalid> a6:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>

fn00002E8C_exit:
// DataOut: a1 d0
// DataOut (flags): 
// SymbolicIn: a7:fp d2:d2 a4:a4 a2:a2 d4:d4 d5:d5 d0:<invalid> d3:d3 d6:d6 d7:d7 a3:a3 a5:a5 a6:a6 a0:<invalid> a1:<invalid> d1:<invalid> -148(fp):<invalid> -144(fp):<invalid> -140(fp):<invalid> -136(fp):<invalid> -132(fp):<invalid> -128(fp):<invalid> -124(fp):<invalid> -120(fp):d2 -116(fp):d3 -112(fp):d4 -108(fp):d5 -104(fp):d6 -100(fp):d7 -96(fp):a2 -92(fp):a3 -88(fp):a4 -84(fp):a5 -80(fp):a6 -76(fp):<invalid> -72(fp):<invalid> -68(fp):<invalid> -64(fp):<invalid> -60(fp):<invalid> -56(fp):<invalid> -52(fp):<invalid> -48(fp):<invalid> -47(fp):<invalid> -46(fp):<invalid> -42(fp):<invalid> -10(fp):<invalid> -6(fp):<invalid> 12(fp):<invalid>



word32 fn00003EB0(word32 d4, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d4
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn00003EB0_entry:
// DataOut: a2 a3 a4 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00003EB0:
	word32 d0_24 = __swap(dwArg08)
	word32 d1_26 = __swap(dwArg10)
	word32 d4_30 = SEQ(SLICE(d4, word16, 16), SLICE(dwArg08, word16, 0)) *u SLICE(dwArg10, word16, 0)
	word32 d1_102 = d1_26 *u SLICE(d0_24, word16, 0)
	word32 d2_40 = dwArg08 *u SLICE(d1_26, word16, 0) + __swap(SEQ(SLICE(d4_30, word16, 16), SLICE(d4_30, word16, 0) ^ SLICE(d4_30, word16, 0))) + dwArg10 *u SLICE(d0_24, word16, 0)
	branch d2_40 >=u 0x00000000 l00003EE4
// DataOut: a2 a3 a4 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32)

l00003EDE:
	d1_102 = d1_102 + 0x00010000
// DataOut: a2 a3 a4 d1 d2 d4 d5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d5:<invalid> d6:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> d3:<invalid> d4:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32)

l00003EE4:
	word32 d2_44 = __swap(d2_40)
	word32 d3_60 = __swap(dwArg0C) *u SLICE(dwArg08, word16, 0)
	word32 d3_66 = __swap(SEQ(SLICE(d3_60, word16, 16), SLICE(d3_60 + __swap(dwArg08) *u SLICE(dwArg0C, word16, 0), word16, 0)))
	word32 d3_78 = __swap(dwArg04) *u SLICE(dwArg10, word16, 0)
	word32 d3_84 = __swap(SEQ(SLICE(d3_78, word16, 16), SLICE(d3_78 + __swap(dwArg10) *u SLICE(dwArg04, word16, 0), word16, 0)))
	word32 d1_53
	*d1Out = SEQ(SLICE(d2_44, word16, 16), SLICE(d4_30, word16, 0))
	return (uint32) (uint16) SLICE(d2_44, word16, 0) + d1_102 + (dwArg0C *u SLICE(dwArg08, word16, 0) + SEQ(SLICE(d3_66, word16, 16), SLICE(d3_66, word16, 0) ^ SLICE(d3_66, word16, 0))) + (dwArg04 *u SLICE(dwArg10, word16, 0) + SEQ(SLICE(d3_84, word16, 16), SLICE(d3_84, word16, 0) ^ SLICE(d3_84, word16, 0)))
// DataOut: a2 a3 a4 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 20 d5:<invalid> d6:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> d3:<invalid> d4:<invalid> -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6

fn00003EB0_exit:
// DataOut: d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp d5:d5 d6:d6 d0:<invalid> d1:<invalid> d2:d2 d3:d3 d4:d4 -20(fp):d2 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):d6



word32 fn00003F30(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5
// Stack args: Stack +0004(32)
fn00003F30_entry:
// DataOut: d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00003F30:
	word32 d0_141
	word32 a1_28
	word32 a5_29
	word32 d1_30
	*d1Out = fn00002688(out a1_28, out a5_29)
	branch dwArg04 != 0x00000000 l00003F48
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00003F48:
	branch (Mem0[dwArg04 + 24:word32] & 42) == 32 l00003F5A
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F5A:
	Mem87[dwArg04 + 24:word32] = Mem0[dwArg04 + 24:word32] | 1
	word32 d0_101 = Mem87[dwArg04 + 24:word32] & 0x00000200
	branch d0_101 == 0x00000000 l00003F72
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F6C:
	word32 a1_217
	word32 a5_218
	d0_101 = fn0000402C(out a1_217, out a5_218)
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F72:
	branch Mem87[dwArg04 + 28:word32] != 0x00000000 l00003F90
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F78:
	d0_101 = Mem87[dwArg04 + 24:word32] & 4
	branch d0_101 == 0x00000000 l00003F88
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F88:
	Mem215[dwArg04 + 28:word32] = 0x00000400
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F80:
	Mem212[dwArg04 + 28:word32] = 1
	d0_101 = 1
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F90:
	branch Mem87[dwArg04 + 8:word32] != 0x00000000 l00003FCC
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F96:
	word32 d4_177
	branch (Mem87[dwArg04 + 24:word32] & 0x00000080) == 0x00000000 l00003FAA
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003FAA:
	d4_177 = 1
// DataOut: a1 a2 a5 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003FA6:
	d4_177 = 2
// DataOut: a1 a2 a5 d4 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003FAC:
	word32 d1_185
	word32 a0_186
	word32 a1_187
	word32 d0_188 = fn000022B4(d4_177 + Mem87[dwArg04 + 28:word32], out d1_185, out a0_186, out a1_187)
	d0_101 = d0_188
	branch d0_188 != 0x00000000 l00003FC4
// DataOut: a1 a2 a3 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d4:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003FC4:
	Mem198[dwArg04 + 8:word32] = d0_188 + 1
	word32 a1_196
	*a1Out = d0_188 + 1
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003FCC:
	Mem120[dwArg04 + 4:word32] = Mem87[dwArg04 + 8:word32]
	word32 d1_123
	*d1Out = Mem120[dwArg04:word32]
	execPrivate2()
	Mem127[dwArg04 + 20:word32] = d0_101
	word32 v26_128 = Mem127[dwArg04 + 20:word32] - 0x00000001
	Mem129[dwArg04 + 20:word32] = v26_128
	branch v26_128 >= 0x00000000 l00004012
// DataOut: a1 a2 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d1:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00004012:
	word32 a0_158 = Mem129[dwArg04 + 4:word32]
	Mem162[dwArg04 + 4:word32] = a0_158 + 1
	word32 a1_157
	*a1Out = dwArg04 + 4
	d0_141 = SEQ(SLICE(d0_101, word24, 8), Mem162[a0_158:byte]) & 0x000000FF
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003FF0:
	branch Mem129[dwArg04 + 20:word32] != -1 l00004002
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00004002:
	Mem153[dwArg04 + 24:word32] = Mem129[dwArg04 + 24:word32] | 16
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:-1 d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003FF8:
	Mem146[dwArg04 + 24:word32] = Mem129[dwArg04 + 24:word32] | 8
// DataOut: a1 a2 a5 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:-1 d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000400A:
	Mem140[dwArg04 + 20:word32] = 0x00000000
	d0_141 = -1
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> d3:<invalid> d2:<invalid> d1:<invalid> a6:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003FC0:
	d0_141 = -1
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 a0:<invalid> a1:<invalid> d4:<invalid> a3:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F54:
	d0_141 = -1
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00003F42:
	d0_141 = -1
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00004026:
	return d0_141
// DataOut: a1 a5 d0 d1 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 32 a2:<invalid> d0:<invalid> d5:32 d1:<invalid> a0:<invalid> d3:<invalid> d2:<invalid> a6:<invalid> a1:<invalid> a4:<invalid> d4:<invalid> a3:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6

fn00003F30_exit:
// DataOut: a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:<invalid> d2:d2 d3:d3 d4:d4 d5:d5 a3:a3 a4:a4 a6:a6 d1:<invalid> a0:<invalid> a1:<invalid> a5:<invalid> -36(fp):<invalid> -32(fp):d2 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6



word32 fn0000402C(ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a7
fn0000402C_entry:
	*a1Out = a1
	*a5Out = a5
// DataOut: a1 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000402C:
	word32 a2_40 = Mem0[0x00004260:word32]
	word32 d0_24 = a2_40
	branch a2_40 == 0x00000000 l00004064
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000403A:
	branch (Mem0[a2_40 + 24:word32] & 0x00000202) != 0x00000202 l0000405A
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l0000404C:
	branch Mem0[a2_40:word32] == 0x00000000 l0000405A
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00004050:
	word32 a0_66
	word32 a1_67
	word32 a5_68
	fn00002208(a2_40, out a0_66, out a1_67, out a5_68)
// DataOut: a1 a2 a5 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l0000405A:
	a2_40 = Mem0[a2_40 + 12:word32]
	d0_24 = a2_40
	branch a2_40 != 0x00000000 l0000403A
// DataOut: a1 a2 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2
// LocalsOut: fp(32)

l00004064:
	return d0_24
// DataOut: a1 a5 d0 d6 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 4 a2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2

fn0000402C_exit:
// DataOut: a1 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d0:<invalid> a0:<invalid> d1:<invalid> a4:<invalid> a5:<invalid> a1:<invalid> -8(fp):<invalid> -4(fp):a2



word32 fn00004068(word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a1 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
// Stack args: Stack +0004(32)
fn00004068_entry:
	*d1Out = d1
	*a1Out = a1
// DataOut: a1 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00004068:
	word32 d0_106
	word32 a2_108 = dwArg04
	word32 d2_109 = 0
	branch Mem0[dwArg04:byte] == 0x00 l000040E8
// DataOut: a1 a2 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00004076:
	word32 d1_137
	word32 a0_81 = Mem0[0x00004258:word32]
	Mem85[a0_81 + 24:word32] = Mem0[a0_81 + 24:word32] | 2
	word32 v15_87 = Mem85[a0_81 + 20:word32] - 0x00000001
	Mem88[a0_81 + 20:word32] = v15_87
	word32 d0_119 = 2
	branch v15_87 < 0x00000000 l000040BE
// DataOut: a2 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:-1 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000408C:
	branch Mem88[a2_108:byte] != 0x0A l000040A4
// DataOut: a2 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:2 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00004092:
	d0_119 = Mem88[Mem88[0x00004258:word32] + 24:word32] & 0x00000080
	branch d0_119 != 0x00000000 l000040BE
// DataOut: a2 d0 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:2 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000040BE:
	word32 a0_133
	word32 a1_134
	word32 a5_135
	*d1Out = fn000020F4((int32) (int16) (int8) SEQ(SLICE(d0_119, word24, 8), Mem88[a2_108:byte]), Mem88[0x00004258:word32], out a0_133, out a1_134, out a5_135)
// DataOut: a1 a2 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:<invalid> d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000040A4:
	word32 a1_148 = Mem88[0x00004258:word32]
	word32 a0_150 = Mem88[a1_148 + 4:word32]
	Mem154[a1_148 + 4:word32] = a0_150 + 1
	Mem156[a0_150:byte] = Mem154[a2_108:byte]
	word32 a1_149
	*a1Out = a1_148 + 4
	*d1Out = (uint32) (uint8) SLICE(SEQ(SLICE(d0_119, word24, 8), Mem156[a0_150:byte]), byte, 0)
// DataOut: a1 a2 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:<invalid> d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000040D6:
	branch d1_137 != -1 l000040E0
// DataOut: a1 a2 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:<invalid> d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000040E0:
	a2_108 = a2_108 + 1
	d2_109 = d2_109 + 0x00000001
	branch Mem88[a2_108:byte] != 0x00 l00004076
// DataOut: a1 a2 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:-1 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000040E8:
	d0_106 = d2_109
// DataOut: a1 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:-1 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000040DC:
	d0_106 = -1
// DataOut: a1 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> a0:<invalid> a1:<invalid> d0:-1 d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000040EA:
	return d0_106
// DataOut: a1 d0 d1 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 12 a2:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> a3:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3

fn00004068_exit:
// DataOut: a1 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp a2:a2 d2:d2 d0:<invalid> a3:a3 a0:<invalid> a1:<invalid> d1:<invalid> a5:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):d2 -8(fp):a2 -4(fp):a3



