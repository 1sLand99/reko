void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn00000000004028C0(word64 rsi, word64 rdi, word64 r9, word64 r11, word64 r15, selector fs, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004028C0_entry:
// DataOut: edi fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004028C0:
	word64 rsp_156 = fn000000000040D6A0(Mem0[rsi:word64])
	setlocale(0x0000000000000006, 0x0000000000416919)
	bindtextdomain(0x0000000000413800, 0x000000000041381C)
	textdomain(0x0000000000413800)
	Mem46[0x000000000061A580:word32] = 0x00000002
	word64 rax_47 = fn0000000000411EE0(0x000000000040A200)
	Mem49[0x000000000061B030:word32] = 0x00000000
	Mem50[0x000000000061B0D0:byte] = 0x01
	Mem51[0x000000000061B180:word64] = rax_47
	word32 eax_55 = (word32) (uint64) Mem51[0x000000000061A56C:word32]
	Mem58[0x000000000061B190:word64] = 0x0000000000000000
	Mem59[0x000000000061B188:word64] = 0xFFFFFFFFFFFFFFFF
	Mem60[0x000000000061B0F0:byte] = 0x00
	word64 rbp_150 = rsi
	byte bpl_1090 = (byte) rsi
	word32 ebx_147 = (word32) (uint64) edi
	branch eax_55 == 0x00000002 l0000000000403203
// DataOut: eax ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040297B:
	branch eax_55 == 0x00000003 l00000000004029AF
// DataOut: eax ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004029AF:
	Mem3410[0x000000000061B150:word32] = 0x00000000
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402980:
	branch (word32) (uint64) (eax_55 - 0x00000001) == 0x00000000 l000000000040298A
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040298A:
	branch isatty(0x0000000000000001) == 0x00000000 l00000000004037EC
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037EC:
	Mem3403[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 eax:<invalid> rdx:<invalid> rcx:<invalid> sil:0x1C cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040299C:
	Mem3401[0x000000000061B150:word32] = 0x00000002
	Mem3402[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 eax:<invalid> rdx:<invalid> rcx:<invalid> sil:0x1C cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004029C5:
	Mem208[0x000000000061B14C:word32] = 0x00000000
	Mem209[0x000000000061B148:word32] = 0x00000000
	Mem210[0x000000000061B147:byte] = 0x00
	Mem211[0x000000000061B145:byte] = 0x00
	Mem212[0x000000000061B144:byte] = 0x00
	Mem213[0x000000000061B12C:word32] = 0x00000000
	Mem214[0x000000000061B114:byte] = 0x00
	Mem215[0x000000000061B110:word32] = 0x00000001
	Mem216[0x000000000061B10E:byte] = 0x00
	Mem217[0x000000000061B10D:byte] = 0x00
	Mem218[0x000000000061B108:word32] = 0x00000000
	Mem219[0x000000000061B100:word64] = 0x0000000000000000
	Mem220[0x000000000061B0F8:word64] = 0x0000000000000000
	Mem221[0x000000000061B17D:byte] = 0x00
	word64 rax_222 = getenv(0x000000000041382E)
	branch rax_222 == 0x0000000000000000 l0000000000402A7F
// DataOut: ebx fs r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x0000000000000000 eax:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402A50:
	word64 r12_3350
	word64 r13_3351
	word64 r14_3352
	word64 rax_3354 = fn0000000000409E50(0x0000000000000004, 0x0000000000416460, 0x0000000000416480, rax_222, out rsp_156, out rbp_150, out r12_3350, out r13_3351, out r14_3352, out r15)
	byte al_3358 = (byte) rax_3354
	branch (word32) rax_3354 < 0x00000000 l0000000000403786
// DataOut: al ebx fs r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000041382E rax:<invalid> rsi:<invalid> r8:0x0000000000000000 r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403786:
	ebx_147 = fn000000000040E930(r12_3350, r11, fs, out rbp_150, out r9, out r11, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B00, 0x0000000000000005), Mem221[rsp_156 + -8:<unknown>])
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x0000000000000000 r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402A6F:
	fn000000000040E640((word32) (uint64) Mem221[DPB(rax_3354, (int16) al_3358, 0) * 0x0000000000000004 + 0x00416460:word32], 0x0000000000000000)
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x0000000000000000 r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402A7F:
	Mem251[0x000000000061B0C8:word64] = 0x0000000000000050
	word64 rax_252 = getenv(0x000000000041383C)
	Mem259[rsp_156 + 0x0000000000000020:word64] = rsp_156 + 0x0000000000000040
	word32 r12d_254 = (word32) rax_252
	branch rax_252 == 0x0000000000000000 l0000000000402AB1
// DataOut: ebx fs r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:(int16) al eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402AA6:
	branch Mem259[rax_252:byte] != 0x00 l00000000004037B8
// DataOut: ebx fs r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037B8:
	word64 r12_3304
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, rax_252, 0x0000000000000000, out ebx_147, out rsp_156, out rbp_150, out r9, out r12_3304, out r15) != 0x00000000 l0000000000403A93
// DataOut: ebx fs r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037D2:
	word64 rax_3335 = Mem259[rsp_156 + 0x0000000000000040:word64]
	branch rax_3335 == 0x0000000000000000 l0000000000403A93
// DataOut: ebx fs r11 r12 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A93:
	ebx_147 = fn000000000040E930(r12_3304, r11, fs, out rbp_150, out r9, out r11, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B48, 0x0000000000000005), Mem259[rsp_156 + -8:<unknown>])
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037E0:
	Mem3343[0x000000000061B0C8:word64] = rax_3335
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402AB1:
	branch ioctl(0x0000000000000001, 0x0000000000005413, Mem259[rsp_156 + -8:<unknown>]) == 0xFFFFFFFF l0000000000402ADD
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402ACC:
	word32 eax_3281 = (word32) Mem259[rsp_156 + 0x0000000000000042:word16]
	word64 rax_3282 = (uint64) eax_3281
	branch (word16) eax_3281 == 0x0000 l0000000000402ADD
// DataOut: ebx fs r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402AD6:
	Mem3289[0x000000000061B0C8:word64] = rax_3282
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402ADD:
	word64 rax_284 = getenv(0x0000000000413844)
	Mem293[0x000000000061B0D8:word64] = 0x0000000000000008
	branch rax_284 == 0x0000000000000000 l0000000000402B22
// DataOut: ebx fs r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402AFA:
	word64 r12_3254
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, rax_284, 0x0000000000000000, out ebx_147, out rsp_156, out rbp_150, out r9, out r12_3254, out r15) != 0x00000000 l00000000004041BB
// DataOut: ebx fs r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413844 rax:<invalid> rsi:0x0000000000005413 r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00413844 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004041BB:
	ebx_147 = fn000000000040E930(r12_3254, r11, fs, out rbp_150, out r9, out r11, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B88, 0x0000000000000005), Mem293[rsp_156 + -8:<unknown>])
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402B16:
	Mem3261[0x000000000061B0D8:word64] = Mem293[rsp_156 + 0x0000000000000040:word64]
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402B22:
	Mem318[rsp_156 + 0x0000000000000038:word32] = 0xFFFFFFFF
	word64 r8_1020 = rsp_156 + 0x0000000000000038
	word64 r14_1038 = 0x0000000000000000
	word64 r13_308 = 0x0000000000000000
	word32 eax_319 = getopt_long((uint64) ebx_147, rbp_150, 0x0000000000415BC8, 0x0000000000413080, r8_1020)
	branch eax_319 == 0xFFFFFFFF l000000000040321E
// DataOut: eax ebx fs r11 r13 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040321E:
	branch Mem318[0x000000000061B138:word64] == 0x0000000000000000 l000000000040398A
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:<invalid> ecx:0x00413080 sil:<invalid> cl:0x80 al:<invalid> r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040398A:
	r8_1020 = fn000000000040C810(0x000000000061B138, getenv(0x00000000004138E1), r8_1020, out r9, out r13_308, out r14_1038, out r15)
	branch r15 == 0x0000000000000000 l0000000000404531
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:<invalid> ecx:0x00413080 sil:<invalid> cl:0x80 al:<invalid> r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404531:
	branch getenv(0x00000000004138E4) != 0x0000000000000000 l00000000004039B2
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404544:
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:0x004138E4 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004039B2:
	Mem3234[0x000000000061B134:word32] = (word32) (uint64) Mem318[0x000000000061B140:word32]
	Mem3236[0x000000000061A560:word64] = Mem3234[0x000000000061B138:word64]
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004039CC:
	branch 0x00 == 0x00 l000000000040322C
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004039D5:
	Mem3226[0x000000000061B140:word32] = 0x00000000
	Mem3227[0x000000000061B138:word64] = 0x0000000000000400
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040322C:
	word64 rdx_424 = Mem318[0x000000000061B0C8:word64]
	word64 rax_3198 = 0x0000000000000001
	branch rdx_424 >u 0x0000000000000002 l00000000004037FB
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037FB:
	rax_3198 = (uint64) ((uint128) (uint64) rdx_424 /u 0x0000000000000003)
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> rcx:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:0x01 r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403242:
	Mem442[0x000000000061B020:word64] = rax_3198
	word32 ebx_443
	word64 rsp_444
	word64 rbp_445
	word64 r12_446
	word64 rax_447 = fn000000000040E600(0x0000000000000000, r8_1020, r11, out ebx_443, out rsp_444, out rbp_445, out r12_446)
	Mem449[0x000000000061B0E8:word64] = rax_447
	branch fn000000000040E630(rax_447) == 0x00000005 l000000000040426C
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040426C:
	fn000000000040E650(0x00000001, 0x00000020, Mem449[0x000000000061B0E8:word64])
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403268:
	word64 rax_458 = (uint64) Mem449[0x000000000061B12C:word32]
	branch (word32) rax_458 <=u 0x00000001 l00000000004032A9
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403273:
	r14_1038 = r8_1020 + 0x00000000004138ED
	byte al_3161 = (byte) (word32) Mem449[rax_458 + 0x00000000004138ED:byte]
	branch al_3161 == 0x00 l00000000004032A9
// DataOut: al fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403289:
	r14_1038 = r14_1038 + 0x0000000000000001
	al_3161 = (byte) (word32) Mem449[fn000000000040E650(0x00000001, (int32) al_3161, Mem449[0x000000000061B0E8:word64]):byte] (alias)
	branch al_3161 != 0x00 l0000000000403289
// DataOut: al fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> esi:<invalid> sil:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032A9:
	word64 rsp_1009
	word64 rbp_1004
	word32 ebx_1001
	word64 r12_1005
	word64 rax_479 = fn000000000040E600(0x0000000000000000, r8_1020, r11, out ebx_1001, out rsp_1009, out rbp_1004, out r12_1005)
	Mem485[0x000000000061B0E0:word64] = rax_479
	word64 rsi_1041 = fn000000000040E650(0x00000001, 0x0000003A, rax_479)
	branch Mem485[0x000000000061B130:byte] == 0x00 l00000000004032E2
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032D2:
	branch Mem485[0x000000000061B150:word32] == 0x00000000 l00000000004032E2
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032DB:
	Mem3152[0x000000000061B130:byte] = 0x00
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032E2:
	word64 r13_2993
	branch (word32) (uint64) ((word32) (uint64) Mem485[0x000000000061B14C:word32] - 0x00000001) <=u 0x00000001 l0000000000403965
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403965:
	branch false l00000000004032F4
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040396E:
	branch Mem485[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040397B:
	Mem3149[0x000000000061B148:word32] = 0x00000004
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032F4:
	branch Mem485[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040380D:
	byte Z_2910 = cond(r12_1005)
	branch r12_1005 == 0x0000000000000000 l00000000004045C6
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045C6:
	word64 rax_3125 = getenv(0x00000000004138F5)
	r12_1005 = rax_3125
	r12d_254 = (word32) rax_3125 (alias)
	Z_2910 = cond(rax_3125) (alias)
	branch rax_3125 != 0x0000000000000000 l00000000004045DF
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045DB_1:
	r12_1005 = 0x0000000000413827
	r12d_254 = 0x00413827 (alias)
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:0x27 r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045DF:
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:0x27 r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403816:
	rbp_1004 = 0x0000000000000006
	bpl_1090 = 0x06 (alias)
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040383E:
	word64 rsi_2941 = r12_1005
	word64 rdi_2944 = r14_1038
	word64 rcx_2946 = r13_308
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403847:
	branch rcx_2946 == 0x0000000000000000 l0000000000403849
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403847_1:
	Z_2910 = cond(Mem485[rsi_3411:byte] - Mem485[rdi_3412:byte]) (alias)
	rsi_2941 = rsi_3411 + 0x0000000000000001
	rdi_2944 = rdi_3412 + 0x0000000000000001
	rcx_2946 = rcx_2946 - 0x0000000000000001
	word64 rsi_3411 = rsi_2941
	word64 rdi_3412 = rdi_2944
	branch Mem485[rsi_3411:byte] != Mem485[rdi_3412:byte] l0000000000403847
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403849:
	branch Z_2910 l0000000000403828
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403828:
	branch fn000000000040AB70(0x0000000000000002, out rsi_1041) == 0x00 l0000000000403301
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040383A:
	r12_1005 = r12_1005 + 0x0000000000000006
	r12d_254 = (word32) r12_1005 (alias)
	Z_2910 = cond(r12_1005) (alias)
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x00000002 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040384B:
	branch Mem485[r12_1005:byte] == 0x2B l00000000004043D9
// DataOut: ebx fs r11 r12 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403856:
	word64 r12_2992
	word64 rax_2996 = fn0000000000409E50(0x0000000000000004, 0x00000000004136F0, 0x0000000000413700, r12_1005, out rsp_1009, out rbp_1004, out r12_2992, out r13_2993, out r14_1038, out r15)
	branch rax_2996 < 0x0000000000000000 l0000000000404564
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404564:
	fn0000000000409F80(rax_2996, 0x000000000041391D, r11, fs, out rsp_156, out rbp_150, out r9, out r11, out r15)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413928, 0x0000000000000005), Mem485[0x000000000061A650:word64])
	word64 rbx_3060 = 0x0000000000413700
// DataOut: fs r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040459C:
	branch Mem485[rbx_3060:word64] == 0x0000000000000000 l00000000004031D6
// DataOut: fs r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:0x06 edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004031D6:
	word64 rbx_3083 = Mem485[0x000000000061A650:word64]
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415BF8, 0x0000000000000005), rbx_3083)
	ebx_147 = (word32) rbx_3083 (alias)
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:0x06 edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045A8:
	__fprintf_chk(Mem485[0x000000000061A650:word64], 0x0000000000000001, 0x000000000041393E)
	rbx_3060 = rbx_3060 + 0x0000000000000008
// DataOut: fs r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:0x06 edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403876:
	branch rax_2996 == 0x0000000000000001 l0000000000404549
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404549:
	Mem3040[0x000000000061A3D8:word64] = 0x0000000000413966
	Mem3041[0x000000000061A3D0:word64] = 0x0000000000413966
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403880:
	branch rax_2996 <= 0x0000000000000001 l0000000000404465
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404465:
	branch rax_2996 != 0x0000000000000000 l00000000004038A8
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040446E:
	Mem3038[0x000000000061A3D8:word64] = 0x000000000041394E
	Mem3039[0x000000000061A3D0:word64] = 0x000000000041394E
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403886:
	branch rax_2996 == 0x0000000000000002 l00000000004045F3
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045F3:
	Mem3033[0x000000000061A3D0:word64] = 0x0000000000413975
	Mem3034[0x000000000061A3D8:word64] = 0x0000000000413969
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403890:
	branch rax_2996 != 0x0000000000000003 l00000000004038A8
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403896:
	word64 rsi_3016
	branch fn000000000040AB70(0x0000000000000002, out rsi_3016) != 0x00 l000000000040460E
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040460E:
	word64 rax_3024 = dcgettext(0x0000000000000000, Mem485[0x000000000061A3D0:word64], 0x0000000000000002)
	word64 rsi_3025 = Mem485[0x000000000061A3D8:word64]
	Mem3030[0x000000000061A3D0:word64] = rax_3024
	Mem3032[0x000000000061A3D8:word64] = dcgettext(0x0000000000000000, rsi_3025, 0x0000000000000002)
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:0x00000002 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403301:
	word64 r12_946 = (uint64) Mem485[0x000000000061A620:word32]
	word32 r12d_2470 = (word32) r12_946
	branch Mem485[0x000000000061B129:byte] != 0x00 l0000000000403AC5
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403AC5:
	word64 rax_2655 = getenv(0x000000000041397F)
	Mem2663[rsp_1009 + 0x0000000000000038:word64] = rax_2655
	branch rax_2655 == 0x0000000000000000 l0000000000403AE2
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403AD9:
	branch Mem2663[rax_2655:byte] != 0x00 l00000000004044FA
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044FA:
	Mem2842[rsp_1009 + 0x0000000000000030:word16] = 0x3F3F
	Mem2843[rsp_1009 + 0x0000000000000032:byte] = 0x00
	word64 rsp_2848
	word64 rbp_2849
	word64 rsi_2850
	word64 rdi_2851
	word64 rax_2852 = fn0000000000410E30(rax_2655, out rsp_2848, out rbp_2849, out rsi_2850, out rdi_2851)
	Mem2856[0x000000000061B118:word64] = rax_2852
	Mem2857[rsp_2848 + 0x0000000000000040:word64] = rax_2852
	branch false l0000000000402985
// DataOut: edx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000404528:
	word64 rsp_2861
	word64 rdi_2862
	word64 rsi_2863
	word64 rbp_2864
	word64 rbx_2865
	word32 ebx_2866
	word32 edi_2867
	byte SCZO_2868
	word64 rax_2869
	selector fs_2870
	word32 eax_2871
	byte SZO_2872
	byte C_2873
	word32 esi_2874
	word64 r8_2875
	byte Z_2876
	word64 r12_2877
	word32 ecx_2878
	word64 rcx_2879
	word32 edx_2880
	word64 rdx_2881
	byte S_2882
	word16 ax_2883
	byte al_2884
	word32 r8d_2885
	word32 r14d_2886
	word64 r14_2887
	word32 r13d_2888
	word64 r13_2889
	word32 r12d_2890
	byte CZ_2891
	word64 r9_2892
	byte cl_2893
	word64 r15_2894
	word32 ebp_2895
	word32 esp_2896
	word32 r9d_2897
	byte SO_2898
	byte r13b_2899
	word32 r15d_2900
	byte r14b_2901
	word64 r11_2902
	word128 xmm0_2903
	word128 xmm1_2904
	word128 xmm2_2905
	word128 xmm3_2906
	byte sil_2907
	byte bpl_2908
	call Mem2857[0x0000000000412BC8:word32] (retsize: 4; depth: 4)
		uses: al_2659,ax_2658,bpl_913,C_2847,cl_902,CZ_2859,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_21,eax_2657,ebp_912,ebx_919,ecx_901,edi_930,edx_2854,esi_936,esp_928,fs,qwLoc04,qwLoc28_30,r11_921,r12_946,r12d_947,r13_2844,r13b_911,r13d_2845,r14_925,r14b_908,r14d_915,r15_926,r15d_917,r8_923,r8d_914,r9_920,r9d_909,rax_2860,rbp_2849,rbx_916,rcx_937,rdi_2851,rdx_2853,rsi_2850,rsp_2848,S_903,SCZO_2858,sil_935,SO_900,SZO_2846,xmm0_904,xmm1_905,xmm2_906,xmm3_907,Z_2840
		defs: al_2884,ax_2883,bpl_2908,C_2873,cl_2893,CZ_2891,eax_2871,ebp_2895,ebx_2866,ecx_2878,edi_2867,edx_2880,esi_2874,esp_2896,fs_2870,r11_2902,r12_2877,r12d_2890,r13_2889,r13b_2899,r13d_2888,r14_2887,r14b_2901,r14d_2886,r15_2894,r15d_2900,r8_2875,r8d_2885,r9_2892,r9d_2897,rax_2869,rbp_2864,rbx_2865,rcx_2879,rdi_2862,rdx_2881,rsi_2863,rsp_2861,S_2882,SCZO_2868,sil_2907,SO_2898,SZO_2872,xmm0_2903,xmm1_2904,xmm2_2905,xmm3_2906,Z_2876
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn00000000004028C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000403AE2:
	branch Mem2663[0x000000000061B129:byte] == 0x00 l0000000000403315
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403AEF:
	branch (byte) fn0000000000404CD0(0x0000000D, out rsi_1041) != 0x00 l0000000000403B2B
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403AFD:
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_1041) == 0x00 l0000000000403B14
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000D r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B0B:
	branch Mem2663[0x000000000061B198:byte] != 0x00 l0000000000403B2B
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B14:
	branch (byte) fn0000000000404CD0(0x0000000C, out rsi_1041) == 0x00 l0000000000403B32
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B22:
	branch Mem2663[0x000000000061B150:word32] != 0x00000000 l0000000000403B32
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000C r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B2B:
	Mem2817[0x000000000061B115:byte] = 0x01
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B32:
	branch tcgetpgrp(0x0000000000000001) < 0x00000000 l0000000000403315
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B44:
	sigemptyset(0x000000000061B040)
	word64 r13_2685 = 0x0000000000412CC0
// DataOut: ebx fs r11 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B51:
	r14_1038 = (uint64) Mem2663[r13_2685 + 0x0000000000000000:word32]
	word32 r14d_2695 = (word32) r14_1038
	sigaction((uint64) r14d_2695, 0x0000000000000000, Mem2663[rsp_1009 + 0x0000000000000020:word64])
	branch Mem2663[rsp_1009 + 0x0000000000000040:word64] == 0x0000000000000001 l0000000000403B7C
// DataOut: ebx fs r11 r12d r13 r14 r14d r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B6F:
	sigaddset(0x000000000061B040, (uint64) r14d_2695)
// DataOut: ebx fs r11 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:(uint64) r14d rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B7C:
	r13_2685 = r13_2685 + 0x0000000000000004
	branch r13_2685 != 0xFFFFFFFFFFBED370 l0000000000403B51
// DataOut: ebx fs r11 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B86:
	word64 rdi_2711 = rsp_1009 + 0x0000000000000048
	word64 rsi_2713 = 0x000000000061B040
	word64 rcx_2716 = 0x0000000000000020
// DataOut: ebx fs r11 r12d r14 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B95:
	branch rcx_2716 == 0x0000000000000000 l0000000000403B97
// DataOut: ebx fs r11 r12d r14 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B97:
	Mem2737[rsp_1009 + 0x00000000000000C8:word32] = 0x10000000
	word64 r13_2739 = DPB(r13_2685, 0x00, 0) + 0x0000000000412CC0
// DataOut: ebx fs r11 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BAB:
	r15 = (uint64) Mem2737[r13_2739 + 0x0000000000000000:word32]
	word32 r15d_2754 = (word32) r15
	rsi_1041 = (uint64) r15d_2754
	branch sigismember(0x000000000061B040, rsi_1041) == 0x00000000 l0000000000403BE4
// DataOut: ebx fs r11 r12d r13 r14 r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BC3:
	rsi_1041 = Mem2737[rsp_1009 + 0x0000000000000020:word64]
	word64 rax_2785 = 0x00000000004057F0
	branch r15d_2754 == 0x00000014 l0000000000403BD5
// DataOut: ebx fs r11 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:(uint64) r15d r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0061B040 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BD1_1:
	rax_2785 = r14_1038
// DataOut: ebx fs r11 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:0x00000000004057F0 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x004057F0 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:0xF0 r13b:<invalid> r15:<invalid> ax:0x57F0 r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0061B040 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BD5:
	Mem2798[rsp_1009 + 0x0000000000000040:word64] = rax_2785
	sigaction((uint64) r15d_2754, rsi_1041, 0x0000000000000000)
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0061B040 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BE4:
	r13_2739 = r13_2739 + 0x0000000000000004
	branch r13_2739 != 0xFFFFFFFFFFBED370 l0000000000403BAB
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BEE:
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B95_1:
	Mem2728[rdi_2711:word32] = Mem2663[rsi_2713:word32]
	rsi_2713 = rsi_2713 + 0x0000000000000004
	rdi_2711 = rdi_2711 + 0x0000000000000004
	rcx_2716 = rcx_2716 - 0x0000000000000001
// DataOut: ebx fs r11 r12d r14 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403315:
	branch Mem485[0x000000000061B110:word32] == 0x00000001 l0000000000403A39
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A39:
	word32 eax_2628 = 0x00000002
	branch Mem485[0x000000000061B10D:byte] != 0x00 l0000000000403A5F
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A47:
	branch Mem485[0x000000000061B12C:word32] == 0x00000003 l0000000000403A5F
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x02 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A50:
	eax_2628 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond(Mem485[0x000000000061B150:word32] - 0x00000001)) & 0xFFFFFFFE) + 0x00000004) (alias)
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x02 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A5F:
	Mem2639[0x000000000061B110:word32] = eax_2628
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403322:
	word32 eax_1013
	branch Mem485[0x000000000061B10E:byte] != 0x00 l00000000004039EF
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004039EF:
	word64 rax_2605 = fn000000000040B400(0x0000000000404990, 0x0000000000404980, 0x0000000000000000, 0x000000000000001E, r8_1020, r11, xmm0, xmm1, xmm2, xmm3, out rsp_1009, out rbp_1004, out r8_1020, out r9, out r12_1005, out r14_1038, out r15, out xmm0, out xmm1, out xmm2, out xmm3)
	Mem2613[0x000000000061B1C8:word64] = rax_2605
	eax_1013 = (word32) rax_2605 (alias)
	branch rax_2605 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r11 r12 r12d r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A1B:
	_obstack_begin(0x000000000061AF00, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, 0x00000000FFFFFFFF)
	rsi_1041 = 0x0000000000000000
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFF r12:<invalid> rdx:<invalid> eax:0x004049D0 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB r15d:<invalid> ax:0x49D0 r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0xD0 edx:0x00404980 cl:0x90 r10:<invalid> ecx:0x00404990 r12d:<invalid> dx:0x4980 dl:0x80 edi:0x0000001E r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040332F:
	byte al_1060
	word32 eax_1051 = (word32) (uint64) Mem485[0x000000000061B148:word32]
	branch eax_1051 == 0x00000004 l000000000040377A
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040333E:
	branch eax_1051 == 0x00000002 l000000000040377A
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403347:
	branch Mem485[0x000000000061B150:word32] == 0x00000000 l000000000040377A
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403354:
	branch Mem485[0x000000000061B17D:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403361:
	branch Mem485[0x000000000061B144:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040377A:
	Mem2564[0x000000000061B0C1:byte] = 0x01
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040336E:
	Mem2575[0x000000000061B0C1:byte] = 0x00
	al_1060 = 0x01 (alias)
	branch Mem485[0x000000000061B10E:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403383:
	branch Mem2575[0x000000000061B129:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040338C:
	branch Mem2575[0x000000000061B12C:word32] != 0x00000000 l00000000004033A0
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403395:
	branch Mem2575[0x000000000061B10C:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040339E:
	al_1060 = 0x00 (alias)
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033A0:
	Mem1062[0x000000000061B0C0:byte] = al_1060
	Mem1064[0x000000000061B0C0:byte] = Mem1062[0x000000000061B0C0:byte] & 0x01
	branch Mem1064[0x000000000061B130:byte] == 0x00 l00000000004033E8
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033B6:
	_obstack_begin(0x000000000061AFC0, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, r8_1020)
	_obstack_begin(0x000000000061AF60, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, r8_1020)
	rsi_1041 = 0x0000000000000000
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033E8:
	word64 rsi_1103
	word64 rsp_1101
	Mem1077[0x000000000061B1B8:word64] = 0x0000000000000064
	word64 rsp_1081
	word64 rax_1082 = fn0000000000410C40(rsi_1041, 0x0000000000004B00, out rsp_1081)
	Mem1083[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem1084[0x000000000061B1C0:word64] = rax_1082
	fn0000000000404DD0()
	word32 r13d_1079 = (word32) (uint64) ((word32) (uint64) ebx_1001 - r12d_2470)
	branch r13d_1079 <= 0x00000000 l00000000004042A0
// DataOut: fs r11 r12d r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042A0:
	branch Mem1084[0x000000000061B10D:byte] == 0x00 l00000000004043A5
// DataOut: fs r11 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043A5:
	word64 rbp_2532
	word64 r12_2534
	word64 r13_2535
	rsp_1101 = fn0000000000404D20(0x00000001, 0x0000000000000000, 0x0000000000413990, r11, out rbp_2532, out rsi_1103, out r12_2534, out r13_2535)
// DataOut: bpl fs r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042AD:
	word32 ebx_2512
	word64 rbp_2514
	word64 r12_2519
	word64 r13_2520
	word64 r14_2521
	fn0000000000407EA0(0x0000000000416919, 0x00000001, rbp_1004, 0x0000000000000003, 0x0000000000413990, r8_1020, r11, r14_1038, r15, fs, out ebx_2512, out rsp_1101, out rbp_2514, out rsi_1103, out r8_1020, out r9, out r11, out r12_2519, out r13_2520, out r14_2521, out r15)
// DataOut: bpl fs r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403423:
	word64 rbp_2467 = rbp_1004 + (int64) r12d_2470 * 0x0000000000000008
// DataOut: fs r11 r12d r14 r15 r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040342B:
	word64 rbp_2485 = rbp_2467 + 0x0000000000000008
	word32 ebx_2489
	word64 r12_2496
	word64 r13_2497
	fn0000000000407EA0(0x0000000000416919, 0x00000001, rbp_2485, 0x0000000000000000, Mem1084[rbp_2467:word64], r8_1020, r11, r14_1038, r15, fs, out ebx_2489, out rsp_1101, out rbp_2467, out rsi_1103, out r8_1020, out r9, out r11, out r12_2496, out r13_2497, out r14_1038, out r15)
	r12d_2470 = (word32) (uint64) (r12d_2470 + 0x00000001) (alias)
	bpl_1090 = (byte) rbp_2485 (alias)
	branch ebx_2489 > r12d_2470 l000000000040342B
// DataOut: bpl fs r11 r12d r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040344D:
	word64 r13_1139
	branch Mem1084[0x000000000061B1B0:word64] != 0x0000000000000000 l0000000000404200
// DataOut: bpl fs r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404200:
	word64 rbp_2399
	word64 r12_2402
	word64 r14_2404
	rsp_1101 = fn0000000000404E80(rsi_1103, r11, r15, out rbp_2399, out rsi_1103, out r8_1020, out r12_2402, out r13_1139, out r14_2404, out r15)
	branch Mem1084[0x000000000061B10D:byte] == 0x00 l0000000000404454
// DataOut: bpl fs r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404454:
	word64 rbp_2460
	rsp_1101 = fn0000000000405090(0x01, 0x0000000000000000, r11, out rbp_2460, out rsi_1103, out r13_1139, out r15)
// DataOut: bpl fs r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404212:
	branch Mem1084[0x000000000061B1B0:word64] == 0x0000000000000000 l000000000040345B
// DataOut: bpl fs r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404220:
	rsp_1101 = fn00000000004079F0()
	branch Mem1084[0x000000000061B190:word64] == 0x0000000000000000 l00000000004044B5
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044B5:
	Mem2453[rsp_1101 + 0x0000000000000018:word64] = 0x0000000000000000
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404233:
	word64 rdi_2427 = Mem1084[0x000000000061A610:word64]
	word64 rax_2429 = Mem1084[rdi_2427 + 0x0000000000000028:word64]
	branch rax_2429 >=u Mem1084[rdi_2427 + 0x0000000000000030:word64] l00000000004044A3
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044A3:
	__overflow(rdi_2427, 0x000000000000000A)
	rsi_1103 = 0x000000000000000A
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404248:
	Mem2447[rdi_2427 + 0x0000000000000028:word64] = rax_2429 + 0x0000000000000001
	Mem2448[rax_2429:byte] = 0x0A
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404253:
	word64 rax_2441 = Mem1084[0x000000000061B190:word64]
	Mem2443[0x000000000061B018:word64] = Mem1084[0x000000000061B018:word64] + 0x0000000000000001
	Mem2445[rsp_1101 + 0x0000000000000018:word64] = rax_2441
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040345B:
	word64 rax_2382 = Mem1084[0x000000000061B190:word64]
	Mem2392[rsp_1101 + 0x0000000000000018:word64] = rax_2382
	r13_1139 = (uint64) (r13d_1079 - 0x00000001)
	branch (word32) r13_1139 > 0x00000000 l00000000004034D2
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040346D:
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404385:
	branch rax_2382 == 0x0000000000000000 l00000000004034D2
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040438E:
	branch Mem2392[rax_2382 + 0x0000000000000018:word64] != 0x0000000000000000 l00000000004034D2
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404399:
	Mem2398[0x000000000061B0D0:byte] = 0x00
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034D2:
	branch Mem1084[rsp_1101 + 0x0000000000000018:word64] == 0x0000000000000000 l00000000004040B5
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040B5:
	branch Mem1084[0x000000000061B129:byte] == 0x00 l0000000000404152
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040C2:
	branch Mem1084[0x000000000061B128:byte] == 0x00 l00000000004040ED
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040CB:
	branch Mem1084[0x000000000061A3E0:word64] == 0x0000000000000002 l00000000004042CB
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042CB:
	branch memcmp(Mem1084[0x000000000061A3E8:word64], 0x00000000004139E1, 0x0000000000000002) != 0x00000000 l00000000004040D9
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042E9:
	branch Mem1084[0x000000000061A3F0:word64] != 0x0000000000000001 l00000000004040D9
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r8:<invalid> r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0002 ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042F7:
	branch Mem1084[Mem1084[0x000000000061A3F8:word64]:byte] != 0x6D l00000000004040D9
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r8:<invalid> r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0002 ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404307:
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r8:<invalid> r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0002 ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040D9:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040ED:
	fflush_unlocked(Mem1084[0x000000000061A610:word64])
	word64 rbx_2293 = 0x0000000000412CC0
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040410D:
	word32 ebp_2301 = (word32) (uint64) Mem1084[rbx_2293:word32]
	branch sigismember(0x000000000061B040, (uint64) ebp_2301) == 0x00000000 l0000000000404100
// DataOut: ebp r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040411F:
	signal((uint64) ebp_2301, 0x0000000000000000)
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:0x0061B040 r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:0x40 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404100:
	rbx_2293 = rbx_2293 + 0x0000000000000004
	branch rbx_2293 == 0x0000000000412CF0 l000000000040412A
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040412A:
	word32 ebx_2319 = (word32) (uint64) Mem1084[0x000000000061B034:word32]
	branch ebx_2319 == 0x00000000 l0000000000404143
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404134:
	raise(0x0000000000000013)
	ebx_2319 = (word32) (uint64) (ebx_2319 - 0x00000001) (alias)
	branch ebx_2319 != 0x00000000 l0000000000404134
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404143:
	word64 rdi_2327 = (uint64) Mem1084[0x000000000061B038:word32]
	branch (word32) rdi_2327 == 0x00000000 l0000000000404152
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040414D:
	raise(rdi_2327)
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404152:
	branch Mem1084[0x000000000061B130:byte] != 0x00 l000000000040430C
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040430C:
	fn0000000000405630(0x000000000061AFC0, 0x00000000004139E4, qwLoc04)
	fn0000000000405630(0x000000000061AF60, 0x00000000004139EE, qwLoc04)
	fn000000000040E630(Mem1084[0x000000000061B0E8:word64])
	__printf_chk(0x0000000000000001, 0x0000000000415D40)
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040415F:
	word64 rbx_2248 = Mem1084[0x000000000061B1C8:word64]
	branch rbx_2248 == 0x0000000000000000 l00000000004041F5
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040416F:
	branch fn000000000040AFB0(rbx_2248) == 0x0000000000000000 l00000000004041ED
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004041ED:
	fn000000000040B640(rbx_2248, r13_1139, r15, qwLoc04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004041F5:
	exit((uint64) Mem1084[0x000000000061B030:word32])
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040417C:
	__assert_fail(0x0000000000415D68, 0x0000000000413736, 0x00000000000005DC, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004034DE:
	word64 r14_1216
	Mem1165[0x000000000061B190:word64] = Mem1084[Mem1084[rsp_1101 + 0x0000000000000018:word64] + 0x0000000000000018:word64]
	branch Mem1084[0x000000000061B1C8:word64] == 0x0000000000000000 l0000000000403FB5
// DataOut: bpl fs r11 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FB5:
	r14_1216 = Mem1165[r8_1020:word64]
// DataOut: fs r11 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034FC:
	r14_1216 = Mem1165[r9:word64]
	branch r14_1216 == 0x0000000000000000 l0000000000403FC2
// DataOut: bpl fs r11 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FC2:
	word64 rax_2157 = Mem1165[0x000000000061AF18:word64]
	branch (word32) (rax_2157 - Mem1165[0x000000000061AF10:word64]) <=u 0x0000000F l00000000004044C3
// DataOut: bpl fs r11 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044C3:
	__assert_fail(0x0000000000415C58, 0x0000000000413736, 0x00000000000003D5, 0x0000000000412C38)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000403FDC:
	branch Mem1165[0x000000000061AF20:word64] - rax_2157 >= 0xFFFFFFFFFFFFFFF0 l0000000000404002
// DataOut: bpl fs r11 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FEC:
	_obstack_newchunk(0x000000000061AF00, 0x00000000FFFFFFF0)
	rax_2157 = Mem1165[0x000000000061AF18:word64]
// DataOut: bpl fs r11 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404002:
	word64 rsi_2174 = Mem1165[rsp_1101 + 0x0000000000000020:word64]
	word64 rdi_2177 = Mem1165[0x000000000061B1C8:word64]
	Mem2178[0x000000000061AF18:word64] = rax_2157 - 0x0000000000000010
	word64 rax_2180 = Mem2178[rax_2157 - 0x0000000000000008:word64]
	Mem2181[rsp_1101 + 0x0000000000000040:word64] = Mem2178[rax_2157 - 0x0000000000000010:word64]
	Mem2182[rsp_1101 + 0x0000000000000048:word64] = rax_2180
	word64 rax_2194 = fn000000000040BB90(rax_2180, bpl_1090, rsi_2174, rdi_2177, r8_1020, r11, xmm0, xmm1, xmm2, xmm3, out rsp_1101, out bpl_1090, out rsi_1103, out r8_1020, out r9, out r13_1139, out r15, out xmm0, out xmm1, out xmm2, out xmm3)
	branch rax_2194 == 0x0000000000000000 l0000000000404287
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404287:
	__assert_fail(0x0000000000413992, 0x0000000000413736, 0x000000000000059D, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000404039:
	free(rax_2194)
	word64 rbx_2203 = Mem2182[rsp_1101 + 0x0000000000000018:word64]
	free(Mem2182[rbx_2203:word64])
	free(Mem2182[rbx_2203 + 0x0000000000000008:word64])
	free(rbx_2203)
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403508:
	word64 rax_1217 = Mem1165[rsp_1101 + 0x0000000000000018:word64]
	word64 rbx_1220 = Mem1165[rax_1217 + 0x0000000000000008:word64]
	Mem1222[rsp_1101 + 0x000000000000002F:byte] = (byte) (word32) Mem1165[rax_1217 + 0x0000000000000010:byte]
	word64 rax_1223 = __errno_location()
	Mem1225[rax_1223:word32] = 0x00000000
	word64 rax_1228 = opendir(r14_1216)
	ebx_1001 = (word32) rbx_1220 (alias)
	r12_1005 = rax_1223
	word64 r13_1236 = rax_1228
	branch rax_1228 == 0x0000000000000000 l0000000000404195
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404195:
	dcgettext(0x0000000000000000, 0x0000000000413998, 0x0000000000000005)
	word64 rbp_2139
	word64 rdi_2141
	word64 r12_2145
	word64 r14_2147
	rsp_1101 = fn0000000000405810(r14_1216, (word32) Mem1225[rsp_1101 + 0x000000000000002F:byte], r11, fs, out rbp_2139, out rsi_1103, out rdi_2141, out r8_1020, out r9, out r11, out r12_2145, out r13_1139, out r14_2147, out r15)
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040353B:
	branch Mem1225[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004035FF
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403549:
	byte al_1970
	word64 rsi_1966
	word32 eax_1952 = dirfd(rax_1228)
	word64 rdx_1959 = Mem1225[rsp_1101 + 0x0000000000000020:word64]
	branch eax_1952 < 0x00000000 l0000000000403E95
// DataOut: eax fs r11 r14 r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E95:
	rsi_1966 = r14_1216
	al_1970 = (byte) (uint64) (__xstat(0x0000000000000001, r14_1216, rdx_1959) >>u 0x0000001F) (alias)
// DataOut: al fs r11 r14 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040355E:
	rsi_1966 = (uint64) eax_1952
	al_1970 = (byte) (uint64) (__fxstat(0x0000000000000001, rsi_1966, rdx_1959) >>u 0x0000001F) (alias)
// DataOut: al fs r11 r14 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040356D:
	branch al_1970 != 0x00 l0000000000403478
// DataOut: fs r11 r14 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:0x01 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403478:
	dcgettext(0x0000000000000000, 0x0000000000415CE8, 0x0000000000000005)
	word64 rbp_2091
	word64 rdi_2093
	word64 r12_2097
	word64 r14_2099
	rsp_1101 = fn0000000000405810(r14_1216, (word32) Mem1225[rsp_1101 + 0x000000000000002F:byte], r11, fs, out rbp_2091, out rsi_1103, out rdi_2093, out r8_1020, out r9, out r11, out r12_2097, out r13_1139, out r14_2099, out r15)
	closedir(r13_1139)
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:0x01 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403575:
	word64 rdx_1976 = Mem1225[rsp_1101 + 0x0000000000000040:word64]
	Mem1978[rsp_1101 + 0x0000000000000010:word64] = Mem1225[rsp_1101 + 0x0000000000000048:word64]
	Mem1979[rsp_1101 + 0x0000000000000008:word64] = rdx_1976
	word64 rsp_1980
	word64 rax_1981 = fn0000000000410C40(rsi_1966, 0x0000000000000010, out rsp_1980)
	word64 rdx_1983 = Mem1979[rsp_1980 + 0x0000000000000008:word64]
	word64 rdi_1987 = Mem1979[0x000000000061B1C8:word64]
	Mem1991[rax_1981:word64] = Mem1979[rsp_1980 + 0x0000000000000010:word64]
	Mem1992[rax_1981 + 0x0000000000000008:word64] = rdx_1983
	word64 rax_2007 = fn000000000040BB50(rax_1981, rax_1981, rax_1981, rdi_1987, r8_1020, r11, xmm0, xmm1, xmm2, xmm3, out ebx_1001, out rsp_1009, out rbp_1004, out rsi_1103, out r8_1020, out r9, out r12_1005, out r13_1236, out r14_1216, out r15, out xmm0, out xmm1, out xmm2, out xmm3)
	bpl_1090 = (byte) rax_1981 (alias)
	eax_1013 = (word32) rax_2007 (alias)
	branch rax_2007 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:0x01 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043BB:
	fn0000000000410E50()
	r8_1020 = Mem485[0x000000000061A640:word64]
	fn00000000004112D0(0x0000000000413080, (word32) (uint64) Mem485[rsp_1009 + 0x0000000000000038:word32], (word32) (uint64) eax_1013)
// DataOut: ebx fs r11 r12 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r15d:<invalid> ax:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r8b:<invalid> r8d:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043D9:
	word64 r12_805 = r12_1005 + 0x0000000000000001
	word64 rax_809 = strchr(r12_805, 0x000000000000000A)
	r12d_254 = (word32) r12_805 (alias)
	r14_1038 = rax_809
	branch rax_809 == 0x0000000000000000 l000000000040444F
// DataOut: ebx fs r11 r12 r12d r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040444F:
	r13_2993 = r12_805
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> r8:<invalid> rdx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043F2:
	r13_2993 = r8_1020 + 0x0000000000000001
	word64 rsi_843 = 0x000000000000000A
	branch strchr(r13_2993, 0x000000000000000A) == 0x0000000000000000 l0000000000404438
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> r8:<invalid> rdx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404408:
	word64 rbx_872
	word64 r15_880
	r15 = fn000000000040EC10(r12_805, r11, fs, out rbx_872, out rbp_1004, out r8_1020, out r9, out r11, out r12_805, out r13_2993, out r14_1038, out r15_880)
	error(0x0000000000000002, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000413900, 0x0000000000000005), Mem485[rsp_1009 + -8:<unknown>])
	rsi_843 = 0x0000000000000000
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> r8:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404438:
	Mem870[rsi_843:byte] = 0x00
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> ecx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040443C:
	Mem838[0x000000000061A3D0:word64] = r12_805
	Mem839[0x000000000061A3D8:word64] = r13_2993
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> ecx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004038A8:
	branch strstr(Mem485[0x000000000061A3D0:word64], 0x0000000000413766) == 0x0000000000000000 l0000000000404484
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404484:
	rsi_1041 = 0x0000000000413766
	branch strstr(Mem485[0x000000000061A3D8:word64], 0x0000000000413766) != 0x0000000000000000 l00000000004038C2
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040449E:
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004038C2:
	Mem546[0x000000000061A748:word64] = 0x0000000000000005
// DataOut: ebx fs r11 r12d r13 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004038CD:
	r14_1038 = Mem546[0x000000000061A748:word64]
	Mem577[0x000000000061A748:word64] = 0x0000000000000000
	rsp_1009 = 0x000000000002000E
// DataOut: ebx fs r11 r12d r13 r14 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004038EB:
	Mem593[rsp_1009 + 0x0000000000000040:word64] = r14_1038
	r9 = 0x0000000000000000
	r8_1020 = 0x0000000000000000
	word32 r12d_609
	word64 r13_610
	rsp_1009 = fn000000000040CDC0(Mem593[rsp_1009 + 0x0000000000000020:word64], 0x00000000000000A1, r13_2993, nl_langinfo((uint64) r12d_254), 0x00000000, 0x00000000, out rbp_1004, out rsi_1041, out r12d_609, out r13_610, out r14_1038, out r15)
	branch false l0000000000404356
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404356:
	Mem670[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040391F:
	word64 rax_640 = Mem593[rsp_1009 + 0x0000000000000040:word64]
	branch Mem593[0x000000000061A748:word64] <u rax_640 l0000000000403933
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040392B_1:
	rax_640 = Mem593[0x000000000061A748:word64]
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403933:
	Mem659[0x000000000061A748:word64] = rax_640
	r12d_254 = (word32) (uint64) (r12d_609 + 0x00000001) (alias)
	r13_2993 = r13_610 + 161
	branch r12d_254 != 0x0002001A l00000000004038EB
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040394E:
	branch rax_640 <u r14_1038 l00000000004038CD
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403957:
	branch rax_640 != 0x0000000000000000 l0000000000403301
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403960:
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404361:
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415C30, 0x0000000000000005), Mem593[rsp_1009 + -8:<unknown>])
	rsi_1041 = 0x0000000000000000
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035BF:
	branch rbp_1004 != rax_2007 l0000000000403EE2
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403EE2:
	free(rbp_1004)
	word64 rbp_2053
	word64 r12_2057
	word64 r14_2059
	fn000000000040EAB0(r14_1216, r11, fs, out rsp_1101, out rbp_2053, out r8_1020, out r9, out r11, out r12_2057, out r13_1139, out r14_2059, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415D10, 0x0000000000000005), Mem1992[rsp_1101 + -8:<unknown>])
	closedir(r13_1139)
	Mem2078[0x000000000061B030:word32] = 0x00000002
	rsi_1103 = 0x0000000000000000
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035C8:
	word64 rax_2017 = Mem1992[0x000000000061AF18:word64]
	branch Mem1992[0x000000000061AF20:word64] - rax_2017 <= 0x000000000000000F l0000000000404064
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404064:
	_obstack_newchunk(0x000000000061AF00, 0x0000000000000010)
	rsi_1103 = 0x0000000000000010
	rax_2017 = Mem1992[0x000000000061AF18:word64]
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035E3:
	Mem2036[0x000000000061AF18:word64] = rax_2017 + 0x0000000000000010
	Mem2038[rax_2017 + 0x0000000000000008:word64] = Mem2036[rsp_1009 + 0x0000000000000040:word64]
	Mem2040[rax_2017:word64] = Mem2038[rsp_1009 + 0x0000000000000048:word64]
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035FF:
	branch Mem1225[0x000000000061B10E:byte] != 0x00 l0000000000403615
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403608:
	branch Mem1225[0x000000000061B0D0:byte] == 0x00 l00000000004036D6
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403615:
	branch Mem1225[0x000000000061A3C0:byte] != 0x00 l0000000000403646
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040361E:
	word64 rdi_1929 = Mem1225[0x000000000061A610:word64]
	word64 rax_1931 = Mem1225[rdi_1929 + 0x0000000000000028:word64]
	branch rax_1931 >=u Mem1225[rdi_1929 + 0x0000000000000030:word64] l00000000004045E4
// DataOut: ebx fs r11 r14 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045E4:
	__overflow(rdi_1929, 0x000000000000000A)
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403633:
	Mem1945[rdi_1929 + 0x0000000000000028:word64] = rax_1931 + 0x0000000000000001
	Mem1946[rax_1931:byte] = 0x0A
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040363E:
	Mem1942[0x000000000061B018:word64] = Mem1225[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403646:
	Mem1811[0x000000000061A3C0:byte] = 0x00
	branch Mem1225[0x000000000061B130:byte] != 0x00 l0000000000403F2E
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403F2E:
	fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, Mem1811[0x000000000061A610:word64])
	Mem1899[0x000000000061B018:word64] = Mem1811[0x000000000061B018:word64] + 0x0000000000000002
	branch Mem1899[0x000000000061B130:byte] == 0x00 l000000000040365A
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403F5E:
	word64 rax_1902 = Mem1899[0x000000000061AF78:word64]
	branch Mem1899[0x000000000061AF80:word64] <u rax_1902 + 0x0000000000000008 l000000000040407F
// DataOut: ebx fs r11 r14 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413771 rax:<invalid> rsi:0x0000000000000001 r8:<invalid> r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0x01 esi:0x00000001 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:0x00413771 r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0002 ah:<invalid> r11d:<invalid> r13b:<invalid> dil:0x71 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040407F:
	_obstack_newchunk(0x000000000061AF60, 0x0000000000000008)
	rax_1902 = Mem1899[0x000000000061AF78:word64]
// DataOut: ebx fs r11 r14 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413771 rax:<invalid> rsi:0x0000000000000001 r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0x01 esi:0x00000001 cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:0x00413771 r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:0x71 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403F76:
	Mem1918[rax_1902:word64] = Mem1899[0x000000000061B018:word64]
	Mem1920[0x000000000061AF78:word64] = Mem1918[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040365A:
	word64 rdx_1822 = Mem1811[0x000000000061B0E0:word64]
	branch rbx_1220 != 0x0000000000000000 l000000000040366F
// DataOut: ebx fs r11 r14 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040366B_1:
	rbx_1220 = r14_1216
	ebx_1001 = (word32) r14_1216 (alias)
// DataOut: ebx fs r11 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040366F:
	word64 rbx_1832
	word64 rsp_1833
	word64 rbp_1834
	word64 rsi_1835
	word32 edi_1836
	Mem1846[0x000000000061B018:word64] = Mem1811[0x000000000061B018:word64] + fn00000000004052D0(rdx_1822, ebx_1001, rbx_1220, r11, fs, out rbx_1832, out rsp_1833, out rbp_1834, out rsi_1835, out edi_1836, out r8_1020, out r9, out r11, out r12_1005, out r13_1236, out r14_1216, out r15)
	branch Mem1846[0x000000000061B130:byte] == 0x00 l00000000004036B3
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403689:
	word64 rax_1864 = Mem1846[0x000000000061AF78:word64]
	branch Mem1846[0x000000000061AF80:word64] <u rax_1864 + 0x0000000000000008 l000000000040409A
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040409A:
	_obstack_newchunk(0x000000000061AF60, 0x0000000000000008)
	rax_1864 = Mem1846[0x000000000061AF78:word64]
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004036A1:
	Mem1880[rax_1864:word64] = Mem1846[0x000000000061B018:word64]
	Mem1882[0x000000000061AF78:word64] = Mem1880[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004036B3:
	fwrite_unlocked(0x000000000041393B, 0x0000000000000001, 0x0000000000000002, Mem1846[0x000000000061A610:word64])
	Mem1862[0x000000000061B018:word64] = Mem1846[0x000000000061B018:word64] + 0x0000000000000002
	rsi_1103 = 0x0000000000000001
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004036D6:
	word64 rsp_1342 = fn0000000000404DD0()
	word32 eax_1344 = (word32) Mem1225[rsp_1342 + 0x000000000000002F:byte]
	Mem1345[rsp_1342 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem1346[rsp_1342 + 0x0000000000000010:word32] = eax_1344
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> bpl:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004036F0:
	Mem1367[r12_1005:word32] = 0x00000000
	word64 rax_1370 = readdir(r13_1236)
	word64 rdi_1368 = r13_1236
	bpl_1090 = (byte) rax_1370 (alias)
	branch rax_1370 == 0x0000000000000000 l0000000000403CC0
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403CC0:
	branch (word32) (uint64) Mem1367[r12_1005:word32] == 0x00000000 l0000000000403CF3
// DataOut: fs r11 r13 r14 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403CC8:
	dcgettext(0x0000000000000000, 0x00000000004139B1, 0x0000000000000005)
	word64 rbp_1783
	word64 rdi_1785
	rsp_1342 = fn0000000000405810(r14_1216, (word32) (uint64) Mem1367[rsp_1342 + 0x0000000000000010:word32], r11, fs, out rbp_1783, out rsi_1103, out rdi_1785, out r8_1020, out r9, out r11, out r12_1005, out r13_1236, out r14_1216, out r15)
	branch Mem1367[r12_1005:word32] == 0x0000004B l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403CF3:
	branch closedir(r13_1236) != 0x00000000 l0000000000403EBC
// DataOut: fs r11 r14 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403EBC:
	dcgettext(0x0000000000000000, 0x00000000004139C6, 0x0000000000000005)
	word64 rbp_1760
	word64 rdi_1762
	word64 r8_1763
	word64 r12_1766
	word64 r13_1767
	word64 r14_1768
	fn0000000000405810(r14_1216, (word32) Mem1367[rsp_1342 + 0x000000000000002F:byte], r11, fs, out rbp_1760, out rsi_1103, out rdi_1762, out r8_1763, out r9, out r11, out r12_1766, out r13_1767, out r14_1768, out r15)
// DataOut: fs r11 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D03:
	word64 r12_1594
	word64 r14_1596
	word64 rbp_1591
	rsp_1101 = fn0000000000404E80(rsi_1103, r11, r15, out rbp_1591, out rsi_1103, out r8_1020, out r12_1594, out r13_1139, out r14_1596, out r15)
	branch Mem1367[0x000000000061B10E:byte] != 0x00 l0000000000403EAA
// DataOut: bpl fs r11 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403EAA:
	rsp_1101 = fn0000000000405090((byte) (word32) Mem1367[rsp_1101 + 0x000000000000002F:byte], r14_1596, r11, out rbp_1591, out rsi_1103, out r13_1139, out r15)
// DataOut: bpl fs r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D15:
	branch (word32) (uint64) Mem1367[0x000000000061B150:word32] == 0x00000000 l0000000000403D2C
// DataOut: bpl fs r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D1F:
	branch Mem1367[0x000000000061B144:byte] == 0x00 l0000000000403E00
// DataOut: bpl fs r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D2C:
	branch Mem1367[0x000000000061B130:byte] != 0x00 l0000000000403F8D
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403F8D:
	fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, Mem1367[0x000000000061A610:word64])
	Mem1734[0x000000000061B018:word64] = Mem1367[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D39:
	word64 rax_1650 = dcgettext(0x0000000000000000, 0x00000000004139DB, 0x0000000000000005)
	fputs_unlocked(rax_1650, Mem1367[0x000000000061A610:word64])
	word64 rax_1657 = DPB(rax_1650, strlen(rax_1650), 0)
	word64 rdi_1658 = Mem1367[0x000000000061A610:word64]
	Mem1661[0x000000000061B018:word64] = Mem1367[0x000000000061B018:word64] + rax_1657
	word64 rax_1662 = Mem1661[rdi_1658 + 0x0000000000000028:word64]
	branch rax_1662 >=u Mem1661[rdi_1658 + 0x0000000000000030:word64] l00000000004044EB
// DataOut: fs rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044EB:
	__overflow(rdi_1658, 0x0000000000000020)
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D80:
	Mem1724[rdi_1658 + 0x0000000000000028:word64] = rax_1662 + 0x0000000000000001
	Mem1725[rax_1662:byte] = 0x20
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D8B:
	word64 r8_1669 = Mem1661[0x000000000061B138:word64]
	word32 edx_1672 = (word32) (uint64) Mem1661[0x000000000061B140:word32]
	word64 rdi_1674 = Mem1661[rsp_1101 + 0x0000000000000008:word64]
	Mem1677[0x000000000061B018:word64] = Mem1661[0x000000000061B018:word64] + 0x0000000000000001
	word64 rbp_1680
	word32 r14d_1685
	word64 rax_1687 = fn000000000040BD70(0x0000000000000200, edx_1672, rbp_1591, rsp_1101 + 0x00000000000000E0, rdi_1674, r8_1669, fs, out rsp_1101, out rbp_1680, out r8_1020, out r9, out r11, out r13_1139, out r14d_1685, out r15)
	rsi_1103 = Mem1677[0x000000000061A610:word64]
	fputs_unlocked(rax_1687, rsi_1103)
	word64 rax_1696 = DPB(rax_1687, strlen(rax_1687), 0)
	word64 rdi_1697 = Mem1677[0x000000000061A610:word64]
	Mem1700[0x000000000061B018:word64] = Mem1677[0x000000000061B018:word64] + rax_1696
	word64 rax_1701 = Mem1700[rdi_1697 + 0x0000000000000028:word64]
	branch rax_1701 >=u Mem1700[rdi_1697 + 0x0000000000000030:word64] l00000000004044DC
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044DC:
	__overflow(rdi_1697, 0x000000000000000A)
	rsi_1103 = 0x000000000000000A
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403DED:
	Mem1717[rdi_1697 + 0x0000000000000028:word64] = rax_1701 + 0x0000000000000001
	Mem1718[rax_1701:byte] = 0x0A
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403DF8:
	Mem1714[0x000000000061B018:word64] = Mem1700[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E00:
	branch Mem1367[0x000000000061B1B0:word64] == 0x0000000000000000 l00000000004034A1
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E0E:
	rsp_1101 = fn00000000004079F0()
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034A1:
	word64 rbx_1277 = Mem1225[rsp_1101 + 0x0000000000000018:word64]
	free(Mem1225[rbx_1277:word64])
	free(Mem1225[rbx_1277 + 0x0000000000000008:word64])
	free(rbx_1277)
	Mem1281[0x000000000061B0D0:byte] = 0x01
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034C6:
	Mem1213[rsp_1101 + 0x0000000000000018:word64] = Mem1165[0x000000000061B190:word64]
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040370C:
	word32 eax_1416 = (word32) (uint64) Mem1367[0x000000000061B108:word32]
	branch eax_1416 == 0x00000002 l0000000000403C78
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040371F:
	branch Mem1367[rax_1370 + 0x0000000000000013:byte] == 0x2E l0000000000403C58
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C58:
	branch eax_1416 == 0x00000000 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C60:
	branch Mem1367[rax_1370 + 0x0000000000000014 + (uint64) (Mem1367[rax_1370 + 0x0000000000000014:byte] == 0x2E):byte] == 0x00 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C74:
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:Test(EQ,Z) dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403729:
	branch eax_1416 != 0x00000000 l0000000000403C78
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403731:
	r15 = Mem1367[0x000000000061B0F8:word64]
	branch r15 != 0x0000000000000000 l0000000000403755
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403755:
	rdi_1368 = Mem1367[rdi_1368:word64]
	branch fnmatch(rdi_1368, rax_1370 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403748
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403748:
	r15 = Mem1367[r15 + 0x0000000000000008:word64]
	branch r15 == 0x0000000000000000 l0000000000403C78
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403769:
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040373D:
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C78:
	r15 = Mem1367[0x000000000061B100:word64]
	branch r15 != 0x0000000000000000 l0000000000403C9D
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C9D:
	rdi_1368 = Mem1367[rdi_1368:word64]
	branch fnmatch(rdi_1368, rax_1370 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403C90
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C90:
	r15 = Mem1367[r15 + 0x0000000000000008:word64]
	branch r15 == 0x0000000000000000 l0000000000403E20
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403CB1:
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C84:
// DataOut: fs r11 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E20:
	word64 rax_1446 = (uint64) ((word32) Mem1367[rax_1370 + 0x0000000000000012:byte] - 0x00000001)
	word64 rsi_1443 = 0x0000000000000000
	byte al_1450 = (byte) rax_1446
	branch al_1450 >u 0x0D l0000000000403E37
// DataOut: al esi fs r11 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E2D:
	rsi_1443 = (uint64) Mem1367[DPB(rax_1446, (word32) al_1450, 0) * 0x0000000000000004 + 0x00412C00:word32]
// DataOut: esi fs r11 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E37:
	word32 ebx_1463
	word64 rsp_1464
	word64 rbp_1465
	word64 rsi_1466
	word64 rax_1474 = fn0000000000407EA0(r14_1216, 0x00000000, rax_1370, rsi_1443, rax_1370 + 0x0000000000000013, r8_1020, r11, r14_1216, r15, fs, out ebx_1463, out rsp_1464, out rbp_1465, out rsi_1466, out r8_1020, out r9, out r11, out r12_1005, out r13_1236, out r14_1216, out r15)
	Mem1476[rsp_1464 + 0x0000000000000008:word64] = Mem1367[rsp_1464 + 0x0000000000000008:word64] + rax_1474
	branch Mem1476[0x000000000061B150:word32] != 0x00000001 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E56:
	branch Mem1476[0x000000000061B148:word32] != 0xFFFFFFFF l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r14b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E63:
	branch Mem1476[0x000000000061B144:byte] != 0x00 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r14b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E70:
	branch Mem1476[0x000000000061B10E:byte] != 0x00 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r14b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E7D:
	word64 rbp_1485
	word64 rsi_1486
	fn0000000000404E80(rsi_1466, r11, r15, out rbp_1485, out rsi_1486, out r8_1020, out r12_1005, out r13_1236, out r14_1216, out r15)
	fn00000000004079F0()
	fn0000000000404DD0()
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r14b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403770:
	rsp_1342 = fn0000000000406490(out rsi_1103)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402B5A:
	word32 eax_368 = (word32) (uint64) (eax_319 + 0x00000083)
	branch eax_368 >u 0x00000112 l00000000004031F9
// DataOut: eax ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:<invalid> ecx:0x00413080 sil:<invalid> cl:0x80 al:<invalid> r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004031F9:
	fn0000000000409750(0x00000002)
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403203:
	Mem174[0x000000000061B150:word32] = 0x00000002
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402B6A:
	switch (eax_368) { l0000000000402DFF }
// DataOut: r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:<invalid> ecx:0x00413080 sil:<invalid> cl:0x80 al:<invalid> r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402DFF:
	word64 rsi_383
	word32 eax_375 = (word32) (uint64) Mem318[0x000000000061A56C:word32]
	branch eax_375 == 0x00000001 l0000000000403BF3
// DataOut: eax r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:<invalid> ecx:0x00413080 sil:<invalid> cl:0x80 al:<invalid> r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000403BF3:
	rsi_383 = 0x0000000000413807
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402E15:
	rsi_383 = 0x000000000041380F
	branch eax_375 == 0x00000002 l0000000000402E26
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402E22_1:
	rsi_383 = 0x000000000041380E
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x000000000041380E rsi:0x000000000041380F r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:0x0041380E r14:<invalid> r13:<invalid> rcx:<invalid> ax:0x380E r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:0x0041380F ecx:<invalid> sil:0x0F cl:<invalid> al:0x0E r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402E26:
	word64 rdi_386 = Mem318[0x000000000061A610:word64]
	Mem387[rsp_156:word64] = 0x0000000000000000
	fn0000000000410B30(0x00, 0x00000000004137FC, rsi_383, rdi_386, r11)
	exit(0x0000000000000000)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00415BC8 esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402985:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:<invalid> cl:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000404890(word64 rdx, word64 qwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	__libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, DPB(qwArg00, fp + 0x0000000000000004, 0))
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esp r8 r8b r8d r8w rax rdi rsp sp spl
// Preserved: rbp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004048E1:
	word64 rsp_43
	word32 eax_44
	word64 rax_45
	word64 rbp_46
	word64 r8_47
	byte SCZO_48
	byte CZ_49
	byte SZO_50
	byte C_51
	byte Z_52
	word32 edi_53
	word64 rdi_54
	call eax (retsize: 4;)
		uses: C_39,CZ_9,dwLoc04_5,eax,edi,qwLoc04,r8_7,rax_36,rbp_40,rdi_42,rsp_41,SCZO_8,SZO_37,Z_38
		defs: C_51,CZ_49,eax_44,edi_53,r8_47,rax_45,rbp_46,rdi_54,rsp_43,SCZO_48,SZO_50,Z_52
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -4(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx eax ebp ecx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l00000000004049E0:
	word64 r8_103 = Mem0[r14:word64]
	word64 rax_106 = 0x0000000000000000
	word32 eax_211 = 0x00000000
	word64 r9_105 = Mem0[r15:word64]
	word64 r10_104 = 0x0000000000000000
	word64 r11_117 = 0x0000000000000000
	word32 r11d_118 = 0x00000000
	byte r11b_119 = 0x00
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A06:
	byte al_267
	byte SZO_161
	byte al_100
	word32 eax_145
	branch eax_211 == 0x00000002 l0000000000404A59
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A59:
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A50:
	r11d_118 = rax_106 - 0x0000000000000030 + r11_117 * 0x0000000000000008
	r11_117 = DPB(r11_117, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
	r8_103 = r8_103 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A0B:
	branch eax_211 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B20:
	branch eax_211 != 0x00000001 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A11:
	branch eax_211 == 0x00000003 l0000000000404AE0
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AE0:
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	byte cl_383 = (byte) (rax_106 - 0x0000000000000030)
	branch cl_383 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AF0:
	r14 = 0x0000000000000001 << cl_383
	word32 r14d_400 = (word32) r14
	branch (r14d_400 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B78:
	word64 r11_423 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000037 + r11_423
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_423, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	cl_383 = (byte) (rax_106 - 0x0000000000000030) (alias)
	branch cl_383 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B95:
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AD0:
	word64 r11_416 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000057 + r11_416
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_416, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B04:
	branch (r14d_400 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A65:
	Mem350[r9_105:byte] = r11b_119
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B11:
	word64 r11_410 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000030 + r11_410
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_410, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A1A:
	branch eax_211 != 0x00000004 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A22:
	eax_145 = (word32) Mem0[rax_106:byte]
	rax_106 = DPB(rax_106, eax_145, 0) (alias)
	al_267 = (byte) eax_145 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A2E:
	branch al_267 == 0x3F l0000000000404CB0
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CB0:
	Mem329[rcx:byte] = 0x7F
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A70:
	word32 eax_298 = (word32) Mem0[rax_106:byte]
	al_100 = (byte) eax_298 (alias)
	rax_106 = DPB(rax_106, eax_298, 0) (alias)
	SZO_161 = cond(al_100 - 0x3D) (alias)
	branch al_100 == 0x3D l0000000000404ABA
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A78:
	branch SZO_161 l0000000000404B40
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B40:
	branch al_100 == 0x00 l0000000000404B48
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B44:
	branch al_100 != 0x3A l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A7E:
	branch al_100 == 0x5C l0000000000404CA0
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CA0:
	r8_103 = r8_103 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B29:
	word32 eax_200 = (word32) Mem0[rax_106:byte]
	byte al_202 = (byte) eax_200
	branch al_202 >u 0x78 l0000000000404C90
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404C90:
	r11_117 = (uint64) eax_200
	r11d_118 = (word32) r11_117 (alias)
	r11b_119 = (byte) r11_117 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BD0:
	Mem231[r9_105:byte] = r11b_119
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
	rax_106 = 0x0000000000000000
	eax_211 = 0x00000000 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B35:
	rcx = DPB(rcx, (word32) al_202, 0) (alias)
	switch (rcx) { l0000000000404BF0 }
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BF0:
	rax_106 = 0x0000000000000006
	eax_211 = 0x00000006 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:(word32) al r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BB0:
	r8_103 = r8_103 + 0x0000000000000001
	branch eax_211 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A86:
	branch al_100 != 0x5E l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A8E:
	eax_145 = (word32) Mem0[rax_106:byte]
	rax_106 = DPB(rax_106, eax_145, 0) (alias)
	r8_103 = r8_103 + 0x0000000000000001
	al_267 = (byte) eax_145 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A9E:
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AA0:
	word64 rax_149 = (uint64) (eax_145 & 0x0000001F)
	Mem154[rcx:byte] = (byte) rax_149
	word32 eax_155 = (word32) Mem154[rax_149:byte]
	al_100 = (byte) eax_155 (alias)
	r8_103 = r8_103 + 0x0000000000000001
	r10_104 = r10_104 + 0x0000000000000001
	rax_106 = DPB(rax_149, eax_155, 0) (alias)
	r9_105 = r9_105 + 0x0000000000000001
	SZO_161 = cond(al_100 - 0x3D) (alias)
	branch al_100 != 0x3D l0000000000404A78
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B60:
	Mem109[rcx:byte] = al_100
	r8_103 = r8_103 + 0x0000000000000001
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A38:
	Mem76[r15:word64] = r9_105
	Mem77[r14:word64] = r8_103
	Mem78[r13:word64] = r10_104
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:SLICE(rsi, word64, 32) + 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:fp - 0x0000000000000004 rbx:rbx eax:<invalid> ecx:<invalid> rsi:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi



word32 fn0000000000404CD0(word32 edi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word32 eax_33 = 0x00000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	*rsiOut = rsi_10
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (word32) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_42 = cond(rdx_9 - 0x0000000000000002)
	eax_33 = 0x00000001 (alias)
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_46 = 0x0000000000413733
	word64 rcx_48 = 0x0000000000000002
// DataOut: ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_48 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_42 = cond(Mem0[rsi_85:byte] - Mem0[rdi_86:byte]) (alias)
	*rsiOut = rsi_85 + 0x0000000000000001
	rdi_46 = rdi_86 + 0x0000000000000001
	rcx_48 = rcx_48 - 0x0000000000000001
	word64 rsi_85 = rsi_10
	word64 rdi_86 = rdi_46
	branch Mem0[rsi_85:byte] != Mem0[rdi_86:byte] l0000000000404D0A
// DataOut: ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x00000001, Z_42, 0)
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return eax_33
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx r11 rdi rsi
// LiveOut: bpl r12 r13 r13d rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404D20_entry:
	*rsiOut = rsi
// DataOut: dl edx fs r11 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	word64 r13_6 = (uint64) edx
	*r13Out = r13_6
	byte r13b_8 = (byte) r13_6
	word64 r12_13
	*r12Out = rsi
	word64 rbp_17 = rdi
	word64 rsp_24
	word64 rax_25 = fn0000000000410C40(rsi, 0x0000000000000020, out rsp_24)
	word64 rax_27 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: fs r11 r12 r13 r13b r13d r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404D47:
	word64 rsi_78
	word64 rdi_79
	rax_27 = fn0000000000410E30(rsi, out rsp_24, out rbp_17, out rsi_78, out rdi_79)
// DataOut: fs r11 r12 r13 r13b r13d r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D4F:
	Mem37[rax_25 + 0x0000000000000008:word64] = rax_27
	word64 rax_38 = 0x0000000000000000
	branch rbp_17 == 0x0000000000000000 l0000000000404D62
// DataOut: fs r11 r12 r13 r13b r13d r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D5A:
	word64 rbp_70
	word64 rsi_71
	word64 rdi_72
	rax_38 = fn0000000000410E30(rbp_17, out rsp_24, out rbp_70, out rsi_71, out rdi_72)
// DataOut: fs r11 r12 r13 r13b r13d r14d r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D62:
	Mem48[rax_25:word64] = rax_38
	word64 rax_49 = Mem48[0x000000000061B190:word64]
	Mem50[r11 + 0x0000000000000010:byte] = r13b_8
	Mem52[0x000000000061B190:word64] = rax_25
	Mem53[rax_25 + 0x0000000000000018:word64] = rax_49
	word64 rsp_60 = Mem53[rsp_24 + 0x0000000000000018:word64]
	word64 rbp_62
	*rbpOut = Mem53[rsp_60 + 0x0000000000000008:word64]
	return rsp_60 + 0x0000000000000010
// DataOut: bpl fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn0000000000404D20_exit:
// DataOut: bpl r12 r13 r13d rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO di dil edi esp rdi rsp sp spl
// Preserved: rbx
fn0000000000404D90_entry:
// DataOut: fs r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: fs r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DC0:
	return fp + 0x0000000000000004
// DataOut: fs r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l0000000000404DB5:
	freecon(rdi_10)
	return fp + 0x0000000000000004
// DataOut: fs r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

fn0000000000404D90_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx



word64 fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bx di dil eax ebx edi esp rax rbx rdi rsp sp spl
// Preserved: rbx
fn0000000000404DD0_entry:
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rsp_18 = fp - 0x0000000000000004
	word64 rbx_33 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> -4(fp):rbx

l0000000000404DE0:
	rbx_33 = rbx_33 + 0x0000000000000001
	rsp_18 = fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_33 * 0x0000000000000008:word64])
	branch Mem0[0x000000000061B1B0:word64] >u rbx_33 l0000000000404DE0
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

l0000000000404DFD:
	Mem19[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem20[0x000000000061B17C:byte] = 0x00
	Mem21[0x000000000061B178:word32] = 0x00000000
	Mem22[0x000000000061B174:word32] = 0x00000000
	Mem23[0x000000000061B170:word32] = 0x00000000
	Mem24[0x000000000061B168:word32] = 0x00000000
	Mem25[0x000000000061B164:word32] = 0x00000000
	Mem26[0x000000000061B160:word32] = 0x00000000
	Mem27[0x000000000061B16C:word32] = 0x00000000
	Mem28[0x000000000061B15C:word32] = 0x00000000
	Mem29[0x000000000061B158:word32] = 0x00000000
	Mem30[0x000000000061B154:word32] = 0x00000000
	return rsp_18 + 0x0000000000000008
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

fn0000000000404DD0_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx



word64 fn0000000000404E80(word64 rsi, word64 r11, word64 r15, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut: bpl r12 r13 r13d r14 r15 r8 rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404E80_entry:
	*r8Out = r8
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
	*rsiOut = rsi
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rsp_243 = fp - 0x0000000000000010
	word64 rbp_12 = rbx_10
	*rbpOut = rbp_12
	word64 rax_14 = (rbx_10 >>u 0x0000000000000001) + rbx_10
	branch rax_14 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: bpl fs r11 r12 r13 r13d r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	word64 rdi_234 = Mem0[0x000000000061B1A8:word64]
	free(rdi_234)
	r8 = 0x00000000AAAAAAAA
	*r8Out = r8
	branch rbx_10 >u rax_14 l0000000000404FF8
// DataOut: bpl fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
	word64 rsi_249 = Mem0[rsi:word64]
	*rsiOut = rsi_249
	strcmp(Mem0[rdi_234:word64], rsi_249)
	return fp - 0x0000000000000010
// DataOut: bpl fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404FB3:
	word64 rax_244 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018, out rsp_243)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem246[0x000000000061B1A8:word64] = rax_244
	Mem248[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EAB:
	word64 rax_215 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_219 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_221 = rax_215 + rbp_12 * 0x0000000000000008
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EC0:
	Mem225[rax_215:word64] = rdx_219
	rax_215 = rax_215 + 0x0000000000000008
	rdx_219 = rdx_219 + 192
	branch rax_215 != rcx_221 l0000000000404EC0
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EE0:
	word64 rsi_136
	word32 ecx_129
	word64 rdi_124
	branch _setjmp(0x000000000061A680) == 0x00000000 l0000000000404F40
// DataOut: al fs r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404F40:
	ecx_129 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_136 = Mem0[0x000000000061B1B0:word64]
	rdi_124 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> rdx:<invalid> rcx:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EEE:
	r8 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_166 = (word32) r8
	branch r8d_166 == 0x00000003 l0000000000404FDF
// DataOut: fs r11 r15 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> rdx:<invalid> rcx:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EFF:
	rsi_136 = Mem0[0x000000000061B1B0:word64]
	rdi_124 = Mem0[0x000000000061B1A8:word64]
	branch rsi_136 == 0x0000000000000000 l0000000000404F33
// DataOut: edi fs r11 r15 r8d r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F12:
	word64 rdx_186 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_188 = rdi_124 + rsi_136 * 0x0000000000000008
	word64 rax_190 = rdi_124
// DataOut: edi fs r11 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F20:
	Mem196[rax_190:word64] = rdx_186
	rax_190 = rax_190 + 0x0000000000000008
	rdx_186 = rdx_186 + 192
	branch rax_190 != rcx_188 l0000000000404F20
// DataOut: edi fs r11 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F33:
	ecx_129 = (word32) (uint64) r8d_166 (alias)
// DataOut: al ecx edi fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F54:
	branch ecx_129 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F60:
	word64 r8_146 = DPB(r8, (word32) Mem0[0x000000000061B10C:byte], 0)
	*r8Out = r8_146
	word64 r12_157
	word64 r13_158
	word64 r14_159
	word64 r15_160
	word64 rsi_161
	*rsiOut = fn000000000040D690(rsi_136, rdi_124, r8_146, r11, r15, out r12_157, out r13_158, out r14_159, out r15_160)
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F8C:
	word64 rsp_110 = rsp_243 + 0x0000000000000008
	word64 rbp_114
	*rbpOut = Mem0[rsp_110 + 0x0000000000000008:word64]
	return rsp_110 + 0x0000000000000010
// DataOut: bpl fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000404E80_exit:
// DataOut: bpl r12 r13 r13d r14 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> eax:<invalid> rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000405090(byte sil, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut: bpl r13 r13d r15 rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405090_entry:
	*r15Out = r15
// DataOut: fs r11 r15 r8 r9 rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_109 = (word32) sil
	word64 r13_116
	*r13Out = rdi
	word64 rsp_121 = fp - 0x0000000000000020
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: fs r11 r13 r13d r14d r15 r8 r9 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: fs r11 r13 r13d r14d r15 r8 r9 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050B4:
	word64 rbp_275
	word64 rsi_276
	word64 r12_277
	rsp_121 = fn0000000000404D20(0x00000000, rdi, 0x0000000000000000, r11, out rbp_275, out rsi_276, out r12_277, out r13_116)
// DataOut: fs r11 r13 r13d r14d r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050C0:
	word64 rbx_43 = Mem0[0x000000000061B1B0:word64]
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405108:
	branch rbx_43 == 0x0000000000000000 l00000000004051A8
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051A8:
	word64 rdx_208
	word64 rdi_194 = Mem0[0x000000000061B1B0:word64]
	branch rdi_194 == 0x0000000000000000 l00000000004051F7
// DataOut: fs r11 r13 r13d r15 r8 r9 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051F7:
	rdx_208 = 0x0000000000000000
// DataOut: fs r11 r13 r13d r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051B4:
	word64 rsi_231 = Mem0[0x000000000061B1A8:word64]
	rdx_208 = 0x0000000000000000
	word64 rax_236 = 0x0000000000000000
// DataOut: fs r11 r13 r13d r15 r8 r9 rax rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051C0:
	word64 rcx_243 = Mem0[rsi_231 + rax_236 * 0x0000000000000008:word64]
	Mem246[rsi_231 + rdx_208 * 0x0000000000000008:word64] = rcx_243
	rax_236 = rax_236 + 0x0000000000000001
	rdx_208 = rdx_208 + DPB(rcx_243, (word32) (Mem0[rcx_243 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_236 != rdi_194 l00000000004051C0
// DataOut: fs r11 r13 r13d r15 r8 r9 rax rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051E1:
	Mem211[0x000000000061B1B0:word64] = rdx_208
	word64 rsp_218 = Mem211[rsp_121 + 0x0000000000000018:word64]
	word64 rbp_220
	*rbpOut = Mem211[rsp_218 + 0x0000000000000008:word64]
	word64 rsi_222
	*rsiOut = Mem211[rsp_218 + 0x0000000000000010:word64]
	return rsp_218 + 0x0000000000000020
// DataOut: bpl fs r11 r13 r13d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000405090_exit:
// DataOut: bpl r13 r13d r15 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405111:
	word64 rbp_71 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_73 = (word32) (uint64) Mem0[rbp_71 + 0x00000000000000A0:word32]
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040512C:
	word64 rbp_114
	word64 r15_102 = Mem0[r13_116:word64]
	*r15Out = r15_102
	branch r13_116 == 0x0000000000000000 l00000000004050E2
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405135:
	word64 rsi_143
	word64 rax_144 = fn000000000040A390(r15_102, out rsi_143)
	branch Mem0[rax_144:byte] != 0x2E l00000000004050D8
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rax rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405142:
	byte al_186 = (byte) (word32) Mem0[rax_144 + 0x0000000000000001 + (uint64) (Mem0[rax_144 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_186 == 0x2F l0000000000405100
// DataOut: al fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405154:
	branch al_186 == 0x00 l0000000000405100
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405158:
// DataOut: fs r11 r13 r14d r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050D8:
	branch Mem0[r15_102:byte] != 0x2F l0000000000405160
// DataOut: fs r11 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405160:
	word64 rbp_163
	word64 rax_165 = fn000000000040A610(0x0000000000000000, r15_102, r13_116, out rbp_163, out r14d_109)
	word64 rsi_172
	word64 r12_173
	rsp_121 = fn0000000000404D20((word32) (uint64) r14d_109, Mem0[rbp_163 + 0x0000000000000008:word64], rax_165, r11, out rbp_114, out rsi_172, out r12_173, out r13_116)
	free(rax_165)
	word64 r15_167
	*r15Out = rax_165
	branch Mem0[rbp_114 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050E2:
	word64 rsi_135
	word64 r12_136
	rsp_121 = fn0000000000404D20((word32) (uint64) r14d_109, Mem0[rbp_71 + 0x0000000000000008:word64], r15_102, r11, out rbp_114, out rsi_135, out r12_136, out r13_116)
	branch Mem0[rbp_114 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405194:
	rsp_121 = fn0000000000404D90(rbp_114)
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050FE:
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405100:
	rbx_43 = rbx_43 - 0x0000000000000001
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000405200(word64 rsi, word64 rdi, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbx_11 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	word64 rcx_118 = Mem0[0x000000000061B0D8:word64]
	branch rcx_118 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_98 = rbx_11 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rsi /u rcx_118) <=u (uint64) ((uint128) ((uint64) rsi_98) /u rcx_118) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_11 = rsi_98
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_112 = Mem0[0x000000000061A610:word64]
	word64 rax_113 = Mem0[rdi_112 + 0x0000000000000028:word64]
	branch rax_113 >=u Mem0[rdi_112 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	__overflow(rdi_112, 0x0000000000000009)
	rcx_118 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem131[rdi_112 + 0x0000000000000028:word64] = rax_113 + 0x0000000000000001
	Mem132[rax_113:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_11 = rbx_11 + rcx_118 - (uint64) ((uint128) ((uint64) rbx_11) % rcx_118)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_11 = rbx_11 + 0x0000000000000001
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_80 = Mem0[0x000000000061A610:word64]
	word64 rdx_81 = Mem0[rdi_80 + 0x0000000000000028:word64]
	branch rdx_81 >=u Mem0[rdi_80 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	__overflow(rdi_80, 0x0000000000000020)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rsi <=u rbx_11 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem89[rdi_80 + 0x0000000000000028:word64] = rdx_81 + 0x0000000000000001
	Mem90[rdx_81:byte] = 0x20
	branch rsi >u rbx_11 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:rdi -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004052D0(word64 rdx, word32 ebx, word64 rsi, word64 r11, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx fs r11 rdx rsi
// LiveOut: edi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004052D0_entry:
// DataOut: ebx fs r11 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word32 ebp_8 = (word32) (fp - 0x0000000000000004)
	word64 r9_50
	word64 r11_51
	word64 r14_54
	word64 r15_55
	word64 r8_49
	word64 r13_53
	word64 rbp_106
	word64 rsp_107
	word64 rdi_104
	word64 r12_259
	word64 rsi_102
	word64 rax_56 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, ebx, ebp_8, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFBC, rdx, r11, fs, out rsp_107, out rbp_106, out rsi_102, out rdi_104, out r8_49, out r9_50, out r11_51, out r12_259, out r13_53, out r14_54, out r15_55)
	Mem62[rbp_106 + 0xFFFFFFFFFFFFDF98:word64] = rbp_106 + 0xFFFFFFFFFFFFDFC0
	word64 rdx_19 = rsi
	word64 rbx_100 = rax_56
	word32 ebx_58 = (word32) rax_56
	word64 rax_59 = rbp_106 + 0xFFFFFFFFFFFFDFC0
	branch rax_56 >u 0x0000000000001FFF l0000000000405590
// DataOut: ebp ebx esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405590:
	Mem588[rbp_106 + 0xFFFFFFFFFFFFDF98:word64] = rsp_107 - (rax_56 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem590[rbp_106 + 0xFFFFFFFFFFFFDF98:word64] = Mem588[rbp_106 + 0xFFFFFFFFFFFFDF98:word64] & 0xFFFFFFFFFFFFFFF0
	rdx_19 = r14_54
	word64 r9_600
	word64 r11_601
	word64 r14_604
	word64 r15_605
	rax_59 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, r14_54, ebx_58, ebp_8, rax_56 + 0x0000000000000001, Mem590[rbp_106 + 0xFFFFFFFFFFFFDF98:word64], r13_53, r11_51, fs, out rsp_107, out rbp_106, out rsi_102, out rdi_104, out r8_49, out r9_600, out r11_601, out r12_259, out r13_53, out r14_604, out r15_605)
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):fp + 0xFFFFFFFFFFFFDFBC -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405343:
	branch Mem62[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405412:
	word64 rax_300 = DPB(rax_59, __ctype_get_mb_cur_max(), 0)
	branch rax_300 <=u 0x0000000000000001 l00000000004055D1
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055D1:
	word64 r14_530 = Mem62[r13_53 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_530
	word64 r12_531 = r14_530 + rax_56
	branch r14_530 >=u r12_531 l0000000000405602
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055E1:
	word64 rax_552 = __ctype_b_loc()
	word64 rdx_556 = r14_530
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055E9:
	rsi_102 = DPB(rsi_102, (word32) Mem62[rdx_556:byte], 0) (alias)
	branch (Mem62[Mem62[rax_552:word64] + 0x0000000000000001 + rsi_102 * 0x0000000000000002:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055F6:
	Mem578[rdx_556:byte] = 0x3F
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055F9:
	rdx_556 = rdx_556 + 0x0000000000000001
	branch rdx_556 != r12_531 l00000000004055E9
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405602:
	*r12Out = rax_56
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405421:
	word64 r15_303 = Mem62[r13_53 + 0xFFFFFFFFFFFFDF98:word64]
	*r15Out = r15_303
	word64 r13_304 = r15_303 + rax_56
	*r13Out = r13_304
	branch r15_303 >=u r13_304 l0000000000405612
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405612:
	rbx_100 = 0x0000000000000000
	*r12Out = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405435:
	word64 rbx_307 = r15_303
	r12_259 = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405440:
	word32 eax_338 = (word32) Mem62[rdi_104:byte]
	rax_300 = DPB(rax_300, eax_338, 0) (alias)
	byte al_340 = (byte) eax_338
	branch al_340 > 0x3F l0000000000405520
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405520:
	branch al_340 < 0x41 l0000000000405460
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405528:
	branch al_340 <= 0x5F l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040552C:
	branch (byte) (rax_300 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040544C:
	branch al_340 >= 0x25 l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405454:
	branch (byte) (rax_300 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405538:
	Mem503[rbx_307:byte] = al_340
	r15_303 = r15_303 + 0x0000000000000001
	*r15Out = r15_303
	r12_259 = r12_259 + 0x0000000000000001
	*r12Out = r12_259
	rbx_307 = rbx_307 + 0x0000000000000001
	branch r15_303 <u r13_304 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040554F:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405460:
	Mem379[rbp_106 + 0xFFFFFFFFFFFFDFB0:word64] = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r13 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405470:
	rdi_104 = rbp_106 + 0xFFFFFFFFFFFFDFAC
	rax_300 = DPB(rax_300, mbrtowc(rdi_104, r15_303, r13_304 - r15_303, rbp_106 + 0xFFFFFFFFFFFFDFB0), 0) (alias)
	rsi_102 = r15_303
	word64 r14_407 = rax_300
	*r14Out = r14_407
	branch rax_300 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405551:
	Mem490[rbx_307:byte] = 0x3F
	r15_303 = r15_303 + 0x0000000000000001
	*r15Out = r15_303
	r12_259 = r12_259 + 0x0000000000000001
	*r12Out = r12_259
	rbx_307 = rbx_307 + 0x0000000000000001
	branch r15_303 <u r13_304 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405569:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405499:
	branch rax_300 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040556B:
	Mem482[rbx_307:byte] = 0x3F
	r15_303 = r13_304
	*r15Out = r15_303
	r12_259 = r12_259 + 0x0000000000000001
	*r12Out = r12_259
	rbx_307 = rbx_307 + 0x0000000000000001
	branch r13_304 <u r13_304 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405582:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054A3:
	word64 rdi_410 = (uint64) Mem379[rbp_106 + 0xFFFFFFFFFFFFDFAC:word32]
	branch rax_300 != 0x0000000000000000 l00000000004054B5
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054B1_1:
	*r14Out = 0x0000000000000001
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> eax:0x00000001 r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054B5:
	word32 eax_417 = wcwidth(rdi_410)
	rax_300 = DPB(0x0000000000000001, eax_417, 0) (alias)
	byte al_419 = (byte) eax_417
	branch eax_417 < 0x00000000 l0000000000405510
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> eax:0x00000001 r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405510:
	Mem473[rbx_307:byte] = 0x3F
	*r15Out = r15_303 + r14_407
	*r12Out = r12_259 + 0x0000000000000001
	rbx_307 = rbx_307 + 0x0000000000000001
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054BE:
	rsi_102 = r15_303 + r14_407
	word64 rdx_450 = rbx_307
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054C8:
	rdx_450 = rdx_450 + 0x0000000000000001
	Mem465[rdx_450 - 0x0000000000000001:byte] = (byte) (word32) Mem379[rdi_410 - 0x0000000000000001:byte]
	r15_303 = r15_303 + 0x0000000000000001
	*r15Out = r15_303
	branch r15_303 != rsi_102 l00000000004054C8
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054DD:
	rax_300 = DPB(rax_300, (int16) al_419, 0) (alias)
	rbx_307 = rbx_307 + r14_407
	*r12Out = r12_259 + rax_300
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054E5:
	rdi_104 = rbp_106 + 0xFFFFFFFFFFFFDFB0
	branch mbsinit(rdi_104) == 0x00000000 l0000000000405470
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054F9:
	branch r15_303 <u r13_304 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405502:
	rbx_100 = rbx_307 - Mem62[rbp_106 + 0xFFFFFFFFFFFFDF98:word64]
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405350:
	branch Mem62[rbp_106 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l0000000000405379
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040535A:
	branch DPB(rax_59, __ctype_get_mb_cur_max(), 0) <=u 0x0000000000000001 l00000000004053CD
// DataOut: ebp esp fs r11 r11d r13 r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053CD:
	word64 r14_261 = Mem62[r13_53 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_261
	word64 r13_262 = r14_261 + rax_56
	*r13Out = r13_262
	branch r14_261 >=u r13_262 l000000000040560A
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040560A:
	*r12Out = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053E1:
	r12_259 = 0x0000000000000000
	word64 rcx_270 = Mem62[__ctype_b_loc():word64]
	word64 rax_273 = r14_261
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053F0:
	rdx_19 = DPB(rdx_19, (word32) Mem62[rax_273:byte], 0) (alias)
	r12_259 = r12_259 - 0xFF - (((word16) ((word32) Mem62[rcx_270 + rdx_19 * 0x0000000000000002:word16]) & 0x4000) <u 0x0001)
	*r12Out = r12_259
	rax_273 = rax_273 + 0x0000000000000001
	branch rax_273 != r13_262 l00000000004053F0
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040540D:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405365:
	word32 ebx_249
	word64 r12_254
	word64 r13_255
	word64 r14_256
	word64 r15_257
	*r12Out = (int64) fn000000000040D240(0x00000000, rax_56, Mem62[rbp_106 + 0xFFFFFFFFFFFFDF98:word64], fs, out ebx_249, out rsp_107, out rbp_106, out rsi_102, out rdi_104, out r12_254, out r13_255, out r14_256, out r15_257)
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405379:
	word64 rcx_108 = Mem62[rbp_106 + 0xFFFFFFFFFFFFDF88:word64]
	branch rcx_108 == 0x0000000000000000 l0000000000405399
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405385:
	rdi_104 = Mem62[rbp_106 + 0xFFFFFFFFFFFFDF98:word64]
	fwrite_unlocked(rdi_104, 0x0000000000000001, rbx_100, rcx_108)
	rsi_102 = 0x0000000000000001
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405399:
	branch Mem62[rbp_106 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053A5:
	Mem220[r8_49:word64] = r12_259
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053A8:
	word64 rbx_129 = Mem62[rbp_106 - 0x0000000000000038:word64] ^ Mem62[fs:0x00000028:word64]
	branch rbx_129 != 0x0000000000000000 l000000000040561C
// DataOut: ebp ebx esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040561C:
	__stack_chk_fail()
	word64 rsp_182 = rsp_107 - 0x0000000000000004
	Mem183[rsp_182:word32] = rsp_107
	Mem185[rsp_182 - 0x0000000000000004:word32] = rbp_106
	Mem187[rsp_182 - 0x0000000000000008:word32] = rbx_129
	word64 rax_188 = Mem187[rsi_102 + 0x0000000000000018:word64]
	word64 rbp_192 = Mem187[rsi_102 + 0x0000000000000010:word64]
	word64 r12_197 = (uint64) ((word32) (rax_188 - rbp_192) >>u 0x00000003)
	*r12Out = r12_197
	branch r12_197 == 0x0000000000000000 l00000000004056DB
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_211
	word64 rsp_212
	word64 rbp_213
	word64 rsi_214
	word32 edi_215
	return fn000000000040564F(rax_188, rbp_192, rsi_102, rdi_104, r12_197, out rbx_211, out rsp_212, out rbp_213, out rsi_214, out edi_215)
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_202
	word64 rsp_203
	word64 rbp_204
	word64 rsi_205
	word32 edi_206
	return fn000000000040564F(rax_188, rbp_192, rsi_102, rdi_104, r12_197, out rbx_202, out rsp_203, out rbp_204, out rsi_205, out edi_206)
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053BE:
	word64 rsp_164 = rbp_106 - 0x0000000000000028
	word64 rsp_168 = Mem62[rsp_164 + 0x0000000000000008:word64]
	word64 rbx_165
	*rbxOut = Mem62[rsp_164:word64]
	word64 rsi_172
	*rsiOut = Mem62[rsp_168 + 0x0000000000000010:word64]
	word32 edi_176
	*ediOut = (word32) Mem62[rsp_168 + 0x0000000000000018:word64]
	word64 rbp_178
	*rbpOut = Mem62[rsp_168 + 0x0000000000000020:word64]
	word64 rsp_180
	*rspOut = rsp_168 + 0x0000000000000028
	return rbx_100
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn00000000004052D0_exit:
// DataOut: edi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp



void fn0000000000405630(word64 rsi, word64 rdi, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn0000000000405630_entry:
// DataOut: r13 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_14 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_18 = (uint64) ((word32) (rax_13 - rbp_14) >>u 0x00000003)
	branch r12_18 == 0x0000000000000000 l00000000004056DB_in_fn0000000000405630
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056DB_in_fn0000000000405630:
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_30
	word64 rsp_31
	word64 rbp_32
	word64 rsi_33
	word32 edi_34
	fn000000000040564F(rax_13, rbp_14, rsi, rdi, r12_18, out rbx_30, out rsp_31, out rbp_32, out rsi_33, out edi_34)
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040564F(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r12, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r12 rax rbp rdi rsi
// LiveOut: edi rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040564F_entry:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040564F:
	branch rax == rbp l00000000004056E6
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004056E6:
	Mem89[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3

l0000000000405658:
	word64 rcx_10 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word64 rcx_15 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_20 = (int64) (word32) (uint64) ~(word32) (uint64) (word32) rcx_10 & rax + rcx_10
	word64 rax_21 = Mem0[rsi + 0x0000000000000008:word64]
	Mem23[rsi + 0x0000000000000018:word64] = rdx_20
	branch rdx_20 - rax_21 > rcx_15 - rax_21 l00000000004056E0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3

l00000000004056E0:
	Mem87[rsi + 0x0000000000000018:word64] = rcx_15
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l0000000000405683:
	Mem33[rsi + 0x0000000000000010:word64] = Mem23[rsi + 0x0000000000000018:word64]
	fputs_unlocked(rdi, Mem33[0x000000000061A610:word64])
	word64 rbx_29 = 0x0000000000000000
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l00000000004056A0:
	__printf_chk(0x0000000000000001, 0x0000000000413759)
	word64 rsi_40
	*rsiOut = 0x0000000000413759
	rbx_29 = rbx_29 + 0x0000000000000001
	branch r12 >u rbx_29 l00000000004056A0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:0x0000000000000001

l00000000004056BF:
	word64 rdi_48 = Mem33[0x000000000061A610:word64]
	word32 edi_49
	*ediOut = (word32) rdi_48
	word64 rax_50 = Mem33[rdi_48 + 0x0000000000000028:word64]
	branch rax_50 >=u Mem33[rdi_48 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:0x0000000000000001

l00000000004056EF:
	word64 rbx_77
	*rbxOut = Mem33[v3:word64]
	word64 rbp_80
	*rbpOut = Mem33[v3 + 0x0000000000000008:word64]
	word64 rsp_83
	*rspOut = Mem33[v3 + 0x0000000000000010:word64] + 0x0000000000000008
	word64 rsi_84
	*rsiOut = 0x000000000000000A
	return DPB(rax_50, __overflow(rdi_48, 0x000000000000000A), 0)
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

l00000000004056D0:
	Mem68[rdi_48 + 0x0000000000000028:word64] = rax_50 + 0x0000000000000001
	Mem69[rax_50:byte] = 0x0A
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

l00000000004056DB:
	word64 rbx_70
	*rbxOut = Mem69[v3:word64]
	word64 rbp_73
	*rbpOut = Mem69[v3 + 0x0000000000000008:word64]
	word64 rsp_76
	*rspOut = Mem69[v3 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_50
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

fn000000000040564F_exit:
// DataOut: edi rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rbp:<invalid>



word64 fn0000000000405700(word32 edx, word64 rdi, selector fs, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi
// LiveOut: r12 r13d r14 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405700_entry:
	*r13dOut = r13d
	*r12Out = r12
	*r14Out = r14
// DataOut: edx fs r11 r11d r12 r13d r14 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_116
	word32 ebx_12 = (word32) (uint64) edx
	word64 rsp_13 = fp - 0x0000000000000010
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405780:
	__printf_chk(0x0000000000000001, 0x000000000041375E)
	rbp_116 = (int64) ebx_12
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405710:
	word32 ebx_56
	word64 rbp_58
	word64 rsi_59
	word64 r12_60
	word64 r13_61
	word64 r14_62
	word64 r15_63
	word32 eax_64 = fn000000000040D420(0x00000000, rdi, fs, qwLoc18, out ebx_56, out rsp_13, out rbp_58, out rsi_59, out r12_60, out r13_61, out r14_62, out r15_63)
	word64 rsi_65 = Mem0[0x000000000061A610:word64]
	word32 ebx_106 = (word32) (uint64) (ebx_56 - eax_64)
	branch ebx_106 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405725_1:
	ebx_106 = 0x00000000
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 eax:0x00000000 rdx:<invalid> rdi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405728:
	fputs_unlocked(rbp_58, rsi_65)
	rbp_116 = (int64) ebx_106 + (uint64) strlen(rbp_58)
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> eax:0x00000000 rdx:<invalid> rdi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405740:
	word64 rdi_89 = Mem0[0x000000000061A610:word64]
	word64 rcx_91 = Mem0[rdi_89 + 0x0000000000000028:word64]
	branch rcx_91 >=u Mem0[rdi_89 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405799:
	__overflow(rdi_89, 0x0000000000000020)
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405751:
	Mem102[rdi_89 + 0x0000000000000028:word64] = rcx_91 + 0x0000000000000001
	Mem103[rcx_91:byte] = 0x20
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040575C:
	ebx_106 = (word32) (uint64) (ebx_106 - 0x00000001) (alias)
	branch ebx_106 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405764:
	Mem38[0x000000000061B018:word64] = rbp_116 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	word64 rsp_39 = rsp_13 + 0x0000000000000008
	word64 rbp_43
	*rbpOut = Mem38[rsp_39 + 0x0000000000000008:word64]
	return rsp_39 + 0x0000000000000010
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405700_exit:
// DataOut: r12 r13d r14 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r12 r8 rsi
// LiveOut: r12 r13d r14 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r11d r12 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_20 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004057C0:
	rax_20 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:0x0000000000413764 rbx:(uint64) edi -4(fp):rbx

l00000000004057E0:
	word64 rsp_54
	word64 rbp_55
	word64 r12_56
	rax_20 = fn000000000040C9B0(rsi, edi, r8, r12, out rsp_54, out rbp_55, out r12_56)
	esi = (word32) (uint64) Mem0[rsp_54 + 0x000000000000000C:word32] (alias)
// DataOut: esi fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:<invalid> rbx:(uint64) edi -4(fp):rbx

l00000000004057CB:
	word32 edx_30 = (word32) (uint64) esi
// DataOut: edx fs r11 r11d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> -8(fp):esi -4(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	word64 rbp_38
	word64 r12_39
	word32 r13d_40
	word64 r14_41
	return fn0000000000405700(edx_30, rax_20, fs, out rbp_38, out r12_39, out r13d_40, out r14_41)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:(uint64) esi rsi:<invalid> rdi:<invalid> rbp:<invalid> r12:<invalid> eax:<invalid> -8(fp):esi -4(fp):rbx

fn00000000004057B0_exit:
// DataOut: r12 r13d r14 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> eax:<invalid> ebx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> -8(fp):esi -4(fp):rbx



word64 fn0000000000405810(word64 rdx, word32 edi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rdx
// LiveOut: bpl ebp r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405810_entry:
// DataOut: edi fs r11 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word64 rsp_21
	word64 rbp_22
	word64 r8_23
	word64 r9_24
	word64 r11_25
	word64 r12_26
	word64 r13_27
	word64 r14_28
	word64 r15_29
	word64 rbx_30 = fn000000000040EAB0(rdx, r11, fs, out rsp_21, out rbp_22, out r8_23, out r9_24, out r11_25, out r12_26, out r13_27, out r14_28, out r15_29)
	word64 rsi_35 = (uint64) Mem0[__errno_location():word32]
	*rsiOut = rsi_35
	error(0x0000000000000000, rsi_35, rbx_30, Mem0[rsp_21 + -8:<unknown>])
	word64 rdi_37
	*rdiOut = 0x0000000000000000
	branch (byte) (uint64) edi == 0x00 l0000000000405850
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	branch (word32) (uint64) Mem0[0x000000000061B030:word32] != 0x00000000 l000000000040584A
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040585A:
	word64 rbp_83
	*rbpOut = Mem0[rsp_21 + 0x0000000000000008:word64]
	Mem85[0x000000000061B030:word32] = 0x00000001
	return Mem85[rsp_21 + 0x0000000000000010:word64] + 0x0000000000000008
// DataOut: bpl ebp fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405840:
	Mem74[0x000000000061B030:word32] = 0x00000002
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040584A:
	word64 rbp_70
	*rbpOut = Mem0[rsp_21 + 0x0000000000000008:word64]
	return Mem0[rsp_21 + 0x0000000000000010:word64] + 0x0000000000000008
// DataOut: bpl ebp fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405810_exit:
// DataOut: bpl ebp r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_129
	word32 eax_107
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_107 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_129 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C25:
	word32 eax_102 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_102 != 0x00008000 l0000000000405CA0
// DataOut: dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_129 = eax_102 == 0x00004000
// DataOut: cl dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C55:
	eax_107 = 0x0000002F (alias)
	branch cl_129 != 0x00 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C6B:
	word32 eax_53
	branch dil == 0x00 l0000000000405CC0
// DataOut: edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CC0:
	eax_107 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CCE:
	eax_107 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid>

l0000000000405CDC:
	eax_53 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid>

l0000000000405C70:
	word64 rsi_61 = (uint64) (esi & 0x0000F000)
	*rsiOut = rsi_61
	word32 esi_62 = (word32) rsi_61
	eax_107 = 0x00000040 (alias)
	branch esi_62 == 0x0000A000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C83:
	eax_107 = 0x0000007C (alias)
	branch esi_62 == 0x00001000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid> rsi:<invalid>

l0000000000405C90:
	eax_53 = DPB(0x0000007C, esi_62 == 0x0000C000, 0) (alias)
// DataOut: eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid> rsi:<invalid>

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_53 & 0x0000003D)
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid> rsi:<invalid>

l0000000000405C33:
	eax_107 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405CB0:
	word64 rsi_114 = (uint64) (esi & 0x00000049)
	*rsiOut = rsi_114
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - cond((word32) rsi_114 - 0x00000001)) & 0x0000002A)
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C3E:
	return eax_107
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> rsi:<invalid>

fn0000000000405C20_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid>



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rdi rsi rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 edi_6 = (word32) dil
	word64 rsi_12
	word32 eax_13 = fn0000000000405C20(edx, esi, (byte) edi_6, out rsi_12)
	word64 rdi_8
	*rdiOut = DPB(rdi, edi_6, 0)
	byte bl_20 = (byte) (uint64) eax_13
	branch (byte) eax_13 == 0x00 l0000000000405D33
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D10:
	word64 rdi_46 = Mem0[0x000000000061A610:word64]
	*rdiOut = rdi_46
	word64 rax_49 = Mem0[rdi_46 + 0x0000000000000028:word64]
	branch rax_49 >=u Mem0[rdi_46 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D3A:
	word64 rsi_65 = DPB(rsi_12, (word32) bl_20, 0)
	*rsiOut = rsi_65
	__overflow(rdi_46, rsi_65)
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D21:
	Mem62[rdi_46 + 0x0000000000000028:word64] = rax_49 + 0x0000000000000001
	Mem63[rax_49:byte] = bl_20
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D2B:
	Mem59[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D33:
	word64 rsp_41
	*rspOut = fp + 0x0000000000000004
	return bl_20 != 0x00
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -4(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D50_entry:
	*r12bOut = r12b
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rbp_194 = rdi
	word64 rbx_10 = 0x0000000000000000
	word32 ebx_11 = 0x00000000
	word64 rax_17 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: ebx fs r11 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 r14_239
	word64 rax_240 = fn000000000040CD70(fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000018:word64], out r14_239)
	rax_17 = DPB(rax_240, strlen(rax_240), 0) (alias)
	rbx_10 = rax_17 + 0x0000000000000001
	ebx_11 = (word32) (rax_17 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	word64 rbx_233 = (int64) Mem0[0x000000000061B178:word32]
	rbx_10 = rbx_233 + 0x0000000000000001
	ebx_11 = (word32) (rbx_233 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_17 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 rsp_215
	word64 r8_217
	word64 r9_218
	word64 r13_220
	word32 r14d_221
	word64 r15_222
	word64 rax_223 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_215, out rbp_194, out r8_217, out r9_218, out r11, out r13_220, out r14d_221, out r15_222)
	rax_17 = DPB(rax_223, strlen(rax_223), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:0x00000002 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DA8:
	rax_17 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB3:
	rbx_10 = rbx_10 + rax_17
	ebx_11 = (word32) rbx_10 (alias)
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DBF:
	word64 rax_159
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E40:
	rax_159 = DPB(rax_17, strlen(Mem0[rbp_194 + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DC8:
	rax_159 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD3:
	ebx_11 = (word32) (rbx_10 + rax_159) (alias)
// DataOut: ebx fs r11 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD6:
	word64 rbx_74
	word64 rsp_75
	word64 rbp_76
	word64 r8_79
	word64 r9_80
	word64 r11_81
	word64 r12_82
	word64 r13_83
	word64 r14_84
	word64 r15_85
	word32 edi_138
	word64 rsi_145
	fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_11, Mem0[rbp_194:word64], r11, fs, out rbx_74, out rsp_75, out rbp_76, out rsi_145, out edi_138, out r8_79, out r9_80, out r11_81, out r12_82, out r13_83, out r14_84, out r15_85)
	word64 rax_87 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_102 = rbx_74 + Mem0[rsp_75 + 0x0000000000000008:word64]
	branch (word32) rax_87 == 0x00000000 l0000000000405E1C
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DFC:
	edi_138 = (word32) Mem0[rbp_76 + 0x00000000000000B0:byte]
	rbx_102 = rbx_102 + DPB(rax_87, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rbp_76 + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rbp_76 + 0x0000000000000028:word32]), (byte) edi_138, out rsi_145) != 0x00), 0)
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ecx:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E1C:
	branch (Mem0[rsp_75 + 0x00000000000002A8:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
// DataOut: edi fs r11 r11d r14 r14d r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EC4_thunk_fn0000000000405ED0:
	word64 rsp_131
	word64 rbp_132
	word64 r9_133
	byte r12b_134
	return fn0000000000405ED0(rbp_76, rsi_145, edi_138, r8_79, r11_81, r14_84, fs, out rsp_131, out rbp_132, out r9_133, out r12b_134)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E36:
	word64 rbp_128
	*rbpOut = Mem0[rsp_75 + 0x00000000000002C0:word64]
	word64 rsp_129
	*rspOut = rsp_75 + 0x00000000000002C8
	return rbx_102
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r12:<invalid> r8:<invalid> cl:<invalid> edx:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> dl:<invalid> r9:<invalid> sil:<invalid> r15:<invalid> r10:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000405ED0(word64 rbp, word64 rsi, word32 edi, word64 r8, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r11d r14 r14d r8 rbp rsi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405ED0_entry:
	*r9Out = r9
// DataOut: edi fs r11 r11d r14 r14d r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 r12_21 = (uint64) edi
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	byte r12b_23
	*r12bOut = (byte) r12_21
	word64 rsp_117 = fp - 0x0000000000000014
	word64 rbx_124 = rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405EEF_1:
	rbx_124 = rax_8
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405EF3:
	word64 rsi_326
	word64 rax_321
	word64 r8_316
	branch rbx_124 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060C8:
	rax_321 = 0x0000000000000000
	r8_316 = rdx_6
	rsi_326 = Mem0[0x000000000061B028:word64]
	branch rbx_124 == 0x0000000000000000 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060DD:
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F00:
	word64 rdi_355 = Mem0[0x000000000061B028:word64]
	word32 edi_356 = (word32) rdi_355
	branch rbx_124 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406170:
	r8 = 0x0000000055555555
	branch rbx_124 >u rax_8 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040617F:
	rbp = rbx_124 * 0x0000000000000002
	word64 rsp_499
	Mem502[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp + rbx_124 << 0x0000000000000004, rdi_355, out rsp_499, out r8)
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r8:0x0000000055555555 -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F16:
	branch rax_8 >u rax_8 >>u 0x0000000000000001 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F29:
	word64 rsp_484
	word64 rax_486 = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rax_8 * 0x0000000000000018, rdi_355, out rsp_484, out r8)
	rbp = Mem0[0x000000000061B020:word64]
	Mem489[0x000000000061B028:word64] = rax_486
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:0x00000000AAAAAAAA -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F44:
	word64 rax_398 = Mem0[0x000000000061A660:word64]
	word64 rdi_401 = rbp - rax_398
	rsi = rbp + 0x0000000000000001 + rax_398
	edi_356 = (word32) rdi_401 (alias)
	word64 rcx_404 = rsi *s rdi_401
	branch rbp >u rsi l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F66:
	word64 rax_414 = (uint64) ((uint128) (uint64) rcx_404 /u rdi_401)
	branch rsi != rax_414 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F77:
	r8 = 0x00000000FFFFFFFF
	branch rcx_404 >>u 0x0000000000000001 >u rax_414 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040619D:
	fn0000000000410E50()
// DataOut: edi fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word64 rsp_380
	word64 rbp_381
	word64 rsi_382
	word64 r8_383
	word64 r9_384
	word64 r12_385
	word64 r14_386
	word64 r15_387
	return fn00000000004061B0(rbx_124, rbp, rsi, edi_356, r8, r11d, r12_21, r14, fs, out rsp_380, out rbp_381, out rsi_382, out r8_383, out r9_384, out r12_385, out r14_386, out r15_387)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F8D:
	word64 rax_427 = fn0000000000410C40(rsi, (rcx_404 >>u 0x0000000000000001) * 0x0000000000000008, out rsp_117)
	word64 rcx_431 = Mem0[0x000000000061A660:word64]
	branch rbp <=u rcx_431 l0000000000405FE4
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FA6:
	word64 rsi_451 = Mem0[0x000000000061B028:word64]
	word64 rcx_454 = rcx_431 * 0x0000000000000008 + 0x00000008
	word64 rdx_456 = rsi_451 + (rcx_431 * 0x0000000000000003) * 0x0000000000000008 + 0x0000000000000010
	word64 rsi_459 = rsi_451 + (rbp * 0x0000000000000003) * 0x0000000000000008
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FD0:
	Mem463[rdx_456 + 0x0000000000000000:word64] = rax_427
	rdx_456 = rdx_456 + 0x0000000000000018
	rax_427 = rax_427 + rcx_454
	rcx_454 = rcx_454 + 0x0000000000000008
	branch rdx_456 != rsi_459 l0000000000405FD0
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FE4:
	Mem448[0x000000000061A660:word64] = rbp
	rax_321 = 0x0000000000000000
	r8_316 = Mem448[0x000000000061B1B0:word64]
	rsi_326 = Mem448[0x000000000061B028:word64]
	branch rbx_124 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060E0:
	word64 rcx_330 = Mem0[rsi_326 + 0x0000000000000010:word64]
	Mem332[rsi_326:byte] = 0x01
	word64 rdi_328 = rax_321 + 0x0000000000000001
	Mem334[rsi_326 + 0x0000000000000008:word64] = rdi_328 * 0x0000000000000003
	word64 rdx_335 = 0x0000000000000000
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060F8:
	Mem341[rcx_330 + rdx_335 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_335 = rdx_335 + 0x0000000000000001
	branch rdx_335 <=u rax_321 l00000000004060F8
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406109:
	rsi_326 = rsi_326 + 0x0000000000000018
	branch rdi_328 == rbx_124 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406116:
	rax_321 = rdi_328
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406004:
	word64 rbp_183 = 0x0000000000000000
	branch r8_316 == 0x0000000000000000 l000000000040612D
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040600F:
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406010:
	word64 rbp_190
	byte r12b_192
	word64 r9_191
	word64 rax_193 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_183 * 0x0000000000000008:word64], r11, fs, out rsp_117, out rbp_190, out r9_191, out r12b_192)
	r11 = rax_193
	word64 r14_199 = Mem0[0x000000000061B1B0:word64]
	branch rbx_124 == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406033:
	word64 r13_222 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_223 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	word64 rcx_224 = 0x0000000000000001
	rsi_241 = rsi_223
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r13:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060A7:
	word64 rsi_241
	r9_191 = r9_191 - 0x0000000000000001
	*r9Out = r9_191
	branch Mem0[rsi_241:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060B3:
	word64 r10_267
	branch r12b_192 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406050:
	r10_267 = (uint64) ((uint128) (uint64) rbp_190 /u (uint64) ((uint128) ((uint64) ((rsi_223 - 0x0000000000000001) + rcx_514)) /u rcx_514))
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060B8:
	r10_267 = (uint64) ((uint128) (uint64) rbp_190 % rcx_514)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040606A:
	word64 rdx_273 = rax_193 + (uint64) (r9_191 != r10_267) * 0x0000000000000002
	word64 rax_276 = Mem0[rsi_241 + 0x0000000000000000:word64] + r10_267 * 0x0000000000000008
	r9_191 = Mem0[rcx_514:word64]
	*r9Out = r9_191
	branch rdx_273 <=u r9_191 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406086:
	Mem286[r14_199 + 0x0000000000000008:word64] = Mem0[r14_199 + 0x0000000000000008:word64] + (rdx_273 - r9_191)
	Mem287[rax_276:word64] = rdx_273
	Mem290[rsi_241:byte] = Mem287[r14_199 + 0x0000000000000008:word64] <u r13_222
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040609A:
	rsi_241 = rsi_241 + 0x0000000000000018
	rcx_224 = rcx_514 + 0x0000000000000001
	word64 rcx_514 = rcx_224
	branch rbx_124 <=u rcx_514 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406120:
	rbp_183 = rbp_190 + 0x0000000000000001
	branch rbp_190 + 0x0000000000000001 <u r14_199 l0000000000406010
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040612D:
	branch rbx_124 <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r12b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406133:
	word64 rdx_141 = Mem0[0x000000000061B028:word64]
	word64 rax_143 = rbx_124 * 0x0000000000000003
	branch Mem0[rdx_141 - 0x0000000000000018 + (rax_143 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406149:
	word64 rax_150 = (rax_143 << 0x0000000000000003) + rdx_141
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040615A:
	rbx_124 = rbx_124 - 0x0000000000000001
	branch rbx_124 != 0x0000000000000001 l0000000000406150
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406150:
	rax_150 = rax_150 - 0x0000000000000018
	branch Mem0[rax_150 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406164:
	word64 rsp_133 = Mem0[rsp_117 + 0x0000000000000010:word64]
	word64 rbp_135
	*rbpOut = Mem0[rsp_133 + 0x0000000000000008:word64]
	word64 rsp_139
	*rspOut = rsp_133 + 0x0000000000000018
	return rbx_124
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000405ED0_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> edx:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r13:<invalid> r10:<invalid> ecx:<invalid> r15:<invalid> dx:<invalid> esi:<invalid> r9d:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn00000000004061B0(word64 rbx, word64 rbp, word64 rsi, word32 edi, word64 r8, word32 r11d, word64 r12, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11d r12 r14 r14d r8 rbp rbx rsi
// LiveOut: eax r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004061B0_entry:
// DataOut: edi fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = (uint64) edi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	rsp = fp - 0x0000000000000030
	rax = Mem0[fs:0x00000028:word64]
	qwLoc18 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8, r12, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rbp:(uint64) edi rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406259:
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	eax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> rbx:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406264_1:
	edx = eax
// DataOut: ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406267:
// DataOut: ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061D1:
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = rsp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rbx = rsp
	rax = rsp
// DataOut: ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> rbx:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebp ebx ecx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040621D_1:
	rax = rcx
// DataOut: dl eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406269:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	rdx = (uint64) (edx | esi)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062CC:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: ebp ebx esi fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v31 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v31
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	eax = strcmp(rdi, rsi)
	r13 = (uint64) eax
	rax = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: eax fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A806:
	eax = (word32) dl
	rsi = 0x000000000000002E
	rsi = (uint64) (esi - eax)
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax esi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A81D:
	eax = (word32) cl
	rdi = 0x000000000000002E
	rdi = (uint64) (edi - eax)
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	rax = 0x0000000000000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl eax edi esi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax edi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: eax fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAD6:
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x00000000FFFFFFFF rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbx:<invalid> eax:0xFFFFFFFF r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d, out r9)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d, out r9)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB02:
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	eax = strncmp(rdi, rsi, rdx)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8BB:
	rcx = 0x0000000000000000
	r8 = 0x0000000000000000
	SZO = cond(r8d)
	C = false
	rbx = 0x00000000FFFFFFFF
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8CF:
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A97A:
	esi = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	eax = (int32) sil
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8E7:
	eax = (int32) r9b
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D4:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9DE:
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9F0:
	eax = (int32) dl
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AADB:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:(int32) r9b r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA03:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:(int32) r9b r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA0B:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA22:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA26:
	eax = (int32) dl
	rax = (uint64) (eax - r9d)
	SCZO = cond(eax)
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	esi = (int32) dl
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rax = 0x0000000000000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	rdx = (uint64) (edx - 0x00000030)
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAE7:
	rax = 0x00000000FFFFFFFF
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA5D:
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB18:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A900:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A98F:
	rdx = (uint64) esi
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A905:
	esi = (word32) dl
	rax = 0x0000000000000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A912:
	rax = (uint64) esi
	rax = (uint64) (eax & 0xFFFFFFDF)
	rax = (uint64) (eax - 0x00000041)
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA68:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(dl - 0x7E)
	rax = (uint64) esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA73_1:
	eax = r11d
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA77:
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A923:
	rax = (uint64) esi
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB1F:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A934:
	esi = (word32) r9b
	rdi = 0x0000000000000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A942:
	rdx = (uint64) esi
	rdi = (uint64) esi
	rdx = (uint64) (edx & 0xFFFFFFDF)
	rdx = (uint64) (edx - 0x00000041)
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A951:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(r9b - 0x7E)
	rdi = (uint64) esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA80:
	rax = (uint64) (eax - edi)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: eax fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA82_1:
	eax = r13d
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA86:
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB10:
	rax = (uint64) r13d
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A834:
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> eax:0x00000001 r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> ecx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062AE:
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) eax:0x00000001 rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn00000000004061B0_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r12 (=> r12Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13:<invalid> ecx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A410)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid>

l000000000040640A:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A400)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid>



void fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem18[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
	fwrite_unlocked(Mem0[rdi + 0x0000000000000008:word64], Mem0[rdi:word64], 0x0000000000000001, Mem0[0x000000000061A610:word64])
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 rdi:<invalid> eax:<invalid> -16(fp):rdi



word64 fn0000000000406490(ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsi rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406490_entry:
	*rsiOut = rsi
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF7C rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	branch (word32) (uint64) Mem0[0x000000000061B034:word32] == 0x00000000 l0000000000406538
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF7C rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return fp + 0x0000000000000004
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF7C rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -4(fp):rbx

fn0000000000406490_exit:
// DataOut: rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:<invalid> rbx:rbx rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF7C rcx:<invalid> rdx:<invalid> eax:<invalid> -4(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF7C rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF7C rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	fflush_unlocked(Mem0[0x000000000061A610:word64])
	sigprocmask(0x0000000000000000, 0x000000000061B040, fp + 0xFFFFFFFFFFFFFF7C)
	word32 ebx_40 = (word32) (uint64) Mem0[0x000000000061B038:word32]
	word32 eax_42 = (word32) (uint64) Mem0[0x000000000061B034:word32]
	branch eax_42 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_40, 0x0000000000000000)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:0x000000000061B040 rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem65[0x000000000061B034:word32] = (word32) (uint64) (eax_42 - 0x00000001)
	ebx_40 = 0x00000013 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:0x000000000061B040 rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	raise((uint64) ebx_40)
	sigprocmask(0x0000000000000002, fp + 0xFFFFFFFFFFFFFF7C, 0x0000000000000000)
	word64 rsi_56
	*rsiOut = fp + 0xFFFFFFFFFFFFFF7C
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rcx rdi rdx sil
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rax
fn0000000000406540_entry:
// DataOut: fs r11 r14d r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	byte r15b_325
	word32 r15d_324
	word32 edx_307
	word32 r14d_326
	word64 rbp_275
	word32 ebx_25 = (word32) rdx
	word64 rdx_32 = Mem0[rdi:word64]
	word64 r12_263 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: ebx fs r11 r12 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069D8:
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A08:
	r14d = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A20:
	r14d = 0x00000000 (alias)
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A10:
	word64 r15_735 = (uint64) Mem0[rcx + 0x0000000000000028:word32]
	r15d_324 = (word32) r15_735 (alias)
	r15b_325 = (byte) r15_735 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069EA:
	word64 r15_740 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r15d_324 = (word32) r15_740 (alias)
	r15b_325 = (byte) r15_740 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069F7:
	word64 r14_722 = (uint64) (r14d ^ 0x00000001)
	r14d_326 = (word32) r14_722 (alias)
	r14b = (byte) r14_722 (alias)
	r12_263 = rdx_32
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> rsi:0x0000000000000001 r14d:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069C6:
	r12_263 = rdx_32
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: ebx fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406580:
	r14d_326 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	word64 r15_688 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r14b = (byte) r14d_326 (alias)
	r15d_324 = (word32) r15_688 (alias)
	r15b_325 = (byte) r15_688 (alias)
	branch r14b != 0x00 l00000000004065B0
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406594:
	word64 rsi_696
	eax = fn0000000000404CD0(0x0000000C, out rsi_696)
	edx_307 = 0x0000000C (alias)
	branch (byte) eax != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065AB:
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B0:
	word64 rax_350
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406628:
	rax_350 = (uint64) ((word32) (uint64) r15d_324 & 0x0000F000)
	word32 eax_472 = (word32) rax_350
	branch eax_472 == 0x00008000 l0000000000406868
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406868:
	branch (r15d_324 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406871:
	word64 rsi_662
	branch (byte) fn0000000000404CD0(0x00000010, out rsi_662) == 0x00 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068B8:
	branch (r15d_324 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068C1:
	word64 rsi_650
	branch (byte) fn0000000000404CD0(0x00000011, out rsi_650) == 0x00 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040693B:
	word64 rsi_596
	branch (byte) fn0000000000404CD0(0x00000015, out rsi_596) == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040695C:
	branch (word32) (uint64) (r15d_324 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406962:
	word64 rsi_632
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_632) == 0x00 l000000000040697A
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406985:
	word64 rsi_620
	branch (byte) fn0000000000404CD0(0x00000016, out rsi_620) == 0x00 l00000000004065CF
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406997:
	edx_307 = 0x00000016 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406970:
	edx_307 = 0x0000000E (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406952:
	edx_307 = 0x00000015 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068CF:
	edx_307 = 0x00000011 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040687F:
	edx_307 = 0x00000010 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040663B:
	branch eax_472 == 0x00004000 l00000000004068E0
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_324 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069A1:
	edx_307 = 0x00000014 (alias)
	word64 rsi_573
	branch (byte) fn0000000000404CD0(0x00000014, out rsi_573) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069B8:
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F3:
	branch (r15b_325 & 0x02) == 0x00 l0000000000406910
// DataOut: ebx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F9:
	edx_307 = 0x00000013 (alias)
	word64 rsi_561
	branch (byte) fn0000000000404CD0(0x00000013, out rsi_561) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406910:
	edx_307 = 0x00000006 (alias)
	branch (word32) (uint64) (r15d_324 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406922:
	word64 rsi_545
	edx_307 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x00000012, out rsi_545) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406646:
	branch eax_472 == 0x0000A000 l0000000000406859
// DataOut: eax ebx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406859:
	edx_307 = 0x00000007 (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406651:
	edx_307 = 0x00000008 (alias)
	branch eax_472 == 0x00001000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040665D:
	edx_307 = 0x00000009 (alias)
	branch eax_472 == 0x0000C000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406666:
	edx_307 = 0x0000000A (alias)
	branch eax_472 == 0x00006000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040666F:
	word64 rdx_502 = (uint64) (eax_472 != 0x00002000)
	edx_307 = rdx_502 + 0x000000000000000B + rdx_502
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B9:
	rax_350 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	edx_307 = (word32) (uint64) Mem0[rax_350 * 0x0000000000000004 + 0x00412C60:word32] (alias)
	branch edx_307 != 0x00000005 l0000000000406680
// DataOut: ebx edx fs r11 r12 r14d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406680:
	r14b = (byte) (uint64) (r14d_326 & DPB(eax, edx_307 == 0x00000007, 0)) (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406689:
	branch r14b == 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040668E:
	edx_307 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040669C:
	word64 rsi_437
	edx_307 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x0000000D, out rsi_437) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065CF:
	word32 eax_354 = strlen(r12_263)
	word64 rax_355 = DPB(rax_350, eax_354, 0)
	word64 rbp_356 = Mem0[0x000000000061B120:word64]
	r14b = (byte) eax_354 (alias)
	word64 r15_361 = r12_263 + rax_355
	branch rbp_356 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065EA:
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F0:
	word64 rdx_387 = Mem0[rbp_356:word64]
	branch rax_355 <u rdx_387 l0000000000406610
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F9:
	branch strncmp(r15_361 - rdx_387, Mem0[rbp_356 + 0x0000000000000008:word64], rdx_387) == 0x00000000 l00000000004068A0
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A0:
	branch rbp_356 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A9:
	rbp_275 = rbp_356 + 0x0000000000000010
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406610:
	rbp_356 = Mem0[rbp_356 + 0x0000000000000020:word64]
	branch rbp_356 != 0x0000000000000000 l00000000004065F0
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406619:
	edx_307 = 0x00000005 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066B0:
	rbp_275 = ((uint64) edx_307 << 0x0000000000000004) + 6398944
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066C0:
	branch Mem0[rbp_275 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: ebx edi fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406890:
	word64 rsi_294
	fn0000000000404CD0(0x00000004, out rsi_294)
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066D0:
	word64 rsi_282
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_282) != 0x00 l0000000000406840
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406840:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066DD:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(rbp_275)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406570:
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066FF:
	word64 rbp_176
	word64 r13_165
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067D8:
	word64 rbx_240
	word64 rsp_241
	word64 rbp_242
	word64 rsi_243
	word32 edi_244
	word64 r8_245
	word64 r9_246
	word64 r11_247
	word64 r12_248
	word64 r14_250
	word64 r15_251
	word64 rax_252 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_25, r12_263, r11, fs, out rbx_240, out rsp_241, out rbp_242, out rsi_243, out edi_244, out r8_245, out r9_246, out r11_247, out r12_248, out r13_165, out r14_250, out r15_251)
	Mem256[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_252
	rbp_176 = rax_252
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406711:
	word64 rax_208 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_208 + 0x0000000000000008 l0000000000406820
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406820:
	_obstack_newchunk(rdx, 0x0000000000000008)
	rax_208 = Mem0[rdx + 0x0000000000000018:word64]
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406723:
	Mem222[rax_208:word64] = Mem0[0x000000000061B018:word64]
	Mem224[rdx + 0x0000000000000018:word64] = Mem222[rdx + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406732:
	word64 rbx_156
	word64 rsp_157
	word64 rbp_158
	word64 rsi_159
	word32 edi_160
	word64 r8_161
	word64 r9_162
	word64 r11_163
	word64 r12_164
	word64 r14_166
	word64 r15_167
	word64 rax_168 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_25, r12_263, r11, fs, out rbx_156, out rsp_157, out rbp_158, out rsi_159, out edi_160, out r8_161, out r9_162, out r11_163, out r12_164, out r13_165, out r14_166, out r15_167)
	word64 rdx_170 = rax_168 + Mem0[0x000000000061B018:word64]
	Mem178[0x000000000061B018:word64] = rdx_170
	rbp_176 = rax_168
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406767:
	word64 rax_179 = Mem178[rbx_156 + 0x0000000000000018:word64]
	branch Mem178[rbx_156 + 0x0000000000000020:word64] <u rax_179 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406800:
	_obstack_newchunk(rbx_156, 0x0000000000000008)
	rax_179 = Mem178[rbx_156 + 0x0000000000000018:word64]
	rdx_170 = Mem178[0x000000000061B018:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406779:
	Mem195[rax_179:word64] = rdx_170
	Mem197[rbx_156 + 0x0000000000000018:word64] = Mem195[rbx_156 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406781:
	word64 rsi_85
	word64 rsp_86 = fn0000000000406490(out rsi_85)
	branch r14b != 0x00 l00000000004067A0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_125 = Mem0[0x000000000061B0C8:word64]
	branch (uint64) ((uint128) (uint64) r13_165 /u rcx_125) == (uint64) ((uint128) ((uint64) ((rbp_176 - 0x0000000000000001) + r13_165)) /u rcx_125) l000000000040678B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067C6:
	fn0000000000406440(0x000000000061A550)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040678B:
	word64 rsp_102 = Mem0[rsp_86 + 0x0000000000000018:word64]
	word64 rbp_104
	*rbpOut = Mem0[rsp_102 + 0x0000000000000008:word64]
	word64 rsi_107
	*rsiOut = Mem0[rsp_102 + 0x0000000000000010:word64]
	word64 rdi_111
	*rdiOut = Mem0[rsp_102 + 0x0000000000000018:word64]
	word64 rsp_113
	*rspOut = rsp_102 + 0x0000000000000020
	return Mem0[rsp_86 + 0x0000000000000008:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406540_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	word64 rsi_36
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_36) != 0x00 l0000000000406A58
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A420)
// DataOut: fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid> rax:<invalid> al:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs r11d r14 r15b rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406A80_entry:
// DataOut: ecx edx fs r11d r14 r15b rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word32 ebp_20 = (word32) rdx
	word64 rbx_137 = rsi
	word64 rax_121 = 0x0000000000000000
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	rax_121 = strstr(rsi, 0x0000000000413766)
	r14 = rax_121
	branch rax_121 == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406ACD:
	rax_121 = DPB(rax_121, strlen(rsi), 0) (alias)
	branch rax_121 <=u 0x0000000000000065 l0000000000406B20
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rax_138 = __mempcpy_chk(fp - 0x0000000000000124, rsi, rax_121 - rsi, 0x0000000000000105)
	word64 rcx_139 = (int64) Mem0[rdx + 0x0000000000000010:word32]
	word64 rsi_144 = rcx_139 + 0x000000000061A760 + rcx_139 * 0x00000000000000A0
	rbx_137 = fp - 0x0000000000000124
	rax_121 = strcpy(stpcpy(rax_138, rsi_144), rsi_144 + 0x0000000000000002)
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> eax:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406ADB:
	word64 rbp_54
	word32 esi_55
	word64 rdi_56
	word64 r8_57
	word64 r9_58
	word64 r11_59
	word64 r12_60
	word64 r13_61
	word64 r14_62
	word64 r15_63
	word64 rax_64 = fn0000000000410600(rax_121, rbx_137, ebp_20, 0x00000000000003E9, rdi, 0x00000000, r11d, r14, r15b, fs, out rbp_54, out esi_55, out rdi_56, out r8_57, out r9_58, out r11_59, out r12_60, out r13_61, out r14_62, out r15_63)
	branch (Mem0[fp - 0x000000000000001C:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B66:
	__stack_chk_fail()
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B6B_thunk_fn0000000000406B70:
	word64 rsp_108
	word64 rbp_109
	word64 r8_110
	word64 r9_111
	word64 r11_112
	word64 r12_113
	word64 r13_114
	word64 r14_115
	word64 r15_116
	return fn0000000000406B70(rbp_54, esi_55, rdi_56, r11_59, r14_62, fs, out rsp_108, out rbp_109, out r8_110, out r9_111, out r11_112, out r12_113, out r13_114, out r14_115, out r15_116)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B07:
	word64 rsp_101 = Mem0[fp - 0x0000000000000004:word64]
	word64 rbp_103
	*rbpOut = Mem0[rsp_101 + 0x0000000000000008:word64]
	word64 rsp_107
	*rspOut = rsp_101 + 0x0000000000000018
	return rax_64
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000406A80_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> dil:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> ebx:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> sil:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn0000000000406B70(word64 rbp, word32 esi, word64 rdi, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r11d r14 rbp rdi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406B70_entry:
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012D0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r11d r14 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x0000000000001290
	rcx = 0x0000000000003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc1290 = al
	r8 = 0x000000003F3F3F3F
	qwLoc128F = rax
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc1285 = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BA4:
	r13 = fp - 0x0000000000001290
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x0000000000001290
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407138:
	bLoc1286 = 0x2E
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc1286 = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E6D:
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):0x2B -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC2:
	bLoc1286 = 0x00
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E70
	rbp = fp - 0x0000000000000E70
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rcx = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r11d r13 r13d r14 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000413764 eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407078:
	rsi = fp - 0x0000000000001260
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000413764 eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407085:
	r12 = fp - 0x0000000000000E70
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E70
	eax = __sprintf_chk(fp - 0x0000000000000E70, 0x0000000000000001, 0x0000000000000E3B, 0x0000000000413779)
	rdx = fp - 0x0000000000000E70
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8_1:
	rbp = rdx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rsi = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001260
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r13, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:0x0000000000413764 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	eax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r11d r12 r13 r13d r14 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> al:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	rax = fn000000000040CD70(rsi, rdi, out r14)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:0x0000000000413764 r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:0x3764 al:0x64 r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413769)
	rdi = rbp
	eax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> ax:0x3764 al:0x64 r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	eax = fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, rcx)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> r8:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407155:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D01:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	eax = fputs_unlocked(rdi, rsi)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	rsp = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r11d r12 r8 r9 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r11d r12 r8 r9 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rsi, edi, r8, r12, out rsp, out rbp, out r12)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r11d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407238:
	rsp = fn0000000000405700(edx, rdi, fs, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	rsp = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r11d r12 r13d r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rsp = fn0000000000405700(edx, rdi, fs, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r11d r12 r13d r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406F60:
	rsi = 0x0000000000413764
// DataOut: fs r11 r11d r14 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 r11d r12 r13d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	rbp = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r11d r12 r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:0x00000000FFFFFFFE r9:<invalid> dil:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = 0x00000000FFFFFFFE
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(0x00000000FFFFFFFE, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413774)
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = 0xFFFFFFFFFFFFFFFF + rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:0x00000000FFFFFFFE r9:<invalid> dil:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r13, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	eax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0xFE r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rsp = fn000000000040AB30(rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040727C:
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x01 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r11d r13 r14 r15b rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F7F:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F80:
	rcx = 0x0000000000413764
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r12 r13 r14d r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	eax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r11 r12 r13 r14d r15 r8d rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413779)
	rdi = r13
	eax = strlen(rdi)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	rdi = r12
	eax = fputs_unlocked(rdi, rsi)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v39 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	eax = fwrite_unlocked(0x000000000041377E, 0x0000000000000001, 0x0000000000000004, rcx)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040745A:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rax = (uint64) (eax | r8d)
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B4:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdx rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B8:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C4:
	rax = 0x0000000000000001
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A5:
	rsi = rdx
	rdi = rax
	eax = strcmp(rdi, rsi)
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406B70_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r8b:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407870_entry:
// DataOut: fs r11 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407870:
	fn0000000000406A30()
	word64 rbp_166 = rsi
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040797E:
	word64 rdi_217 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_217 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407987:
	word64 r14_224
	fn000000000040CD70(fp - 0x00000000000002B0, rdi_217, out r14_224)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A0_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 r14:0x00000000CCCCCCCD eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A7:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> r14:0x00000000CCCCCCCD eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079C0:
	word64 rsp_185
	word64 r8_187
	word64 r9_188
	word64 r13_190
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_185, out rbp_166, out r8_187, out r9_188, out r11, out r13_190, out r14d, out r15)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078CD_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> eax:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078D4:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078F9_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407900:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407911:
	word64 rbp_80
	word64 rsi_81
	word64 rdi_82
	word64 r8_83
	word64 r9_84
	word64 r11_85
	word64 r12_86
	word64 r13_87
	word64 r14_88
	word64 r15_89
	word64 rsp_108
	word64 rbx_90 = fn0000000000406540(rbp_166, 0x0000000000000000, 0x00, rdi, r11, r14d, r15, fs, out rsp_108, out rbp_80, out rsi_81, out rdi_82, out r8_83, out r9_84, out r11_85, out r12_86, out r13_87, out r14_88, out r15_89)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040792D:
	word64 rsi_134
	word64 rdi_135
	fn0000000000405D00((word32) (uint64) Mem0[rbx_90 + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rbx_90 + 0x0000000000000028:word32], (byte) (word32) Mem0[rbx_90 + 0x00000000000000B0:byte], out rsp_108, out rsi_134, out rdi_135)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> eax:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> al:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407948:
	branch (Mem0[rsp_108 + 0x0000000000000298:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004079E6
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079EB_thunk_fn00000000004079F0:
	fn00000000004079F0()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407962:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000407870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004079F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsp
// Trashed: SCZO ah al ax eax esp rax rsp sp spl
// Preserved:
fn00000000004079F0_entry:
// DataOut: bpl fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut: bpl fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407A46:
	return fp
// DataOut: bpl fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004079F9:
	word64 rax_39 = (uint64) Mem0[0x000000000061B150:word32]
	word64 rsp_41
	byte SCZO_42
	byte CZ_43
	word64 rdi_44
	word64 rsi_45
	word64 rbp_46
	word64 rbx_47
	word32 eax_48
	word64 rax_49
	call Mem0[rax_39 * 0x0000000000000008 + 0x00412308:word32] (retsize: 4; depth: 84)
		uses: CZ_4,dwLoc04_22,dwLoc08_25,dwLoc0C_28,dwLoc10_31,dwLoc14_33,dwLoc18_36,eax,rax_39,rbp,rbx,rdi,rsi,rsp_37,SCZO_38
		defs: CZ_43,eax_48,rax_49,rbp_46,rbx_47,rdi_44,rsi_45,rsp_41,SCZO_42
	return rsp_41
// DataOut: bpl fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn00000000004079F0_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000407EA0(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi edx esi fs r11 r14 r15 r8 rbp rcx rdi rsi
// LiveOut: bpl ebx r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407EA0_entry:
// DataOut: edi edx esi fs r11 r12 r12d r14 r15 r8 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = fp - 0x0000000000000004
	rsp = fp - 0x0000000000000008
	dwLoc08 = rdi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rsi
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x0000000000000004
	r13 = (uint64) esi
	v9 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000014
	dwLoc14 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000390
	dwLoc0388 = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc3C = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: bpl cl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 r9b rax rbp rbx rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408400:
	r8 = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - rax)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: bpl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0394 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out rsp, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0394
// DataOut: cl fs r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> r8:0x00000000AAAAAAAA rdi:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A18:
	Mem0[0x00000000000000C0:byte] = 0x00
	rdi = 0x00000000000000C1
	sil = 0xBF
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089F9:
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408374:
// DataOut: esi fs r11 r13 r13d r14 r15 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408355:
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F46:
	SCZO = cond(bLoc0388 - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0394 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l000000000040893D:
	rdi = 0x0000000000000012
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408956:
	rdi = 0x0000000000000014
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040896F:
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al ecx fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: ecx fs r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al ecx fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al ecx fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040827E:
// DataOut: al fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0394 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408317:
	rdi = 0x0000000000000015
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408330:
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: ecx fs r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: ecx esi fs r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F74:
	r15d = (word32) Mem0[0x00000000AAAAAAA9:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: ecx esi fs r11 r12 r13 r13d r14 r15b r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408670:
	rdi = rbx
	dwLoc0398 = ecx
	dwLoc038C = esi
	qwLoc0394 = rdx
	eax = strlen(rdi)
	rdx = qwLoc0394
	r12 = rax
	rdi = rdx
	eax = strlen(rdi)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0394
	rsi = (uint64) dwLoc038C
	rcx = (uint64) dwLoc0398
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = rsp - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B3A:
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407FF0:
	SCZO = cond(bLoc0388 - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0394 = ecx
	rdx = r15
	eax = __xstat(0x0000000000000001, rsi, rdx)
	rcx = (uint64) dwLoc0394
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B5E:
	dwLoc0394 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0394
	al = Test(EQ,Z)
// DataOut: al edx fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E8:
	rax = (uint64) Mem0[0x0000000000000029:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al edx fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:0x01 cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408906:
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:0x01 cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	eax = __lxstat(0x0000000000000001, rsi, rdx)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	eax = __xstat(0x0000000000000001, rsi, rdx)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040802B:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc038C = esi
	dwLoc0394 = edx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0394
	rsi = (uint64) dwLoc038C
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(64) Local -0394(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(64) Local -0394(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc038C
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083C8:
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc038C
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0394 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(64)

l0000000000408458:
	eax = fn0000000000411840(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408080:
	eax = fn0000000000411820(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040846B:
	dwLoc0394 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0394
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089C9:
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r11 r12 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B40:
	dwLoc0394 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
// DataOut: cl edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408841:
	dwLoc038C = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0394 = rax
	rax = fn0000000000409CC0(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	rdx = (uint64) dwLoc038C
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r11 r12 r13b r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040887E:
	rdx = (uint64) Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r11 r12 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D9:
	v46 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v46
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(rdi, r11, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	rcx = r13
	rdx = 0x0000000000415E54
	error(0x0000000000000000, rsi, 0x0000000000415E54, Mem0[rsp + -8:<unknown>])
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084F6:
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:0x0000000000415E54 rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080EF:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, rdi, out rbp, out rsi, out r11, out r12, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	rsp = fn0000000000405810(rdx, edi, r11, fs, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000FFFFFFFF rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:0x00000000FFFFFFFE eax:<invalid> al:<invalid> r11:0x00000000FFFFFFFF sil:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0A:
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	r13 = rax
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, qwLoc08, out rbp, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B98:
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	r13 = rax
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408557:
	eax = strlen(rdi)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi, out rsp)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	rax = stpncpy(rdi, rsi, rdx)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B8D:
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	rdi = 0x0000000000000001
	eax = __xstat(0x0000000000000001, rsi, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085FC:
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	rcx = 0x0000000000000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r13, out r14d, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	eax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B10:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rbx, rbp, rsi, edi, r8, r11d, r12, r14, fs, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rsi, edi, r8, r12, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BC7_1:
	edx = eax
// DataOut: edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BCA:
// DataOut: edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = r15
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rdx = r15
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE8_1:
	rdx = rcx
// DataOut: al edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A70:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rbx, rbp, rsi, edi, r8, r11d, r12, r14, fs, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: fs r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r11 r12 r12d r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r11 r12 r12d r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408765:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r11 r12 r12d r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A30:
	rdi = Mem0[rsi + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r13, out r14d, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	eax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408A68:
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408779:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r11 r12 r12d r13 r13d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r11 r12 r12d r13 r13d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087BA:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	eax = strlen(rdi)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	rsp = fn0000000000405810(rdx, edi, r11, fs, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: bpl ebp fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FE4:
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	v43 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v43
	SCZO = cond(v43)
	Mem0[rsi:word64] = rax
// DataOut: bpl ebp fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: bpl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut: bpl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al bpl dl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al bpl dl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CEC:
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: bpl dl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: bpl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: bpl eax ebp ebx edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: bpl eax ebp ebx edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: bpl ebp ebx edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut: ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405020:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	eax = strcoll(rdi, rsi)
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CBC:
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn0000000000407EA0_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: bpl ebx r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> r14:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word32 ebx_11 = (word32) (uint64) edi
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005))
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rsi_252
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_252)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005))
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005))
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rax_282 = setlocale(0x0000000000000005, 0x0000000000000000)
	branch rax_282 == 0x0000000000000000 l0000000000409BC8
// DataOut: ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BB2:
	branch strncmp(rax_282, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> rdi:0x0000000000000005 rsi:<invalid> rax:<invalid> eax:<invalid> rcx:0x0000000000415A08 edx:0x00000005 ecx:0x00415A08 -8(fp):rbx -4(fp):rbp

l0000000000409BFF:
	word64 rsi_311
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_311)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> eax:<invalid> rcx:0x0000000000415A08 edx:0x00000003 ecx:0x00415A08 -8(fp):rbx -4(fp):rbp

l0000000000409BC8:
	word64 rsi_289
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_289)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409768:
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000409CC0(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	word64 rax_6 = (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000)
	branch (word32) rax_6 == 0x0000A000 l0000000000409D10
// DataOut: fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CCF:
	word32 eax_21 = acl_extended_file(rdi)
	word64 rax_22 = DPB(rax_6, eax_21, 0)
	branch eax_21 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CE8:
	word32 eax_36 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_36 == 0x0000005F l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_36 == 0x00000026 l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_36 == 0x00000016 l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CFE:
	rax_22 = (uint64) -(word32) (eax_36 != 0x00000010)
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return rax_22
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid> al:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> eax:<invalid> al:<invalid>



word64 fn0000000000409D20(word64 rsi, word64 rdi, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: r11 r12 r14 r15 rax rbp rsi
// Trashed: SCZO ah al ax bp bpl dh di dil dl dx eax ebp edi edx esi esp r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409D20_entry:
	*r12Out = r12
	*r11Out = r11
// DataOut: fs r11 r12 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 r15_9
	*r15Out = 0x00000000FFFFFFFE
	word64 r14_12
	*r14Out = 0x00000000FFFFFFFF
	word64 rbx_140 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D55_1:
	rbx_140 = rsi + 0x0000000000000001
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D59:
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D60:
	word64 rax_136 = malloc(rbx_140)
	byte al_137 = (byte) rax_136
	word64 rbp_141 = rax_136
	branch rax_136 == 0x0000000000000000 l0000000000409DAB
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D70:
	word64 rax_146 = DPB(rax_136, DPB(al_137, readlink(rdi, rax_136, rbx_140), 0), 0)
	word64 r12_150 = rax_146
	*r12Out = r12_150
	branch rax_146 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DD8:
	word64 rax_213 = __errno_location()
	word32 edx_217 = (word32) (uint64) Mem0[rax_213:word32]
	branch edx_217 == 0x00000022 l0000000000409D86
// DataOut: edx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DE4:
	free(rbp_141)
	Mem226[rax_213:word32] = (word32) (uint64) edx_217
// DataOut: fs r11 r12 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D86:
	branch rbx_140 >u rax_146 l0000000000409E08
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E08:
	Mem195[rbp_141:byte] = 0x00
	word64 rbp_207
	*rbpOut = Mem195[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_209
	*rsiOut = Mem195[qwLoc08 + 0x0000000000000010:word64]
	return rbp_141
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409D8B:
	free(rbp_141)
	branch rbx_140 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DC0:
	branch rbx_140 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E20:
	Mem176[__errno_location():word32] = 0x0000000C
	word64 rbp_189
	*rbpOut = Mem176[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_191
	*rsiOut = Mem176[qwLoc08 + 0x0000000000000010:word64]
	return 0x0000000000000000
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409DC5:
	word64 r11_174
	*r11Out = 0x00000000FFFFFFFF
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D98:
	rbx_140 = rbx_140 * 0x0000000000000002
	rax_136 = malloc(rbx_140)
	al_137 = (byte) rax_136 (alias)
	rbp_141 = rax_136
	branch rax_136 != 0x0000000000000000 l0000000000409D70
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAB:
// DataOut: fs r11 r12 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAD:
	word64 rbp_107
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_109
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	return 0x0000000000000000
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409D20_exit:
// DataOut: r11 r12 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:rbx rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409E50(word64 rcx, word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx rdi rdx rsi
// LiveOut: al eax ebp r12 r12d r13 r13b r14 r14b r15 rax rbp rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409E50_entry:
	*r13Out = r13
// DataOut: ebx fs r11 r13 r13b r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc38_113
	word64 rax_109
	word64 rax_29 = DPB(rax, strlen(rdi), 0)
	word64 r15_6
	*r15Out = rsi
	word64 r12_16
	*r12Out = rcx
	word64 rbp_131 = rdx
	word64 r14_126 = Mem0[rsi:word64]
	*r14Out = r14_126
	branch r14_126 == 0x0000000000000000 l0000000000409F72
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0040(64)

l0000000000409F72:
	qwLoc38_113 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64)

l0000000000409E81:
	word64 r13_111 = rax_29
	*r13Out = r13_111
	byte bLoc29_112 = 0x00
	qwLoc38_113 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_114 = 0x0000000000000000
	rax_127 = rax_29
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EE8:
	word64 rax_127
	branch strncmp(r14_126, rdi, rax_29) != 0x00000000 l0000000000409ED8
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EFB:
	rax_127 = DPB(rax_127, strlen(r14_126), 0) (alias)
	branch rax_127 == rax_29 l0000000000409F60
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(0) Local -0040(64)

l0000000000409F60:
	word64 rbp_226
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rbx_114
// DataOut: al eax ebp ebx fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409F08:
	branch qwLoc38_113 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409EA0:
	rax_127 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: fs r11 r12 r12d r13 r13b r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409F50:
	bLoc29_112 = 0x01
// DataOut: fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EAE:
	byte cl_202 = (byte) (word32) bLoc29_112
	rax_127 = 0x0000000000000001
	branch memcmp(qwLoc38_113 *s rcx + rdx, rbp_131, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED1_1:
	cl_202 = 0x01 (alias)
// DataOut: cl fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED4:
	bLoc29_112 = cl_202
// DataOut: fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409ED8:
	rbx_114 = rbx_114 + 0x0000000000000001
	rbp_131 = rbp_131 + rcx
	r14_126 = Mem0[rsi + rbx_114 * 0x0000000000000008:word64]
	*r14Out = r14_126
	branch r14_126 == 0x0000000000000000 l0000000000409F28
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F10:
	rbx_114 = rbx_114 + 0x0000000000000001
	qwLoc38_113 = rbx_114
	rbp_131 = rbp_131 + rcx
	r14_126 = Mem0[rsi + rbx_114 * 0x0000000000000008:word64]
	*r14Out = r14_126
	branch r14_126 != 0x0000000000000000 l0000000000409EE8
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F25:
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0029(0) Local -0038(64)

l0000000000409F28:
	rax_109 = 0xFFFFFFFFFFFFFFFE
	branch bLoc29_112 != 0x00 l0000000000409F3B
// DataOut: al eax fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64)

l0000000000409F36:
	rax_109 = qwLoc38_113
// DataOut: al eax fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:0xFFFFFFFFFFFFFFFE ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000409F3B:
	word64 rbp_86
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rax_109
// DataOut: al eax ebp ebx fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409E50_exit:
// DataOut: al eax ebp r12 r12d r13 r13b r14 r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> r13:rax rdx:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409F80(word64 rdx, word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx
// LiveOut: r11 r15 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: fs r11 rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r11 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: fs r11 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409F95:
	dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: fs r11 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409FA4:
	word64 r11_24
	word64 rbx_25 = fn000000000040EBF0(rdi, 0x0000000000000001, r11, fs, out r11_24)
	word64 r9_34
	word64 r11_35
	word64 r12_36
	word64 r15_37
	word64 rsp_38 = fn000000000040E970(rbx_25, 0x00000006, 0x00000000, r11_24, fs, out r9_34, out r11_35, out r12_36, out r15_37)
	word64 rsp_47 = Mem0[rsp_38 + 0x0000000000000010:word64]
	word64 rbx_40 = Mem0[rsp_38:word64]
	word64 rbp_45
	*rbpOut = Mem0[rsp_38 + 0x0000000000000008:word64]
	error(0x0000000000000000, 0x0000000000000000, r12_36, Mem0[rsp_47:<unknown>])
	word64 rsp_48
	*rspOut = rsp_47 + 0x0000000000000008
	return rbx_40
// DataOut: fs r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000409F80_exit:
// DataOut: r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005), Mem0[0x000000000061A650:word64])
	word64 r14_10 = 0x0000000000000000
	word64 r13_113 = rdx
	word64 rbp_123 = rsi
	word64 rbx_122 = 0x0000000000000000
	word64 r12_117 = Mem0[rdi:word64]
	branch r12_117 != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_122 == 0x0000000000000000 l000000000040A050
// DataOut: fs r11 r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A08B:
	branch memcmp(r14_10, rbp_123, r13_113) != 0x00000000 l000000000040A050
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A050:
	word64 rbp_137
	word64 r8_138
	word64 r9_139
	word64 r12_141
	word64 r15_144
	fn000000000040EC10(r12_117, r11, fs, out rbx_122, out rbp_137, out r8_138, out r9_139, out r11, out r12_141, out r13_113, out r14_10, out r15_144)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E4A)
	rbp_123 = rbp_137 + r13_113
	r12_117 = Mem0[r15_144 + rbx_122 * 0x0000000000000008:word64]
	branch r12_117 == 0x0000000000000000 l000000000040A0D0
// DataOut: fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A09D:
	word64 r8_171
	word64 r9_172
	word64 r12_174
	word64 r15_177
	fn000000000040EC10(r12_117, r11, fs, out rbx_122, out rbp_123, out r8_171, out r9_172, out r11, out r12_174, out r13_113, out r14_10, out r15_177)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E52)
	r12_117 = Mem0[r15_177 + rbx_122 * 0x0000000000000008:word64]
	branch r12_117 != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0D0:
	word64 rdi_62 = Mem0[0x000000000061A650:word64]
	word64 rax_64 = Mem0[rdi_62 + 0x0000000000000028:word64]
	branch rax_64 >=u Mem0[rdi_62 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0FB:
	word64 rsp_99 = Mem0[fp - 0x0000000000000008:word64]
	__overflow(Mem0[rsp_99 + 0x0000000000000018:word64], Mem0[rsp_99 + 0x0000000000000010:word64])
	return rsp_99 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0E1:
	Mem77[rdi_62 + 0x0000000000000028:word64] = rax_64 + 0x0000000000000001
	Mem78[rax_64:byte] = 0x0A
	return Mem78[fp - 0x0000000000000008:word64] + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A000_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040A120(word64 rcx, word64 rdx, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A120_entry:
// DataOut: fs r11 r8 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rsp_35
	word64 rbp_36
	word64 r12_37
	word64 r13_38
	word64 r14_39
	word64 r15_40
	word64 rax_41 = fn0000000000409E50(r8, rcx, rdx, rsi, out rsp_35, out rbp_36, out r12_37, out r13_38, out r14_39, out r15_40)
	branch rax_41 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word64 rsp_82
	word64 rbp_83
	word64 r9_84
	word64 r11_85
	word64 r15_86
	word64 rbx_87 = fn0000000000409F80(rax_41, r14_39, r11, fs, out rsp_82, out rbp_83, out r9_84, out r11_85, out r15_86)
	word64 rsp_91 = fn000000000040A000(r15_86, rbp_83, rbx_87, r11_85, fs)
	word64 rsp_92
	word64 rdi_93
	word64 r15_94
	word64 r8_95
	word64 rsi_96
	word64 r14_97
	word64 rbp_98
	word64 r13_99
	word64 r9_100
	word64 r12_101
	word64 rcx_102
	word64 rbx_103
	word64 rdx_104
	byte SCZO_105
	word64 rax_106
	byte SZO_107
	byte C_108
	byte S_109
	word32 r13d_110
	word64 r11_111
	selector fs_112
	call r13d (retsize: 4; depth: 4)
		uses: C_44,dwLoc04_4,dwLoc08_9,dwLoc0C_13,dwLoc10_18,dwLoc14_22,dwLoc18_28,fs,r11_85,r12_37,r13_38,r13d,r14_39,r15_86,r8,r9_84,rax_41,rbp_83,rbx_87,rcx_25,rdi_90,rdx_88,rsi_89,rsp_91,S_43,SCZO_34,SZO_42
		defs: C_108,fs_112,r11_111,r12_101,r13_99,r13d_110,r14_97,r15_94,r8_95,r9_100,rax_106,rbp_98,rbx_103,rcx_102,rdi_93,rdx_104,rsi_96,rsp_92,S_109,SCZO_105,SZO_107
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> ecx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A2B0(word64 rdi, word64 qwArg00, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rbp rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esi esp rax rbp rcx rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn000000000040A2B0_entry:
// DataOut: fs r11 r12 r13 r14 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2E0:
	word64 rax_55 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r11 r12 r13 r14 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2EB:
	rdx_27 = rax_55
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2DC:
// DataOut: fs r11 r12 r13 r14 r8 r9 rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r11 r12 r13 r14 r8 r9 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2F3:
	word64 rbp_35
	*rbpOut = qwArg00
	return rdx_27
// DataOut: fs r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh dl dx eax edx esp rax rdx rsp sp spl
// Preserved: rbx
fn000000000040A400_entry:
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_25 = DPB(rax, strlen(rdi), 0)
	branch rax_25 <=u 0x0000000000000001 l000000000040A41A
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A40F:
	word64 rdx_35 = rax_25 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_25:byte] == 0x2F l000000000040A420
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A420:
	rax_25 = rdx_35
	branch rdx_35 != 0x0000000000000001 l000000000040A40F
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A429:
	return rdx_35
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx

l000000000040A41A:
	return rax_25
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx

fn000000000040A400_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r11d r13 r13d r14 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & rbpOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: fs r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsp_8
	word64 rbp_9
	word64 rsi_10
	word64 rdi_11
	word32 r14d_12
	word64 rax_13 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsp_8, out rbp_9, out rsi_10, out rdi_11, out r14d_12)
	branch rax_13 == 0x0000000000000000 l000000000040A623
// DataOut: fs r11 r14d r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: fs r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_29
	word64 rsp_30
	word64 rbp_31
	word64 rsi_32
	word64 rdi_33
	word32 r14d_34
	return fn000000000040A630(rdx_7, rsi_10, rdi_11, out rdx_29, out rsp_30, out rbp_31, out rsi_32, out rdi_33, out r14d_34)
// DataOut: fs r11 r14d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_13
// DataOut: fs r11 r14d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp rdi rdx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A630_entry:
// DataOut: fs r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_28
	word64 rax_29 = fn000000000040A390(rdi, out rsi_28)
	word64 rsp_32
	word64 rax_33 = fn000000000040A400(rax_29, out rsp_32)
	word64 rdx_37 = rax_29 - rdi
	*rdxOut = rdx_37
	Mem42[rsp_32:word64] = rdx_37 + rax_33
	word64 r14_10 = 0x0000000000000000
	word32 r14d_11
	*r14dOut = 0x00000000
	branch rax_33 == 0x0000000000000000 l000000000040A679
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A66D:
	byte r14b_136 = Mem42[rax_29 - 0x0000000000000001 + rax_33:byte] != 0x2F
	r14_10 = (uint64) r14b_136 (alias)
	word32 r14d_138
	*r14dOut = (word32) r14b_136
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A679:
	word64 rbx_126 = rsi + 0x0000000000000001
	branch Mem42[rsi:byte] == 0x2F l000000000040A700
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A700:
	rbx_126 = rbx_126 + 0x0000000000000000
	branch Mem42[rbx_126:byte] != 0x2F l000000000040A682
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A70D:
	rbx_126 = rbx_126 + 0x0000000000000001
	branch Mem42[rbx_126 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A71A:
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A682:
	word64 rax_109
	word64 rax_53 = DPB(rax_33, strlen(rbx_126), 0)
	word64 rcx_54 = Mem42[rsp_32:word64]
	Mem55[rsp_32 + 0x0000000000000008:word64] = rax_53
	word64 rax_58 = malloc(rcx_54 + 0x0000000000000001 + r14_10 + rax_53)
	branch rax_58 == 0x0000000000000000 l000000000040A720
// DataOut: fs r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A720:
	rax_109 = 0x0000000000000000
// DataOut: fs r11 r14d r8 r9 rax rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6A8:
	word64 rax_96 = mempcpy(rax_58, rdi, Mem55[rsp_32:word64])
	Mem100[rax_96:byte] = 0x2F
	word64 rdi_101 = rax_96 + r14_10
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: fs r11 r13 r14d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6C3:
	Mem120[rdi_101:word64] = rdi_101 - (uint64) (Mem100[rsi:byte] == 0x2F)
// DataOut: fs r11 r13 r14d r8 r9 rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6D5:
	word64 rdx_105 = Mem100[rsp_32 + 0x0000000000000008:word64]
	*rdxOut = rdx_105
	Mem108[mempcpy(rdi_101, rbx_126, rdx_105):byte] = 0x00
	rax_109 = rax_58
// DataOut: fs r11 r14d r8 r9 rax rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6E8:
	word64 rsp_79 = Mem55[rsp_32 + 0x0000000000000028:word64]
	word64 rbp_81
	*rbpOut = Mem55[rsp_79 + 0x0000000000000008:word64]
	word64 rsi_83
	*rsiOut = Mem55[rsp_79 + 0x0000000000000010:word64]
	word64 rdi_85
	*rdiOut = Mem55[rsp_79 + 0x0000000000000018:word64]
	word64 rsp_86
	*rspOut = rsp_79 + 0x0000000000000020
	return rax_109
// DataOut: fs r11 r14d r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A630_exit:
// DataOut: r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A730(word64 rdi, word32 r14d, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut: r9 rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
	*r9Out = r9
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_124 = Mem0[rdi:word64]
	byte cl_127 = (byte) (word32) Mem0[rdx_124:byte]
	branch cl_127 == 0x00 l000000000040A7CD
// DataOut: cl fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return 0x0000000000000000
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_140 = 0x00
	word64 rax_107 = 0x0000000000000000
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_140 != 0x00 l000000000040A750
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A750:
	r8b_140 = 0x00 (alias)
	branch (word32) (uint64) ((word32) (uint64) ((int32) cl_127 & 0xFFFFFFDF) - 0x00000041) <=u 0x00000019 l000000000040A768
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A77B:
	branch cl_127 == 0x2E l000000000040A7B8
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7B8:
	branch rax_107 == 0x0000000000000000 l000000000040A7C8
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7C8:
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7BD:
	rax_107 = 0x0000000000000001
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	word32 esi_111 = (int32) cl_127
	r9 = DPB(r9, r14 - 0x0000000000000030, 0) (alias)
	*r9Out = r9
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl esi fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A78D:
	branch (word32) (uint64) ((word32) (uint64) (esi_111 & 0xFFFFFFDF) - 0x00000041) >u 0x00000019 l000000000040A761
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:(int32) cl r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A761:
	branch cl_127 == 0x7E l000000000040A768
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A764_1:
	rax_107 = 0x0000000000000000
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A768:
	rdx_124 = rdx_124 + 0x0000000000000001
	Mem91[rdi:word64] = rdx_124
	cl_127 = (byte) (word32) Mem91[rdx_124:byte] (alias)
	branch cl_127 == 0x00 l000000000040A7B0
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A798:
	rdx_124 = rdx_124 + 0x0000000000000001
	Mem125[rdi:word64] = rdx_124
	cl_127 = (byte) (word32) Mem125[rdx_124:byte] (alias)
	branch cl_127 != 0x00 l000000000040A776
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7A6:
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7B0:
	return rax_107
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

fn000000000040A730_exit:
// DataOut: r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030



word64 fn000000000040AB30(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AB30_entry:
// DataOut: fs r11d r13 r14 r15b rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB30:
	branch clock_gettime(0x0000000000000000, rdi) == 0x00000000 l000000000040AB67
// DataOut: fs r11d r13 r14 r15b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB46:
	gettimeofday(fp - 0x0000000000000014, 0x0000000000000000)
	Mem29[rdi:word64] = qwLoc14
	Mem34[rdi + 0x0000000000000008:word64] = qwLoc0C *s 1000
// DataOut: fs r11d r13 r14 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:rdi rbx:rdi rdi:<invalid> eax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return fp + 0x0000000000000004
// DataOut: fs r11d r13 r14 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:<invalid> rbx:rdi rdi:<invalid> eax:<invalid> rax:<invalid> -4(fp):rbx

fn000000000040AB30_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rsi:<invalid> rbx:rbx rdi:<invalid> eax:<invalid> rax:<invalid> -4(fp):rbx



byte fn000000000040AB70(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: al rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsi_3
	*rsiOut = 0x0000000000000000
	word64 rax_6 = setlocale(rdi, 0x0000000000000000)
	branch rax_6 == 0x0000000000000000 l000000000040ABB0
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return 0x01
// DataOut: al ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040AB80:
	byte Z_30 = cond(Mem0[rax_6:byte] - 0x43)
	branch Mem0[rax_6:byte] != 0x43 l000000000040AB98
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	Z_30 = cond(Mem0[rax_6 + 0x0000000000000001:byte]) (alias)
	branch Mem0[rax_6 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_36
	*rsiOut = rax_6
	word64 rdi_38 = 0x0000000000415E6A
	word64 rcx_40 = 0x0000000000000006
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_40 == 0x0000000000000000 l000000000040ABA7
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	Z_30 = cond(Mem0[rsi_93:byte] - Mem0[rdi_94:byte]) (alias)
	*rsiOut = rsi_93 + 0x0000000000000001
	rdi_38 = rdi_94 + 0x0000000000000001
	rcx_40 = rcx_40 - 0x0000000000000001
	word64 rsi_93 = rsi_36
	word64 rdi_94 = rdi_38
	branch Mem0[rsi_93:byte] != Mem0[rdi_94:byte] l000000000040ABA5
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return Z_30
// DataOut: al ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return 0x00
// DataOut: al ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

fn000000000040AB70_exit:
// DataOut: al rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



word64 fn000000000040ABC0(word64 rdi, word64 r8, ptr64 & rsiOut, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi
// LiveOut: r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
	*rsiOut = rsi
	*r9Out = r9
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_121
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_121 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut: fs r11 r12 r12d r13 r14 r15 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_121 = 0x000000000000000B
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
	word64 r9_28
	*r9Out = 0x00000000AAAAAAAB
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_105
	branch rdi_121 <=u 0x0000000000000009 l000000000040AC48
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC48:
	rcx_105 = 0x0000000000000003
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040ABE6:
	word64 rdx_rax_84 = rdi_121 *u 0x00000000AAAAAAAB
	branch rdi_121 == (rdx_rax_84 >>u 0x0000000000000001) + (rdx_rax_84 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040ABF8:
	word64 rsi_103 = 0x0000000000000009
	rcx_105 = 0x0000000000000003
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC21:
	rsi_103 = rsi_103 + r8
	*rsiOut = rsi_103
	rcx_105 = rcx_105 + 0x0000000000000002
	branch rsi_103 <u rdi_121 l000000000040AC10
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC10:
	r8 = r8 + 0x0000000000000008
	branch (uint64) (rdi_121 % rcx_105) == 0x0000000000000000 l000000000040AC3A
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_121 % rcx_105) != 0x0000000000000000 l000000000040AC44
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC3A:
	rdi_121 = rdi_121 + 0x0000000000000002
	branch rdi_121 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC44:
	return rdi_121
// DataOut: fs r11 r12 r12d r13 r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

fn000000000040ABC0_exit:
// DataOut: r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rsi rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AC80_entry:
// DataOut: fs r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word32] (retsize: 4; depth: 8)
		uses: dwLoc04_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: fs r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

l000000000040AC94:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al fs r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx r11 r8 rax rdi rsi
// LiveOut: r12 r13 r14 r9 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040ACB0_entry:
	*r9Out = r9
// DataOut: cl ecx fs r11 r15 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	*r13Out = r13_11
	word64 rsi_27
	word64 rsp_127
	word64 rax_28 = fn000000000040AC80(rax, rdi, out rsp_127, out rsi_27)
	Mem30[rsi_27:word64] = rax_28
	word64 r14_6 = rdx
	*r14Out = r14_6
	byte r13b_13 = (byte) r13_11
	word64 r12_17 = rsi
	*r12Out = r12_17
	word64 rbp_156 = rdi
	word64 rsi_126 = Mem30[rax_28:word64]
	word64 rbx_155 = rax_28
	branch rsi_126 == 0x0000000000000000 l000000000040AD4F
// DataOut: al fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ACD7:
	branch rsi == rsi_126 l000000000040ACE9
// DataOut: al fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACDC:
	word64 rsi_181
	word64 r14_182
	word64 rdx_183
	word32 r13d_185
	word32 ecx_186
	word64 r13_187
	word64 rdi_189
	word64 rax_191
	byte SZO_192
	byte C_193
	byte Z_194
	byte SCZO_195
	byte al_196
	word32 esi_197
	word64 r9_199
	word64 r10_201
	word64 rcx_203
	word64 r12_188
	call Mem30[rdi + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_29,C_36,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_24,ecx,esi_32,r10,r11,r12_17,r13_11,r13b_13,r13d_12,r14_6,r8,r9,rax_28,rbp_21,rbx_33,rcx,rdi_179,rdx,rsi_31,rsp_26,SCZO_107,SZO_34,Z_108
		defs: al_196,C_193,ecx_186,esi_197,r10_201,r11_202,r12_188,r13_187,r13b_198,r13d_185,r14_182,r8_200,r9_199,rax_191,rbp_184,rbx_190,rcx_203,rdi_189,rdx_183,rsi_181,rsp_180,SCZO_195,SZO_192,Z_194
	branch al_196 == 0x00 l000000000040AD46
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD46:
	word64 rax_228 = Mem30[rbx_155 + 0x0000000000000008:word64]
	branch rax_228 != 0x0000000000000000 l000000000040AD30
// DataOut: al fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD30:
	rsi_126 = Mem30[rax_228:word64]
	branch rsi_126 == r12_188 l000000000040AD67
// DataOut: al fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD38:
	word64 rsi_282
	word64 r14_283
	word64 rdx_284
	word32 r13d_286
	word32 ecx_287
	word64 r13_288
	word64 rdi_290
	word64 rax_292
	byte SZO_293
	byte C_294
	byte Z_295
	byte SCZO_296
	byte al_297
	word32 esi_298
	word64 r9_300
	word64 r8_301
	word64 r10_302
	word64 r11_303
	word64 rcx_304
	call Mem30[rbp_156 + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_229,C_232,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_24,ecx_216,esi_234,r10_221,r11_209,r12_214,r13_215,r13b_211,r13d_217,r14_219,r8_210,r9_220,rax_228,rbp_224,rbx_223,rcx_222,rdi_280,rdx_218,rsi_233,rsp_227,SCZO_235,SZO_230,Z_236
		defs: al_297,C_294,ecx_287,esi_298,r10_302,r11_303,r12_289,r13_288,r13b_299,r13d_286,r14_283,r8_301,r9_300,rax_292,rbp_285,rbx_291,rcx_304,rdi_290,rdx_284,rsi_282,rsp_281,SCZO_296,SZO_293,Z_295
	branch al_297 != 0x00 l000000000040AD60
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD60:
	rax_228 = Mem30[rbx_155 + 0x0000000000000008:word64]
	rsi_126 = Mem30[rax_228:word64]
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD67:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD6C:
	Mem262[rbx_155 + 0x0000000000000008:word64] = Mem30[rax_228 + 0x0000000000000008:word64]
	Mem263[rax_228:word64] = 0x0000000000000000
	Mem265[rax_228 + 0x0000000000000008:word64] = Mem263[rbp_156 + 0x0000000000000048:word64]
	Mem266[rbp_156 + 0x0000000000000048:word64] = rax_228
	word64 rsp_273 = Mem266[rsp_127 + 0x0000000000000010:word64]
	word64 rbp_275
	*rbpOut = Mem266[rsp_273 + 0x0000000000000008:word64]
	word64 rsi_277
	*rsiOut = Mem266[rsp_273 + 0x0000000000000010:word64]
	word64 rsp_279
	*rspOut = rsp_273 + 0x0000000000000018
	return rsi_126
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD42:
	rbx_155 = Mem30[rbx_155 + 0x0000000000000008:word64]
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD4F:
	word64 rsp_94 = Mem30[rsp_127 + 0x0000000000000010:word64]
	word64 rbp_100
	*rbpOut = Mem30[rsp_94 + 0x0000000000000008:word64]
	word64 rsi_104
	*rsiOut = Mem30[rsp_94 + 0x0000000000000010:word64]
	word64 rsp_106
	*rspOut = rsp_94 + 0x0000000000000018
	return 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE6:
	rsi_126 = Mem30[rbx_155:word64]
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE9:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACEE:
	word64 rax_165 = Mem30[rbx_155 + 0x0000000000000008:word64]
	branch rax_165 == 0x0000000000000000 l000000000040AD98
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD98:
	Mem178[rbx_155:word64] = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACFB:
	word64 r9_170 = Mem30[r8:word64]
	*r9Out = r9_170
	word64 r10_171 = Mem30[r8 + 0x0000000000000008:word64]
	Mem172[r11:word64] = r9_170
	Mem173[r11 + 0x0000000000000008:word64] = r10_171
	Mem174[rax_165:word64] = 0x0000000000000000
	Mem176[rax_165 + 0x0000000000000008:word64] = Mem174[rbp_156 + 0x0000000000000048:word64]
	Mem177[rbp_156 + 0x0000000000000048:word64] = rax_165
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD1C:
	word64 rsp_132 = Mem30[rsp_127 + 0x0000000000000010:word64]
	word64 rbp_134
	*rbpOut = Mem30[rsp_132 + 0x0000000000000008:word64]
	word64 rsi_138
	*rsiOut = Mem30[rsp_132 + 0x0000000000000010:word64]
	word64 rsp_140
	*rspOut = rsp_132 + 0x0000000000000018
	return rsi_126
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn000000000040ACB0_exit:
// DataOut: r12 r13 r14 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn000000000040ADB0(word64 rdi, word64 r8, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi xmm0 xmm1 xmm2 xmm3
// LiveOut: al rax xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax eax rax xmm0 xmm1 xmm2 xmm3
// Preserved: rsp
fn000000000040ADB0_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ADB0:
	word64 rax_4 = Mem0[rdi:word64]
	branch r8 == 0x0000000000415EE0 l000000000040AE30
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE30:
// DataOut: al fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADBB:
	word128 xmm0_34 = DPB(xmm0, Mem0[rax_4 + 0x0000000000000008:real32], 0)
	*xmm0Out = xmm0_34
	branch Mem0[rax_4 + 0x0000000000000008:real32] <=u Mem0[0x0000000000415EF4:real32] l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADC9:
	word128 xmm1_50
	*xmm1Out = DPB(xmm1, Mem0[0x0000000000415EF8:real32], 0)
	branch Mem0[0x0000000000415EF8:real32] <=u xmm0_34 l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid>

l000000000040ADD6:
	word128 xmm1_53
	*xmm1Out = DPB(xmm1, Mem0[rax_4 + 0x000000000000000C:real32], 0)
	branch Mem0[rax_4 + 0x000000000000000C:real32] <=u Mem0[0x0000000000415EFC:real32] l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADE4:
	word128 xmm1_56
	*xmm1Out = DPB(xmm1, Mem0[rax_4:real32], 0)
	branch Mem0[rax_4:real32] <u Mem0[0x0000000000415F00:real32] l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADF1:
	word128 xmm1_60 = DPB(xmm1, Mem0[rax_4:real32] + Mem0[0x0000000000415EF4:real32], 0)
	*xmm1Out = xmm1_60
	word128 xmm2_61 = DPB(xmm2, Mem0[rax_4 + 0x0000000000000004:real32], 0)
	*xmm2Out = xmm2_61
	branch Mem0[rax_4 + 0x0000000000000004:real32] <=u xmm1_60 l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040AE03:
	word128 xmm3_64
	*xmm3Out = DPB(xmm3, Mem0[0x0000000000415F04:real32], 0)
	branch Mem0[0x0000000000415F04:real32] <u xmm2_61 l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid>

l000000000040AE10:
	branch Mem0[rax_4 + 0x0000000000000008:real32] >u xmm1_60 l000000000040AE35
// DataOut: al fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE35:
	return 0x0000000000000001
// DataOut: al fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE1A:
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE20:
	Mem45[rdi:word64] = 0x0000000000415EE0
	return 0x0000000000000000
// DataOut: al fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

fn000000000040ADB0_exit:
// DataOut: al rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>



word64 fn000000000040AE40(word64 rax, word32 edx, word64 rbp, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rbp rdi rsi
// LiveOut: al eax ebp r12 r13 r14 r15 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AE40_entry:
// DataOut: dl edx fs r11 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	word64 r15_6 = (uint64) edx
	*r15Out = r15_6
	byte r15b_8 = (byte) r15_6
	word64 r14_12
	*r14Out = rsi
	word64 r12_19
	*r12Out = rdi
	word64 rsp_114 = fp - 0x0000000000000020
	word64 r13_115 = Mem0[rsi:word64]
	*r13Out = r13_115
	branch r13_115 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE64:
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE71:
	word64 rbx_118 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_118 != 0x0000000000000000 l000000000040AE94
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE94:
	word64 rbp_208 = Mem0[rbx_118:word64]
	word64 rsi_212
	rax = fn000000000040AC80(rax, rdi, out rsp_114, out rsi_212)
	word64 rdx_217 = Mem0[rbx_118 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE80:
	Mem248[rbx_118 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem249[rax + 0x0000000000000008:word64] = rbx_118
	branch rdx_217 == 0x0000000000000000 l000000000040AED0
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEAC:
	Mem233[rax:word64] = rbp_208
	Mem235[rdi + 0x0000000000000018:word64] = Mem233[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem239[rbx_118:word64] = 0x0000000000000000
	rax = Mem239[rdi + 0x0000000000000048:word64]
	Mem242[rbx_118 + 0x0000000000000008:word64] = rax
	Mem243[rdi + 0x0000000000000048:word64] = rbx_118
	branch rdx_217 != 0x0000000000000000 l000000000040AE91
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE91:
	rbx_118 = rdx_217
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AECF:
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED0:
	rbp = Mem0[rbp_208:word64]
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE7A:
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED4:
	Mem136[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF08:
	word64 rsi_140
	rax = fn000000000040AC80(rax, rdi, out rsp_114, out rsi_140)
	branch Mem136[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF5B:
	Mem199[rax:word64] = rbp
	Mem201[rdi + 0x0000000000000018:word64] = Mem199[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF1C:
	rax = Mem136[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF75:
	word64 rsp_191 = Mem136[rsp_114 + 0x0000000000000018:word64]
	word64 rbp_193
	*rbpOut = Mem136[rsp_191 + 0x0000000000000008:word64]
	word64 rsi_195
	*rsiOut = Mem136[rsp_191 + 0x0000000000000010:word64]
	word64 rsp_198
	*rspOut = rsp_191 + 0x0000000000000020
	return 0x0000000000000000
// DataOut: al eax ebp fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF26:
	Mem175[rdi + 0x0000000000000048:word64] = Mem136[rax + 0x0000000000000008:word64]
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF2F:
	word64 rdx_170 = Mem136[rax + 0x0000000000000008:word64]
	Mem171[rax:word64] = rbp
	Mem172[rax + 0x0000000000000008:word64] = rdx_170
	Mem173[rax + 0x0000000000000008:word64] = rax
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF3E:
	Mem153[rbp:word64] = 0x0000000000000000
	Mem155[rsi_140 + 0x0000000000000018:word64] = Mem153[rsi_140 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_115 = r13_115 + 0x0000000000000010
	*r13Out = r13_115
	branch Mem155[rsi + 0x0000000000000008:word64] >u r13_115 l000000000040AE68
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF59:
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEE1:
	r13_115 = r13_115 + 0x0000000000000010
	*r13Out = r13_115
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_115 l000000000040AE68
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEEF:
	word64 rsp_75 = Mem0[rsp_114 + 0x0000000000000018:word64]
	word64 rbp_77
	*rbpOut = Mem0[rsp_75 + 0x0000000000000008:word64]
	word64 rsi_79
	*rsiOut = Mem0[rsp_75 + 0x0000000000000010:word64]
	word64 rsp_82
	*rspOut = rsp_75 + 0x0000000000000020
	return 0x0000000000000001
// DataOut: al eax ebp fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040AE40_exit:
// DataOut: al eax ebp r12 r13 r14 r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rax:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: r13 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return Mem0[rdi + 0x0000000000000020:word64]
// DataOut: r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040B400(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r12 r12d r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040B400_entry:
	*r8Out = r8
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r9Out = r9
// DataOut: ebx fs r11 r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B400:
	word64 r15_197 = rdi
	*r15Out = r15_197
	word32 r15d_7 = (word32) rdi
	word64 r14_13
	*r14Out = r8
	word64 r13_18 = rdx
	word64 r12_23
	*r12Out = rcx
	word64 rbp_122 = rsi
	branch rdx != 0x0000000000000000 l000000000040B42E
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B42A_1:
	r13_18 = 0x000000000040AC60
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:rdx r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B42E:
	branch rcx != 0x0000000000000000 l000000000040B43A
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B436_1:
	*r12Out = 0x000000000040AC70
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B43A:
	word64 rax_235
	word64 rax_40 = malloc(0x0000000000000050)
	branch rax_40 == 0x0000000000000000 l000000000040B598
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B598:
	rax_235 = 0x0000000000000000
// DataOut: eax fs r11 r12 r12d r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B44B:
	branch rsi != 0x0000000000000000 l000000000040B45B
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B457_1:
	rbp_122 = 0x0000000000415EE0
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B45B:
	Mem123[rax_40 + 0x0000000000000028:word64] = rbp_122
	word128 xmm0_128
	word128 xmm1_129
	word128 xmm2_130
	word128 xmm3_131
	word64 rax_132 = fn000000000040ADB0(rax_40 + 0x0000000000000028, r8, xmm0, xmm1, xmm2, xmm3, out xmm0_128, out xmm1_129, out xmm2_130, out xmm3_131)
	branch (byte) rax_132 == 0x00 l000000000040B548
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B46C:
	word64 r8_199
	word128 xmm1_175 = DPB(xmm1_129, Mem123[rbp_122 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_175
	r8_199 = r8
	branch Mem123[rbp_122 + 0x0000000000000010:byte] != 0x00 l000000000040B4C0
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B477:
	word128 xmm0_242
	branch rdi < 0x0000000000000000 l000000000040B578
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B578:
	r15_197 = (uint64) (r15d_7 & 0x00000001)
	*r15Out = r15_197
	rax_132 = rdi >>u 0x0000000000000001 | r15_197
	real32 v34_277 = (real32) rax_132
	xmm0_242 = DPB(xmm0_128, v34_277 + DPB(xmm0_128, v34_277, 0), 0)
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B480:
	xmm0_242 = DPB(xmm0_128, (real32) rdi, 0)
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B485:
	real32 v27_249 = (real32) xmm0_242 / xmm1_175
	word128 xmm0_250
	*xmm0Out = DPB(xmm0_242, v27_249, 0)
	branch v27_249 >=u Mem123[0x0000000000415F08:real32] l000000000040B540
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B496:
	branch v27_249 <u Mem123[0x0000000000415F0C:real32] l000000000040B568
// DataOut: fs r11 r12 r12d r13 r14 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B568:
	*r15Out = DPB(r15_197, v27_249, 0)
	r8_199 = r8
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B4A3:
	real32 v29_255 = v27_249 - Mem123[0x0000000000415F0C:real32]
	word128 xmm0_256
	*xmm0Out = DPB(xmm0_242, v29_255, 0)
	r8_199 = 0x0000000000000000
	*r15Out = DPB(r15_197, v29_255, 0) ^ rax_132
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B4C0:
	word64 rsi_205
	word64 r9_206
	word64 rax_207 = fn000000000040ABC0(r15_197, r8_199, out rsi_205, out r9_206)
	word64 r8_209 = 0x00000000FFFFFFFF
	*r8Out = r8_209
	branch rax_207 >u rax_207 l000000000040B540
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r8:0x0000000000000000 r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B540:
	Mem193[rax_40 + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: fs r11 r12 r12d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B4DA:
	Mem215[rax_40 + 0x0000000000000010:word64] = rax_207
	branch rax_207 == 0x0000000000000000 l000000000040B548
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B4E3:
	word64 rax_218 = calloc(rax_207, 0x0000000000000010)
	Mem224[rax_40:word64] = rax_218
	branch rax_218 == 0x0000000000000000 l000000000040B548
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B548:
	free(rax_40)
	word64 rbp_167
	*rbpOut = Mem123[qwLoc08 + 0x0000000000000008:word64]
	return 0x0000000000000000
// DataOut: eax ebx fs r11 r12 r12d r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040B4F8:
	Mem226[rax_40 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem227[rax_40 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem230[r11 + 0x0000000000000030:word64] = r13_18
	Mem232[r11 + 0x0000000000000038:word64] = r12_23
	Mem233[rax_40 + 0x0000000000000008:word64] = rax_218 + (rax_207 << 0x0000000000000004)
	Mem234[r11 + 0x0000000000000040:word64] = r8
	Mem238[rax_40 + 0x0000000000000048:word64] = 0x0000000000000000
	rax_235 = rax_40
// DataOut: eax fs r11 r12 r12d r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B52A:
	word64 rbp_110
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rax_235
// DataOut: eax ebx fs r11 r12 r12d r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040B400_exit:
// DataOut: eax r12 r12d r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:rbx rsi:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040B640(word64 rdi, word64 r13, word64 r15, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl eax ebp esp r12 r12b r12d r12w rax rbp rsp sp spl
// Preserved: rbx rdi
// Stack args: Stack +0004(64)
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B640:
	word64 rax_119
	word64 rbp_102 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6C6:
	word64 r12_111 = Mem0[r15:word64]
	branch r12_111 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6D0:
	word64 rdi_104 = Mem0[r12_111:word64]
	branch rdi_104 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6E3:
	word64 rsp_123
	word64 rdi_125
	word64 rbx_126
	byte SCZO_127
	byte Z_128
	word64 rax_129
	byte C_132
	byte SZO_133
	byte CZ_134
	word64 r15_135
	call Mem0[rbp_102 + 0x0000000000000040:word32] (retsize: 4; depth: 16)
		uses: C_108,CZ_101,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_99,r13_97,r15_96,rax_98,rbp_102,rbx_105,rdi_104,rsp_103,SCZO_100,SZO_106,Z_107
		defs: C_132,CZ_134,r12_130,r13_131,r15_135,rax_129,rbp_124,rbx_126,rdi_125,rsp_123,SCZO_127,SZO_133,Z_128
	branch Mem0[rbx_126 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6EF:
	rax_119 = Mem0[rbp_102 + 0x0000000000000008:word64]
	r12_111 = r12_111 + 0x0000000000000010
	branch rax_119 >u r12_111 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B655:
	rax_119 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B659:
	word64 r12_58 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_58 >=u rax_119 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B668:
	word64 rdi_65 = Mem0[r12_58 + 0x0000000000000000:word64]
	branch rdi_65 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B67B:
	word64 rbx_78 = Mem0[rdi_65 + 0x0000000000000008:word64]
	free(rdi_65)
	branch rbx_78 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B678:
	rdi_65 = rbx_78
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B689:
	r12_58 = r12_58 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_58 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B693:
	word64 rdi_25 = Mem0[rbp_102 + 0x0000000000000048:word64]
	branch rdi_25 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6A3:
	word64 rbx_43 = Mem0[rdi_25 + 0x0000000000000008:word64]
	free(rdi_25)
	branch rbx_43 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6A0:
	rdi_25 = rbx_43
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6B1:
	free(Mem0[rbp_102:word64])
	free(rbp_102)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp r12:<invalid> rax:<invalid> rdi:rdi rbx:rbx -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040B710(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word64 qwArg04, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi r11 r8 rax rdi rsi xmm0 xmm1
// LiveOut: al r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040B710_entry:
	*xmm0Out = xmm0
	*r8Out = r8
	*rsiOut = rsi
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
	*r9Out = r9
	*r12Out = r12
// DataOut: esi fs r11 r12 r13 r14 r15 r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B710:
	word64 rbp_15 = Mem0[rdi + 0x0000000000000028:word64]
	word128 xmm1_20 = DPB(xmm1, Mem0[rbp_15 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_20
	branch Mem0[rbp_15 + 0x0000000000000010:byte] != 0x00 l000000000040B770
// DataOut: esi fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B72A:
	word128 xmm0_298
	branch rsi < 0x0000000000000000 l000000000040B8D0
// DataOut: esi fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B8D0:
	rsi = (uint64) (esi & 0x00000001)
	*rsiOut = rsi
	rax = rsi >>u 0x0000000000000001 | rsi
	real32 v30_338 = (real32) rax
	xmm0_298 = DPB(xmm0, v30_338 + DPB(xmm0, v30_338, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B733:
	xmm0_298 = DPB(xmm0, (real32) rsi, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B738:
	real32 v16_305 = (real32) xmm0_298 / xmm1_20
	word128 xmm0_306
	*xmm0Out = DPB(xmm0_298, v16_305, 0)
	branch v16_305 >=u Mem0[0x0000000000415F08:real32] l000000000040B870
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B749:
	branch v16_305 <u Mem0[0x0000000000415F0C:real32] l000000000040B880
// DataOut: fs r11 r13 r14 r15 r8 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B880:
	rsi = DPB(rsi, v16_305, 0) (alias)
// DataOut: fs r11 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B756:
	real32 v18_315 = v16_305 - Mem0[0x0000000000415F0C:real32]
	word128 xmm0_316
	*xmm0Out = DPB(xmm0_298, v18_315, 0)
	r8 = 0x0000000000000000
	rsi = DPB(rsi, v18_315, 0) ^ rax
// DataOut: fs r11 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B770:
	word64 rsi_133
	word64 r9_134
	word64 rax_135 = fn000000000040ABC0(rsi, r8, out rsi_133, out r9_134)
	word64 r12_137 = rax_135
	*r12Out = r12_137
	word64 r8_138 = 0x00000000FFFFFFFE
	*r8Out = r8_138
	branch rax_135 - 0x0000000000000001 >u rax_135 l000000000040B870
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> r8:0x0000000000000000 esi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B792:
	branch Mem0[r11 + 0x0000000000000010:word64] == rax_135 l000000000040B860
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B860:
	word64 rbp_290
	*rbpOut = fp
	word64 rsp_294
	*rspOut = qwArg04 + 0x0000000000000008
	return 0x0000000000000001
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B79C:
	word64 rsi_145
	*rsiOut = 0x0000000000000010
	branch calloc(rax_135, 0x0000000000000010) == 0x0000000000000000 l000000000040B870
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B870:
	word64 rbp_103
	*rbpOut = fp
	word64 rsp_108
	*rspOut = qwArg04 + 0x0000000000000008
	return 0x0000000000000000
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE xmm0:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B7B6:
	word64 rsp_176
	word64 rbp_177
	word64 rsi_178
	word64 r12_179
	word64 r13_180
	word64 r14_181
	word64 r15_182
	word64 rax_183 = fn000000000040AE40(Mem0[rdi + 0x0000000000000048:word64], 0x00000000, rbp_15, rdi, fp - 0x000000000000005C, out rsp_176, out rbp_177, out rsi_178, out r12_179, out r13_180, out r14_181, out r15_182)
	word64 rbp_189 = (uint64) (word32) rax_183
	word32 ebp_190 = (word32) rbp_189
	branch (byte) rax_183 != 0x00 l000000000040B890
// DataOut: ebp fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:0x0000000000000010 rax:<invalid> xmm0:<invalid> esi:0x00000010 r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B890:
	free(Mem0[rdi:word64])
	Mem260[rdi:word64] = Mem0[rsp_176:word64]
	Mem262[rdi + 0x0000000000000008:word64] = Mem260[rsp_176 + 0x0000000000000008:word64]
	Mem264[rdi + 0x0000000000000010:word64] = Mem262[rsp_176 + 0x0000000000000010:word64]
	Mem266[rdi + 0x0000000000000018:word64] = Mem264[rsp_176 + 0x0000000000000018:word64]
	Mem268[rdi + 0x0000000000000048:word64] = Mem266[rsp_176 + 0x0000000000000048:word64]
	word64 rbp_276
	*rbpOut = Mem268[rsp_176 + 0x0000000000000058:word64]
	word64 rsp_280
	*rspOut = Mem268[rsp_176 + 0x0000000000000060:word64] + 0x0000000000000008
	return (uint64) ebp_190
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B815:
	word64 rax_191 = Mem0[rsp_176 + 0x0000000000000048:word64]
	Mem196[rdi + 0x0000000000000048:word64] = rax_191
	word64 rsp_197
	word64 rbp_198
	word64 rsi_199
	word64 r12_200
	word64 r13_201
	word64 r14_202
	word64 r15_203
	word64 rax_204 = fn000000000040AE40(rax_191, 0x00000001, rbp_189, rsp_176, rdi, out rsp_197, out rbp_198, out rsi_199, out r12_200, out r13_201, out r14_202, out r15_203)
	branch (byte) rax_204 == 0x00 l000000000040B8EA
// DataOut: fs r11 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B836:
	word64 rsp_233
	word64 rbp_234
	word64 rsi_235
	word64 r12_236
	word64 r13_237
	word64 r14_238
	word64 r15_239
	branch (byte) fn000000000040AE40(rax_204, 0x00000000, rbp_198, rsp_197, rdi, out rsp_233, out rbp_234, out rsi_235, out r12_236, out r13_237, out r14_238, out r15_239) == 0x00 l000000000040B8EA
// DataOut: ebp fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B8EA:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B84B:
	free(Mem196[rsp_233:word64])
	word64 rbp_253
	*rbpOut = Mem196[rsp_233 + 0x0000000000000058:word64]
	word64 rsp_257
	*rspOut = Mem196[rsp_233 + 0x0000000000000060:word64] + 0x0000000000000008
	return (uint64) ebp_190
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B710_exit:
// DataOut: al r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rax:(uint64) ebp xmm0:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn000000000040B8F0(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040B8F0_entry:
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r8Out = r8
	*r15Out = r15
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: fs r11 r15 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B8F0:
	branch rsi == 0x0000000000000000 l000000000040BA67
// DataOut: fs r11 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040B904:
	word32 eax_152
	word64 rsi_78
	word64 r9_79
	word64 r12_80
	word64 r13_81
	word64 r14_82
	word64 rbp_261
	word64 rsp_156
	word64 rax_83 = fn000000000040ACB0(rax, 0x00000000, rsi, rdi, r8, r11, out rsp_156, out rbp_261, out rsi_78, out r9_79, out r12_80, out r13_81, out r14_82)
	branch rax_83 == 0x0000000000000000 l000000000040B938
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000001C rbp:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B938:
	word128 xmm0_193
	word64 rax_187 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_188 = (word32) rax_187
	branch rax_187 < 0x0000000000000000 l000000000040BA70
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA70:
	real32 v27_456 = (real32) (rax_187 >>u 0x0000000000000001 | (uint64) (eax_188 & 0x00000001))
	*xmm0Out = DPB(xmm0, v27_456 + DPB(xmm0, v27_456, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B945:
	*xmm0Out = DPB(xmm0, (real32) rax_187, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B94A:
	word128 xmm1_201
	word64 rax_194 = Mem0[rdi + 0x0000000000000010:word64]
	word32 eax_195 = (word32) rax_194
	word64 rdx_197 = Mem0[rdi + 0x0000000000000028:word64]
	branch rax_194 < 0x0000000000000000 l000000000040BA90
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA90:
	real32 v47_444 = (real32) (rax_194 >>u 0x0000000000000001 | (uint64) (eax_195 & 0x00000001))
	xmm1_201 = DPB(xmm1, v47_444 + DPB(xmm1, v47_444, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B95B:
	xmm1_201 = DPB(xmm1, (real32) rax_194, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B960:
	word128 xmm1_207 = DPB(xmm1_201, (real32) xmm1_201 * Mem0[rdx_197 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_207
	branch (real32) xmm0_193 >u xmm1_207 l000000000040B9C8
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9C8:
	word128 xmm0_326
	word128 xmm0_313
	word128 xmm1_314
	word128 xmm2_315
	word128 xmm3_316
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_193, xmm1_207, xmm2, xmm3, out xmm0_313, out xmm1_314, out xmm2_315, out xmm3_316)
	word64 rax_318 = Mem0[rdi + 0x0000000000000010:word64]
	word64 rdx_321 = Mem0[rdi + 0x0000000000000028:word64]
	word32 eax_319 = (word32) rax_318
	word128 xmm2_325 = DPB(xmm2_315, Mem0[rdx_321 + 0x0000000000000008:real32], 0)
	*xmm2Out = xmm2_325
	branch rax_318 < 0x0000000000000000 l000000000040BAE7
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BAE7:
	real32 v45_432 = (real32) (rax_318 >>u 0x0000000000000001 | (uint64) (eax_319 & 0x00000001))
	*xmm0Out = DPB(xmm0_313, v45_432 + DPB(xmm0_313, v45_432, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9E7:
	*xmm0Out = DPB(xmm0_313, (real32) rax_318, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9EC:
	word128 xmm1_334
	word64 rax_328 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_329 = (word32) rax_328
	branch rax_328 < 0x0000000000000000 l000000000040BB01
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BB01:
	rax_328 = (uint64) (eax_329 & 0x00000001)
	real32 v41_420 = (real32) (rax_328 >>u 0x0000000000000001 | rax_328)
	*xmm1Out = DPB(xmm1_314, v41_420 + DPB(xmm1_314, v41_420, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9F9:
	*xmm1Out = DPB(xmm1_314, (real32) rax_328, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9FE:
	word128 xmm3_343 = DPB(xmm2_315, Mem0[rdx_321 + 0x0000000000000008:real32] * xmm0_326, 0)
	*xmm3Out = xmm3_343
	branch (real32) xmm1_334 <=u xmm3_343 l000000000040B96A
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA0E:
	real32 v37_348 = (real32) xmm0_326 * Mem0[rdx_321 + 0x000000000000000C:real32]
	word128 xmm0_349
	*xmm0Out = DPB(xmm0_326, v37_348, 0)
	branch Mem0[rdx_321 + 0x0000000000000010:byte] != 0x00 l000000000040BA1D
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA19:
	*xmm0Out = DPB(xmm0_326, v37_348 * xmm2_325, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA1D:
	branch (real32) xmm0_349 >=u Mem0[0x0000000000415F08:real32] l000000000040BB2E
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA2A:
	word64 rsi_358
	branch (real32) xmm0_349 >=u Mem0[0x0000000000415F0C:real32] l000000000040BAC8
// DataOut: fs r11 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BAC8:
	real32 v43_399 = (real32) xmm0_349 - Mem0[0x0000000000415F0C:real32]
	xmm0_349 = DPB(xmm0_349, v43_399, 0)
	r8 = 0x0000000000000000
	rsi_358 = DPB(rsi_78, v43_399, 0) ^ rax_328
// DataOut: esi fs r11 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA37:
	rsi_358 = DPB(rsi_78, (int32) xmm0_349, 0) (alias)
// DataOut: esi fs r11 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA3C:
	word64 rbp_362
	word64 rsi_363
	word64 r8_364
	word64 r9_365
	word64 r12_366
	word64 r13_367
	word64 r14_368
	word64 r15_369
	word128 xmm0_370
	word128 xmm1_371
	word64 rax_372 = fn000000000040B710(rax_328, rsi_358, rdi, r8, r11, xmm0_349, xmm1_334, qwLoc04, out rsp_156, out rbp_362, out rsi_363, out r8_364, out r9_365, out r12_366, out r13_367, out r14_368, out r15_369, out xmm0_370, out xmm1_371)
	branch (byte) rax_372 == 0x00 l000000000040BB2E
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x0000000000000000 rsi:<invalid> r14:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BA4C:
	word64 rsi_388
	word64 r9_389
	word64 r12_390
	word64 r13_391
	word64 r14_392
	branch fn000000000040ACB0(rax_372, 0x00000000, rbp_362, rdi, r8_364, r11, out rsp_156, out rbp_261, out rsi_388, out r9_389, out r12_390, out r13_391, out r14_392) == 0x0000000000000000 l000000000040B96A
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BA67:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B96A:
	word64 r12_263 = Mem0[rsp_156 + 0x0000000000000008:word64]
	*r12Out = r12_263
	branch Mem0[r12_263:word64] == 0x0000000000000000 l000000000040BAB0
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BAB0:
	Mem303[r12_263:word64] = rbp_261
	Mem308[rdi + 0x0000000000000020:word64] = Mem303[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	Mem310[rdi + 0x0000000000000018:word64] = Mem308[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	eax_152 = 0x00000001 (alias)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B97A:
	word64 rax_266 = Mem0[rdi + 0x0000000000000048:word64]
	branch rax_266 == 0x0000000000000000 l000000000040BB1B
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BB1B:
	rax_266 = malloc(0x0000000000000010)
	branch rax_266 != 0x0000000000000000 l000000000040B98F
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BB2E:
	eax_152 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B987:
	Mem295[rdi + 0x0000000000000048:word64] = Mem0[rax_266 + 0x0000000000000008:word64]
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B98F:
	word64 rdx_277 = Mem0[r12_263 + 0x0000000000000008:word64]
	Mem278[rax_266:word64] = rbp_261
	Mem279[rax_266 + 0x0000000000000008:word64] = rdx_277
	Mem280[r12_263 + 0x0000000000000008:word64] = rax_266
	Mem285[rdi + 0x0000000000000020:word64] = Mem280[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	word64 rsp_286 = rsp_156 + 0x0000000000000010
	word64 rbp_290
	*rbpOut = Mem285[rsp_286 + 0x0000000000000008:word64]
	word64 rsp_293
	*rspOut = Mem285[rsp_286 + 0x0000000000000010:word64] + 0x0000000000000008
	return 0x00000001
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B91B:
	branch r12_80 == 0x0000000000000000 l000000000040B9B8
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B9B8:
	word64 rbp_183
	*rbpOut = Mem0[rsp_156 + 0x0000000000000018:word64]
	word64 rsp_186
	*rspOut = Mem0[rsp_156 + 0x0000000000000020:word64] + 0x0000000000000008
	return 0x00000000
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B924:
	Mem169[r12_80:word64] = rax_83
	eax_152 = 0x00000000 (alias)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B92A:
	word64 rsp_157 = rsp_156 + 0x0000000000000010
	word64 rbp_162
	*rbpOut = Mem0[rsp_157 + 0x0000000000000008:word64]
	word64 rsp_165
	*rspOut = Mem0[rsp_157 + 0x0000000000000010:word64] + 0x0000000000000008
	return eax_152
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B8F0_exit:
// DataOut: eax r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040BB50(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax ebx r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040BB50_entry:
// DataOut: fs r11 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB50:
	word64 rax_40
	word64 rsp_20
	word64 rbp_21
	word64 rsi_22
	word64 r8_23
	word64 r9_24
	word64 r12_25
	word64 r13_26
	word64 r14_27
	word64 r15_28
	word128 xmm0_29
	word128 xmm1_30
	word128 xmm2_31
	word128 xmm3_32
	word32 eax_33 = fn000000000040B8F0(rax, rbp, rsi, rdi, r8, r11, xmm0, xmm1, xmm2, xmm3, out rsp_20, out rbp_21, out rsi_22, out r8_23, out r9_24, out r12_25, out r13_26, out r14_27, out r15_28, out xmm0_29, out xmm1_30, out xmm2_31, out xmm3_32)
	branch eax_33 == 0xFFFFFFFF l000000000040BB80
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040BB80:
	rax_40 = 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx

l000000000040BB67:
	rax_40 = rsi
	branch eax_33 != 0x00000000 l000000000040BB72
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx

l000000000040BB6C_1:
	rax_40 = Mem0[rsp_20 + 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx

l000000000040BB72:
	word32 ebx_46
	*ebxOut = (word32) Mem0[rsp_20 + 0x0000000000000010:word64]
	word64 rsp_47
	*rspOut = rsp_20 + 0x0000000000000018
	return rax_40
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx

fn000000000040BB50_exit:
// DataOut: eax ebx r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx



word64 fn000000000040BB90(word64 rax, byte bpl, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rspOut, ptr64 & bplOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r13Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl r11 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: bpl r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040BB90_entry:
	*r8Out = r8
	*xmm3Out = xmm3
	*xmm2Out = xmm2
	*r15Out = r15
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: bpl fs r11 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB90:
	word64 rbp_23
	word64 rsi_24
	word64 r9_25
	word64 r12_26
	word64 r13_27
	word64 r14_28
	word64 rsp_102
	word64 rax_100 = fn000000000040ACB0(rax, 0x00000001, rsi, rdi, r8, r11, out rsp_102, out rbp_23, out rsi_24, out r9_25, out r12_26, out r13_27, out r14_28)
	branch rax_100 == 0x0000000000000000 l000000000040BD08
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD08:
	rax_100 = 0x0000000000000000
// DataOut: fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBB6:
	word64 rdx_113 = Mem0[rsp_102 + 0x0000000000000008:word64]
	Mem115[rdi + 0x0000000000000020:word64] = Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem115[rdx_113:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBD0:
	word128 xmm0_136
	word64 rax_129 = Mem115[rdi + 0x0000000000000018:word64]
	Mem135[rdi + 0x0000000000000018:word64] = rax_129 - 0x0000000000000001
	word32 eax_131 = (word32) (rax_129 - 0x0000000000000001)
	branch rax_129 < 0x0000000000000001 l000000000040BCE8
// DataOut: eax fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BCE8:
	real32 v25_319 = (real32) (rax_129 - 0x0000000000000001 >>u 0x0000000000000001 | (uint64) (eax_131 & 0x00000001))
	*xmm0Out = DPB(xmm0, v25_319 + DPB(xmm0, v25_319, 0), 0)
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBE5:
	*xmm0Out = DPB(xmm0, (real32) (rax_129 - 0x0000000000000001), 0)
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBEA:
	word128 xmm1_146
	word64 rax_137 = Mem135[rdi + 0x0000000000000010:word64]
	word32 eax_138 = (word32) rax_137
	word64 rdx_139 = Mem135[rdi + 0x0000000000000028:word64]
	branch rax_137 < 0x0000000000000000 l000000000040BCC8
// DataOut: eax fs r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BCC8:
	real32 v33_307 = (real32) (rax_137 >>u 0x0000000000000001 | (uint64) (eax_138 & 0x00000001))
	xmm1_146 = DPB(xmm1, v33_307 + DPB(xmm1, v33_307, 0), 0)
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBFB:
	xmm1_146 = DPB(xmm1, (real32) rax_137, 0)
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC00:
	real32 v22_150 = (real32) xmm1_146 * Mem135[rdx_139:real32]
	word128 xmm1_151 = DPB(xmm1_146, v22_150, 0)
	*xmm1Out = xmm1_151
	branch v22_150 >u xmm0_136 l000000000040BC18
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC18:
	word128 xmm0_194
	word128 xmm0_180
	word128 xmm1_181
	word128 xmm2_182
	word128 xmm3_183
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_136, xmm1_151, xmm2, xmm3, out xmm0_180, out xmm1_181, out xmm2_182, out xmm3_183)
	word64 rdx_185 = Mem135[rdi + 0x0000000000000010:word64]
	word32 edx_186 = (word32) rdx_185
	word64 rax_188 = Mem135[rdi + 0x0000000000000028:word64]
	branch rdx_185 < 0x0000000000000000 l000000000040BD2F
// DataOut: edx fs r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD2F:
	real32 v36_295 = (real32) (rdx_185 >>u 0x0000000000000001 | (uint64) (edx_186 & 0x00000001))
	*xmm0Out = DPB(xmm0_180, v36_295 + DPB(xmm0_180, v36_295, 0), 0)
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC32:
	*xmm0Out = DPB(xmm0_180, (real32) rdx_185, 0)
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC37:
	word128 xmm1_202
	word64 rdx_195 = Mem135[rdi + 0x0000000000000018:word64]
	word32 edx_196 = (word32) rdx_195
	branch rdx_195 < 0x0000000000000000 l000000000040BD49
// DataOut: edx fs r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD49:
	real32 v38_283 = (real32) (rdx_195 >>u 0x0000000000000001 | (uint64) (edx_196 & 0x00000001))
	*xmm1Out = DPB(xmm1_181, v38_283 + DPB(xmm1_181, v38_283, 0), 0)
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC44:
	*xmm1Out = DPB(xmm1_181, (real32) rdx_195, 0)
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC49:
	real32 v30_207 = Mem135[rax_188:real32] * xmm0_194
	word128 xmm2_208
	*xmm2Out = DPB(xmm2_182, v30_207, 0)
	branch v30_207 <=u xmm1_202 l000000000040BC09
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC56:
	real32 v31_213 = (real32) xmm0_194 * Mem135[rax_188 + 0x0000000000000004:real32]
	word128 xmm0_214 = DPB(xmm0_194, v31_213, 0)
	branch Mem135[rax_188 + 0x0000000000000010:byte] != 0x00 l000000000040BC66
// DataOut: fs r11 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC61:
	xmm0_214 = DPB(xmm0_194, v31_213 * Mem135[rax_188 + 0x0000000000000008:real32], 0)
// DataOut: fs r11 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC66:
	word64 rsi_219
	branch (real32) xmm0_214 >=u Mem135[0x0000000000415F0C:real32] l000000000040BD10
// DataOut: fs r11 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD10:
	real32 v42_264 = (real32) xmm0_214 - Mem135[0x0000000000415F0C:real32]
	xmm0_214 = DPB(xmm0_214, v42_264, 0)
	r8 = 0x0000000000000000
	rsi_219 = DPB(rsi_24, v42_264, 0) ^ rax_188
// DataOut: esi fs r11 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC73:
	rsi_219 = DPB(rsi_24, (int32) xmm0_214, 0) (alias)
// DataOut: esi fs r11 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC78:
	rax_100 = rbp_225
	word64 rbp_225
	word64 rsi_226
	word64 r8_227
	word64 r9_228
	word64 r12_229
	word64 r13_230
	word64 r14_231
	word64 r15_232
	word128 xmm0_233
	word128 xmm1_234
	branch (byte) (uint64) (word32) fn000000000040B710(rax_188, rsi_219, rdi, r8, r11, xmm0_214, xmm1_202, qwLoc04, out rsp_102, out rbp_225, out rsi_226, out r8_227, out r9_228, out r12_229, out r13_230, out r14_231, out r15_232, out xmm0_233, out xmm1_234) != 0x00 l000000000040BBC6
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x0000000000000000 rsi:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BC8D:
	word64 rdi_244 = Mem135[rdi + 0x0000000000000048:word64]
	branch rdi_244 != 0x0000000000000000 l000000000040BCA3
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCA3:
	word64 r12_257 = Mem135[r15_232 + 0x0000000000000008:word64]
	free(rdi_244)
	branch r12_257 != 0x0000000000000000 l000000000040BCA0
// DataOut: fs r11 r12 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCA0:
	rdi_244 = r12_257
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BC96:
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCB1:
	Mem253[rdi + 0x0000000000000048:word64] = 0x0000000000000000
	rax_100 = rbp_225
// DataOut: fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BC09:
	byte bpl_175
	*bplOut = (byte) Mem135[rsp_102 + 0x0000000000000018:word64]
	word64 rsp_178
	*rspOut = Mem135[rsp_102 + 0x0000000000000020:word64] + 0x0000000000000008
	return rax_100
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBC6:
	word64 rsp_103 = rsp_102 + 0x0000000000000010
	byte bpl_109
	*bplOut = (byte) Mem0[rsp_103 + 0x0000000000000008:word64]
	word64 rsp_112
	*rspOut = Mem0[rsp_103 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_100
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040BB90_exit:
// DataOut: bpl r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: bpl r11 r11d r13 r14d r15 r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BD70_entry:
	def fp
	def rdi
	def edx
	def rsi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocB0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def rspOut
	def rbpOut
	def r8Out
	def r9Out
	def r11Out
	def r13Out
	def r14dOut
	def r15Out
	def dwLoc74
	def qwLoc90
	def qwLoc98
	def r9
	def r9d
	def rLoc4
	def P
	def wLoc6A
	def wLoc6C
	def rLoc90
	def rLoc3
	def rLoc2
	def qwLoc68
	def rLoc1
	def rLocD0
	def sil
	def r10d
	def r10b
	def esi
	def r10
	def ecx
	def cl
	def ah
	def ax
	def al
// DataOut: edx fs r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = rdi
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 0x0000000000000008
	dwLoc08_12 = rsi
	r14_13 = rsi
	r14d_14 = (word32) r14_13 (alias)
	rsp_15 = fp - 0x000000000000000C
	dwLoc0C_17 = rbp
	v12_18 = fp - 0x000000000000000C
	rsp_19 = fp - 0x0000000000000010
	dwLoc10_20 = fp - 0x000000000000000C
	r12_21 = rdi
	r12d_22 = (word32) r12_21 (alias)
	rsp_23 = fp - 0x0000000000000014
	dwLoc14_24 = rbp
	rsp_25 = fp - 0x0000000000000018
	dwLoc18_27 = rbx
	rbx_29 = rcx
	ebx_30 = (word32) rbx_29 (alias)
	rsp_31 = fp - 0x00000000000000D0
	dwLoc98_32 = eax_9
	rax_33 = (uint64) edx
	eax_34 = (word32) rax_33 (alias)
	qwLocA0_35 = rsi
	rax_36 = (uint64) (eax_34 & 0x00000020)
	eax_37 = (word32) rax_36 (alias)
	dwLocB0_38 = edx
	qwLocA8_40 = r8
	rcx_43 = Mem0[fs:0x00000028:word64]
	qwLoc28_44 = rcx_43
	rcx_45 = 0x0000000000000000
	SCZO_46 = cond(eax_37 - 0x00000001)
	C_47 = SCZO_46 (alias)
	dwLoc78_48 = eax_37
	rax_49 = (uint64) (0x00000000 - C_47)
	eax_50 = (word32) rax_49 (alias)
	dwLocAC_51 = eax_50
	v20_52 = dwLocAC_51 & 0xFFFFFFE8
	dwLocAC_53 = v20_52
	SZO_54 = cond(dwLocAC_53)
	v21_55 = dwLocAC_53 + 0x00000400
	dwLocAC_56 = v21_55
	rax_57 = localeconv()
	r15_58 = Mem0[r8:word64]
	r15d_59 = (word32) r15_58 (alias)
	r13_60 = rax_57
	rdi_61 = r15_58
	eax_62 = strlen(rdi_61)
	rax_63 = DPB(rax_57, eax_62, 0) (alias)
	rbp_64 = Mem0[rbp + 0x0000000000000010:word64]
	r11_65 = rax_63
	r13_66 = Mem0[r13_60 + 0x0000000000000008:word64]
	rax_67 = rax_63 - 0x0000000000000001
	rdx_68 = 0x0000000000000001
	edx_69 = (word32) rdx_68 (alias)
	dl_70 = (byte) rdx_68 (alias)
	SCZO_71 = cond(rax_67 - 0x0000000000000010)
	C_72 = SCZO_71 (alias)
	SZO_73 = SCZO_71 (alias)
	Z_74 = SCZO_71 (alias)
	CZ_75 = SCZO_71 (alias)
	S_76 = SCZO_71 (alias)
	CZP_77 = SCZO_71 (alias)
	rdi_78 = r13_66
	edi_79 = (word32) rdi_78 (alias)
	dil_80 = (byte) rdi_78 (alias)
	rax_81 = 0x0000000000413990
	rdx_rax_82 = SEQ(rdx_68, rax_81) (alias)
	edx_eax_83 = rax_81 (alias)
	branch rax_67 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE06_1:
	r11_1767 = 0x0000000000000001
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0A:
	r11_84 = PHI(r11_65, r11_1767)
	branch rax_67 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0A_1:
	r15_1765 = 0x0000000000413990
	r15d_1766 = (word32) r15_1765 (alias)
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0E:
	r15_85 = PHI(r15_58, r15_1765)
	r15d_86 = PHI(r15d_59, r15d_1766)
	qwLoc80_87 = r11_84
	eax_88 = strlen(rdi_78)
	rax_89 = DPB(rax_81, eax_88, 0) (alias)
	SCZO_90 = cond(rax_89 - 0x0000000000000011)
	C_91 = SCZO_90 (alias)
	rax_92 = 0x0000000000416919
	rdx_rax_93 = SEQ(rdx_68, rax_92) (alias)
	edx_eax_94 = rax_92 (alias)
	r11_95 = qwLoc80_87
	branch rax_89 <u 0x0000000000000011 l000000000040BE2A
// DataOut: bx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE26_1:
	r13_1764 = 0x0000000000416919
// DataOut: bx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE2A:
	r13_96 = PHI(r13_66, r13_1764)
	rax_97 = r14_13
	rdx_rax_98 = SEQ(rdx_68, rax_97) (alias)
	edx_eax_99 = rax_97 (alias)
	r8_100 = r8 + 648
	SCZO_101 = cond(qwLocA8_40 - rbx_29)
	CZ_102 = SCZO_101 (alias)
	qwLocB8_103 = rax_97
	branch qwLocA8_40 >u rbx_29 l000000000040C0E0
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0E0:
	SZO_1693 = cond(rbx_29 & rbx_29)
	Z_1694 = SZO_1693 (alias)
	C_1695 = false
	branch Test(EQ,Z_1694) l000000000040BE59
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0E9:
	rax_1701 = qwLocA8_40
	rdx_1702 = 0x0000000000000000
	rdx_rax_1703 = SEQ(rdx_1702, rax_1701) (alias)
	v35_1704 = rdx_rax_1703
	rdx_1705 = (uint64) (v35_1704 % rbx_29)
	edx_1706 = (word32) rdx_1705 (alias)
	dl_1707 = (byte) rdx_1705 (alias)
	rax_1708 = (uint64) (v35_1704 /u rbx_29)
	rdx_rax_1709 = SEQ(rdx_1705, rax_1708) (alias)
	edx_eax_1710 = rax_1708 (alias)
	SZO_1711 = cond(rdx_1705 & rdx_1705)
	Z_1712 = SZO_1711 (alias)
	C_1713 = false
	rsi_1714 = rax_1708
	sil_1715 = (byte) rsi_1714 (alias)
	esi_1716 = (word32) rsi_1714 (alias)
	branch Test(NE,Z_1712) l000000000040BE59
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0FF:
	rdx_1717 = 0x0000000000000000
	rax_1718 = r12_21
	rdx_rax_1719 = SEQ(rdx_1717, rax_1718) (alias)
	v36_1720 = rdx_rax_1719
	rdx_1721 = (uint64) (v36_1720 % rsi_1714)
	rax_1722 = (uint64) (v36_1720 /u rsi_1714)
	rdi_1723 = rdx_1721 + rdx_1721 * 0x0000000000000004
	r10_1724 = rax_1722
	r10d_1725 = (word32) r10_1724 (alias)
	r10b_1726 = (byte) r10_1724 (alias)
	rdx_1727 = 0x0000000000000000
	rax_1728 = rdi_1723 + rdi_1723
	rdx_rax_1729 = SEQ(rdx_1727, rax_1728) (alias)
	v38_1730 = rdx_rax_1729
	rdx_1731 = (uint64) (v38_1730 % rsi_1714)
	rax_1732 = (uint64) (v38_1730 /u rsi_1714)
	eax_1733 = (word32) rax_1732 (alias)
	rdx_1734 = rdx_1731 + rdx_1731
	edx_1735 = (word32) rdx_1734 (alias)
	rdx_rax_1736 = SEQ(rdx_1734, rax_1732) (alias)
	edx_eax_1737 = rdx_1734 (alias)
	dl_1738 = (byte) rdx_1734 (alias)
	rdi_1739 = (uint64) eax_1733
	edi_1740 = (word32) rdi_1739 (alias)
	dil_1741 = (byte) rdi_1739 (alias)
	SCZO_1742 = cond(rsi_1714 - rdx_1734)
	C_1743 = SCZO_1742 (alias)
	SZO_1744 = SCZO_1742 (alias)
	Z_1745 = SCZO_1742 (alias)
	CZ_1746 = SCZO_1742 (alias)
	S_1747 = SCZO_1742 (alias)
	CZP_1748 = SCZO_1742 (alias)
	branch Test(ULE,CZ_1746) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C6E0:
	rcx_1756 = (uint64) (0x00000000 - C_1743)
	ecx_1757 = (word32) rcx_1756 (alias)
	rcx_1758 = (uint64) ~ecx_1757
	ecx_1759 = (word32) rcx_1758 (alias)
	rcx_1760 = (uint64) (ecx_1759 + 0x00000003)
	ecx_1761 = (word32) rcx_1760 (alias)
	cl_1762 = (byte) rcx_1760 (alias)
	SCZO_1763 = cond(ecx_1761)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C125:
	rcx_1749 = 0x0000000000000000
	SZO_1750 = cond(rdx_1734 & rdx_1734)
	Z_1751 = SZO_1750 (alias)
	C_1752 = false
	cl_1753 = Test(NE,Z_1751)
	rcx_1754 = DPB(rcx_1749, cl_1753, 0) (alias)
	ecx_1755 = DPB(ecx, cl_1753, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040BE43:
	rdx_1644 = 0x0000000000000000
	rax_1645 = rbx_29
	rdx_rax_1646 = SEQ(rdx_1644, rax_1645) (alias)
	v28_1647 = rdx_rax_1646
	rdx_1648 = (uint64) (v28_1647 % qwLocA8_40)
	edx_1649 = (word32) rdx_1648 (alias)
	dl_1650 = (byte) rdx_1648 (alias)
	rax_1651 = (uint64) (v28_1647 /u qwLocA8_40)
	eax_1652 = (word32) rax_1651 (alias)
	rdx_rax_1653 = SEQ(rdx_1648, rax_1651) (alias)
	edx_eax_1654 = rax_1651 (alias)
	ah_1655 = SLICE(rax_1651, byte, 8) (alias)
	ax_1656 = (word16) rax_1651 (alias)
	al_1657 = (byte) rax_1651 (alias)
	SZO_1658 = cond(rdx_1648 & rdx_1648)
	Z_1659 = SZO_1658 (alias)
	C_1660 = false
	rcx_1661 = rax_1651
	ecx_1662 = (word32) rcx_1661 (alias)
	cl_1663 = (byte) rcx_1661 (alias)
	branch Test(EQ,Z_1659) l000000000040C2F0
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C2F0:
	r10_1669 = rax_1651
	rdx_1670 = 0x0000000000000000
	r10_1671 = r10_1669 *s r12_21
	r10d_1672 = (word32) r10_1671 (alias)
	r10b_1673 = (byte) r10_1671 (alias)
	rax_1674 = r10_1671
	rdx_rax_1675 = SEQ(rdx_1670, rax_1674) (alias)
	v72_1676 = rdx_rax_1675
	rdx_1677 = (uint64) (v72_1676 % rcx_1661)
	edx_1678 = (word32) rdx_1677 (alias)
	dl_1679 = (byte) rdx_1677 (alias)
	rax_1680 = (uint64) (v72_1676 /u rcx_1661)
	rdx_rax_1681 = SEQ(rdx_1677, rax_1680) (alias)
	edx_eax_1682 = rax_1680 (alias)
	SCZO_1683 = cond(rax_1680 - r12_21)
	Z_1684 = SCZO_1683 (alias)
	branch Test(NE,Z_1684) l000000000040BE59
// DataOut: bx fs r10 r10b r10d r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C308:
	rcx_1685 = 0x0000000000000000
	ecx_1686 = (word32) rcx_1685 (alias)
	cl_1687 = (byte) rcx_1685 (alias)
	rdi_1688 = 0x0000000000000000
	edi_1689 = (word32) rdi_1688 (alias)
	dil_1690 = (byte) rdi_1688 (alias)
	SZO_1691 = cond(edi_1689)
	C_1692 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C12D:
	sil_1193 = PHI(sil_1715, sil_1715, sil)
	dil_1194 = PHI(dil_1741, dil_1741, dil_1690)
	edi_1195 = PHI(edi_1740, edi_1740, edi_1689)
	r10d_1196 = PHI(r10d_1725, r10d_1725, r10d_1672)
	r10b_1197 = PHI(r10b_1726, r10b_1726, r10b_1673)
	esi_1198 = PHI(esi_1716, esi_1716, esi)
	r10_1199 = PHI(r10_1724, r10_1724, r10_1671)
	CZP_1200 = PHI(CZP_1748, CZP_1748, CZP_77)
	S_1201 = PHI(S_1747, S_1747, S_76)
	CZ_1202 = PHI(CZ_1746, CZ_1746, CZ_102)
	ecx_1203 = PHI(ecx_1755, ecx_1761, ecx_1686)
	rcx_1204 = PHI(rcx_1754, rcx_1760, rcx_1685)
	cl_1205 = PHI(cl_1753, cl_1762, cl_1687)
	rax_1206 = PHI(rax_1732, rax_1732, rax_1680)
	eax_1207 = PHI(eax_1733, eax_1733, eax_1652)
	ah_1208 = PHI(ah, ah, ah_1655)
	ax_1209 = PHI(ax, ax, ax_1656)
	al_1210 = PHI(al, al, al_1657)
	rdx_1211 = PHI(rdx_1734, rdx_1734, rdx_1677)
	edx_1212 = PHI(edx_1735, edx_1735, edx_1678)
	rdx_rax_1213 = PHI(rdx_rax_1736, rdx_rax_1736, rdx_rax_1681)
	edx_eax_1214 = PHI(edx_eax_1737, edx_eax_1737, edx_eax_1682)
	dl_1215 = PHI(dl_1738, dl_1738, dl_1679)
	SCZO_1216 = PHI(SCZO_1742, SCZO_1763, SCZO_1683)
	rsi_1217 = PHI(rsi_1714, rsi_1714, rsi)
	rdi_1218 = PHI(rdi_1739, rdi_1739, rdi_1688)
	r9_1219 = (uint64) dwLocB0_38
	r9d_1220 = (word32) r9_1219 (alias)
	r8_1221 = qwLocB8_103
	rbx_1222 = 0x00000000FFFFFFFF
	ebx_1223 = (word32) rbx_1222 (alias)
	r9_1224 = (uint64) (r9d_1220 & 0x00000010)
	r9d_1225 = (word32) r9_1224 (alias)
	SZO_1226 = cond(r9d_1225)
	Z_1227 = SZO_1226 (alias)
	C_1228 = false
	branch Test(EQ,Z_1227) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C146:
	rsi_1418 = (uint64) dwLocAC_56
	sil_1419 = (byte) rsi_1418 (alias)
	esi_1420 = (word32) rsi_1418 (alias)
	SCZO_1421 = cond(r10_1199 - rsi_1418)
	C_1422 = SCZO_1421 (alias)
	branch Test(ULT,C_1422) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C710:
	r8_1639 = qwLocB8_103
	rbx_1640 = 0x0000000000000000
	ebx_1641 = (word32) rbx_1640 (alias)
	SZO_1642 = cond(ebx_1641)
	C_1643 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C153:
	rbx_1423 = 0x0000000000000000
	ebx_1424 = (word32) rbx_1423 (alias)
	SZO_1425 = cond(ebx_1424)
	C_1426 = false
	r12_1427 = (uint64) dwLocAC_56
	r12d_1428 = (word32) r12_1427 (alias)
// DataOut: ebx ecx edi fs r10 r11 r11d r12d r13 r15 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C17D:
	r10_1429 = PHI(r10_1199, r10_1449)
	r14_1430 = PHI(r14_13, r14_1468)
	ebx_1431 = PHI(ebx_1424, ebx_1484)
	ecx_1432 = PHI(ecx_1203, ecx_1477)
	SZO_1433 = PHI(SZO_1425, SZO_1480)
	Z_1434 = PHI(Z_1227, Z_1492)
	C_1435 = PHI(C_1426, C_1482)
	edx_1436 = PHI(edx_1212, edx_1458)
	rbx_1437 = PHI(rbx_1423, rbx_1483)
	rdi_1438 = PHI(rdi_1218, rdi_1469)
	rax_1439 = r10_1429
	rdx_1440 = 0x0000000000000000
	rdx_rax_1441 = SEQ(rdx_1440, rax_1439) (alias)
	v48_1442 = rdx_rax_1441
	rdx_1443 = (uint64) (v48_1442 % rsi_1418)
	rax_1444 = (uint64) (v48_1442 /u rsi_1418)
	r8_1445 = rax_1444
	eax_1446 = rdx_1443 + rdx_1443 * 0x0000000000000004
	rax_1447 = DPB(rax_1444, eax_1446, 0) (alias)
	rdx_1448 = 0x0000000000000000
	r10_1449 = r8_1445
	r10d_1450 = (word32) r10_1449 (alias)
	r10b_1451 = (byte) r10_1449 (alias)
	eax_1452 = rdi_1438 + rax_1447 * 0x0000000000000002
	edx_eax_1453 = SEQ(edx_1436, eax_1452) (alias)
	rdi_1454 = (uint64) ecx_1432
	edi_1455 = (word32) rdi_1454 (alias)
	rdi_1456 = (uint64) (edi_1455 >> 0x00000001)
	v50_1457 = edx_eax_1453
	edx_1458 = (uint32) (v50_1457 % r12d_1428)
	rdx_1459 = DPB(rdx_1448, edx_1458, 0) (alias)
	eax_1460 = (uint32) (v50_1457 /u r12d_1428)
	rax_1461 = DPB(rax_1447, eax_1460, 0) (alias)
	rdx_rax_1462 = DPB(rdx_rax_1441, eax_1460, 0) (alias)
	edx_eax_1463 = SEQ(edx_1458, eax_1460) (alias)
	ah_1464 = SLICE(eax_1460, byte, 8) (alias)
	ax_1465 = (word16) eax_1460 (alias)
	al_1466 = (byte) eax_1460 (alias)
	r14d_1467 = rdi_1456 + rdx_1459 * 0x0000000000000002
	r14_1468 = DPB(r14_1430, r14d_1467, 0) (alias)
	rdi_1469 = (uint64) eax_1460
	edi_1470 = (word32) rdi_1469 (alias)
	dil_1471 = (byte) rdi_1469 (alias)
	rcx_1472 = (uint64) (ecx_1432 + r14d_1467)
	ecx_1473 = (word32) rcx_1472 (alias)
	cl_1474 = (byte) rcx_1472 (alias)
	SCZO_1475 = cond(r12d_1428 - r14d_1467)
	CZ_1476 = SCZO_1475 (alias)
	branch Test(UGT,CZ_1476) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C160:
	SZO_1632 = cond(ecx_1473 & ecx_1473)
	Z_1633 = SZO_1632 (alias)
	C_1634 = false
	cl_1635 = Test(NE,Z_1633)
	ecx_1636 = (word32) cl_1635
	rcx_1637 = DPB(rcx_1472, ecx_1636, 0) (alias)
	cl_1638 = (byte) ecx_1636 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1A8:
	SCZO_1622 = cond(r12d_1428 - ecx_1473)
	C_1623 = SCZO_1622 (alias)
	rcx_1624 = (uint64) (0x00000000 - C_1623)
	ecx_1625 = (word32) rcx_1624 (alias)
	rcx_1626 = (uint64) ~ecx_1625
	ecx_1627 = (word32) rcx_1626 (alias)
	rcx_1628 = (uint64) (ecx_1627 + 0x00000003)
	ecx_1629 = (word32) rcx_1628 (alias)
	cl_1630 = (byte) rcx_1628 (alias)
	SCZO_1631 = cond(ecx_1629)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C168:
	ecx_1477 = PHI(ecx_1629, ecx_1636)
	rcx_1478 = PHI(rcx_1628, rcx_1637)
	cl_1479 = PHI(cl_1630, cl_1638)
	SZO_1480 = PHI(SZO_1433, SZO_1632)
	Z_1481 = PHI(Z_1434, Z_1633)
	C_1482 = PHI(C_1623, C_1634)
	rbx_1483 = (uint64) (ebx_1431 + 0x00000001)
	ebx_1484 = (word32) rbx_1483 (alias)
	SCZO_1485 = cond(rsi_1418 - r8_1445)
	CZ_1486 = SCZO_1485 (alias)
	branch Test(UGT,CZ_1486) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C49F:
	SCZO_1493 = cond(r8_1445 - 0x0000000000000009)
	CZ_1494 = SCZO_1493 (alias)
	branch Test(UGT,CZ_1494) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4A9:
	SCZO_1495 = cond(dwLoc98_32 - 0x00000001)
	Z_1496 = SCZO_1495 (alias)
	branch Test(EQ,Z_1496) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7B0:
	rdx_1609 = (uint64) eax_1460
	edx_1610 = (word32) rdx_1609 (alias)
	rdx_1611 = (uint64) (edx_1610 & 0x00000001)
	edx_1612 = (word32) rdx_1611 (alias)
	rdx_1613 = (uint64) (edx_1612 + ecx_1477)
	edx_1614 = (word32) rdx_1613 (alias)
	SCZO_1615 = cond(edx_1614 - 0x00000002)
	SZO_1616 = SCZO_1615 (alias)
	dl_1617 = Test(GT,SZO_1616)
	edx_1618 = DPB(edx_1614, dl_1617, 0) (alias)
	rdx_1619 = DPB(rdx_1613, dl_1617, 0) (alias)
	rdx_rax_1620 = DPB(rdx_rax_1462, dl_1617, 64) (alias)
	edx_eax_1621 = DPB(edx_eax_1463, dl_1617, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4B4:
	r12_1593 = (uint64) dwLoc98_32
	r12d_1594 = (word32) r12_1593 (alias)
	SZO_1595 = cond(ecx_1477 & ecx_1477)
	dl_1596 = Test(GT,SZO_1595)
	edx_1597 = DPB(edx_1458, dl_1596, 0) (alias)
	SZO_1598 = cond(r12d_1594 & r12d_1594)
	Z_1599 = SZO_1598 (alias)
	sil_1600 = Test(EQ,Z_1599)
	esi_1601 = DPB(esi_1420, sil_1600, 0) (alias)
	rdx_1602 = (uint64) (edx_1597 & esi_1601)
	edx_1603 = (word32) rdx_1602 (alias)
	rdx_rax_1604 = SEQ(rdx_1602, rax_1461) (alias)
	edx_eax_1605 = rdx_1602 (alias)
	dl_1606 = (byte) rdx_1602 (alias)
	SZO_1607 = cond(edx_1603)
	C_1608 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4C7:
	sil_1497 = PHI(sil_1600, sil_1419)
	esi_1498 = PHI(esi_1601, esi_1420)
	r12_1499 = PHI(r12_1593, r12_1427)
	r12d_1500 = PHI(r12d_1594, r12d_1428)
	rdx_1501 = PHI(rdx_1602, rdx_1619)
	edx_1502 = PHI(edx_1603, edx_1618)
	rdx_rax_1503 = PHI(rdx_rax_1604, rdx_rax_1620)
	edx_eax_1504 = PHI(edx_eax_1605, edx_eax_1621)
	dl_1505 = PHI(dl_1606, dl_1617)
	SCZO_1506 = PHI(SCZO_1495, SCZO_1615)
	SZO_1507 = cond(dl_1505 & dl_1505)
	Z_1508 = SZO_1507 (alias)
	C_1509 = false
	branch Test(EQ,Z_1508) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C788:
	SZO_1590 = cond(eax_1460 & eax_1460)
	Z_1591 = SZO_1590 (alias)
	C_1592 = false
	branch Test(NE,Z_1591) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4CF:
	edi_1566 = rax_1461 + 0x0000000000000001
	rdi_1567 = DPB(rdi_1469, edi_1566, 0) (alias)
	dil_1568 = (byte) edi_1566 (alias)
	SCZO_1569 = cond(edi_1566 - 0x0000000A)
	Z_1570 = SCZO_1569 (alias)
	branch Test(EQ,Z_1570) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r11d r13 r14d r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7CE:
	r10_1571 = r8_1445 + 0x0000000000000001
	r10d_1572 = (word32) r10_1571 (alias)
	r10b_1573 = (byte) r10_1571 (alias)
	SCZO_1574 = cond(r10_1571 - 0x000000000000000A)
	Z_1575 = SCZO_1574 (alias)
	branch Test(NE,Z_1575) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7FF:
	rcx_1585 = 0x0000000000000000
	ecx_1586 = (word32) rcx_1585 (alias)
	cl_1587 = (byte) rcx_1585 (alias)
	SZO_1588 = cond(0x00000000)
	C_1589 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C790:
	dil_1542 = PHI(dil_1568, dil_1471)
	edi_1543 = PHI(edi_1566, edi_1470)
	r10d_1544 = PHI(r10d_1572, r10d_1450)
	r10b_1545 = PHI(r10b_1573, r10b_1451)
	r10_1546 = PHI(r10_1571, r10_1449)
	ecx_1547 = PHI(ecx_1586, ecx_1477)
	rcx_1548 = PHI(rcx_1585, rcx_1478)
	cl_1549 = PHI(cl_1587, cl_1479)
	SCZO_1550 = PHI(SCZO_1574, SCZO_1506)
	rdi_1551 = PHI(rdi_1567, rdi_1469)
	SZO_1552 = cond(bLocB0 & 0x08)
	Z_1553 = SZO_1552 (alias)
	C_1554 = false
	branch Test(NE,Z_1553) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7C2:
	r8_1560 = qwLocB8_103
	rdi_1561 = 0x0000000000000000
	edi_1562 = (word32) rdi_1561 (alias)
	dil_1563 = (byte) rdi_1561 (alias)
	SZO_1564 = cond(0x00000000)
	C_1565 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C797:
	rdi_1555 = 0x0000000000000000
	edi_1556 = (word32) rdi_1555 (alias)
	dil_1557 = (byte) rdi_1555 (alias)
	SZO_1558 = cond(0x00000000)
	C_1559 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r14d r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7D8:
	r8_1576 = qwLocB8_103
	rcx_1577 = 0x0000000000000000
	ecx_1578 = (word32) rcx_1577 (alias)
	cl_1579 = (byte) rcx_1577 (alias)
	rdi_1580 = 0x0000000000000000
	edi_1581 = (word32) rdi_1580 (alias)
	dil_1582 = (byte) rdi_1580 (alias)
	SZO_1583 = cond(0x00000000)
	C_1584 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4DB:
	edi_1510 = PHI(edi_1566, edi_1470, edi_1556)
	r10_1511 = PHI(r10_1449, r10_1449, r10_1546)
	Z_1512 = PHI(Z_1570, Z_1591, Z_1553)
	SCZO_1513 = PHI(SCZO_1569, SCZO_1506, SCZO_1550)
	rax_1514 = qwLocA0_35
	rdi_1515 = (uint64) (edi_1510 + 0x00000030)
	dil_1516 = (byte) rdi_1515 (alias)
	rdx_1517 = r11_95
	rsi_1518 = r15_85
	dwLoc74_1519 = r9d_1225
	qwLoc90_1520 = r10_1511
	qwLoc80_1521 = r11_95
	r8_1522 = r8_1445 + 0x0000000000000287
	Mem1523[rax_1514 + 0x0000000000000287:byte] = dil_1516
	r8_1524 = r8_1522 - r11_95
	rdi_1525 = r8_1524
	rax_1526 = memcpy(rdi_1525, rsi_1518, rdx_1517)
	r11_1527 = qwLoc80_1521
	r10_1528 = qwLoc90_1520
	r10d_1529 = (word32) r10_1528 (alias)
	r10b_1530 = (byte) r10_1528 (alias)
	r8_1531 = rax_1526
	r9_1532 = (uint64) dwLoc74_1519
	r9d_1533 = (word32) r9_1532 (alias)
	rcx_1534 = 0x0000000000000000
	ecx_1535 = (word32) rcx_1534 (alias)
	cl_1536 = (byte) rcx_1534 (alias)
	rdi_1537 = 0x0000000000000000
	edi_1538 = (word32) rdi_1537 (alias)
	dil_1539 = (byte) rdi_1537 (alias)
	SZO_1540 = cond(0x00000000)
	C_1541 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C174:
	SCZO_1491 = cond(ebx_1484 - 0x00000008)
	Z_1492 = SCZO_1491 (alias)
	branch Test(EQ,Z_1492) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C768:
	CZ_1487 = PHI(CZ_1486, CZ_1494)
	Z_1488 = PHI(Z_1492, Z_1481)
	SCZO_1489 = PHI(SCZO_1491, SCZO_1493)
	r8_1490 = qwLocB8_103
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C530:
	sil_1229 = PHI(sil_1419, sil_1419, sil_1497, sil_1497, sil_1497, sil_1193)
	dwLoc74_1230 = PHI(dwLoc74, dwLoc74, dwLoc74_1519, dwLoc74, dwLoc74, dwLoc74)
	qwLoc90_1231 = PHI(qwLoc90, qwLoc90, qwLoc90_1520, qwLoc90, qwLoc90, qwLoc90)
	dil_1232 = PHI(dil_1194, dil_1471, dil_1539, dil_1582, dil_1563, dil_1194)
	edi_1233 = PHI(edi_1195, edi_1470, edi_1538, edi_1581, edi_1562, edi_1195)
	r10d_1234 = PHI(r10d_1196, r10d_1450, r10d_1529, r10d_1572, r10d_1544, r10d_1196)
	r10b_1235 = PHI(r10b_1197, r10b_1451, r10b_1530, r10b_1573, r10b_1545, r10b_1197)
	esi_1236 = PHI(esi_1420, esi_1420, esi_1498, esi_1498, esi_1498, esi_1198)
	qwLoc80_1237 = PHI(qwLoc80_87, qwLoc80_87, qwLoc80_1521, qwLoc80_87, qwLoc80_87, qwLoc80_87)
	r11_1238 = PHI(r11_95, r11_95, r11_1527, r11_95, r11_95, r11_95)
	r10_1239 = PHI(r10_1199, r10_1449, r10_1528, r10_1571, r10_1546, r10_1199)
	r8_1240 = PHI(r8_1639, r8_1490, r8_1531, r8_1576, r8_1560, r8_1221)
	r9_1241 = PHI(r9_1224, r9_1224, r9_1532, r9_1224, r9_1224, r9_1224)
	r9d_1242 = PHI(r9d_1225, r9d_1225, r9d_1533, r9d_1225, r9d_1225, r9d_1225)
	r12_1243 = PHI(r12_21, r12_1427, r12_1499, r12_1499, r12_1499, r12_21)
	r12d_1244 = PHI(r12d_22, r12d_1428, r12d_1500, r12d_1500, r12d_1500, r12d_22)
	r14_1245 = PHI(r14_13, r14_1468, r14_1468, r14_1468, r14_1468, r14_13)
	r14d_1246 = PHI(r14d_14, r14d_1467, r14d_1467, r14d_1467, r14d_1467, r14d_14)
	CZ_1247 = PHI(CZ_1202, CZ_1487, CZ_1494, CZ_1494, CZ_1494, CZ_1202)
	ebx_1248 = PHI(ebx_1641, ebx_1484, ebx_1484, ebx_1484, ebx_1484, ebx_1223)
	ecx_1249 = PHI(ecx_1203, ecx_1477, ecx_1535, ecx_1578, ecx_1547, ecx_1203)
	rcx_1250 = PHI(rcx_1204, rcx_1478, rcx_1534, rcx_1577, rcx_1548, rcx_1204)
	cl_1251 = PHI(cl_1205, cl_1479, cl_1536, cl_1579, cl_1549, cl_1205)
	SZO_1252 = PHI(SZO_1642, SZO_1480, SZO_1540, SZO_1583, SZO_1564, SZO_1226)
	C_1253 = PHI(C_1643, C_1482, C_1541, C_1584, C_1565, C_1228)
	rax_1254 = PHI(rax_1206, rax_1461, rax_1526, rax_1461, rax_1461, rax_1206)
	eax_1255 = PHI(eax_1207, eax_1460, eax_1460, eax_1460, eax_1460, eax_1207)
	ah_1256 = PHI(ah_1208, ah_1464, ah_1464, ah_1464, ah_1464, ah_1208)
	ax_1257 = PHI(ax_1209, ax_1465, ax_1465, ax_1465, ax_1465, ax_1209)
	al_1258 = PHI(al_1210, al_1466, al_1466, al_1466, al_1466, al_1210)
	rdx_1259 = PHI(rdx_1211, rdx_1459, rdx_1517, rdx_1501, rdx_1501, rdx_1211)
	edx_1260 = PHI(edx_1212, edx_1458, edx_1502, edx_1502, edx_1502, edx_1212)
	rdx_rax_1261 = PHI(rdx_rax_1213, rdx_rax_1462, rdx_rax_1503, rdx_rax_1503, rdx_rax_1503, rdx_rax_1213)
	edx_eax_1262 = PHI(edx_eax_1214, edx_eax_1463, edx_eax_1504, edx_eax_1504, edx_eax_1504, edx_eax_1214)
	dl_1263 = PHI(dl_1215, dl_1215, dl_1505, dl_1505, dl_1505, dl_1215)
	rbx_1264 = PHI(rbx_1640, rbx_1483, rbx_1483, rbx_1483, rbx_1483, rbx_1222)
	rsi_1265 = PHI(rsi_1418, rsi_1418, rsi_1518, rsi_1418, rsi_1418, rsi_1217)
	rdi_1266 = PHI(rdi_1218, rdi_1469, rdi_1537, rdi_1580, rdi_1561, rdi_1218)
	SCZO_1267 = cond(dwLoc98_32 - 0x00000001)
	Z_1268 = SCZO_1267 (alias)
	branch Test(EQ,Z_1268) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C6F0:
	rax_1397 = r10_1239
	eax_1398 = (word32) rax_1397 (alias)
	rcx_1399 = (int64) ecx_1249
	ecx_1400 = (word32) rcx_1399 (alias)
	cl_1401 = (byte) rcx_1399 (alias)
	rax_1402 = (uint64) (eax_1398 & 0x00000001)
	rax_1403 = rax_1402 + rcx_1399
	SCZO_1404 = cond(rax_1403)
	Z_1405 = SCZO_1404 (alias)
	al_1406 = Test(NE,Z_1405)
	eax_1407 = (word32) al_1406
	rdi_1408 = (uint64) (edi_1233 + eax_1407)
	edi_1409 = (word32) rdi_1408 (alias)
	SCZO_1410 = cond(edi_1409 - 0x00000005)
	SZO_1411 = SCZO_1410 (alias)
	al_1412 = Test(GT,SZO_1411)
	eax_1413 = DPB(eax_1407, al_1412, 0) (alias)
	rax_1414 = DPB(rax_1403, al_1412, 0) (alias)
	rdx_rax_1415 = DPB(rdx_rax_1261, al_1412, 0) (alias)
	edx_eax_1416 = DPB(edx_eax_1262, al_1412, 0) (alias)
	ax_1417 = DPB(ax_1257, al_1412, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C53B:
	rsi_1375 = (uint64) dwLoc98_32
	esi_1376 = (word32) rsi_1375 (alias)
	rax_1377 = 0x0000000000000000
	eax_1378 = (word32) rax_1377 (alias)
	rdx_rax_1379 = SEQ(rdx_1259, rax_1377) (alias)
	edx_eax_1380 = rax_1377 (alias)
	ax_1381 = (word16) rax_1377 (alias)
	al_1382 = (byte) rax_1377 (alias)
	SZO_1383 = cond(esi_1376 & esi_1376)
	Z_1384 = SZO_1383 (alias)
	C_1385 = false
	branch Test(NE,Z_1384) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C545:
	rcx_1386 = (uint64) (ecx_1249 + edi_1233)
	ecx_1387 = (word32) rcx_1386 (alias)
	cl_1388 = (byte) rcx_1386 (alias)
	SZO_1389 = cond(ecx_1387 & ecx_1387)
	C_1390 = false
	al_1391 = Test(GT,SZO_1389)
	eax_1392 = DPB(eax_1378, al_1391, 0) (alias)
	rax_1393 = DPB(rax_1377, al_1391, 0) (alias)
	rdx_rax_1394 = DPB(rdx_rax_1379, al_1391, 0) (alias)
	edx_eax_1395 = DPB(edx_eax_1380, al_1391, 0) (alias)
	ax_1396 = DPB(ax_1381, al_1391, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C54C:
	edi_1269 = PHI(edi_1233, edi_1233, edi_1409)
	esi_1270 = PHI(esi_1376, esi_1376, esi_1236)
	ecx_1271 = PHI(ecx_1249, ecx_1387, ecx_1400)
	rcx_1272 = PHI(rcx_1250, rcx_1386, rcx_1399)
	cl_1273 = PHI(cl_1251, cl_1388, cl_1401)
	rax_1274 = PHI(rax_1377, rax_1393, rax_1414)
	eax_1275 = PHI(eax_1378, eax_1392, eax_1413)
	ax_1276 = PHI(ax_1381, ax_1396, ax_1417)
	al_1277 = PHI(al_1382, al_1391, al_1412)
	rdx_rax_1278 = PHI(rdx_rax_1379, rdx_rax_1394, rdx_rax_1415)
	edx_eax_1279 = PHI(edx_eax_1380, edx_eax_1395, edx_eax_1416)
	SCZO_1280 = PHI(SCZO_1267, SCZO_1267, SCZO_1410)
	rsi_1281 = PHI(rsi_1375, rsi_1375, rsi_1265)
	rdi_1282 = PHI(rdi_1266, rdi_1266, rdi_1408)
	SZO_1283 = cond(al_1277 & al_1277)
	Z_1284 = SZO_1283 (alias)
	C_1285 = false
	branch Test(EQ,Z_1284) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C550:
	r10_1337 = r10_1239 + 0x0000000000000001
	r10d_1338 = (word32) r10_1337 (alias)
	r10b_1339 = (byte) r10_1337 (alias)
	SZO_1340 = cond(r9d_1242 & r9d_1242)
	Z_1341 = SZO_1340 (alias)
	C_1342 = false
	branch Test(EQ,Z_1341) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C559:
	rax_1343 = (uint64) dwLocAC_56
	eax_1344 = (word32) rax_1343 (alias)
	rdx_rax_1345 = SEQ(rdx_1259, rax_1343) (alias)
	edx_eax_1346 = rax_1343 (alias)
	ah_1347 = SLICE(rax_1343, byte, 8) (alias)
	ax_1348 = (word16) rax_1343 (alias)
	al_1349 = (byte) rax_1343 (alias)
	SCZO_1350 = cond(rax_1343 - r10_1337)
	Z_1351 = SCZO_1350 (alias)
	branch Test(NE,Z_1351) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C562:
	SCZO_1352 = cond(ebx_1248 - 0x00000008)
	Z_1353 = SCZO_1352 (alias)
	branch Test(EQ,Z_1353) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C567:
	rbx_1354 = (uint64) (ebx_1248 + 0x00000001)
	ebx_1355 = (word32) rbx_1354 (alias)
	SZO_1356 = cond(bLocB0 & 0x08)
	Z_1357 = SZO_1356 (alias)
	C_1358 = false
	rdx_1359 = 0x0000000000000001
	rdx_rax_1360 = SEQ(rdx_1359, rax_1343) (alias)
	edx_eax_1361 = rdx_1359 (alias)
	branch Test(NE,Z_1357) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C577:
	rax_1362 = rax_1343 - 0x0000000000000001
	Mem1363[rax_1362 - 0x0000000000000001:byte] = 0x30
	rdx_1364 = r11_1238
	rsi_1365 = r15_85
	qwLoc98_1366 = r10_1337
	rax_1367 = rax_1362 - r11_1238
	SCZO_1368 = cond(rax_1367)
	rdi_1369 = rax_1367
	rax_1370 = memcpy(rdi_1369, rsi_1365, rdx_1364)
	r10_1371 = qwLoc98_1366
	r10d_1372 = (word32) r10_1371 (alias)
	r10b_1373 = (byte) r10_1371 (alias)
	r8_1374 = rax_1370
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:0x00000001 r14d:<invalid> ecx:<invalid> dl:0x01 sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5A0:
	r10d_1286 = PHI(r10d_1234, r10d_1338, r10d_1338, r10d_1338, r10d_1338, r10d_1372)
	r10b_1287 = PHI(r10b_1235, r10b_1339, r10b_1339, r10b_1339, r10b_1339, r10b_1373)
	r10_1288 = PHI(r10_1239, r10_1337, r10_1337, r10_1337, r10_1337, r10_1371)
	r8_1289 = PHI(r8_1240, r8_1240, r8_1240, r8_1240, r8_1240, r8_1374)
	qwLoc98_1290 = PHI(qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98_1366)
	ebx_1291 = PHI(ebx_1248, ebx_1248, ebx_1248, ebx_1248, ebx_1355, ebx_1355)
	SZO_1292 = PHI(SZO_1283, SZO_1340, SZO_1340, SZO_1340, SZO_1356, SZO_1356)
	Z_1293 = PHI(Z_1284, Z_1341, Z_1351, Z_1353, Z_1357, Z_1357)
	C_1294 = PHI(C_1285, C_1342, C_1342, C_1342, C_1358, C_1358)
	rax_1295 = PHI(rax_1274, rax_1274, rax_1343, rax_1343, rax_1343, rax_1370)
	eax_1296 = PHI(eax_1275, eax_1275, eax_1344, eax_1344, eax_1344, eax_1344)
	ah_1297 = PHI(ah_1256, ah_1256, ah_1347, ah_1347, ah_1347, ah_1347)
	ax_1298 = PHI(ax_1276, ax_1276, ax_1348, ax_1348, ax_1348, ax_1348)
	al_1299 = PHI(al_1277, al_1277, al_1349, al_1349, al_1349, al_1349)
	rdx_1300 = PHI(rdx_1259, rdx_1259, rdx_1259, rdx_1259, rdx_1359, rdx_1364)
	rdx_rax_1301 = PHI(rdx_rax_1278, rdx_rax_1278, rdx_rax_1345, rdx_rax_1345, rdx_rax_1360, rdx_rax_1360)
	edx_eax_1302 = PHI(edx_eax_1279, edx_eax_1279, edx_eax_1346, edx_eax_1346, edx_eax_1361, edx_eax_1361)
	SCZO_1303 = PHI(SCZO_1280, SCZO_1280, SCZO_1350, SCZO_1352, SCZO_1352, SCZO_1368)
	rbx_1304 = PHI(rbx_1264, rbx_1264, rbx_1264, rbx_1264, rbx_1354, rbx_1354)
	rsi_1305 = PHI(rsi_1281, rsi_1281, rsi_1281, rsi_1281, rsi_1281, rsi_1365)
	rdi_1306 = PHI(rdi_1282, rdi_1282, rdi_1282, rdi_1282, rdi_1282, rdi_1369)
	r12_1307 = r8_1289
	r12d_1308 = (word32) r12_1307 (alias)
	r9_1309 = 0x00000000CCCCCCCD
	r9d_1310 = (word32) r9_1309 (alias)
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5B0:
	r10_1311 = PHI(r10_1288, r10_1329)
	r12_1312 = PHI(r12_1307, r12_1314)
	rax_1313 = r10_1311
	r12_1314 = r12_1312 - 0x0000000000000001
	r12d_1315 = (word32) r12_1314 (alias)
	rdx_rax_1316 = rcx_1272 *u rax_1313
	rdx_1317 = SLICE(rdx_rax_1316, word64, 64) (alias)
	rdx_1318 = rdx_1317 >>u 0x0000000000000003
	rax_1319 = rdx_1318 + rdx_1318 * 0x0000000000000004
	rax_1320 = rax_1319 + rax_1319
	r10_1321 = r10_1311 - rax_1320
	r10d_1322 = (word32) r10_1321 (alias)
	r10_1323 = (uint64) (r10d_1322 + 0x00000030)
	r10b_1324 = (byte) r10_1323 (alias)
	SZO_1325 = cond(rdx_1318 & rdx_1318)
	Z_1326 = SZO_1325 (alias)
	C_1327 = false
	Mem1328[r12_1314:byte] = r10b_1324
	r10_1329 = rdx_1318
	r10d_1330 = (word32) r10_1329 (alias)
	r10b_1331 = (byte) r10_1329 (alias)
	branch Test(NE,Z_1326) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5D8:
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BE59:
	sil_525 = PHI(sil, sil, sil_1715, sil)
	r10d_526 = PHI(r10d, r10d, r10d, r10d_1672)
	r10b_527 = PHI(r10b, r10b, r10b, r10b_1673)
	esi_528 = PHI(esi, esi, esi_1716, esi)
	r10_529 = PHI(r10, r10, r10, r10_1671)
	ecx_530 = PHI(ecx_1662, ecx, ecx, ecx_1662)
	rcx_531 = PHI(rcx_1661, rcx_45, rcx_45, rcx_1661)
	cl_532 = PHI(cl_1663, cl, cl, cl_1663)
	Z_533 = PHI(Z_1659, Z_1694, Z_1712, Z_1684)
	rax_534 = PHI(rax_1651, rax_97, rax_1708, rax_1680)
	eax_535 = PHI(eax_1652, eax_88, eax_88, eax_1652)
	ah_536 = PHI(ah_1655, ah, ah, ah_1655)
	ax_537 = PHI(ax_1656, ax, ax, ax_1656)
	al_538 = PHI(al_1657, al, al, al_1657)
	rdx_539 = PHI(rdx_1648, rdx_68, rdx_1705, rdx_1677)
	edx_540 = PHI(edx_1649, edx_69, edx_1706, edx_1678)
	rdx_rax_541 = PHI(rdx_rax_1653, rdx_rax_98, rdx_rax_1709, rdx_rax_1681)
	edx_eax_542 = PHI(edx_eax_1654, edx_eax_99, edx_eax_1710, edx_eax_1682)
	dl_543 = PHI(dl_1650, dl_70, dl_1707, dl_1679)
	SCZO_544 = PHI(SCZO_101, SCZO_101, SCZO_101, SCZO_1683)
	rsi_545 = PHI(rsi, rsi, rsi_1714, rsi)
	qwLoc68_546 = r12_21
	SZO_547 = cond(r12_21 & r12_21)
	S_548 = SZO_547 (alias)
	C_549 = false
	rLoc1_550 = (real64) qwLoc68_546
	branch (r12_21 & r12_21) < 0x0000000000000000 l000000000040C5F0
// DataOut: bx fs r11 r11d r13 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5F0:
	rLoc1_1187 = rLoc1_550 + Mem0[0x0000000000415F08:real32]
	qwLoc68_1188 = rbx_29
	SZO_1189 = cond(rbx_29 & rbx_29)
	S_1190 = SZO_1189 (alias)
	C_1191 = false
	rLoc2_1192 = (real64) qwLoc68_1188
	branch Test(NS,S_1190) l000000000040BE7D
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE6B:
	qwLoc68_1182 = rbx_29
	SZO_1183 = cond(rbx_29 & rbx_29)
	S_1184 = SZO_1183 (alias)
	C_1185 = false
	rLoc2_1186 = (real64) qwLoc68_1182
	branch Test(SG,S_1184) l000000000040C608
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C608:
	rLoc2_1175 = PHI(rLoc2_1186, rLoc2_1192)
	qwLoc68_1176 = PHI(qwLoc68_1182, qwLoc68_1188)
	S_1177 = PHI(S_1184, S_1190)
	rLoc1_1178 = PHI(rLoc1_550, rLoc1_1187)
	SZO_1179 = PHI(SZO_1183, SZO_1189)
	C_1180 = PHI(C_1185, C_1191)
	rLoc2_1181 = rLoc2_1175 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE7D:
	rLoc2_551 = PHI(rLoc2_1186, rLoc2_1181, rLoc2_1192)
	rLoc1_552 = PHI(rLoc1_550, rLoc1_1178, rLoc1_1187)
	rax_553 = qwLocA8_40
	rdx_rax_554 = SEQ(rdx_539, rax_553) (alias)
	edx_eax_555 = rax_553 (alias)
	qwLoc68_556 = rax_553
	SZO_557 = cond(rax_553 & rax_553)
	S_558 = SZO_557 (alias)
	C_559 = false
	rLoc3_560 = (real64) qwLoc68_556
	branch (rax_553 & rax_553) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5E0:
	rLoc3_1174 = rLoc3_560 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE94:
	rLoc3_561 = PHI(rLoc3_560, rLoc3_1174)
	SZO_562 = cond(bLocB0 & 0x10)
	Z_563 = SZO_562 (alias)
	C_564 = false
	rLoc2_565 = rLoc2_551 / rLoc3_561
	rLoc1_566 = rLoc1_552 * rLoc2_565
	branch (bLocB0 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1B8:
	SCZO_1009 = cond(dwLoc98_32 - 0x00000001)
	Z_1010 = SCZO_1009 (alias)
	branch Test(EQ,Z_1010) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1BF:
	rLoc2_1052 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1053 = cond(rLoc2_1052 - rLoc1_566)
	CZ_1054 = CZP_1053 (alias)
	branch Test(UGT,CZ_1054) l000000000040C408
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C408:
	rLoc2_1055 = (real64) Mem0[0x0000000000415F0C:real32]
	v70_1056 = rLoc2_1055
	rLoc2_1057 = rLoc1_566
	rLoc1_1058 = v70_1056
	CZP_1059 = cond(rLoc2_1057 - rLoc1_1058)
	C_1060 = CZP_1059 (alias)
	branch Test(UGE,C_1060) l000000000040C6A0
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C6A0:
	wLoc6A_1152 = __fstcw()
	eax_1153 = (word32) wLoc6A_1152
	ah_1154 = SLICE(eax_1153, byte, 8) (alias)
	rLoc2_1155 = rLoc2_1057 - rLoc1_1058
	v71_1156 = rLoc2_1155
	rLoc2_1157 = rLoc1_1058
	rLoc1_1158 = v71_1156
	r10_1159 = 0x0000000000000000
	ah_1160 = ah_1154 | 0x0C
	ax_1161 = DPB(ax_537, ah_1160, 8) (alias)
	wLoc6C_1162 = ax_1161
	__fldcw(wLoc6C_1162)
	qwLoc68_1163 = (int64) rLoc2_1157
	__fldcw(wLoc6A_1152)
	rax_1164 = qwLoc68_1163
	rax_1165 = rax_1164 ^ rdx_539
	eax_1166 = (word32) rax_1165 (alias)
	rdx_rax_1167 = SEQ(rdx_539, rax_1165) (alias)
	edx_eax_1168 = rax_1165 (alias)
	ah_1169 = SLICE(rax_1165, byte, 8) (alias)
	ax_1170 = (word16) rax_1165 (alias)
	al_1171 = (byte) rax_1165 (alias)
	SZO_1172 = cond(rax_1165)
	C_1173 = false
// DataOut: ax fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C418:
	rLoc1_1134 = rLoc2_1057
	wLoc6A_1135 = __fstcw()
	eax_1136 = (word32) wLoc6A_1135
	ah_1137 = SLICE(eax_1136, byte, 8) (alias)
	ah_1138 = ah_1137 | 0x0C
	ax_1139 = DPB(ax_537, ah_1138, 8) (alias)
	SZO_1140 = cond(ah_1138)
	C_1141 = false
	wLoc6C_1142 = ax_1139
	rLoc2_1143 = rLoc2_1057
	__fldcw(wLoc6C_1142)
	qwLoc68_1144 = (int64) rLoc2_1143
	__fldcw(wLoc6A_1135)
	rax_1145 = qwLoc68_1144
	eax_1146 = (word32) rax_1145 (alias)
	rdx_rax_1147 = SEQ(rdx_539, rax_1145) (alias)
	edx_eax_1148 = rax_1145 (alias)
	ah_1149 = SLICE(rax_1145, byte, 8) (alias)
	ax_1150 = (word16) rax_1145 (alias)
	al_1151 = (byte) rax_1145 (alias)
// DataOut: ax fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C43E:
	r10_1061 = PHI(r10_529, r10_1159)
	wLoc6A_1062 = PHI(wLoc6A_1135, wLoc6A_1152)
	wLoc6C_1063 = PHI(wLoc6C_1142, wLoc6C_1162)
	rLoc2_1064 = PHI(rLoc2_1143, rLoc2_1157)
	qwLoc68_1065 = PHI(qwLoc68_1144, qwLoc68_1163)
	rLoc1_1066 = PHI(rLoc1_1134, rLoc1_1158)
	rax_1067 = PHI(rax_1145, rax_1165)
	eax_1068 = PHI(eax_1146, eax_1166)
	ah_1069 = PHI(ah_1149, ah_1169)
	ax_1070 = PHI(ax_1150, ax_1170)
	al_1071 = PHI(al_1151, al_1171)
	rsi_1072 = (uint64) dwLoc98_32
	esi_1073 = (word32) rsi_1072 (alias)
	rdx_1074 = 0x0000000000000000
	edx_1075 = (word32) rdx_1074 (alias)
	rdx_rax_1076 = SEQ(rdx_1074, rax_1067) (alias)
	edx_eax_1077 = rdx_1074 (alias)
	dl_1078 = (byte) rdx_1074 (alias)
	SZO_1079 = cond(esi_1073 & esi_1073)
	Z_1080 = SZO_1079 (alias)
	C_1081 = false
	branch Test(NE,Z_1080) l000000000040C470
// DataOut: ax fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C470:
	rLoc1_1133 = rLoc1_1066
// DataOut: fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C448:
	qwLoc68_1101 = rax_1067
	SZO_1102 = cond(rax_1067 & rax_1067)
	S_1103 = SZO_1102 (alias)
	C_1104 = false
	rLoc2_1105 = (real64) qwLoc68_1101
	branch Test(SG,S_1103) l000000000040C772
// DataOut: fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C772:
	rLoc2_1132 = rLoc2_1105 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C45A:
	rLoc2_1106 = PHI(rLoc2_1105, rLoc2_1132)
	rcx_1107 = 0x0000000000000000
	ecx_1108 = (word32) rcx_1107 (alias)
	SZO_1109 = cond(ecx_1108)
	rdx_1110 = 0x0000000000000001
	edx_1111 = (word32) rdx_1110 (alias)
	rdx_rax_1112 = SEQ(rdx_1110, rax_1067) (alias)
	edx_eax_1113 = rdx_1110 (alias)
	dl_1114 = (byte) rdx_1110 (alias)
	CZP_1115 = cond(rLoc2_1106 - rLoc1_1066)
	Z_1116 = CZP_1115 (alias)
	P_1117 = CZP_1115 (alias)
	rLoc1_1118 = rLoc1_1066
	cl_1119 = Test(PE,P_1117)
	rcx_1120 = DPB(rcx_1107, cl_1119, 0) (alias)
	ecx_1121 = DPB(ecx_1108, cl_1119, 0) (alias)
	branch Test(NE,Z_1116) l000000000040C46C
// DataOut: fs r11 r11d r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C468_1:
	rdx_1127 = rcx_1120
	edx_1128 = (word32) rdx_1127 (alias)
	rdx_rax_1129 = SEQ(rdx_1127, rax_1067) (alias)
	edx_eax_1130 = rdx_1127 (alias)
	dl_1131 = (byte) rdx_1127 (alias)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C46C:
	rdx_1122 = PHI(rdx_1110, rdx_1127)
	edx_1123 = PHI(edx_1111, edx_1128)
	rdx_rax_1124 = PHI(rdx_rax_1112, rdx_rax_1129)
	edx_eax_1125 = PHI(edx_eax_1113, edx_eax_1130)
	dl_1126 = PHI(dl_1114, dl_1131)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C472:
	rLoc2_1082 = PHI(rLoc2_1106, rLoc2_1064)
	CZP_1083 = PHI(CZP_1115, CZP_1059)
	P_1084 = PHI(P_1117, P)
	ecx_1085 = PHI(ecx_1121, ecx_530)
	rcx_1086 = PHI(rcx_1120, rcx_531)
	cl_1087 = PHI(cl_1119, cl_532)
	Z_1088 = PHI(Z_1116, Z_1080)
	rdx_1089 = PHI(rdx_1122, rdx_1074)
	edx_1090 = PHI(edx_1123, edx_1075)
	rdx_rax_1091 = PHI(rdx_rax_1124, rdx_rax_1076)
	edx_eax_1092 = PHI(edx_eax_1125, edx_eax_1077)
	dl_1093 = PHI(dl_1126, dl_1078)
	rax_1094 = rax_1067 + rdx_1089
	qwLoc68_1095 = rax_1094
	SZO_1096 = cond(rax_1094 & rax_1094)
	S_1097 = SZO_1096 (alias)
	C_1098 = false
	rLoc1_1099 = (real64) qwLoc68_1095
	branch Test(NS,S_1097) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C487:
	rLoc1_1100 = rLoc1_1099 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1CD:
	esi_1011 = PHI(esi_528, esi_528, esi_1073, esi_1073)
	r10_1012 = PHI(r10_529, r10_529, r10_1061, r10_1061)
	wLoc6A_1013 = PHI(wLoc6A, wLoc6A, wLoc6A_1062, wLoc6A_1062)
	wLoc6C_1014 = PHI(wLoc6C, wLoc6C, wLoc6C_1063, wLoc6C_1063)
	rLoc2_1015 = PHI(rLoc2_565, rLoc2_1052, rLoc2_1082, rLoc2_1082)
	CZP_1016 = PHI(CZP_77, CZP_1053, CZP_1083, CZP_1083)
	P_1017 = PHI(P, P, P_1084, P_1084)
	qwLoc68_1018 = PHI(qwLoc68_556, qwLoc68_556, qwLoc68_1095, qwLoc68_1095)
	S_1019 = PHI(S_558, S_558, S_1097, S_1097)
	rLoc1_1020 = PHI(rLoc1_566, rLoc1_566, rLoc1_1099, rLoc1_1100)
	CZ_1021 = PHI(CZ_102, CZ_1054, CZ_1054, CZ_1054)
	ecx_1022 = PHI(ecx_530, ecx_530, ecx_1085, ecx_1085)
	cl_1023 = PHI(cl_532, cl_532, cl_1087, cl_1087)
	Z_1024 = PHI(Z_1010, Z_1010, Z_1088, Z_1088)
	ah_1025 = PHI(ah_536, ah_536, ah_1069, ah_1069)
	ax_1026 = PHI(ax_537, ax_537, ax_1070, ax_1070)
	al_1027 = PHI(al_538, al_538, al_1071, al_1071)
	edx_1028 = PHI(edx_540, edx_540, edx_1090, edx_1090)
	rdx_rax_1029 = PHI(rdx_rax_554, rdx_rax_554, rdx_rax_1091, rdx_rax_1091)
	edx_eax_1030 = PHI(edx_eax_555, edx_eax_555, edx_eax_1092, edx_eax_1092)
	dl_1031 = PHI(dl_543, dl_543, dl_1093, dl_1093)
	rLocD0_1032 = (real80) rLoc1_1020
	rbx_1033 = qwLocA0_35
	rcx_1034 = 0x0000000000415F18
	rdx_1035 = 0xFFFFFFFFFFFFFFFF
	rsi_1036 = 0x0000000000000001
	rax_1037 = 0x0000000000000000
	r14_1038 = 0x0000000000000000
	r14d_1039 = (word32) r14_1038 (alias)
	SZO_1040 = cond(r14d_1039)
	C_1041 = false
	rdi_1042 = rbx_1033
	eax_1043 = __sprintf_chk(rdi_1042, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_1044 = rbx_1033
	rbx_1045 = 0x00000000FFFFFFFF
	ebx_1046 = (word32) rbx_1045 (alias)
	eax_1047 = strlen(rdi_1044)
	rax_1048 = DPB(rax_1037, eax_1047, 0) (alias)
	r15_1049 = rax_1048
	r15d_1050 = (word32) r15_1049 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEA3:
	rLoc2_619 = (real64) dwLocAC_56
	rbx_620 = 0x0000000000000000
	ebx_621 = (word32) rbx_620 (alias)
	SZO_622 = cond(ebx_621)
	C_623 = false
	rLoc3_624 = rLoc3_561
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEB4:
	rLoc4_626 = PHI(rLoc4, rLoc4_637)
	rLoc3_627 = PHI(rLoc3_624, rLoc3_1005)
	rLoc1_628 = PHI(rLoc1_566, rLoc1_1006)
	ebx_629 = PHI(ebx_621, ebx_633)
	Z_630 = PHI(Z_563, Z_1000)
	rLoc4_631 = rLoc4_626
	rbx_632 = (uint64) (ebx_629 + 0x00000001)
	ebx_633 = (word32) rbx_632 (alias)
	SCZO_634 = cond(ebx_633)
	rLoc4_635 = rLoc4_631 * rLoc2_619
	v46_636 = rLoc4_635
	rLoc4_637 = rLoc1_628
	rLoc1_638 = v46_636
	CZP_639 = cond(rLoc4_637 - rLoc1_638)
	C_640 = CZP_639 (alias)
	branch rLoc4_637 <u rLoc1_638 l000000000040BED0
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BED0:
	rLoc2_1007 = rLoc4_637
	rLoc1_1008 = rLoc3_627
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEC1:
	SCZO_999 = cond(ebx_633 - 0x00000008)
	Z_1000 = SCZO_999 (alias)
	branch Test(NE,Z_1000) l000000000040BEB0
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEB0:
	rLoc3_1003 = rLoc4_637
	v56_1004 = rLoc3_1003
	rLoc3_1005 = rLoc1_638
	rLoc1_1006 = v56_1004
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEC6:
	rLoc2_1001 = rLoc4_637
	rLoc1_1002 = rLoc3_627
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BED4:
	rLoc2_641 = PHI(rLoc2_1001, rLoc2_1007)
	rLoc1_642 = PHI(rLoc1_1002, rLoc1_1008)
	rLoc1_643 = rLoc2_641 / rLoc1_642
	SCZO_644 = cond(dwLoc98_32 - 0x00000001)
	Z_645 = SCZO_644 (alias)
	rLoc2_646 = rLoc2_641
	branch dwLoc98_32 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF70:
	v67_996 = rLoc2_646
	rLoc2_997 = rLoc1_643
	rLoc1_998 = v67_996
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEE3:
	rLoc2_871 = rLoc2_646
	rLoc2_872 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_873 = cond(rLoc2_872 - rLoc1_643)
	CZ_874 = CZP_873 (alias)
	branch Test(ULE,CZ_874) l000000000040C498
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C498:
	rLoc2_993 = rLoc2_872
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEF3:
	rLoc2_875 = (real64) Mem0[0x0000000000415F0C:real32]
	v52_876 = rLoc2_875
	rLoc2_877 = rLoc1_643
	rLoc1_878 = v52_876
	CZP_879 = cond(rLoc2_877 - rLoc1_878)
	C_880 = CZP_879 (alias)
	branch Test(UGE,C_880) l000000000040C660
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C660:
	wLoc6A_971 = __fstcw()
	eax_972 = (word32) wLoc6A_971
	ah_973 = SLICE(eax_972, byte, 8) (alias)
	rLoc2_974 = rLoc2_877 - rLoc1_878
	v61_975 = rLoc2_974
	rLoc2_976 = rLoc1_878
	rLoc1_977 = v61_975
	r10_978 = 0x0000000000000000
	ah_979 = ah_973 | 0x0C
	ax_980 = DPB(ax_537, ah_979, 8) (alias)
	wLoc6C_981 = ax_980
	__fldcw(wLoc6C_981)
	qwLoc68_982 = (int64) rLoc2_976
	__fldcw(wLoc6A_971)
	rax_983 = qwLoc68_982
	rax_984 = rax_983 ^ rdx_539
	eax_985 = (word32) rax_984 (alias)
	rdx_rax_986 = SEQ(rdx_539, rax_984) (alias)
	edx_eax_987 = rax_984 (alias)
	ah_988 = SLICE(rax_984, byte, 8) (alias)
	ax_989 = (word16) rax_984 (alias)
	al_990 = (byte) rax_984 (alias)
	SZO_991 = cond(rax_984)
	C_992 = false
// DataOut: al ax ebx fs r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF03:
	rLoc1_953 = rLoc2_877
	wLoc6A_954 = __fstcw()
	eax_955 = (word32) wLoc6A_954
	ah_956 = SLICE(eax_955, byte, 8) (alias)
	ah_957 = ah_956 | 0x0C
	ax_958 = DPB(ax_537, ah_957, 8) (alias)
	SZO_959 = cond(ah_957)
	C_960 = false
	wLoc6C_961 = ax_958
	rLoc2_962 = rLoc2_877
	__fldcw(wLoc6C_961)
	qwLoc68_963 = (int64) rLoc2_962
	__fldcw(wLoc6A_954)
	rax_964 = qwLoc68_963
	eax_965 = (word32) rax_964 (alias)
	rdx_rax_966 = SEQ(rdx_539, rax_964) (alias)
	edx_eax_967 = rax_964 (alias)
	ah_968 = SLICE(rax_964, byte, 8) (alias)
	ax_969 = (word16) rax_964 (alias)
	al_970 = (byte) rax_964 (alias)
// DataOut: al ax ebx fs r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF29:
	r10_881 = PHI(r10_529, r10_978)
	wLoc6A_882 = PHI(wLoc6A_954, wLoc6A_971)
	wLoc6C_883 = PHI(wLoc6C_961, wLoc6C_981)
	rLoc2_884 = PHI(rLoc2_962, rLoc2_976)
	qwLoc68_885 = PHI(qwLoc68_963, qwLoc68_982)
	rLoc1_886 = PHI(rLoc1_953, rLoc1_977)
	rax_887 = PHI(rax_964, rax_984)
	eax_888 = PHI(eax_965, eax_985)
	ah_889 = PHI(ah_968, ah_988)
	ax_890 = PHI(ax_969, ax_989)
	al_891 = PHI(al_970, al_990)
	rcx_892 = (uint64) dwLoc98_32
	ecx_893 = (word32) rcx_892 (alias)
	rdx_894 = 0x0000000000000000
	edx_895 = (word32) rdx_894 (alias)
	rdx_rax_896 = SEQ(rdx_894, rax_887) (alias)
	edx_eax_897 = rdx_894 (alias)
	dl_898 = (byte) rdx_894 (alias)
	SZO_899 = cond(ecx_893 & ecx_893)
	Z_900 = SZO_899 (alias)
	C_901 = false
	branch Test(NE,Z_900) l000000000040BF55
// DataOut: al ax ebx fs r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF33:
	qwLoc68_927 = rax_887
	SZO_928 = cond(rax_887 & rax_887)
	S_929 = SZO_928 (alias)
	C_930 = false
	rLoc2_931 = (real64) qwLoc68_927
	branch Test(SG,S_929) l000000000040C77D
// DataOut: ebx fs r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C77D:
	rLoc2_952 = rLoc2_931 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF45:
	rLoc2_932 = PHI(rLoc2_931, rLoc2_952)
	rcx_933 = 0x0000000000000000
	ecx_934 = (word32) rcx_933 (alias)
	SZO_935 = cond(ecx_934)
	rdx_936 = 0x0000000000000001
	edx_937 = (word32) rdx_936 (alias)
	rdx_rax_938 = SEQ(rdx_936, rax_887) (alias)
	edx_eax_939 = rdx_936 (alias)
	dl_940 = (byte) rdx_936 (alias)
	CZP_941 = cond(rLoc2_932 - rLoc1_886)
	Z_942 = CZP_941 (alias)
	P_943 = CZP_941 (alias)
	cl_944 = Test(PE,P_943)
	rcx_945 = DPB(rcx_933, cl_944, 0) (alias)
	ecx_946 = DPB(ecx_934, cl_944, 0) (alias)
	branch Test(NE,Z_942) l000000000040BF55
// DataOut: ebx fs r11 r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF51_1:
	rdx_947 = rcx_945
	edx_948 = (word32) rdx_947 (alias)
	rdx_rax_949 = SEQ(rdx_947, rax_887) (alias)
	edx_eax_950 = rdx_947 (alias)
	dl_951 = (byte) rdx_947 (alias)
// DataOut: ebx fs r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> r10:<invalid> cl:Test(PE,P) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF55:
	CZP_903 = PHI(CZP_941, CZP_941, CZP_879)
	P_904 = PHI(P_943, P_943, P)
	ecx_905 = PHI(ecx_946, ecx_946, ecx_893)
	rcx_906 = PHI(rcx_945, rcx_945, rcx_892)
	cl_907 = PHI(cl_944, cl_944, cl_532)
	Z_908 = PHI(Z_942, Z_942, Z_900)
	rdx_909 = PHI(rdx_936, rdx_947, rdx_894)
	edx_910 = PHI(edx_937, edx_948, edx_895)
	rdx_rax_911 = PHI(rdx_rax_938, rdx_rax_949, rdx_rax_896)
	edx_eax_912 = PHI(edx_eax_939, edx_eax_950, edx_eax_897)
	dl_913 = PHI(dl_940, dl_951, dl_898)
	rax_914 = rax_887 + rdx_909
	qwLoc68_915 = rax_914
	SZO_916 = cond(rax_914 & rax_914)
	S_917 = SZO_916 (alias)
	C_918 = false
	rLoc2_919 = (real64) qwLoc68_915
	branch Test(SG,S_917) l000000000040C758
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C758:
	rLoc2_923 = rLoc2_919 + Mem0[0x0000000000415F08:real32]
	v63_924 = rLoc2_923
	rLoc2_925 = rLoc1_886
	rLoc1_926 = v63_924
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF6A:
	v60_920 = rLoc2_919
	rLoc2_921 = rLoc1_886
	rLoc1_922 = v60_920
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF72:
	r10_647 = PHI(r10_881, r10_881, r10_529, r10_529)
	wLoc6A_648 = PHI(wLoc6A_882, wLoc6A_882, wLoc6A, wLoc6A)
	wLoc6C_649 = PHI(wLoc6C_883, wLoc6C_883, wLoc6C, wLoc6C)
	rLoc2_650 = PHI(rLoc2_921, rLoc2_925, rLoc2_993, rLoc2_997)
	CZP_651 = PHI(CZP_903, CZP_903, CZP_873, CZP_639)
	P_652 = PHI(P_904, P_904, P, P)
	qwLoc68_653 = PHI(qwLoc68_915, qwLoc68_915, qwLoc68_556, qwLoc68_556)
	S_654 = PHI(S_917, S_917, S_558, S_558)
	rLoc1_655 = PHI(rLoc1_922, rLoc1_926, rLoc1_643, rLoc1_998)
	ecx_656 = PHI(ecx_905, ecx_905, ecx_530, ecx_530)
	cl_657 = PHI(cl_907, cl_907, cl_532, cl_532)
	C_658 = PHI(C_918, C_918, C_640, C_640)
	ah_659 = PHI(ah_889, ah_889, ah_536, ah_536)
	ax_660 = PHI(ax_890, ax_890, ax_537, ax_537)
	r14_661 = qwLocA0_35
	rdx_662 = 0xFFFFFFFFFFFFFFFF
	rcx_663 = 0x0000000000415F1E
	rsi_664 = 0x0000000000000001
	rax_665 = 0x0000000000000000
	qwLoc80_666 = r11_95
	rdi_667 = r14_661
	rLoc90_668 = (real80) rLoc2_650
	rLocD0_669 = (real80) rLoc1_655
	eax_670 = __sprintf_chk(rdi_667, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F1E)
	rdi_671 = r14_661
	eax_672 = strlen(rdi_671)
	rax_673 = DPB(rax_665, eax_672, 0) (alias)
	r11_674 = qwLoc80_666
	rdx_675 = (uint64) dwLoc78_48
	edx_676 = (word32) rdx_675 (alias)
	dl_677 = (byte) rdx_675 (alias)
	r15_678 = rax_673
	r15d_679 = (word32) r15_678 (alias)
	rax_680 = 0x0000000000000000
	rLoc1_681 = (real64) rLoc90_668
	SZO_682 = cond(edx_676 & edx_676)
	Z_683 = SZO_682 (alias)
	r14_684 = r11_674 + 0x0000000000000001
	r14d_685 = (word32) r14_684 (alias)
	al_686 = (edx_676 & edx_676) == 0x00000000
	rax_687 = DPB(rax_680, al_686, 0) (alias)
	rax_688 = r14_684 + 0x0000000000000001 + rax_687
	rdx_rax_689 = SEQ(rdx_675, rax_688) (alias)
	edx_eax_690 = rax_688 (alias)
	SCZO_691 = cond(r15_678 - rax_688)
	CZ_692 = SCZO_691 (alias)
	branch r15_678 >u rax_688 l000000000040BFF0
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFCB:
	SZO_861 = cond(bLocB0 & 0x08)
	Z_862 = SZO_861 (alias)
	C_863 = false
	branch Test(EQ,Z_862) l000000000040C208
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C208:
	rLoc1_870 = rLoc1_681
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFD6:
	rax_864 = qwLocA0_35
	rdx_rax_865 = SEQ(rdx_675, rax_864) (alias)
	edx_eax_866 = rax_864 (alias)
	SCZO_867 = cond(Mem0[rax_864 - 0x0000000000000001 + r15_678:byte] - 0x30)
	Z_868 = SCZO_867 (alias)
	branch Test(NE,Z_868) l000000000040C210
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C210:
	rLoc1_869 = rLoc1_681
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFE7:
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFF0:
	SZO_693 = PHI(SZO_682, SZO_861)
	C_694 = PHI(C_658, C_863)
	rax_695 = PHI(rax_688, rax_864)
	rdx_rax_696 = PHI(rdx_rax_689, rdx_rax_865)
	edx_eax_697 = PHI(edx_eax_690, edx_eax_866)
	SCZO_698 = cond(dwLoc98_32 - 0x00000001)
	Z_699 = SCZO_698 (alias)
	rLoc1_700 = rLoc1_681 * Mem0[0x0000000000415F84:real32]
	branch dwLoc98_32 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C001:
	rLoc2_739 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_740 = cond(rLoc2_739 - rLoc1_700)
	CZ_741 = CZP_740 (alias)
	branch rLoc2_739 <=u rLoc1_700 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C00F:
	rLoc2_742 = (real64) Mem0[0x0000000000415F0C:real32]
	v64_743 = rLoc2_742
	rLoc2_744 = rLoc1_700
	rLoc1_745 = v64_743
	CZP_746 = cond(rLoc2_744 - rLoc1_745)
	C_747 = CZP_746 (alias)
	branch rLoc2_744 >=u rLoc1_745 l000000000040C720
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C720:
	wLoc6A_839 = __fstcw()
	eax_840 = (word32) wLoc6A_839
	ah_841 = SLICE(eax_840, byte, 8) (alias)
	rLoc2_842 = rLoc2_744 - rLoc1_745
	v65_843 = rLoc2_842
	rLoc2_844 = rLoc1_745
	rLoc1_845 = v65_843
	r10_846 = 0x0000000000000000
	ah_847 = ah_841 | 0x0C
	ax_848 = DPB(ax_660, ah_847, 8) (alias)
	wLoc6C_849 = ax_848
	__fldcw(wLoc6C_849)
	qwLoc68_850 = (int64) rLoc2_844
	__fldcw(wLoc6A_839)
	rax_851 = qwLoc68_850
	rax_852 = rax_851 ^ rdx_675
	eax_853 = (word32) rax_852 (alias)
	rdx_rax_854 = SEQ(rdx_675, rax_852) (alias)
	edx_eax_855 = rax_852 (alias)
	ah_856 = SLICE(rax_852, byte, 8) (alias)
	ax_857 = (word16) rax_852 (alias)
	al_858 = (byte) rax_852 (alias)
	SZO_859 = cond(rax_852)
	C_860 = false
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C01F:
	rLoc1_821 = rLoc2_744
	wLoc6A_822 = __fstcw()
	eax_823 = (word32) wLoc6A_822
	ah_824 = SLICE(eax_823, byte, 8) (alias)
	ah_825 = ah_824 | 0x0C
	ax_826 = DPB(ax_660, ah_825, 8) (alias)
	SZO_827 = cond(ah_825)
	C_828 = false
	wLoc6C_829 = ax_826
	rLoc2_830 = rLoc2_744
	__fldcw(wLoc6C_829)
	qwLoc68_831 = (int64) rLoc2_830
	__fldcw(wLoc6A_822)
	rax_832 = qwLoc68_831
	eax_833 = (word32) rax_832 (alias)
	rdx_rax_834 = SEQ(rdx_675, rax_832) (alias)
	edx_eax_835 = rax_832 (alias)
	ah_836 = SLICE(rax_832, byte, 8) (alias)
	ax_837 = (word16) rax_832 (alias)
	al_838 = (byte) rax_832 (alias)
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C045:
	r10_748 = PHI(r10_647, r10_846)
	wLoc6A_749 = PHI(wLoc6A_822, wLoc6A_839)
	wLoc6C_750 = PHI(wLoc6C_829, wLoc6C_849)
	rLoc2_751 = PHI(rLoc2_830, rLoc2_844)
	qwLoc68_752 = PHI(qwLoc68_831, qwLoc68_850)
	rLoc1_753 = PHI(rLoc1_821, rLoc1_845)
	rax_754 = PHI(rax_832, rax_852)
	eax_755 = PHI(eax_833, eax_853)
	ah_756 = PHI(ah_836, ah_856)
	ax_757 = PHI(ax_837, ax_857)
	al_758 = PHI(al_838, al_858)
	r14_759 = (uint64) dwLoc98_32
	r14d_760 = (word32) r14_759 (alias)
	rdx_761 = 0x0000000000000000
	edx_762 = (word32) rdx_761 (alias)
	rdx_rax_763 = SEQ(rdx_761, rax_754) (alias)
	edx_eax_764 = rdx_761 (alias)
	dl_765 = (byte) rdx_761 (alias)
	SZO_766 = cond(r14d_760 & r14d_760)
	Z_767 = SZO_766 (alias)
	C_768 = false
	branch (r14d_760 & r14d_760) != 0x00000000 l000000000040C080
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C080:
	rLoc1_820 = rLoc1_753
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C051:
	qwLoc68_788 = rax_754
	SZO_789 = cond(rax_754 & rax_754)
	S_790 = SZO_789 (alias)
	C_791 = false
	rLoc2_792 = (real64) qwLoc68_788
	branch (rax_754 & rax_754) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C79E:
	rLoc2_819 = rLoc2_792 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C063:
	rLoc2_793 = PHI(rLoc2_792, rLoc2_819)
	rcx_794 = 0x0000000000000000
	ecx_795 = (word32) rcx_794 (alias)
	SZO_796 = cond(ecx_795)
	rdx_797 = 0x0000000000000001
	edx_798 = (word32) rdx_797 (alias)
	rdx_rax_799 = SEQ(rdx_797, rax_754) (alias)
	edx_eax_800 = rdx_797 (alias)
	dl_801 = (byte) rdx_797 (alias)
	CZP_802 = cond(rLoc2_793 - rLoc1_753)
	Z_803 = CZP_802 (alias)
	P_804 = CZP_802 (alias)
	rLoc1_805 = rLoc1_753
	cl_806 = Test(PE,P_804)
	rcx_807 = DPB(rcx_794, cl_806, 0) (alias)
	ecx_808 = DPB(ecx_795, cl_806, 0) (alias)
	branch rLoc2_793 != rLoc1_753 l000000000040C075
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C071_1:
	rdx_814 = rcx_807
	edx_815 = (word32) rdx_814 (alias)
	rdx_rax_816 = SEQ(rdx_814, rax_754) (alias)
	edx_eax_817 = rdx_814 (alias)
	dl_818 = (byte) rdx_814 (alias)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C075:
	rdx_809 = PHI(rdx_797, rdx_814)
	edx_810 = PHI(edx_798, edx_815)
	rdx_rax_811 = PHI(rdx_rax_799, rdx_rax_816)
	edx_eax_812 = PHI(edx_eax_800, edx_eax_817)
	dl_813 = PHI(dl_801, dl_818)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C082:
	rLoc2_769 = PHI(rLoc2_793, rLoc2_751)
	CZP_770 = PHI(CZP_802, CZP_746)
	P_771 = PHI(P_804, P_652)
	ecx_772 = PHI(ecx_808, ecx_656)
	rcx_773 = PHI(rcx_807, rcx_663)
	cl_774 = PHI(cl_806, cl_657)
	Z_775 = PHI(Z_803, Z_767)
	rdx_776 = PHI(rdx_809, rdx_761)
	edx_777 = PHI(edx_810, edx_762)
	rdx_rax_778 = PHI(rdx_rax_811, rdx_rax_763)
	edx_eax_779 = PHI(edx_eax_812, edx_eax_764)
	dl_780 = PHI(dl_813, dl_765)
	rax_781 = rax_754 + rdx_776
	qwLoc68_782 = rax_781
	SZO_783 = cond(rax_781 & rax_781)
	S_784 = SZO_783 (alias)
	C_785 = false
	rLoc1_786 = (real64) qwLoc68_782
	branch (rax_781 & rax_781) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C093:
	rLoc1_787 = rLoc1_786 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C0A0:
	r10_701 = PHI(r10_647, r10_647, r10_748, r10_748)
	wLoc6A_702 = PHI(wLoc6A_648, wLoc6A_648, wLoc6A_749, wLoc6A_749)
	wLoc6C_703 = PHI(wLoc6C_649, wLoc6C_649, wLoc6C_750, wLoc6C_750)
	rLoc2_704 = PHI(rLoc2_650, rLoc2_739, rLoc2_769, rLoc2_769)
	CZP_705 = PHI(CZP_651, CZP_740, CZP_770, CZP_770)
	P_706 = PHI(P_652, P_652, P_771, P_771)
	qwLoc68_707 = PHI(qwLoc68_653, qwLoc68_653, qwLoc68_782, qwLoc68_782)
	S_708 = PHI(S_654, S_654, S_784, S_784)
	rLoc1_709 = PHI(rLoc1_700, rLoc1_700, rLoc1_786, rLoc1_787)
	CZ_710 = PHI(CZ_692, CZ_741, CZ_741, CZ_741)
	ecx_711 = PHI(ecx_656, ecx_656, ecx_772, ecx_772)
	cl_712 = PHI(cl_657, cl_657, cl_774, cl_774)
	Z_713 = PHI(Z_699, Z_699, Z_775, Z_775)
	ah_714 = PHI(ah_659, ah_659, ah_756, ah_756)
	ax_715 = PHI(ax_660, ax_660, ax_757, ax_757)
	al_716 = PHI(al_686, al_686, al_758, al_758)
	edx_717 = PHI(edx_676, edx_676, edx_777, edx_777)
	rdx_rax_718 = PHI(rdx_rax_696, rdx_rax_696, rdx_rax_778, rdx_rax_778)
	edx_eax_719 = PHI(edx_eax_697, edx_eax_697, edx_eax_779, edx_eax_779)
	dl_720 = PHI(dl_677, dl_677, dl_780, dl_780)
	rLoc1_721 = rLoc1_709 / Mem0[0x0000000000415F84:real32]
	r14_722 = qwLocA0_35
	rcx_723 = 0x0000000000415F18
	rdx_724 = 0xFFFFFFFFFFFFFFFF
	rsi_725 = 0x0000000000000001
	rax_726 = 0x0000000000000000
	rdi_727 = r14_722
	rLocD0_728 = (real80) rLoc1_721
	eax_729 = __sprintf_chk(rdi_727, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_730 = r14_722
	r14_731 = 0x0000000000000000
	r14d_732 = (word32) r14_731 (alias)
	SZO_733 = cond(r14d_732)
	C_734 = false
	eax_735 = strlen(rdi_730)
	rax_736 = DPB(rax_726, eax_735, 0) (alias)
	r15_737 = rax_736
	r15d_738 = (word32) r15_737 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C218:
	esi_567 = PHI(esi_528, esi_528, esi_528, esi_1011)
	rLoc4_568 = PHI(rLoc4_637, rLoc4_637, rLoc4_637, rLoc4)
	rLoc3_569 = PHI(rLoc3_627, rLoc3_627, rLoc3_627, rLoc3_561)
	qwLoc80_570 = PHI(qwLoc80_666, qwLoc80_666, qwLoc80_666, qwLoc80_87)
	rLoc90_571 = PHI(rLoc90_668, rLoc90_668, rLoc90_668, rLoc90)
	r11_572 = PHI(r11_674, r11_674, r11_674, r11_95)
	r10_573 = PHI(r10_647, r10_647, r10_701, r10_1012)
	wLoc6A_574 = PHI(wLoc6A_648, wLoc6A_648, wLoc6A_702, wLoc6A_1013)
	wLoc6C_575 = PHI(wLoc6C_649, wLoc6C_649, wLoc6C_703, wLoc6C_1014)
	rLoc2_576 = PHI(rLoc2_650, rLoc2_650, rLoc2_704, rLoc2_1015)
	CZP_577 = PHI(CZP_651, CZP_651, CZP_705, CZP_1016)
	P_578 = PHI(P_652, P_652, P_706, P_1017)
	qwLoc68_579 = PHI(qwLoc68_653, qwLoc68_653, qwLoc68_707, qwLoc68_1018)
	S_580 = PHI(S_654, S_654, S_708, S_1019)
	rLoc1_581 = PHI(rLoc1_869, rLoc1_870, rLoc1_721, rLoc1_1020)
	rLocD0_582 = PHI(rLocD0_669, rLocD0_669, rLocD0_728, rLocD0_1032)
	r15_583 = PHI(r15_678, r15_678, r15_737, r15_1049)
	r14_584 = PHI(r14_684, r14_684, r14_731, r14_1038)
	r14d_585 = PHI(r14d_685, r14d_685, r14d_732, r14d_1039)
	CZ_586 = PHI(CZ_692, CZ_692, CZ_710, CZ_1021)
	ebx_587 = PHI(ebx_633, ebx_633, ebx_633, ebx_1046)
	ecx_588 = PHI(ecx_656, ecx_656, ecx_711, ecx_1022)
	rcx_589 = PHI(rcx_663, rcx_663, rcx_723, rcx_1034)
	cl_590 = PHI(cl_657, cl_657, cl_712, cl_1023)
	SZO_591 = PHI(SZO_861, SZO_861, SZO_733, SZO_1040)
	Z_592 = PHI(Z_868, Z_862, Z_713, Z_1024)
	C_593 = PHI(C_863, C_863, C_734, C_1041)
	eax_594 = PHI(eax_672, eax_672, eax_735, eax_1047)
	ah_595 = PHI(ah_659, ah_659, ah_714, ah_1025)
	ax_596 = PHI(ax_660, ax_660, ax_715, ax_1026)
	al_597 = PHI(al_686, al_686, al_716, al_1027)
	edx_598 = PHI(edx_676, edx_676, edx_717, edx_1028)
	rdx_rax_599 = PHI(rdx_rax_865, rdx_rax_689, rdx_rax_718, rdx_rax_1029)
	edx_eax_600 = PHI(edx_eax_866, edx_eax_690, edx_eax_719, edx_eax_1030)
	dl_601 = PHI(dl_677, dl_677, dl_720, dl_1031)
	rbx_602 = PHI(rbx_632, rbx_632, rbx_632, rbx_1045)
	r12_603 = qwLocB8_103
	rsi_604 = qwLocA0_35
	rdx_605 = r15_583
	r12_606 = r12_603 - r15_583
	r12d_607 = (word32) r12_606 (alias)
	r15_608 = r15_583 - r14_584
	r15d_609 = (word32) r15_608 (alias)
	SCZO_610 = cond(r15_608)
	rdi_611 = r12_606
	rax_612 = memmove(rdi_611, rsi_604, rdx_605)
	r8_613 = r12_606 + r15_608
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C237:
	sil_104 = PHI(sil_525, sil_1229)
	dwLoc74_105 = PHI(dwLoc74, dwLoc74_1230)
	qwLoc90_106 = PHI(qwLoc90, qwLoc90_1231)
	dil_107 = PHI(dil_80, dil_1232)
	edi_108 = PHI(edi_79, edi_1269)
	r10d_109 = PHI(r10d_526, r10d_1330)
	r10b_110 = PHI(r10b_527, r10b_1331)
	esi_111 = PHI(esi_567, esi_1270)
	rLoc4_112 = PHI(rLoc4_568, rLoc4)
	rLoc3_113 = PHI(rLoc3_569, rLoc3)
	qwLoc80_114 = PHI(qwLoc80_570, qwLoc80_1237)
	rLoc90_115 = PHI(rLoc90_571, rLoc90)
	r11_116 = PHI(r11_572, r11_1238)
	r10_117 = PHI(r10_573, r10_1329)
	wLoc6A_118 = PHI(wLoc6A_574, wLoc6A)
	wLoc6C_119 = PHI(wLoc6C_575, wLoc6C)
	rLoc2_120 = PHI(rLoc2_576, rLoc2)
	CZP_121 = PHI(CZP_577, CZP_1200)
	P_122 = PHI(P_578, P)
	qwLoc68_123 = PHI(qwLoc68_579, qwLoc68)
	S_124 = PHI(S_580, S_1201)
	rLoc1_125 = PHI(rLoc1_581, rLoc1)
	rLocD0_126 = PHI(rLocD0_582, rLocD0)
	r8_127 = PHI(r8_613, r8_1289)
	qwLoc98_128 = PHI(qwLoc98, qwLoc98_1290)
	r15_129 = PHI(r15_608, r15_85)
	r15d_130 = PHI(r15d_609, r15d_86)
	r9_131 = PHI(r9, r9_1309)
	r9d_132 = PHI(r9d, r9d_1310)
	r12_133 = PHI(r12_606, r12_1314)
	r12d_134 = PHI(r12d_607, r12d_1315)
	r14_135 = PHI(r14_584, r14_1245)
	r14d_136 = PHI(r14d_585, r14d_1246)
	CZ_137 = PHI(CZ_586, CZ_1247)
	ebx_138 = PHI(ebx_587, ebx_1291)
	ecx_139 = PHI(ecx_588, ecx_1271)
	rcx_140 = PHI(rcx_589, rcx_1272)
	cl_141 = PHI(cl_590, cl_1273)
	rax_142 = PHI(rax_612, rax_1320)
	eax_143 = PHI(eax_594, eax_1296)
	ah_144 = PHI(ah_595, ah_1297)
	ax_145 = PHI(ax_596, ax_1298)
	al_146 = PHI(al_597, al_1299)
	rdx_147 = PHI(rdx_605, rdx_1318)
	edx_148 = PHI(edx_598, edx_1260)
	rdx_rax_149 = PHI(rdx_rax_599, rdx_rax_1316)
	edx_eax_150 = PHI(edx_eax_600, edx_eax_1302)
	dl_151 = PHI(dl_601, dl_1263)
	SCZO_152 = PHI(SCZO_610, SCZO_1303)
	rbx_153 = PHI(rbx_602, rbx_1304)
	rsi_154 = PHI(rsi_604, rsi_1305)
	rdi_155 = PHI(rdi_611, rdi_1306)
	SZO_157 = cond(bLocB0 & 0x04)
	Z_158 = SZO_157 (alias)
	C_159 = false
	branch (bLocB0 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C318:
	r8_431 = r8_127 - r12_133
	SCZO_432 = cond(r8_431)
	rdi_433 = r13_96
	r15_434 = 0xFFFFFFFFFFFFFFFF
	r15d_435 = (word32) r15_434 (alias)
	r14_436 = r8_431
	r14d_437 = (word32) r14_436 (alias)
	eax_438 = strlen(rdi_433)
	rax_439 = DPB(rax_142, eax_438, 0) (alias)
	rdi_440 = fp - 0x0000000000000060
	rsi_441 = r12_133
	rcx_442 = 0x0000000000000029
	rdx_443 = r14_436
	qwLoc98_444 = rax_439
	rax_445 = __memcpy_chk(fp - 0x0000000000000060, rsi_441, rdx_443, 0x0000000000000029)
	r9_446 = r12_133 + r14_436
	r9d_447 = (word32) r9_446 (alias)
	r12_448 = r13_96
	r12d_449 = (word32) r12_448 (alias)
	r13_450 = qwLoc98_444
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C36C:
	r15_451 = PHI(r15_434, r15_483)
	r15d_452 = PHI(r15d_435, r15d_484)
	r9_453 = PHI(r9_446, r9_511)
	r9d_454 = PHI(r9d_447, r9d_512)
	r14_455 = PHI(r14_436, r14_485)
	r14d_456 = PHI(r14d_437, r14d_486)
	CZ_457 = PHI(CZ_137, CZ_481)
	rax_458 = PHI(rax_445, rax_510)
	eax_459 = PHI(eax_438, eax_492)
	ah_460 = PHI(ah_144, ah_495)
	ax_461 = PHI(ax_145, ax_496)
	al_462 = PHI(al_146, al_497)
	rdx_463 = PHI(rdx_443, rdx_507)
	rdx_rax_464 = PHI(rdx_rax_149, rdx_rax_493)
	SCZO_465 = PHI(SCZO_432, SCZO_506)
	rbp_466 = PHI(rbp_64, rbp_479)
	rsi_467 = PHI(rsi_441, rsi_508)
	rdi_468 = PHI(rdi_440, rdi_509)
	edx_469 = (word32) Mem0[rbp_466 + 0x0000000000000000:byte]
	rdx_470 = DPB(rdx_463, edx_469, 0) (alias)
	rdx_rax_471 = DPB(rdx_rax_464, edx_469, 64) (alias)
	edx_eax_472 = SEQ(edx_469, eax_459) (alias)
	dl_473 = (byte) edx_469 (alias)
	SZO_474 = cond(dl_473 & dl_473)
	Z_475 = SZO_474 (alias)
	C_476 = false
	branch (dl_473 & dl_473) == 0x00 l000000000040C383
// DataOut: dl ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C374:
	SCZO_515 = cond(dl_473 - 0x7E)
	CZ_516 = SCZO_515 (alias)
	r15d_517 = (word32) dl_473
	r15_518 = DPB(r15_451, r15d_517, 0) (alias)
	branch dl_473 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C37B_1:
	r15_523 = r14_455
	r15d_524 = (word32) r15_523 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C37F:
	r15_519 = PHI(r15_518, r15_523)
	r15d_520 = PHI(r15d_517, r15d_524)
	rbp_521 = rbp_466 + 0x0000000000000001
	SCZO_522 = cond(rbp_521)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C383:
	r15_477 = PHI(r15_451, r15_519)
	r15d_478 = PHI(r15d_452, r15d_520)
	rbp_479 = PHI(rbp_466, rbp_521)
	SCZO_480 = cond(r15_477 - r14_455)
	CZ_481 = SCZO_480 (alias)
	rax_482 = fp - 0x0000000000000060
	branch r15_477 <=u r14_455 l000000000040C38F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C38B_1:
	r15_513 = r14_455
	r15d_514 = (word32) r15_513 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C38F:
	r15_483 = PHI(r15_477, r15_513)
	r15d_484 = PHI(r15d_478, r15d_514)
	r14_485 = r14_455 - r15_483
	r14d_486 = (word32) r14_485 (alias)
	r9_487 = r9_453 - r15_483
	rdx_488 = r15_483
	rsi_489 = fp - 0x0000000000000060 + r14_485
	rdi_490 = r9_487
	rax_491 = memcpy(rdi_490, rsi_489, rdx_488)
	eax_492 = (word32) rax_491 (alias)
	rdx_rax_493 = SEQ(rdx_488, rax_491) (alias)
	edx_eax_494 = rax_491 (alias)
	ah_495 = SLICE(rax_491, byte, 8) (alias)
	ax_496 = (word16) rax_491 (alias)
	al_497 = (byte) rax_491 (alias)
	SZO_498 = cond(r14_485 & r14_485)
	Z_499 = SZO_498 (alias)
	C_500 = false
	r9_501 = rax_491
	r9d_502 = (word32) r9_501 (alias)
	branch (r14_485 & r14_485) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C358:
	r9_505 = r9_501 - r13_450
	SCZO_506 = cond(r9_505)
	rdx_507 = r13_450
	rsi_508 = r12_448
	rdi_509 = r9_505
	rax_510 = memcpy(rdi_509, rsi_508, rdx_507)
	r9_511 = rax_510
	r9d_512 = (word32) r9_511 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C3AC:
	r12_503 = rax_491
	r12d_504 = (word32) r12_503 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C242:
	r8_160 = PHI(r8_431, r8_127)
	qwLoc98_161 = PHI(qwLoc98_444, qwLoc98_128)
	r13_162 = PHI(r13_450, r13_96)
	r15_163 = PHI(r15_483, r15_129)
	r15d_164 = PHI(r15d_484, r15d_130)
	r9_165 = PHI(r9_501, r9_131)
	r9d_166 = PHI(r9d_502, r9d_132)
	r12_167 = PHI(r12_503, r12_133)
	r12d_168 = PHI(r12d_504, r12d_134)
	r14_169 = PHI(r14_485, r14_135)
	r14d_170 = PHI(r14d_486, r14d_136)
	CZ_171 = PHI(CZ_481, CZ_137)
	rcx_172 = PHI(rcx_442, rcx_140)
	rax_173 = PHI(rax_491, rax_142)
	eax_174 = PHI(eax_492, eax_143)
	ah_175 = PHI(ah_495, ah_144)
	ax_176 = PHI(ax_496, ax_145)
	al_177 = PHI(al_497, al_146)
	rdx_178 = PHI(rdx_488, rdx_147)
	edx_179 = PHI(edx_469, edx_148)
	rdx_rax_180 = PHI(rdx_rax_493, rdx_rax_149)
	edx_eax_181 = PHI(edx_eax_494, edx_eax_150)
	dl_182 = PHI(dl_473, dl_151)
	SCZO_183 = PHI(SCZO_480, SCZO_152)
	rbp_184 = PHI(rbp_479, rbp_64)
	rsi_185 = PHI(rsi_489, rsi_154)
	rdi_186 = PHI(rdi_490, rdi_155)
	SZO_187 = cond(bLocB0 & 0x80)
	Z_188 = SZO_187 (alias)
	C_189 = false
	branch (bLocB0 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C249:
	SCZO_323 = cond(ebx_138 - 0xFFFFFFFF)
	Z_324 = SCZO_323 (alias)
	branch ebx_138 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C618:
	rdx_392 = qwLocA8_40
	edx_393 = (word32) rdx_392 (alias)
	rdx_rax_394 = SEQ(rdx_392, rax_173) (alias)
	edx_eax_395 = rdx_392 (alias)
	dl_396 = (byte) rdx_392 (alias)
	SCZO_397 = cond(rdx_392 - 0x0000000000000001)
	CZ_398 = SCZO_397 (alias)
	branch rdx_392 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C7A9:
	rbx_427 = 0x0000000000000000
	ebx_428 = (word32) rbx_427 (alias)
	SZO_429 = cond(ebx_428)
	C_430 = false
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C627:
	r14_399 = (uint64) dwLocAC_56
	r14d_400 = (word32) r14_399 (alias)
	rbx_401 = 0x0000000000000001
	ebx_402 = (word32) rbx_401 (alias)
	rax_403 = 0x0000000000000001
	eax_404 = (word32) rax_403 (alias)
	rdx_rax_405 = SEQ(rdx_392, rax_403) (alias)
	edx_eax_406 = rax_403 (alias)
	ah_407 = SLICE(rax_403, byte, 8) (alias)
	ax_408 = (word16) rax_403 (alias)
	al_409 = (byte) rax_403 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C640:
	ebx_410 = PHI(ebx_402, ebx_424)
	Z_411 = PHI(Z_324, Z_426)
	rax_412 = PHI(rax_403, rax_414)
	rbx_413 = PHI(rbx_401, rbx_423)
	rax_414 = rax_412 *s r14_399
	eax_415 = (word32) rax_414 (alias)
	rdx_rax_416 = SEQ(rdx_392, rax_414) (alias)
	edx_eax_417 = rax_414 (alias)
	ah_418 = SLICE(rax_414, byte, 8) (alias)
	ax_419 = (word16) rax_414 (alias)
	al_420 = (byte) rax_414 (alias)
	SCZO_421 = cond(rdx_392 - rax_414)
	CZ_422 = SCZO_421 (alias)
	branch rdx_392 <=u rax_414 l000000000040C252
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C64D:
	rbx_423 = (uint64) (ebx_410 + 0x00000001)
	ebx_424 = (word32) rbx_423 (alias)
	SCZO_425 = cond(ebx_424 - 0x00000008)
	Z_426 = SCZO_425 (alias)
	branch ebx_424 != 0x00000008 l000000000040C640
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C655:
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C252:
	r14_325 = PHI(r14_169, r14_399, r14_399, r14_169)
	r14d_326 = PHI(r14d_170, r14d_400, r14d_400, r14d_170)
	CZ_327 = PHI(CZ_171, CZ_422, CZ_422, CZ_398)
	ebx_328 = PHI(ebx_138, ebx_410, ebx_424, ebx_428)
	rdx_329 = PHI(rdx_178, rdx_392, rdx_392, rdx_392)
	edx_330 = PHI(edx_179, edx_393, edx_393, edx_393)
	dl_331 = PHI(dl_182, dl_396, dl_396, dl_396)
	SCZO_332 = PHI(SCZO_323, SCZO_421, SCZO_425, SCZO_397)
	rbx_333 = PHI(rbx_153, rbx_413, rbx_423, rbx_427)
	rax_334 = (uint64) dwLocB0_38
	eax_335 = (word32) rax_334 (alias)
	rcx_336 = (uint64) ebx_328
	ecx_337 = (word32) rcx_336 (alias)
	rax_338 = (uint64) (eax_335 & 0x00000100)
	eax_339 = (word32) rax_338 (alias)
	rdx_rax_340 = SEQ(rdx_329, rax_338) (alias)
	edx_eax_341 = rax_338 (alias)
	ah_342 = SLICE(rax_338, byte, 8) (alias)
	ax_343 = (word16) rax_338 (alias)
	al_344 = (byte) rax_338 (alias)
	rcx_345 = (uint64) (ecx_337 | eax_339)
	ecx_346 = (word32) rcx_345 (alias)
	SZO_347 = cond(ecx_346)
	Z_348 = SZO_347 (alias)
	C_349 = false
	branch ecx_346 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(0) Local -00B8(64)

l000000000040C261:
	SZO_350 = cond(bLocB0 & 0x40)
	Z_351 = SZO_350 (alias)
	C_352 = false
	branch (bLocB0 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B8(64)

l000000000040C3E8:
	rcx_388 = qwLocA0_35
	rsi_389 = rcx_388 + 0x0000000000000289
	Mem390[rcx_388 + 0x0000000000000288:byte] = 0x20
	qwLocB8_391 = rsi_389
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C26C:
	rcx_353 = PHI(rcx_345, rcx_388)
	qwLocB8_354 = PHI(qwLocB8_103, qwLocB8_391)
	rsi_355 = PHI(rsi_185, rsi_389)
	SZO_356 = cond(ebx_328 & ebx_328)
	Z_357 = SZO_356 (alias)
	C_358 = false
	branch (ebx_328 & ebx_328) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C274:
	rcx_359 = qwLocB8_354
	rdx_360 = rcx_359 + 0x0000000000000001
	edx_361 = (word32) rdx_360 (alias)
	rdx_rax_362 = SEQ(rdx_360, rax_338) (alias)
	edx_eax_363 = rdx_360 (alias)
	dl_364 = (byte) rdx_360 (alias)
	rcx_365 = (uint64) dwLoc78_48
	ecx_366 = (word32) rcx_365 (alias)
	SZO_367 = cond(ecx_366 & ecx_366)
	Z_368 = SZO_367 (alias)
	C_369 = false
	branch (ecx_366 & ecx_366) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3D0:
	SCZO_383 = cond(ebx_328 - 0x00000001)
	Z_384 = SCZO_383 (alias)
	rcx_385 = 0x000000000000006B
	ecx_386 = (word32) rcx_385 (alias)
	cl_387 = (byte) rcx_385 (alias)
	branch ebx_328 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C289:
	Z_377 = PHI(Z_368, Z_384)
	SCZO_378 = PHI(SCZO_332, SCZO_383)
	rcx_379 = (int64) ebx_328
	ecx_380 = (word32) Mem0[rcx_379 + 0x0000000000415F78:byte]
	rcx_381 = DPB(rcx_379, ecx_380, 0) (alias)
	cl_382 = (byte) ecx_380 (alias)
// DataOut: cl eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C293:
	ecx_370 = PHI(ecx_380, ecx_386)
	rcx_371 = PHI(rcx_381, rcx_385)
	cl_372 = PHI(cl_382, cl_387)
	Z_373 = PHI(Z_377, Z_384)
	SCZO_374 = PHI(SCZO_378, SCZO_383)
	rdi_375 = qwLocB8_354
	Mem376[rdi_375:byte] = cl_372
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C29A:
	r14_268 = PHI(r14_325, r14_190)
	r14d_269 = PHI(r14d_326, r14d_191)
	CZ_270 = PHI(CZ_327, CZ_192)
	ebx_271 = PHI(ebx_328, ebx_193)
	ecx_272 = PHI(ecx_370, ecx_194)
	rcx_273 = PHI(rcx_371, rcx_195)
	cl_274 = PHI(cl_372, cl_196)
	qwLocB8_275 = PHI(qwLocB8_354, qwLocB8_197)
	rax_276 = PHI(rax_338, rax_201)
	eax_277 = PHI(eax_339, eax_202)
	ah_278 = PHI(ah_342, ah_203)
	ax_279 = PHI(ax_343, ax_204)
	al_280 = PHI(al_344, al_205)
	rdx_281 = PHI(rdx_360, rdx_210)
	edx_282 = PHI(edx_361, edx_211)
	rdx_rax_283 = PHI(rdx_rax_362, rdx_rax_212)
	edx_eax_284 = PHI(edx_eax_363, edx_eax_213)
	dl_285 = PHI(dl_364, dl_214)
	SCZO_286 = PHI(SCZO_374, SCZO_206)
	rbx_287 = PHI(rbx_333, rbx_207)
	rsi_288 = PHI(rsi_355, rsi_208)
	rdi_289 = PHI(rdi_375, rdi_209)
	SZO_290 = cond(eax_277 & eax_277)
	Z_291 = SZO_290 (alias)
	C_292 = false
	branch (eax_277 & eax_277) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C7F5:
	qwLocB8_322 = rdx_281
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2A2:
	rax_293 = (uint64) dwLoc78_48
	eax_294 = (word32) rax_293 (alias)
	rdx_rax_295 = SEQ(rdx_281, rax_293) (alias)
	edx_eax_296 = rax_293 (alias)
	SZO_297 = cond(eax_294 & eax_294)
	Z_298 = SZO_297 (alias)
	C_299 = false
	branch (eax_294 & eax_294) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3B8:
	SZO_312 = cond(ebx_271 & ebx_271)
	Z_313 = SZO_312 (alias)
	C_314 = false
	branch (ebx_271 & ebx_271) == 0x00000000 l000000000040C2AE
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3C0:
	Mem315[rdx_281:byte] = 0x69
	rdx_316 = rdx_281 + 0x0000000000000001
	edx_317 = (word32) rdx_316 (alias)
	rdx_rax_318 = SEQ(rdx_316, rax_293) (alias)
	edx_eax_319 = rdx_316 (alias)
	dl_320 = (byte) rdx_316 (alias)
	SCZO_321 = cond(rdx_316)
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2AE:
	SZO_300 = PHI(SZO_297, SZO_312, SZO_312)
	Z_301 = PHI(Z_298, Z_313, Z_313)
	C_302 = PHI(C_299, C_314, C_314)
	rdx_303 = PHI(rdx_281, rdx_281, rdx_316)
	edx_304 = PHI(edx_282, edx_282, edx_317)
	rdx_rax_305 = PHI(rdx_rax_295, rdx_rax_295, rdx_rax_318)
	edx_eax_306 = PHI(edx_eax_296, edx_eax_296, edx_eax_319)
	dl_307 = PHI(dl_285, dl_285, dl_320)
	SCZO_308 = PHI(SCZO_286, SCZO_286, SCZO_321)
	rax_309 = rdx_303 + 0x0000000000000001
	Mem310[rdx_303:byte] = 0x42
	qwLocB8_311 = rax_309
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2BA:
	r14_215 = PHI(r14_169, r14_325, r14_268, r14_268)
	r14d_216 = PHI(r14d_170, r14d_326, r14d_269, r14d_269)
	CZ_217 = PHI(CZ_171, CZ_327, CZ_270, CZ_270)
	ebx_218 = PHI(ebx_138, ebx_328, ebx_271, ebx_271)
	ecx_219 = PHI(ecx_139, ecx_346, ecx_272, ecx_272)
	rcx_220 = PHI(rcx_172, rcx_345, rcx_273, rcx_273)
	cl_221 = PHI(cl_141, cl_141, cl_274, cl_274)
	qwLocB8_222 = PHI(qwLocB8_103, qwLocB8_103, qwLocB8_311, qwLocB8_322)
	rdx_223 = PHI(rdx_178, rdx_329, rdx_303, rdx_281)
	edx_224 = PHI(edx_179, edx_330, edx_304, edx_282)
	dl_225 = PHI(dl_182, dl_331, dl_307, dl_285)
	SCZO_226 = PHI(SCZO_183, SCZO_332, SCZO_308, SCZO_286)
	rbx_227 = PHI(rbx_153, rbx_333, rbx_287, rbx_287)
	rsi_228 = PHI(rsi_185, rsi_185, rsi_288, rsi_288)
	rax_229 = qwLocB8_222
	rdi_230 = qwLoc28_44
	rdi_231 = rdi_230 ^ Mem0[fs:0x00000028:word64]
	SZO_232 = cond(rdi_231)
	Z_233 = SZO_232 (alias)
	C_234 = false
	Mem235[rax_229:byte] = 0x00
	rax_236 = r12_167
	eax_237 = (word32) rax_236 (alias)
	rdx_rax_238 = SEQ(rdx_223, rax_236) (alias)
	edx_eax_239 = rax_236 (alias)
	ah_240 = SLICE(rax_236, byte, 8) (alias)
	ax_241 = (word16) rax_236 (alias)
	al_242 = (byte) rax_236 (alias)
	branch rdi_231 != 0x0000000000000000 l000000000040C7E6
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7EB:
	r14_190 = PHI(r14_325, r14_215)
	r14d_191 = PHI(r14d_326, r14d_216)
	CZ_192 = PHI(CZ_327, CZ_217)
	ebx_193 = PHI(ebx_328, ebx_218)
	ecx_194 = PHI(ecx_346, ecx_219)
	rcx_195 = PHI(rcx_353, rcx_220)
	cl_196 = PHI(cl_141, cl_221)
	qwLocB8_197 = PHI(qwLocB8_354, qwLocB8_222)
	SZO_198 = PHI(SZO_356, SZO_232)
	Z_199 = PHI(Z_357, Z_233)
	C_200 = PHI(C_358, C_234)
	rax_201 = PHI(rax_338, rax_236)
	eax_202 = PHI(eax_339, eax_237)
	ah_203 = PHI(ah_342, ah_240)
	ax_204 = PHI(ax_343, ax_241)
	al_205 = PHI(al_344, al_242)
	SCZO_206 = PHI(SCZO_332, SCZO_226)
	rbx_207 = PHI(rbx_333, rbx_227)
	rsi_208 = PHI(rsi_355, rsi_228)
	rdi_209 = PHI(rdi_186, rdi_231)
	rdx_210 = qwLocB8_197
	edx_211 = (word32) rdx_210 (alias)
	rdx_rax_212 = SEQ(rdx_210, rax_201) (alias)
	edx_eax_213 = rdx_210 (alias)
	dl_214 = (byte) rdx_210 (alias)
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2DC:
	rsp_243 = fp - 0x0000000000000018
	SCZO_244 = cond(fp - 0x0000000000000018)
	rbx_246 = qwLoc18
	rsp_247 = fp - 0x0000000000000010
	rbp_249 = qwLoc10
	rsp_250 = fp - 0x0000000000000008
	rsp_252 = qwLoc08
	rsp_253 = rsp_252 + 0x0000000000000008
	rbp_254 = Mem235[rsp_253:word64]
	rsp_255 = rsp_253 + 0x0000000000000008
	rsi_256 = Mem235[rsp_255:word64]
	rsp_257 = rsp_255 + 0x0000000000000008
	rdi_258 = Mem235[rsp_257:word64]
	rsp_259 = rsp_257 + 0x0000000000000008
	return rax_236
// DataOut: bpl fs r11 r11d r13 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040BD70_exit:
	use rsp_259 (=> rspOut)
	use rbp_254 (=> rbpOut)
	use r8_160 (=> r8Out)
	use r9_165 (=> r9Out)
	use r11_116 (=> r11Out)
	use r13_162 (=> r13Out)
	use r14d_216 (=> r14dOut)
	use r15_163 (=> r15Out)
// DataOut: bpl r11 r11d r13 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r14:<invalid> r12:<invalid> rbx:rbx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040C810(word64 rdx, word64 rdi, word64 r8, ptr64 & r9Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi rdx
// LiveOut: r13 r13b r14 r14b r15 r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C810_entry:
	*r9Out = r9
	*r14Out = r14
	*r15Out = r15
// DataOut: fs r11 r14 r14b r15 r8 r9 rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word64 rbp_102
	word64 rdx_140
	word64 r13_6
	*r13Out = rsi
	word64 r12_11 = rdx
	word64 rbx_112 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C910:
	word64 rax_236 = getenv(0x00000000004138E4)
	rbx_112 = rax_236
	branch rax_236 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:rdi -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C926:
	word64 rax_242 = getenv(0x0000000000415F24)
	rbx_112 = rax_242
	branch rax_242 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C93C:
	word64 rdx_256 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem260[rdx:word64] = rdx_256 + 512
	rbp_102 = 0x0000000000000000
	ebp = 0x00000000 (alias)
	rdx_140 = rdx_256 + 512
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C82C:
	branch Mem0[rbx_112:byte] == 0x27 l000000000040C8A0
// DataOut: fs r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8A0:
	rbx_112 = rbx_112 + 0x0000000000000001
// DataOut: fs r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C833:
	word64 rsp_124
	word64 rbp_125
	word64 r13_127
	word64 r14_128
	word64 r15_129
	word64 rax_130 = fn0000000000409E50(0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_112, out rsp_124, out rbp_125, out r12_11, out r13_127, out r14_128, out r15_129)
	byte al_133 = (byte) rax_130
	branch (word32) rax_130 < 0x00000000 l000000000040C8B0
// DataOut: al ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8B0:
	word64 rsp_159
	word64 r9_162
	word64 r13_164
	word64 r14_165
	word64 r15_166
	branch fn0000000000411360(0x00000000, rsp_124 + 0x0000000000000008, rbx_112, r8, out rsp_159, out rbp_102, out r8, out r9_162, out r12_11, out r13_164, out r14_165, out r15_166) != 0x00000000 l000000000040C968
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C968:
	Mem229[rbp_102:word32] = 0x00000000
	rdx_140 = Mem229[r12_11:word64]
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> eax:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_112:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> eax:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8DA:
	word64 rdx_190 = Mem0[rsp_159 + 0x0000000000000008:word64]
	branch rbx_112 != rdx_190 l000000000040C8F9
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F9:
	rbx_112 = rbx_112 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_112:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F0:
	branch rbx_112 == rdx_190 l000000000040C980
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8E4:
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C980:
	branch Mem0[rdx_190 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C998:
	rbp_102 = (uint64) (ebp | 0x00000180)
	ebp = (word32) rbp_102 (alias)
	branch Mem0[rdx_190 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C9A8:
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C986:
	ebp = DPB(ebp, 0x84, 0) (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C98A:
	rbp_102 = (uint64) (ebp | 0x00000020)
	ebp = (word32) rbp_102 (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C907:
	rdx_140 = Mem0[r12_11:word64]
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C84E:
	Mem139[r12_11:word64] = 0x0000000000000001
	rbp_102 = (uint64) (ebp | Mem139[DPB(rax_130, (int16) al_133, 0) * 0x0000000000000004 + 0x00415F50:word32])
	rdx_140 = 0x0000000000000001
	ebp = (word32) rbp_102 (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C864:
	Mem104[rbp_102:word32] = ebp
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86A:
	branch rdx_140 != 0x0000000000000000 l000000000040C894
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86F:
	Mem79[r12_11:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	r8 = r8 + 512
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C894:
	return r8
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040C810_exit:
// DataOut: r13 r13b r14 r14b r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rsi
// LiveOut: ebp esp r12 r12b r12d rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C9B0_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1F8:word64]
	branch rbx_16 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C9D1:
	branch Mem0[rbx_16:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C8:
	rbx_16 = Mem0[rbx_16 + 0x0000000000000008:word64]
	branch rbx_16 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C2:
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9F0:
	word64 rax_52 = getpwuid((uint64) ebp_10)
	word64 rdi_56 = 0x0000000000000011
	branch rax_52 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA07:
	r12 = Mem0[r8:word64]
	*r12Out = r12
	rdi_56 = DPB(rax_52, strlen(r12), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA16:
	word64 rax_66 = fn0000000000410C40(rsi, rdi_56, out rsp_11)
	Mem68[rax_66:word32] = ebp_10
	strcpy(rax_66 + 0x0000000000000010, r12)
	word64 rax_72 = Mem68[0x000000000061B1F8:word64]
	Mem73[0x000000000061B1F8:word64] = rax_66
	Mem74[rax_66 + 0x0000000000000008:word64] = rax_72
	rbx_16 = rax_66
// DataOut: fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9D5:
	word64 rsp_34 = rsp_11 + 0x0000000000000008
	word64 rax_28 = 0x0000000000000000
	word64 rdx_32 = rbx_16 + 0x0000000000000010
	word64 rbp_35
	*rbpOut = Mem0[rsp_34:word64]
	word64 rsp_39
	*rspOut = Mem0[rsp_34 + 0x0000000000000008:word64] + 0x0000000000000008
	branch Mem0[rbx_16 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_28 = rdx_32
// DataOut: ebp esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E7:
	return rax_28
// DataOut: ebp esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040C9B0_exit:
// DataOut: ebp esp r12 r12b r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CB40(word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rsi
// LiveOut: r12 r12d rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CB40_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1E8:word64]
	branch rbx_16 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CB61:
	branch Mem0[rbx_16:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB58:
	rbx_16 = Mem0[rbx_16 + 0x0000000000000008:word64]
	branch rbx_16 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB52:
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB80:
	word64 rax_52 = getgrgid((uint64) ebp_10)
	word64 rdi_56 = 0x0000000000000011
	branch rax_52 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB97:
	r12 = Mem0[r8:word64]
	*r12Out = r12
	rdi_56 = DPB(rax_52, strlen(r12), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CBA6:
	word64 rax_66 = fn0000000000410C40(rsi, rdi_56, out rsp_11)
	Mem68[rax_66:word32] = ebp_10
	strcpy(rax_66 + 0x0000000000000010, r12)
	word64 rax_72 = Mem68[0x000000000061B1E8:word64]
	Mem73[0x000000000061B1E8:word64] = rax_66
	Mem74[rax_66 + 0x0000000000000008:word64] = rax_72
	rbx_16 = rax_66
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB65:
	word64 rsp_34 = rsp_11 + 0x0000000000000008
	word64 rax_28 = 0x0000000000000000
	word64 rdx_32 = rbx_16 + 0x0000000000000010
	word64 rbp_35
	*rbpOut = Mem0[rsp_34:word64]
	word64 rsp_39
	*rspOut = Mem0[rsp_34 + 0x0000000000000008:word64] + 0x0000000000000008
	branch Mem0[rbx_16 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_28 = rdx_32
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB77:
	return rax_28
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040CB40_exit:
// DataOut: r12 r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CCD0(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r11d r12 r13 r15 r15b rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_26 = rsi + 0x0000000000000014
	word64 r14_9
	*r14Out = 0x0000000066666667
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CD30:
	word64 rdx_68 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem79[rcx_26:byte] = (byte) (uint64) (rdx_68 * 0x0000000000000005 * 0x0000000000000002 + 0x0000000000000030 - edi)
	rdi = rdx_68
	edi = (word32) rdx_68 (alias)
	branch rdx_68 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi rsi:0x0000000000000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem83[rcx_26 - 0x0000000000000001:byte] = 0x2D
	return rcx_26 - 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi rsi:0x0000000000000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CCF0:
	word64 rdx_35 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem45[rcx_26:byte] = (byte) (uint64) ((word32) (rdi - (rdx_35 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_35
	branch rdx_35 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_26
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:rsi rsi:0x0000000000000030 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx r14 r14b r14d r14w rax rcx rdi rdx
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r11 r11d r12 r12d r13 r13d r15 r15b r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 r14_5
	*r14Out = 0x00000000CCCCCCCD
// DataOut: dil fs r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rsi *u rdi
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



word64 fn000000000040CDC0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12dOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rcx rdi rdx rsi
// LiveOut: r12d r13 r14 r15 rbp rsi rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CDC0_entry:
	*r15Out = r15
// DataOut: ebx fs r11 r15 r8 r8d r9 r9b r9d rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_355
	word64 qwLoc40_101
	word64 rbp_113
	word64 rax_338
	word64 rcx_109
	word32 eax_278
	word32 ecx_273
	word64 r12_110
	word64 rbx_24 = (uint64) r9d
	word64 rax_35 = DPB(rax, strlen(rdi), 0)
	word64 r13_11 = rsi
	*r13Out = r13_11
	word32 ebx_25 = (word32) rbx_24
	byte bl_26 = (byte) rbx_24
	word64 qwLoc48_100 = rdi
	word64 r14_104 = rax_35
	*r14Out = r14_104
	branch (bl_26 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CF60:
	branch DPB(rax, __ctype_get_mb_cur_max(), 0) <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CF6F:
	word64 rax_456 = DPB(rax, mbstowcs(0x0000000000000000, rdi, 0x0000000000000000), 0)
	branch rax_456 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CFA8:
	word64 r15_488 = (rax_456 + 0x0000000000000001) * 0x0000000000000004
	*r15Out = r15_488
	word64 rax_492 = malloc(r15_488)
	qwLoc40_101 = rax_492
	branch rax_492 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D160:
	branch (bl_26 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D169:
	*r15Out = rax_35
	rbp_113 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CFCF:
	branch DPB(rax_492, mbstowcs(rax_492, rdi, rax_456 + 0x0000000000000001), 0) == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CFEC:
	word64 rsi_526
	word64 qwLoc30_516
	Mem509[rax_492 - 0x0000000000000004 + r15_488:word32] = 0x00000000
	word64 rdi_510 = (uint64) Mem509[rax_492:word32]
	branch (word32) rdi_510 == 0x00000000 l000000000040D106
// DataOut: bl ebx fs r11 r12 r13 r14 r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D106:
	*r15Out = (int64) wcswidth(rax_492, rax_456 + 0x0000000000000001)
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D004:
	byte bLoc21_644 = 0x00
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D010:
	branch iswprint(rdi_510) != 0x00000000 l000000000040D025
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D019:
	Mem677[rdi_510:word32] = 0x0000FFFD
	bLoc21_644 = 0x01
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D025:
	rdi_510 = (uint64) Mem509[rdi_510:word32]
	branch (word32) rdi_510 != 0x00000000 l000000000040D010
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D030:
	r15_355 = (int64) wcswidth(rax_492, rax_456 + 0x0000000000000001)
	*r15Out = r15_355
	branch bLoc21_644 == 0x00 l000000000040D118
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D118:
	rsi_526 = rax_456 + 0x0000000000000001
	rax_338 = Mem509[rcx:word64]
	branch r15_355 <=u rax_338 l000000000040CF28
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF28:
	rbp_113 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D125:
	qwLoc30_516 = rax_35 + 0x0000000000000001
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D04D:
	rsi_526 = rax_492
	qwLoc30_516 = DPB(rax_492, wcstombs(0x0000000000000000, rax_492, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D064:
	word64 rax_528 = malloc(qwLoc30_516)
	rbp_113 = rax_528
	branch rax_528 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D138:
	branch (bl_26 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D141:
	word32 r12d_620
	*r12dOut = 0xFFFFFFFF
// DataOut: fs r11 r12d r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040D07A:
	word64 rdi_540 = (uint64) Mem509[rax_492:word32]
	word64 rax_534 = Mem509[rcx:word64]
	word64 rax_536 = rax_492
	branch (word32) rdi_540 == 0x00000000 l000000000040D173
// DataOut: bl ebx fs r11 r12 r13 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D173:
	*r15Out = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D092:
	*r15Out = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0BA:
	word32 eax_576 = wcwidth(rdi_540)
	byte al_579 = (byte) eax_576
	branch eax_576 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0A0:
	rax_536 = DPB(rax_536, (int16) al_579, 0) + r15_355
	branch rax_534 <u rax_536 l000000000040D0E0
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0C4:
	Mem596[rsi_526:word32] = 0x0000FFFD
	rax_536 = r15_355 + 0x0000000000000001
	branch rax_534 >=u rax_536 l000000000040D0AC
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0AC:
	rdi_540 = (uint64) Mem509[rsi_526:word32]
	*r15Out = rax_536
	branch (word32) rdi_540 == 0x00000000 l000000000040D0E0
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0DA:
// DataOut: bl ebx fs r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D0E0:
	Mem558[rax_492:word32] = 0x00000000
	qwLoc48_100 = rax_528
	*r14Out = DPB(rax_536, wcstombs(rax_528, rax_492, qwLoc30_516), 0)
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF83:
	branch (bl_26 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040D14D:
	*r15Out = rax_35
	qwLoc40_101 = 0x0000000000000000
	rbp_113 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF8C:
	qwLoc40_101 = 0x0000000000000000
	rbp_113 = 0x0000000000000000
	word32 r12d_473
	*r12dOut = 0xFFFFFFFF
// DataOut: fs r11 r12d r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CDFA:
	qwLoc40_101 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE03:
	*r15Out = rax_35
	rbp_113 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE08:
	rax_338 = Mem0[rcx:word64]
	branch r15_355 <=u rax_338 l000000000040CF2A
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF2A:
	branch r15_355 >=u rax_338 l000000000040D180
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D180:
	rax_338 = r15_355
// DataOut: bl ebx ecx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF33:
	Mem377[rcx:word64] = r15_355
	word64 rax_373 = rax_338 - r15_355
	rcx_109 = rax_373
	ecx_273 = (word32) rax_373 (alias)
	eax_278 = (word32) (uint64) r8d (alias)
	branch eax_278 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx fs r11 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE15:
	*r14Out = rax_338
// DataOut: bl ebx ecx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE1A:
	Mem343[rcx:word64] = rax_338
	ecx_273 = 0x00000000
	rcx_109 = 0x0000000000000000
	eax_278 = (word32) (uint64) r8d (alias)
	branch eax_278 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx fs r11 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF4C:
	r12_110 = rcx_109
	rcx_109 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE2A:
	r12_110 = 0x0000000000000000
	branch eax_278 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE32:
	r12_110 = rcx_109 >>u 0x0000000000000001
	rcx_109 = (uint64) (ecx_273 & 0x00000001) + r12_110
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE3E:
	branch (bl_26 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE43_1:
	rcx_109 = 0x0000000000000000
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_25 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE4A_1:
	r12_110 = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64) Local -0040(64) Local -0048(64)

l000000000040CE5A:
	word64 rdx_164 = rcx_109 - 0x0000000000000001
	word64 rbx_166 = rsi - 0x0000000000000001 + rdx
	branch rcx_109 == 0x0000000000000000 l000000000040CE97
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE6D:
	branch rsi >=u rbx_166 l000000000040CE97
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE72:
	word64 rax_240 = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE89:
	Mem254[rbp_113 - 0x0000000000000001:byte] = 0x20
	r13_11 = r13_11 + 0x0000000000000001
	*r13Out = r13_11
	branch rdx_164 != rax_240 l000000000040CE80
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE80:
	rax_240 = rax_240 + 0x0000000000000001
	branch r13_11 == rbx_166 l000000000040CE97
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE97:
	Mem179[rbp_113:byte] = 0x00
	word64 rdx_180 = rbx_166 - r13_11
	branch rdx_180 <=u r14_104 l000000000040CEB6
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
	rdx_180 = r14_104
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64) Local -0040(64)

l000000000040CEB6:
	word64 rax_188 = mempcpy(r13_11, qwLoc48_100, rdx_180)
	word64 rdx_195 = rax_188
	word64 rsi_197 = r12_110 - 0x0000000000000001
	branch r12_110 == 0x0000000000000000 l000000000040CEF6
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CECD:
	branch rbx_166 <=u rax_188 l000000000040CEF6
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CED2:
	word64 rax_214 = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEE9:
	rdx_195 = rdx_195 + 0x0000000000000001
	Mem229[rdx_195 - 0x0000000000000001:byte] = 0x20
	branch rsi_197 != rax_214 l000000000040CEE0
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEE0:
	rax_214 = rax_214 + 0x0000000000000001
	branch rdx_195 == rbx_166 l000000000040CEF6
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEF6:
	Mem211[rdx_195:byte] = 0x00
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEF9:
	word32 r12d_158
	*r12dOut = (word32) (r12_110 + (rcx_109 + r14_104))
// DataOut: fs r11 r12d r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEFF:
	free(qwLoc40_101)
	free(rbp_113)
	word64 rbp_85
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_88
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	return qwLoc08 + 0x0000000000000020
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040CDC0_exit:
// DataOut: r12d r13 r14 r15 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:rbx eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax ebp ebx esp r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D240_entry:
	*rdiOut = rdi
	*r12Out = r12
	*r14Out = r14
// DataOut: ebx edx fs r11 r11d r12 r12b r12d r14 r14b r14d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0034(64)

l000000000040D240:
	word32 eax_142
	word64 r15_6 = (uint64) edx
	*r15Out = r15_6
	word64 rax_27 = Mem0[fs:0x00000028:word64]
	word32 r15d_7 = (word32) r15_6
	word64 r13_14 = rdi + rsi
	*r13Out = r13_14
	word64 rbp_20 = rdi
	word64 rax_212 = (uint64) __ctype_get_mb_cur_max()
	branch rax_212 <=u 0x0000000000000001 l000000000040D370
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D370:
	branch rdi >=u r13_14 l000000000040D406
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D379:
	word64 rcx_397 = Mem0[__ctype_b_loc():word64]
	eax_142 = 0x00000000 (alias)
	word32 esi_402 = (word32) (uint64) ((word32) (uint64) r15d_7 & 0x00000002)
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D398:
	rbp_20 = rbp_20 + 0x0000000000000001
	word32 edx_414 = (word32) Mem0[rcx_397 + DPB(rdx, (word32) Mem0[rbp_20 - 0x0000000000000001:byte], 0) * 0x0000000000000002:word16]
	rdx = DPB(rdx, edx_414, 0) (alias)
	branch (SLICE(edx_414, byte, 8) & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edx esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3A9:
	branch esi_402 != 0x00000000 l000000000040D369
// DataOut: eax edx esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3AD:
	rdx = (uint64) (edx_414 & 0x00000002)
	branch (word32) rdx != 0x00000000 l000000000040D393
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B2:
	branch eax_142 != 0x7FFFFFFF l000000000040D390
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D390:
	eax_142 = (word32) (uint64) (eax_142 + 0x00000001) (alias)
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D393:
	branch rbp_20 == r13_14 l000000000040D3C5
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B9:
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D277:
	branch rdi >=u r13_14 l000000000040D406
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D406:
	eax_142 = 0x00000000 (alias)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D280:
	word64 r15_194 = (uint64) (r15d_7 & 0x00000001)
	*r15Out = r15_194
	word64 r14_196 = (uint64) ((word32) (uint64) r15d_7 & 0x00000002)
	*r14Out = r14_196
	word64 r12_192
	*r12Out = 0x0000000000000000
	word32 r12d_193 = 0x00000000
	word32 r15d_195 = (word32) r15_194
	word32 r14d_197 = (word32) r14_196
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2AC:
	word32 eax_218 = (word32) Mem0[rbp_20:byte]
	rax_212 = DPB(rax_212, eax_218, 0) (alias)
	byte al_220 = (byte) eax_218
	branch al_220 <= 0x3F l000000000040D290
// DataOut: al fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D290:
	branch al_220 >= 0x25 l000000000040D29B
// DataOut: al fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D294:
	rax_212 = (uint64) (eax_218 - 0x00000020)
	branch (byte) rax_212 >u 0x03 l000000000040D2C3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2B4:
	branch al_220 < 0x41 l000000000040D2C3
// DataOut: al fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2B8:
	branch al_220 <= 0x5F l000000000040D29B
// DataOut: al fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2BC:
	rax_212 = (uint64) (eax_218 - 0x00000061)
	branch (byte) rax_212 <=u 0x1D l000000000040D29B
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2C3:
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2F4:
	rax_212 = DPB(rax_212, mbrtowc(fp - 0x0000000000000034, rbp_20, r13_14 - rbp_20, fp - 0x0000000000000030), 0) (alias)
	rdi = fp - 0x0000000000000034
	*rdiOut = rdi
	word64 rbx_313 = rax_212
	branch rax_212 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D360:
	branch r15d_195 == 0x00000000 l000000000040D29B
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:fp - 0x0000000000000034 rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D29B:
	word64 r12_285 = (uint64) (r12d_193 + 0x00000001)
	*r12Out = r12_285
	rbp_20 = rbp_20 + 0x0000000000000001
	r12d_193 = (word32) r12_285 (alias)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D315:
	branch rax_212 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:fp - 0x0000000000000034 rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3E8:
	branch r15d_195 != 0x00000000 l000000000040D369
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:fp - 0x0000000000000034 rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3F1:
	word64 r12_371 = (uint64) (r12d_193 + 0x00000001)
	*r12Out = r12_371
	rbp_20 = r13_14
	r12d_193 = (word32) r12_371 (alias)
	branch r13_14 >u r13_14 l000000000040D2AC
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:fp - 0x0000000000000034 rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D31F:
	rdi = (uint64) dwLoc34
	*rdiOut = rdi
	branch rax_212 != 0x0000000000000000 l000000000040D32F
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:fp - 0x0000000000000034 rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32B_1:
	rbx_313 = 0x0000000000000001
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 eax:0x00000001 r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32F:
	word32 eax_325 = wcwidth(rdi)
	rax_212 = DPB(0x0000000000000001, eax_325, 0) (alias)
	branch eax_325 >= 0x00000000 l000000000040D2D0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 eax:0x00000001 r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2D0:
	branch eax_325 > (word32) ((uint64) (0x7FFFFFFF - r12d_193)) l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2E0:
	word64 r12_362 = (uint64) (r12d_193 + eax_325)
	*r12Out = r12_362
	r12d_193 = (word32) r12_362 (alias)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D338:
	branch r14d_197 != 0x00000000 l000000000040D369
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D369:
	eax_142 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D33D:
	rdi = (uint64) dwLoc34
	*rdiOut = rdi
	branch iswcntrl(rdi) != 0x00000000 l000000000040D2E3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D34A:
	branch r12d_193 == 0x7FFFFFFF l000000000040D3C0
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3C0:
	eax_142 = 0x7FFFFFFF (alias)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D353:
	word64 r12_353 = (uint64) (r12d_193 + 0x00000001)
	*r12Out = r12_353
	r12d_193 = (word32) r12_353 (alias)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2E3:
	*rdiOut = fp - 0x0000000000000030
	rbp_20 = rbp_20 + rbx_313
	branch mbsinit(fp - 0x0000000000000030) != 0x00000000 l000000000040D2A3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2A3:
	branch r13_14 <=u rbp_20 l000000000040D401
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D401:
	eax_142 = (word32) (uint64) r12d_193 (alias)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000030 rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3C5:
	word64 rsi_57 = rax_27 ^ Mem0[fs:0x00000028:word64]
	word32 esi_58 = (word32) rsi_57
	branch rsi_57 != 0x0000000000000000 l000000000040D40A
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut: esi fs r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64)

l000000000040D40A_thunk_fn000000000040D420:
	word32 ebx_106
	word64 rsp_107
	word64 rbp_108
	word64 rsi_109
	word64 r12_110
	word64 r13_111
	word64 r14_112
	word64 r15_113
	return fn000000000040D420(esi_58, rdi, fs, qwLoc48, out ebx_106, out rsp_107, out rbp_108, out rsi_109, out r12_110, out r13_111, out r14_112, out r15_113)
// DataOut: eax ebp ebx esp fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D3D5:
	word32 ebx_90
	*ebxOut = (word32) qwLoc18
	word64 rbp_98
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_100
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	word64 rdi_103
	*rdiOut = Mem0[qwLoc08 + 0x0000000000000018:word64]
	word64 rsp_104
	*rspOut = qwLoc08 + 0x0000000000000020
	return eax_142
// DataOut: eax ebp ebx esp fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D240_exit:
// DataOut: eax ebp ebx esp r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn000000000040D420(word32 esi, word64 rdi, selector fs, word64 qwArg00, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rdi
// LiveOut: eax ebp ebx esp r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040D420_entry:
// DataOut: esi fs r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = (uint64) esi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	qwLoc08 = DPB(qwLoc08, dwLoc08, 0) (alias)
	rbx = rdi
	rsp = fp - 0x0000000000000010
	eax = strlen(rdi)
	rax = DPB(rax, eax, 0) (alias)
	rsp = fp - 0x0000000000000008
	SCZO = cond(fp - 0x0000000000000008)
	rdi = rbx
	edi = (word32) rdi (alias)
	rdx = (uint64) ebp
	edx = (word32) rdx (alias)
	dh = SLICE(rdx, byte, 8) (alias)
	rbx = qwLoc08
	rsp = fp
	rbp = qwArg00
	rsp = fp + 0x0000000000000008
	rsi = rax
	esi = (word32) rsi (alias)
// DataOut: edx fs r11 r11d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43B_thunk_fn000000000040D240:
	eax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	rax = DPB(rax, eax, 0) (alias)
	al = (byte) eax (alias)
	return eax
// DataOut: eax ebp ebx esp fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx eax:<invalid> rdi:rdi rdx:(uint64) ebp rsi:rax -8(fp):rbx -4(fp):rbp

fn000000000040D420_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax ebp ebx esp r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r15:<invalid> r13:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r12 r13 r13d r14 r15 rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D450_entry:
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000050
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc50 = rsi
	qwLoc38 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0050(64)

l000000000040D490:
	rsi = qwLoc50
	rdx = qwLoc38
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc48 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc28 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: fs r11 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: fs r11 r12 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D547:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: fs r11 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: fs r11 r12 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = memcpy(rdi, rsi, rdx)
	return eax
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5C3:
	v26 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v26
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4; depth: 84)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000018
	SCZO = cond(fp - 0x0000000000000018)
	rbx = qwLoc18
	rsp = fp - 0x0000000000000010
	rbp = qwLoc10
	rsp = fp - 0x0000000000000008
	rsp = qwLoc08
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D450_exit:
	use rsp (=> rspOut)
	use rsi (=> rsiOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r13 r13d r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut: r12 r13 r13d r14 r15 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
// DataOut: edi fs r11 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax fs r11 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsp_12
	word64 rsi_13
	word64 r12_14
	word64 r13_15
	word64 r14_16
	word64 r15_17
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsp_12, out rsi_13, out r12_14, out r13_15, out r14_16, out r15_17)
	return rsi_13
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut: r12 r13 r13d r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> r15:<invalid> r14:<invalid>



word64 fn000000000040D6A0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D6A0_entry:
// DataOut: ebx fs r11 r15 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_120 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: fs r11 r15 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32)

l000000000040D713:
	fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64])
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: fs r11 r15 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6B8:
	word64 rcx_50 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_51 = cond(rcx_50 - 0x0000000000000006)
	byte C_111 = SCZO_51
	byte Z_144 = SCZO_51
	byte CZ_100 = SCZO_51
	branch rcx_50 <= 0x0000000000000006 l000000000040D703
// DataOut: fs r11 r15 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6C8:
	word64 rsi_146 = rax_11 - 0x0000000000000006
	word64 rdi_149 = 0x0000000000415FD8
	word64 rcx_151 = 0x0000000000000007
// DataOut: fs r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D6:
	branch rcx_151 == 0x0000000000000000 l000000000040D6D8
// DataOut: fs r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D6_1:
	byte SCZO_141 = cond(Mem0[rsi_159:byte] - Mem0[rdi_160:byte])
	C_111 = SCZO_141 (alias)
	Z_144 = SCZO_141 (alias)
	CZ_100 = SCZO_141 (alias)
	rsi_146 = rsi_159 + 0x0000000000000001
	rdi_149 = rdi_160 + 0x0000000000000001
	rcx_151 = rcx_151 - 0x0000000000000001
	word64 rsi_159 = rsi_146
	word64 rdi_160 = rdi_149
	branch Mem0[rsi_159:byte] != Mem0[rdi_160:byte] l000000000040D6D6
// DataOut: fs r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D8:
	branch Z_144 l000000000040D703
// DataOut: fs r11 r15 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6DA:
	word64 rcx_105 = 0x0000000000000003
	word64 rsi_101 = rax_11 + 0x0000000000000001
	word64 rdi_103 = 0x0000000000415FE0
// DataOut: fs r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E7:
	branch rcx_105 == 0x0000000000000000 l000000000040D6E9
// DataOut: fs r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E7_2:
	byte SCZO_128 = cond(Mem0[rsi_161:byte] - Mem0[rdi_162:byte])
	C_111 = SCZO_128 (alias)
	CZ_100 = SCZO_128 (alias)
	rsi_101 = rsi_161 + 0x0000000000000001
	rdi_103 = rdi_162 + 0x0000000000000001
	rcx_105 = rcx_105 - 0x0000000000000001
	word64 rsi_161 = rsi_101
	word64 rdi_162 = rdi_103
	branch Mem0[rsi_161:byte] != Mem0[rdi_162:byte] l000000000040D6E7
// DataOut: fs r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E9:
	rbx_120 = rax_11 + 0x0000000000000001
	branch CZ_100 != C_111 l000000000040D703
// DataOut: fs r11 r15 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6F8:
	Mem126[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_120 = rax_11 + 0x0000000000000004
// DataOut: fs r11 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_120
	Mem43[0x000000000061A648:word64] = rbx_120
	return fp + 0x0000000000000004
// DataOut: ebx fs r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx

fn000000000040D6A0_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r11 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_16 = 0x0000000000000007
	word64 rdi_15 = fp - 0x0000000000000048
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_16 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r11 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

l000000000040D759:
	Mem26[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem29[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem32[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem35[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem38[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem41[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem44[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r11 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem18[rdi_15:word64] = 0x0000000000000000
	rdi_15 = rdi_15 + 0x0000000000000008
	rcx_16 = rcx_16 - 0x0000000000000001
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, word64 r13, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r13 r15 r8 rdi
// LiveOut: ebx r12 r12b r12d r13 r15 r15b r8 rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D7B0_entry:
	*r8Out = r8
	*r15Out = r15
	*r13Out = r13
// DataOut: esi fs r13 r15 r15b r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 r12_10 = (uint64) esi
	*r12Out = r12_10
	word64 rax_23 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word32 r12d_11 = (word32) r12_10
	word64 rsp_22 = fp - 0x0000000000000018
	word64 rbx_109 = rax_23
	branch rax_23 == rdi l000000000040D7E8
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D7E8:
	word64 rbp_65
	word64 r8_66
	word64 r12_67
	word64 r13_68
	word64 r15_69
	word64 rax_70 = fn0000000000411900(rdi, r8, r12_10, r13, r15, fs, out rsp_22, out rbp_65, out r8_66, out r12_67, out r13_68, out r15_69)
	byte dl_75 = (byte) (uint64) ((word32) Mem0[rax_70:byte] & 0xFFFFFFDF)
	branch dl_75 != 0x55 l000000000040D850
// DataOut: dl fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D850:
	branch dl_75 != 0x47 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D861:
	branch Mem0[rax_70 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D867:
	branch Mem0[rax_70 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D86D:
	branch Mem0[rax_70 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D873:
	branch Mem0[rax_70 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D879:
	branch Mem0[rax_70 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D87F:
	branch Mem0[rax_70 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D885:
	word64 r13_134
	*r13Out = rax_23
	rbx_109 = 0x0000000000415FED
	branch Mem0[rbp_65:byte] == 0x60 l000000000040D89B
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D897_1:
	rbx_109 = 0x0000000000415FE8
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 r15:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D89B:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 r15:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D810:
	branch Mem0[rax_70 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D816:
	branch Mem0[rax_70 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D81C:
	branch Mem0[rax_70 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D838:
	rbx_109 = 0x0000000000415FEB
	branch r12d_11 == 0x00000007 l000000000040D84A
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D846_1:
	rbx_109 = 0x0000000000416DEA
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D84A:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D822:
	rbx_109 = 0x0000000000415FE4
	branch Mem0[rax_23:byte] != 0x60 l000000000040D833
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D82F_1:
	rbx_109 = 0x0000000000415FF1
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D833:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7D7:
	word64 rsp_43 = rsp_22 + 0x0000000000000008
	word32 ebx_49
	*ebxOut = (word32) Mem0[rsp_43:word64]
	word64 rsp_56
	*rspOut = Mem0[rsp_43 + 0x0000000000000010:word64] + 0x0000000000000010
	return rbx_109
// DataOut: ebx fs r12 r12b r12d r13 r15 r15b r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> r15:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040D7B0_exit:
// DataOut: ebx r12 r12b r12d r13 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> r15:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word32 r9d, selector fs, word64 qwArg20, word64 qwArg28, word64 qwArg30, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040D8A0_entry:
	*r12Out = r12
// DataOut: fs r12 r12b r12d r8 r8d r9b rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D8A0:
	__ctype_get_mb_cur_max()
	word64 r14_1099 = (uint64) r8d
	word64 r15_1100 = rcx
	*r15Out = r15_1100
	word32 r14d_12 = (word32) r14_1099
	word64 r13_1184 = rdx
	word64 rsp_108 = fp - 0x00000000000000E0
	byte al_57 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (word32) (uint64) r9d >>u 0x00000001) & 0x00000001)
	branch r14d_12 >u 0x00000008 l000000000040E280
// DataOut: fs r12 r12b r12d r13 r14 r14d r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64) Local -00C0(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> eax:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D92D:
	word64 rbx_1010
	word64 rax_1676 = (uint64) r14d_12
	word64 r11_131 = rsi
	byte r11b_1002 = (byte) rsi
	word32 r11d_1003 = (word32) rsi
	switch (r14d_12) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> eax:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64)

l000000000040DFE0:
	branch r14d_12 == 0x00000008 l000000000040E012
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32)

l000000000040DFE2:
	word32 ebx_1748
	word64 rsp_1749
	word64 r8_1750
	word64 r12_1751
	word64 r13_1752
	word64 r15_1753
	word64 rax_1754 = fn000000000040D7B0((word32) (uint64) (word32) (uint64) r8d, 0x0000000000415FF5, r8, rdx, rcx, fs, out ebx_1748, out rsp_1749, out r8_1750, out r12_1751, out r13_1752, out r15_1753)
	Mem1758[rsp_1749 + 0x0000000000000070:word64] = rax_1754
	rsi = (uint64) ebx_1748
	esi = (word32) rsi (alias)
	word32 ebx_1759
	word64 r8_1761
	rax_1676 = fn000000000040D7B0(esi, 0x0000000000416DEA, r8_1750, r13_1752, r15_1753, fs, out ebx_1759, out rsp_108, out r8_1761, out r12, out r13_1184, out r15_1100)
	r11_131 = Mem1758[rsp_108 + 0x0000000000000020:word64]
	Mem1769[rsp_108 + 0x0000000000000068:word64] = rax_1676
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E012:
	rbx_1010 = 0x0000000000000000
	branch Mem0[rsp_108 + 0x0000000000000033:byte] != 0x00 l000000000040E044
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E01B:
	rdx = Mem0[rsp_108 + 0x0000000000000070:word64]
	word32 eax_1715 = (word32) Mem0[rdx:byte]
	rax_1676 = DPB(rax_1676, eax_1715, 0) (alias)
	byte al_1717 = (byte) eax_1715
	branch al_1717 == 0x00 l000000000040E044
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E027:
	word64 rcx_1721 = Mem0[rsp_108 + 0x0000000000000028:word64]
	ecx = (word32) rcx_1721 (alias)
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E030:
	branch rbx_1010 >=u r11_131 l000000000040E038
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E035:
	Mem1741[rcx_1721 + rbx_1010:byte] = al_1717
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E038:
	rbx_1010 = rbx_1010 + 0x0000000000000001
	word32 eax_1735 = (word32) Mem0[rdx + rbx_1010:byte]
	rax_1676 = DPB(rax_1676, eax_1735, 0) (alias)
	al_1717 = (byte) eax_1735 (alias)
	branch al_1717 != 0x00 l000000000040E030
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E044:
	word64 rbp_1699 = Mem0[rsp_108 + 0x0000000000000068:word64]
	Mem1700[rsp_108 + 0x0000000000000038:word64] = r11_131
	word64 rax_1703 = DPB(rax_1676, strlen(rbp_1699), 0)
	Mem1704[rsp_108 + 0x0000000000000060:word64] = rbp_1699
	Mem1707[rsp_108 + 0x0000000000000020:byte] = 0x01
	r11_131 = Mem1707[rsp_108 + 0x0000000000000038:word64]
	r14_1099 = rax_1703
	r11b_1002 = (byte) r11_131 (alias)
	r11d_1003 = (word32) r11_131 (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF90:
	r14_1099 = 0x0000000000000000
	rbx_1010 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DFB0:
	rsi = 0x0000000000000001
	rbx_1010 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF50:
	branch al_57 != 0x00 l000000000040E428
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2B3:
	rsi = 0x0000000000000001
	rbx_1010 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF64:
	Mem1643[rdi:byte] = 0x22
	rsi = 0x0000000000000001
	rbx_1010 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF10:
	branch al_57 != 0x00 l000000000040E408
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E408:
	rsi = 0x0000000000000001
	rbx_1010 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2D1:
	rsi = 0x0000000000000001
	rbx_1010 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF24:
	Mem1614[rdi:byte] = 0x27
	rsi = 0x0000000000000001
	rbx_1010 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E070:
	rsi = 0x0000000000000001
	rbx_1010 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D940:
	r14_1099 = 0x0000000000000000
	rbx_1010 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D960:
	Mem163[rsp_108 + 0x0000000000000038:byte] = (byte) (uint64) ((word32) Mem0[rsp_108 + 0x0000000000000033:byte] ^ 0x00000001)
	word64 rax_1109 = (uint64) ((word32) Mem163[rsp_108 + 0x0000000000000020:byte] ^ 0x00000001)
	Mem170[rsp_108 + 0x0000000000000095:byte] = (byte) rax_1109
	word64 r9_1095
	*r9Out = r14_1099
	word64 rbp_1012 = 0x0000000000000000
	*r14Out = r11_131
	word64 r8_1094
	*r8Out = r13_1184
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D986:
	word64 rax_244
	byte al_1559 = rbp_1012 != r15_1100
	word64 rax_1491 = DPB(rax_1109, al_1559, 0)
	branch r15_1100 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D996:
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A0:
	branch al_1559 == 0x00 l000000000040DB86
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A8:
	word64 r13_1494
	ecx = DPB(ecx, r9_1095 != 0x0000000000000000, 0) (alias)
	branch r9_1095 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9B4:
	branch Mem170[rsp_108 + 0x0000000000000020:byte] == 0x00 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9BF:
	rax_1491 = rbp_1012 + r9_1095
	branch r15_1100 <u rax_1491 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0A0:
	r13_1494 = r8_1094 + rbp_1012
	r11b_1002 = 0x00 (alias)
	r11d_1003 = 0x00000000 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9CD:
	rsi = Mem170[rsp_108 + 0x0000000000000060:word64]
	Mem1508[rsp_108 + 0x0000000000000050:word32] = ecx
	Mem1509[rsp_108 + 0x0000000000000048:word64] = r8_1094
	Mem1511[rsp_108 + 0x0000000000000040:word64] = r9_1095
	r13_1494 = r8_1094 + rbp_1012
	word32 eax_1512 = memcmp(r13_1494, rsi, r9_1095)
	rdx = r9_1095
	*r9Out = Mem1511[rsp_108 + 0x0000000000000040:word64]
	r8_1094 = Mem1511[rsp_108 + 0x0000000000000048:word64]
	*r8Out = r8_1094
	branch eax_1512 != 0x00000000 l000000000040E0B0
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0B0:
	r11b_1002 = 0x00 (alias)
	r11d_1003 = 0x00000000 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA05:
	branch Mem1511[rsp_108 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA10:
	rbx_1010 = 0x0000000000000001
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA20:
	word32 r12d_1018 = (word32) Mem170[r13_1494:byte]
	byte r12b_1000 = (byte) r12d_1018
	r12 = DPB(r12, r12d_1018, 0) (alias)
	*r12Out = r12
	branch r12b_1000 >u 0x7E l000000000040DE18
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE18:
	byte dl_1106
	word64 rdx_1104
	byte dl_1119
	branch Mem170[rsp_108 + 0x0000000000000078:word64] != 0x0000000000000001 l000000000040E0C0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0C0:
	Mem1157[rsp_108 + 0x00000000000000B0:word64] = 0x0000000000000000
	branch r15_1100 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r11b r11d r12b r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E285:
	Mem1478[rsp_108 + 0x0000000000000050:word64] = r9_1095
	Mem1479[rsp_108 + 0x0000000000000048:word32] = r11d_1003
	Mem1480[rsp_108 + 0x0000000000000040:word64] = r8_1094
	word64 rax_1482 = DPB(rax_1491, strlen(r8_1094), 0)
	r9_1095 = Mem1480[rsp_108 + 0x0000000000000050:word64]
	r15_1100 = rax_1482
	r11b_1002 = (byte) (uint64) Mem1480[rsp_108 + 0x0000000000000048:word32] (alias)
	r8_1094 = Mem1480[rsp_108 + 0x0000000000000040:word64]
// DataOut: fs r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0D6:
	Mem1172[rsp_108 + 0x0000000000000080:word64] = rbx_1010
	Mem1173[rsp_108 + 0x0000000000000096:byte] = r12b_1000
	Mem1174[rsp_108 + 0x0000000000000098:word64] = r13_1494
	Mem1177[rsp_108 + 0x0000000000000048:word64] = rbp_1012
	Mem1178[rsp_108 + 0x0000000000000088:word64] = r9_1095
	Mem1182[rsp_108 + 0x0000000000000097:byte] = r11b_1002
	Mem1183[rsp_108 + 0x0000000000000050:word64] = r14_1099
	Mem1185[rsp_108 + 0x0000000000000040:word64] = r15_1100
	word64 rbx_1175 = 0x0000000000000000
	word64 r12_1179 = 0x0000000000000001
	word32 r12d_1180 = 0x00000001
	r13_1184 = r8_1094
// DataOut: fs r12d r13 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E11D:
	word64 rax_1197 = Mem1185[rsp_108 + 0x0000000000000048:word64]
	word64 r14_1201 = rbx_1175 + rax_1197
	word64 r15_1203 = r8_1094 + r14_1201
	word64 rdi_1200 = rsp_108 + 0x00000000000000AC
	word64 rdx_1204 = Mem1185[rsp_108 + 0x0000000000000040:word64] - r14_1201
	rsi = r15_1203
	word64 rax_1210 = DPB(rax_1197, mbrtowc(rdi_1200, r15_1203, rdx_1204, rsp_108 + 0x00000000000000B0), 0)
	branch rax_1210 == 0x0000000000000000 l000000000040E30E
// DataOut: fs r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E30E:
	r11d_1003 = (word32) Mem1185[rsp_108 + 0x0000000000000097:byte]
	r12d_1018 = (word32) Mem1185[rsp_108 + 0x0000000000000096:byte]
	rdx_1104 = (uint64) ((word32) (uint64) r12d_1180 ^ 0x00000001)
	rax_1109 = rbx_1175
	rbp_1012 = Mem1185[rsp_108 + 0x0000000000000048:word64]
	*r9Out = Mem1185[rsp_108 + 0x0000000000000088:word64]
	r11b_1002 = (byte) r11d_1003 (alias)
	rbx_1010 = Mem1185[rsp_108 + 0x0000000000000080:word64]
	r12b_1000 = (byte) r12d_1018 (alias)
	*r12Out = DPB(r12_1179, r12d_1018, 0)
	dl_1106 = (byte) rdx_1104 (alias)
	*r14Out = Mem1185[rsp_108 + 0x0000000000000050:word64]
	*r15Out = Mem1185[rsp_108 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E157:
	branch rax_1210 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: fs r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E350:
	r12d_1018 = (word32) Mem1185[rsp_108 + 0x0000000000000096:byte]
	r11d_1003 = (word32) Mem1185[rsp_108 + 0x0000000000000097:byte]
	rax_1109 = rbx_1175
	rbp_1012 = Mem1185[rsp_108 + 0x0000000000000048:word64]
	*r9Out = Mem1185[rsp_108 + 0x0000000000000088:word64]
	r12b_1000 = (byte) r12d_1018 (alias)
	*r12Out = DPB(r12_1179, r12d_1018, 0)
	r11b_1002 = (byte) r11d_1003 (alias)
	rbx_1010 = Mem1185[rsp_108 + 0x0000000000000080:word64]
	*r14Out = Mem1185[rsp_108 + 0x0000000000000050:word64]
	rdx_1104 = 0x0000000000000001
	dl_1106 = 0x01 (alias)
	*r15Out = Mem1185[rsp_108 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E161:
	branch rax_1210 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: fs r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E391:
	r12d_1018 = (word32) Mem1185[rsp_108 + 0x0000000000000096:byte]
	r11d_1003 = (word32) Mem1185[rsp_108 + 0x0000000000000097:byte]
	r15_1100 = Mem1185[rsp_108 + 0x0000000000000040:word64]
	*r15Out = r15_1100
	rsi = r14_1201
	rax_1109 = rbx_1175
	rbp_1012 = Mem1185[rsp_108 + 0x0000000000000048:word64]
	*r9Out = Mem1185[rsp_108 + 0x0000000000000088:word64]
	r12b_1000 = (byte) r12d_1018 (alias)
	*r12Out = DPB(r12_1179, r12d_1018, 0)
	r11b_1002 = (byte) r11d_1003 (alias)
	rbx_1010 = Mem1185[rsp_108 + 0x0000000000000080:word64]
	*r14Out = Mem1185[rsp_108 + 0x0000000000000050:word64]
	word64 r13_1402 = Mem1185[rsp_108 + 0x0000000000000098:word64]
	branch r15_1100 <=u r14_1201 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3DB:
	branch Mem1185[rdx_1204:byte] != 0x00 l000000000040E3F0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3F0:
	rax_1109 = rax_1109 + 0x0000000000000001
	branch r15_1100 >u rbp_1012 + rax_1109 l000000000040E3E8
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E8:
	branch Mem1185[r13_1402 + rax_1109:byte] == 0x00 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E1:
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3FE:
	rdx_1104 = 0x0000000000000001
	dl_1106 = 0x01 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E16B:
	branch Mem1185[rsp_108 + 0x0000000000000033:byte] == 0x00 l000000000040E1BF
// DataOut: fs r12d r13 r15 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E172:
	branch Mem1185[rsp_108 + 0x0000000000000034:word32] != 0x00000002 l000000000040E1BF
// DataOut: fs r12d r13 r15 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E179:
	branch rax_1210 == 0x0000000000000001 l000000000040E1BF
// DataOut: fs r12d r13 r15 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E17F:
	word64 rdx_1334 = 0x0000000000000001
// DataOut: fs r12d r13 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E190:
	rdi_1200 = DPB(rdi_1200, (word32) Mem1185[r15_1203 + rdx_1334:byte], 0) (alias)
	ecx = rdi_1200 - 0x000000000000005B
	byte cl_1354 = (byte) (rdi_1200 - 0x000000000000005B)
	branch cl_1354 >u 0x21 l000000000040E1B6
// DataOut: cl fs r12d r13 r15 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E19D:
	r15_1203 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1354 & rdi_1200) != 0x0000000000000000 l000000000040E260
// DataOut: fs r12d r13 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E260:
	r11_131 = Mem1185[rsp_108 + 0x0000000000000050:word64]
	r11b_1002 = (byte) r11_131 (alias)
	r11d_1003 = (word32) r11_131 (alias)
	r15_1100 = Mem1185[rsp_108 + 0x0000000000000040:word64]
// DataOut: fs r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:0x000000000000002B r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1B6:
	rdx_1334 = rdx_1334 + 0x0000000000000001
	branch rdx_1334 != rax_1210 l000000000040E190
// DataOut: fs r12d r13 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1BF:
	word64 rdi_1281 = rsp_108 + 0x00000000000000B0
	branch iswprint((uint64) Mem1185[rsp_108 + 0x00000000000000AC:word32]) != 0x00000000 l000000000040E1DE
// DataOut: fs r12d r13 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DA_1:
	r12d_1180 = 0x00000000
	r12_1179 = DPB(r12_1179, 0x00000000, 0) (alias)
// DataOut: fs r12d r13 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 eax:0x00000000 r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DE:
	rbx_1175 = rbx_1175 + rax_1210
	branch mbsinit(rdi_1281) == 0x00000000 l000000000040E11D
// DataOut: fs r12d r13 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 eax:0x00000000 r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1EE:
	rsi = (uint64) r12d_1180
	esi = (word32) rsi (alias)
	r11d_1003 = (word32) Mem1185[rsp_108 + 0x0000000000000097:byte]
	r12d_1018 = (word32) Mem1185[rsp_108 + 0x0000000000000096:byte]
	rdx_1104 = (uint64) ((word32) (uint64) esi ^ 0x00000001)
	r11b_1002 = (byte) r11d_1003 (alias)
	r12b_1000 = (byte) r12d_1018 (alias)
	*r12Out = DPB(r12_1179, r12d_1018, 0)
	rax_1109 = rbx_1175
	rbp_1012 = Mem1185[rsp_108 + 0x0000000000000048:word64]
	*r9Out = Mem1185[rsp_108 + 0x0000000000000088:word64]
	rbx_1010 = Mem1185[rsp_108 + 0x0000000000000080:word64]
	*r14Out = Mem1185[rsp_108 + 0x0000000000000050:word64]
	*r15Out = Mem1185[rsp_108 + 0x0000000000000040:word64]
	dl_1106 = (byte) rdx_1104 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E22D:
	*r8Out = r8_1094
	branch rax_1109 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E237:
	dl_1119 = dl_1106 & Mem1185[rsp_108 + 0x0000000000000020:byte]
	rdx = DPB(rdx_1104, dl_1119, 0) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE24:
	Mem1126[rsp_108 + 0x0000000000000050:word64] = r8_1094
	Mem1127[rsp_108 + 0x0000000000000048:word64] = r9_1095
	Mem1128[rsp_108 + 0x0000000000000040:word32] = r11d_1003
	word64 rax_1130 = Mem1128[__ctype_b_loc():word64]
	word32 edx_1140 = (word32) Mem1128[rax_1130 + DPB(rdx, (word32) r12b_1000, 0) * 0x0000000000000002:word16]
	word64 r11_1133 = (uint64) Mem1128[rsp_108 + 0x0000000000000040:word32]
	rdx_1104 = (uint64) ((word32) (uint64) (DPB(edx_1140, (word16) edx_1140 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001)
	r11b_1002 = (byte) r11_1133 (alias)
	r11d_1003 = (word32) r11_1133 (alias)
	*r9Out = Mem1128[rsp_108 + 0x0000000000000048:word64]
	*r8Out = Mem1128[rsp_108 + 0x0000000000000050:word64]
	rax_1109 = 0x0000000000000001
	dl_1106 = (byte) rdx_1104 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE61:
	dl_1119 = dl_1106 & Mem170[rsp_108 + 0x0000000000000020:byte]
	rdx = DPB(rdx_1104, dl_1119, 0) (alias)
	branch dl_1119 == 0x00 l000000000040DAF8
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE6B:
	word64 rcx_977 = Mem170[rsp_108 + 0x0000000000000028:word64]
	rax_1109 = rax_1109 + rbp_1012
	byte dil_976 = (byte) (word32) Mem170[rsp_108 + 0x0000000000000033:byte]
	ecx = (word32) rcx_977 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF0:
	branch dl_1119 != 0x00 l000000000040DE80
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE80:
	branch dil_976 != 0x00 l000000000040DC40
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE89:
	branch rbx_1010 >=u r14_1099 l000000000040DE92
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE8E:
	Mem1082[rcx_977 + rbx_1010:byte] = 0x5C
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE92:
	branch r14_1099 <=u rbx_1010 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE9B:
	word64 rsi_1077 = (uint64) (DPB(esi, (byte) (uint64) r12d_1018 >>u 0x06, 0) + 0x00000030)
	Mem1081[rcx_977 + 0x0000000000000001 + rbx_1010:byte] = (byte) rsi_1077
	esi = (word32) rsi_1077 (alias)
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEAA:
	rsi = rbx_1010 + 0x0000000000000002
	branch r14_1099 <=u rsi l000000000040DEC5
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEB3:
	rsi = (uint64) ((word32) (uint64) (DPB(esi, (byte) (uint64) r12d_1018 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem1072[rcx_977 + 0x0000000000000002 + rbx_1010:byte] = (byte) rsi
	esi = (word32) rsi (alias)
// DataOut: dil dl fs r11b r11d r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEC5:
	r12 = (uint64) ((word32) (uint64) (r12d_1018 & 0x00000007) + 0x00000030)
	*r12Out = r12
	rbx_1010 = rbx_1010 + 0x0000000000000003
	r12b_1000 = (byte) r12 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF4:
	branch r11b_1002 == 0x00 l000000000040DED1
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF9:
	branch rbx_1010 >=u r14_1099 l000000000040DF02
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEFE:
	Mem1037[rcx_977 + rbx_1010:byte] = 0x5C
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF02:
	rbx_1010 = rbx_1010 + 0x0000000000000001
	r11b_1002 = 0x00 (alias)
	r11d_1003 = 0x00000000 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DED1:
	rbp_1012 = rbp_1012 + 0x0000000000000001
	branch rax_1109 <=u rbp_1012 l000000000040DB54
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEDE:
	branch rbx_1010 >=u r14_1099 l000000000040DEE7
// DataOut: dil dl fs r11b r11d r12b r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE3:
	Mem1024[rcx_977 + rbx_1010:byte] = r12b_1000
// DataOut: dil dl fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE7:
	r12d_1018 = (word32) Mem170[r8_1094 + rbp_1012:byte]
	r12b_1000 = (byte) r12d_1018 (alias)
	*r12Out = DPB(r12, r12d_1018, 0)
	rbx_1010 = rbx_1010 + 0x0000000000000001
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA2F:
	rax_1109 = DPB(rax_1491, (word32) r12b_1000, 0) (alias)
	switch (rax_1109) { l000000000040DD20 }
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD20:
	branch Mem170[rsp_108 + 0x0000000000000020:byte] == 0x00 l000000000040E240
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E240:
	branch (Mem170[rsp_108 + 0x0000000000000090:byte] & 0x01) == 0x00 l000000000040DAF8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAF8:
	branch Mem170[rsp_108 + 0x0000000000000038:byte] == 0x00 l000000000040DB09
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAFF:
	branch Mem170[rsp_108 + 0x0000000000000095:byte] != 0x00 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E24E:
	rbp_1012 = rbp_1012 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD2B:
	branch Mem170[rsp_108 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD36:
	branch rbx_1010 >=u r14_1099 l000000000040DD44
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD3B:
	Mem930[Mem170[rsp_108 + 0x0000000000000028:word64] + rbx_1010:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD44:
	rdx = rbp_1012 + 0x0000000000000001
	rax_1109 = rbx_1010 + 0x0000000000000001
	branch r15_1100 <=u rdx l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD51:
	esi = (word32) Mem170[r8_1094 + 0x0000000000000001 + rbp_1012:byte]
	rsi = DPB(rsi, esi, 0) (alias)
	branch (byte) (rsi - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD5F:
	branch r14_1099 >u rax_1109 l000000000040E300
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E300:
	rsi = Mem170[rsp_108 + 0x0000000000000028:word64]
	Mem928[rsi + rax_1109:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD68:
	branch r14_1099 <=u rbx_1010 + 0x0000000000000002 l000000000040DD7B
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD71:
	Mem926[Mem170[rsp_108 + 0x0000000000000028:word64] + 0x0000000000000002 + rbx_1010:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD7B:
	rax_1109 = rbx_1010 + 0x0000000000000003
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD80:
	rbx_1010 = rax_1109
	rsp_108 = 0x0000000000000030
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB09:
	word64 rdi_821 = Mem170[rsp_108 + 0x0000000000000058:word64]
	branch rdi_821 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB13:
	ecx = (word32) (uint64) r12d_1018 (alias)
	word64 rdx_827 = (uint64) r12d_1018
	rax_1109 = (uint64) (0x00000001 << (byte) ((uint64) (ecx & 0x0000001F)))
	rdx = DPB(rdx_827, (word32) ((byte) rdx_827 >>u 0x05), 0) (alias)
	branch (Mem170[rdi_821 + rdx * 0x0000000000000004:word32] & (word32) rax_1109) != 0x00000000 l000000000040DB33
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB2E:
	branch r11b_1002 == 0x00 l000000000040DB50
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB33:
	branch Mem170[rsp_108 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC40:
	r11_131 = r14_1099
	r11b_1002 = (byte) r14_1099 (alias)
	r11d_1003 = (word32) r14_1099 (alias)
	r13_1184 = r8_1094
// DataOut: fs r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB3E:
	branch rbx_1010 >=u r14_1099 l000000000040DB4C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB43:
	rax_1109 = Mem170[rsp_108 + 0x0000000000000028:word64]
	Mem744[rax_1109 + rbx_1010:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB4C:
	rbx_1010 = rbx_1010 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB50:
	rbp_1012 = rbp_1012 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB54:
	branch rbx_1010 >=u r14_1099 l000000000040DB62
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB59:
	rax_1109 = Mem170[rsp_108 + 0x0000000000000028:word64]
	Mem653[rax_1109 + rbx_1010:byte] = r12b_1000
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB62:
	al_1559 = rbp_1012 != r15_1100
	rbx_1010 = rbx_1010 + 0x0000000000000001
	rax_1491 = DPB(rax_1109, al_1559, 0) (alias)
	branch r15_1100 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB76:
	branch Mem170[r8_1094 + rbp_1012:byte] != 0x00 != 0x00 l000000000040D9A8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB86:
	r11_131 = r14_1099
	*r11Out = r11_131
	r11b_1002 = (byte) r14_1099 (alias)
	r11d_1003 = (word32) r14_1099 (alias)
	r13_1184 = r8_1094
	*r13Out = r13_1184
	branch rbx_1010 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB91:
	branch Mem170[rsp_108 + 0x0000000000000034:word32] != 0x00000002 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB98:
	branch Mem170[rsp_108 + 0x0000000000000033:byte] != 0x00 l000000000040DC46
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC46:
	word64 rax_311 = Mem170[rsp_108 + 0x0000000000000068:word64]
	word32 r9d_313 = (word32) (uint64) Mem170[rsp_108 + 0x0000000000000090:word32]
	word64 r8_315 = (uint64) Mem170[rsp_108 + 0x0000000000000034:word32]
	word64 rdi_317 = Mem170[rsp_108 + 0x0000000000000028:word64]
	Mem319[rsp_108:word64] = 0x0000000000000000
	Mem321[rsp_108 + 0x0000000000000010:word64] = rax_311
	Mem327[rsp_108 + 0x0000000000000008:word64] = Mem321[rsp_108 + 0x0000000000000070:word64]
	rdx = r13_1184
	word64 rbp_330
	word64 r8_331
	word64 r9_332
	rax_244 = fn000000000040D8A0(r15_1100, r13_1184, r11_131, rdi_317, r8_315, (word32) (uint64) (r9d_313 & 0xFFFFFFFD), fs, qwArg18, qwArg20, qwArg28, out rsp_108, out rbp_330, out r8_331, out r9_332, out r11_131, out r12, out r13_1184, out r14_1099, out r15_1100)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBA3:
	branch Mem170[rsp_108 + 0x0000000000000033:byte] != 0x00 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBAA:
	branch Mem170[rsp_108 + 0x0000000000000060:word64] == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBB2:
	rdx = Mem170[rsp_108 + 0x0000000000000060:word64]
	byte al_412 = (byte) (word32) Mem170[rdx:byte]
	branch al_412 == 0x00 l000000000040DBE4
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBBE:
	word64 rcx_416 = Mem170[rsp_108 + 0x0000000000000028:word64]
	ecx = (word32) rcx_416 (alias)
	rdx = rdx - rbx_1010
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD0:
	branch r14_1099 <=u rbx_1010 l000000000040DBD8
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD5:
	Mem442[rcx_416 + rbx_1010:byte] = al_412
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD8:
	rbx_1010 = rbx_1010 + 0x0000000000000001
	al_412 = (byte) (word32) Mem170[rdx + rbx_1010:byte] (alias)
	branch al_412 != 0x00 l000000000040DBD0
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBE4:
	rax_244 = rbx_1010
	branch rbx_1010 >=u r14_1099 l000000000040DC86
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBF0:
	Mem403[Mem170[rsp_108 + 0x0000000000000028:word64] + rbx_1010:byte] = 0x00
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC86:
	branch (Mem170[rsp_108 + 0x00000000000000B8:word64] ^ Mem170[fs:0x00000028:word64]) != 0x0000000000000000 l000000000040E423
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E423:
	__stack_chk_fail()
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E428:
	Mem110[rsp_108 + 0x0000000000000020:byte] = 0x01
	Mem112[rsp_108 + 0x0000000000000060:word64] = 0x0000000000415FEB
	rsi = 0x0000000000000001
	rbx_1010 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC9D:
	word64 rsp_266 = Mem170[rsp_108 + 0x00000000000000D8:word64]
	word64 rbp_268
	*rbpOut = Mem170[rsp_266 + 0x0000000000000008:word64]
	word64 rsp_274
	*rspOut = rsp_266 + 0x0000000000000020
	return rax_244
// DataOut: ebp fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D8A0_exit:
// DataOut: ebp r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> rsi:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040E450(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rcx rdi rdx rsi
// LiveOut: bpl ebx r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E450_entry:
// DataOut: edi fs r11 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E450:
	word64 r15_6 = (int64) edi
	__errno_location()
	word32 r15d_7 = (word32) r15_6
	word64 rsp_189 = fp - 0x0000000000000060
	word64 r12_188 = Mem0[0x000000000061A5D8:word64]
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040E48C:
	branch r15d_7 <u Mem0[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E495:
	word64 r14_178 = (uint64) (rdi + 0x0000000000000001)
	branch r12_188 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5E0:
	word64 r8_215
	word64 rax_216 = fn0000000000410C90(rdx, r14_178 << 0x0000000000000004, r12_188, out rsp_189, out r8_215)
	Mem218[0x000000000061A5D8:word64] = rax_216
	r12_188 = rax_216
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4B0:
	word64 r8_205
	word64 rax_206 = fn0000000000410C90(rdx, r14_178 << 0x0000000000000004, 0x0000000000000000, out rsp_189, out r8_205)
	word64 rsi_207 = Mem0[0x000000000061A5E0:word64]
	word64 rdi_208 = Mem0[0x000000000061A5E8:word64]
	Mem210[0x000000000061A5D8:word64] = rax_206
	Mem211[rax_206:word64] = rsi_207
	Mem212[rax_206 + 0x0000000000000008:word64] = rdi_208
	r12_188 = rax_206
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4D6:
	word64 rdi_190 = (uint64) Mem0[0x000000000061A5F0:word32]
	memset((rdi_190 << 0x0000000000000004) + r12_188, 0x0000000000000000, r14_178 - rdi_190 << 0x0000000000000004)
	Mem199[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4FA:
	word64 r12_52 = r12_188 + (r15_6 << 0x0000000000000004)
	word32 ebp_51 = (word32) (uint64) Mem0[rcx + 0x0000000000000004:word32]
	word64 r8_54 = (uint64) Mem0[r11:word32]
	word64 r11_57 = Mem0[r12_52:word64]
	word64 r14_58 = Mem0[r12_52 + 0x0000000000000008:word64]
	Mem59[rsp_189 + 0x0000000000000010:word64] = Mem0[rcx + 0x0000000000000030:word64]
	word64 rax_60 = Mem59[rcx + 0x0000000000000028:word64]
	word64 rcx_65 = Mem59[rsp_189 + 0x0000000000000028:word64]
	word64 rdx_66 = Mem59[rsp_189 + 0x0000000000000020:word64]
	Mem70[rsp_189:word64] = r11 + 0x0000000000000008
	Mem72[rsp_189 + 0x0000000000000008:word64] = rax_60
	Mem73[rsp_189 + 0x0000000000000038:word64] = r11_57
	word32 ebp_62 = (word32) (uint64) (ebp_51 | 0x00000001)
	word64 r8_80
	word64 r9_81
	word64 r11_82
	word64 r12_83
	word64 r13_84
	word64 r15_86
	word64 r14_102
	word64 rbp_104
	word64 rsp_105
	word64 rax_87 = fn000000000040D8A0(rcx_65, rdx_66, r11_57, r14_58, r8_54, (word32) (uint64) ebp_62, fs, qwArg18, qwArg20, qwArg28, out rsp_105, out rbp_104, out r8_80, out r9_81, out r11_82, out r12_83, out r13_84, out r14_102, out r15_86)
	word64 r11_89 = Mem73[rsp_105 + 0x0000000000000038:word64]
	*r11Out = r11_89
	branch r11_89 >u rax_87 l000000000040E5BF
// DataOut: ebp fs r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E554:
	Mem141[r12_83:word64] = rax_87 + 0x0000000000000001
	word64 rsi_137 = rax_87 + 0x0000000000000001
	branch r14_102 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E565:
	Mem173[rsp_105 + 0x0000000000000038:word64] = rax_87 + 0x0000000000000001
	free(r14_102)
	rsi_137 = Mem173[rsp_105 + 0x0000000000000038:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E577:
	Mem145[rsp_105 + 0x0000000000000038:word64] = rsi_137
	word64 rsp_146
	word64 rax_147 = fn0000000000410C40(rsi_137, rsi_137, out rsp_146)
	Mem148[r12_83 + 0x0000000000000008:word64] = rax_147
	word64 r8_151 = (uint64) Mem148[r11_89:word32]
	word64 rcx_152 = Mem148[rsp_146 + 0x0000000000000028:word64]
	word64 rdx_155 = Mem148[rsp_146 + 0x0000000000000020:word64]
	word64 rsi_156 = Mem148[rsp_146 + 0x0000000000000038:word64]
	Mem158[rsp_146 + 0x0000000000000010:word64] = Mem148[rcx + 0x0000000000000030:word64]
	word64 rax_159 = Mem158[rcx + 0x0000000000000028:word64]
	Mem160[rsp_146:word64] = r15_86
	Mem161[rsp_146 + 0x0000000000000008:word64] = rax_159
	word64 r8_164
	word64 r9_165
	word64 r11_166
	word64 r12_167
	word64 r13_168
	word64 r15_170
	fn000000000040D8A0(rcx_152, rdx_155, rsi_156, rax_147, r8_151, (word32) (uint64) ebp_62, fs, qwArg18, qwArg20, qwArg28, out rsp_105, out rbp_104, out r8_164, out r9_165, out r11_166, out r12_167, out r13_168, out r14_102, out r15_170)
// DataOut: fs r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040E5BF:
	Mem108[rbp_104:word32] = (word32) (uint64) Mem73[rsp_105 + 0x0000000000000034:word32]
	word64 rsp_109 = rsp_105 + 0x0000000000000048
	word64 rsp_118 = Mem108[rsp_109 + 0x0000000000000010:word64]
	word32 ebx_114
	*ebxOut = (word32) Mem108[rsp_109:word64]
	word64 rbp_120
	*rbpOut = Mem108[rsp_118 + 0x0000000000000008:word64]
	word64 rsp_126
	*rspOut = rsp_118 + 0x0000000000000020
	return r14_102
// DataOut: bpl ebx fs r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E450_exit:
// DataOut: bpl ebx r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040E600(word64 rdi, word64 r8, word64 r11, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut: ebx r12 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E600_entry:
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word64 r12_16 = (uint64) Mem0[r8:word32]
	*r12Out = r12_16
	word32 r12d_17 = (word32) r12_16
	word64 rdi_21 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: fs r11 r12 r12d r13 r13b r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E61A_1:
	rdi_21 = rdi
// DataOut: fs r11 r12 r12d r13 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040E61E:
	word64 rsp_27
	word64 rbp_28
	word64 rdi_29
	word64 rax_30 = fn0000000000410E00(0x0000000000000038, rdi_21, out rsp_27, out rbp_28, out rdi_29)
	Mem31[r11:word32] = r12d_17
	word32 ebx_34
	*ebxOut = (word32) Mem31[rsp_27:word64]
	word64 rbp_36
	*rbpOut = Mem31[rsp_27 + 0x0000000000000008:word64]
	word64 rsp_39
	*rspOut = Mem31[rsp_27 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_30
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040E600_exit:
// DataOut: ebx r12 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
	rax_12 = rdi
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return (word32) (uint64) Mem0[rax_12:word32]
// DataOut: eax fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: ebx esi fs r11 r15 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: ebx esi fs r11 r15 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: ebx esi fs r11 r15 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut: ebx fs r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: ebx edx esi fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl ebx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl ebx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_25 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem42[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_25) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_25)
	return rsi_20
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11 r8 rcx rdi rdx rsi
// LiveOut: ebp esp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040E6F0_entry:
// DataOut: ebp ebx fs r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E712_1:
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E716:
	__errno_location()
	word32 r12d_38 = (word32) (uint64) Mem0[r8:word32]
	word64 rsp_58
	word64 rbp_59
	word64 r8_60
	word64 r9_61
	word64 r11_62
	word64 r12_63
	word64 r13_64
	word64 r14_65
	word64 r15_66
	word64 rax_67 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (uint64) Mem0[r11:word32], (word32) (uint64) Mem0[r11 + 0x0000000000000004:word32], fs, rdi, qwLoc20, qwLoc18, out rsp_58, out rbp_59, out r8_60, out r9_61, out r11_62, out r12_63, out r13_64, out r14_65, out r15_66)
	Mem69[r13_64:word32] = r12d_38
	word64 rsp_76 = Mem69[rsp_58 + 0x0000000000000038:word64]
	word64 rbp_78
	*rbpOut = Mem69[rsp_76 + 0x0000000000000008:word64]
	word64 rsi_81
	*rsiOut = Mem69[rsp_76 + 0x0000000000000010:word64]
	word64 rdi_83
	*rdiOut = Mem69[rsp_76 + 0x0000000000000018:word64]
	word64 rsp_84
	*rspOut = rsp_76 + 0x0000000000000020
	return rax_67
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E6F0_exit:
// DataOut: ebp esp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn000000000040E930(word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: ebx r11 r15 r9 rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
// DataOut: fs r11 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: edi fs r11 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E93F_thunk_fn000000000040E450:
	word32 ebx_14
	word64 rsp_15
	word64 rbp_16
	word64 r8_17
	word64 r9_18
	word64 r11_19
	word64 r12_20
	word64 r13_21
	word64 r14_22
	word64 r15_23
	fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out ebx_14, out rsp_15, out rbp_16, out r8_17, out r9_18, out r11_19, out r12_20, out r13_21, out r14_22, out r15_23)
	return ebx_14
// DataOut: ebx fs r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040E930_exit:
// DataOut: ebx r11 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040E970(word64 rdx, word32 esi, word32 edi, word64 r11, selector fs, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 rdx
// LiveOut: r11 r12 r15 r9 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E970_entry:
// DataOut: edi esi fs r11 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000050)
	word32 ebx_23
	word64 rsp_24
	word64 rbp_25
	word64 r8_26
	word64 r9_27
	word64 r11_28
	word64 r12_29
	word64 r13_30
	word64 r14_31
	word64 r15_32
	fn000000000040E450(fp - 0x0000000000000050, 0xFFFFFFFFFFFFFFFF, rdx, (uint64) (word32) (uint64) edi, r11, fs, out ebx_23, out rsp_24, out rbp_25, out r8_26, out r9_27, out r11_28, out r12_29, out r13_30, out r14_31, out r15_32)
	return rsp_24 + 0x0000000000000060
// DataOut: fs r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r11 r12 r15 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040EAB0(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: bpl r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040EAB0_entry:
// DataOut: fs r11 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl fs r11 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_33 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32]
	byte cl_18 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem52[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_33 >>u cl_18) ^ 0x00000001) & 0x00000001) << cl_18) ^ r9d_33)
	word32 ebx_55
	word64 rsp_56
	word64 rbp_57
	word64 r8_58
	word64 r9_59
	word64 r11_60
	word64 r12_61
	word64 r13_62
	word64 r14_63
	word64 r15_64
	fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out ebx_55, out rsp_56, out rbp_57, out r8_58, out r9_59, out r11_60, out r12_61, out r13_62, out r14_63, out r15_64)
	word64 rsp_67
	*rspOut = rsp_56 + 0x0000000000000050
	return rbx
// DataOut: bpl fs r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: bpl r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r11:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rdi rsi
// LiveOut: r11 rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: edi fs r11 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: edi fs r11 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word32 ebx_9
	word64 rsp_10
	word64 rbp_11
	word64 r8_12
	word64 r9_13
	word64 r11_14
	word64 r12_15
	word64 r13_16
	word64 r14_17
	word64 r15_18
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rsi, rdi, r11, fs, out ebx_9, out rsp_10, out rbp_11, out r8_12, out r9_13, out r11_14, out r12_15, out r13_16, out r14_17, out r15_18)
	return rbx
// DataOut: fs r11 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 rdi, word64 r11, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: ebx r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
	*rbxOut = rbx
// DataOut: fs r11 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: edi fs r11 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC21_thunk_fn000000000040E450:
	word32 ebx_13
	word64 rsp_14
	word64 rbp_15
	word64 r8_16
	word64 r9_17
	word64 r11_18
	word64 r12_19
	word64 r13_20
	word64 r14_21
	word64 r15_22
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out ebx_13, out rsp_14, out rbp_15, out r8_16, out r9_17, out r11_18, out r12_19, out r13_20, out r14_21, out r15_22)
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040EC10_exit:
// DataOut: ebx r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040EC30(word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC30_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC30:
	word64 rbx_18 = rdx - 0x0000000000000001
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC40:
	word64 r12_45
	*r12Out = rsi
	word64 rax_46 = __ctype_tolower_loc()
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC50:
	rcx = DPB(rcx, (word32) Mem0[rsi + rbx_18:byte], 0) (alias)
	Mem55[rdi + rbx_18:byte] = (byte) (uint64) Mem0[Mem0[rax_46:word64] + rcx * 0x0000000000000004:word32]
	rbx_18 = rbx_18 - 0x0000000000000001
	branch rbx_18 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC69:
	word32 ebp_36
	*ebpOut = (word32) fp
	word64 rsp_40
	*rspOut = qwArg04 + 0x0000000000000008
	return rdi
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC30_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040EC80(word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC80_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC80:
	word64 rbx_18 = rdx - 0x0000000000000001
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC90:
	word64 r12_45
	*r12Out = rsi
	word64 rax_46 = __ctype_toupper_loc()
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECA0:
	rcx = DPB(rcx, (word32) Mem0[rsi + rbx_18:byte], 0) (alias)
	Mem55[rdi + rbx_18:byte] = (byte) (uint64) Mem0[Mem0[rax_46:word64] + rcx * 0x0000000000000004:word32]
	rbx_18 = rbx_18 - 0x0000000000000001
	branch rbx_18 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECB9:
	word32 ebp_36
	*ebpOut = (word32) fp
	word64 rsp_40
	*rspOut = qwArg04 + 0x0000000000000008
	return rdi
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC80_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r9d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl cl ebp fs r11d r14 r15b r9d rax rcx rdi rdx rsi
// LiveOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040ECD0_entry:
	*r8Out = r8
	*r14Out = r14
	*r15Out = r15
	*r9Out = r9
	*r11Out = r11
// DataOut: bpl cl ebp fs r11 r11d r14 r14d r15 r15b r8 r9 r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_27 = Mem0[rax + 0x0000000000000030:word64]
	word64 r10_408 = rdx
	word64 r12_128 = rsi
	*r12Out = r12_128
	word64 rbx_137 = rcx
	word64 rsp_136 = fp - 0x00000000000004F0
	word32 esi_33 = (word32) (uint64) Mem0[rax_27 + 0x0000000000000008:word32]
	branch esi_33 <= 0x0000000C l000000000040EEE0
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0) Local -04B0(32)

l000000000040EEE0:
	rax_27 = 0x000000000000000C
	branch (word32) (uint64) esi_33 == 0x00000000 l000000000040EEEE
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEB_1:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEE:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED26:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED2B:
	word64 rax_107
	word32 eax_49 = (word32) Mem0[rcx:byte]
	word64 rax_204 = DPB(rax_27, eax_49, 0)
	byte al_271 = (byte) eax_49
	word64 r13_132 = 0x0000000000000000
	*r13Out = r13_132
	branch al_271 == 0x00 l000000000040F053
// DataOut: al bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED39:
	*r14Out = rdx
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED85:
	branch al_271 != 0x25 l000000000040ED50
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED50:
	branch r14 - r13_132 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED60:
	branch r12_128 == 0x0000000000000000 l000000000040ED6D
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED65:
	Mem965[r12_128:byte] = al_271
	*r12Out = r12_128 + 0x0000000000000001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED6D:
	*r13Out = r13_132 + 0x0000000000000001
	word64 r8_964
	*r8Out = rbx_137
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED89:
	r9d = (word32) Mem0[rsp_136 + 0x000000000000000F:byte]
	r9 = DPB(r9, r9d, 0) (alias)
	*r9Out = r9
	byte r9b_578 = (byte) r9d
	word64 r11_580
	*r11Out = 0x0000000000000000
	r11d = 0x00000000 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED94:
	rbx_137 = rbx_137 + 0x0000000000000001
	byte dil_592 = (byte) (word32) Mem0[rbx_137:byte]
	byte SZO_595 = cond(dil_592 - 0x30)
	branch dil_592 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA1:
	branch SZO_595 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDD0:
	branch dil_592 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE70:
	branch dil_592 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE7A:
	r11d = (int32) dil_592
	*r11Out = DPB(r11_580, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDDA:
	rcx = 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA3:
	branch dil_592 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDE8:
	branch dil_592 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDEE:
	word64 rdx_628 = (uint64) ((int32) dil_592 - 0x00000030)
	ebp = 0xFFFFFFFF (alias)
	branch (word32) rdx_628 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDFF:
	word64 rbp_880 = 0x0000000000000000
	ebp = 0x00000000 (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:<invalid> r11d:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ebp:0xFFFFFFFF -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE28:
	branch ebp <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE08:
	word32 edx_918 = (int32) Mem0[rbx_137:byte]
	word64 rdx_919 = DPB(rdx_628, edx_918, 0)
	byte dl_920 = (byte) edx_918
	branch ebp == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE88:
	branch dl_920 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE8D:
	rbp_880 = 0x000000007FFFFFFF
	ebp = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_880 * 0x0000000000000005, 0) (alias)
	ebp = rdx_919 - 0x0000000000000030 + rcx * 0x0000000000000002
	rbp_880 = DPB(rbp_880, ebp, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE30:
	rbp_880 = 0x000000007FFFFFFF
	ebp = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE15:
	rbx_137 = rbx_137 + 0x0000000000000001
	dil_592 = (byte) (word32) Mem0[rbx_137:byte] (alias)
	rdx_628 = (uint64) ((int32) dil_592 - 0x00000030)
	branch (word32) rdx_628 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE40:
	branch dil_592 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE4A:
	branch dil_592 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEC8:
	rbx_137 = rbx_137 + 0x0000000000000001
	dil_592 = (byte) (word32) Mem0[rbx_137:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE52:
	word64 r8_661
	branch dil_592 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FF4D:
	r8_661 = rbx_137
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE60:
	switch (DPB(rdx_628, (word32) dil_592, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FEFB:
	r8_661 = r11_580 - 0x0000000000000001
	dil_592 = (byte) (word32) Mem0[rbx_137 - 0x0000000000000001:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:(word32) dil rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F39F:
	word64 r15_667
	branch dil_592 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0B2:
	word64 rax_838 = r8_661 - 0x0000000000000001
	word32 ecx_843 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0C1:
	*r15Out = rax_838
	r15b = (byte) rax_838 (alias)
	rax_838 = rax_838 - 0x0000000000000001
	ecx_843 = (word32) (uint64) (ecx_843 + 0x00000001) (alias)
	branch Mem0[rax_838 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D1:
	rcx = (int64) ecx_843
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F3A9:
	*r15Out = r8_661
	r15b = (byte) r8_661 (alias)
	rcx = 0x0000000000000001
	cl = 0x01 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D7:
	word64 r8_669 = r8_661
	*r8Out = r8_669
	word64 rax_676 = 0x0000000000000000
	byte al_678 = 0x00
	branch ebp < 0x00000000 l000000000040F0E1
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0DE_1:
	rax_676 = (uint64) ebp (alias)
	al_678 = (byte) ebp (alias)
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E1:
	rax_204 = DPB(rax_676, (int16) al_678, 0) (alias)
	rbx_137 = rax_204
	branch rcx <u rax_204 l000000000040F0ED
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E9_1:
	rbx_137 = rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0ED:
	branch rbx_137 >=u r14 - r13_132 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0F9:
	branch r12_128 == 0x0000000000000000 l000000000040F16E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0FE:
	branch rax_204 <=u rcx l000000000040F144
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F103:
	Mem793[rsp_136 + 0x0000000000000030:word64] = rcx
	Mem794[rsp_136 + 0x0000000000000028:word32] = r9d
	Mem799[rsp_136 + 0x0000000000000018:word64] = r8_661
	word64 rbp_795 = (int64) ebp - rcx
	ebp = (word32) rbp_795 (alias)
	branch r11d == 0x00000030 l000000000040F1C1
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1C1:
	memset(r12_128, 0x0000000000000030, rbp_795)
	r9 = (uint64) Mem799[rsp_136 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_128 = r12_128 + rbp_795
	r8_669 = Mem799[rsp_136 + 0x0000000000000018:word64]
	r9d = (word32) r9 (alias)
	r9b_578 = (byte) r9 (alias)
	rcx = Mem799[rsp_136 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F125:
	memset(r12_128, 0x0000000000000020, rbp_795)
	r9 = (uint64) Mem799[rsp_136 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_128 = r12_128 + rbp_795
	rcx = Mem799[rsp_136 + 0x0000000000000030:word64]
	r9d = (word32) r9 (alias)
	r9b_578 = (byte) r9 (alias)
	r8_669 = Mem799[rsp_136 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F144:
	Mem750[rsp_136 + 0x0000000000000028:word64] = r8_669
	Mem754[rsp_136 + 0x0000000000000018:word64] = rcx
	branch r9b_578 == 0x00 l000000000040F180
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F180:
	rax_204 = memcpy(r12_128, r15_667, rcx)
	rcx = Mem754[rsp_136 + 0x0000000000000018:word64]
	word64 r8_788
	*r8Out = Mem754[rsp_136 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F15C:
	rax_204 = fn000000000040EC80(rcx, r15_667, r12_128, qwLoc04, out rsp_136, out ebp, out r12_128)
	rcx = Mem754[rsp_136 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
	word64 r8_783
	*r8Out = Mem754[rsp_136 + 0x0000000000000028:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16B:
	*r12Out = r12_128 + rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16E:
	*r13Out = r13_132 + rbx_137
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> ebp:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED74:
	word32 eax_529 = (word32) Mem0[rax_204 + 0x0000000000000001:byte]
	rax_204 = DPB(rax_204, eax_529, 0) (alias)
	al_271 = (byte) eax_529 (alias)
	rbx_137 = rax_204 + 0x0000000000000001
	branch al_271 == 0x00 l000000000040F050
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F050:
	r10_408 = r14
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F053:
	branch r12_128 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F05C:
	branch r10_408 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F191:
	rax_107 = r13_132
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F065:
	Mem453[r12_128:byte] = 0x00
	rax_107 = r13_132
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE9A:
	word64 rsi_148 = Mem0[rsp_136 + 0x00000000000004C8:word64] ^ Mem0[fs:0x00000028:word64]
	word32 esi_149 = (word32) rsi_148
	branch rsi_148 != 0x0000000000000000 l00000000004105EA
// DataOut: bpl cl ebp esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004105EA:
	__stack_chk_fail()
	Mem182[rsp_136 + 0x0000000000000018:word32] = 0x00000000
// DataOut: bpl cl ebp esi fs r11d r12 r13 r14 r14d r15 r15b r9d rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F25D:
	Mem183[rsp_136 + 0x00000000000000B2:byte] = cl
	byte dil_185 = (byte) (uint64) esi_149
	word64 rax_188 = rsp_136 + 0x00000000000000B3
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r14d r15 r15b r8 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF37:
	rcx = Mem183[rsp_136 + 0x0000000000000010:word64]
	Mem195[rax_188:byte] = dil_185
	Mem198[rax_188 + 0x0000000000000001:byte] = 0x00
	Mem200[rsp_136 + 0x0000000000000038:word32] = r9d
	Mem201[rsp_136 + 0x0000000000000030:word32] = r11d
	Mem202[rsp_136 + 0x0000000000000028:word64] = rbx_137
	rax_204 = DPB(rax_188, strftime(rsp_136 + 0x00000000000000C0, 0x0000000000000400, rsp_136 + 0x00000000000000B0, rcx), 0) (alias)
	word64 r11_211 = (uint64) Mem202[rsp_136 + 0x0000000000000030:word32]
	*r11Out = r11_211
	r9 = (uint64) Mem202[rsp_136 + 0x0000000000000038:word32]
	*r9Out = r9
	cl = (byte) rcx (alias)
	word64 r8_210 = Mem202[rsp_136 + 0x0000000000000028:word64]
	*r8Out = r8_210
	r11d = (word32) r11_211 (alias)
	r9d = (word32) r9 (alias)
	byte r9b_215 = (byte) r9
	branch rax_204 == 0x0000000000000000 l000000000040ED74
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> r14:rdx rdx:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF84:
	rbx_137 = rax_204 - 0x0000000000000001
	word64 rax_217 = 0x0000000000000000
	byte al_219 = 0x00
	branch ebp < 0x00000000 l000000000040EF8F
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8C_1:
	rax_217 = (uint64) ebp (alias)
	al_219 = (byte) ebp (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8F:
	word16 ax_230 = (int16) al_219
	word64 rax_232 = DPB(rax_217, ax_230, 0)
	rcx = rax_204 - 0x0000000000000001
	cl = (byte) (rax_204 - 0x0000000000000001) (alias)
	branch rax_232 <u rax_204 - 0x0000000000000001 l000000000040EF9E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9A_1:
	rcx = rax_232
	cl = (byte) ax_230 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9E:
	branch rcx >=u r14 - r13_132 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE98:
	rax_107 = 0x0000000000000000
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFAA:
	branch r12_128 == 0x0000000000000000 l000000000040F03A
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB3:
	branch rax_204 - 0x0000000000000001 >=u rax_232 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB8:
	branch (word32) (uint64) Mem202[rsp_136 + 0x0000000000000018:word32] != 0x00000000 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFC0:
	Mem363[rsp_136 + 0x0000000000000030:word64] = rcx
	Mem364[rsp_136 + 0x0000000000000028:word32] = r9d
	Mem369[rsp_136 + 0x0000000000000018:word64] = r8_210
	word64 rbp_365 = (int64) ebp - (rax_204 - 0x0000000000000001)
	ebp = (word32) rbp_365 (alias)
	branch r11d == 0x00000030 l0000000000410239
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000410239:
	memset(r12_128, 0x0000000000000030, rbp_365)
	r9 = (uint64) Mem369[rsp_136 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_128 = r12_128 + rbp_365
	r8_210 = Mem369[rsp_136 + 0x0000000000000018:word64]
	r9d = (word32) r9 (alias)
	r9b_215 = (byte) r9 (alias)
	rcx = Mem369[rsp_136 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFE2:
	memset(r12_128, 0x0000000000000020, rbp_365)
	r9 = (uint64) Mem369[rsp_136 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_128 = r12_128 + rbp_365
	rcx = Mem369[rsp_136 + 0x0000000000000030:word64]
	r9d = (word32) r9 (alias)
	r9b_215 = (byte) r9 (alias)
	r8_210 = Mem369[rsp_136 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:0x0000000000000400 eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:0x00000400 r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F001:
	Mem297[rsp_136 + 0x0000000000000028:word64] = rcx
	Mem298[rsp_136 + 0x0000000000000018:word64] = r8_210
	word64 rsi_302 = Mem298[rsp_136 + 0x0000000000000020:word64]
	branch r15b != 0x00 l000000000040F1AD
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1AD:
	rax_232 = fn000000000040EC30(rax_204 - 0x0000000000000001, rsi_302, r12_128, qwLoc04, out rsp_136, out ebp, out r12_128)
	rcx = Mem298[rsp_136 + 0x0000000000000028:word64]
	word64 r8_353
	*r8Out = Mem298[rsp_136 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F01F:
	branch r9b_215 == 0x00 l000000000040F199
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F199:
	rax_232 = memcpy(r12_128, rsi_302, rax_204 - 0x0000000000000001)
	rcx = Mem298[rsp_136 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
	word64 r8_345
	*r8Out = Mem298[rsp_136 + 0x0000000000000018:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F028:
	rax_232 = fn000000000040EC80(rax_204 - 0x0000000000000001, rsi_302, r12_128, qwLoc04, out rsp_136, out ebp, out r12_128)
	rcx = Mem298[rsp_136 + 0x0000000000000028:word64]
	word64 r8_334
	*r8Out = Mem298[rsp_136 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F037:
	*r12Out = r12_128 + (rax_204 - 0x0000000000000001)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F03A:
	word32 eax_269 = (word32) Mem202[rax_232 + 0x0000000000000001:byte]
	rax_204 = DPB(rax_232, eax_269, 0) (alias)
	al_271 = (byte) eax_269 (alias)
	*r13Out = r13_132 + rcx
	rbx_137 = rax_204 + 0x0000000000000001
	branch al_271 != 0x00 l000000000040ED85
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F04E:
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEB1:
	word64 rsp_159 = Mem0[rsp_136 + 0x00000000000004E8:word64]
	word64 rbp_161
	*rbpOut = Mem0[rsp_159 + 0x0000000000000008:word64]
	word32 esi_165
	*esiOut = (word32) Mem0[rsp_159 + 0x0000000000000010:word64]
	word64 rdi_167
	*rdiOut = Mem0[rsp_159 + 0x0000000000000018:word64]
	word64 rsp_170
	*rspOut = rsp_159 + 0x0000000000000020
	return rax_107
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040ECD0_exit:
// DataOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> rdi:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040EDA9:
	rbx_137 = rbx_137 + 0x0000000000000001
	dil_592 = (byte) (word32) Mem0[rbx_137:byte] (alias)
	SZO_595 = cond(dil_592 - 0x30) (alias)
	branch dil_592 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:0x0001 rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDC0:
	r11d = (int32) dil_592
	*r11Out = DPB(r11_580, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)



word64 fn0000000000410600(word64 rax, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r8d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// LiveOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 rsp_28
	word64 rbp_29
	word32 esi_30
	word64 rdi_31
	word64 r8_32
	word64 r9_33
	word64 r11_34
	word64 r12_35
	word64 r13_36
	word64 r14_37
	word64 r15_38
	return fn000000000040ECD0(rax, rdx, rsi, ebp, rdi, 0x0000000000000000, (word32) (uint64) r8d, r11d, r14, r15b, fs, out rsp_28, out rbp_29, out esi_30, out rdi_31, out r8_32, out r9_33, out r11_34, out r12_35, out r13_36, out r14_37, out r15_38)
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> rbx:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A30:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168CC)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410650:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168C0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	__fprintf_chk(rdi, 0x0000000000000001, 0x0000000000416BA0)
	word64 rax_46 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word32 eax_49 = fputs_unlocked(rax_46, rdi)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:<invalid> eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A50:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004107A1:
	__fprintf_chk(rdi, 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005))
	return qwLoc08 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004106BE:
	word64 rsp_106
	word64 rdi_107
	word64 rsi_108
	word64 rbp_109
	word64 r12_110
	word64 r9_111
	word64 rbx_112
	word64 r8_113
	byte SCZO_114
	byte SZO_115
	byte C_116
	byte Z_117
	word64 rcx_118
	word64 rdx_119
	word32 edx_120
	word32 esi_121
	word32 eax_122
	word64 rax_123
	word32 edi_124
	byte CZ_125
	word64 r10_126
	word64 r11_127
	word64 r13_128
	word64 r15_129
	word64 r14_130
	call Mem0[0x00416B48:word32] (retsize: 4; depth: 116)
		uses: C_28,CZ_51,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_17,dwLoc18_21,eax_49,edi,edx,esi,qwLoc28,qwLoc30,qwLoc38,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,r10,r11,r12_15,r13,r14,r15,r8_30,r9_31,rax_46,rbp_18,rbx_23,rcx_37,rdi_48,rdx_44,rsi_47,rsp_24,SCZO_50,SZO_29,Z_26
		defs: C_116,CZ_125,eax_122,edi_124,edx_120,esi_121,r10_126,r11_127,r12_110,r13_128,r14_130,r15_129,r8_113,r9_111,rax_123,rbp_109,rbx_112,rcx_118,rdi_107,rdx_119,rsi_108,rsp_106,SCZO_114,SZO_115,Z_117
	return rsp_106
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_13 = 0x0000000000000000
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_18 = (word32) (uint64) Mem0[rax:word32]
	branch eax_18 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 rax_58 = (uint64) (eax_18 + 0x00000008)
	Mem60[rax_58:word32] = (word32) rax_58
	rax = Mem60[rdx:word64]
	Mem66[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem49[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem49[rdx:word64]
	Mem55[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_13 = r9_13 + 0x0000000000000001
	branch r9_13 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_13, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid>



void fn0000000000410B30(byte al, word64 rdx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al r11 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410B30_entry:
// DataOut: al r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B30:
	branch al == 0x00 l0000000000410B7C
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B7C:
	fn0000000000410AC0(fp - 0x00000000000000B8, rdx, rsi, rdi, fp - 0x00000000000000D0, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9

fn0000000000410B30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -208(fp):0x00000020 -204(fp):0x00000030 -200(fp):fp + 0x0000000000000008 -192(fp):fp - 0x00000000000000B8 -152(fp):r8 -144(fp):r9

l0000000000410B45:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9



word64 fn0000000000410C40(word64 rsi, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esp rax rdi rdx rsp sp spl
// Preserved: rbx
fn0000000000410C40_entry:
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_34 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_34 <u rdi l0000000000410C7A
// DataOut: eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem40[fp - 0x0000000000000008:word32] = rax_34
	fn0000000000410E50()
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	word64 rsp_23
	*rspOut = fp + 0x0000000000000004
	return rax_13
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al r8 rax rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r10 r10b r10d r10w r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	word64 rsp_221
	*rspOut = fp + 0x0000000000000004
	return 0x0000000000000000
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

l0000000000410C99:
	word64 rax_63 = realloc(rdi, rsi)
	branch rax_63 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_87 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_87 <u rsi l0000000000410CED
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem96[fp - 0x0000000000000008:word32] = rax_87
	fn0000000000410E50()
	word64 r8_100
	*r8Out = rdx
	word64 rcx_101 = Mem96[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_101 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_202 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_101 = (uint64) (rax_202 == 0x0000000000000000) + rax_202
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	word128 rdx_rax_122 = (uint128) (uint64) rax_87
	r8_100 = 0x00000000AAAAAAAA
	*r8Out = r8_100
	rdx = (uint64) (rdx_rax_122 % 0x00000000AAAAAAAA)
	word64 rax_127 = (uint64) (rdx_rax_122 /u 0x00000000AAAAAAAA)
	branch rcx_101 >=u rax_127 l0000000000410D5C
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem140[fp - 0x000000000000000C:word32] = rax_127
	fn0000000000410E50()
	word64 rax_144 = Mem140[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_144 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_144 = 0x0000000000000080
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem186[rsi:word64] = rax_144
	rsi = rax_144
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_144 >u rdx l0000000000410DB7
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem160[fp - 0x0000000000000010:word32] = rax_144
	fn0000000000410E50()
	Mem162[fp - 0x0000000000000014:word32] = rsi
	word64 rsp_173
	*rspOut = rsp_164 + 0x0000000000000008
	word64 rsp_164
	return memset(fn0000000000410C40(rsi, rdi, out rsp_164), 0x0000000000000000, rdi)
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// Terminates process

l0000000000410D87:
	rdx = rax_144 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_153 = rax_144 + rdx
	Mem156[rsi:word64] = rax_153
	rsi = rax_153
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_101 = rcx_101 + (rcx_101 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem116[rsi:word64] = rcx_101
	rsi = rcx_101 *s r8_100
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	word64 rsp_74
	*rspOut = fp + 0x0000000000000004
	return rax_63
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

fn0000000000410C90_exit:
// DataOut: al r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx



word64 fn0000000000410E00(word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: bpl ebp rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410E00_entry:
// DataOut: fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	word64 rsp_15
	word64 rax_16 = fn0000000000410C40(rsi, rsi, out rsp_15)
	word64 rbp_24
	*rbpOut = Mem0[rsp_15 + 0x0000000000000010:word64]
	word64 rsp_25
	*rspOut = rsp_15 + 0x0000000000000018
	word64 rdi_26
	*rdiOut = rax_16
	return memcpy(rax_16, rdi, rsi)
// DataOut: bpl ebp fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410E00_exit:
// DataOut: bpl ebp rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:rsi rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000410E30(word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: bpl ebp rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E30_entry:
// DataOut: fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_11 = DPB(rax, strlen(rdi), 0)
	word64 rsi_13
	*rsiOut = rax_11 + 0x0000000000000001
// DataOut: fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E41_thunk_fn0000000000410E00:
	word64 rsp_16
	word64 rbp_17
	word64 rdi_18
	return fn0000000000410E00(rax_11 + 0x0000000000000001, rdi, out rsp_16, out rbp_17, out rdi_18)
// DataOut: bpl ebp fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx eax:<invalid> rdi:rdi rsi:rax + 0x0000000000000001 -4(fp):rbx

fn0000000000410E30_exit:
// DataOut: bpl ebp rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(0)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	error((uint64) Mem0[0x000000000061A580:word32], 0x0000000000000000, 0x0000000000415E54, tLoc10)
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



word32 fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 r8d rdi rsi
// LiveOut: eax ebx r12 r15 r9 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E90_entry:
// DataOut: ebx edx fs r11 r8 r8d rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E90:
	word32 r14d_10 = (word32) (uint64) edx
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: fs r11 r14d r8 r8d rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EAA:
	word64 r15_28
	*r15Out = rsi
	word64 r12_35
	*r12Out = r8
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: fs r11 r12 r14d r15 r8d rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410EBE_1:
	*r15Out = fp - 0x0000000000000028
// DataOut: fs r11 r12 r14d r15 r8d rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410EC2:
	byte bl_40 = (byte) (word32) Mem0[rdi:byte]
	word64 rdx_42 = Mem0[__ctype_b_loc():word64]
	word64 rax_45 = rdi
// DataOut: bl fs r11 r12 r14d r15 r8d rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410EDF:
	r9 = DPB(r9, (word32) bl_40, 0) (alias)
	*r9Out = r9
	branch (Mem0[rdx_42 + 0x0000000000000001 + r9 * 0x0000000000000002:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl fs r11 r12 r14d r15 r8d r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410ED8:
	rax_45 = rax_45 + 0x0000000000000001
	bl_40 = (byte) (word32) Mem0[rax_45:byte] (alias)
// DataOut: bl fs r11 r12 r14d r15 r8d rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410EEB:
	word32 eax_126
	branch bl_40 != 0x2D l0000000000410F08
// DataOut: fs r11 r12 r14d r15 r8d r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F08:
	word32 ebp_215
	word64 rbp_214
	word32 edx_265
	word64 rax_177 = __errno_location()
	Mem179[rax_177:word32] = 0x00000000
	word64 rax_185 = DPB(rax_177, strtoul(rdi, r15_28, (uint64) r14d_10), 0)
	word64 r14_186 = Mem179[r15_28:word64]
	word64 rbx_188 = rax_185
	branch r14_186 == rdi l0000000000410FE7
// DataOut: fs r11 r12 r14 r15 r8d r9 rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FE7:
	branch r8 == 0x0000000000000000 l0000000000410EF0
// DataOut: fs r11 r12 r14 r15 r8d r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FF0:
	word32 edx_948 = (word32) Mem179[rdi:byte]
	byte dl_951 = (byte) edx_948
	branch dl_951 == 0x00 l0000000000410EF0
// DataOut: dl edx fs r11 r12 r14 r15 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FFC:
	rbp_214 = 0x0000000000000000
	ebp_215 = 0x00000000 (alias)
	rbx_188 = 0x0000000000000001
	edx_265 = (word32) (uint64) edx_948 (alias)
	branch strchr(r8, DPB(r15_28, (int32) dl_951, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp edx fs r11 r12 r14 r15 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041101F:
// DataOut: fs r11 r12 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F3A:
	word32 eax_907 = (word32) (uint64) Mem179[rax_177:word32]
	branch eax_907 != 0x00000000 l0000000000410F68
// DataOut: eax fs r11 r12 r14 r15 r8d r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F68:
	rbp_214 = 0x0000000000000001
	ebp_215 = 0x00000001 (alias)
	branch eax_907 != 0x00000022 l0000000000410EF0
// DataOut: ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F76:
// DataOut: ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F40:
	rbp_214 = 0x0000000000000000
	ebp_215 = 0x00000000 (alias)
// DataOut: ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F42:
	branch r8 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F47:
	word32 edx_918 = (word32) Mem179[r15_28:byte]
	byte dl_921 = (byte) edx_918
	branch dl_921 != 0x00 l0000000000410F78
// DataOut: dl ebp edx fs r11 r12 r14 r15 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F78:
	edx_265 = (word32) (uint64) edx_918 (alias)
	branch strchr(r8, DPB(r15_28, (int32) dl_921, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp edx fs r11 r12 r14 r15 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F94:
	word32 eax_291
	word64 rax_290
	word32 ecx_286
	word64 rsi_274 = 0x0000000000000030
	word32 edx_283 = (word32) (uint64) edx_265
	branch strchr(r8, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FAE:
	byte al_877 = (byte) (word32) Mem179[0x0000000000000031:byte]
	branch al_877 == 0x44 l0000000000411262
// DataOut: al dl ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FBB:
	branch al_877 == 0x69 l000000000041124A
// DataOut: al dl ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041124A:
	word64 rcx_901 = (uint64) (Mem179[0x0000000000000032:byte] == 0x42)
	rax_290 = 0x0000000000000400
	eax_291 = 0x00000400 (alias)
	ecx_286 = rcx_901 + 0x0000000000000001 + rcx_901
// DataOut: dl eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FC3:
	branch al_877 == 0x42 l0000000000411262
// DataOut: dl ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411262:
	ecx_286 = 0x00000002 (alias)
	rax_290 = 0x00000000000003E8
	eax_291 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FCB:
	ecx_286 = 0x00000001 (alias)
	rax_290 = 0x0000000000000400
	eax_291 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FD5:
	word64 rdx_293 = (uint64) (edx_283 - 0x00000042)
	byte dl_296 = (byte) rdx_293
	branch dl_296 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FDD:
	word32 edx_309
	word64 rdi_505
	switch (DPB(rdx_293, (word32) dl_296, 0)) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411054:
	branch rbx_188 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041105D:
	rbx_188 = rbx_188 * 0x0000000000000002
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411036:
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411064:
	branch rbx_188 >u rax_290 l0000000000411283
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411077:
	rbx_188 = rbx_188 << 0x0000000000000009
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041107F:
	word64 rdi_767 = (int64) eax_291
	word64 rax_774 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_767)
	word32 esi_778 = 0x00000007
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110A6:
	branch rax_774 >=u rbx_188 l0000000000411097
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411097:
	rbx_188 = rbx_188 *s rdi_767
	r8d = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110AB:
	rbx_188 = 0xFFFFFFFFFFFFFFFF
	rax_774 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041109E:
	rsi_274 = (uint64) (esi_778 - 0x00000001)
	edx_309 = (word32) (uint64) (edx_309 | r8d) (alias)
	esi_778 = (word32) rsi_274 (alias)
	branch esi_778 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110BA:
	word64 rdi_699 = (int64) eax_291
	word64 rax_706 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_699)
	word32 esi_710 = 0x00000008
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110E5:
	branch rax_706 >=u rbx_188 l00000000004110D2
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110D2:
	rbx_188 = rbx_188 *s rdi_699
	r8d = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110EA:
	rbx_188 = 0xFFFFFFFFFFFFFFFF
	rax_706 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110D9:
	rsi_274 = (uint64) (esi_710 - 0x00000001)
	edx_309 = (word32) (uint64) (edx_309 | r8d) (alias)
	esi_710 = (word32) rsi_274 (alias)
	branch esi_710 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110F9:
	rsi_274 = (int64) eax_291
	word64 rax_638 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_274)
	word32 edi_642 = 0x00000004
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041110F:
	branch rax_638 <u rbx_188 l0000000000411271
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411271:
	rbx_188 = 0xFFFFFFFFFFFFFFFF
	rax_638 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411118:
	rbx_188 = rbx_188 *s rsi_274
	r8d = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041111F:
	edx_309 = (word32) (uint64) (edx_309 | r8d) (alias)
	edi_642 = (word32) (uint64) (edi_642 - 0x00000001) (alias)
	branch edi_642 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411127:
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041112C:
	rsi_274 = (int64) eax_291
	word64 rax_570 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_274)
	word32 edi_574 = 0x00000005
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411157:
	branch rax_570 >=u rbx_188 l0000000000411144
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411144:
	rbx_188 = rbx_188 *s rsi_274
	r8d = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041115C:
	rbx_188 = 0xFFFFFFFFFFFFFFFF
	rax_570 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041114B:
	edx_309 = (word32) (uint64) (edx_309 | r8d) (alias)
	edi_574 = (word32) (uint64) (edi_574 - 0x00000001) (alias)
	branch edi_574 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041116B:
	rdi_505 = (int64) eax_291
	rsi_274 = 0xFFFFFFFFFFFFFFFF
	word64 rax_543 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_505)
	branch rbx_188 >u rax_543 l00000000004112A3
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411186:
	rbx_188 = rbx_188 *s rdi_505
	branch rax_543 <u rbx_188 l00000000004112A3
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004112A3:
	edx_309 = 0x00000001 (alias)
	rbx_188 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041119E:
	rdi_505 = (int64) eax_291
	rsi_274 = 0xFFFFFFFFFFFFFFFF
	branch rbx_188 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_505) l0000000000411193
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411193:
	rsi_274 = 0xFFFFFFFFFFFFFFFF
	rbx_188 = rbx_188 *s rdi_505
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111B5:
	rbx_188 = 0xFFFFFFFFFFFFFFFF
	edx_309 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041121B:
	rsi_274 = (int64) eax_291
	word64 rax_435 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_274)
	word32 edi_439 = 0x00000003
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411231:
	branch rax_435 <u rbx_188 l0000000000411294
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411294:
	rbx_188 = 0xFFFFFFFFFFFFFFFF
	rax_435 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411236:
	rbx_188 = rbx_188 *s rsi_274
	r8d = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041123D:
	edx_309 = (word32) (uint64) (edx_309 | r8d) (alias)
	edi_439 = (word32) (uint64) (edi_439 - 0x00000001) (alias)
	branch edi_439 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411245:
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111C2:
	word64 rdi_360 = (int64) eax_291
	word64 rax_367 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_360)
	word32 esi_371 = 0x00000006
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111ED:
	branch rax_367 >=u rbx_188 l00000000004111DA
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111DA:
	rbx_188 = rbx_188 *s rdi_360
	r8d = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111F2:
	rbx_188 = 0xFFFFFFFFFFFFFFFF
	rax_367 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111E1:
	rsi_274 = (uint64) (esi_371 - 0x00000001)
	edx_309 = (word32) (uint64) (edx_309 | r8d) (alias)
	esi_371 = (word32) rsi_274 (alias)
	branch esi_371 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411028:
	Mem258[rbp_214:word64] = rbx_188
	eax_126 = (word32) (uint64) ((word32) (uint64) ebp_215 | 0x00000002) (alias)
// DataOut: eax fs r11 r12 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411201:
	branch rbx_188 >u rax_290 l0000000000411283
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411283:
	rbx_188 = 0xFFFFFFFFFFFFFFFF
	edx_309 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411210:
	rbx_188 = rbx_188 << 0x000000000000000A
	edx_309 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411038:
	rbp_214 = (uint64) (ebp_215 | edx_309)
	Mem328[r15_28:word64] = r14_186 + (int64) ecx_286
	ebp_215 = (word32) rbp_214 (alias)
	word32 eax_326 = (word32) (uint64) ((word32) (uint64) ebp_215 | 0x00000002)
	branch Mem328[rsi_274:byte] == 0x00 l000000000041104F
// DataOut: eax ebp fs r11 r12 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041104C_1:
	ebp_215 = eax_326
	rbp_214 = DPB(rbp_214, eax_326, 0) (alias)
// DataOut: ebp fs r11 r12 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041104F:
// DataOut: ebp fs r11 r12 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F4F:
	Mem216[rbp_214:word64] = rbx_188
	word32 ebx_224
	*ebxOut = (word32) qwLoc18
	word64 rbp_231
	*rbpOut = Mem216[qwLoc08 + 0x0000000000000008:word64]
	return (word32) (uint64) ebp_215
// DataOut: eax ebx fs r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EF0:
	eax_126 = 0x00000004 (alias)
// DataOut: eax fs r11 r12 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410EF5:
	word32 ebx_132
	*ebxOut = (word32) qwLoc18
	word64 rbp_141
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return eax_126
// DataOut: eax ebx fs r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410E90_exit:
// DataOut: eax ebx r12 r15 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rbx:rbx rsi:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0030(0)

l00000000004112D0:
	word64 rsi_103
	word32 r10d_7 = (word32) (int64) esi
	word32 ebp_24 = (word32) (uint64) Mem0[0x000000000061A580:word32]
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0030(0)

l000000000041133B:
	rsi_103 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64) Local -0030(0)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:0x0000000000416DD1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64) Local -0030(0)

l0000000000411334:
	rsi_103 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64) Local -0030(0)

l00000000004112F0:
	rsi_103 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64) Local -0030(0)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64) Local -0030(0)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: Local -0030(0)

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: Local -0030(0)

l000000000041130C:
	error((uint64) ebp_24, 0x0000000000000000, dcgettext(0x0000000000000000, rsi_103, 0x0000000000000005), tLoc30)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r13:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:r8 r8:<invalid> rcx:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411360_entry:
	*r8Out = r8
// DataOut: cl edx fs r11 r8 rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411360:
	word64 r14_9 = (uint64) edx
	*r14Out = r14_9
	word32 r14d_10 = (word32) r14_9
	branch edx >u 0x00000024 l0000000000411788
// DataOut: cl fs r11 r14 r14b r14d r8 rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041137A:
	word64 r15_28
	*r15Out = rsi
	word64 r13_33
	*r13Out = rcx
	word64 r12_35
	*r12Out = r8
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: fs r11 r12 r13 r13b r14 r14b r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041138E_1:
	*r15Out = fp - 0x0000000000000028
// DataOut: fs r11 r12 r13 r13b r14 r14b r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411392:
	byte bl_40 = (byte) (word32) Mem0[rdi:byte]
	word64 rdx_42 = Mem0[__ctype_b_loc():word64]
	word64 rax_45 = rdi
// DataOut: bl fs r11 r12 r13 r13b r14 r14b r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113AF:
	r9 = DPB(r9, (word32) bl_40, 0) (alias)
	*r9Out = r9
	branch (Mem0[rdx_42 + 0x0000000000000001 + r9 * 0x0000000000000002:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl fs r11 r12 r13 r13b r14 r14b r14d r15 r8 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113A8:
	rax_45 = rax_45 + 0x0000000000000001
	bl_40 = (byte) (word32) Mem0[rax_45:byte] (alias)
// DataOut: bl fs r11 r12 r13 r13b r14 r14b r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113BB:
	word32 eax_131
	branch bl_40 != 0x2D l00000000004113D8
// DataOut: fs r11 r12 r13 r13b r14 r14b r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113D8:
	word32 ebp_224
	word64 rbp_223
	word32 edx_274
	word64 rax_181 = __errno_location()
	Mem184[rax_181:word32] = 0x00000000
	word64 rax_190 = DPB(rax_181, __strtoul_internal(rdi, r15_28, (uint64) r14d_10, 0x0000000000000000), 0)
	word64 r14_193 = Mem184[r15_28:word64]
	*r14Out = r14_193
	word64 rbx_195 = rax_190
	word64 r8_198 = rax_181
	*r8Out = r8_198
	word32 r8d_199 = (word32) rax_181
	branch r14_193 == rdi l00000000004114BF
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114BF:
	branch r8 == 0x0000000000000000 l00000000004113C0
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114C8:
	word32 edx_959 = (word32) Mem184[rdi:byte]
	byte dl_962 = (byte) edx_959
	branch dl_962 == 0x00 l00000000004113C0
// DataOut: dl edx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114D4:
	rbp_223 = 0x0000000000000000
	ebp_224 = 0x00000000 (alias)
	rbx_195 = 0x0000000000000001
	edx_274 = (word32) (uint64) edx_959 (alias)
	branch strchr(r8, DPB(r15_28, (int32) dl_962, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114F7:
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041140C:
	word32 eax_918 = (word32) (uint64) Mem184[rax_190:word32]
	branch eax_918 != 0x00000000 l0000000000411440
// DataOut: eax fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411440:
	rbp_223 = 0x0000000000000001
	ebp_224 = 0x00000001 (alias)
	branch eax_918 != 0x00000022 l00000000004113C0
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041144E:
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411413:
	rbp_223 = 0x0000000000000000
	ebp_224 = 0x00000000 (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411415:
	branch r8 == 0x0000000000000000 l0000000000411422
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041141A:
	word32 edx_929 = (word32) Mem184[r15_28:byte]
	byte dl_932 = (byte) edx_929
	branch dl_932 != 0x00 l0000000000411450
// DataOut: dl ebp edx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411450:
	edx_274 = (word32) (uint64) edx_929 (alias)
	branch strchr(r8, DPB(r15_28, (int32) dl_932, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041146C:
	word32 eax_298
	word64 rax_297
	word32 ecx_293
	word64 rsi_281 = 0x0000000000000030
	word32 edx_290 = (word32) (uint64) edx_274
	branch strchr(r8, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411486:
	byte al_888 = (byte) (word32) Mem184[0x0000000000000031:byte]
	branch al_888 == 0x44 l000000000041173A
// DataOut: al dl ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411493:
	branch al_888 == 0x69 l0000000000411722
// DataOut: al dl ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411722:
	word64 rcx_912 = (uint64) (Mem184[0x0000000000000032:byte] == 0x42)
	rax_297 = 0x0000000000000400
	eax_298 = 0x00000400 (alias)
	ecx_293 = rcx_912 + 0x0000000000000001 + rcx_912
// DataOut: dl eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041149B:
	branch al_888 == 0x42 l000000000041173A
// DataOut: dl ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041173A:
	ecx_293 = 0x00000002 (alias)
	rax_297 = 0x00000000000003E8
	eax_298 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114A3:
	ecx_293 = 0x00000001 (alias)
	rax_297 = 0x0000000000000400
	eax_298 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114AD:
	word64 rdx_300 = (uint64) (edx_290 - 0x00000042)
	byte dl_303 = (byte) rdx_300
	branch dl_303 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114B5:
	word32 edx_318
	word64 rdi_515
	switch (DPB(rdx_300, (word32) dl_303, 0)) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041152C:
	branch rbx_195 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411535:
	rbx_195 = rbx_195 * 0x0000000000000002
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041150E:
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041153C:
	word64 r8_845 = 0x00000000FFFFFFFF
	*r8Out = r8_845
	branch rbx_195 >u rax_297 l000000000041175B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041154F:
	rbx_195 = rbx_195 << 0x0000000000000009
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:0x00000000FFFFFFFF edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411557:
	word64 rdi_777 = (int64) eax_298
	word64 rax_784 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_777)
	word32 esi_788 = 0x00000007
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041157E:
	branch rax_784 >=u rbx_195 l000000000041156F
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041156F:
	rbx_195 = rbx_195 *s rdi_777
	word64 r8_841
	*r8Out = 0x0000000000000000
	r8d_199 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411583:
	rbx_195 = 0xFFFFFFFFFFFFFFFF
	rax_784 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411576:
	rsi_281 = (uint64) (esi_788 - 0x00000001)
	edx_318 = (word32) (uint64) (edx_318 | r8d_199) (alias)
	esi_788 = (word32) rsi_281 (alias)
	branch esi_788 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411592:
	word64 rdi_709 = (int64) eax_298
	word64 rax_716 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_709)
	word32 esi_720 = 0x00000008
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115BD:
	branch rax_716 >=u rbx_195 l00000000004115AA
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115AA:
	rbx_195 = rbx_195 *s rdi_709
	word64 r8_773
	*r8Out = 0x0000000000000000
	r8d_199 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115C2:
	rbx_195 = 0xFFFFFFFFFFFFFFFF
	rax_716 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115B1:
	rsi_281 = (uint64) (esi_720 - 0x00000001)
	edx_318 = (word32) (uint64) (edx_318 | r8d_199) (alias)
	esi_720 = (word32) rsi_281 (alias)
	branch esi_720 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115D1:
	rsi_281 = (int64) eax_298
	word64 rax_648 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_281)
	word32 edi_652 = 0x00000004
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115E7:
	branch rax_648 <u rbx_195 l0000000000411749
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411749:
	rbx_195 = 0xFFFFFFFFFFFFFFFF
	rax_648 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F0:
	rbx_195 = rbx_195 *s rsi_281
	word64 r8_698
	*r8Out = 0x0000000000000000
	r8d_199 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F7:
	edx_318 = (word32) (uint64) (edx_318 | r8d_199) (alias)
	edi_652 = (word32) (uint64) (edi_652 - 0x00000001) (alias)
	branch edi_652 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115FF:
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411604:
	rsi_281 = (int64) eax_298
	word64 rax_580 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_281)
	word32 edi_584 = 0x00000005
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041162F:
	branch rax_580 >=u rbx_195 l000000000041161C
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041161C:
	rbx_195 = rbx_195 *s rsi_281
	word64 r8_637
	*r8Out = 0x0000000000000000
	r8d_199 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411634:
	rbx_195 = 0xFFFFFFFFFFFFFFFF
	rax_580 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411623:
	edx_318 = (word32) (uint64) (edx_318 | r8d_199) (alias)
	edi_584 = (word32) (uint64) (edi_584 - 0x00000001) (alias)
	branch edi_584 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411643:
	rdi_515 = (int64) eax_298
	rsi_281 = 0xFFFFFFFFFFFFFFFF
	word64 rax_553 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_515)
	branch rbx_195 >u rax_553 l000000000041177B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041165E:
	rbx_195 = rbx_195 *s rdi_515
	branch rax_553 <u rbx_195 l000000000041177B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041177B:
	edx_318 = 0x00000001 (alias)
	rbx_195 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411676:
	rdi_515 = (int64) eax_298
	rsi_281 = 0xFFFFFFFFFFFFFFFF
	branch rbx_195 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_515) l000000000041166B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041166B:
	rsi_281 = 0xFFFFFFFFFFFFFFFF
	rbx_195 = rbx_195 *s rdi_515
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041168D:
	rbx_195 = 0xFFFFFFFFFFFFFFFF
	edx_318 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116F3:
	rsi_281 = (int64) eax_298
	word64 rax_445 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_281)
	word32 edi_449 = 0x00000003
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411709:
	branch rax_445 <u rbx_195 l000000000041176C
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041176C:
	rbx_195 = 0xFFFFFFFFFFFFFFFF
	rax_445 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041170E:
	rbx_195 = rbx_195 *s rsi_281
	word64 r8_495
	*r8Out = 0x0000000000000000
	r8d_199 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411715:
	edx_318 = (word32) (uint64) (edx_318 | r8d_199) (alias)
	edi_449 = (word32) (uint64) (edi_449 - 0x00000001) (alias)
	branch edi_449 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041171D:
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041169A:
	word64 rdi_370 = (int64) eax_298
	word64 rax_377 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_370)
	word32 esi_381 = 0x00000006
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116C5:
	branch rax_377 >=u rbx_195 l00000000004116B2
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B2:
	rbx_195 = rbx_195 *s rdi_370
	word64 r8_434
	*r8Out = 0x0000000000000000
	r8d_199 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116CA:
	rbx_195 = 0xFFFFFFFFFFFFFFFF
	rax_377 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B9:
	rsi_281 = (uint64) (esi_381 - 0x00000001)
	edx_318 = (word32) (uint64) (edx_318 | r8d_199) (alias)
	esi_381 = (word32) rsi_281 (alias)
	branch esi_381 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411500:
	Mem265[rbp_223:word64] = rbx_195
	eax_131 = (word32) (uint64) ((word32) (uint64) ebp_224 | 0x00000002) (alias)
// DataOut: eax fs r11 r12 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116D9:
	word64 r8_357 = 0x00000000FFFFFFFF
	*r8Out = r8_357
	branch rbx_195 >u rax_297 l000000000041175B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041175B:
	rbx_195 = 0xFFFFFFFFFFFFFFFF
	edx_318 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116E8:
	rbx_195 = rbx_195 << 0x000000000000000A
	edx_318 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:0x00000000FFFFFFFF edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411510:
	rbp_223 = (uint64) (ebp_224 | edx_318)
	word64 r14_328 = r14_193 + (int64) ecx_293
	*r14Out = r14_328
	Mem336[r15_28:word64] = r14_328
	ebp_224 = (word32) rbp_223 (alias)
	word32 eax_334 = (word32) (uint64) ((word32) (uint64) ebp_224 | 0x00000002)
	branch Mem336[rsi_281:byte] == 0x00 l0000000000411527
// DataOut: eax ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411524_1:
	ebp_224 = eax_334
	rbp_223 = DPB(rbp_223, eax_334, 0) (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411527:
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411422:
	Mem225[rbp_223:word64] = rbx_195
	word64 rbp_238
	*rbpOut = Mem225[qwLoc08 + 0x0000000000000008:word64]
	return (word32) (uint64) ebp_224
// DataOut: eax ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004113C0:
	eax_131 = 0x00000004 (alias)
// DataOut: eax fs r11 r12 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113C5:
	word64 rbp_144
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return eax_131
// DataOut: eax ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411360_exit:
// DataOut: eax ebp r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rbx:rbx rsi:<invalid> rdi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004117B0_entry:
// DataOut: edi fs r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r11 r12 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem65[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117B8:
	byte Z_21 = cond(edi - 0x0000000A)
	eax_16 = (word32) (uint64) edi (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117C8:
	word64 rdx_30 = Mem0[rsi:word64]
	word64 rdi_31 = 0x00000000004137B1
	word64 rcx_33 = 0x000000000000000A
	word64 rsi_34 = rdx_30
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi

l00000000004117D8:
	branch rcx_33 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117D8_1:
	Z_21 = cond(Mem0[rsi_68:byte] - Mem0[rdi_69:byte]) (alias)
	rsi_34 = rsi_68 + 0x0000000000000001
	rdi_31 = rdi_69 + 0x0000000000000001
	rcx_33 = rcx_33 - 0x0000000000000001
	word64 rsi_68 = rsi_34
	word64 rdi_69 = rdi_31
	branch Mem0[rsi_68:byte] != Mem0[rdi_69:byte] l00000000004117D8
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DA:
	branch Z_21 l00000000004117BF
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DC:
	freecon(rdx_30)
	Mem53[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117BF:
	return eax_16
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:v3 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411820_entry:
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word32 edi_13 = (word32) (uint64) getfilecon(rdi, rsi)
// DataOut: edi fs r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182E_thunk_fn00000000004117B0:
	return fn00000000004117B0(rsi, edi_13)
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx eax:<invalid> rsi:rsi rdi:<invalid> -4(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx eax:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



word32 fn0000000000411840(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411840_entry:
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word32 edi_13 = (word32) (uint64) lgetfilecon(rdi, rsi)
// DataOut: edi fs r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rsi, edi_13)
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx eax:<invalid> rsi:rsi rdi:<invalid> -4(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx eax:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



void fn0000000000411880(word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411880_entry:
// DataOut: r13 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	__fpending(rdi)
	word32 ebx_23
	word64 rsp_24
	word64 rbp_25
	word64 rsi_26
	word64 r12_27
	word32 eax_28 = fn0000000000411D30(rdi, r8, r13, out ebx_23, out rsp_24, out rbp_25, out rsi_26, out r12_27)
	branch (word32) (uint64) (ebx_23 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004118C0:
	branch eax_28 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118C9:
	Mem94[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> eax:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118A6:
	branch eax_28 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118AA:
	branch r12_27 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> eax:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411900(word64 rsi, word64 r8, word64 r12, word64 r13, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r12 r13 r15 r8 rsi
// LiveOut: r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411900_entry:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rdi = 0x000000000000000E
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v7 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rsp = fp - 0x00000000000000C0
	esp = (word32) rsp (alias)
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	rax = nl_langinfo(0x000000000000000E)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rbx = rax
	ebx = (word32) rbx (alias)
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411940_1:
	rbx = 0x0000000000416919
	ebx = (word32) rbx (alias)
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411944:
	SZO = cond(r14 & r14)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411949:
// DataOut: fs r12 r12b r12d r13 r14 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C52:
	rdi = rax
	eax = strlen(rdi)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119EF:
	rax = 0x0000000000000007
	rsp = 0x0000000000000008
	rdi = 0x0000000000416FF3
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	rbp = 0x0000000000000001
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000000
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> rbp:0x0000000000000001 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A19:
	r13 = r13 + r12
	rdi = 0x000000000000000F
	rax = malloc(0x000000000000000F)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:0x0000000000000001 eax:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CF2:
	rsi = 0x0000000000416919
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:0x000000000000000F rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) Mem0[rsp + 0x0000000000000008:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r13 r14 r15 r15b rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:0x000000000000000F rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r13 r14 r15 r15b rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A4D:
	r13 = r13 + rbp
	r8 = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[rbp + 0x0000000000000000:word64] = rax
	rax = 0x0000000000000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	eax = open(rdi, 0x0000000000020000)
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000020000 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C20:
	rdi = (uint64) r12d
	eax = close(rdi)
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000413A21 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AA2:
	r12 = rsp + 0x0000000000000020
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
// DataOut: fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000413A21 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: fs r12 r13 r14 r15 r15b r8 rax rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: fs r12 r13 r14 r15 r15b r8 rax rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D1D:
	rdi = r15
	eax = __uflow(rdi)
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ADF:
	rsi = r15
	eax = ungetc(rdi, rsi)
	rcx = rsp + 0x0000000000000060
	rax = 0x0000000000000000
	rdx = r12
	rsi = 0x0000000000417012
	rdi = r15
	eax = fscanf(rdi, 0x0000000000417012, Mem0[rsp + -8:<unknown>])
	SCZO = cond(eax - 0x00000001)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: fs r12 r13 r14 r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B07:
	rdx = r12
// DataOut: fs r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B21:
	rcx = (uint64) eax
	r10 = rsp + 0x0000000000000060
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r12 r14 r15 r15b r8 rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B37_1:
	rdx = rcx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - r12
	SCZO = cond(rdx)
// DataOut: fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B44:
	rcx = (uint64) Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B66_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r12 r14 r15 r15b r8 rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B6D_1:
	r10 = rcx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = rsp + 0x0000000000000060
	r10 = r10 - 0x03 - C
	r10 = r10 - rax
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r12 r14 r15 r15b r8 rax rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CBC:
	rax = rax + Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rax)
	rdi = r14
	Mem0[rsp + 0x0000000000000018:word64] = r10
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = realloc(rdi, rsi)
	r10 = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
	rdx = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: fs r10 r12 r13 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	Mem0[rsp + 0x0000000000000010:word64] = r10
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = malloc(rdi)
	r10 = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
// DataOut: fs r10 r12 r13 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000417012 r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: fs r10 r12 r13 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BC1:
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = r12
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, rsi)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = rsp + 0x0000000000000060
	r14 = r13
	rax = strcpy(rdi, rsi)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: fs r12 r13 r14 r15 r15b r8 rax rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C01:
	rdi = r15
	eax = __uflow(rdi)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C9C:
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C28:
	rsi = 0x0000000000416919
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rsi:<invalid> ebp:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	rbp = DPB(rbp, ebp, 0) (alias)
	bpl = (byte) ebp (alias)
	SZO = cond(bpl & bpl)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411973:
	rsi = r14
	rdi = rbx
	eax = strcmp(rdi, rsi)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411950:
	rdi = r14
	eax = strlen(rdi)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	eax = strlen(rdi)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041198F:
	rdi = r14
	eax = strlen(rdi)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A8:
	rcx = Mem0[rsp + 0x0000000000000098:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CFD:
	__stack_chk_fail()
// DataOut: fs r13 r14 r15 r15b r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D02:
	rdi = r14
	rsi = 0x0000000000416919
	free(rdi)
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119C2:
	rsp = rsp + 168
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411900_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r15 (=> r15Out)
// DataOut: r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:0x0000000072616863 edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C14:
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:0x0000000072616863 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn0000000000411D30(word64 rdi, word64 r8, word64 r13, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut: eax ebx r12 r12b r12d rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411D30_entry:
	*rsiOut = rsi
	*r12Out = r12
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word64 rsp_58 = fp - 0x000000000000000C
	branch fileno(rdi) < 0x00000000 l0000000000411D9F
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411D43:
	branch __freading(rdi) != 0x00000000 l0000000000411D80
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D80:
	word64 rsi_124
	*rsiOut = 0x0000000000000000
	branch DPB(rax, lseek((uint64) fileno(rdi), 0x0000000000000000, 0x0000000000000001), 0) != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D4C:
	word64 rsi_93
	branch fn0000000000411DB0(rdi, out rsp_58, out rsi_93) == 0x00000000 l0000000000411D9C
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9C:
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9F:
	word64 rsp_62 = rsp_58 + 0x0000000000000008
	word32 ebx_61
	*ebxOut = (word32) Mem0[rsp_58:word64]
	word64 rbp_63
	*rbpOut = Mem0[rsp_62:word64]
	word64 rsp_66
	*rspOut = Mem0[rsp_62 + 0x0000000000000008:word64] + 0x0000000000000008
	return fclose(rdi)
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D58:
	__errno_location()
	word64 r12_100 = (uint64) Mem0[r8:word32]
	*r12Out = r12_100
	word32 r12d_101 = (word32) r12_100
	word32 eax_104 = fclose(rdi)
	branch r12d_101 == 0x00000000 l0000000000411D79
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D70:
	Mem118[r13:word32] = r12d_101
	eax_104 = 0xFFFFFFFF (alias)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D79:
	word32 ebx_112
	*ebxOut = (word32) Mem0[rsp_58:word64]
	word64 rbp_114
	*rbpOut = Mem0[rsp_58 + 0x0000000000000008:word64]
	word64 rsp_117
	*rspOut = Mem0[rsp_58 + 0x0000000000000010:word64] + 0x0000000000000008
	return eax_104
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411D30_exit:
// DataOut: eax ebx r12 r12b r12d rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn0000000000411DB0(word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax rsi rsp
// Trashed: SCZO ah al ax bh bl bx dh dl dx eax ebx edx esi esp rax rbx rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411DB0_entry:
	*rsiOut = rsi
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB9:
	branch __freading(rdi) != 0x00000000 l0000000000411DD0
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD0:
	branch (Mem0[rdi:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD8:
	word64 rsp_50
	*rspOut = fn0000000000411DF0(0x0000000000000001, 0x0000000000000000, rdi) + 0x0000000000000008
	word64 rsi_43
	*rsiOut = 0x0000000000000000
	return fflush(rdi)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> -4(fp):rbx

l0000000000411DC2:
	word64 rsp_28
	*rspOut = fp + 0x0000000000000004
	return fflush(rdi)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> -4(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:rdi rdx:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn0000000000411DF0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi rdx rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esp rax rdi rdx rsp sp spl
// Preserved: rbx rdi rsi
fn0000000000411DF0_entry:
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	branch Mem0[rdi + 0x0000000000000010:word64] == Mem0[rdi + 0x0000000000000008:word64] l0000000000411E10
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	word64 rax_40 = Mem0[rdi + 0x0000000000000020:word64]
	branch Mem0[rdi + 0x0000000000000028:word64] != rax_40 l0000000000411E02
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word64 rax_53 = DPB(rax_40, lseek((uint64) fileno(rdi), rsi, (uint64) edx), 0)
	branch rax_53 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem64[rdi:word32] = Mem0[rdi:word32] & 0xFFFFFFEF
	Mem66[rdi + 0x0000000000000090:word64] = rax_53
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	return fp + 0x0000000000000004
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx

l0000000000411E02:
	fseeko(rdi, rsi, rdx)
	return fp + 0x0000000000000004
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx

fn0000000000411DF0_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi -20(fp):rsi -8(fp):edx -4(fp):rbx



word64 fn0000000000411EE0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut: ebx fs r11 r15 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	word64 rdx_17
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: ebx fs r11 r15 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
	rdx_17 = 0x0000000000000000
// DataOut: ebx fs r11 r15 r9 rbp rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
	rdx_17 = Mem0[0x000000000061A3A8:word64]
// DataOut: ebx fs r11 r15 r9 rbp rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
	return DPB(0x000000000061A3A8, __cxa_atexit(rdi, 0x0000000000000000, rdx_17), 0)
// DataOut: ebx fs r11 r15 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

fn0000000000411EE0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



