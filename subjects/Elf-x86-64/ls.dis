void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn00000000004028C0(word64 rsi, word32 edi, word64 r9, word64 r10, word64 r11, word64 r15, selector fs, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r10 r11 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004028C0_entry:
// DataOut: edi fs r10 r11 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004028C0:
	fn000000000040D6A0(Mem0[rsi:word64])
	word64 rsp_38
	word64 r15_39
	word64 r14_40
	word64 r13_41
	word64 r12_42
	word64 rbp_43
	word64 rsi_44
	word64 rbx_45
	word32 ebx_46
	word32 edi_47
	byte SCZO_48
	word64 rdi_49
	word64 rax_50
	selector fs_51
	word32 eax_52
	byte SZO_53
	byte C_54
	word32 esi_55
	byte Z_56
	word32 ecx_57
	word64 rcx_58
	word32 edx_59
	word64 rdx_60
	byte S_61
	word16 ax_62
	byte al_63
	word32 r8d_64
	word64 r8_65
	word32 r14d_66
	word32 r13d_67
	word32 r12d_68
	byte CZ_69
	bcuiposr0 None_70
	word32 r9d_71
	word64 r9_72
	byte cl_73
	byte SO_74
	word32 ebp_75
	byte r13b_76
	word32 r15d_77
	byte r14b_78
	word64 r10_79
	word64 r11_80
	word128 xmm0_81
	word128 xmm1_82
	word128 xmm2_83
	word128 xmm3_84
	byte sil_85
	byte r12b_86
	call setlocale (retsize: 8; depth: 960)
		uses: C_35,eax_33,ebp_19,ebx_25,edi,fs,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r12,r13,r14,r15,rax_32,rbp_18,rbx_24,rdi_37,rsi_36,rsp_26,SZO_34
		defs: al_63,ax_62,C_54,cl_73,CZ_69,eax_52,ebp_75,ebx_46,ecx_57,edi_47,edx_59,esi_55,fs_51,None_70,r10_79,r11_80,r12_42,r12b_86,r12d_68,r13_41,r13b_76,r13d_67,r14_40,r14b_78,r14d_66,r15_39,r15d_77,r8_65,r8d_64,r9_72,r9d_71,rax_50,rbp_43,rbx_45,rcx_58,rdi_49,rdx_60,rsi_44,rsp_38,S_61,SCZO_48,sil_85,SO_74,SZO_53,xmm0_81,xmm1_82,xmm2_83,xmm3_84,Z_56
	word64 r14_91
	word64 r13_92
	word64 r12_93
	word64 rbp_94
	word64 rsi_95
	word64 rbx_96
	word32 ebx_97
	word32 edi_98
	byte SCZO_99
	word64 rdi_100
	word64 rax_101
	word32 eax_103
	byte SZO_104
	byte C_105
	word32 esi_106
	byte Z_107
	word32 ecx_108
	word64 rcx_109
	word32 edx_110
	word64 rdx_111
	byte S_112
	word16 ax_113
	byte al_114
	word32 r8d_115
	word64 r8_116
	word32 r14d_117
	word32 r13d_118
	word32 r12d_119
	byte CZ_120
	bcuiposr0 None_121
	word32 r9d_122
	word64 r9_123
	byte cl_124
	byte SO_125
	word32 ebp_126
	byte r13b_127
	word32 r15d_128
	byte r14b_129
	word64 r10_130
	word128 xmm0_132
	word128 xmm1_133
	word128 xmm2_134
	word128 xmm3_135
	byte sil_136
	byte r12b_137
	selector fs_1014
	word64 r11_1021
	word64 r15_1025
	word64 rsp_1026
	call bindtextdomain (retsize: 8; depth: 960)
		uses: al_63,ax_62,C_54,cl_73,CZ_69,eax_52,ebp_75,ebx_46,ecx_57,edi_47,edx_59,esi_55,fs_51,None_70,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_79,r11_80,r12_42,r12b_86,r12d_68,r13_41,r13b_76,r13d_67,r14_40,r14b_78,r14d_66,r15_39,r15d_77,r8_65,r8d_64,r9_72,r9d_71,rax_50,rbp_43,rbx_45,rcx_58,rdi_88,rdx_60,rsi_87,rsp_38,S_61,SCZO_48,sil_85,SO_74,SZO_53,xmm0_81,xmm1_82,xmm2_83,xmm3_84,Z_56
		defs: al_114,ax_113,C_105,cl_124,CZ_120,eax_103,ebp_126,ebx_97,ecx_108,edi_98,edx_110,esi_106,fs_102,None_121,r10_130,r11_131,r12_93,r12b_137,r12d_119,r13_92,r13b_127,r13d_118,r14_91,r14b_129,r14d_117,r15_90,r15d_128,r8_116,r8d_115,r9_123,r9d_122,rax_101,rbp_94,rbx_96,rcx_109,rdi_100,rdx_111,rsi_95,rsp_89,S_112,SCZO_99,sil_136,SO_125,SZO_104,xmm0_132,xmm1_133,xmm2_134,xmm3_135,Z_107
	textdomain(0x0000000000413800)
	Mem141[0x000000000061A580:word32] = 0x00000002
	fn0000000000411EE0()
	Mem143[0x000000000061B030:word32] = 0x00000000
	Mem144[0x000000000061B0D0:byte] = 0x01
	Mem145[0x000000000061B180:word64] = 0x0000000000000000
	word32 eax_148 = (word32) (uint64) Mem145[0x000000000061A56C:word32]
	Mem151[0x000000000061B190:word64] = 0x0000000000000000
	Mem152[0x000000000061B188:word64] = 0xFFFFFFFFFFFFFFFF
	Mem153[0x000000000061B0F0:byte] = 0x00
	branch eax_148 == 0x00000002 l0000000000403203
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040297B:
	branch eax_148 == 0x00000003 l00000000004029AF
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004029AF:
	Mem6351[0x000000000061B150:word32] = 0x00000000
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402980:
	word64 rax_6282 = (uint64) (eax_148 - 0x00000001)
	word32 eax_6284 = (word32) rax_6282
	branch eax_6284 == 0x00000000 l000000000040298A
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040298A:
	word64 r14_6292
	word64 r13_6293
	word64 r12_6294
	word64 rbp_6295
	word64 rsi_6296
	word64 rbx_6297
	word32 ebx_6298
	word32 edi_6299
	byte SCZO_6300
	word64 rdi_6301
	word64 rax_6302
	word32 eax_6304
	byte SZO_6305
	byte C_6306
	word32 esi_6307
	byte Z_6308
	word32 ecx_6309
	word64 rcx_6310
	word32 edx_6311
	word64 rdx_6312
	byte S_6313
	word16 ax_6314
	byte al_6315
	word32 r8d_6316
	word64 r8_6317
	word32 r14d_6318
	word32 r13d_6319
	word32 r12d_6320
	byte CZ_6321
	bcuiposr0 None_6322
	word32 r9d_6323
	word64 r9_6324
	byte cl_6325
	byte SO_6326
	word32 ebp_6327
	byte r13b_6328
	word32 r15d_6329
	byte r14b_6330
	word64 r10_6331
	word128 xmm0_6333
	word128 xmm1_6334
	word128 xmm2_6335
	word128 xmm3_6336
	byte sil_6337
	byte r12b_6338
	call isatty (retsize: 8; depth: 960)
		uses: al_6286,ax_6285,C_105,cl_124,CZ_120,eax_6284,ebp_126,ebx_97,ecx_108,edi_98,edx_110,esi_106,fs_102,None_121,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_130,r11_131,r12_93,r12b_137,r12d_119,r13_92,r13b_127,r13d_118,r14_91,r14b_129,r14d_117,r15_90,r15d_128,r8_116,r8d_115,r9_123,r9d_122,rax_6282,rbp_94,rbx_96,rcx_109,rdi_6289,rdx_111,rsi_95,rsp_89,S_112,SCZO_6287,sil_136,SO_125,SZO_104,xmm0_132,xmm1_133,xmm2_134,xmm3_135,Z_6288
		defs: al_6315,ax_6314,C_6306,cl_6325,CZ_6321,eax_6304,ebp_6327,ebx_6298,ecx_6309,edi_6299,edx_6311,esi_6307,fs_6303,None_6322,r10_6331,r11_6332,r12_6294,r12b_6338,r12d_6320,r13_6293,r13b_6328,r13d_6319,r14_6292,r14b_6330,r14d_6318,r15_6291,r15d_6329,r8_6317,r8d_6316,r9_6324,r9d_6323,rax_6302,rbp_6295,rbx_6297,rcx_6310,rdi_6301,rdx_6312,rsi_6296,rsp_6290,S_6313,SCZO_6300,sil_6337,SO_6326,SZO_6305,xmm0_6333,xmm1_6334,xmm2_6335,xmm3_6336,Z_6308
	branch eax_6304 == 0x00000000 l00000000004037EC
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037EC:
	Mem6344[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040299C:
	Mem6342[0x000000000061B150:word32] = 0x00000002
	Mem6343[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004029C5:
	Mem298[0x000000000061B14C:word32] = 0x00000000
	Mem299[0x000000000061B148:word32] = 0x00000000
	Mem300[0x000000000061B147:byte] = 0x00
	Mem301[0x000000000061B145:byte] = 0x00
	Mem302[0x000000000061B144:byte] = 0x00
	Mem303[0x000000000061B12C:word32] = 0x00000000
	Mem304[0x000000000061B114:byte] = 0x00
	Mem305[0x000000000061B110:word32] = 0x00000001
	Mem306[0x000000000061B10E:byte] = 0x00
	Mem307[0x000000000061B10D:byte] = 0x00
	Mem308[0x000000000061B108:word32] = 0x00000000
	Mem309[0x000000000061B100:word64] = 0x0000000000000000
	Mem310[0x000000000061B0F8:word64] = 0x0000000000000000
	Mem311[0x000000000061B17D:byte] = 0x00
	word64 rax_312 = getenv(0x000000000041382E)
	branch rax_312 == 0x0000000000000000 l0000000000402A7F
// DataOut: ebx fs r10 r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A50:
	word64 rax_6195 = fn0000000000409E50(0x0000000000000004, 0x0000000000416460, 0x0000000000416480, rax_312)
	word32 eax_6197 = (word32) rax_6195
	byte al_6199 = (byte) rax_6195
	branch eax_6197 < 0x00000000 l0000000000403786
// DataOut: al ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000041382E rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403786:
	word64 rbp_6212
	word64 r9_6213
	word64 r10_6214
	word64 r11_6215
	word64 r15_6216
	word32 ebx_6217 = fn000000000040E930(r11_1021, r15_1025, fs_1014, out rbp_6212, out r9_6213, out r10_6214, out r11_6215, out r15_6216)
	dcgettext(0x0000000000000000, 0x0000000000415B00, 0x0000000000000005)
	word64 r14_6233
	word64 r13_6234
	word64 r12_6235
	word64 rbp_6236
	word64 rsi_6237
	word64 rbx_6238
	word32 ebx_6239
	word32 edi_6240
	byte SCZO_6241
	word64 rdi_6242
	word64 rax_6243
	word32 eax_6245
	byte SZO_6246
	byte C_6247
	word32 esi_6248
	byte Z_6249
	word32 ecx_6250
	word64 rcx_6251
	word32 edx_6252
	word64 rdx_6253
	byte S_6254
	word16 ax_6255
	byte al_6256
	word32 r8d_6257
	word64 r8_6258
	word32 r14d_6259
	word32 r13d_6260
	word32 r12d_6261
	byte CZ_6262
	bcuiposr0 None_6263
	word32 r9d_6264
	word64 r9_6265
	byte cl_6266
	byte SO_6267
	word32 ebp_6268
	byte r13b_6269
	word32 r15d_6270
	byte r14b_6271
	word64 r10_6272
	word128 xmm0_6274
	word128 xmm1_6275
	word128 xmm2_6276
	word128 xmm3_6277
	byte sil_6278
	byte r12b_6279
	call error (retsize: 8; depth: 8)
		uses: al_6199,ax_6198,C_6230,cl_266,CZ_287,eax_6197,ebp_264,ebx_6217,ecx_274,edi_288,edx_278,esi_293,fs_275,None_268,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_6214,r11_6215,r12_6220,r12b_257,r12d_269,r13_283,r13b_263,r13d_270,r14_284,r14b_262,r14d_271,r15_6216,r15d_277,r8_295,r8d_272,r9_6213,r9d_267,rax_6228,rbp_6212,rbx_6218,rcx_6224,rdi_6227,rdx_6225,rsi_6226,rsp_286,S_6201,SCZO_290,sil_292,SO_265,SZO_6229,xmm0_261,xmm1_260,xmm2_259,xmm3_258,Z_318
		defs: al_6256,ax_6255,C_6247,cl_6266,CZ_6262,eax_6245,ebp_6268,ebx_6239,ecx_6250,edi_6240,edx_6252,esi_6248,fs_6244,None_6263,r10_6272,r11_6273,r12_6235,r12b_6279,r12d_6261,r13_6234,r13b_6269,r13d_6260,r14_6233,r14b_6271,r14d_6259,r15_6232,r15d_6270,r8_6258,r8d_6257,r9_6265,r9d_6264,rax_6243,rbp_6236,rbx_6238,rcx_6251,rdi_6242,rdx_6253,rsi_6237,rsp_6231,S_6254,SCZO_6241,sil_6278,SO_6267,SZO_6246,xmm0_6274,xmm1_6275,xmm2_6276,xmm3_6277,Z_6249
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A6F:
	fn000000000040E640((word32) (uint64) Mem311[DPB(rax_6195, (int16) al_6199, 0) * 0x0000000000000004 + 0x00416460:word32], 0x0000000000000000)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A7F:
	Mem364[0x000000000061B0C8:word64] = 0x0000000000000050
	word64 rax_365 = getenv(0x000000000041383C)
	Mem373[rsp_1026 + 0x0000000000000020:word64] = rsp_1026 + 0x0000000000000040
	branch rax_365 == 0x0000000000000000 l0000000000402AB1
// DataOut: ebx fs r10 r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:(int16) al eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AA6:
	branch Mem373[rax_365:byte] != 0x00 l00000000004037B8
// DataOut: ebx fs r10 r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037B8:
	word32 ebx_6105
	word64 r9_6106
	word32 eax_6107 = fn0000000000410E90(0x00000000, 0x0000000000000000, rax_365, 0x0000000000000000, out ebx_6105, out r9_6106)
	branch eax_6107 != 0x00000000 l0000000000403A93
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037D2:
	word64 rax_6182 = Mem373[rsp_1026 + 0x0000000000000040:word64]
	branch rax_6182 == 0x0000000000000000 l0000000000403A93
// DataOut: ebx fs r10 r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A93:
	word64 rbp_6114
	word64 r9_6115
	word64 r10_6116
	word64 r11_6117
	word64 r15_6118
	word32 ebx_6119 = fn000000000040E930(r11_1021, r15_1025, fs_1014, out rbp_6114, out r9_6115, out r10_6116, out r11_6117, out r15_6118)
	dcgettext(0x0000000000000000, 0x0000000000415B48, 0x0000000000000005)
	word64 rsp_6133
	word64 r15_6134
	word64 r14_6135
	word64 r13_6136
	word64 r12_6137
	word64 rbp_6138
	word64 rsi_6139
	word64 rbx_6140
	word32 ebx_6141
	word32 edi_6142
	byte SCZO_6143
	word64 rdi_6144
	word64 rax_6145
	selector fs_6146
	word32 eax_6147
	byte SZO_6148
	byte C_6149
	word32 esi_6150
	byte Z_6151
	word32 ecx_6152
	word64 rcx_6153
	word32 edx_6154
	word64 rdx_6155
	byte S_6156
	word16 ax_6157
	byte al_6158
	word32 r8d_6159
	word64 r8_6160
	word32 r14d_6161
	word32 r13d_6162
	word32 r12d_6163
	byte CZ_6164
	bcuiposr0 None_6165
	word32 r9d_6166
	word64 r9_6167
	byte cl_6168
	byte SO_6169
	word32 ebp_6170
	byte r13b_6171
	word32 r15d_6172
	byte r14b_6173
	word64 r10_6174
	word64 r11_6175
	word128 xmm0_6176
	word128 xmm1_6177
	word128 xmm2_6178
	word128 xmm3_6179
	byte sil_6180
	byte r12b_6181
	call error (retsize: 8; depth: 8)
		uses: al_362,ax_353,C_6132,cl_329,CZ_349,eax_6107,ebp_327,ebx_6119,ecx_336,edi_350,edx_6099,esi_358,fs_337,None_331,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_6116,r11_6117,r12_6122,r12b_368,r12d_367,r13_345,r13b_326,r13d_332,r14_346,r14b_325,r14d_333,r15_6118,r15d_339,r8_6097,r8d_334,r9_6115,r9d_330,rax_6130,rbp_6114,rbx_6120,rcx_6126,rdi_6129,rdx_6127,rsi_6128,rsp_348,S_335,SCZO_6095,sil_357,SO_328,SZO_6131,xmm0_324,xmm1_323,xmm2_322,xmm3_321,Z_6109
		defs: al_6158,ax_6157,C_6149,cl_6168,CZ_6164,eax_6147,ebp_6170,ebx_6141,ecx_6152,edi_6142,edx_6154,esi_6150,fs_6146,None_6165,r10_6174,r11_6175,r12_6137,r12b_6181,r12d_6163,r13_6136,r13b_6171,r13d_6162,r14_6135,r14b_6173,r14d_6161,r15_6134,r15d_6172,r8_6160,r8d_6159,r9_6167,r9d_6166,rax_6145,rbp_6138,rbx_6140,rcx_6153,rdi_6144,rdx_6155,rsi_6139,rsp_6133,S_6156,SCZO_6143,sil_6180,SO_6169,SZO_6148,xmm0_6176,xmm1_6177,xmm2_6178,xmm3_6179,Z_6151
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037E0:
	Mem6190[0x000000000061B0C8:word64] = rax_6182
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AB1:
	word64 r15_383
	word64 r14_384
	word64 r13_385
	word64 r12_386
	word64 rbp_387
	word64 rsi_388
	word64 rbx_389
	word32 ebx_390
	word32 edi_391
	byte SCZO_392
	word64 rdi_393
	word64 rax_394
	selector fs_395
	word32 eax_396
	byte SZO_397
	byte C_398
	word32 esi_399
	byte Z_400
	word32 ecx_401
	word64 rcx_402
	word32 edx_403
	word64 rdx_404
	byte S_405
	word16 ax_406
	byte al_407
	word32 r8d_408
	word64 r8_409
	word32 r14d_410
	word32 r13d_411
	word32 r12d_412
	byte CZ_413
	bcuiposr0 None_414
	word32 r9d_415
	word64 r9_416
	byte cl_417
	byte SO_418
	word32 ebp_419
	byte r13b_420
	word32 r15d_421
	byte r14b_422
	word64 r10_423
	word64 r11_424
	word128 xmm0_425
	word128 xmm1_426
	word128 xmm2_427
	word128 xmm3_428
	byte sil_429
	byte r12b_430
	word64 rsp_382
	call ioctl (retsize: 8; depth: 8)
		uses: al_362,ax_353,C_379,cl_329,CZ_349,eax_352,ebp_327,ebx_341,ecx_336,edi_350,edx_340,esi_358,fs_337,None_331,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_343,r11_344,r12_366,r12b_368,r12d_367,r13_345,r13b_326,r13d_332,r14_346,r14b_325,r14d_333,r15_347,r15d_339,r8_360,r8d_334,r9_359,r9d_330,rax_377,rbp_342,rbx_338,rcx_354,rdi_381,rdx_376,rsi_380,rsp_374,S_335,SCZO_355,sil_357,SO_328,SZO_378,xmm0_324,xmm1_323,xmm2_322,xmm3_321,Z_371
		defs: al_407,ax_406,C_398,cl_417,CZ_413,eax_396,ebp_419,ebx_390,ecx_401,edi_391,edx_403,esi_399,fs_395,None_414,r10_423,r11_424,r12_386,r12b_430,r12d_412,r13_385,r13b_420,r13d_411,r14_384,r14b_422,r14d_410,r15_383,r15d_421,r8_409,r8d_408,r9_416,r9d_415,rax_394,rbp_387,rbx_389,rcx_402,rdi_393,rdx_404,rsi_388,rsp_382,S_405,SCZO_392,sil_429,SO_418,SZO_397,xmm0_425,xmm1_426,xmm2_427,xmm3_428,Z_400
	branch 0x00000001 == 0x00000000 l0000000000402ADD
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402ACC:
	word32 eax_6086 = (word32) Mem373[rsp_382 + 0x0000000000000042:word16]
	word64 rax_6087 = DPB(rax_394, eax_6086, 0)
	branch (word16) eax_6086 == 0x0000 l0000000000402ADD
// DataOut: ebx fs r10 r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AD6:
	Mem6094[0x000000000061B0C8:word64] = rax_6087
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402ADD:
	word64 rax_434 = getenv(0x0000000000413844)
	Mem443[0x000000000061B0D8:word64] = 0x0000000000000008
	branch rax_434 == 0x0000000000000000 l0000000000402B22
// DataOut: eax ebx fs r10 r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AFA:
	word32 ebx_6001
	word64 r9_6002
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, rax_434, 0x0000000000000000, out ebx_6001, out r9_6002) != 0x00000000 l00000000004041BB
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413844 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00413844 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041BB:
	word64 rbp_6014
	word64 r9_6015
	word64 r10_6016
	word64 r11_6017
	word64 r15_6018
	word32 ebx_6019 = fn000000000040E930(r11_424, r15_383, fs_395, out rbp_6014, out r9_6015, out r10_6016, out r11_6017, out r15_6018)
	dcgettext(0x0000000000000000, 0x0000000000415B88, 0x0000000000000005)
	word64 r15_6038
	word64 r14_6039
	word64 r13_6040
	word64 r12_6041
	word64 rbp_6042
	word64 rsi_6043
	word64 rbx_6044
	word32 ebx_6045
	word32 edi_6046
	byte SCZO_6047
	word64 rdi_6048
	word64 rax_6049
	selector fs_6050
	word32 eax_6051
	byte SZO_6052
	byte C_6053
	word32 esi_6054
	byte Z_6055
	word32 ecx_6056
	word64 rcx_6057
	word32 edx_6058
	word64 rdx_6059
	byte S_6060
	word16 ax_6061
	byte al_6062
	word32 r8d_6063
	word64 r8_6064
	word32 r14d_6065
	word32 r13d_6066
	word32 r12d_6067
	byte CZ_6068
	bcuiposr0 None_6069
	word32 r9d_6070
	word64 r9_6071
	byte cl_6072
	byte SO_6073
	word32 ebp_6074
	byte r13b_6075
	word32 r15d_6076
	byte r14b_6077
	word64 r10_6078
	word64 r11_6079
	word128 xmm0_6080
	word128 xmm1_6081
	word128 xmm2_6082
	word128 xmm3_6083
	byte sil_6084
	byte r12b_6085
	call error (retsize: 8; depth: 8)
		uses: al_6034,ax_6033,C_6036,cl_417,CZ_413,eax_6032,ebp_419,ebx_6019,ecx_401,edi_391,edx_5996,esi_399,fs_395,None_414,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_6016,r11_6017,r12_6022,r12b_430,r12d_412,r13_385,r13b_420,r13d_411,r14_384,r14b_422,r14d_410,r15_6018,r15d_421,r8_5994,r8d_408,r9_6015,r9d_415,rax_6030,rbp_6014,rbx_6020,rcx_6026,rdi_6029,rdx_6027,rsi_6028,rsp_382,S_405,SCZO_431,sil_429,SO_418,SZO_6035,xmm0_425,xmm1_426,xmm2_427,xmm3_428,Z_6005
		defs: al_6062,ax_6061,C_6053,cl_6072,CZ_6068,eax_6051,ebp_6074,ebx_6045,ecx_6056,edi_6046,edx_6058,esi_6054,fs_6050,None_6069,r10_6078,r11_6079,r12_6041,r12b_6085,r12d_6067,r13_6040,r13b_6075,r13d_6066,r14_6039,r14b_6077,r14d_6065,r15_6038,r15d_6076,r8_6064,r8d_6063,r9_6071,r9d_6070,rax_6049,rbp_6042,rbx_6044,rcx_6057,rdi_6048,rdx_6059,rsi_6043,rsp_6037,S_6060,SCZO_6047,sil_6084,SO_6073,SZO_6052,xmm0_6080,xmm1_6081,xmm2_6082,xmm3_6083,Z_6055
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B16:
	Mem6012[0x000000000061B0D8:word64] = Mem443[rsp_382 + 0x0000000000000040:word64]
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B22:
	Mem466[rsp_382 + 0x0000000000000038:word32] = 0xFFFFFFFF
	word64 r13_470
	word64 rsi_473
	word64 rbx_474
	word32 edi_476
	byte SCZO_477
	word64 rdi_478
	word64 rax_479
	word32 eax_481
	byte SZO_482
	byte C_483
	word32 esi_484
	byte Z_485
	word32 ecx_486
	word64 rcx_487
	word32 edx_488
	word64 rdx_489
	byte S_490
	word16 ax_491
	byte al_492
	word32 r8d_493
	word32 r14d_495
	word32 r13d_496
	word32 r12d_497
	byte CZ_498
	bcuiposr0 None_499
	word32 r9d_500
	byte cl_502
	byte SO_503
	word32 ebp_504
	byte r13b_505
	word32 r15d_506
	byte r14b_507
	byte sil_514
	byte r12b_515
	word128 xmm3_1047
	word128 xmm2_1048
	word128 xmm1_1049
	word128 xmm0_1000
	word32 ebx_1018
	word64 rbp_1019
	word64 r10_1020
	word64 r9_1031
	word64 r8_1032
	word64 r12_1118
	word64 r14_1024
	call getopt_long (retsize: 8; depth: 8)
		uses: al_438,ax_437,C_458,cl_417,CZ_413,eax_436,ebp_419,ebx_444,ecx_401,edi_391,edx_403,esi_399,fs_395,None_414,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_423,r11_424,r12_454,r12b_456,r12d_455,r13_451,r13b_453,r13d_452,r14_448,r14b_450,r14d_449,r15_383,r15d_421,r8_459,r8d_460,r9_416,r9d_415,rax_447,rbp_445,rbx_389,rcx_461,rdi_465,rdx_462,rsi_464,rsp_446,S_405,SCZO_431,sil_429,SO_418,SZO_457,xmm0_425,xmm1_426,xmm2_427,xmm3_428,Z_440
		defs: al_492,ax_491,C_483,cl_502,CZ_498,eax_481,ebp_504,ebx_475,ecx_486,edi_476,edx_488,esi_484,fs_480,None_499,r10_508,r11_509,r12_471,r12b_515,r12d_497,r13_470,r13b_505,r13d_496,r14_469,r14b_507,r14d_495,r15_468,r15d_506,r8_494,r8d_493,r9_501,r9d_500,rax_479,rbp_472,rbx_474,rcx_487,rdi_478,rdx_489,rsi_473,rsp_467,S_490,SCZO_477,sil_514,SO_503,SZO_482,xmm0_510,xmm1_511,xmm2_512,xmm3_513,Z_485
	branch eax_481 == 0xFFFFFFFF l000000000040321E
// DataOut: eax ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040321E:
	branch Mem466[0x000000000061B138:word64] == 0x0000000000000000 l000000000040398A
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040398A:
	word64 rax_5958 = getenv(0x00000000004138E1)
	r15_1025 = rax_5958
	ebx_1018 = fn000000000040C810(0x000000000061B138, rax_5958, r8_1032, out r8_1032, out r9_1031)
	branch rax_5958 == 0x0000000000000000 l0000000000404531
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404531:
	branch getenv(0x00000000004138E4) != 0x0000000000000000 l00000000004039B2
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404544:
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:0x004138E4 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039B2:
	Mem5985[0x000000000061B134:word32] = (word32) (uint64) Mem466[0x000000000061B140:word32]
	Mem5987[0x000000000061A560:word64] = Mem5985[0x000000000061B138:word64]
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039CC:
	branch r14b_507 == 0x00 l000000000040322C
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039D5:
	Mem5977[0x000000000061B140:word32] = 0x00000000
	Mem5978[0x000000000061B138:word64] = 0x0000000000000400
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040322C:
	word64 rdx_661 = Mem466[0x000000000061B0C8:word64]
	word64 rax_5951 = 0x0000000000000001
	branch rdx_661 >u 0x0000000000000002 l00000000004037FB
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037FB:
	rax_5951 = (uint64) ((uint128) (uint64) rdx_661 /u 0x0000000000000003)
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:0x01 r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403242:
	Mem679[0x000000000061B020:word64] = rax_5951
	word64 rax_680 = fn000000000040E600(0x0000000000000000, r8_1032, r11_1021)
	Mem682[0x000000000061B0E8:word64] = rax_680
	branch fn000000000040E630(rax_680) == 0x00000005 l000000000040426C
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040426C:
	fn000000000040E650(0x00000001, 0x00000020, Mem682[0x000000000061B0E8:word64])
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403268:
	word64 rax_691 = (uint64) Mem682[0x000000000061B12C:word32]
	branch (word32) rax_691 <=u 0x00000001 l00000000004032A9
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403273:
	r14_1024 = r8_1032 + 0x00000000004138ED
	byte al_5914 = (byte) (word32) Mem682[rax_691 + 0x00000000004138ED:byte]
	branch al_5914 == 0x00 l00000000004032A9
// DataOut: al ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403289:
	r14_1024 = r14_1024 + 0x0000000000000001
	al_5914 = (byte) (word32) Mem682[fn000000000040E650(0x00000001, (int32) al_5914, Mem682[0x000000000061B0E8:word64]):byte] (alias)
	branch al_5914 != 0x00 l0000000000403289
// DataOut: al ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> sil:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032A9:
	word64 rax_708 = fn000000000040E600(0x0000000000000000, r8_1032, r11_1021)
	Mem714[0x000000000061B0E0:word64] = rax_708
	word64 rsi_1035 = fn000000000040E650(0x00000001, 0x0000003A, rax_708)
	branch Mem714[0x000000000061B130:byte] == 0x00 l00000000004032E2
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032D2:
	branch Mem714[0x000000000061B150:word32] == 0x00000000 l00000000004032E2
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032DB:
	Mem5905[0x000000000061B130:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032E2:
	word64 rax_5667 = (uint64) ((word32) (uint64) Mem714[0x000000000061B14C:word32] - 0x00000001)
	branch (word32) rax_5667 <=u 0x00000001 l0000000000403965
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403965:
	branch r13b_505 != 0x00 l00000000004032F4
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040396E:
	branch Mem714[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040397B:
	Mem5902[0x000000000061B148:word32] = 0x00000004
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032F4:
	branch Mem714[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040380D:
	byte Z_5650 = cond(r12_1118)
	branch r12_1118 == 0x0000000000000000 l00000000004045C6
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045C6:
	word64 rax_5871 = getenv(0x00000000004138F5)
	r12_1118 = rax_5871
	Z_5650 = cond(rax_5871) (alias)
	rax_5667 = 0x0000000000413827
	branch rax_5871 != 0x0000000000000000 l00000000004045DF
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045DB_1:
	r12_1118 = 0x0000000000413827
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:0x27 r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045DF:
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:0x27 r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403816:
	r14_1024 = 0x0000000000412CA0
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040383E:
	word64 rsi_5691 = r12_1118
	word64 rdi_5694 = 0x0000000000412CA0
	word64 rcx_5696 = 0x0000000000000006
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403847:
	branch rcx_5696 == 0x0000000000000000 l0000000000403849
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403847_1:
	Z_5650 = cond(Mem714[rsi_6352:byte] - Mem714[rdi_6353:byte]) (alias)
	rsi_5691 = rsi_6352 + 0x0000000000000001
	rdi_5694 = rdi_6353 + 0x0000000000000001
	rcx_5696 = rcx_5696 - 0x0000000000000001
	word64 rsi_6352 = rsi_5691
	word64 rdi_6353 = rdi_5694
	branch Mem714[rsi_6352:byte] != Mem714[rdi_6353:byte] l0000000000403847
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403849:
	branch Z_5650 l0000000000403828
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403828:
	rax_5667 = fn000000000040AB70(rax_5667, out rsi_1035)
	branch (byte) rax_5667 == 0x00 l0000000000403301
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040383A:
	r12_1118 = r12_1118 + 0x0000000000000006
	Z_5650 = cond(r12_1118) (alias)
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x00000002 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040384B:
	branch Mem714[r12_1118:byte] == 0x2B l00000000004043D9
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403856:
	word64 rax_5735 = fn0000000000409E50(0x0000000000000004, 0x00000000004136F0, 0x0000000000413700, r12_1118)
	branch rax_5735 < 0x0000000000000000 l0000000000404564
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404564:
	word64 rbp_5786
	word64 r9_5787
	word64 r10_5788
	fn0000000000409F80(rax_5735, r11_1021, r15_1025, fs_1014, out rsp_1026, out rbp_5786, out r9_5787, out r10_5788, out r11_1021, out r15_1025)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413928, 0x0000000000000005), Mem714[0x000000000061A650:word64])
	word64 rbx_5801 = 0x0000000000413700
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040459C:
	branch Mem714[rbx_5801:word64] == 0x0000000000000000 l00000000004031D6
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031D6:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415BF8, 0x0000000000000005), Mem714[0x000000000061A650:word64])
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045A8:
	__fprintf_chk(Mem714[0x000000000061A650:word64], 0x0000000000000001, 0x000000000041393E)
	rbx_5801 = rbx_5801 + 0x0000000000000008
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403876:
	branch rax_5735 == 0x0000000000000001 l0000000000404549
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404549:
	Mem5780[0x000000000061A3D8:word64] = 0x0000000000413966
	Mem5781[0x000000000061A3D0:word64] = 0x0000000000413966
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403880:
	branch rax_5735 <= 0x0000000000000001 l0000000000404465
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404465:
	branch rax_5735 != 0x0000000000000000 l00000000004038A8
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040446E:
	Mem5778[0x000000000061A3D8:word64] = 0x000000000041394E
	Mem5779[0x000000000061A3D0:word64] = 0x000000000041394E
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403886:
	branch rax_5735 == 0x0000000000000002 l00000000004045F3
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045F3:
	Mem5773[0x000000000061A3D0:word64] = 0x0000000000413975
	Mem5774[0x000000000061A3D8:word64] = 0x0000000000413969
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403890:
	branch rax_5735 != 0x0000000000000003 l00000000004038A8
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403896:
	word64 rsi_5755
	branch (byte) fn000000000040AB70(rax_5735, out rsi_5755) != 0x00 l000000000040460E
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040460E:
	word64 rax_5764 = dcgettext(0x0000000000000000, Mem714[0x000000000061A3D0:word64], 0x0000000000000002)
	word64 rsi_5765 = Mem714[0x000000000061A3D8:word64]
	Mem5770[0x000000000061A3D0:word64] = rax_5764
	Mem5772[0x000000000061A3D8:word64] = dcgettext(0x0000000000000000, rsi_5765, 0x0000000000000002)
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x00 esi:0x00413700 ecx:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:0x00000002 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403301:
	r12_1118 = (uint64) Mem714[0x000000000061A620:word32]
	word32 r12d_1386 = (word32) r12_1118
	branch Mem714[0x000000000061B129:byte] != 0x00 l0000000000403AC5
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AC5:
	word64 rax_5028 = getenv(0x000000000041397F)
	Mem5036[rsp_1026 + 0x0000000000000038:word64] = rax_5028
	branch rax_5028 == 0x0000000000000000 l0000000000403AE2
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AD9:
	branch Mem5036[rax_5028:byte] != 0x00 l00000000004044FA
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044FA:
	Mem5583[rsp_1026 + 0x0000000000000030:word16] = 0x3F3F
	Mem5584[rsp_1026 + 0x0000000000000032:byte] = 0x00
	word64 rsi_5589
	word64 rdi_5590
	word64 rax_5591 = fn0000000000410E30(rax_5028, out rsi_5589, out rdi_5590)
	Mem5595[0x000000000061B118:word64] = rax_5591
	Mem5596[rsp_1026 + 0x0000000000000040:word64] = rax_5591
	branch false l0000000000402985
// DataOut: edx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404528:
	word64 rsp_5600
	word64 r15_5601
	word64 r14_5602
	word64 r13_5603
	word64 r12_5604
	word64 rbp_5605
	word64 rsi_5606
	word64 rbx_5607
	word32 ebx_5608
	word32 edi_5609
	byte SCZO_5610
	word64 rdi_5611
	word64 rax_5612
	selector fs_5613
	word32 eax_5614
	byte SZO_5615
	byte C_5616
	word32 esi_5617
	byte Z_5618
	word32 ecx_5619
	word64 rcx_5620
	word32 edx_5621
	word64 rdx_5622
	byte S_5623
	word16 ax_5624
	byte al_5625
	word32 r8d_5626
	word64 r8_5627
	word32 r14d_5628
	word32 r13d_5629
	word32 r12d_5630
	byte CZ_5631
	bcuiposr0 None_5632
	word32 r9d_5633
	word64 r9_5634
	byte cl_5635
	byte SO_5636
	word32 ebp_5637
	byte r13b_5638
	word32 r15d_5639
	byte r14b_5640
	word64 r10_5641
	word64 r11_5642
	word128 xmm0_5643
	word128 xmm1_5644
	word128 xmm2_5645
	word128 xmm3_5646
	byte sil_5647
	byte r12b_5648
	call Mem5596[0x0000000000412BC8:word32] (retsize: 4; depth: 4)
		uses: al_5032,ax_5031,C_5588,cl_1346,CZ_5598,eax_5030,ebp_1344,ebx_1358,ecx_1353,edi_1367,edx_5593,esi_1374,fs_1354,None_1348,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1360,r11_1361,r12_1385,r12b_1387,r12d_1386,r13_5585,r13b_1343,r13d_5586,r14_1363,r14b_1342,r14d_1350,r15_1364,r15d_1356,r8_1376,r8d_1351,r9_1375,r9d_1347,rax_5599,rbp_1359,rbx_1355,rcx_1371,rdi_5590,rdx_5592,rsi_5589,rsp_1365,S_1352,SCZO_5597,sil_1373,SO_1345,SZO_5587,xmm0_1341,xmm1_1340,xmm2_1339,xmm3_1338,Z_5581
		defs: al_5625,ax_5624,C_5616,cl_5635,CZ_5631,eax_5614,ebp_5637,ebx_5608,ecx_5619,edi_5609,edx_5621,esi_5617,fs_5613,None_5632,r10_5641,r11_5642,r12_5604,r12b_5648,r12d_5630,r13_5603,r13b_5638,r13d_5629,r14_5602,r14b_5640,r14d_5628,r15_5601,r15d_5639,r8_5627,r8d_5626,r9_5634,r9d_5633,rax_5612,rbp_5605,rbx_5607,rcx_5620,rdi_5611,rdx_5622,rsi_5606,rsp_5600,S_5623,SCZO_5610,sil_5647,SO_5636,SZO_5615,xmm0_5643,xmm1_5644,xmm2_5645,xmm3_5646,Z_5618
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -904(fp):0x3F3F -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AE2:
	branch Mem5036[0x000000000061B129:byte] == 0x00 l0000000000403315
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AEF:
	word64 rsi_5041
	word32 eax_5042 = fn0000000000404CD0(0x0000000D, out rsi_5041)
	byte al_5046 = (byte) eax_5042
	branch al_5046 != 0x00 l0000000000403B2B
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AFD:
	word64 rsi_5555
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_5555) == 0x00 l0000000000403B14
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000D r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B0B:
	branch Mem5036[0x000000000061B198:byte] != 0x00 l0000000000403B2B
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B14:
	word64 rsi_5567
	branch (byte) fn0000000000404CD0(0x0000000C, out rsi_5567) == 0x00 l0000000000403B32
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B22:
	branch Mem5036[0x000000000061B150:word32] != 0x00000000 l0000000000403B32
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000C r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B2B:
	Mem5552[0x000000000061B115:byte] = 0x01
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B32:
	word64 r13_5055
	word64 rbx_5059
	word32 edi_5061
	byte SCZO_5062
	word64 rdi_5063
	word64 rax_5064
	word32 eax_5066
	byte SZO_5067
	byte C_5068
	word32 esi_5069
	byte Z_5070
	word32 ecx_5071
	word64 rcx_5072
	word32 edx_5073
	word64 rdx_5074
	byte S_5075
	word16 ax_5076
	byte al_5077
	word32 r8d_5078
	word32 r14d_5080
	word32 r13d_5081
	byte CZ_5083
	bcuiposr0 None_5084
	word32 r9d_5085
	byte cl_5087
	byte SO_5088
	word32 ebp_5089
	byte r13b_5090
	word32 r15d_5091
	byte r14b_5092
	byte sil_5099
	byte r12b_5100
	call tcgetpgrp (retsize: 8; depth: 8)
		uses: al_5046,ax_5045,C_5049,cl_1346,CZ_1366,eax_5042,ebp_1344,ebx_1358,ecx_1353,edi_5040,edx_1357,esi_1374,fs_1354,None_1348,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1360,r11_1361,r12_1385,r12b_1387,r12d_1386,r13_1362,r13b_1343,r13d_1349,r14_1363,r14b_1342,r14d_1350,r15_1364,r15d_1356,r8_1376,r8d_1351,r9_1375,r9d_1347,rax_5043,rbp_1359,rbx_1355,rcx_1371,rdi_5051,rdx_1377,rsi_5041,rsp_1365,S_1352,SCZO_5037,sil_1373,SO_1345,SZO_5047,xmm0_1341,xmm1_1340,xmm2_1339,xmm3_1338,Z_5048
		defs: al_5077,ax_5076,C_5068,cl_5087,CZ_5083,eax_5066,ebp_5089,ebx_5060,ecx_5071,edi_5061,edx_5073,esi_5069,fs_5065,None_5084,r10_5093,r11_5094,r12_5056,r12b_5100,r12d_5082,r13_5055,r13b_5090,r13d_5081,r14_5054,r14b_5092,r14d_5080,r15_5053,r15d_5091,r8_5079,r8d_5078,r9_5086,r9d_5085,rax_5064,rbp_5057,rbx_5059,rcx_5072,rdi_5063,rdx_5074,rsi_5058,rsp_5052,S_5075,SCZO_5062,sil_5099,SO_5088,SZO_5067,xmm0_5095,xmm1_5096,xmm2_5097,xmm3_5098,Z_5070
	branch eax_5066 < 0x00000000 l0000000000403315
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B44:
	word64 rsp_5110
	word64 r15_5111
	word64 r14_5112
	word64 r13_5113
	word64 r12_5114
	word64 rbp_5115
	word64 rsi_5116
	word64 rbx_5117
	word32 ebx_5118
	word32 edi_5119
	byte SCZO_5120
	word64 rdi_5121
	word64 rax_5122
	selector fs_5123
	word32 eax_5124
	byte SZO_5125
	byte C_5126
	word32 esi_5127
	byte Z_5128
	word32 ecx_5129
	word64 rcx_5130
	word32 edx_5131
	word64 rdx_5132
	byte S_5133
	word16 ax_5134
	byte al_5135
	word32 r8d_5136
	word64 r8_5137
	word32 r14d_5138
	word32 r13d_5139
	word32 r12d_5140
	byte CZ_5141
	bcuiposr0 None_5142
	word32 r9d_5143
	word64 r9_5144
	byte cl_5145
	byte SO_5146
	word32 ebp_5147
	byte r13b_5148
	word32 r15d_5149
	byte r14b_5150
	word64 r10_5151
	word64 r11_5152
	word128 xmm0_5153
	word128 xmm1_5154
	word128 xmm2_5155
	word128 xmm3_5156
	byte sil_5157
	byte r12b_5158
	call sigemptyset (retsize: 8; depth: 8)
		uses: al_5077,ax_5076,C_5109,cl_5087,CZ_5083,eax_5066,ebp_5089,ebx_5060,ecx_5071,edi_5061,edx_5073,esi_5069,fs_5065,None_5084,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_5093,r11_5094,r12_5056,r12b_5100,r12d_5082,r13_5105,r13b_5107,r13d_5106,r14_5054,r14b_5092,r14d_5080,r15_5053,r15d_5091,r8_5079,r8d_5078,r9_5086,r9d_5085,rax_5064,rbp_5057,rbx_5059,rcx_5072,rdi_5104,rdx_5074,rsi_5058,rsp_5052,S_5102,SCZO_5062,sil_5099,SO_5088,SZO_5108,xmm0_5095,xmm1_5096,xmm2_5097,xmm3_5098,Z_5070
		defs: al_5135,ax_5134,C_5126,cl_5145,CZ_5141,eax_5124,ebp_5147,ebx_5118,ecx_5129,edi_5119,edx_5131,esi_5127,fs_5123,None_5142,r10_5151,r11_5152,r12_5114,r12b_5158,r12d_5140,r13_5113,r13b_5148,r13d_5139,r14_5112,r14b_5150,r14d_5138,r15_5111,r15d_5149,r8_5137,r8d_5136,r9_5144,r9d_5143,rax_5122,rbp_5115,rbx_5117,rcx_5130,rdi_5121,rdx_5132,rsi_5116,rsp_5110,S_5133,SCZO_5120,sil_5157,SO_5146,SZO_5125,xmm0_5153,xmm1_5154,xmm2_5155,xmm3_5156,Z_5128
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B51:
	word64 r15_5172
	word64 r14_5173
	word64 r12_5175
	word64 rbp_5176
	word64 rsi_5177
	word64 rbx_5178
	word32 ebx_5179
	word32 edi_5180
	byte SCZO_5181
	word64 rdi_5182
	word64 rax_5183
	selector fs_5184
	word32 eax_5185
	byte SZO_5186
	byte C_5187
	word32 esi_5188
	byte Z_5189
	word32 ecx_5190
	word64 rcx_5191
	word32 edx_5192
	word64 rdx_5193
	byte S_5194
	word16 ax_5195
	byte al_5196
	word32 r8d_5197
	word64 r8_5198
	word32 r14d_5199
	word32 r13d_5200
	word32 r12d_5201
	byte CZ_5202
	bcuiposr0 None_5203
	word32 r9d_5204
	word64 r9_5205
	byte cl_5206
	byte SO_5207
	word32 ebp_5208
	byte r13b_5209
	word32 r15d_5210
	byte r14b_5211
	word64 r10_5212
	word64 r11_5213
	word128 xmm0_5214
	word128 xmm1_5215
	word128 xmm2_5216
	word128 xmm3_5217
	byte sil_5218
	byte r12b_5219
	word64 r13_5174
	word64 rsp_5171
	call sigaction (retsize: 8; depth: 8)
		uses: al_5135,ax_5134,C_5169,cl_5145,CZ_5141,eax_5124,ebp_5147,ebx_5118,ecx_5129,edi_5119,edx_5131,esi_5127,fs_5123,None_5142,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_5151,r11_5152,r12_5114,r12b_5158,r12d_5140,r13_5159,r13b_5148,r13d_5139,r14_5162,r14b_5164,r14d_5163,r15_5111,r15d_5149,r8_5137,r8d_5136,r9_5144,r9d_5143,rax_5161,rbp_5115,rbx_5117,rcx_5130,rdi_5170,rdx_5165,rsi_5167,rsp_5160,S_5133,SCZO_5120,sil_5157,SO_5146,SZO_5168,xmm0_5153,xmm1_5154,xmm2_5155,xmm3_5156,Z_5128
		defs: al_5196,ax_5195,C_5187,cl_5206,CZ_5202,eax_5185,ebp_5208,ebx_5179,ecx_5190,edi_5180,edx_5192,esi_5188,fs_5184,None_5203,r10_5212,r11_5213,r12_5175,r12b_5219,r12d_5201,r13_5174,r13b_5209,r13d_5200,r14_5173,r14b_5211,r14d_5199,r15_5172,r15d_5210,r8_5198,r8d_5197,r9_5205,r9d_5204,rax_5183,rbp_5176,rbx_5178,rcx_5191,rdi_5182,rdx_5193,rsi_5177,rsp_5171,S_5194,SCZO_5181,sil_5218,SO_5207,SZO_5186,xmm0_5214,xmm1_5215,xmm2_5216,xmm3_5217,Z_5189
	branch Mem5036[rsp_5171 + 0x0000000000000040:word64] == 0x0000000000000001 l0000000000403B7C
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14d r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B6F:
	word64 r15_5492
	word64 r14_5493
	word64 r12_5495
	word64 rbp_5496
	word64 rsi_5497
	word64 rbx_5498
	word32 ebx_5499
	word32 edi_5500
	byte SCZO_5501
	word64 rdi_5502
	word64 rax_5503
	selector fs_5504
	word32 eax_5505
	byte SZO_5506
	byte C_5507
	word32 esi_5508
	byte Z_5509
	word32 ecx_5510
	word64 rcx_5511
	word32 edx_5512
	word64 rdx_5513
	byte S_5514
	word16 ax_5515
	byte al_5516
	word32 r8d_5517
	word64 r8_5518
	word32 r14d_5519
	word32 r13d_5520
	word32 r12d_5521
	byte CZ_5522
	bcuiposr0 None_5523
	word32 r9d_5524
	word64 r9_5525
	byte cl_5526
	byte SO_5527
	word32 ebp_5528
	byte r13b_5529
	word32 r15d_5530
	byte r14b_5531
	word64 r10_5532
	word64 r11_5533
	word128 xmm0_5534
	word128 xmm1_5535
	word128 xmm2_5536
	word128 xmm3_5537
	byte sil_5538
	byte r12b_5539
	call sigaddset (retsize: 8; depth: 8)
		uses: al_5196,ax_5195,C_5187,cl_5206,CZ_5202,eax_5185,ebp_5208,ebx_5179,ecx_5190,edi_5180,edx_5192,esi_5188,fs_5184,None_5203,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_5212,r11_5213,r12_5175,r12b_5219,r12d_5201,r13_5174,r13b_5209,r13d_5200,r14_5173,r14b_5211,r14d_5199,r15_5172,r15d_5210,r8_5198,r8d_5197,r9_5205,r9d_5204,rax_5183,rbp_5176,rbx_5178,rcx_5191,rdi_5490,rdx_5193,rsi_5489,rsp_5171,S_5194,SCZO_5220,sil_5218,SO_5207,SZO_5186,xmm0_5214,xmm1_5215,xmm2_5216,xmm3_5217,Z_5221
		defs: al_5516,ax_5515,C_5507,cl_5526,CZ_5522,eax_5505,ebp_5528,ebx_5499,ecx_5510,edi_5500,edx_5512,esi_5508,fs_5504,None_5523,r10_5532,r11_5533,r12_5495,r12b_5539,r12d_5521,r13_5494,r13b_5529,r13d_5520,r14_5493,r14b_5531,r14d_5519,r15_5492,r15d_5530,r8_5518,r8d_5517,r9_5525,r9d_5524,rax_5503,rbp_5496,rbx_5498,rcx_5511,rdi_5502,rdx_5513,rsi_5497,rsp_5491,S_5514,SCZO_5501,sil_5538,SO_5527,SZO_5506,xmm0_5534,xmm1_5535,xmm2_5536,xmm3_5537,Z_5509
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B7C:
	branch r13_5174 != 0xFFFFFFFFFFFFFFD4 l0000000000403B51
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B86:
	word64 rdi_5272 = rsp_5171 + 0x0000000000000048
	word64 rsi_5274 = 0x000000000061B040
	word64 rcx_5277 = 0x0000000000000020
// DataOut: eax ebx fs r10 r11 r12 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B95:
	branch rcx_5277 == 0x0000000000000000 l0000000000403B97
// DataOut: eax ebx fs r10 r11 r12 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B97:
	Mem5298[rsp_5171 + 0x00000000000000C8:word32] = 0x10000000
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BAB:
	word64 rbx_5322
	word32 edi_5324
	byte SCZO_5325
	word64 rdi_5326
	word64 rax_5327
	word32 eax_5329
	byte SZO_5330
	byte C_5331
	word32 esi_5332
	byte Z_5333
	word32 ecx_5334
	word64 rcx_5335
	word32 edx_5336
	word64 rdx_5337
	byte S_5338
	word16 ax_5339
	byte al_5340
	word32 r8d_5341
	word32 r14d_5343
	word32 r13d_5344
	byte CZ_5346
	bcuiposr0 None_5347
	word32 r9d_5348
	byte cl_5350
	byte SO_5351
	word32 ebp_5352
	byte r13b_5353
	word32 r15d_5354
	byte r14b_5355
	byte sil_5362
	byte r12b_5363
	word64 r13_5318
	call sigismember (retsize: 8; depth: 8)
		uses: al_5263,ax_5254,C_5303,cl_5280,CZ_5251,eax_5253,ebp_5228,ebx_5242,ecx_5281,edi_5282,edx_5241,esi_5314,fs_5238,None_5232,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_5244,r11_5245,r12_5246,r12b_5222,r12d_5233,r13_5307,r13b_5299,r13d_5301,r14_5304,r14b_5306,r14d_5305,r15_5309,r15d_5310,r8_5260,r8d_5235,r9_5259,r9d_5231,rax_5262,rbp_5243,rbx_5239,rcx_5283,rdi_5311,rdx_5261,rsi_5312,rsp_5250,S_5236,SCZO_5270,sil_5313,SO_5229,SZO_5302,xmm0_5226,xmm1_5225,xmm2_5224,xmm3_5223,Z_5271
		defs: al_5340,ax_5339,C_5331,cl_5350,CZ_5346,eax_5329,ebp_5352,ebx_5323,ecx_5334,edi_5324,edx_5336,esi_5332,fs_5328,None_5347,r10_5356,r11_5357,r12_5319,r12b_5363,r12d_5345,r13_5318,r13b_5353,r13d_5344,r14_5317,r14b_5355,r14d_5343,r15_5316,r15d_5354,r8_5342,r8d_5341,r9_5349,r9d_5348,rax_5327,rbp_5320,rbx_5322,rcx_5335,rdi_5326,rdx_5337,rsi_5321,rsp_5315,S_5338,SCZO_5325,sil_5362,SO_5351,SZO_5330,xmm0_5358,xmm1_5359,xmm2_5360,xmm3_5361,Z_5333
	branch eax_5329 == 0x00000000 l0000000000403BE4
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BC3:
	word64 rax_5423 = 0x00000000004057F0
	branch r15d_5354 == 0x00000014 l0000000000403BD5
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BD1_1:
	rax_5423 = 0x00000000004049B0
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x00000000004057F0 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x004057F0 r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:0xF0 r13b:<invalid> r15:<invalid> ax:0x57F0 r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BD5:
	Mem5434[rsp_1026 + 0x0000000000000040:word64] = rax_5423
	word64 rbx_5442
	word32 edi_5444
	byte SCZO_5445
	word64 rdi_5446
	word64 rax_5447
	word32 eax_5449
	byte SZO_5450
	byte C_5451
	word32 esi_5452
	byte Z_5453
	word32 ecx_5454
	word64 rcx_5455
	word32 edx_5456
	word64 rdx_5457
	byte S_5458
	word16 ax_5459
	byte al_5460
	word32 r8d_5461
	word32 r14d_5463
	word32 r13d_5464
	byte CZ_5466
	bcuiposr0 None_5467
	word32 r9d_5468
	byte cl_5470
	byte SO_5471
	word32 ebp_5472
	byte r13b_5473
	word32 r15d_5474
	byte r14b_5475
	byte sil_5482
	byte r12b_5483
	call sigaction (retsize: 8; depth: 8)
		uses: al_5427,ax_5426,C_5433,cl_5350,CZ_5346,eax_5425,ebp_5352,ebx_5323,ecx_5334,edi_5324,edx_5336,esi_5420,fs_5328,None_5347,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_5356,r11_5357,r12_5319,r12b_5363,r12d_5345,r13_5318,r13b_5353,r13d_5344,r14_5317,r14b_5355,r14d_5343,r15_5316,r15d_5354,r8_5342,r8d_5341,r9_5349,r9d_5348,rax_5428,rbp_5320,rbx_5322,rcx_5335,rdi_5429,rdx_5430,rsi_5418,rsp_5315,S_5338,SCZO_5421,sil_5419,SO_5351,SZO_5432,xmm0_5358,xmm1_5359,xmm2_5360,xmm3_5361,Z_5422
		defs: al_5460,ax_5459,C_5451,cl_5470,CZ_5466,eax_5449,ebp_5472,ebx_5443,ecx_5454,edi_5444,edx_5456,esi_5452,fs_5448,None_5467,r10_5476,r11_5477,r12_5439,r12b_5483,r12d_5465,r13_5438,r13b_5473,r13d_5464,r14_5437,r14b_5475,r14d_5463,r15_5436,r15d_5474,r8_5462,r8d_5461,r9_5469,r9d_5468,rax_5447,rbp_5440,rbx_5442,rcx_5455,rdi_5446,rdx_5457,rsi_5441,rsp_5435,S_5458,SCZO_5445,sil_5482,SO_5471,SZO_5450,xmm0_5478,xmm1_5479,xmm2_5480,xmm3_5481,Z_5453
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BE4:
	branch r13_5318 != 0xFFFFFFFFFFFFFFD4 l0000000000403BAB
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BEE:
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B95_1:
	Mem5289[rdi_5272:word32] = Mem5036[rsi_5274:word32]
	rsi_5274 = rsi_5274 + 0x0000000000000004
	rdi_5272 = rdi_5272 + 0x0000000000000004
	rcx_5277 = rcx_5277 - 0x0000000000000001
// DataOut: eax ebx fs r10 r11 r12 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403315:
	branch Mem714[0x000000000061B110:word32] == 0x00000001 l0000000000403A39
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A39:
	word32 eax_5001 = 0x00000002
	branch Mem714[0x000000000061B10D:byte] != 0x00 l0000000000403A5F
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A47:
	branch Mem714[0x000000000061B12C:word32] == 0x00000003 l0000000000403A5F
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x02 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A50:
	eax_5001 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond(Mem714[0x000000000061B150:word32] - 0x00000001)) & 0xFFFFFFFE) + 0x00000004) (alias)
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x02 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A5F:
	Mem5012[0x000000000061B110:word32] = eax_5001
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403322:
	word32 eax_1478
	branch Mem714[0x000000000061B10E:byte] != 0x00 l00000000004039EF
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039EF:
	word64 rax_4929 = fn000000000040B400(0x0000000000404990, 0x0000000000404980, 0x0000000000000000, 0x000000000000001E, 0x00000000004049D0, r11_1021, xmm0_1000, xmm1_1049, xmm2_1048, xmm3_1047, out r9_1031, out xmm0_1000, out xmm1_1049, out xmm2_1048, out xmm3_1047)
	Mem4937[0x000000000061B1C8:word64] = rax_4929
	eax_1478 = (word32) rax_4929 (alias)
	branch rax_4929 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A1B:
	word64 r13_4951
	word64 r12_4952
	word64 rbx_4955
	word32 edi_4957
	byte SCZO_4958
	word64 rdi_4959
	word64 rax_4960
	word32 eax_4962
	byte SZO_4963
	byte C_4964
	word32 esi_4965
	byte Z_4966
	word32 ecx_4967
	word64 rcx_4968
	word32 edx_4969
	word64 rdx_4970
	byte S_4971
	word16 ax_4972
	byte al_4973
	word32 r8d_4974
	word32 r14d_4976
	word32 r13d_4977
	byte CZ_4979
	bcuiposr0 None_4980
	word32 r9d_4981
	byte cl_4983
	byte SO_4984
	word32 ebp_4985
	byte r13b_4986
	word32 r15d_4987
	byte r14b_4988
	byte sil_4995
	byte r12b_4996
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_4933,ax_4932,C_4946,cl_1397,CZ_1419,eax_4931,ebp_1395,ebx_1410,ecx_1405,edi_1420,edx_1409,esi_4944,fs_1406,None_1399,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1412,r11_1413,r12_1414,r12b_1388,r12d_1400,r13_1415,r13b_1394,r13d_1401,r14_1416,r14b_1393,r14d_1402,r15_1417,r15d_1408,r8_4938,r8d_4939,r9_4924,r9d_1398,rax_4929,rbp_1411,rbx_1407,rcx_4940,rdi_4947,rdx_4941,rsi_4942,rsp_1418,S_1404,SCZO_1444,sil_4943,SO_1396,SZO_4945,xmm0_4925,xmm1_4926,xmm2_4927,xmm3_4928,Z_4935
		defs: al_4973,ax_4972,C_4964,cl_4983,CZ_4979,eax_4962,ebp_4985,ebx_4956,ecx_4967,edi_4957,edx_4969,esi_4965,fs_4961,None_4980,r10_4989,r11_4990,r12_4952,r12b_4996,r12d_4978,r13_4951,r13b_4986,r13d_4977,r14_4950,r14b_4988,r14d_4976,r15_4949,r15d_4987,r8_4975,r8d_4974,r9_4982,r9d_4981,rax_4960,rbp_4953,rbx_4955,rcx_4968,rdi_4959,rdx_4970,rsi_4954,rsp_4948,S_4971,SCZO_4958,sil_4995,SO_4984,SZO_4963,xmm0_4991,xmm1_4992,xmm2_4993,xmm3_4994,Z_4966
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB r15d:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00404980 ebp:<invalid> ecx:0x00404990 cl:0x90 r12d:<invalid> dx:0x4980 dl:0x80 edi:0x0000001E r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040332F:
	byte al_1550
	word32 eax_1541 = (word32) (uint64) Mem714[0x000000000061B148:word32]
	branch eax_1541 == 0x00000004 l000000000040377A
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040333E:
	branch eax_1541 == 0x00000002 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403347:
	branch Mem714[0x000000000061B150:word32] == 0x00000000 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403354:
	branch Mem714[0x000000000061B17D:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403361:
	branch Mem714[0x000000000061B144:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040377A:
	Mem4894[0x000000000061B0C1:byte] = 0x01
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040336E:
	Mem4905[0x000000000061B0C1:byte] = 0x00
	al_1550 = 0x01 (alias)
	branch Mem714[0x000000000061B10E:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403383:
	branch Mem4905[0x000000000061B129:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x01 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040338C:
	branch Mem4905[0x000000000061B12C:word32] != 0x00000000 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x01 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403395:
	branch Mem4905[0x000000000061B10C:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x01 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040339E:
	al_1550 = 0x00 (alias)
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033A0:
	Mem1552[0x000000000061B0C0:byte] = al_1550
	Mem1554[0x000000000061B0C0:byte] = Mem1552[0x000000000061B0C0:byte] & 0x01
	branch Mem1554[0x000000000061B130:byte] == 0x00 l00000000004033E8
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033B6:
	word64 rsp_4775
	word64 r15_4776
	word64 r14_4777
	word64 r13_4778
	word64 r12_4779
	word64 rbp_4780
	word64 rsi_4781
	word64 rbx_4782
	word32 ebx_4783
	word32 edi_4784
	byte SCZO_4785
	word64 rdi_4786
	word64 rax_4787
	selector fs_4788
	word32 eax_4789
	byte SZO_4790
	byte C_4791
	word32 esi_4792
	byte Z_4793
	word32 ecx_4794
	word64 rcx_4795
	word32 edx_4796
	word64 rdx_4797
	byte S_4798
	word16 ax_4799
	byte al_4800
	word32 r8d_4801
	word64 r8_4802
	word32 r14d_4803
	word32 r13d_4804
	word32 r12d_4805
	byte CZ_4806
	bcuiposr0 None_4807
	word32 r9d_4808
	word64 r9_4809
	byte cl_4810
	byte SO_4811
	word32 ebp_4812
	byte r13b_4813
	word32 r15d_4814
	byte r14b_4815
	word64 r10_4816
	word64 r11_4817
	word128 xmm0_4818
	word128 xmm1_4819
	word128 xmm2_4820
	word128 xmm3_4821
	byte sil_4822
	byte r12b_4823
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_1550,ax_1548,C_4773,cl_1505,CZ_1527,eax_1547,ebp_1503,ebx_1518,ecx_1513,edi_1528,edx_1517,esi_1532,fs_1514,None_1507,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1520,r11_1521,r12_1522,r12b_1496,r12d_1508,r13_1523,r13b_1502,r13d_1509,r14_1524,r14b_1501,r14d_1510,r15_1525,r15d_1516,r8_4768,r8d_1511,r9_1533,r9d_1506,rax_1549,rbp_1519,rbx_1515,rcx_4769,rdi_4774,rdx_4770,rsi_4771,rsp_1526,S_1512,SCZO_1556,sil_1531,SO_1504,SZO_4772,xmm0_1500,xmm1_1499,xmm2_1498,xmm3_1497,Z_1557
		defs: al_4800,ax_4799,C_4791,cl_4810,CZ_4806,eax_4789,ebp_4812,ebx_4783,ecx_4794,edi_4784,edx_4796,esi_4792,fs_4788,None_4807,r10_4816,r11_4817,r12_4779,r12b_4823,r12d_4805,r13_4778,r13b_4813,r13d_4804,r14_4777,r14b_4815,r14d_4803,r15_4776,r15d_4814,r8_4802,r8d_4801,r9_4809,r9d_4808,rax_4787,rbp_4780,rbx_4782,rcx_4795,rdi_4786,rdx_4797,rsi_4781,rsp_4775,S_4798,SCZO_4785,sil_4822,SO_4811,SZO_4790,xmm0_4818,xmm1_4819,xmm2_4820,xmm3_4821,Z_4793
	word64 r13_4837
	word64 r12_4838
	word64 rbx_4841
	word32 edi_4843
	byte SCZO_4844
	word64 rdi_4845
	word64 rax_4846
	word32 eax_4848
	byte SZO_4849
	byte C_4850
	word32 esi_4851
	byte Z_4852
	word32 ecx_4853
	word64 rcx_4854
	word32 edx_4855
	word64 rdx_4856
	byte S_4857
	word16 ax_4858
	byte al_4859
	word32 r8d_4860
	word32 r14d_4862
	word32 r13d_4863
	byte CZ_4865
	bcuiposr0 None_4866
	word32 r9d_4867
	byte cl_4869
	byte SO_4870
	word32 ebp_4871
	byte r13b_4872
	word32 r15d_4873
	byte r14b_4874
	byte sil_4881
	byte r12b_4882
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_4800,ax_4799,C_4832,cl_4810,CZ_4806,eax_4789,ebp_4812,ebx_4783,ecx_4794,edi_4784,edx_4796,esi_4830,fs_4788,None_4807,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_4816,r11_4817,r12_4779,r12b_4823,r12d_4805,r13_4778,r13b_4813,r13d_4804,r14_4777,r14b_4815,r14d_4803,r15_4776,r15d_4814,r8_4824,r8d_4825,r9_4809,r9d_4808,rax_4787,rbp_4780,rbx_4782,rcx_4826,rdi_4833,rdx_4827,rsi_4828,rsp_4775,S_4798,SCZO_4785,sil_4829,SO_4811,SZO_4831,xmm0_4818,xmm1_4819,xmm2_4820,xmm3_4821,Z_4793
		defs: al_4859,ax_4858,C_4850,cl_4869,CZ_4865,eax_4848,ebp_4871,ebx_4842,ecx_4853,edi_4843,edx_4855,esi_4851,fs_4847,None_4866,r10_4875,r11_4876,r12_4838,r12b_4882,r12d_4864,r13_4837,r13b_4872,r13d_4863,r14_4836,r14b_4874,r14d_4862,r15_4835,r15d_4873,r8_4861,r8d_4860,r9_4868,r9d_4867,rax_4846,rbp_4839,rbx_4841,rcx_4854,rdi_4845,rdx_4856,rsi_4840,rsp_4834,S_4857,SCZO_4844,sil_4881,SO_4870,SZO_4849,xmm0_4877,xmm1_4878,xmm2_4879,xmm3_4880,Z_4852
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033E8:
	word64 rsi_1626
	Mem1602[0x000000000061B1B8:word64] = 0x0000000000000064
	word64 rax_1607 = fn0000000000410C40(rsi_1035, 0x0000000000004B00)
	Mem1608[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem1609[0x000000000061B1C0:word64] = rax_1607
	fn0000000000404DD0()
	word32 r13d_1604 = (word32) (uint64) ((word32) (uint64) ebx_1018 - r12d_1386)
	branch r13d_1604 <= 0x00000000 l00000000004042A0
// DataOut: fs r10 r11 r12d r13d r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042A0:
	branch Mem1609[0x000000000061B10D:byte] == 0x00 l00000000004043A5
// DataOut: fs r10 r11 r13d r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043A5:
	rsi_1626 = fn0000000000404D20(0x00000001, 0x0000000000000000, 0x0000000000413990, r11_1021)
// DataOut: fs r10 r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042AD:
	word32 ebx_4746
	word64 rbp_4748
	word64 r10_4752
	word64 r12_4754
	word64 r13_4755
	word64 r14_4756
	fn0000000000407EA0(0x0000000000416919, 0x00000001, 0x0000000000000003, 0x0000000000413990, r8_1032, r10_1020, r11_1021, r14_1024, r15_1025, fs_1014, out ebx_4746, out rsp_1026, out rbp_4748, out rsi_1626, out r8_1032, out r9_1031, out r10_4752, out r11_1021, out r12_4754, out r13_4755, out r14_4756, out r15_1025)
// DataOut: fs r10 r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403423:
	word64 rbp_4700 = rbp_1019 + (int64) r12d_1386 * 0x0000000000000008
// DataOut: fs r10 r11 r12d r14 r15 r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040342B:
	word32 ebx_4722
	word64 r12_4730
	word64 r13_4731
	fn0000000000407EA0(0x0000000000416919, 0x00000001, 0x0000000000000000, Mem1609[rbp_4700:word64], r8_1032, r10_1020, r11_1021, r14_1024, r15_1025, fs_1014, out ebx_4722, out rsp_1026, out rbp_4700, out rsi_1626, out r8_1032, out r9_1031, out r10_1020, out r11_1021, out r12_4730, out r13_4731, out r14_1024, out r15_1025)
	r12d_1386 = (word32) (uint64) (r12d_1386 + 0x00000001) (alias)
	branch ebx_4722 > r12d_1386 l000000000040342B
// DataOut: fs r10 r11 r12d r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040344D:
	word64 r13_1665
	branch Mem1609[0x000000000061B1B0:word64] != 0x0000000000000000 l0000000000404200
// DataOut: fs r10 r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404200:
	word64 r12_4548
	word64 r14_4550
	fn0000000000404E80(rsi_1626, r11_1021, r15_1025, out r8_1032, out r12_4548, out r13_1665, out r14_4550, out r15_1025)
	branch Mem1609[0x000000000061B10D:byte] == 0x00 l0000000000404454
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404454:
	fn0000000000405090(0x01, 0x0000000000000000, r11_1021)
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404212:
	branch Mem1609[0x000000000061B1B0:word64] == 0x0000000000000000 l000000000040345B
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404220:
	fn00000000004079F0(out rsp_1026)
	branch Mem1609[0x000000000061B190:word64] == 0x0000000000000000 l00000000004044B5
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044B5:
	Mem4690[rsp_1026 + 0x0000000000000018:word64] = 0x0000000000000000
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404233:
	word64 rdi_4573 = Mem1609[0x000000000061A610:word64]
	word64 rax_4575 = Mem1609[rdi_4573 + 0x0000000000000028:word64]
	branch rax_4575 >=u Mem1609[rdi_4573 + 0x0000000000000030:word64] l00000000004044A3
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044A3:
	word64 r14_4643
	word64 r12_4645
	word64 rbp_4646
	word64 rsi_4647
	word64 rbx_4648
	word32 ebx_4649
	word32 edi_4650
	byte SCZO_4651
	word64 rdi_4652
	word64 rax_4653
	selector fs_4654
	word32 eax_4655
	byte SZO_4656
	byte C_4657
	word32 esi_4658
	byte Z_4659
	word32 ecx_4660
	word64 rcx_4661
	word32 edx_4662
	word64 rdx_4663
	byte S_4664
	word16 ax_4665
	byte al_4666
	word32 r8d_4667
	word32 r14d_4669
	word32 r13d_4670
	word32 r12d_4671
	byte CZ_4672
	bcuiposr0 None_4673
	word32 r9d_4674
	byte cl_4676
	byte SO_4677
	word32 ebp_4678
	byte r13b_4679
	word32 r15d_4680
	byte r14b_4681
	word64 r10_4682
	byte sil_4688
	byte r12b_4689
	call __overflow (retsize: 8; depth: 8)
		uses: al_4579,ax_4578,C_4581,cl_1566,CZ_1586,eax_4577,ebp_1613,ebx_1616,ecx_1573,edi_4574,edx_1615,esi_4640,fs_1574,None_1568,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1618,r11_1619,r12_4548,r12b_1612,r12d_1614,r13_4549,r13b_1605,r13d_1604,r14_4550,r14b_1563,r14d_1570,r15_4551,r15d_1576,r8_4547,r8d_1571,r9_1629,r9d_1567,rax_4575,rbp_1617,rbx_1575,rcx_1625,rdi_4573,rdx_1631,rsi_4638,rsp_4565,S_1572,SCZO_4580,sil_4639,SO_1565,SZO_4561,xmm0_1562,xmm1_1561,xmm2_1560,xmm3_1559,Z_4572
		defs: al_4666,ax_4665,C_4657,cl_4676,CZ_4672,eax_4655,ebp_4678,ebx_4649,ecx_4660,edi_4650,edx_4662,esi_4658,fs_4654,None_4673,r10_4682,r11_4683,r12_4645,r12b_4689,r12d_4671,r13_4644,r13b_4679,r13d_4670,r14_4643,r14b_4681,r14d_4669,r15_4642,r15d_4680,r8_4668,r8d_4667,r9_4675,r9d_4674,rax_4653,rbp_4646,rbx_4648,rcx_4661,rdi_4652,rdx_4663,rsi_4647,rsp_4641,S_4664,SCZO_4651,sil_4688,SO_4677,SZO_4656,xmm0_4684,xmm1_4685,xmm2_4686,xmm3_4687,Z_4659
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404248:
	Mem4636[rdi_4573 + 0x0000000000000028:word64] = rax_4575 + 0x0000000000000001
	Mem4637[rax_4575:byte] = 0x0A
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404253:
	word64 rax_4626 = Mem1609[0x000000000061B190:word64]
	Mem4632[0x000000000061B018:word64] = Mem1609[0x000000000061B018:word64] + 0x0000000000000001
	Mem4634[rsp_1026 + 0x0000000000000018:word64] = rax_4626
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040345B:
	word64 rax_4530 = Mem1609[0x000000000061B190:word64]
	Mem4540[rsp_1026 + 0x0000000000000018:word64] = rax_4530
	r13_1665 = (uint64) (r13d_1604 - 0x00000001)
	branch (word32) r13_1665 > 0x00000000 l00000000004034D2
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040346D:
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404385:
	branch rax_4530 == 0x0000000000000000 l00000000004034D2
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040438E:
	branch Mem4540[rax_4530 + 0x0000000000000018:word64] != 0x0000000000000000 l00000000004034D2
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404399:
	Mem4546[0x000000000061B0D0:byte] = 0x00
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034D2:
	branch Mem1609[rsp_1026 + 0x0000000000000018:word64] == 0x0000000000000000 l00000000004040B5
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040B5:
	branch Mem1609[0x000000000061B129:byte] == 0x00 l0000000000404152
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040C2:
	branch Mem1609[0x000000000061B128:byte] == 0x00 l00000000004040ED
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040CB:
	branch Mem1609[0x000000000061A3E0:word64] == 0x0000000000000002 l00000000004042CB
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042CB:
	branch memcmp(Mem1609[0x000000000061A3E8:word64], 0x00000000004139E1, 0x0000000000000002) != 0x00000000 l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042E9:
	branch Mem1609[0x000000000061A3F0:word64] != 0x0000000000000001 l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042F7:
	branch Mem1609[Mem1609[0x000000000061A3F8:word64]:byte] != 0x6D l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404307:
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040D9:
	word64 rdi_4495
	fn0000000000406440(0x000000000061A3E0, out rdi_4495)
	word64 rdi_4498
	fn0000000000406440(0x000000000061A3F0, out rdi_4498)
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040ED:
	word64 rsp_4196
	word64 r15_4197
	word64 r14_4198
	word64 r13_4199
	word64 r12_4200
	word64 rbp_4201
	word64 rsi_4202
	word64 rbx_4203
	word32 ebx_4204
	word32 edi_4205
	byte SCZO_4206
	word64 rdi_4207
	word64 rax_4208
	selector fs_4209
	word32 eax_4210
	byte SZO_4211
	byte C_4212
	word32 esi_4213
	byte Z_4214
	word32 ecx_4215
	word64 rcx_4216
	word32 edx_4217
	word64 rdx_4218
	byte S_4219
	word16 ax_4220
	byte al_4221
	word32 r8d_4222
	word64 r8_4223
	word32 r14d_4224
	word32 r13d_4225
	word32 r12d_4226
	byte CZ_4227
	bcuiposr0 None_4228
	word32 r9d_4229
	word64 r9_4230
	byte cl_4231
	byte SO_4232
	word32 ebp_4233
	byte r13b_4234
	word32 r15d_4235
	byte r14b_4236
	word64 r10_4237
	word64 r11_4238
	word128 xmm0_4239
	word128 xmm1_4240
	word128 xmm2_4241
	word128 xmm3_4242
	byte sil_4243
	byte r12b_4244
	call fflush_unlocked (retsize: 8; depth: 8)
		uses: al_1682,ax_1673,C_1685,cl_1647,CZ_1669,eax_1672,ebp_1645,ebx_4195,ecx_1655,edi_1670,edx_1659,esi_1677,fs_1656,None_1649,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1662,r11_1663,r12_1664,r12b_1638,r12d_1650,r13_1665,r13b_1644,r13d_1651,r14_1666,r14b_1643,r14d_1652,r15_1667,r15d_1658,r8_1679,r8d_1653,r9_1678,r9d_1648,rax_1681,rbp_1661,rbx_4194,rcx_1674,rdi_4193,rdx_1680,rsi_1675,rsp_1668,S_1654,SCZO_4190,sil_1676,SO_1646,SZO_1684,xmm0_1642,xmm1_1641,xmm2_1640,xmm3_1639,Z_4191
		defs: al_4221,ax_4220,C_4212,cl_4231,CZ_4227,eax_4210,ebp_4233,ebx_4204,ecx_4215,edi_4205,edx_4217,esi_4213,fs_4209,None_4228,r10_4237,r11_4238,r12_4200,r12b_4244,r12d_4226,r13_4199,r13b_4234,r13d_4225,r14_4198,r14b_4236,r14d_4224,r15_4197,r15d_4235,r8_4223,r8d_4222,r9_4230,r9d_4229,rax_4208,rbp_4201,rbx_4203,rcx_4216,rdi_4207,rdx_4218,rsi_4202,rsp_4196,S_4219,SCZO_4206,sil_4243,SO_4232,SZO_4211,xmm0_4239,xmm1_4240,xmm2_4241,xmm3_4242,Z_4214
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040410D:
	word64 rsp_4251
	word64 r14_4253
	word64 r12_4255
	word64 rbp_4256
	word64 rsi_4257
	word64 rbx_4258
	word32 ebx_4259
	word32 edi_4260
	byte SCZO_4261
	word64 rdi_4262
	word64 rax_4263
	selector fs_4264
	word32 eax_4265
	byte SZO_4266
	byte C_4267
	word32 esi_4268
	byte Z_4269
	word32 ecx_4270
	word64 rcx_4271
	word32 edx_4272
	word64 rdx_4273
	byte S_4274
	word16 ax_4275
	byte al_4276
	word32 r8d_4277
	word64 r8_4278
	word32 r14d_4279
	word32 r13d_4280
	word32 r12d_4281
	byte CZ_4282
	bcuiposr0 None_4283
	word32 r9d_4284
	word64 r9_4285
	byte cl_4286
	byte SO_4287
	word32 ebp_4288
	byte r13b_4289
	word32 r15d_4290
	byte r14b_4291
	word64 r10_4292
	word64 r11_4293
	word128 xmm0_4294
	word128 xmm1_4295
	word128 xmm2_4296
	word128 xmm3_4297
	byte sil_4298
	byte r12b_4299
	call sigismember (retsize: 8; depth: 8)
		uses: al_4221,ax_4220,C_4212,cl_4231,CZ_4227,eax_4210,ebp_4248,ebx_4204,ecx_4215,edi_4205,edx_4217,esi_4213,fs_4209,None_4228,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_4237,r11_4238,r12_4200,r12b_4244,r12d_4226,r13_4199,r13b_4234,r13d_4225,r14_4198,r14b_4236,r14d_4224,r15_4197,r15d_4235,r8_4223,r8d_4222,r9_4230,r9d_4229,rax_4208,rbp_4247,rbx_4245,rcx_4216,rdi_4249,rdx_4218,rsi_4250,rsp_4196,S_4219,SCZO_4206,sil_4243,SO_4232,SZO_4211,xmm0_4239,xmm1_4240,xmm2_4241,xmm3_4242,Z_4214
		defs: al_4276,ax_4275,C_4267,cl_4286,CZ_4282,eax_4265,ebp_4288,ebx_4259,ecx_4270,edi_4260,edx_4272,esi_4268,fs_4264,None_4283,r10_4292,r11_4293,r12_4255,r12b_4299,r12d_4281,r13_4254,r13b_4289,r13d_4280,r14_4253,r14b_4291,r14d_4279,r15_4252,r15d_4290,r8_4278,r8d_4277,r9_4285,r9d_4284,rax_4263,rbp_4256,rbx_4258,rcx_4271,rdi_4262,rdx_4273,rsi_4257,rsp_4251,S_4274,SCZO_4261,sil_4298,SO_4287,SZO_4266,xmm0_4294,xmm1_4295,xmm2_4296,xmm3_4297,Z_4269
	branch eax_4265 == 0x00000000 l0000000000404100
// DataOut: eax ebp r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040411F:
	signal((uint64) ebp_4288, 0x0000000000000000)
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404100:
	branch rbx_4258 == 0xFFFFFFFFFFBED314 l000000000040412A
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040412A:
	word64 rbx_4316 = (uint64) Mem1609[0x000000000061B034:word32]
	word32 ebx_4317 = (word32) rbx_4316
	branch ebx_4317 == 0x00000000 l0000000000404143
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404134:
	word64 rsp_4420
	word64 r14_4422
	word64 r12_4424
	word64 rbp_4425
	word64 rsi_4426
	word64 rbx_4427
	word32 ebx_4428
	word32 edi_4429
	byte SCZO_4430
	word64 rdi_4431
	word64 rax_4432
	selector fs_4433
	word32 eax_4434
	byte SZO_4435
	byte C_4436
	word32 esi_4437
	byte Z_4438
	word32 ecx_4439
	word64 rcx_4440
	word32 edx_4441
	word64 rdx_4442
	byte S_4443
	word16 ax_4444
	byte al_4445
	word32 r8d_4446
	word64 r8_4447
	word32 r14d_4448
	word32 r13d_4449
	word32 r12d_4450
	byte CZ_4451
	bcuiposr0 None_4452
	word32 r9d_4453
	word64 r9_4454
	byte cl_4455
	byte SO_4456
	word32 ebp_4457
	byte r13b_4458
	word32 r15d_4459
	byte r14b_4460
	word64 r10_4461
	word64 r11_4462
	word128 xmm0_4463
	word128 xmm1_4464
	word128 xmm2_4465
	word128 xmm3_4466
	byte sil_4467
	byte r12b_4468
	call raise (retsize: 8; depth: 8)
		uses: al_4308,ax_4305,C_4320,cl_4286,CZ_4282,eax_4304,ebp_4288,ebx_4317,ecx_4270,edi_4260,edx_4272,esi_4268,fs_4264,None_4283,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_4292,r11_4293,r12_4255,r12b_4299,r12d_4281,r13_4254,r13b_4289,r13d_4280,r14_4253,r14b_4291,r14d_4279,r15_4252,r15d_4290,r8_4278,r8d_4277,r9_4285,r9d_4284,rax_4307,rbp_4256,rbx_4316,rcx_4271,rdi_4419,rdx_4273,rsi_4306,rsp_4251,S_4274,SCZO_4314,sil_4298,SO_4287,SZO_4318,xmm0_4294,xmm1_4295,xmm2_4296,xmm3_4297,Z_4319
		defs: al_4445,ax_4444,C_4436,cl_4455,CZ_4451,eax_4434,ebp_4457,ebx_4428,ecx_4439,edi_4429,edx_4441,esi_4437,fs_4433,None_4452,r10_4461,r11_4462,r12_4424,r12b_4468,r12d_4450,r13_4423,r13b_4458,r13d_4449,r14_4422,r14b_4460,r14d_4448,r15_4421,r15d_4459,r8_4447,r8d_4446,r9_4454,r9d_4453,rax_4432,rbp_4425,rbx_4427,rcx_4440,rdi_4431,rdx_4442,rsi_4426,rsp_4420,S_4443,SCZO_4430,sil_4467,SO_4456,SZO_4435,xmm0_4463,xmm1_4464,xmm2_4465,xmm3_4466,Z_4438
	branch (word32) (uint64) (ebx_4428 - 0x00000001) != 0x00000000 l0000000000404134
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404143:
	word64 rdi_4365 = (uint64) Mem1609[0x000000000061B038:word32]
	word32 edi_4366 = (word32) rdi_4365
	branch edi_4366 == 0x00000000 l0000000000404152
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040414D:
	word64 rsp_4370
	word64 r14_4372
	word64 r12_4374
	word64 rbp_4375
	word64 rsi_4376
	word64 rbx_4377
	word32 ebx_4378
	word32 edi_4379
	byte SCZO_4380
	word64 rdi_4381
	word64 rax_4382
	selector fs_4383
	word32 eax_4384
	byte SZO_4385
	byte C_4386
	word32 esi_4387
	byte Z_4388
	word32 ecx_4389
	word64 rcx_4390
	word32 edx_4391
	word64 rdx_4392
	byte S_4393
	word16 ax_4394
	byte al_4395
	word32 r8d_4396
	word64 r8_4397
	word32 r14d_4398
	word32 r13d_4399
	word32 r12d_4400
	byte CZ_4401
	bcuiposr0 None_4402
	word32 r9d_4403
	word64 r9_4404
	byte cl_4405
	byte SO_4406
	word32 ebp_4407
	byte r13b_4408
	word32 r15d_4409
	byte r14b_4410
	word64 r10_4411
	word64 r11_4412
	word128 xmm0_4413
	word128 xmm1_4414
	word128 xmm2_4415
	word128 xmm3_4416
	byte sil_4417
	byte r12b_4418
	call raise (retsize: 8; depth: 8)
		uses: al_4364,ax_4354,C_4369,cl_4330,CZ_4352,eax_4353,ebp_4328,ebx_4343,ecx_4338,edi_4366,edx_4342,esi_4359,fs_4339,None_4332,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_4345,r11_4346,r12_4347,r12b_4321,r12d_4333,r13_4348,r13b_4327,r13d_4334,r14_4349,r14b_4326,r14d_4335,r15_4350,r15d_4341,r8_4361,r8d_4336,r9_4360,r9d_4331,rax_4363,rbp_4344,rbx_4340,rcx_4355,rdi_4365,rdx_4362,rsi_4357,rsp_4351,S_4337,SCZO_4356,sil_4358,SO_4329,SZO_4367,xmm0_4325,xmm1_4324,xmm2_4323,xmm3_4322,Z_4368
		defs: al_4395,ax_4394,C_4386,cl_4405,CZ_4401,eax_4384,ebp_4407,ebx_4378,ecx_4389,edi_4379,edx_4391,esi_4387,fs_4383,None_4402,r10_4411,r11_4412,r12_4374,r12b_4418,r12d_4400,r13_4373,r13b_4408,r13d_4399,r14_4372,r14b_4410,r14d_4398,r15_4371,r15d_4409,r8_4397,r8d_4396,r9_4404,r9d_4403,rax_4382,rbp_4375,rbx_4377,rcx_4390,rdi_4381,rdx_4392,rsi_4376,rsp_4370,S_4393,SCZO_4380,sil_4417,SO_4406,SZO_4385,xmm0_4413,xmm1_4414,xmm2_4415,xmm3_4416,Z_4388
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404152:
	branch Mem1609[0x000000000061B130:byte] != 0x00 l000000000040430C
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040430C:
	fn0000000000405630(0x000000000061AFC0, 0x00000000004139E4)
	fn0000000000405630(0x000000000061AF60, 0x00000000004139EE)
	fn000000000040E630(Mem1609[0x000000000061B0E8:word64])
	__printf_chk(0x0000000000000001, 0x0000000000415D40)
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040415F:
	word64 rbx_4156 = Mem1609[0x000000000061B1C8:word64]
	branch rbx_4156 == 0x0000000000000000 l00000000004041F5
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040416F:
	branch fn000000000040AFB0(rbx_4156) == 0x0000000000000000 l00000000004041ED
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041ED:
	fn000000000040B640(rbx_4156, r13_1665, r15_1025)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041F5:
	exit((uint64) Mem1609[0x000000000061B030:word32])
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040417C:
	__assert_fail(0x0000000000415D68, 0x0000000000413736, 0x00000000000005DC, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034DE:
	word64 rcx_1688 = Mem1609[rsp_1026 + 0x0000000000000018:word64]
	Mem1692[0x000000000061B190:word64] = Mem1609[rcx_1688 + 0x0000000000000018:word64]
	branch Mem1609[0x000000000061B1C8:word64] == 0x0000000000000000 l0000000000403FB5
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FB5:
// DataOut: fs r10 r11 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034FC:
	word64 r14_3943 = Mem1692[r9_1031:word64]
	branch r14_3943 == 0x0000000000000000 l0000000000403FC2
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FC2:
	word64 rax_3949 = Mem1692[0x000000000061AF18:word64]
	word32 edx_3955 = (word32) (rax_3949 - Mem1692[0x000000000061AF10:word64])
	branch edx_3955 <=u 0x0000000F l00000000004044C3
// DataOut: fs r11 r13 r15 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044C3:
	__assert_fail(0x0000000000415C58, 0x0000000000413736, 0x00000000000003D5, 0x0000000000412C38)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FDC:
	word64 rdx_3960 = Mem1692[0x000000000061AF20:word64] - rax_3949
	branch rdx_3960 >= 0xFFFFFFFFFFFFFFF0 l0000000000404002
// DataOut: fs r11 r13 r15 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FEC:
	word64 r14_4039
	word64 r12_4041
	word64 rbp_4042
	word64 rsi_4043
	word64 rbx_4044
	word32 ebx_4045
	word32 edi_4046
	byte SCZO_4047
	word64 rdi_4048
	word64 rax_4049
	selector fs_4050
	word32 eax_4051
	byte SZO_4052
	byte C_4053
	word32 esi_4054
	byte Z_4055
	word32 ecx_4056
	word64 rcx_4057
	word32 edx_4058
	word64 rdx_4059
	byte S_4060
	word16 ax_4061
	byte al_4062
	word32 r8d_4063
	word32 r14d_4065
	word32 r13d_4066
	word32 r12d_4067
	byte CZ_4068
	bcuiposr0 None_4069
	word32 r9d_4070
	word64 r9_4071
	byte cl_4072
	byte SO_4073
	word32 ebp_4074
	byte r13b_4075
	word32 r15d_4076
	byte r14b_4077
	word64 r10_4078
	byte sil_4084
	byte r12b_4085
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3952,ax_3951,C_3948,cl_1647,CZ_3958,eax_3950,ebp_1645,ebx_1660,ecx_1655,edi_1670,edx_3955,esi_1677,fs_1656,None_1649,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1662,r11_1663,r12_1664,r12b_1638,r12d_1650,r13_1665,r13b_1644,r13d_1651,r14_3943,r14b_3945,r14d_3944,r15_1667,r15d_1658,r8_1679,r8d_1653,r9_1678,r9d_1648,rax_3949,rbp_1661,rbx_1657,rcx_1688,rdi_4036,rdx_3960,rsi_4035,rsp_1668,S_1654,SCZO_3962,sil_1676,SO_3963,SZO_3946,xmm0_1642,xmm1_1641,xmm2_1640,xmm3_1639,Z_3947
		defs: al_4062,ax_4061,C_4053,cl_4072,CZ_4068,eax_4051,ebp_4074,ebx_4045,ecx_4056,edi_4046,edx_4058,esi_4054,fs_4050,None_4069,r10_4078,r11_4079,r12_4041,r12b_4085,r12d_4067,r13_4040,r13b_4075,r13d_4066,r14_4039,r14b_4077,r14d_4065,r15_4038,r15d_4076,r8_4064,r8d_4063,r9_4071,r9d_4070,rax_4049,rbp_4042,rbx_4044,rcx_4057,rdi_4048,rdx_4059,rsi_4043,rsp_4037,S_4060,SCZO_4047,sil_4084,SO_4073,SZO_4052,xmm0_4080,xmm1_4081,xmm2_4082,xmm3_4083,Z_4055
	rax_3949 = Mem1692[0x000000000061AF18:word64]
// DataOut: fs r11 r13 r15 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404002:
	word64 rsi_4001 = Mem1692[rsp_1026 + 0x0000000000000020:word64]
	word64 rdi_4004 = Mem1692[0x000000000061B1C8:word64]
	Mem4005[0x000000000061AF18:word64] = rax_3949 - 0x0000000000000010
	word64 rax_4007 = Mem4005[rax_3949 - 0x0000000000000008:word64]
	Mem4008[rsp_1026 + 0x0000000000000040:word64] = Mem4005[rax_3949 - 0x0000000000000010:word64]
	Mem4009[rsp_1026 + 0x0000000000000048:word64] = rax_4007
	word64 rsi_4010
	word64 r10_4013
	word64 rax_4018 = fn000000000040BB90(rax_4007, rsi_4001, rdi_4004, r8_1032, r11_1021, r15_1025, xmm0_1000, xmm1_1049, xmm2_1048, xmm3_1047, out rsi_4010, out r8_1032, out r9_1031, out r10_4013, out xmm0_1000, out xmm1_1049, out xmm2_1048, out xmm3_1047)
	branch rax_4018 == 0x0000000000000000 l0000000000404287
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404287:
	__assert_fail(0x0000000000413992, 0x0000000000413736, 0x000000000000059D, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404039:
	free(rax_4018)
	word64 rbx_4027 = Mem4009[rsp_1026 + 0x0000000000000018:word64]
	free(Mem4009[rbx_4027:word64])
	free(Mem4009[rbx_4027 + 0x0000000000000008:word64])
	free(rbx_4027)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403508:
	word32 ecx_1746 = (word32) Mem1692[Mem1692[rsp_1026 + 0x0000000000000018:word64] + 0x0000000000000010:byte]
	byte cl_1747 = (byte) ecx_1746
	Mem1750[rsp_1026 + 0x000000000000002F:byte] = cl_1747
	word64 rax_1751 = __errno_location()
	Mem1757[rax_1751:word32] = 0x00000000
	word64 r15_1762
	word64 r13_1764
	word64 rbp_1766
	word64 rsi_1767
	word32 ebx_1769
	word32 edi_1770
	byte SCZO_1771
	word64 rdi_1772
	word64 rax_1773
	word32 eax_1775
	byte SZO_1776
	byte C_1777
	word32 esi_1778
	byte Z_1779
	word32 ecx_1780
	word64 rcx_1781
	word32 edx_1782
	word64 rdx_1783
	byte S_1784
	word16 ax_1785
	byte al_1786
	word32 r8d_1787
	word64 r8_1788
	word32 r14d_1789
	word32 r13d_1790
	word32 r12d_1791
	byte CZ_1792
	bcuiposr0 None_1793
	word32 r9d_1794
	word64 r9_1795
	byte cl_1796
	byte SO_1797
	word32 ebp_1798
	byte r13b_1799
	word32 r15d_1800
	byte r14b_1801
	word64 r10_1802
	byte sil_1808
	byte r12b_1809
	word64 rbx_1768
	word64 r14_1763
	call opendir (retsize: 8; depth: 8)
		uses: al_1755,ax_1754,C_1685,cl_1747,CZ_1669,eax_1753,ebp_1645,ebx_1749,ecx_1746,edi_1670,edx_1659,esi_1677,fs_1656,None_1649,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1662,r11_1663,r12_1758,r12b_1760,r12d_1759,r13_1665,r13b_1644,r13d_1651,r14_1744,r14b_1643,r14d_1652,r15_1667,r15d_1658,r8_1679,r8d_1653,r9_1678,r9d_1648,rax_1751,rbp_1661,rbx_1748,rcx_1688,rdi_1756,rdx_1680,rsi_1675,rsp_1668,S_1654,SCZO_1689,sil_1676,SO_1646,SZO_1684,xmm0_1642,xmm1_1641,xmm2_1640,xmm3_1639,Z_1690
		defs: al_1786,ax_1785,C_1777,cl_1796,CZ_1792,eax_1775,ebp_1798,ebx_1769,ecx_1780,edi_1770,edx_1782,esi_1778,fs_1774,None_1793,r10_1802,r11_1803,r12_1765,r12b_1809,r12d_1791,r13_1764,r13b_1799,r13d_1790,r14_1763,r14b_1801,r14d_1789,r15_1762,r15d_1800,r8_1788,r8d_1787,r9_1795,r9d_1794,rax_1773,rbp_1766,rbx_1768,rcx_1781,rdi_1772,rdx_1783,rsi_1767,rsp_1761,S_1784,SCZO_1771,sil_1808,SO_1797,SZO_1776,xmm0_1804,xmm1_1805,xmm2_1806,xmm3_1807,Z_1779
	branch rax_1773 == 0x0000000000000000 l0000000000404195
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404195:
	dcgettext(0x0000000000000000, 0x0000000000413998, 0x0000000000000005)
	word64 rsi_3932
	word64 rdi_3933
	word64 r10_3936
	word32 r12d_3938
	word64 r14_3940
	fn0000000000405810((word32) Mem1757[rsp_1026 + 0x000000000000002F:byte], r11_1021, r15_1762, fs_1014, out rsi_3932, out rdi_3933, out r8_1032, out r9_1031, out r10_3936, out r11_1021, out r12d_3938, out r13_1665, out r14_3940, out r15_1025)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040353B:
	branch Mem1757[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004035FF
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403549:
	byte al_3441
	word64 r8_3438
	word64 rsi_3434
	word128 xmm0_3400
	word128 xmm1_3399
	word128 xmm2_3398
	word128 xmm3_3397
	word64 rsp_3342
	word64 r15_3343
	word64 r14_3344
	word64 r13_3345
	word64 r12_3346
	word64 rbp_3347
	word64 rsi_3348
	word64 rbx_3349
	word32 ebx_3350
	word32 edi_3351
	byte SCZO_3352
	word64 rdi_3353
	word64 rax_3354
	selector fs_3355
	word32 eax_3356
	byte SZO_3357
	byte C_3358
	word32 esi_3359
	byte Z_3360
	word32 ecx_3361
	word64 rcx_3362
	word32 edx_3363
	word64 rdx_3364
	byte S_3365
	word16 ax_3366
	byte al_3367
	word32 r8d_3368
	word64 r8_3369
	word32 r14d_3370
	word32 r13d_3371
	word32 r12d_3372
	byte CZ_3373
	bcuiposr0 None_3374
	word32 r9d_3375
	word64 r9_3376
	byte cl_3377
	byte SO_3378
	word32 ebp_3379
	byte r13b_3380
	word32 r15d_3381
	byte r14b_3382
	word64 r10_3383
	word64 r11_3384
	word128 xmm0_3385
	word128 xmm1_3386
	word128 xmm2_3387
	word128 xmm3_3388
	byte sil_3389
	byte r12b_3390
	call dirfd (retsize: 8; depth: 8)
		uses: al_1786,ax_1785,C_1812,cl_1796,CZ_1792,eax_1775,ebp_1798,ebx_1769,ecx_1780,edi_1770,edx_1782,esi_1778,fs_1774,None_1793,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1802,r11_1803,r12_1765,r12b_1809,r12d_1791,r13_1813,r13b_1815,r13d_1814,r14_1763,r14b_1801,r14d_1789,r15_1762,r15d_1800,r8_1788,r8d_1787,r9_1795,r9d_1794,rax_1773,rbp_1766,rbx_1768,rcx_1781,rdi_3341,rdx_1783,rsi_1767,rsp_1761,S_1784,SCZO_1869,sil_1808,SO_1797,SZO_1810,xmm0_1804,xmm1_1805,xmm2_1806,xmm3_1807,Z_1870
		defs: al_3367,ax_3366,C_3358,cl_3377,CZ_3373,eax_3356,ebp_3379,ebx_3350,ecx_3361,edi_3351,edx_3363,esi_3359,fs_3355,None_3374,r10_3383,r11_3384,r12_3346,r12b_3390,r12d_3372,r13_3345,r13b_3380,r13d_3371,r14_3344,r14b_3382,r14d_3370,r15_3343,r15d_3381,r8_3369,r8d_3368,r9_3376,r9d_3375,rax_3354,rbp_3347,rbx_3349,rcx_3362,rdi_3353,rdx_3364,rsi_3348,rsp_3342,S_3365,SCZO_3352,sil_3389,SO_3378,SZO_3357,xmm0_3385,xmm1_3386,xmm2_3387,xmm3_3388,Z_3360
	branch eax_3356 < 0x00000000 l0000000000403E95
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E95:
	word64 r13_3868
	word64 rbp_3870
	word32 edi_3874
	byte SCZO_3875
	word64 rdi_3876
	word64 rax_3877
	word32 eax_3879
	byte SZO_3880
	byte C_3881
	word32 esi_3882
	byte Z_3883
	word32 ecx_3884
	word64 rcx_3885
	word32 edx_3886
	word64 rdx_3887
	byte S_3888
	word16 ax_3889
	byte al_3890
	word32 r8d_3891
	word32 r14d_3893
	word32 r13d_3894
	word32 r12d_3895
	byte CZ_3896
	bcuiposr0 None_3897
	word32 r9d_3898
	word64 r9_3899
	byte cl_3900
	byte SO_3901
	word32 ebp_3902
	byte r13b_3903
	word32 r15d_3904
	byte r14b_3905
	word64 r10_3906
	byte sil_3912
	byte r12b_3913
	call __xstat (retsize: 8; depth: 8)
		uses: al_3367,ax_3366,C_3393,cl_3377,CZ_3373,eax_3356,ebp_3379,ebx_3350,ecx_3361,edi_3351,edx_3363,esi_3863,fs_3355,None_3374,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_3383,r11_3384,r12_3346,r12b_3390,r12d_3372,r13_3345,r13b_3380,r13d_3371,r14_3344,r14b_3382,r14d_3370,r15_3343,r15d_3381,r8_3369,r8d_3368,r9_3376,r9d_3375,rax_3354,rbp_3347,rbx_3349,rcx_3362,rdi_3864,rdx_3394,rsi_3861,rsp_3342,S_3392,SCZO_3352,sil_3862,SO_3378,SZO_3391,xmm0_3385,xmm1_3386,xmm2_3387,xmm3_3388,Z_3360
		defs: al_3890,ax_3889,C_3881,cl_3900,CZ_3896,eax_3879,ebp_3902,ebx_3873,ecx_3884,edi_3874,edx_3886,esi_3882,fs_3878,None_3897,r10_3906,r11_3907,r12_3869,r12b_3913,r12d_3895,r13_3868,r13b_3903,r13d_3894,r14_3867,r14b_3905,r14d_3893,r15_3866,r15d_3904,r8_3892,r8d_3891,r9_3899,r9d_3898,rax_3877,rbp_3870,rbx_3872,rcx_3885,rdi_3876,rdx_3887,rsi_3871,rsp_3865,S_3888,SCZO_3875,sil_3912,SO_3901,SZO_3880,xmm0_3908,xmm1_3909,xmm2_3910,xmm3_3911,Z_3883
	al_3441 = (byte) (uint64) (eax_3879 >>u 0x0000001F) (alias)
// DataOut: al ebx fs r11 r12 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040355E:
	word64 r13_3809
	word64 rbp_3811
	word32 edi_3815
	byte SCZO_3816
	word64 rdi_3817
	word64 rax_3818
	word32 eax_3820
	byte SZO_3821
	byte C_3822
	word32 esi_3823
	byte Z_3824
	word32 ecx_3825
	word64 rcx_3826
	word32 edx_3827
	word64 rdx_3828
	byte S_3829
	word16 ax_3830
	byte al_3831
	word32 r8d_3832
	word32 r14d_3834
	word32 r13d_3835
	word32 r12d_3836
	byte CZ_3837
	bcuiposr0 None_3838
	word32 r9d_3839
	word64 r9_3840
	byte cl_3841
	byte SO_3842
	word32 ebp_3843
	byte r13b_3844
	word32 r15d_3845
	byte r14b_3846
	word64 r10_3847
	byte sil_3853
	byte r12b_3854
	call __fxstat (retsize: 8; depth: 8)
		uses: al_3367,ax_3366,C_3393,cl_3377,CZ_3373,eax_3356,ebp_3379,ebx_3350,ecx_3361,edi_3351,edx_3363,esi_3804,fs_3355,None_3374,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_3383,r11_3384,r12_3346,r12b_3390,r12d_3372,r13_3345,r13b_3380,r13d_3371,r14_3344,r14b_3382,r14d_3370,r15_3343,r15d_3381,r8_3369,r8d_3368,r9_3376,r9d_3375,rax_3354,rbp_3347,rbx_3349,rcx_3362,rdi_3805,rdx_3394,rsi_3802,rsp_3342,S_3392,SCZO_3352,sil_3803,SO_3378,SZO_3391,xmm0_3385,xmm1_3386,xmm2_3387,xmm3_3388,Z_3360
		defs: al_3831,ax_3830,C_3822,cl_3841,CZ_3837,eax_3820,ebp_3843,ebx_3814,ecx_3825,edi_3815,edx_3827,esi_3823,fs_3819,None_3838,r10_3847,r11_3848,r12_3810,r12b_3854,r12d_3836,r13_3809,r13b_3844,r13d_3835,r14_3808,r14b_3846,r14d_3834,r15_3807,r15d_3845,r8_3833,r8d_3832,r9_3840,r9d_3839,rax_3818,rbp_3811,rbx_3813,rcx_3826,rdi_3817,rdx_3828,rsi_3812,rsp_3806,S_3829,SCZO_3816,sil_3853,SO_3842,SZO_3821,xmm0_3849,xmm1_3850,xmm2_3851,xmm3_3852,Z_3824
	al_3441 = (byte) (uint64) (eax_3820 >>u 0x0000001F) (alias)
// DataOut: al ebx fs r11 r12 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040356D:
	branch al_3441 != 0x00 l0000000000403478
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403478:
	word64 rax_3734 = dcgettext(0x0000000000000000, 0x0000000000415CE8, 0x0000000000000005)
	word32 edi_3735 = (word32) Mem1757[rsp_1026 + 0x000000000000002F:byte]
	word64 rsi_3741
	word64 rdi_3742
	word64 r8_3743
	word64 r9_3744
	word64 r10_3745
	word64 r11_3746
	word32 r12d_3747
	word64 r13_3748
	word64 r14_3749
	word64 r15_3750
	word32 eax_3751 = fn0000000000405810(edi_3735, r11_1021, r15_1025, fs_1014, out rsi_3741, out rdi_3742, out r8_3743, out r9_3744, out r10_3745, out r11_3746, out r12d_3747, out r13_3748, out r14_3749, out r15_3750)
	word64 r14_3755
	word64 r12_3757
	word64 rbp_3758
	word64 rsi_3759
	word64 rbx_3760
	word32 ebx_3761
	word32 edi_3762
	byte SCZO_3763
	word64 rdi_3764
	word64 rax_3765
	selector fs_3766
	word32 eax_3767
	byte SZO_3768
	byte C_3769
	word32 esi_3770
	byte Z_3771
	word32 ecx_3772
	word64 rcx_3773
	word32 edx_3774
	word64 rdx_3775
	byte S_3776
	word16 ax_3777
	byte al_3778
	word32 r8d_3779
	word32 r14d_3781
	word32 r13d_3782
	word32 r12d_3783
	byte CZ_3784
	bcuiposr0 None_3785
	word32 r9d_3786
	byte cl_3788
	byte SO_3789
	word32 ebp_3790
	byte r13b_3791
	word32 r15d_3792
	byte r14b_3793
	word64 r10_3794
	byte sil_3800
	byte r12b_3801
	call closedir (retsize: 8; depth: 8)
		uses: al_3441,ax_3431,C_3733,cl_3405,CZ_3427,eax_3751,ebp_3403,ebx_3418,ecx_3413,edi_3735,edx_3417,esi_3740,fs_3414,None_3407,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_3745,r11_3746,r12_3422,r12b_3396,r12d_3747,r13_3748,r13b_3402,r13d_3409,r14_3749,r14b_3401,r14d_3410,r15_3750,r15d_3416,r8_3743,r8d_3411,r9_3744,r9d_3406,rax_3734,rbp_3419,rbx_3415,rcx_3432,rdi_3752,rdx_3737,rsi_3741,rsp_3426,S_3412,SCZO_3433,sil_3739,SO_3404,SZO_3732,xmm0_3400,xmm1_3399,xmm2_3398,xmm3_3397,Z_3444
		defs: al_3778,ax_3777,C_3769,cl_3788,CZ_3784,eax_3767,ebp_3790,ebx_3761,ecx_3772,edi_3762,edx_3774,esi_3770,fs_3766,None_3785,r10_3794,r11_3795,r12_3757,r12b_3801,r12d_3783,r13_3756,r13b_3791,r13d_3782,r14_3755,r14b_3793,r14d_3781,r15_3754,r15d_3792,r8_3780,r8d_3779,r9_3787,r9d_3786,rax_3765,rbp_3758,rbx_3760,rcx_3773,rdi_3764,rdx_3775,rsi_3759,rsp_3753,S_3776,SCZO_3763,sil_3800,SO_3789,SZO_3768,xmm0_3796,xmm1_3797,xmm2_3798,xmm3_3799,Z_3771
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403575:
	word64 rdx_3447 = Mem1757[rsp_1026 + 0x0000000000000040:word64]
	Mem3449[rsp_1026 + 0x0000000000000010:word64] = Mem1757[rsp_1026 + 0x0000000000000048:word64]
	Mem3450[rsp_1026 + 0x0000000000000008:word64] = rdx_3447
	word64 rax_3451 = fn0000000000410C40(rsi_3434, 0x0000000000000010)
	word64 rcx_3452 = Mem3450[rsp_1026 + 0x0000000000000010:word64]
	word64 rdx_3453 = Mem3450[rsp_1026 + 0x0000000000000008:word64]
	word64 rdi_3457 = Mem3450[0x000000000061B1C8:word64]
	Mem3460[rax_3451:word64] = rcx_3452
	Mem3461[rax_3451 + 0x0000000000000008:word64] = rdx_3453
	word64 rsi_3462
	word64 r8_3463
	word64 rax_3470 = fn000000000040BB50(rax_3451, rax_3451, rdi_3457, r8_3438, r11_1021, xmm0_3400, xmm1_3399, xmm2_3398, xmm3_3397, out rsi_3462, out r8_3463, out r9_1031, out r10_1020, out xmm0_1000, out xmm1_1049, out xmm2_1048, out xmm3_1047)
	rbp_1019 = rax_3451
	eax_1478 = (word32) rax_3470 (alias)
	branch rax_3470 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043BB:
	fn0000000000410E50()
	r8_1032 = Mem714[0x000000000061A640:word64]
	fn00000000004112D0(0x0000000000413080, (word32) (uint64) Mem714[rsp_1026 + 0x0000000000000038:word32], (word32) (uint64) eax_1478)
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r15d:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r8b:<invalid> r8d:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043D9:
	word64 r13_1174
	word64 r12_1135 = r12_1118 + 0x0000000000000001
	word64 rax_1140 = strchr(r12_1135, 0x000000000000000A)
	r14_1024 = rax_1140
	branch rax_1140 == 0x0000000000000000 l000000000040444F
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040444F:
	r13_1174 = r12_1135
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043F2:
	r13_1174 = r8_1032 + 0x0000000000000001
	word64 rsi_1201 = 0x000000000000000A
	branch strchr(r13_1174, 0x000000000000000A) == 0x0000000000000000 l0000000000404438
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404408:
	word64 rbx_1260
	word64 rbp_1261
	word64 r8_1262
	word64 r9_1263
	word64 r10_1264
	word64 r11_1265
	word64 r12_1266
	word64 r13_1267
	word64 r14_1268
	word64 r15_1269
	fn000000000040EC10(r11_1021, r15_1025, fs_1014, out rbx_1260, out rbp_1261, out r8_1262, out r9_1263, out r10_1264, out r11_1265, out r12_1266, out r13_1267, out r14_1268, out r15_1269)
	dcgettext(0x0000000000000000, 0x0000000000413900, 0x0000000000000005)
	word64 rbx_1293
	word32 edi_1295
	byte SCZO_1296
	word64 rdi_1297
	word64 rax_1298
	word32 eax_1300
	byte SZO_1301
	byte C_1302
	word32 esi_1303
	byte Z_1304
	word32 ecx_1305
	word64 rcx_1306
	word32 edx_1307
	word64 rdx_1308
	byte S_1309
	word16 ax_1310
	byte al_1311
	word32 r8d_1312
	word32 r14d_1314
	word32 r13d_1315
	word32 r12d_1316
	byte CZ_1317
	bcuiposr0 None_1318
	word32 r9d_1319
	byte cl_1321
	byte SO_1322
	word32 ebp_1323
	byte r13b_1324
	word32 r15d_1325
	byte r14b_1326
	byte sil_1333
	byte r12b_1334
	call error (retsize: 8; depth: 8)
		uses: al_1134,ax_1126,C_1285,cl_1103,CZ_1122,eax_1125,ebp_1101,ebx_1114,ecx_1109,edi_1123,edx_1113,esi_1281,fs_1110,None_1105,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1264,r11_1265,r12_1266,r12b_1137,r12d_1136,r13_1267,r13b_1200,r13d_1199,r14_1268,r14b_1146,r14d_1145,r15_1272,r15d_1273,r8_1262,r8d_1107,r9_1263,r9d_1104,rax_1283,rbp_1261,rbx_1260,rcx_1277,rdi_1282,rdx_1278,rsi_1279,rsp_1121,S_1108,SCZO_1128,sil_1280,SO_1102,SZO_1284,xmm0_1099,xmm1_1098,xmm2_1097,xmm3_1096,Z_1207
		defs: al_1311,ax_1310,C_1302,cl_1321,CZ_1317,eax_1300,ebp_1323,ebx_1294,ecx_1305,edi_1295,edx_1307,esi_1303,fs_1299,None_1318,r10_1327,r11_1328,r12_1290,r12b_1334,r12d_1316,r13_1289,r13b_1324,r13d_1315,r14_1288,r14b_1326,r14d_1314,r15_1287,r15d_1325,r8_1313,r8d_1312,r9_1320,r9d_1319,rax_1298,rbp_1291,rbx_1293,rcx_1306,rdi_1297,rdx_1308,rsi_1292,rsp_1286,S_1309,SCZO_1296,sil_1333,SO_1322,SZO_1301,xmm0_1329,xmm1_1330,xmm2_1331,xmm3_1332,Z_1304
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404438:
	Mem1258[rsi_1201:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040443C:
	Mem1196[0x000000000061A3D0:word64] = r12_1135
	Mem1197[0x000000000061A3D8:word64] = r13_1174
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038A8:
	branch strstr(Mem714[0x000000000061A3D0:word64], 0x0000000000413766) == 0x0000000000000000 l0000000000404484
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404484:
	rsi_1035 = 0x0000000000413766
	branch strstr(Mem714[0x000000000061A3D8:word64], 0x0000000000413766) != 0x0000000000000000 l00000000004038C2
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040449E:
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038C2:
	Mem780[0x000000000061A748:word64] = 0x0000000000000005
// DataOut: ebx fs r10 r11 r15 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038CD:
	r14_1024 = Mem780[0x000000000061A748:word64]
	Mem828[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038EB:
	Mem837[rsp_1026 + 0x0000000000000040:word64] = r14_1024
	word64 r13_841
	word64 r12_842
	word64 rsi_844
	word64 rbx_845
	word32 edi_847
	byte SCZO_848
	word64 rdi_849
	word64 rax_850
	word32 eax_852
	byte SZO_853
	byte C_854
	word32 esi_855
	byte Z_856
	word32 ecx_857
	word64 rcx_858
	word32 edx_859
	word64 rdx_860
	byte S_861
	word16 ax_862
	byte al_863
	word32 r8d_864
	word64 r8_865
	word32 r14d_866
	word32 r13d_867
	word32 r12d_868
	byte CZ_869
	bcuiposr0 None_870
	word32 r9d_871
	word64 r9_872
	byte cl_873
	byte SO_874
	word32 ebp_875
	byte r13b_876
	word32 r15d_877
	byte r14b_878
	byte sil_885
	byte r12b_886
	call nl_langinfo (retsize: 8; depth: 8)
		uses: al_818,ax_807,C_821,cl_787,CZ_803,eax_806,ebp_785,ebx_797,ecx_792,edi_804,edx_796,esi_813,fs_793,None_789,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_799,r11_800,r12_829,r12b_831,r12d_832,r13_825,r13b_827,r13d_826,r14_833,r14b_824,r14d_823,r15_801,r15d_795,r8_815,r8d_790,r9_814,r9d_788,rax_817,rbp_798,rbx_794,rcx_808,rdi_836,rdx_816,rsi_811,rsp_834,S_791,SCZO_809,sil_812,SO_786,SZO_820,xmm0_784,xmm1_783,xmm2_782,xmm3_781,Z_810
		defs: al_863,ax_862,C_854,cl_873,CZ_869,eax_852,ebp_875,ebx_846,ecx_857,edi_847,edx_859,esi_855,fs_851,None_870,r10_879,r11_880,r12_842,r12b_886,r12d_868,r13_841,r13b_876,r13d_867,r14_840,r14b_878,r14d_866,r15_839,r15d_877,r8_865,r8d_864,r9_872,r9d_871,rax_850,rbp_843,rbx_845,rcx_858,rdi_849,rdx_860,rsi_844,rsp_838,S_861,SCZO_848,sil_885,SO_874,SZO_853,xmm0_881,xmm1_882,xmm2_883,xmm3_884,Z_856
	word64 rcx_887 = Mem837[rsp_1026 + 0x0000000000000020:word64]
	r9_1031 = 0x0000000000000000
	r8_1032 = 0x0000000000000000
	rsi_1035 = fn000000000040CDC0(rcx_887, 0x00000000000000A1, r13_841, rax_850, 0x00000000, 0x00000000)
	branch false l0000000000404356
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404356:
	Mem995[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040391F:
	word64 rax_964 = Mem837[rsp_1026 + 0x0000000000000040:word64]
	branch Mem837[0x000000000061A748:word64] <u rax_964 l0000000000403933
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040392B_1:
	rax_964 = Mem837[0x000000000061A748:word64]
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403933:
	Mem984[0x000000000061A748:word64] = rax_964
	branch (word32) (uint64) (r12d_868 + 0x00000001) != 0x0002001A l00000000004038EB
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040394E:
	branch rax_964 <u r14_1024 l00000000004038CD
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403957:
	branch rax_964 != 0x0000000000000000 l0000000000403301
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403960:
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404361:
	dcgettext(0x0000000000000000, 0x0000000000415C30, 0x0000000000000005)
	word64 r13_918
	word64 r12_919
	word64 rbx_922
	word32 edi_924
	byte SCZO_925
	word64 rdi_926
	word64 rax_927
	word32 eax_929
	byte SZO_930
	byte C_931
	word32 esi_932
	byte Z_933
	word32 ecx_934
	word64 rcx_935
	word32 edx_936
	word64 rdx_937
	byte S_938
	word16 ax_939
	byte al_940
	word32 r8d_941
	word32 r14d_943
	word32 r13d_944
	word32 r12d_945
	byte CZ_946
	bcuiposr0 None_947
	word32 r9d_948
	byte cl_950
	byte SO_951
	word32 ebp_952
	byte r13b_953
	word32 r15d_954
	byte r14b_955
	byte sil_962
	byte r12b_963
	call error (retsize: 8; depth: 8)
		uses: al_863,ax_862,C_914,cl_873,CZ_901,eax_852,ebp_875,ebx_846,ecx_857,edi_847,edx_859,esi_909,fs_851,None_870,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_879,r11_880,r12_842,r12b_886,r12d_868,r13_841,r13b_876,r13d_867,r14_840,r14b_878,r14d_866,r15_839,r15d_877,r8_890,r8d_891,r9_888,r9d_889,rax_912,rbp_843,rbx_845,rcx_887,rdi_911,rdx_910,rsi_907,rsp_838,S_861,SCZO_900,sil_908,SO_874,SZO_913,xmm0_881,xmm1_882,xmm2_883,xmm3_884,Z_856
		defs: al_940,ax_939,C_931,cl_950,CZ_946,eax_929,ebp_952,ebx_923,ecx_934,edi_924,edx_936,esi_932,fs_928,None_947,r10_956,r11_957,r12_919,r12b_963,r12d_945,r13_918,r13b_953,r13d_944,r14_917,r14b_955,r14d_943,r15_916,r15d_954,r8_942,r8d_941,r9_949,r9d_948,rax_927,rbp_920,rbx_922,rcx_935,rdi_926,rdx_937,rsi_921,rsp_915,S_938,SCZO_925,sil_962,SO_951,SZO_930,xmm0_958,xmm1_959,xmm2_960,xmm3_961,Z_933
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035BF:
	branch rax_3451 != rax_3470 l0000000000403EE2
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EE2:
	free(rax_3451)
	word64 rsp_3604
	word64 rbp_3605
	word64 r8_3606
	word64 r9_3607
	word64 r10_3608
	word64 r11_3609
	word64 r12_3610
	word64 r13_3611
	word64 r14_3612
	word64 r15_3613
	fn000000000040EAB0(r11_1021, r15_1025, fs_1014, out rsp_3604, out rbp_3605, out r8_3606, out r9_3607, out r10_3608, out r11_3609, out r12_3610, out r13_3611, out r14_3612, out r15_3613)
	dcgettext(0x0000000000000000, 0x0000000000415D10, 0x0000000000000005)
	word64 rsp_3629
	word64 r15_3630
	word64 r14_3631
	word64 r13_3632
	word64 r12_3633
	word64 rbp_3634
	word64 rsi_3635
	word64 rbx_3636
	word32 ebx_3637
	word32 edi_3638
	byte SCZO_3639
	word64 rdi_3640
	word64 rax_3641
	selector fs_3642
	word32 eax_3643
	byte SZO_3644
	byte C_3645
	word32 esi_3646
	byte Z_3647
	word32 ecx_3648
	word64 rcx_3649
	word32 edx_3650
	word64 rdx_3651
	byte S_3652
	word16 ax_3653
	byte al_3654
	word32 r8d_3655
	word64 r8_3656
	word32 r14d_3657
	word32 r13d_3658
	word32 r12d_3659
	byte CZ_3660
	bcuiposr0 None_3661
	word32 r9d_3662
	word64 r9_3663
	byte cl_3664
	byte SO_3665
	word32 ebp_3666
	byte r13b_3667
	word32 r15d_3668
	byte r14b_3669
	word64 r10_3670
	word64 r11_3671
	word128 xmm0_3672
	word128 xmm1_3673
	word128 xmm2_3674
	word128 xmm3_3675
	byte sil_3676
	byte r12b_3677
	call error (retsize: 8; depth: 8)
		uses: al_3474,ax_3473,C_3628,cl_3405,CZ_3427,eax_3472,ebp_3459,ebx_3418,ecx_3413,edi_3428,edx_3417,esi_3624,fs_3414,None_3407,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_3608,r11_3609,r12_3610,r12b_3396,r12d_3408,r13_3611,r13b_3402,r13d_3409,r14_3612,r14b_3401,r14d_3410,r15_3613,r15d_3416,r8_3606,r8d_3411,r9_3607,r9d_3406,rax_3626,rbp_3605,rbx_3616,rcx_3620,rdi_3625,rdx_3621,rsi_3622,rsp_3604,S_3412,SCZO_3478,sil_3623,SO_3404,SZO_3627,xmm0_3466,xmm1_3467,xmm2_3468,xmm3_3469,Z_3479
		defs: al_3654,ax_3653,C_3645,cl_3664,CZ_3660,eax_3643,ebp_3666,ebx_3637,ecx_3648,edi_3638,edx_3650,esi_3646,fs_3642,None_3661,r10_3670,r11_3671,r12_3633,r12b_3677,r12d_3659,r13_3632,r13b_3667,r13d_3658,r14_3631,r14b_3669,r14d_3657,r15_3630,r15d_3668,r8_3656,r8d_3655,r9_3663,r9d_3662,rax_3641,rbp_3634,rbx_3636,rcx_3649,rdi_3640,rdx_3651,rsi_3635,rsp_3629,S_3652,SCZO_3639,sil_3676,SO_3665,SZO_3644,xmm0_3672,xmm1_3673,xmm2_3674,xmm3_3675,Z_3647
	word64 r14_3681
	word64 r12_3683
	word64 rbp_3684
	word64 rsi_3685
	word64 rbx_3686
	word32 ebx_3687
	word32 edi_3688
	byte SCZO_3689
	word64 rdi_3690
	word64 rax_3691
	selector fs_3692
	word32 eax_3693
	byte SZO_3694
	byte C_3695
	word32 esi_3696
	byte Z_3697
	word32 ecx_3698
	word64 rcx_3699
	word32 edx_3700
	word64 rdx_3701
	byte S_3702
	word16 ax_3703
	byte al_3704
	word32 r8d_3705
	word32 r14d_3707
	word32 r13d_3708
	word32 r12d_3709
	byte CZ_3710
	bcuiposr0 None_3711
	word32 r9d_3712
	byte cl_3714
	byte SO_3715
	word32 ebp_3716
	byte r13b_3717
	word32 r15d_3718
	byte r14b_3719
	word64 r10_3720
	byte sil_3726
	byte r12b_3727
	call closedir (retsize: 8; depth: 8)
		uses: al_3654,ax_3653,C_3645,cl_3664,CZ_3660,eax_3643,ebp_3666,ebx_3637,ecx_3648,edi_3638,edx_3650,esi_3646,fs_3642,None_3661,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_3670,r11_3671,r12_3633,r12b_3677,r12d_3659,r13_3632,r13b_3667,r13d_3658,r14_3631,r14b_3669,r14d_3657,r15_3630,r15d_3668,r8_3656,r8d_3655,r9_3663,r9d_3662,rax_3641,rbp_3634,rbx_3636,rcx_3649,rdi_3678,rdx_3651,rsi_3635,rsp_3629,S_3652,SCZO_3639,sil_3676,SO_3665,SZO_3644,xmm0_3672,xmm1_3673,xmm2_3674,xmm3_3675,Z_3647
		defs: al_3704,ax_3703,C_3695,cl_3714,CZ_3710,eax_3693,ebp_3716,ebx_3687,ecx_3698,edi_3688,edx_3700,esi_3696,fs_3692,None_3711,r10_3720,r11_3721,r12_3683,r12b_3727,r12d_3709,r13_3682,r13b_3717,r13d_3708,r14_3681,r14b_3719,r14d_3707,r15_3680,r15d_3718,r8_3706,r8d_3705,r9_3713,r9d_3712,rax_3691,rbp_3684,rbx_3686,rcx_3699,rdi_3690,rdx_3701,rsi_3685,rsp_3679,S_3702,SCZO_3689,sil_3726,SO_3715,SZO_3694,xmm0_3722,xmm1_3723,xmm2_3724,xmm3_3725,Z_3697
	Mem3728[0x000000000061B030:word32] = 0x00000002
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035C8:
	word64 rax_3480 = Mem3461[0x000000000061AF18:word64]
	word64 rdx_3485 = Mem3461[0x000000000061AF20:word64] - rax_3480
	branch rdx_3485 <= 0x000000000000000F l0000000000404064
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404064:
	word64 r15_3549
	word64 r13_3551
	word64 rbp_3553
	word64 rsi_3554
	word32 ebx_3556
	word32 edi_3557
	byte SCZO_3558
	word64 rdi_3559
	word64 rax_3560
	word32 eax_3562
	byte SZO_3563
	byte C_3564
	word32 esi_3565
	byte Z_3566
	word32 ecx_3567
	word64 rcx_3568
	word32 edx_3569
	word64 rdx_3570
	byte S_3571
	word16 ax_3572
	byte al_3573
	word32 r8d_3574
	word64 r8_3575
	word32 r14d_3576
	word32 r13d_3577
	word32 r12d_3578
	byte CZ_3579
	bcuiposr0 None_3580
	word32 r9d_3581
	word64 r9_3582
	byte cl_3583
	byte SO_3584
	word32 ebp_3585
	byte r13b_3586
	word32 r15d_3587
	byte r14b_3588
	word64 r10_3589
	word128 xmm0_3591
	word128 xmm1_3592
	word128 xmm2_3593
	word128 xmm3_3594
	byte sil_3595
	byte r12b_3596
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3483,ax_3482,C_3477,cl_3405,CZ_3427,eax_3481,ebp_3459,ebx_3418,ecx_3413,edi_3428,edx_3417,esi_3546,fs_3414,None_3407,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_3465,r11_3421,r12_3422,r12b_3396,r12d_3408,r13_3423,r13b_3402,r13d_3409,r14_3424,r14b_3401,r14d_3410,r15_3425,r15d_3416,r8_3463,r8d_3411,r9_3464,r9d_3406,rax_3480,rbp_3458,rbx_3415,rcx_3452,rdi_3547,rdx_3485,rsi_3544,rsp_3426,S_3412,SCZO_3487,sil_3545,SO_3404,SZO_3488,xmm0_3466,xmm1_3467,xmm2_3468,xmm3_3469,Z_3479
		defs: al_3573,ax_3572,C_3564,cl_3583,CZ_3579,eax_3562,ebp_3585,ebx_3556,ecx_3567,edi_3557,edx_3569,esi_3565,fs_3561,None_3580,r10_3589,r11_3590,r12_3552,r12b_3596,r12d_3578,r13_3551,r13b_3586,r13d_3577,r14_3550,r14b_3588,r14d_3576,r15_3549,r15d_3587,r8_3575,r8d_3574,r9_3582,r9d_3581,rax_3560,rbp_3553,rbx_3555,rcx_3568,rdi_3559,rdx_3570,rsi_3554,rsp_3548,S_3571,SCZO_3558,sil_3595,SO_3584,SZO_3563,xmm0_3591,xmm1_3592,xmm2_3593,xmm3_3594,Z_3566
	rax_3480 = Mem3461[0x000000000061AF18:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035E3:
	Mem3539[0x000000000061AF18:word64] = rax_3480 + 0x0000000000000010
	Mem3541[rax_3480 + 0x0000000000000008:word64] = Mem3539[rsp_1026 + 0x0000000000000040:word64]
	Mem3543[rax_3480:word64] = Mem3541[rsp_1026 + 0x0000000000000048:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035FF:
	branch Mem1757[0x000000000061B10E:byte] != 0x00 l0000000000403615
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403608:
	branch Mem1757[0x000000000061B0D0:byte] == 0x00 l00000000004036D6
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403615:
	branch Mem1757[0x000000000061A3C0:byte] != 0x00 l0000000000403646
// DataOut: fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040361E:
	word64 rdi_3226 = Mem1757[0x000000000061A610:word64]
	word64 rax_3228 = Mem1757[rdi_3226 + 0x0000000000000028:word64]
	branch rax_3228 >=u Mem1757[rdi_3226 + 0x0000000000000030:word64] l00000000004045E4
// DataOut: fs r11 r14 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045E4:
	word64 rsp_3290
	word64 r15_3291
	word64 r13_3293
	word64 r12_3294
	word64 rbp_3295
	word64 rsi_3296
	word32 ebx_3298
	word32 edi_3299
	byte SCZO_3300
	word64 rdi_3301
	word64 rax_3302
	word32 eax_3304
	byte SZO_3305
	byte C_3306
	word32 esi_3307
	byte Z_3308
	word32 ecx_3309
	word64 rcx_3310
	word32 edx_3311
	word64 rdx_3312
	byte S_3313
	word16 ax_3314
	byte al_3315
	word32 r8d_3316
	word64 r8_3317
	word32 r14d_3318
	word32 r13d_3319
	word32 r12d_3320
	byte CZ_3321
	bcuiposr0 None_3322
	word32 r9d_3323
	word64 r9_3324
	byte cl_3325
	byte SO_3326
	word32 ebp_3327
	byte r13b_3328
	word32 r15d_3329
	byte r14b_3330
	word64 r10_3331
	word128 xmm0_3333
	word128 xmm1_3334
	word128 xmm2_3335
	word128 xmm3_3336
	byte sil_3337
	byte r12b_3338
	call __overflow (retsize: 8; depth: 8)
		uses: al_3232,ax_3231,C_3234,cl_1880,CZ_1902,eax_3230,ebp_1878,ebx_1893,ecx_1888,edi_3227,edx_1892,esi_1910,fs_1889,None_1882,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1895,r11_1896,r12_1897,r12b_1871,r12d_1883,r13_1898,r13b_1877,r13d_1884,r14_1899,r14b_1876,r14d_1885,r15_1900,r15d_1891,r8_1912,r8d_1886,r9_1911,r9d_1881,rax_3228,rbp_1894,rbx_1890,rcx_1907,rdi_3226,rdx_1913,rsi_3289,rsp_1901,S_1887,SCZO_3233,sil_1909,SO_1879,SZO_1917,xmm0_1875,xmm1_1874,xmm2_1873,xmm3_1872,Z_2753
		defs: al_3315,ax_3314,C_3306,cl_3325,CZ_3321,eax_3304,ebp_3327,ebx_3298,ecx_3309,edi_3299,edx_3311,esi_3307,fs_3303,None_3322,r10_3331,r11_3332,r12_3294,r12b_3338,r12d_3320,r13_3293,r13b_3328,r13d_3319,r14_3292,r14b_3330,r14d_3318,r15_3291,r15d_3329,r8_3317,r8d_3316,r9_3324,r9d_3323,rax_3302,rbp_3295,rbx_3297,rcx_3310,rdi_3301,rdx_3312,rsi_3296,rsp_3290,S_3313,SCZO_3300,sil_3337,SO_3326,SZO_3305,xmm0_3333,xmm1_3334,xmm2_3335,xmm3_3336,Z_3308
// DataOut: fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403633:
	Mem3287[rdi_3226 + 0x0000000000000028:word64] = rax_3228 + 0x0000000000000001
	Mem3288[rax_3228:byte] = 0x0A
// DataOut: fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040363E:
	Mem3284[0x000000000061B018:word64] = Mem1757[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403646:
	Mem2804[0x000000000061A3C0:byte] = 0x00
	branch Mem1757[0x000000000061B130:byte] != 0x00 l0000000000403F2E
// DataOut: fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F2E:
	word64 rsp_3056
	word64 r15_3057
	word64 r13_3059
	word64 r12_3060
	word64 rbp_3061
	word64 rsi_3062
	word32 ebx_3064
	word32 edi_3065
	byte SCZO_3066
	word64 rdi_3067
	word64 rax_3068
	word32 eax_3070
	byte SZO_3071
	byte C_3072
	word32 esi_3073
	byte Z_3074
	word32 ecx_3075
	word64 rcx_3076
	word32 edx_3077
	word64 rdx_3078
	byte S_3079
	word16 ax_3080
	byte al_3081
	word32 r8d_3082
	word64 r8_3083
	word32 r14d_3084
	word32 r13d_3085
	word32 r12d_3086
	byte CZ_3087
	bcuiposr0 None_3088
	word32 r9d_3089
	word64 r9_3090
	byte cl_3091
	byte SO_3092
	word32 ebp_3093
	byte r13b_3094
	word32 r15d_3095
	byte r14b_3096
	word64 r10_3097
	word128 xmm0_3099
	word128 xmm1_3100
	word128 xmm2_3101
	word128 xmm3_3102
	byte sil_3103
	byte r12b_3104
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2798,ax_2789,C_2801,cl_2763,CZ_2785,eax_2788,ebp_2761,ebx_2776,ecx_2771,edi_2786,edx_2775,esi_2793,fs_2772,None_2765,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_2778,r11_2779,r12_2780,r12b_2754,r12d_2766,r13_2781,r13b_2760,r13d_2767,r14_2782,r14b_2759,r14d_2768,r15_2783,r15d_2774,r8_2795,r8d_2769,r9_2794,r9d_2764,rax_2797,rbp_2777,rbx_2773,rcx_3052,rdi_3055,rdx_3053,rsi_3054,rsp_2784,S_2770,SCZO_2802,sil_2792,SO_2762,SZO_2800,xmm0_2758,xmm1_2757,xmm2_2756,xmm3_2755,Z_2803
		defs: al_3081,ax_3080,C_3072,cl_3091,CZ_3087,eax_3070,ebp_3093,ebx_3064,ecx_3075,edi_3065,edx_3077,esi_3073,fs_3069,None_3088,r10_3097,r11_3098,r12_3060,r12b_3104,r12d_3086,r13_3059,r13b_3094,r13d_3085,r14_3058,r14b_3096,r14d_3084,r15_3057,r15d_3095,r8_3083,r8d_3082,r9_3090,r9d_3089,rax_3068,rbp_3061,rbx_3063,rcx_3076,rdi_3067,rdx_3078,rsi_3062,rsp_3056,S_3079,SCZO_3066,sil_3103,SO_3092,SZO_3071,xmm0_3099,xmm1_3100,xmm2_3101,xmm3_3102,Z_3074
	Mem3106[0x000000000061B018:word64] = Mem2804[0x000000000061B018:word64] + 0x0000000000000002
	branch Mem3106[0x000000000061B130:byte] == 0x00 l000000000040365A
// DataOut: fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F5E:
	word64 rax_3109 = Mem3106[0x000000000061AF78:word64]
	branch Mem3106[0x000000000061AF80:word64] <u rax_3109 + 0x0000000000000008 l000000000040407F
// DataOut: fs r11 r14 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040407F:
	word64 rsp_3172
	word64 r15_3173
	word64 r13_3175
	word64 r12_3176
	word64 rbp_3177
	word64 rsi_3178
	word32 ebx_3180
	word32 edi_3181
	byte SCZO_3182
	word64 rdi_3183
	word64 rax_3184
	word32 eax_3186
	byte SZO_3187
	byte C_3188
	word32 esi_3189
	byte Z_3190
	word32 ecx_3191
	word64 rcx_3192
	word32 edx_3193
	word64 rdx_3194
	byte S_3195
	word16 ax_3196
	byte al_3197
	word32 r8d_3198
	word64 r8_3199
	word32 r14d_3200
	word32 r13d_3201
	word32 r12d_3202
	byte CZ_3203
	bcuiposr0 None_3204
	word32 r9d_3205
	word64 r9_3206
	byte cl_3207
	byte SO_3208
	word32 ebp_3209
	byte r13b_3210
	word32 r15d_3211
	byte r14b_3212
	word64 r10_3213
	word128 xmm0_3215
	word128 xmm1_3216
	word128 xmm2_3217
	word128 xmm3_3218
	byte sil_3219
	byte r12b_3220
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3112,ax_3111,C_3116,cl_3091,CZ_3087,eax_3110,ebp_3093,ebx_3064,ecx_3075,edi_3065,edx_3077,esi_3073,fs_3069,None_3088,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_3097,r11_3098,r12_3060,r12b_3104,r12d_3086,r13_3059,r13b_3094,r13d_3085,r14_3058,r14b_3096,r14d_3084,r15_3057,r15d_3095,r8_3083,r8d_3082,r9_3090,r9d_3089,rax_3109,rbp_3061,rbx_3063,rcx_3076,rdi_3171,rdx_3113,rsi_3170,rsp_3056,S_3079,SCZO_3115,sil_3103,SO_3092,SZO_3071,xmm0_3099,xmm1_3100,xmm2_3101,xmm3_3102,Z_3108
		defs: al_3197,ax_3196,C_3188,cl_3207,CZ_3203,eax_3186,ebp_3209,ebx_3180,ecx_3191,edi_3181,edx_3193,esi_3189,fs_3185,None_3204,r10_3213,r11_3214,r12_3176,r12b_3220,r12d_3202,r13_3175,r13b_3210,r13d_3201,r14_3174,r14b_3212,r14d_3200,r15_3173,r15d_3211,r8_3199,r8d_3198,r9_3206,r9d_3205,rax_3184,rbp_3177,rbx_3179,rcx_3192,rdi_3183,rdx_3194,rsi_3178,rsp_3172,S_3195,SCZO_3182,sil_3219,SO_3208,SZO_3187,xmm0_3215,xmm1_3216,xmm2_3217,xmm3_3218,Z_3190
	rax_3109 = Mem3106[0x000000000061AF78:word64]
// DataOut: fs r11 r14 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F76:
	Mem3166[rax_3109:word64] = Mem3106[0x000000000061B018:word64]
	Mem3168[0x000000000061AF78:word64] = Mem3166[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040365A:
	word64 rdx_2851 = Mem2804[0x000000000061B0E0:word64]
	branch rbx_1768 != 0x0000000000000000 l000000000040366F
// DataOut: fs r11 r14 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040366B_1:
	rbx_1768 = r14_1763
// DataOut: fs r11 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040366F:
	word64 rsi_2861
	word32 edi_2862
	word64 r8_2863
	word64 r9_2864
	word64 r10_2865
	word64 r11_2866
	byte r12b_2867
	word32 r14d_2868
	word64 rax_2869 = fn00000000004052D0(0x0000000000000000, rdx_2851, rbx_1768, r11_1021, fs_1014, out rsi_2861, out edi_2862, out r8_2863, out r9_2864, out r10_2865, out r11_2866, out r12b_2867, out r14d_2868)
	Mem2871[0x000000000061B018:word64] = Mem2804[0x000000000061B018:word64] + rax_2869
	branch Mem2871[0x000000000061B130:byte] == 0x00 l00000000004036B3
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403689:
	word64 rax_2933 = Mem2871[0x000000000061AF78:word64]
	branch Mem2871[0x000000000061AF80:word64] <u rax_2933 + 0x0000000000000008 l000000000040409A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040409A:
	word64 rsp_2996
	word64 r15_2997
	word64 r14_2998
	word64 r13_2999
	word64 r12_3000
	word64 rbp_3001
	word64 rsi_3002
	word64 rbx_3003
	word32 ebx_3004
	word32 edi_3005
	byte SCZO_3006
	word64 rdi_3007
	word64 rax_3008
	selector fs_3009
	word32 eax_3010
	byte SZO_3011
	byte C_3012
	word32 esi_3013
	byte Z_3014
	word32 ecx_3015
	word64 rcx_3016
	word32 edx_3017
	word64 rdx_3018
	byte S_3019
	word16 ax_3020
	byte al_3021
	word32 r8d_3022
	word64 r8_3023
	word32 r14d_3024
	word32 r13d_3025
	word32 r12d_3026
	byte CZ_3027
	bcuiposr0 None_3028
	word32 r9d_3029
	word64 r9_3030
	byte cl_3031
	byte SO_3032
	word32 ebp_3033
	byte r13b_3034
	word32 r15d_3035
	byte r14b_3036
	word64 r10_3037
	word64 r11_3038
	word128 xmm0_3039
	word128 xmm1_3040
	word128 xmm2_3041
	word128 xmm3_3042
	byte sil_3043
	byte r12b_3044
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_2936,ax_2935,C_2940,cl_2814,CZ_2835,eax_2934,ebp_2812,ebx_2856,ecx_2822,edi_2862,edx_2852,esi_2843,fs_2823,None_2816,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_2865,r11_2866,r12_2830,r12b_2867,r12d_2817,r13_2831,r13b_2811,r13d_2818,r14_2832,r14b_2810,r14d_2868,r15_2833,r15d_2825,r8_2863,r8d_2820,r9_2864,r9d_2815,rax_2933,rbp_2827,rbx_2855,rcx_2857,rdi_2995,rdx_2937,rsi_2994,rsp_2834,S_2821,SCZO_2939,sil_2842,SO_2813,SZO_2858,xmm0_2809,xmm1_2808,xmm2_2807,xmm3_2806,Z_2873
		defs: al_3021,ax_3020,C_3012,cl_3031,CZ_3027,eax_3010,ebp_3033,ebx_3004,ecx_3015,edi_3005,edx_3017,esi_3013,fs_3009,None_3028,r10_3037,r11_3038,r12_3000,r12b_3044,r12d_3026,r13_2999,r13b_3034,r13d_3025,r14_2998,r14b_3036,r14d_3024,r15_2997,r15d_3035,r8_3023,r8d_3022,r9_3030,r9d_3029,rax_3008,rbp_3001,rbx_3003,rcx_3016,rdi_3007,rdx_3018,rsi_3002,rsp_2996,S_3019,SCZO_3006,sil_3043,SO_3032,SZO_3011,xmm0_3039,xmm1_3040,xmm2_3041,xmm3_3042,Z_3014
	rax_2933 = Mem2871[0x000000000061AF78:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036A1:
	Mem2990[rax_2933:word64] = Mem2871[0x000000000061B018:word64]
	Mem2992[0x000000000061AF78:word64] = Mem2990[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036B3:
	word64 r15_2882
	word64 r14_2883
	word64 r13_2884
	word64 rbp_2886
	word64 rsi_2887
	word64 rbx_2888
	word32 ebx_2889
	word32 edi_2890
	byte SCZO_2891
	word64 rdi_2892
	word64 rax_2893
	selector fs_2894
	word32 eax_2895
	byte SZO_2896
	byte C_2897
	word32 esi_2898
	byte Z_2899
	word32 ecx_2900
	word64 rcx_2901
	word32 edx_2902
	word64 rdx_2903
	byte S_2904
	word16 ax_2905
	byte al_2906
	word32 r8d_2907
	word64 r8_2908
	word32 r14d_2909
	word32 r13d_2910
	word32 r12d_2911
	byte CZ_2912
	bcuiposr0 None_2913
	word32 r9d_2914
	word64 r9_2915
	byte cl_2916
	byte SO_2917
	word32 ebp_2918
	byte r13b_2919
	word32 r15d_2920
	byte r14b_2921
	word64 r10_2922
	word64 r11_2923
	word128 xmm0_2924
	word128 xmm1_2925
	word128 xmm2_2926
	word128 xmm3_2927
	byte sil_2928
	byte r12b_2929
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2847,ax_2838,C_2859,cl_2814,CZ_2835,eax_2837,ebp_2812,ebx_2856,ecx_2822,edi_2862,edx_2852,esi_2879,fs_2823,None_2816,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_2865,r11_2866,r12_2830,r12b_2867,r12d_2817,r13_2831,r13b_2811,r13d_2818,r14_2832,r14b_2810,r14d_2868,r15_2833,r15d_2825,r8_2863,r8d_2820,r9_2864,r9d_2815,rax_2869,rbp_2827,rbx_2855,rcx_2875,rdi_2880,rdx_2876,rsi_2877,rsp_2834,S_2821,SCZO_2872,sil_2878,SO_2813,SZO_2858,xmm0_2809,xmm1_2808,xmm2_2807,xmm3_2806,Z_2873
		defs: al_2906,ax_2905,C_2897,cl_2916,CZ_2912,eax_2895,ebp_2918,ebx_2889,ecx_2900,edi_2890,edx_2902,esi_2898,fs_2894,None_2913,r10_2922,r11_2923,r12_2885,r12b_2929,r12d_2911,r13_2884,r13b_2919,r13d_2910,r14_2883,r14b_2921,r14d_2909,r15_2882,r15d_2920,r8_2908,r8d_2907,r9_2915,r9d_2914,rax_2893,rbp_2886,rbx_2888,rcx_2901,rdi_2892,rdx_2903,rsi_2887,rsp_2881,S_2904,SCZO_2891,sil_2928,SO_2917,SZO_2896,xmm0_2924,xmm1_2925,xmm2_2926,xmm3_2927,Z_2899
	Mem2931[0x000000000061B018:word64] = Mem2871[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036D6:
	fn0000000000404DD0()
	word32 eax_1968 = (word32) Mem1757[rsp_1026 + 0x000000000000002F:byte]
	Mem1973[rsp_1026 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem1974[rsp_1026 + 0x0000000000000010:word32] = eax_1968
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> bpl:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036F0:
	Mem1978[r12_1118:word32] = 0x00000000
	word64 rsp_1981
	word64 r15_1982
	word64 r14_1983
	word64 r13_1984
	word64 rbp_1986
	word64 rsi_1987
	word64 rbx_1988
	word32 ebx_1989
	word32 edi_1990
	byte SCZO_1991
	word64 rax_1993
	selector fs_1994
	word32 eax_1995
	byte SZO_1996
	byte C_1997
	word32 esi_1998
	byte Z_1999
	word32 ecx_2000
	word64 rcx_2001
	word32 edx_2002
	word64 rdx_2003
	byte S_2004
	word16 ax_2005
	byte al_2006
	word32 r8d_2007
	word64 r8_2008
	word32 r14d_2009
	word32 r13d_2010
	word32 r12d_2011
	byte CZ_2012
	bcuiposr0 None_2013
	word32 r9d_2014
	word64 r9_2015
	byte cl_2016
	byte SO_2017
	word32 ebp_2018
	byte r13b_2019
	word32 r15d_2020
	byte r14b_2021
	word64 r10_2022
	word64 r11_2023
	word128 xmm0_2024
	word128 xmm1_2025
	word128 xmm2_2026
	word128 xmm3_2027
	byte sil_2028
	byte r12b_2029
	word64 rdi_1992
	call readdir (retsize: 8; depth: 8)
		uses: al_1972,ax_1971,C_1967,cl_1930,CZ_1952,eax_1968,ebp_1928,ebx_1943,ecx_1938,edi_1980,edx_1942,esi_1960,fs_1939,None_1932,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_1945,r11_1946,r12_1975,r12b_1921,r12d_1933,r13_1976,r13b_1927,r13d_1934,r14_1949,r14b_1926,r14d_1935,r15_1950,r15d_1941,r8_1962,r8d_1936,r9_1961,r9d_1931,rax_1969,rbp_1944,rbx_1940,rcx_1955,rdi_1979,rdx_1963,rsi_1958,rsp_1951,S_1937,SCZO_1956,sil_1959,SO_1929,SZO_1966,xmm0_1925,xmm1_1924,xmm2_1923,xmm3_1922,Z_1957
		defs: al_2006,ax_2005,C_1997,cl_2016,CZ_2012,eax_1995,ebp_2018,ebx_1989,ecx_2000,edi_1990,edx_2002,esi_1998,fs_1994,None_2013,r10_2022,r11_2023,r12_1985,r12b_2029,r12d_2011,r13_1984,r13b_2019,r13d_2010,r14_1983,r14b_2021,r14d_2009,r15_1982,r15d_2020,r8_2008,r8d_2007,r9_2015,r9d_2014,rax_1993,rbp_1986,rbx_1988,rcx_2001,rdi_1992,rdx_2003,rsi_1987,rsp_1981,S_2004,SCZO_1991,sil_2028,SO_2017,SZO_1996,xmm0_2024,xmm1_2025,xmm2_2026,xmm3_2027,Z_1999
	branch rax_1993 == 0x0000000000000000 l0000000000403CC0
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CC0:
	word64 rdx_2206 = (uint64) Mem1978[r12_1118:word32]
	word32 edx_2207 = (word32) rdx_2206
	branch edx_2207 == 0x00000000 l0000000000403CF3
// DataOut: eax fs r10 r11 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CC8:
	dcgettext(0x0000000000000000, 0x00000000004139B1, 0x0000000000000005)
	word64 rsi_2735
	word64 rdi_2736
	word64 r8_2737
	word64 r9_2738
	word64 r10_2739
	word64 r11_2740
	word32 r12d_2741
	word64 r13_2742
	word64 r14_2743
	word64 r15_2744
	fn0000000000405810((word32) (uint64) Mem1978[rsp_1981 + 0x0000000000000010:word32], r11_2023, r15_1982, fs_1994, out rsi_2735, out rdi_2736, out r8_2737, out r9_2738, out r10_2739, out r11_2740, out r12d_2741, out r13_2742, out r14_2743, out r15_2744)
	branch Mem1978[r12_1118:word32] == 0x0000004B l0000000000403770
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CF3:
	word64 r14_2217
	word64 r13_2218
	word64 r12_2219
	word64 rbx_2222
	word32 ebx_2223
	word32 edi_2224
	byte SCZO_2225
	word64 rdi_2226
	word64 rax_2227
	word32 eax_2229
	byte SZO_2230
	byte C_2231
	word32 esi_2232
	byte Z_2233
	word32 ecx_2234
	word64 rcx_2235
	word32 edx_2236
	word64 rdx_2237
	byte S_2238
	word16 ax_2239
	byte al_2240
	word32 r8d_2241
	word64 r8_2242
	word32 r14d_2243
	word32 r13d_2244
	word32 r12d_2245
	byte CZ_2246
	bcuiposr0 None_2247
	word32 r9d_2248
	byte cl_2250
	byte SO_2251
	word32 ebp_2252
	byte r13b_2253
	word32 r15d_2254
	byte r14b_2255
	word64 r10_2256
	byte sil_2262
	byte r12b_2263
	word64 r15_2216
	word64 rsi_2221
	selector fs_2228
	word64 rbp_2220
	call closedir (retsize: 8; depth: 8)
		uses: al_2006,ax_2005,C_2211,cl_2016,CZ_2012,eax_1995,ebp_2034,ebx_1989,ecx_2000,edi_1990,edx_2207,esi_1998,fs_1994,None_2013,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_2022,r11_2023,r12_1985,r12b_2029,r12d_2011,r13_2212,r13b_2019,r13d_2010,r14_1983,r14b_2021,r14d_2009,r15_1982,r15d_2020,r8_2008,r8d_2007,r9_2015,r9d_2014,rax_1993,rbp_2033,rbx_1988,rcx_2001,rdi_2214,rdx_2206,rsi_1987,rsp_1981,S_2004,SCZO_1991,sil_2028,SO_2017,SZO_2209,xmm0_2024,xmm1_2025,xmm2_2026,xmm3_2027,Z_2210
		defs: al_2240,ax_2239,C_2231,cl_2250,CZ_2246,eax_2229,ebp_2252,ebx_2223,ecx_2234,edi_2224,edx_2236,esi_2232,fs_2228,None_2247,r10_2256,r11_2257,r12_2219,r12b_2263,r12d_2245,r13_2218,r13b_2253,r13d_2244,r14_2217,r14b_2255,r14d_2243,r15_2216,r15d_2254,r8_2242,r8d_2241,r9_2249,r9d_2248,rax_2227,rbp_2220,rbx_2222,rcx_2235,rdi_2226,rdx_2237,rsi_2221,rsp_2215,S_2238,SCZO_2225,sil_2262,SO_2251,SZO_2230,xmm0_2258,xmm1_2259,xmm2_2260,xmm3_2261,Z_2233
	branch eax_2229 != 0x00000000 l0000000000403EBC
// DataOut: fs r10 r11 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EBC:
	dcgettext(0x0000000000000000, 0x00000000004139C6, 0x0000000000000005)
	word64 rdi_2713
	word64 r8_2714
	word64 r10_2716
	word32 r12d_2718
	word64 r13_2719
	word64 r14_2720
	fn0000000000405810((word32) Mem1978[rsp_1026 + 0x000000000000002F:byte], r11_1021, r15_2216, fs_2228, out rsi_2221, out rdi_2713, out r8_2714, out r9_1031, out r10_2716, out r11_1021, out r12d_2718, out r13_2719, out r14_2720, out r15_2216)
// DataOut: fs r10 r11 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D03:
	word64 r12_2281
	word64 r14_2283
	fn0000000000404E80(rsi_2221, r11_1021, r15_2216, out r8_1032, out r12_2281, out r13_1665, out r14_2283, out r15_1025)
	branch Mem1978[0x000000000061B10E:byte] != 0x00 l0000000000403EAA
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EAA:
	fn0000000000405090((byte) (word32) Mem1978[rsp_1026 + 0x000000000000002F:byte], r14_2283, r11_1021)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D15:
	word64 rax_2294 = (uint64) Mem1978[0x000000000061B150:word32]
	word32 eax_2295 = (word32) rax_2294
	branch eax_2295 == 0x00000000 l0000000000403D2C
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D1F:
	branch Mem1978[0x000000000061B144:byte] == 0x00 l0000000000403E00
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D2C:
	branch Mem1978[0x000000000061B130:byte] != 0x00 l0000000000403F8D
// DataOut: fs r13 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F8D:
	word64 r14_2642
	word64 r12_2644
	word64 rsi_2646
	word64 rbx_2647
	word32 ebx_2648
	word32 edi_2649
	byte SCZO_2650
	word64 rdi_2651
	word64 rax_2652
	word32 eax_2654
	byte SZO_2655
	byte C_2656
	word32 esi_2657
	byte Z_2658
	word32 ecx_2659
	word64 rcx_2660
	word32 edx_2661
	word64 rdx_2662
	byte S_2663
	word16 ax_2664
	byte al_2665
	word32 r8d_2666
	word64 r8_2667
	word32 r14d_2668
	word32 r13d_2669
	word32 r12d_2670
	byte CZ_2671
	bcuiposr0 None_2672
	word32 r9d_2673
	word64 r9_2674
	byte cl_2675
	byte SO_2676
	word32 ebp_2677
	byte r13b_2678
	word32 r15d_2679
	byte r14b_2680
	word64 r10_2681
	word64 r11_2682
	byte sil_2687
	byte r12b_2688
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2240,ax_2239,C_2298,cl_2250,CZ_2246,eax_2295,ebp_2252,ebx_2223,ecx_2234,edi_2271,edx_2236,esi_2292,fs_2228,None_2247,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_2268,r11_2269,r12_2281,r12b_2263,r12d_2267,r13_2282,r13b_2253,r13d_2244,r14_2283,r14b_2255,r14d_2243,r15_2284,r15d_2254,r8_2280,r8d_2241,r9_2274,r9d_2248,rax_2294,rbp_2220,rbx_2222,rcx_2636,rdi_2639,rdx_2637,rsi_2638,rsp_2215,S_2238,SCZO_2351,sil_2291,SO_2251,SZO_2296,xmm0_2258,xmm1_2259,xmm2_2260,xmm3_2261,Z_2352
		defs: al_2665,ax_2664,C_2656,cl_2675,CZ_2671,eax_2654,ebp_2677,ebx_2648,ecx_2659,edi_2649,edx_2661,esi_2657,fs_2653,None_2672,r10_2681,r11_2682,r12_2644,r12b_2688,r12d_2670,r13_2643,r13b_2678,r13d_2669,r14_2642,r14b_2680,r14d_2668,r15_2641,r15d_2679,r8_2667,r8d_2666,r9_2674,r9d_2673,rax_2652,rbp_2645,rbx_2647,rcx_2660,rdi_2651,rdx_2662,rsi_2646,rsp_2640,S_2663,SCZO_2650,sil_2687,SO_2676,SZO_2655,xmm0_2683,xmm1_2684,xmm2_2685,xmm3_2686,Z_2658
	Mem2690[0x000000000061B018:word64] = Mem1978[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs r13 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D39:
	word64 rax_2394 = dcgettext(0x0000000000000000, 0x00000000004139DB, 0x0000000000000005)
	fputs_unlocked(rax_2394, Mem1978[0x000000000061A610:word64])
	word64 rax_2401 = DPB(rax_2394, strlen(rax_2394), 0)
	word64 rdi_2402 = Mem1978[0x000000000061A610:word64]
	Mem2405[0x000000000061B018:word64] = Mem1978[0x000000000061B018:word64] + rax_2401
	word64 rax_2406 = Mem2405[rdi_2402 + 0x0000000000000028:word64]
	branch rax_2406 >=u Mem2405[rdi_2402 + 0x0000000000000030:word64] l00000000004044EB
// DataOut: fs r13 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044EB:
	word64 r14_2589
	word64 r12_2591
	word64 rsi_2593
	word64 rbx_2594
	word32 ebx_2595
	word32 edi_2596
	byte SCZO_2597
	word64 rdi_2598
	word64 rax_2599
	word32 eax_2601
	byte SZO_2602
	byte C_2603
	word32 esi_2604
	byte Z_2605
	word32 ecx_2606
	word64 rcx_2607
	word32 edx_2608
	word64 rdx_2609
	byte S_2610
	word16 ax_2611
	byte al_2612
	word32 r8d_2613
	word64 r8_2614
	word32 r14d_2615
	word32 r13d_2616
	word32 r12d_2617
	byte CZ_2618
	bcuiposr0 None_2619
	word32 r9d_2620
	word64 r9_2621
	byte cl_2622
	byte SO_2623
	word32 ebp_2624
	byte r13b_2625
	word32 r15d_2626
	byte r14b_2627
	word64 r10_2628
	word64 r11_2629
	byte sil_2634
	byte r12b_2635
	call __overflow (retsize: 8; depth: 8)
		uses: al_2410,ax_2409,C_2412,cl_2362,CZ_2383,eax_2408,ebp_2360,ebx_2374,ecx_2370,edi_2403,edx_2373,esi_2387,fs_2371,None_2364,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_2376,r11_2377,r12_2378,r12b_2353,r12d_2365,r13_2379,r13b_2359,r13d_2366,r14_2380,r14b_2358,r14d_2367,r15_2381,r15d_2372,r8_2389,r8d_2368,r9_2388,r9d_2363,rax_2406,rbp_2375,rbx_2396,rcx_2384,rdi_2402,rdx_2391,rsi_2586,rsp_2382,S_2369,SCZO_2411,sil_2386,SO_2361,SZO_2390,xmm0_2357,xmm1_2356,xmm2_2355,xmm3_2354,Z_2385
		defs: al_2612,ax_2611,C_2603,cl_2622,CZ_2618,eax_2601,ebp_2624,ebx_2595,ecx_2606,edi_2596,edx_2608,esi_2604,fs_2600,None_2619,r10_2628,r11_2629,r12_2591,r12b_2635,r12d_2617,r13_2590,r13b_2625,r13d_2616,r14_2589,r14b_2627,r14d_2615,r15_2588,r15d_2626,r8_2614,r8d_2613,r9_2621,r9d_2620,rax_2599,rbp_2592,rbx_2594,rcx_2607,rdi_2598,rdx_2609,rsi_2593,rsp_2587,S_2610,SCZO_2597,sil_2634,SO_2623,SZO_2602,xmm0_2630,xmm1_2631,xmm2_2632,xmm3_2633,Z_2605
// DataOut: fs r13 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D80:
	Mem2584[rdi_2402 + 0x0000000000000028:word64] = rax_2406 + 0x0000000000000001
	Mem2585[rax_2406:byte] = 0x20
// DataOut: fs r13 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D8B:
	word64 rdx_2444 = (uint64) Mem2405[0x000000000061B140:word32]
	word64 r8_2442 = Mem2405[0x000000000061B138:word64]
	word64 rdi_2447 = Mem2405[rsp_1026 + 0x0000000000000008:word64]
	Mem2450[0x000000000061B018:word64] = Mem2405[0x000000000061B018:word64] + 0x0000000000000001
	word32 edx_2445 = (word32) rdx_2444
	word64 r10_2454
	word64 rax_2456 = fn000000000040BD70(0x0000000000000200, edx_2445, rbp_2220, rsp_1026 + 0x00000000000000E0, rdi_2447, r8_2442, fs_2228, out r8_1032, out r9_1031, out r10_2454, out r11_1021)
	fputs_unlocked(rax_2456, Mem2450[0x000000000061A610:word64])
	word64 rax_2465 = DPB(rax_2456, strlen(rax_2456), 0)
	word64 rdi_2466 = Mem2450[0x000000000061A610:word64]
	Mem2469[0x000000000061B018:word64] = Mem2450[0x000000000061B018:word64] + rax_2465
	word64 rax_2470 = Mem2469[rdi_2466 + 0x0000000000000028:word64]
	branch rax_2470 >=u Mem2469[rdi_2466 + 0x0000000000000030:word64] l00000000004044DC
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044DC:
	word64 r14_2536
	word64 r12_2538
	word64 rbp_2539
	word64 rsi_2540
	word64 rbx_2541
	word32 ebx_2542
	word32 edi_2543
	byte SCZO_2544
	word64 rdi_2545
	word64 rax_2546
	selector fs_2547
	word32 eax_2548
	byte SZO_2549
	byte C_2550
	word32 esi_2551
	byte Z_2552
	word32 ecx_2553
	word64 rcx_2554
	word32 edx_2555
	word64 rdx_2556
	byte S_2557
	word16 ax_2558
	byte al_2559
	word32 r8d_2560
	word32 r14d_2562
	word32 r13d_2563
	word32 r12d_2564
	byte CZ_2565
	bcuiposr0 None_2566
	word32 r9d_2567
	byte cl_2569
	byte SO_2570
	word32 ebp_2571
	byte r13b_2572
	word32 r15d_2573
	byte r14b_2574
	word64 r10_2575
	byte sil_2581
	byte r12b_2582
	call __overflow (retsize: 8; depth: 8)
		uses: al_2474,ax_2473,C_2476,cl_2422,CZ_2439,eax_2472,ebp_2420,ebx_2432,ecx_2429,edi_2467,edx_2445,esi_2533,fs_2430,None_2424,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_16,qwLoc30_22,qwLoc40_31,r10_2454,r11_2455,r12_2434,r12b_2413,r12d_2425,r13_2435,r13b_2419,r13d_2426,r14_2436,r14b_2418,r14d_2427,r15_2437,r15d_2431,r8_2452,r8d_2443,r9_2453,r9d_2423,rax_2470,rbp_2433,rbx_2460,rcx_2448,rdi_2466,rdx_2444,rsi_2531,rsp_2438,S_2428,SCZO_2475,sil_2532,SO_2421,SZO_2441,xmm0_2417,xmm1_2416,xmm2_2415,xmm3_2414,Z_2440
		defs: al_2559,ax_2558,C_2550,cl_2569,CZ_2565,eax_2548,ebp_2571,ebx_2542,ecx_2553,edi_2543,edx_2555,esi_2551,fs_2547,None_2566,r10_2575,r11_2576,r12_2538,r12b_2582,r12d_2564,r13_2537,r13b_2572,r13d_2563,r14_2536,r14b_2574,r14d_2562,r15_2535,r15d_2573,r8_2561,r8d_2560,r9_2568,r9d_2567,rax_2546,rbp_2539,rbx_2541,rcx_2554,rdi_2545,rdx_2556,rsi_2540,rsp_2534,S_2557,SCZO_2544,sil_2581,SO_2570,SZO_2549,xmm0_2577,xmm1_2578,xmm2_2579,xmm3_2580,Z_2552
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403DED:
	Mem2529[rdi_2466 + 0x0000000000000028:word64] = rax_2470 + 0x0000000000000001
	Mem2530[rax_2470:byte] = 0x0A
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403DF8:
	Mem2526[0x000000000061B018:word64] = Mem2469[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E00:
	branch Mem1978[0x000000000061B1B0:word64] == 0x0000000000000000 l00000000004034A1
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E0E:
	fn00000000004079F0(out rsp_1026)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034A1:
	word64 rbx_1864 = Mem1757[rsp_1026 + 0x0000000000000018:word64]
	free(Mem1757[rbx_1864:word64])
	free(Mem1757[rbx_1864 + 0x0000000000000008:word64])
	free(rbx_1864)
	Mem1868[0x000000000061B0D0:byte] = 0x01
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> bpl:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034C6:
	Mem1743[rsp_1026 + 0x0000000000000018:word64] = Mem1692[0x000000000061B190:word64]
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040370C:
	word32 eax_2071 = (word32) (uint64) Mem1978[0x000000000061B108:word32]
	branch eax_2071 == 0x00000002 l0000000000403C78
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040371F:
	branch Mem1978[rax_1993 + 0x0000000000000013:byte] == 0x2E l0000000000403C58
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C58:
	branch eax_2071 == 0x00000000 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C60:
	branch Mem1978[rax_1993 + 0x0000000000000014 + (uint64) (Mem1978[rax_1993 + 0x0000000000000014:byte] == 0x2E):byte] == 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C74:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:Test(EQ,Z) dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403729:
	branch eax_2071 != 0x00000000 l0000000000403C78
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403731:
	word64 r15_2175 = Mem1978[0x000000000061B0F8:word64]
	branch r15_2175 != 0x0000000000000000 l0000000000403755
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403755:
	rdi_1992 = Mem1978[rdi_1992:word64]
	branch fnmatch(rdi_1992, rax_1993 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403748
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403748:
	r15_2175 = Mem1978[r15_2175 + 0x0000000000000008:word64]
	branch r15_2175 == 0x0000000000000000 l0000000000403C78
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403769:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040373D:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C78:
	word64 r15_2084 = Mem1978[0x000000000061B100:word64]
	branch r15_2084 != 0x0000000000000000 l0000000000403C9D
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C9D:
	rdi_1992 = Mem1978[rdi_1992:word64]
	branch fnmatch(rdi_1992, rax_1993 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403C90
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C90:
	r15_2084 = Mem1978[r15_2084 + 0x0000000000000008:word64]
	branch r15_2084 == 0x0000000000000000 l0000000000403E20
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CB1:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C84:
// DataOut: fs r10 r11 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E20:
	word64 rax_2101 = (uint64) ((word32) Mem1978[rax_1993 + 0x0000000000000012:byte] - 0x00000001)
	word64 rsi_2098 = 0x0000000000000000
	byte al_2105 = (byte) rax_2101
	branch al_2105 >u 0x0D l0000000000403E37
// DataOut: al esi fs r10 r11 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E2D:
	rsi_2098 = (uint64) Mem1978[DPB(rax_2101, (word32) al_2105, 0) * 0x0000000000000004 + 0x00412C00:word32]
// DataOut: esi fs r10 r11 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E37:
	word32 ebx_2118
	word64 rsp_2119
	word64 rbp_2120
	word64 rsi_2121
	word64 r8_2122
	word64 r9_2123
	word64 r10_2124
	word64 r11_2125
	word64 r13_2127
	word64 r14_2128
	word64 r15_2129
	word64 rax_2130 = fn0000000000407EA0(r14_1983, 0x00000000, rsi_2098, rax_1993 + 0x0000000000000013, r8_2008, r10_2022, r11_2023, r14_1983, r15_2084, fs_1994, out ebx_2118, out rsp_2119, out rbp_2120, out rsi_2121, out r8_2122, out r9_2123, out r10_2124, out r11_2125, out r12_1118, out r13_2127, out r14_2128, out r15_2129)
	Mem2132[rsp_2119 + 0x0000000000000008:word64] = Mem1978[rsp_2119 + 0x0000000000000008:word64] + rax_2130
	branch Mem2132[0x000000000061B150:word32] != 0x00000001 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E56:
	branch Mem2132[0x000000000061B148:word32] != 0xFFFFFFFF l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r14b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E63:
	branch Mem2132[0x000000000061B144:byte] != 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r14b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E70:
	branch Mem2132[0x000000000061B10E:byte] != 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r14b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E7D:
	word64 r8_2141
	word64 r13_2143
	word64 r14_2144
	word64 r15_2145
	fn0000000000404E80(rsi_2121, r11_2125, r15_2129, out r8_2141, out r12_1118, out r13_2143, out r14_2144, out r15_2145)
	word64 rsp_2147
	fn00000000004079F0(out rsp_2147)
	fn0000000000404DD0()
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r14b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403770:
	word64 rsi_2060
	word64 rdi_2061
	fn0000000000406490(out rsi_2060, out rdi_2061)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B5A:
	branch (word32) (uint64) (eax_481 + 0x00000083) >u 0x00000112 l00000000004031F9
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031F9:
	fn0000000000409750(0x00000002)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403203:
	Mem256[0x000000000061B150:word32] = 0x00000002
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B6A:
	return
// DataOut: r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn00000000004028C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r15:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -904(fp):0x3F3F -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402DFF:
	word64 rsi_621
	word32 eax_613 = (word32) (uint64) Mem466[0x000000000061A56C:word32]
	branch eax_613 == 0x00000001 l0000000000403BF3
// DataOut: eax r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BF3:
	rsi_621 = 0x0000000000413807
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E15:
	rsi_621 = 0x000000000041380F
	branch eax_613 == 0x00000002 l0000000000402E26
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E22_1:
	rsi_621 = 0x000000000041380E
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x000000000041380E rsi:0x000000000041380F r12:<invalid> rdx:<invalid> eax:0x0041380E r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x380E r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:0x0041380F ecx:<invalid> sil:0x0F cl:<invalid> al:0x0E r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E26:
	word64 rdi_624 = Mem466[0x000000000061A610:word64]
	Mem625[rsp_1026:word64] = 0x0000000000000000
	fn0000000000410B30(0x00, 0x00000000004137FC, rsi_621, rdi_624, r11_1021)
	exit(0x0000000000000000)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402985:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> r12:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -904(fp):0x3F3F -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000404890(word64 rdx, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	__libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, fp)
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi r8 r8b r8d r8w rax rdi
// Preserved: rbp rsp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

l00000000004048E1:
	word64 rsp_42
	word32 eax_43
	word64 rax_44
	word64 rbp_45
	word64 r8_46
	byte SCZO_47
	byte CZ_48
	byte SZO_49
	byte C_50
	byte Z_51
	word32 edi_52
	word64 rdi_53
	call eax (retsize: 4; depth: 4)
		uses: C_38,CZ_9,eax,edi,qwLoc08_5,r8_7,rax_35,rbp_39,rdi_41,rsp_40,SCZO_8,SZO_36,Z_37
		defs: C_50,CZ_48,eax_43,edi_52,r8_46,rax_44,rbp_45,rdi_53,rsp_42,SCZO_47,SZO_49,Z_51
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -8(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx eax ecx r10 r10b r10d r10w r11 r11b r11d r11w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx
// Preserved: r12 r14 rbp rbx rsp
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004049E0:
	word64 r8_106 = Mem0[r14:word64]
	word64 rax_101 = 0x0000000000000000
	word32 eax_207 = 0x00000000
	word64 r9_100 = Mem0[r15:word64]
	word64 r10_107 = 0x0000000000000000
	word64 r11_112 = 0x0000000000000000
	word32 r11d_113 = 0x00000000
	byte r11b_114 = 0x00
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404A06:
	byte al_263
	byte SZO_157
	byte al_119
	word32 eax_140
	branch eax_207 == 0x00000002 l0000000000404A59
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A59:
	rax_101 = DPB(rax_101, (word32) Mem0[rax_101:byte], 0) (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_101 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A50:
	r11d_113 = rax_101 - 0x0000000000000030 + r11_112 * 0x0000000000000008
	r11_112 = DPB(r11_112, r11d_113, 0) (alias)
	r11b_114 = (byte) r11d_113 (alias)
	r8_106 = r8_106 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A0B:
	branch eax_207 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B20:
	branch eax_207 != 0x00000001 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A11:
	branch eax_207 == 0x00000003 l0000000000404AE0
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AE0:
	rax_101 = DPB(rax_101, (word32) Mem0[rax_101:byte], 0) (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000030, 0) (alias)
	byte cl_379 = (byte) (rax_101 - 0x0000000000000030)
	branch cl_379 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AF0:
	r14 = 0x0000000000000001 << cl_379
	word32 r14d_396 = (word32) r14
	branch (r14d_396 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B78:
	word64 r11_419 = (uint64) (r11d_113 << 0x00000004)
	r11d_113 = rax_101 - 0x0000000000000037 + r11_419
	rax_101 = DPB(rax_101, (word32) Mem0[rax_101:byte], 0) (alias)
	r8_106 = r8_106 + 0x0000000000000001
	r11_112 = DPB(r11_419, r11d_113, 0) (alias)
	r11b_114 = (byte) r11d_113 (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000030, 0) (alias)
	cl_379 = (byte) (rax_101 - 0x0000000000000030) (alias)
	branch cl_379 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B95:
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AD0:
	word64 r11_412 = (uint64) (r11d_113 << 0x00000004)
	r11d_113 = rax_101 - 0x0000000000000057 + r11_412
	r8_106 = r8_106 + 0x0000000000000001
	r11_112 = DPB(r11_412, r11d_113, 0) (alias)
	r11b_114 = (byte) r11d_113 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B04:
	branch (r14d_396 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A65:
	Mem346[r9_100:byte] = r11b_114
	r10_107 = r10_107 + 0x0000000000000001
	r9_100 = r9_100 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B11:
	word64 r11_406 = (uint64) (r11d_113 << 0x00000004)
	r11d_113 = rax_101 - 0x0000000000000030 + r11_406
	r8_106 = r8_106 + 0x0000000000000001
	r11_112 = DPB(r11_406, r11d_113, 0) (alias)
	r11b_114 = (byte) r11d_113 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A1A:
	branch eax_207 != 0x00000004 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A22:
	eax_140 = (word32) Mem0[rax_101:byte]
	rax_101 = DPB(rax_101, eax_140, 0) (alias)
	al_263 = (byte) eax_140 (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_101 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A2E:
	branch al_263 == 0x3F l0000000000404CB0
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404CB0:
	Mem325[rcx:byte] = 0x7F
	r10_107 = r10_107 + 0x0000000000000001
	r9_100 = r9_100 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A70:
	word32 eax_294 = (word32) Mem0[rax_101:byte]
	al_119 = (byte) eax_294 (alias)
	rax_101 = DPB(rax_101, eax_294, 0) (alias)
	SZO_157 = cond(al_119 - 0x3D) (alias)
	branch al_119 == 0x3D l0000000000404ABA
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A78:
	branch SZO_157 l0000000000404B40
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B40:
	branch al_119 == 0x00 l0000000000404B48
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B44:
	branch al_119 != 0x3A l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A7E:
	branch al_119 == 0x5C l0000000000404CA0
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404CA0:
	r8_106 = r8_106 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B29:
	word32 eax_196 = (word32) Mem0[rax_101:byte]
	byte al_198 = (byte) eax_196
	branch al_198 >u 0x78 l0000000000404C90
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404C90:
	r11_112 = (uint64) eax_196
	r11d_113 = (word32) r11_112 (alias)
	r11b_114 = (byte) r11_112 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404BD0:
	Mem227[r9_100:byte] = r11b_114
	r10_107 = r10_107 + 0x0000000000000001
	r9_100 = r9_100 + 0x0000000000000001
	rax_101 = 0x0000000000000000
	eax_207 = 0x00000000 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B35:
	rcx = DPB(rcx, (word32) al_198, 0) (alias)
	switch (rcx) { l0000000000404BF0 }
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404BF0:
	rax_101 = 0x0000000000000006
	eax_207 = 0x00000006 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:(word32) al r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404BB0:
	r8_106 = r8_106 + 0x0000000000000001
	branch eax_207 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A86:
	branch al_119 != 0x5E l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A8E:
	eax_140 = (word32) Mem0[rax_101:byte]
	rax_101 = DPB(rax_101, eax_140, 0) (alias)
	r8_106 = r8_106 + 0x0000000000000001
	al_263 = (byte) eax_140 (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_101 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A9E:
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AA0:
	word64 rax_145 = (uint64) (eax_140 & 0x0000001F)
	Mem150[rcx:byte] = (byte) rax_145
	word32 eax_151 = (word32) Mem150[rax_145:byte]
	al_119 = (byte) eax_151 (alias)
	r8_106 = r8_106 + 0x0000000000000001
	r10_107 = r10_107 + 0x0000000000000001
	rax_101 = DPB(rax_145, eax_151, 0) (alias)
	r9_100 = r9_100 + 0x0000000000000001
	SZO_157 = cond(al_119 - 0x3D) (alias)
	branch al_119 != 0x3D l0000000000404A78
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B60:
	Mem105[rcx:byte] = al_119
	r8_106 = r8_106 + 0x0000000000000001
	r10_107 = r10_107 + 0x0000000000000001
	r9_100 = r9_100 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A38:
	Mem75[r15:word64] = r9_100
	Mem76[r14:word64] = r8_106
	Mem77[r13:word64] = r10_107
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:r12 rbp:rbp rbx:rbx eax:<invalid> ecx:<invalid> r14:r14 al:Test(NE,Z) r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14



word32 fn0000000000404CD0(word32 edi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word32 eax_33 = 0x00000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	*rsiOut = rsi_10
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (word32) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_42 = cond(rdx_9 - 0x0000000000000002)
	eax_33 = 0x00000001 (alias)
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_46 = 0x0000000000413733
	word64 rcx_48 = 0x0000000000000002
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_48 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_42 = cond(Mem0[rsi_85:byte] - Mem0[rdi_86:byte]) (alias)
	*rsiOut = rsi_85 + 0x0000000000000001
	rdi_46 = rdi_86 + 0x0000000000000001
	rcx_48 = rcx_48 - 0x0000000000000001
	word64 rsi_85 = rsi_10
	word64 rdi_86 = rdi_46
	branch Mem0[rsi_85:byte] != Mem0[rdi_86:byte] l0000000000404D0A
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x00000001, Z_42, 0)
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return eax_33
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx r11 rdi rsi
// LiveOut: rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn0000000000404D20_entry:
// DataOut: dl edx fs r10 r11 r13d r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	byte r13b_8 = (byte) (uint64) edx
	word64 rax_25 = fn0000000000410C40(rsi, 0x0000000000000020)
	word64 rax_27 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: fs r10 r11 r12 r13b r14d r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D47:
	word64 rdi_70
	rax_27 = fn0000000000410E30(rsi, out rsi, out rdi_70)
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D4F:
	Mem35[rax_25 + 0x0000000000000008:word64] = rax_27
	word64 rax_36 = 0x0000000000000000
	branch rdi == 0x0000000000000000 l0000000000404D62
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D5A:
	word64 rdi_65
	rax_36 = fn0000000000410E30(rdi, out rsi, out rdi_65)
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D62:
	Mem45[rax_25:word64] = rax_36
	word64 rax_46 = Mem45[0x000000000061B190:word64]
	Mem47[r11 + 0x0000000000000010:byte] = r13b_8
	Mem49[0x000000000061B190:word64] = rax_25
	Mem50[rax_25 + 0x0000000000000018:word64] = rax_46
	return rsi
// DataOut: fs r10 r11 r13d r14d r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn0000000000404D20_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbp:rbp rdi:<invalid> rbx:rbx rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



void fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO di dil edi rdi
// Preserved: rbx rsp
fn0000000000404D90_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DC0:
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> -8(fp):rbx

l0000000000404DB5:
	word64 rsp_20
	word64 rbx_21
	word64 rdi_22
	byte SCZO_23
	byte Z_24
	call freecon (retsize: 8; depth: 8)
		uses: qwLoc08_4,rbx_18,rdi_10,rsp_19,SCZO_11,Z_12
		defs: rbx_21,rdi_22,rsp_20,SCZO_23,Z_24
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> -8(fp):rbx

fn0000000000404D90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:<invalid> -8(fp):rbx



void fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rbx rsp
fn0000000000404DD0_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rbx_32 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> -8(fp):rbx

l0000000000404DE0:
	fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_32 * 0x0000000000000008:word64])
	rbx_32 = rbx_32 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_32 l0000000000404DE0
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdi:<invalid> -8(fp):rbx

l0000000000404DFD:
	Mem18[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem19[0x000000000061B17C:byte] = 0x00
	Mem20[0x000000000061B178:word32] = 0x00000000
	Mem21[0x000000000061B174:word32] = 0x00000000
	Mem22[0x000000000061B170:word32] = 0x00000000
	Mem23[0x000000000061B168:word32] = 0x00000000
	Mem24[0x000000000061B164:word32] = 0x00000000
	Mem25[0x000000000061B160:word32] = 0x00000000
	Mem26[0x000000000061B16C:word32] = 0x00000000
	Mem27[0x000000000061B15C:word32] = 0x00000000
	Mem28[0x000000000061B158:word32] = 0x00000000
	Mem29[0x000000000061B154:word32] = 0x00000000
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdi:<invalid> -8(fp):rbx

fn0000000000404DD0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdi:<invalid> -8(fp):rbx



word64 fn0000000000404E80(word64 rsi, word64 r11, word64 r15, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut: r12 r13 r13d r14 r15 r8 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbp rbx rsp
fn0000000000404E80_entry:
	*r8Out = r8
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rbp_12 = rbx_10
	branch (rbx_10 >>u 0x0000000000000001) + rbx_10 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	word64 rdi_259 = Mem0[0x000000000061B1A8:word64]
	free(rdi_259)
	branch rbx_10 >u 0x00000000AAAAAAAA l0000000000404FF8
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
	word64 rsi_275 = Mem0[rsi:word64]
	strcmp(Mem0[rdi_259:word64], rsi_275)
	return rsi_275
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FB3:
	word64 rax_267 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem269[0x000000000061B1A8:word64] = rax_267
	Mem274[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EAB:
	word64 rax_240 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_244 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_246 = rax_240 + rbp_12 * 0x0000000000000008
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EC0:
	Mem250[rax_240:word64] = rdx_244
	rax_240 = rax_240 + 0x0000000000000008
	rdx_244 = rdx_244 + 192
	branch rax_240 != rcx_246 l0000000000404EC0
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EE0:
	word64 rsi_162
	word32 ecx_155
	word64 rdi_150
	word64 rsp_120
	word64 rbp_121
	word64 rbx_122
	byte SCZO_123
	word64 rax_124
	byte CZ_125
	byte SZO_126
	byte C_127
	byte Z_128
	word64 rdx_129
	word64 rcx_130
	word32 edi_131
	word64 rdi_132
	word32 eax_133
	word32 r8d_134
	word64 rsi_136
	word32 ecx_137
	word32 edx_138
	word16 ax_139
	byte al_140
	word32 esi_141
	word64 r11_142
	word64 r15_143
	word64 r12_144
	word64 r13_145
	word64 r14_146
	word64 r8_135
	call _setjmp (retsize: 8; depth: 32)
		uses: al_72,ax_73,C_65,CZ_54,eax_75,ecx_71,edi_56,edx_74,esi,qwLoc08_4,qwLoc10_7,r11,r12,r13,r14,r15,r8,r8d,rax_76,rbp_62,rbx_10,rcx_70,rdi_119,rdx_77,rsi,rsp_8,SCZO_78,SZO_63,Z_79
		defs: al_140,ax_139,C_127,CZ_125,eax_133,ecx_137,edi_131,edx_138,esi_141,r11_142,r12_144,r13_145,r14_146,r15_143,r8_135,r8d_134,rax_124,rbp_121,rbx_122,rcx_130,rdi_132,rdx_129,rsi_136,rsp_120,SCZO_123,SZO_126,Z_128
	branch eax_133 == 0x00000000 l0000000000404F40
// DataOut: al fs r10 r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F40:
	ecx_155 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_162 = Mem0[0x000000000061B1B0:word64]
	rdi_150 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi fs r10 r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EEE:
	r8_135 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_191 = (word32) r8_135
	branch r8d_191 == 0x00000003 l0000000000404FDF
// DataOut: fs r10 r11 r15 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EFF:
	rsi_162 = Mem0[0x000000000061B1B0:word64]
	rdi_150 = Mem0[0x000000000061B1A8:word64]
	branch rsi_162 == 0x0000000000000000 l0000000000404F33
// DataOut: edi fs r10 r11 r15 r8d r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F12:
	word64 rdx_211 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_213 = rdi_150 + rsi_162 * 0x0000000000000008
	word64 rax_215 = rdi_150
// DataOut: edi fs r10 r11 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F20:
	Mem221[rax_215:word64] = rdx_211
	rax_215 = rax_215 + 0x0000000000000008
	rdx_211 = rdx_211 + 192
	branch rax_215 != rcx_213 l0000000000404F20
// DataOut: edi fs r10 r11 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F33:
	ecx_155 = (word32) (uint64) r8d_191 (alias)
// DataOut: al ecx edi fs r10 r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F54:
	branch ecx_155 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx fs r10 r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx fs r10 r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F60:
	word64 r8_172 = DPB(r8_135, (word32) Mem0[0x000000000061B10C:byte], 0)
	*r8Out = r8_172
	word64 r12_182
	word64 r13_183
	word64 r14_184
	word64 r15_185
	rsi = fn000000000040D690(rsi_162, rdi_150, r8_172, r11_142, r15_143, out r12_182, out r13_183, out r14_184, out r15_185)
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F8C:
	return rsi
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> eax:<invalid> r8:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000404E80_exit:
// DataOut: r12 r13 r13d r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> eax:<invalid> rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r8:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000405090(byte sil, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000405090_entry:
// DataOut: fs r10 r11 r13d r8 r9 rdi rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_106 = (word32) sil
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: fs r10 r11 r13 r14d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: fs r10 r11 r13 r14d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050B4:
	rsi = fn0000000000404D20(0x00000000, rdi, 0x0000000000000000, r11)
// DataOut: fs r10 r11 r13 r14d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050C0:
	word64 rbx_45 = Mem0[0x000000000061B1B0:word64]
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405108:
	branch rbx_45 == 0x0000000000000000 l00000000004051A8
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051A8:
	word64 rdx_195
	word64 rdi_181 = Mem0[0x000000000061B1B0:word64]
	branch rdi_181 == 0x0000000000000000 l00000000004051F7
// DataOut: fs r10 r11 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051F7:
	rdx_195 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051B4:
	rsi = Mem0[0x000000000061B1A8:word64]
	rdx_195 = 0x0000000000000000
	word64 rax_220 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051C0:
	word64 rcx_227 = Mem0[rsi + rax_220 * 0x0000000000000008:word64]
	Mem230[rsi + rdx_195 * 0x0000000000000008:word64] = rcx_227
	rax_220 = rax_220 + 0x0000000000000001
	rdx_195 = rdx_195 + DPB(rcx_227, (word32) (Mem0[rcx_227 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_220 != rdi_181 l00000000004051C0
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051E1:
	Mem200[0x000000000061B1B0:word64] = rdx_195
	return rsi
// DataOut: fs r10 r11 r13d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000405090_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r14d:<invalid> r13:r13 rbx:rbx r12:r12 rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:rbp r14:r14 r15:r15 edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000405111:
	word64 rbp_71 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_73 = (word32) (uint64) Mem0[rbp_71 + 0x00000000000000A0:word32]
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040512C:
	word64 r15_99 = Mem0[rdi:word64]
	branch rdi == 0x0000000000000000 l00000000004050E2
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405135:
	word64 rax_135 = fn000000000040A390(r15_99, out rsi)
	branch Mem0[rax_135:byte] != 0x2E l00000000004050D8
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405142:
	byte al_173 = (byte) (word32) Mem0[rax_135 + 0x0000000000000001 + (uint64) (Mem0[rax_135 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_173 == 0x2F l0000000000405100
// DataOut: al fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405154:
	branch al_173 == 0x00 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405158:
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050D8:
	branch Mem0[r15_99:byte] != 0x2F l0000000000405160
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405160:
	word64 rax_155 = fn000000000040A610(0x0000000000000000, r15_99, rdi, out r14d_106)
	rsi = fn0000000000404D20((word32) (uint64) r14d_106, Mem0[rbp_71 + 0x0000000000000008:word64], rax_155, r11)
	free(rax_155)
	branch Mem0[rbp_71 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050E2:
	rsi = fn0000000000404D20((word32) (uint64) r14d_106, Mem0[rbp_71 + 0x0000000000000008:word64], r15_99, r11)
	branch Mem0[rbp_71 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405194:
	fn0000000000404D90(rbp_71)
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050FE:
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405100:
	rbx_45 = rbx_45 - 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)



void fn0000000000405200(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbp_141 = rsi
	word64 rbx_107 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	word64 rcx_135 = Mem0[0x000000000061B0D8:word64]
	branch rcx_135 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_112 = rbx_107 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rbp_141 /u rcx_135) <=u (uint64) ((uint128) ((uint64) rsi_112) /u rcx_135) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_107 = rsi_112
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_126 = Mem0[0x000000000061A610:word64]
	word64 rax_127 = Mem0[rdi_126 + 0x0000000000000028:word64]
	branch rax_127 >=u Mem0[rdi_126 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	word64 rsp_156
	word64 rsi_158
	word64 rdi_160
	byte SCZO_161
	byte C_162
	word64 rcx_163
	byte SZO_164
	byte Z_165
	word64 rdx_166
	word64 rax_167
	byte CZ_168
	word32 esi_169
	word32 edx_170
	call __overflow (retsize: 8; depth: 32)
		uses: C_130,CZ_125,edx_43,esi_113,qwLoc08_4,qwLoc10_9,rax_127,rbp_52,rbx_51,rcx_55,rdi_126,rdx_122,rsi_155,rsp_53,SCZO_129,SZO_56,Z_57
		defs: C_162,CZ_168,edx_170,esi_169,rax_167,rbp_157,rbx_159,rcx_163,rdi_160,rdx_166,rsi_158,rsp_156,SCZO_161,SZO_164,Z_165
	rcx_135 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem153[rdi_126 + 0x0000000000000028:word64] = rax_127 + 0x0000000000000001
	Mem154[rax_127:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_107 = rbx_107 + rcx_135 - (uint64) ((uint128) ((uint64) rbx_107) % rcx_135)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_107 = rbx_107 + 0x0000000000000001
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_80 = Mem0[0x000000000061A610:word64]
	word64 rdx_81 = Mem0[rdi_80 + 0x0000000000000028:word64]
	branch rdx_81 >=u Mem0[rdi_80 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	word64 rsp_92
	word64 rsi_94
	word64 rdi_96
	byte SCZO_97
	byte C_98
	word64 rcx_99
	byte SZO_100
	byte Z_101
	word64 rdx_102
	word64 rax_103
	byte CZ_104
	word32 esi_105
	word32 edx_106
	call __overflow (retsize: 8; depth: 32)
		uses: C_85,CZ_78,edx_83,esi_75,qwLoc08_4,qwLoc10_9,rax_77,rbp_52,rbx_79,rcx_55,rdi_80,rdx_81,rsi_91,rsp_53,SCZO_84,SZO_56,Z_57
		defs: C_98,CZ_104,edx_106,esi_105,rax_103,rbp_93,rbx_95,rcx_99,rdi_96,rdx_102,rsi_94,rsp_92,SCZO_97,SZO_100,Z_101
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rbp_141 <=u rbx_107 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem89[rdi_80 + 0x0000000000000028:word64] = rdx_81 + 0x0000000000000001
	Mem90[rdx_81:byte] = 0x20
	branch rbp_141 >u rbx_107 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:rdi -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn00000000004052D0(word64 rcx, word64 rdx, word64 rsi, word64 r11, selector fs, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12bOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rcx rdx rsi
// LiveOut: edi r10 r11 r11d r12b r14b r14d r8 r9 rax rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn00000000004052D0_entry:
// DataOut: fs r11 rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004052D0:
	word32 edi_48
	word64 r9_50
	word64 r10_51
	word64 r11_52
	word64 r8_103
	word64 rax_53 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFB8, rdx, r11, fs, out edi_48, out r8_103, out r9_50, out r10_51, out r11_52)
	Mem62[fp + 0xFFFFFFFFFFFFDF90:word64] = fp + 0xFFFFFFFFFFFFDFB8
	word64 rbp_119 = fp - 0x0000000000000008
	word32 r14d_16 = (word32) rsi
	*r14dOut = r14d_16
	word64 rsi_105
	*rsiOut = 0x0000000000002000
	word64 rsp_120 = fp - 0x0000000000002088
	word64 rdi_140 = fp + 0xFFFFFFFFFFFFDFB8
	word64 rbx_111 = rax_53
	branch rax_53 >u 0x0000000000001FFF l0000000000405590
// DataOut: edi fs r10 r11 r11d r12 r13 r14 r14b r14d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64) Local -2078(0)

l0000000000405590:
	rsp_120 = fp - 0x0000000000002088 - (rax_53 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0)
	word64 v24_936 = rsp_120 + 0x000000000000000F & 0xFFFFFFFFFFFFFFF0
	word32 edi_942
	word64 r9_944
	word64 r10_945
	word64 r11_946
	fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, rax_53 + 0x0000000000000001, v24_936, rdx, r11_52, fs, out edi_942, out r8_103, out r9_944, out r10_945, out r11_946)
	*rsiOut = rax_53 + 0x0000000000000001
	qwLoc2070 = v24_936
	rdi_140 = v24_936
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000002088 r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:fp + 0xFFFFFFFFFFFFDFB8 rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):fp + 0xFFFFFFFFFFFFDFB8 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64) Local -2078(0)

l0000000000405343:
	branch Mem62[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64) Local -2078(0)

l0000000000405412:
	word64 rdx_458
	word64 r15_459
	word64 r14_460
	word64 r13_462
	word32 esi_463
	word64 r12_464
	byte SCZO_466
	word64 rcx_468
	word32 eax_471
	byte SZO_472
	byte C_473
	byte CZ_474
	byte Z_475
	word32 edx_476
	word32 r12d_477
	word16 dx_478
	byte al_479
	byte SO_480
	byte dl_481
	word32 edi_482
	byte S_483
	word32 ecx_484
	byte cl_485
	word16 ax_486
	word32 ebx_487
	word64 r11_488
	word64 r9_489
	word64 r10_490
	byte r12b_491
	word32 r14d_492
	word32 r13d_493
	word32 r15d_494
	word64 rax_469
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_74,cl,CZ_61,dl,dx,eax_78,ebx_55,ecx,edi_76,edx,esi_70,fs,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc2058,qwLoc2070_64,qwLoc2078_37,qwLoc2080_33,qwLoc28_27,qwLoc30_30,qwLoc40_42,r10_65,r11_67,r12,r12b,r12d,r13_20,r13d_21,r14_15,r14d_16,r15,r15d,r8_72,r9_66,rax_77,rbp_7,rbx_54,rcx_68,rdi_69,rdx_71,rsi_75,rsp_81,S,SCZO_82,SO,SZO_73,Z_83
		defs: al_479,ax_486,C_473,cl_485,CZ_474,dl_481,dx_478,eax_471,ebx_487,ecx_484,edi_482,edx_476,esi_463,fs_470,r10_490,r11_488,r12_464,r12b_491,r12d_477,r13_462,r13d_493,r14_460,r14d_492,r15_459,r15d_494,r8_457,r9_489,rax_469,rbp_456,rbx_465,rcx_468,rdi_467,rdx_458,rsi_461,rsp_455,S_483,SCZO_466,SO_480,SZO_472,Z_475
	branch rax_469 <=u 0x0000000000000001 l00000000004055D1
// DataOut: edi fs r10 r11 r11d r13 r14b r14d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004055D1:
	word64 r14_816 = Mem62[r13_462 + 0xFFFFFFFFFFFFDF98:word64]
	word32 r14d_817 = (word32) r14_816
	*r14dOut = r14d_817
	word64 r12_818 = r14_816 + rbx_111
	branch r14_816 >=u r12_818 l0000000000405602
// DataOut: edi fs r10 r11 r11d r12 r14 r14b r14d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055E1:
	word64 rdx_866
	word64 r15_867
	word64 r14_868
	word64 r13_870
	word32 esi_871
	word64 r12_872
	byte SCZO_874
	word64 rcx_876
	word64 rax_877
	word32 eax_879
	byte SZO_880
	byte C_881
	byte CZ_882
	byte Z_883
	word32 edx_884
	word32 r12d_885
	word16 dx_886
	byte al_887
	byte SO_888
	byte dl_889
	word32 edi_890
	byte S_891
	word32 ecx_892
	byte cl_893
	word16 ax_894
	word32 ebx_895
	word64 r11_896
	word64 r9_897
	word64 r10_898
	byte r12b_899
	word32 r14d_900
	word32 r13d_901
	word32 r15d_902
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_479,ax_486,C_822,cl_485,CZ_496,dl_481,dwLoc205C,dx_478,eax_471,ebx_487,ecx_484,edi_482,edx_476,esi_463,fs_470,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc2058,qwLoc2070_64,qwLoc2078_37,qwLoc2080_33,qwLoc28_27,qwLoc30_30,qwLoc40_42,r10_490,r11_488,r12_818,r12b_820,r12d_819,r13_462,r13d_493,r14_816,r14d_817,r15_459,r15d_494,r8_457,r9_489,rax_469,rbp_456,rbx_465,rcx_468,rdi_467,rdx_458,rsi_461,rsp_455,S_483,SCZO_821,SO_480,SZO_472,Z_475
		defs: al_887,ax_894,C_881,cl_893,CZ_882,dl_889,dx_886,eax_879,ebx_895,ecx_892,edi_890,edx_884,esi_871,fs_878,r10_898,r11_896,r12_872,r12b_899,r12d_885,r13_870,r13d_901,r14_868,r14d_900,r15_867,r15d_902,r8_865,r9_897,rax_877,rbp_864,rbx_873,rcx_876,rdi_875,rdx_866,rsi_869,rsp_863,S_891,SCZO_874,SO_888,SZO_880,Z_883
	word64 rdx_903 = r14_868
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rax rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055E9:
	rsi_105 = DPB(rsi_105, (word32) Mem62[rdx_903:byte], 0) (alias)
	*rsiOut = rsi_105
	branch (Mem62[Mem62[rax_877:word64] + 0x0000000000000001 + rsi_105 * 0x0000000000000002:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055F6:
	Mem925[rdx_903:byte] = 0x3F
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055F9:
	rdx_903 = rdx_903 + 0x0000000000000001
	branch rdx_903 != r12_872 l00000000004055E9
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405602:
	r12 = rbx_111
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405421:
	word64 r15_497 = Mem62[r13_462 + 0xFFFFFFFFFFFFDF98:word64]
	word64 r13_499 = r15_497 + rbx_111
	branch r15_497 >=u r13_499 l0000000000405612
// DataOut: edi fs r10 r11 r11d r13 r14b r14d r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405612:
	rbx_111 = 0x0000000000000000
	r12 = 0x0000000000000000
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405435:
	word64 rbx_503 = r15_497
	r12 = 0x0000000000000000
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405440:
	word32 eax_546 = (word32) Mem62[rdi_140:byte]
	rax_469 = DPB(rax_469, eax_546, 0) (alias)
	byte al_548 = (byte) eax_546
	branch al_548 > 0x3F l0000000000405520
// DataOut: al edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405520:
	branch al_548 < 0x41 l0000000000405460
// DataOut: al edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405528:
	branch al_548 <= 0x5F l0000000000405538
// DataOut: al edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l000000000040552C:
	branch (byte) (rax_469 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l000000000040544C:
	branch al_548 >= 0x25 l0000000000405538
// DataOut: al edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405454:
	branch (byte) (rax_469 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405538:
	Mem787[rbx_503:byte] = al_548
	r15_497 = r15_497 + 0x0000000000000001
	r12 = r12 + 0x0000000000000001
	rbx_503 = rbx_503 + 0x0000000000000001
	branch r15_497 <u r13_499 l0000000000405440
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l000000000040554F:
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -2070(64)

l0000000000405460:
// DataOut: fs r10 r11 r11d r12 r13 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405470:
	word64 rdx_614
	word64 r15_615
	word64 r14_616
	word32 esi_619
	word64 r12_620
	word64 rbx_621
	byte SCZO_622
	word64 rcx_624
	word32 eax_627
	byte SZO_628
	byte C_629
	byte CZ_630
	byte Z_631
	word32 edx_632
	word32 r12d_633
	word16 dx_634
	byte al_635
	byte SO_636
	byte dl_637
	word32 edi_638
	byte S_639
	word32 ecx_640
	byte cl_641
	word16 ax_642
	word32 ebx_643
	word64 r11_644
	word64 r9_645
	word64 r10_646
	byte r12b_647
	word32 r14d_648
	word32 r13d_649
	word32 r15d_650
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_548,ax_549,C_532,cl_516,CZ_597,dl_594,dx_521,eax_546,ebx_530,ecx_517,edi_606,edx_596,esi_610,fs_524,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc2058_600,qwLoc2070_64,qwLoc2078_37,qwLoc2080_33,qwLoc28_27,qwLoc30_30,qwLoc40_42,r10_513,r11_515,r12_537,r12b_539,r12d_538,r13_601,r13d_512,r14_541,r14d_542,r15_602,r15d_511,r8_529,r9_514,rax_547,rbp_544,rbx_536,rcx_604,rdi_605,rdx_607,rsi_609,rsp_545,S_518,SCZO_608,SO_595,SZO_599,Z_531
		defs: al_635,ax_642,C_629,cl_641,CZ_630,dl_637,dx_634,eax_627,ebx_643,ecx_640,edi_638,edx_632,esi_619,fs_626,r10_646,r11_644,r12_620,r12b_647,r12d_633,r13_618,r13d_649,r14_616,r14d_648,r15_615,r15d_650,r8_613,r9_645,rax_625,rbp_612,rbx_621,rcx_624,rdi_623,rdx_614,rsi_617,rsp_611,S_639,SCZO_622,SO_636,SZO_628,Z_631
	word64 r14_653 = rax_469
	word32 r14d_654 = (word32) rax_469
	*r14dOut = r14d_654
	branch rax_469 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: edi fs r10 r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405551:
	Mem772[rbx_621:byte] = 0x3F
	r15_497 = r15_615 + 0x0000000000000001
	r12 = r12_620 + 0x0000000000000001
	rbx_503 = rbx_621 + 0x0000000000000001
	branch r15_615 + 0x0000000000000001 <u r13_499 l0000000000405440
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405569:
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -2070(64)

l0000000000405499:
	branch rax_469 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: edi fs r10 r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l000000000040556B:
	Mem762[rbx_621:byte] = 0x3F
	r15_497 = r13_499
	r12 = r12_620 + 0x0000000000000001
	rbx_503 = rbx_621 + 0x0000000000000001
	branch r13_499 <u r13_499 l0000000000405440
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405582:
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -2070(64)

l00000000004054A3:
	word64 rdi_658 = (uint64) dwLoc205C
	branch rax_469 != 0x0000000000000000 l00000000004054B5
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004054B1_1:
	r14_653 = 0x0000000000000001
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004054B5:
	word32 eax_666 = wcwidth(rdi_658)
	branch eax_666 < 0x00000000 l0000000000405510
// DataOut: al eax fs r10 r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405510:
	Mem749[rbx_621:byte] = 0x3F
// DataOut: eax fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004054BE:
	word64 rsi_720 = r15_615 + r14_653
	word64 rdx_722 = rbx_621
	r15_727 = r15_615
// DataOut: al fs r10 r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004054C8:
	word64 r15_727
	rdx_722 = rdx_722 + 0x0000000000000001
	Mem738[rdx_722 - 0x0000000000000001:byte] = (byte) (word32) Mem62[rdi_658 - 0x0000000000000001:byte]
	r15_727 = r15_727 + 0x0000000000000001
	branch r15_727 != rsi_720 l00000000004054C8
// DataOut: al fs r10 r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004054DD:
// DataOut: eax fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004054E5:
	word64 rdx_678
	word64 r14_680
	word32 esi_683
	byte SCZO_686
	word64 rcx_688
	word32 eax_691
	byte SZO_692
	byte C_693
	byte CZ_694
	byte Z_695
	word32 edx_696
	word32 r12d_697
	word16 dx_698
	byte al_699
	byte SO_700
	byte dl_701
	word32 edi_702
	byte S_703
	word32 ecx_704
	byte cl_705
	word16 ax_706
	word32 ebx_707
	word64 r11_708
	word64 r9_709
	word64 r10_710
	byte r12b_711
	word32 r14d_712
	word32 r13d_713
	word32 r15d_714
	call mbsinit (retsize: 8; depth: 8)
		uses: al_668,ax_669,C_672,cl_641,CZ_630,dl_637,dwLoc205C,dx_634,eax_666,ebx_643,ecx_640,edi_674,edx_632,esi_619,fs_626,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc2058_600,qwLoc2070_64,qwLoc2078_37,qwLoc2080_33,qwLoc28_27,qwLoc30_30,qwLoc40_42,r10_646,r11_644,r12_620,r12b_647,r12d_633,r13_618,r13d_649,r14_664,r14d_665,r15_615,r15d_650,r8_613,r9_645,rax_667,rbp_612,rbx_621,rcx_624,rdi_673,rdx_614,rsi_617,rsp_611,S_671,SCZO_655,SO_636,SZO_670,Z_661
		defs: al_699,ax_706,C_693,cl_705,CZ_694,dl_701,dx_698,eax_691,ebx_707,ecx_704,edi_702,edx_696,esi_683,fs_690,r10_710,r11_708,r12_684,r12b_711,r12d_697,r13_682,r13d_713,r14_680,r14d_712,r15_679,r15d_714,r8_677,r9_709,rax_689,rbp_676,rbx_685,rcx_688,rdi_687,rdx_678,rsi_681,rsp_675,S_703,SCZO_686,SO_700,SZO_692,Z_695
	branch eax_691 == 0x00000000 l0000000000405470
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004054F9:
	branch r15_497 <u r13_499 l0000000000405440
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l0000000000405502:
	rbx_111 = rbx_503 - qwLoc2070
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405350:
	branch rcx == 0x0000000000000000 l0000000000405379
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -2070(64)

l000000000040535A:
	word64 rdx_314
	word64 r15_315
	word64 r14_316
	word64 r13_318
	word32 esi_319
	word64 r12_320
	byte SCZO_322
	word64 rcx_324
	word64 rax_325
	word32 eax_327
	byte SZO_328
	byte C_329
	byte CZ_330
	byte Z_331
	word32 edx_332
	word32 r12d_333
	word16 dx_334
	byte al_335
	byte SO_336
	byte dl_337
	word32 edi_338
	byte S_339
	word32 ecx_340
	byte cl_341
	word16 ax_342
	word32 ebx_343
	word64 r11_344
	word64 r9_345
	word64 r10_346
	byte r12b_347
	word32 r14d_348
	word32 r13d_349
	word32 r15d_350
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_74,cl,CZ_61,dl,dx,eax_78,ebx_55,ecx,edi_76,edx,esi_70,fs,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc2058,qwLoc2070_64,qwLoc2078_37,qwLoc2080_33,qwLoc28_27,qwLoc30_30,qwLoc40_42,r10_65,r11_67,r12,r12b,r12d,r13_20,r13d_21,r14_15,r14d_16,r15,r15d,r8_72,r9_66,rax_77,rbp_7,rbx_54,rcx_68,rdi_69,rdx_71,rsi_75,rsp_81,S,SCZO_298,SO,SZO_73,Z_299
		defs: al_335,ax_342,C_329,cl_341,CZ_330,dl_337,dx_334,eax_327,ebx_343,ecx_340,edi_338,edx_332,esi_319,fs_326,r10_346,r11_344,r12_320,r12b_347,r12d_333,r13_318,r13d_349,r14_316,r14d_348,r15_315,r15d_350,r8_313,r9_345,rax_325,rbp_312,rbx_321,rcx_324,rdi_323,rdx_314,rsi_317,rsp_311,S_339,SCZO_322,SO_336,SZO_328,Z_331
	branch rax_325 <=u 0x0000000000000001 l00000000004053CD
// DataOut: edi fs r10 r11 r11d r13 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -2070(64)

l00000000004053CD:
	word64 r14_373 = Mem62[r13_318 + 0xFFFFFFFFFFFFDF98:word64]
	word32 r14d_374 = (word32) r14_373
	*r14dOut = r14d_374
	word64 r13_375 = r14_373 + rbx_111
	branch r14_373 >=u r13_375 l000000000040560A
// DataOut: edi fs r10 r11 r11d r13 r14 r14b r14d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040560A:
	r12 = 0x0000000000000000
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053E1:
	word64 r15_383
	word64 r14_384
	word64 r13_386
	word32 esi_387
	word64 r12_388
	byte SCZO_390
	word64 rcx_392
	word64 rax_393
	word32 eax_395
	byte SZO_396
	byte C_397
	byte CZ_398
	byte Z_399
	word32 edx_400
	word32 r12d_401
	word16 dx_402
	byte al_403
	byte SO_404
	byte dl_405
	word32 edi_406
	byte S_407
	word32 ecx_408
	byte cl_409
	word16 ax_410
	word32 ebx_411
	word64 r11_412
	word64 r9_413
	word64 r10_414
	byte r12b_415
	word32 r14d_416
	word32 r13d_417
	word32 r15d_418
	word64 rdx_382
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_335,ax_342,C_378,cl_341,CZ_352,dl_337,dx_334,eax_327,ebx_343,ecx_340,edi_338,edx_332,esi_319,fs_326,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc2058,qwLoc2070_64,qwLoc2078_37,qwLoc2080_33,qwLoc28_27,qwLoc30_30,qwLoc40_42,r10_346,r11_344,r12_320,r12b_347,r12d_333,r13_375,r13d_376,r14_373,r14d_374,r15_315,r15d_350,r8_313,r9_345,rax_325,rbp_312,rbx_321,rcx_324,rdi_323,rdx_314,rsi_317,rsp_311,S_339,SCZO_377,SO_336,SZO_328,Z_331
		defs: al_403,ax_410,C_397,cl_409,CZ_398,dl_405,dx_402,eax_395,ebx_411,ecx_408,edi_406,edx_400,esi_387,fs_394,r10_414,r11_412,r12_388,r12b_415,r12d_401,r13_386,r13d_417,r14_384,r14d_416,r15_383,r15d_418,r8_381,r9_413,rax_393,rbp_380,rbx_389,rcx_392,rdi_391,rdx_382,rsi_385,rsp_379,S_407,SCZO_390,SO_404,SZO_396,Z_399
	r12 = 0x0000000000000000
	word64 rcx_424 = Mem62[rax_393:word64]
	word64 rax_427 = r14_384
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053F0:
	rdx_382 = DPB(rdx_382, (word32) Mem62[rax_427:byte], 0) (alias)
	r12 = r12 - 0xFF - (((word16) ((word32) Mem62[rcx_424 + rdx_382 * 0x0000000000000002:word16]) & 0x4000) <u 0x0001)
	rax_427 = rax_427 + 0x0000000000000001
	branch rax_427 != r13_386 l00000000004053F0
// DataOut: edi fs r10 r11 r11d r12 r13 r14b r14d r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040540D:
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405365:
	word32 edi_354
	*ediOut = (word32) qwLoc2070
	word32 ebx_361
	word32 r12d_364
	word32 r13d_365
	word32 r14d_366
	word32 r15d_367
	r12 = (int64) (word32) fn000000000040D240(0x00000000, rbx_111, qwLoc2070, fs, out ebx_361, out rsi_105, out rdi_140, out r12d_364, out r13d_365, out r14d_366, out r15d_367)
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405379:
	word64 rcx_121 = Mem62[rbp_119 + 0xFFFFFFFFFFFFDF88:word64]
	branch rcx_121 == 0x0000000000000000 l0000000000405399
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405385:
	word64 rdx_261
	word64 r15_262
	word64 r14_263
	word64 r13_265
	word32 esi_266
	byte SCZO_269
	word64 rcx_271
	word64 rax_272
	word32 eax_274
	byte SZO_275
	byte C_276
	byte CZ_277
	byte Z_278
	word32 edx_279
	word32 r12d_280
	word16 dx_281
	byte al_282
	byte SO_283
	byte dl_284
	word32 edi_285
	byte S_286
	word32 ecx_287
	byte cl_288
	word16 ax_289
	word32 ebx_290
	word64 r11_291
	word64 r9_292
	word64 r10_293
	byte r12b_294
	word32 r14d_295
	word32 r13d_296
	word32 r15d_297
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_109,ax_110,C_124,cl_90,CZ_97,dl_93,dx_95,eax_108,ebx_104,ecx_91,edi_254,edx_96,esi_257,fs_98,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc2058_84,qwLoc2070_64,qwLoc2078_37,qwLoc2080_33,qwLoc28_27,qwLoc30_30,qwLoc40_42,r10_87,r11_89,r12_112,r12b_114,r12d_113,r13_115,r13d_86,r14_116,r14d_117,r15_118,r15d_85,r8_103,r9_88,rax_107,rbp_119,rbx_111,rcx_121,rdi_253,rdx_255,rsi_256,rsp_120,S_92,SCZO_100,SO_94,SZO_122,Z_123
		defs: al_282,ax_289,C_276,cl_288,CZ_277,dl_284,dx_281,eax_274,ebx_290,ecx_287,edi_285,edx_279,esi_266,fs_273,r10_293,r11_291,r12_267,r12b_294,r12d_280,r13_265,r13d_296,r14_263,r14d_295,r15_262,r15d_297,r8_260,r9_292,rax_272,rbp_259,rbx_268,rcx_271,rdi_270,rdx_261,rsi_264,rsp_258,S_286,SCZO_269,SO_283,SZO_275,Z_278
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405399:
	branch Mem62[rbp_119 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053A5:
	Mem252[r8_103:word64] = r12
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053A8:
	word64 rbx_170 = Mem62[rbp_119 - 0x0000000000000038:word64] ^ Mem62[fs:0x00000028:word64]
	branch rbx_170 != 0x0000000000000000 l000000000040561C
// DataOut: edi fs r10 r11 r11d r12 r14b r14d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040561C:
	__stack_chk_fail()
	word64 rsp_218 = rsp_120 - 0x0000000000000008
	Mem219[rsp_218:word64] = r12
	Mem221[rsp_218 - 0x0000000000000008:word64] = rbp_119
	Mem223[rsp_218 - 0x0000000000000010:word64] = rbx_170
	word64 rax_224 = Mem223[rsi_105 + 0x0000000000000018:word64]
	word64 rbp_228 = Mem223[rsi_105 + 0x0000000000000010:word64]
	word64 r12_232 = (uint64) ((word32) (rax_224 - rbp_228) >>u 0x00000003)
	branch r12_232 == 0x0000000000000000 l00000000004056DB
// DataOut: fs r10 r11 r11d r12 r14b r14d r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rsi_245
	word32 edi_246
	byte r12b_247
	return fn000000000040564F(rax_224, rbp_228, rsi_105, rdi_140, r12_232, out rsi_245, out edi_246, out r12b_247)
// DataOut: edi fs r10 r11 r11d r12b r14b r14d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8352(fp):<invalid> -8344(fp):fp - 0x0000000000000008 -8336(fp):r12 -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rsi_238
	word32 edi_239
	byte r12b_240
	return fn000000000040564F(rax_224, rbp_228, rsi_105, rdi_140, r12_232, out rsi_238, out edi_239, out r12b_240)
// DataOut: edi fs r10 r11 r11d r12b r14b r14d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8352(fp):<invalid> -8344(fp):fp - 0x0000000000000008 -8336(fp):r12 -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053BE:
	word64 rsp_202 = rbp_119 - 0x0000000000000028
	byte r12b_207
	*r12bOut = (byte) Mem62[rsp_202 + 0x0000000000000008:word64]
	word32 r14d_212
	*r14dOut = (word32) Mem62[rsp_202 + 0x0000000000000018:word64]
	return rbx_111
// DataOut: edi fs r10 r11 r11d r12b r14b r14d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

fn00000000004052D0_exit:
// DataOut: edi r10 r11 r11d r12b r14b r14d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> eax:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8352(fp):<invalid> -8344(fp):fp - 0x0000000000000008 -8336(fp):r12 -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp



void fn0000000000405630(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405630_entry:
// DataOut: r13 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_14 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_18 = (uint64) ((word32) (rax_13 - rbp_14) >>u 0x00000003)
	branch r12_18 == 0x0000000000000000 l00000000004056DB_in_fn0000000000405630
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004056DB_in_fn0000000000405630:
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000405649_thunk_fn000000000040564F:
	word64 rsi_33
	word32 edi_34
	byte r12b_35
	fn000000000040564F(rax_13, rbp_14, rsi, rdi, r12_18, out rsi_33, out edi_34, out r12b_35)
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040564F(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r12, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r12 rax rbp rdi rsi
// LiveOut: edi r12b rax rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040564F_entry:
// DataOut: fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040564F:
	branch rax == rbp l00000000004056E6
// DataOut: fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004056E6:
	Mem117[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3

l0000000000405658:
	word64 rcx_10 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word32 edx_18 = (word32) (uint64) ~(word32) (uint64) (word32) rcx_10
	word64 rcx_15 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_20 = (int64) edx_18 & rax + rcx_10
	word64 rax_21 = Mem0[rsi + 0x0000000000000008:word64]
	Mem23[rsi + 0x0000000000000018:word64] = rdx_20
	branch rdx_20 - rax_21 > rcx_15 - rax_21 l00000000004056E0
// DataOut: fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3

l00000000004056E0:
	Mem115[rsi + 0x0000000000000018:word64] = rcx_15
// DataOut: fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l0000000000405683:
	Mem33[rsi + 0x0000000000000010:word64] = Mem23[rsi + 0x0000000000000018:word64]
	fputs_unlocked(rdi, Mem33[0x000000000061A610:word64])
	word64 rbx_29 = 0x0000000000000000
// DataOut: fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l00000000004056A0:
	__printf_chk(0x0000000000000001, 0x0000000000413759)
	word64 rsi_40
	*rsiOut = 0x0000000000413759
	rbx_29 = rbx_29 + 0x0000000000000001
	branch r12 >u rbx_29 l00000000004056A0
// DataOut: fs r10 r11 r11d r12 r13 r14b r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:0x0000000000000001

l00000000004056BF:
	word64 rdi_48 = Mem33[0x000000000061A610:word64]
	word32 edi_49 = (word32) rdi_48
	*ediOut = edi_49
	word64 rax_50 = Mem33[rdi_48 + 0x0000000000000028:word64]
	branch rax_50 >=u Mem33[rdi_48 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: edi fs r10 r11 r11d r13 r14b r14d r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:0x0000000000000001

l00000000004056EF:
	word64 rsp_95
	word64 rax_96
	word64 rbp_97
	byte SCZO_98
	byte Z_99
	word64 rsi_100
	word64 rcx_101
	word32 ecx_102
	word64 rdx_103
	word32 edx_104
	byte SZO_105
	byte C_106
	word64 rbx_107
	word32 ebx_108
	word64 rdi_109
	word32 eax_110
	word64 r12_111
	byte CZ_112
	word32 edi_113
	byte r12b_114
	call __overflow (retsize: 8; depth: 8)
		uses: C_53,CZ_47,eax_51,ebx_43,ecx_16,edi_49,edx_18,r12_91,r12b_92,rax_50,rbp_89,rbx_87,rcx_15,rdi_48,rdx_38,rsi_94,rsp_93,SCZO_52,SZO_31,Z_5
		defs: C_106,CZ_112,eax_110,ebx_108,ecx_102,edi_113,edx_104,r12_111,r12b_114,rax_96,rbp_97,rbx_107,rcx_101,rdi_109,rdx_103,rsi_100,rsp_95,SCZO_98,SZO_105,Z_99
	return rax_96
// DataOut: edi fs r10 r11 r11d r12b r13 r14b r14d r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

l00000000004056D0:
	Mem78[rdi_48 + 0x0000000000000028:word64] = rax_50 + 0x0000000000000001
	Mem79[rax_50:byte] = 0x0A
// DataOut: edi fs r10 r11 r11d r13 r14b r14d r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

l00000000004056DB:
	byte r12b_85
	*r12bOut = (byte) Mem79[v3 + 0x0000000000000010:word64]
	return rax_50
// DataOut: edi fs r10 r11 r11d r12b r13 r14b r14d r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

fn000000000040564F_exit:
// DataOut: edi r12b rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:v3 + 0x0000000000000018 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rbp:<invalid> r12:<invalid>



word64 fn0000000000405700(word32 edx, word64 rdi, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi
// LiveOut: r12
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbp rbx rsp
fn0000000000405700_entry:
// DataOut: edx fs r11 r11d r12 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_120
	word32 ebx_12 = (word32) (uint64) edx
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r11d r12 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405780:
	__printf_chk(0x0000000000000001, 0x000000000041375E)
	rbp_120 = (int64) ebx_12
// DataOut: fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:(uint64) edx -16(fp):rbx -8(fp):rbp

l0000000000405710:
	word32 ebx_52
	word64 rsi_53
	word32 edi_54
	word64 r13_56
	word64 r14_57
	word64 r15_58
	word32 eax_60 = (word32) fn000000000040D420(0x00000000, rdi, fs, out ebx_52, out rsi_53, out edi_54, out r12, out r13_56, out r14_57, out r15_58)
	word64 rsi_61 = Mem0[0x000000000061A610:word64]
	word32 ebx_118 = (word32) (uint64) (ebx_52 - eax_60)
	branch ebx_118 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r11d r12 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:(uint64) edx -16(fp):rbx -8(fp):rbp

l0000000000405725_1:
	ebx_118 = 0x00000000
// DataOut: ebx fs r11 r11d r12 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 eax:0x00000000 rdx:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405728:
	fputs_unlocked(rdi, rsi_61)
	rbp_120 = (int64) ebx_118 + (uint64) strlen(rdi)
// DataOut: ebx fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> eax:0x00000000 rdx:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405740:
	word64 rdi_97 = Mem0[0x000000000061A610:word64]
	word64 rcx_99 = Mem0[rdi_97 + 0x0000000000000028:word64]
	branch rcx_99 >=u Mem0[rdi_97 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r11d r12 r8 rbp rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405799:
	word64 rsp_130
	word64 rdi_132
	word64 rbx_133
	word32 edx_135
	byte SCZO_136
	byte SZO_137
	byte C_138
	byte Z_139
	word32 esi_140
	word64 rsi_141
	word32 eax_142
	word64 rax_143
	byte S_144
	word64 rcx_145
	word32 edi_146
	word64 rdx_147
	selector fs_148
	word64 r13_150
	word64 r14_151
	word64 r15_152
	call __overflow (retsize: 8; depth: 8)
		uses: C_101,eax_85,ebx_91,edi_98,edx_89,esi_87,fs_83,qwLoc08_4,qwLoc10_9,r12_82,r13_81,r14_80,r15_79,rax_93,rbp_95,rbx_94,rcx_99,rdi_97,rdx_90,rsi_129,rsp_96,S_84,SCZO_100,SZO_88,Z_92
		defs: C_138,eax_142,ebx_134,edi_146,edx_135,esi_140,fs_148,r12_149,r13_150,r14_151,r15_152,rax_143,rbp_131,rbx_133,rcx_145,rdi_132,rdx_147,rsi_141,rsp_130,S_144,SCZO_136,SZO_137,Z_139
// DataOut: ebx fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405751:
	Mem127[rdi_97 + 0x0000000000000028:word64] = rcx_99 + 0x0000000000000001
	Mem128[rcx_99:byte] = 0x20
// DataOut: ebx fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp

l000000000040575C:
	ebx_118 = (word32) (uint64) (ebx_118 - 0x00000001) (alias)
	branch ebx_118 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405764:
	Mem40[0x000000000061B018:word64] = rbp_120 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	return r12
// DataOut: fs r11 r11d r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405700_exit:
// DataOut: r12
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, selector fs, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r8 rsi
// LiveOut: r12 rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsp
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r11d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_18 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r11d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057C0:
	rax_18 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r11d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:0x0000000000413764 rbx:(uint64) edi -8(fp):rbx
// LocalsOut: fp(64)

l00000000004057E0:
	rax_18 = fn000000000040C9B0(rsi, edi, r8)
	esi = (word32) (uint64) esi (alias)
// DataOut: esi fs r11 r11d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbx:(uint64) edi -8(fp):rbx
// LocalsOut: fp(64)

l00000000004057CB:
	word32 edx_25 = (word32) (uint64) esi
// DataOut: edx fs r11 r11d r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbx:(uint64) edi rsi:<invalid> rdx:<invalid> rdi:<invalid> eax:<invalid> -12(fp):esi -8(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	word64 r12_32
	*r12Out = fn0000000000405700(edx_25, rax_18, fs)
	return rbp
// DataOut: fs r11 r11d r12 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdx:(uint64) esi rsi:(uint64) edi rdi:<invalid> eax:<invalid> -12(fp):esi -8(fp):rbx

fn00000000004057B0_exit:
// DataOut: r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> eax:<invalid> ebx:<invalid> rbp:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r12:<invalid> r14:<invalid> -12(fp):esi -8(fp):rbx



word32 fn0000000000405810(word32 edi, word64 r11, word64 r15, selector fs, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12dOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r15
// LiveOut: eax r10 r11 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 rbp rbx rsp
fn0000000000405810_entry:
// DataOut: edi fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word64 rsp_21
	word64 rbp_22
	word64 r8_23
	word64 r9_24
	word64 r10_25
	word64 r11_26
	word64 r12_27
	word64 r13_28
	word64 r14_29
	word64 r15_30
	word64 rbx_31 = fn000000000040EAB0(r11, r15, fs, out rsp_21, out rbp_22, out r8_23, out r9_24, out r10_25, out r11_26, out r12_27, out r13_28, out r14_29, out r15_30)
	__errno_location()
	word64 rsp_46
	word64 r12_47
	word32 r12d_48
	word32 edi_49
	word64 rdi_50
	word64 rdx_51
	word64 rbp_52
	word64 rbx_53
	word64 rsi_54
	word64 rax_55
	word32 esi_56
	byte SZO_57
	byte C_58
	word64 rcx_60
	byte r12b_61
	byte Z_62
	word64 r11_63
	word64 r15_64
	selector fs_65
	word64 r8_66
	word64 r9_67
	word64 r10_68
	word64 r13_69
	word64 r14_70
	word32 eax_110
	call error (retsize: 8; depth: 8)
		uses: C_43,eax_41,edi_39,esi_37,fs,qwLoc08_4,qwLoc10_12,qwLoc18_15,r10_25,r11_26,r12_27,r12b_7,r13_28,r14_29,r15_30,r8_23,r9_24,rax_40,rbp_33,rbx_31,rcx_44,rdi_38,rdx_45,rsi_36,rsp_21,SZO_42
		defs: C_58,eax_59,edi_49,esi_56,fs_65,r10_68,r11_63,r12_47,r12b_61,r12d_48,r13_69,r14_70,r15_64,r8_66,r9_67,rax_55,rbp_52,rbx_53,rcx_60,rdi_50,rdx_51,rsi_54,rsp_46,SZO_57,Z_62
	branch r12b_61 == 0x00 l0000000000405850
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	eax_110 = (word32) (uint64) Mem0[0x000000000061B030:word32] (alias)
	branch eax_110 != 0x00000000 l000000000040584A
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040585A:
	Mem118[0x000000000061B030:word32] = 0x00000001
	word32 r12d_120
	*r12dOut = (word32) Mem118[rsp_46 + 0x0000000000000010:word64]
	return eax_110
// DataOut: eax fs r10 r11 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000405840:
	Mem108[0x000000000061B030:word32] = 0x00000002
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040584A:
	word32 r12d_105
	*r12dOut = (word32) Mem0[rsp_46 + 0x0000000000000010:word64]
	return eax_110
// DataOut: eax fs r10 r11 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000405810_exit:
// DataOut: eax r10 r11 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_129
	word32 eax_107
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_107 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_129 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C25:
	word32 eax_102 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_102 != 0x00008000 l0000000000405CA0
// DataOut: dil eax edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_129 = eax_102 == 0x00004000
// DataOut: cl dil edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C55:
	eax_107 = 0x0000002F (alias)
	branch cl_129 != 0x00 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax edi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C6B:
	word32 eax_53
	branch dil == 0x00 l0000000000405CC0
// DataOut: edi edx esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CC0:
	eax_107 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CCE:
	eax_107 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid>

l0000000000405CDC:
	eax_53 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax edi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid>

l0000000000405C70:
	word64 rsi_61 = (uint64) (esi & 0x0000F000)
	*rsiOut = rsi_61
	word32 esi_62 = (word32) rsi_61
	eax_107 = 0x00000040 (alias)
	branch esi_62 == 0x0000A000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C83:
	eax_107 = 0x0000007C (alias)
	branch esi_62 == 0x00001000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid> rsi:<invalid>

l0000000000405C90:
	eax_53 = DPB(0x0000007C, esi_62 == 0x0000C000, 0) (alias)
// DataOut: eax edi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid> rsi:<invalid>

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_53 & 0x0000003D)
// DataOut: al eax edi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid> rsi:<invalid>

l0000000000405C33:
	eax_107 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax edi esi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405CB0:
	word64 rsi_114 = (uint64) (esi & 0x00000049)
	*rsiOut = rsi_114
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - cond((word32) rsi_114 - 0x00000001)) & 0x0000002A)
// DataOut: al eax edi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C3E:
	return eax_107
// DataOut: al eax edi fs r11 r11d r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> rsi:<invalid>

fn0000000000405C20_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid>



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rdi rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r11 r11d r14 r15 r15b r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 edi_6 = (word32) dil
	word64 rsi_12
	word32 eax_13 = fn0000000000405C20(edx, esi, (byte) edi_6, out rsi_12)
	word64 rbx_18 = (uint64) eax_13
	word64 rdi_8
	*rdiOut = DPB(rdi, edi_6, 0)
	byte bl_20 = (byte) rbx_18
	branch (byte) eax_13 == 0x00 l0000000000405D33
// DataOut: bl fs r11 r11d r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405D10:
	word64 rdi_47 = Mem0[0x000000000061A610:word64]
	*rdiOut = rdi_47
	word64 rax_50 = Mem0[rdi_47 + 0x0000000000000028:word64]
	branch rax_50 >=u Mem0[rdi_47 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r11 r11d r14 r15 r15b r8 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D3A:
	word64 rsp_80
	word64 rbx_81
	word32 edi_82
	byte dil_83
	byte al_84
	byte SZO_85
	byte C_86
	word32 ebx_87
	word32 eax_88
	byte Z_89
	word64 rdi_90
	word64 rax_91
	byte SCZO_92
	word64 rdx_93
	word32 esi_95
	word32 edx_96
	word64 rsi_97
	call __overflow (retsize: 8; depth: 16)
		uses: al_51,bl_20,C_54,dil_49,eax_52,ebx_19,edi_48,edx,esi_78,qwLoc08_4,rax_50,rbx_18,rdi_47,rdx,rsi_79,rsp_2,SCZO_53,SZO_15,Z_16
		defs: al_84,bl_94,C_86,dil_83,eax_88,ebx_87,edi_82,edx_96,esi_95,rax_91,rbx_81,rdi_90,rdx_93,rsi_97,rsp_80,SCZO_92,SZO_85,Z_89
// DataOut: bl fs r11 r11d r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D21:
	Mem76[rdi_47 + 0x0000000000000028:word64] = rax_50 + 0x0000000000000001
	Mem77[rax_50:byte] = bl_20
// DataOut: bl fs r11 r11d r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D2B:
	Mem73[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r11 r11d r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D33:
	return bl_20 != 0x00
// DataOut: al fs r11 r11d r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -8(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, selector fs, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12b r9 rax
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbp rbx rsp
fn0000000000405D50_entry:
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rbx_10 = 0x0000000000000000
	word64 rax_17 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: fs r11 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 rsi_215
	word64 rax_216 = fn000000000040CD70(fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000018:word64], out rsi_215)
	rax_17 = DPB(rax_216, strlen(rax_216), 0) (alias)
	rbx_10 = rax_17 + 0x0000000000000001
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	rbx_10 = (int64) Mem0[0x000000000061B178:word32] + 0x0000000000000001
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_17 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 r8_195
	word64 r9_196
	word64 r10_197
	word64 rax_199 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out r8_195, out r9_196, out r10_197, out r11)
	rax_17 = DPB(rax_199, strlen(rax_199), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:<invalid> eax:0x00000002 rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DA8:
	rax_17 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DB3:
	rbx_10 = rbx_10 + rax_17
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DBF:
	word64 rax_144
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E40:
	rax_144 = DPB(rax_17, strlen(Mem0[rdi + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DC8:
	rax_144 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DD3:
	rbx_10 = rbx_10 + rax_144
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DD6:
	word64 r8_68
	word64 r9_69
	word64 r10_70
	word64 r11_71
	byte r12b_72
	word32 r14d_73
	word32 edi_123
	word64 rsi_130
	fn00000000004052D0(fp - 0x00000000000002C0, Mem0[0x000000000061B0E8:word64], Mem0[rdi:word64], r11, fs, out rsi_130, out edi_123, out r8_68, out r9_69, out r10_70, out r11_71, out r12b_72, out r14d_73)
	word64 rax_75 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_138 = rbx_10 + Mem0[fp - 0x00000000000002C0:word64]
	branch (word32) rax_75 == 0x00000000 l0000000000405E1C
// DataOut: edi fs r11 r12b r13 r14 r14d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405DFC:
	edi_123 = (word32) Mem0[rdi + 0x00000000000000B0:byte]
	rbx_138 = rbx_138 + DPB(rax_75, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rdi + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rdi + 0x0000000000000028:word32]), (byte) edi_123, out rsi_130) != 0x00), 0)
// DataOut: edi fs r11 r12b r13 r14 r14d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ecx:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405E1C:
	branch (Mem0[fp - 0x0000000000000020:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: edi fs r11 r12b r13 r14 r14d r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
// DataOut: edi fs r11 r13 r14 r14d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405EC4_thunk_fn0000000000405ED0:
	word64 r9_118
	byte r12b_119
	return fn0000000000405ED0(rsi_130, edi_123, r8_68, r11_71, r13, r14, fs, out r9_118, out r12b_119)
// DataOut: fs r12b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405E36:
	return rbx_138
// DataOut: fs r12b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r8:<invalid> cl:<invalid> edx:<invalid> r11:<invalid> dl:<invalid> r9:<invalid> sil:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000405ED0(word64 rsi, word32 edi, word64 r8, word64 r11, word64 r13, word64 r14, selector fs, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r13 r14 r14d r8 rsi
// LiveOut: r12b r9 rax
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 rbp rbx rsp
fn0000000000405ED0_entry:
	*r9Out = r9
// DataOut: edi fs r11 r13 r14 r14d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 r12_21 = (uint64) edi
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	byte r12b_23
	*r12bOut = (byte) r12_21
	word64 rbx_120 = rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: fs r11 r12 r13 r14 r14d r8 r9 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405EEF_1:
	rbx_120 = rax_8
// DataOut: fs r11 r12 r13 r14 r14d r8 r9 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405EF3:
	word64 rax_317
	word64 rsi_312
	word64 r8_311
	branch rbx_120 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: fs r11 r12 r13 r14 r14d r8 r9 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060C8:
	rax_317 = 0x0000000000000000
	r8_311 = rdx_6
	rsi_312 = Mem0[0x000000000061B028:word64]
	branch rbx_120 == 0x0000000000000000 l0000000000406004
// DataOut: fs r11 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060DD:
// DataOut: fs r11 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F00:
	word64 rbp_388
	word64 rdi_348 = Mem0[0x000000000061B028:word64]
	word32 edi_349 = (word32) rdi_348
	branch rbx_120 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: edi fs r11 r12 r13 r14 r14d r8 r9 rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406170:
	branch rbx_120 >u 0x0000000055555555 l000000000040619D
// DataOut: edi fs r11 r12 r13 r14 r14d r8 r9 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040617F:
	rbp_388 = rbx_120 * 0x0000000000000002
	Mem490[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp_388 + rbx_120 << 0x0000000000000004, rdi_348, out r8)
// DataOut: fs r11 r12 r13 r14 r14d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:0x0000000055555555 r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F16:
	branch rax_8 >u 0x00000000AAAAAAAA l000000000040619D
// DataOut: edi fs r11 r12 r13 r14 r14d r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F29:
	word64 rax_475 = fn0000000000410C90(0x00000000AAAAAAAA, rax_8 * 0x0000000000000018, rdi_348, out r8)
	rbp_388 = Mem0[0x000000000061B020:word64]
	Mem478[0x000000000061B028:word64] = rax_475
// DataOut: fs r11 r12 r13 r14 r14d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:0x00000000AAAAAAAA rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F44:
	word64 rax_389 = Mem0[0x000000000061A660:word64]
	word64 rdi_392 = rbp_388 - rax_389
	rsi = rbp_388 + 0x0000000000000001 + rax_389
	edi_349 = (word32) rdi_392 (alias)
	word64 rcx_395 = rsi *s rdi_392
	branch rbp_388 >u rsi l000000000040619D
// DataOut: edi fs r11 r12 r13 r14 r14d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F66:
	branch rsi != (uint64) ((uint128) ((uint64) rcx_395) /u rdi_392) l000000000040619D
// DataOut: edi fs r11 r12 r13 r14 r14d r8 r9 rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F77:
	branch rcx_395 >>u 0x0000000000000001 >u 0x00000000FFFFFFFF l000000000040619D
// DataOut: edi fs r11 r12 r13 r14 r14d r8 r9 rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040619D:
	fn0000000000410E50()
// DataOut: edi fs r12 r13 r14 r14d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word64 rsi_370
	word64 r8_371
	word64 r9_372
	word64 r10_373
	word64 r11_374
	word32 r12d_375
	word32 r14d_376
	word64 r15_377
	return fn00000000004061B0(rsi, edi_349, r8, r12_21, r13, r14, fs, out rsi_370, out r8_371, out r9_372, out r10_373, out r11_374, out r12d_375, out r14d_376, out r15_377)
// DataOut: fs r12b r9 rax
// DataOut (flags): 
// SymbolicIn: -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F8D:
	word64 rax_414 = fn0000000000410C40(rsi, (rcx_395 >>u 0x0000000000000001) * 0x0000000000000008)
	word64 rcx_418 = Mem0[0x000000000061A660:word64]
	branch rbp_388 <=u rcx_418 l0000000000405FE4
// DataOut: fs r11 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:0x00000000FFFFFFFF r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405FA6:
	word64 rsi_438 = Mem0[0x000000000061B028:word64]
	word64 rcx_441 = rcx_418 * 0x0000000000000008 + 0x00000008
	word64 rdx_443 = rsi_438 + (rcx_418 * 0x0000000000000003) * 0x0000000000000008 + 0x0000000000000010
	word64 rsi_446 = rsi_438 + (rbp_388 * 0x0000000000000003) * 0x0000000000000008
// DataOut: fs r11 r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405FD0:
	Mem450[rdx_443 + 0x0000000000000000:word64] = rax_414
	rdx_443 = rdx_443 + 0x0000000000000018
	rax_414 = rax_414 + rcx_441
	rcx_441 = rcx_441 + 0x0000000000000008
	branch rdx_443 != rsi_446 l0000000000405FD0
// DataOut: fs r11 r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405FE4:
	Mem435[0x000000000061A660:word64] = rbp_388
	rax_317 = 0x0000000000000000
	r8_311 = Mem435[0x000000000061B1B0:word64]
	rsi_312 = Mem435[0x000000000061B028:word64]
	branch rbx_120 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r11 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060E0:
	word64 rcx_323 = Mem0[rsi_312 + 0x0000000000000010:word64]
	Mem325[rsi_312:byte] = 0x01
	word64 rdi_321 = rax_317 + 0x0000000000000001
	Mem327[rsi_312 + 0x0000000000000008:word64] = rdi_321 * 0x0000000000000003
	word64 rdx_328 = 0x0000000000000000
// DataOut: fs r11 r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060F8:
	Mem334[rcx_323 + rdx_328 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_328 = rdx_328 + 0x0000000000000001
	branch rdx_328 <=u rax_317 l00000000004060F8
// DataOut: fs r11 r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406109:
	rsi_312 = rsi_312 + 0x0000000000000018
	branch rdi_321 == rbx_120 l0000000000406004
// DataOut: fs r11 r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406116:
	rax_317 = rdi_321
// DataOut: fs r11 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406004:
	word64 rbp_181 = 0x0000000000000000
	branch r8_311 == 0x0000000000000000 l000000000040612D
// DataOut: fs r11 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040600F:
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406010:
	byte r12b_187
	word64 r9_186
	word64 rax_188 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_181 * 0x0000000000000008:word64], r11, fs, out r9_186, out r12b_187)
	r11 = rax_188
	word64 r14_193 = Mem0[0x000000000061B1B0:word64]
	branch rbx_120 == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406033:
	word64 r13_217 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_218 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	word64 rcx_219 = 0x0000000000000001
	rsi_226 = rsi_218
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060A7:
	word64 rsi_226
	r9_186 = r9_186 - 0x0000000000000001
	*r9Out = r9_186
	branch Mem0[rsi_226:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060B3:
	word64 r10_262
	branch r12b_187 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406050:
	r10_262 = (uint64) ((uint128) (uint64) rbp_181 /u (uint64) ((uint128) ((uint64) ((rsi_218 - 0x0000000000000001) + rcx_502)) /u rcx_502))
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060B8:
	r10_262 = (uint64) ((uint128) (uint64) rbp_181 % rcx_502)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040606A:
	word64 rdx_268 = rax_188 + (uint64) (r9_186 != r10_262) * 0x0000000000000002
	word64 rax_271 = Mem0[rsi_226 + 0x0000000000000000:word64] + r10_262 * 0x0000000000000008
	r9_186 = Mem0[rcx_502:word64]
	*r9Out = r9_186
	branch rdx_268 <=u r9_186 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406086:
	Mem281[r14_193 + 0x0000000000000008:word64] = Mem0[r14_193 + 0x0000000000000008:word64] + (rdx_268 - r9_186)
	Mem282[rax_271:word64] = rdx_268
	Mem285[rsi_226:byte] = Mem282[r14_193 + 0x0000000000000008:word64] <u r13_217
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040609A:
	rsi_226 = rsi_226 + 0x0000000000000018
	rcx_219 = rcx_502 + 0x0000000000000001
	word64 rcx_502 = rcx_219
	branch rbx_120 <=u rcx_502 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406120:
	rbp_181 = rbp_181 + 0x0000000000000001
	branch rbp_181 <u r14_193 l0000000000406010
// DataOut: fs r11 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040612D:
	branch rbx_120 <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406133:
	word64 rdx_138 = Mem0[0x000000000061B028:word64]
	word64 rax_140 = rbx_120 * 0x0000000000000003
	branch Mem0[rdx_138 - 0x0000000000000018 + (rax_140 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: fs r9 rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406149:
	word64 rax_147 = (rax_140 << 0x0000000000000003) + rdx_138
// DataOut: fs r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040615A:
	rbx_120 = rbx_120 - 0x0000000000000001
	branch rbx_120 != 0x0000000000000001 l0000000000406150
// DataOut: fs r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406150:
	rax_147 = rax_147 - 0x0000000000000018
	branch Mem0[rax_147 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406164:
	byte r12b_131
	*r12bOut = (byte) Mem0[fp - 0x0000000000000018:word64]
	return rbx_120
// DataOut: fs r12b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn0000000000405ED0_exit:
// DataOut: r12b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> r13:<invalid> r14:<invalid> rdi:<invalid> edx:<invalid> r11:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r15:<invalid> dx:<invalid> esi:<invalid> r9d:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



word64 fn00000000004061B0(word64 rsi, word32 edi, word64 r8, word64 r12, word64 r13, word64 r14, selector fs, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12dOut, ptr64 & r14dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r12 r13 r14 r14d r8 rsi
// LiveOut: eax r10 r11 r12b r12d r14d r15 r15d r8 r9 rax rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 rbp rbx rsp
fn00000000004061B0_entry:
// DataOut: edi fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = rbp
	rbp = (uint64) edi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000010
	qwLoc10 = rbx
	rsp = fp - 0x0000000000000038
	rax = Mem0[fs:0x00000028:word64]
	qwLoc20 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000406259:
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rax = fn000000000040D420(esi, rdi, fs, out ebx, out rsi, out edi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax edx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000406264_1:
	edx = eax
// DataOut: edx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> rbx:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000406267:
// DataOut: edx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004061D1:
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = fp - 0x0000000000000038
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(fp - 0x0000000000000038, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rbx = fp - 0x0000000000000038
	rax = fp - 0x0000000000000038
// DataOut: ebx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebx edx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebx ecx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040621D_1:
	rax = rcx
// DataOut: dl eax ebx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: edx fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000406269:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	rdx = (uint64) (edx | esi)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004062CC:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: eax fs r10 r11 r12b r12d r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: fs r10 r11 r12 r13 r14 r14d r15 r15d r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A7D0:
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = r14
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = r13
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = r12
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	eax = strcmp(rdi, rsi)
	r13 = (uint64) eax
	rax = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: eax fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> eax:<invalid> rcx:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A806:
	eax = (word32) dl
	rsi = 0x000000000000002E
	rsi = (uint64) (esi - eax)
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax esi fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A81D:
	eax = (word32) cl
	rdi = 0x000000000000002E
	rdi = (uint64) (edi - eax)
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	rax = 0x0000000000000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl eax edi esi fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax edi fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: eax fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AAD6:
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x00000000FFFFFFFF rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbx:<invalid> eax:0xFFFFFFFF r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d, out rsi, out r9)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d, out rsi, out r9)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: fs r10 r12 r13d r14 r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AB02:
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	eax = strncmp(rdi, rsi, rdx)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A8BB:
	rcx = 0x0000000000000000
	r8 = 0x0000000000000000
	SZO = cond(r8d)
	C = false
	r11 = 0x00000000FFFFFFFF
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A8CF:
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A97A:
	esi = (word32) Mem0[rbx + r8:byte]
	eax = (int32) sil
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A8E7:
	eax = (int32) r9b
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9D4:
	edx = (word32) Mem0[rbx + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9DE:
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9F0:
	eax = (int32) dl
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AADB:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:(int32) r9b r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA03:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:(int32) r9b r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA0B:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA22:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA26:
	eax = (int32) dl
	rax = (uint64) (eax - r9d)
	SCZO = cond(eax)
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[rbx + r8:byte]
	esi = (int32) dl
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rax rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rax rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rax = 0x0000000000000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r10 r11 r12b r12d r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	rdx = (uint64) (edx - 0x00000030)
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rax rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AAE7:
	rax = 0x00000000FFFFFFFF
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rax rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA5D:
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AB18:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A900:
	edx = (word32) Mem0[rbx + r8:byte]
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A98F:
	rdx = (uint64) esi
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A905:
	esi = (word32) dl
	rax = 0x0000000000000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A912:
	rax = (uint64) esi
	rax = (uint64) (eax & 0xFFFFFFDF)
	rax = (uint64) (eax - 0x00000041)
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA68:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(dl - 0x7E)
	rax = (uint64) esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA73_1:
	eax = r11d
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA77:
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A923:
	rax = (uint64) esi
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AB1F:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A934:
	esi = (word32) r9b
	rdi = 0x0000000000000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A942:
	rdx = (uint64) esi
	rdi = (uint64) esi
	rdx = (uint64) (edx & 0xFFFFFFDF)
	rdx = (uint64) (edx - 0x00000041)
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A951:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(r9b - 0x7E)
	rdi = (uint64) esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA80:
	rax = (uint64) (eax - edi)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: eax fs r10 r11 r13d r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA82_1:
	eax = r13d
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AA86:
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040AB10:
	rax = (uint64) r13d
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A834:
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> eax:0x00000001 r13:<invalid> ecx:<invalid> rcx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r10 r11 r12b r12d r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r12:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004062AE:
	return rax
// DataOut: eax fs r10 r11 r12b r12d r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) eax:0x00000001 rcx:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r10 r11 r12b r12d r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn00000000004061B0_exit:
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r10 (=> r10Out)
	use r11 (=> r11Out)
	use r12d (=> r12dOut)
	use r14d (=> r14dOut)
	use r15 (=> r15Out)
// DataOut: eax r10 r11 r12b r12d r14d r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> ecx:<invalid> r15:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):(uint64) edi -80(fp):r12 -72(fp):r13 -64(fp):r14 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rdi
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	word64 rdi_17
	fn0000000000406440(0x000000000061A3E0, out rdi_17)
	word64 rdi_20
	fn0000000000406440(0x000000000061A410, out rdi_20)
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	word64 rdi_26
	fn0000000000406440(0x000000000061A3F0, out rdi_26)
	return rdi_26
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid>

l000000000040640A:
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	word64 rdi_12
	fn0000000000406440(0x000000000061A400, out rdi_12)
	return rdi_12
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid>



word64 fn0000000000406440(word64 rdi, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rdi rsi
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem26[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
	word64 rsp_16
	byte SCZO_17
	byte Z_18
	word64 rsi_19
	word64 rdi_20
	word64 rcx_21
	word32 edx_22
	word64 rdx_23
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: qwLoc10_8,rcx_11,rdi_13,rdx_12,rsi_10,rsp_14,SCZO_15,Z_5
		defs: edx_22,rcx_21,rdi_20,rdx_23,rsi_19,rsp_16,SCZO_17,Z_18
	return rsi_19
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> -16(fp):rdi



word64 fn0000000000406490(ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax rax rdi rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000406490_entry:
	*rsiOut = rsi
	*rdiOut = rdi
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	word64 rax_138 = (uint64) Mem0[0x000000000061B034:word32]
	branch (word32) rax_138 == 0x00000000 l0000000000406538
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return rax_138
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx

fn0000000000406490_exit:
// DataOut: eax rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> -8(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	word64 rdi_133
	fn0000000000406440(0x000000000061A3E0, out rdi_133)
	word64 rdi_136
	fn0000000000406440(0x000000000061A3F0, out rdi_136)
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	word64 rsp_37
	word64 rbx_38
	byte SCZO_39
	word32 eax_40
	word64 rax_41
	byte SZO_42
	byte C_43
	byte Z_44
	word32 edi_45
	word64 rdi_46
	word64 rdx_47
	word32 esi_48
	word64 rsi_49
	word32 ebx_50
	word32 edx_51
	call fflush_unlocked (retsize: 8; depth: 144)
		uses: C_30,eax_33,ebx_15,edi_20,edx_14,esi_17,qwLoc08_4,rax_32,rbx_22,rdi_36,rdx_18,rsi_16,rsp_23,SCZO_34,SZO_31,Z_35
		defs: C_43,eax_40,ebx_50,edi_45,edx_51,esi_48,rax_41,rbx_38,rdi_46,rdx_47,rsi_49,rsp_37,SCZO_39,SZO_42,Z_44
	word64 rsp_58
	word64 rbx_59
	byte SCZO_60
	word32 eax_61
	word64 rax_62
	byte SZO_63
	byte C_64
	byte Z_65
	word32 edi_66
	word64 rdi_67
	word64 rdx_68
	word32 esi_69
	word64 rsi_70
	word32 ebx_71
	word32 edx_72
	call sigprocmask (retsize: 8; depth: 144)
		uses: C_55,eax_40,ebx_50,edi_53,edx_51,esi_48,qwLoc08_4,rax_41,rbx_38,rdi_52,rdx_56,rsi_57,rsp_37,SCZO_39,SZO_54,Z_44
		defs: C_64,eax_61,ebx_71,edi_66,edx_72,esi_69,rax_62,rbx_59,rdi_67,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_63,Z_65
	word64 rbx_73 = (uint64) Mem0[0x000000000061B038:word32]
	word64 rax_75 = (uint64) Mem0[0x000000000061B034:word32]
	word32 ebx_74 = (word32) rbx_73
	word32 eax_76 = (word32) rax_75
	branch eax_76 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_74, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem125[0x000000000061B034:word32] = (word32) (uint64) (eax_76 - 0x00000001)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	word64 rsp_82
	word64 rbx_83
	byte SCZO_84
	word32 eax_85
	word64 rax_86
	byte SZO_87
	byte C_88
	byte Z_89
	word32 edi_90
	word64 rdi_91
	word64 rdx_92
	word32 esi_93
	word64 rsi_94
	word32 ebx_95
	word32 edx_96
	call raise (retsize: 8; depth: 144)
		uses: C_79,eax_76,ebx_80,edi_66,edx_72,esi_69,qwLoc08_4,rax_75,rbx_73,rdi_81,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_77,Z_78
		defs: C_88,eax_85,ebx_95,edi_90,edx_96,esi_93,rax_86,rbx_83,rdi_91,rdx_92,rsi_94,rsp_82,SCZO_84,SZO_87,Z_89
	word64 rsp_105
	word64 rbx_106
	byte SCZO_107
	word32 eax_108
	word64 rax_109
	byte SZO_110
	byte C_111
	byte Z_112
	word32 edi_113
	word64 rdi_114
	word64 rdx_115
	word32 esi_116
	word64 rsi_117
	word32 ebx_118
	word32 edx_119
	call sigprocmask (retsize: 8; depth: 144)
		uses: C_100,eax_85,ebx_95,edi_104,edx_98,esi_102,qwLoc08_4,rax_86,rbx_83,rdi_103,rdx_97,rsi_101,rsp_82,SCZO_84,SZO_99,Z_89
		defs: C_111,eax_108,ebx_118,edi_113,edx_119,esi_116,rax_109,rbx_106,rdi_114,rdx_115,rsi_117,rsp_105,SCZO_107,SZO_110,Z_112
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word64 r15, selector fs, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rcx rdi rdx sil
// LiveOut: r11 r11d r15b r8 rdi rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rax rbp rbx rsp
fn0000000000406540_entry:
// DataOut: fs r11 r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	byte r15b_508
	word32 r15d_507
	word32 edx_469
	word32 r14d_492
	word64 rbp_428
	word64 r13_12 = rcx
	word64 rbx_171 = rdx
	word64 rsp_178 = fp - 0x0000000000000038
	word64 rdx_33 = Mem0[rdi:word64]
	word64 r12_172 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: fs r11 r12 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069D8:
	word32 r14d_884
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A08:
	r14d_884 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A20:
	r14d_884 = 0x00000000 (alias)
// DataOut: fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A10:
	word64 r15_904 = (uint64) Mem0[rcx + 0x0000000000000028:word32]
	r15d_507 = (word32) r15_904 (alias)
	r15b_508 = (byte) r15_904 (alias)
// DataOut: fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069EA:
	word64 r15_909 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r15d_507 = (word32) r15_909 (alias)
	r15b_508 = (byte) r15_909 (alias)
	r14d_884 = 0x00000001 (alias)
// DataOut: fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069F7:
	word64 r14_890 = (uint64) (r14d_884 ^ 0x00000001)
	r14d_492 = (word32) r14_890 (alias)
	r14b = (byte) r14_890 (alias)
	r12_172 = rdx_33
// DataOut: fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069C6:
	r12_172 = rdx_33
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406580:
	r14d_492 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	word64 r15_856 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r14b = (byte) r14d_492 (alias)
	r15d_507 = (word32) r15_856 (alias)
	r15b_508 = (byte) r15_856 (alias)
	branch r14b != 0x00 l00000000004065B0
// DataOut: fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406594:
	word64 rsi_864
	eax = fn0000000000404CD0(0x0000000C, out rsi_864)
	edx_469 = 0x0000000C (alias)
	branch (byte) eax != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065AB:
// DataOut: fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065B0:
	word64 rax_520
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406628:
	rax_520 = (uint64) ((word32) (uint64) r15d_507 & 0x0000F000)
	word32 eax_640 = (word32) rax_520
	branch eax_640 == 0x00008000 l0000000000406868
// DataOut: eax fs r11 r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406868:
	branch (r15d_507 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406871:
	word64 rsi_830
	branch (byte) fn0000000000404CD0(0x00000010, out rsi_830) == 0x00 l00000000004068B8
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068B8:
	branch (r15d_507 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068C1:
	word64 rsi_818
	branch (byte) fn0000000000404CD0(0x00000011, out rsi_818) == 0x00 l000000000040693B
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040693B:
	word64 rsi_764
	branch (byte) fn0000000000404CD0(0x00000015, out rsi_764) == 0x00 l000000000040695C
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040695C:
	branch (word32) (uint64) (r15d_507 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406962:
	word64 rsi_800
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_800) == 0x00 l000000000040697A
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406985:
	word64 rsi_788
	branch (byte) fn0000000000404CD0(0x00000016, out rsi_788) == 0x00 l00000000004065CF
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406997:
	edx_469 = 0x00000016 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406970:
	edx_469 = 0x0000000E (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406952:
	edx_469 = 0x00000015 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068CF:
	edx_469 = 0x00000011 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040687F:
	edx_469 = 0x00000010 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040663B:
	branch eax_640 == 0x00004000 l00000000004068E0
// DataOut: eax fs r11 r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_507 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069A1:
	edx_469 = 0x00000014 (alias)
	word64 rsi_741
	branch (byte) fn0000000000404CD0(0x00000014, out rsi_741) != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069B8:
// DataOut: fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068F3:
	branch (r15b_508 & 0x02) == 0x00 l0000000000406910
// DataOut: fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068F9:
	edx_469 = 0x00000013 (alias)
	word64 rsi_729
	branch (byte) fn0000000000404CD0(0x00000013, out rsi_729) != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406910:
	edx_469 = 0x00000006 (alias)
	branch (word32) (uint64) (r15d_507 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406922:
	word64 rsi_713
	edx_469 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x00000012, out rsi_713) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406646:
	branch eax_640 == 0x0000A000 l0000000000406859
// DataOut: eax fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406859:
	edx_469 = 0x00000007 (alias)
// DataOut: edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406651:
	edx_469 = 0x00000008 (alias)
	branch eax_640 == 0x00001000 l00000000004066B0
// DataOut: eax edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040665D:
	edx_469 = 0x00000009 (alias)
	branch eax_640 == 0x0000C000 l00000000004066B0
// DataOut: eax edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406666:
	edx_469 = 0x0000000A (alias)
	branch eax_640 == 0x00006000 l00000000004066B0
// DataOut: eax edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040666F:
	word64 rdx_670 = (uint64) (eax_640 != 0x00002000)
	edx_469 = rdx_670 + 0x000000000000000B + rdx_670
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065B9:
	rax_520 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	edx_469 = (word32) (uint64) Mem0[rax_520 * 0x0000000000000004 + 0x00412C60:word32] (alias)
	branch edx_469 != 0x00000005 l0000000000406680
// DataOut: edx fs r11 r12 r14d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406680:
	r14b = (byte) (uint64) (r14d_492 & DPB(eax, edx_469 == 0x00000007, 0)) (alias)
// DataOut: edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406689:
	branch r14b == 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040668E:
	edx_469 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040669C:
	word64 rsi_605
	edx_469 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x0000000D, out rsi_605) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065CF:
	word32 eax_522 = strlen(r12_172)
	word64 rax_523 = DPB(rax_520, eax_522, 0)
	word64 rbp_524 = Mem0[0x000000000061B120:word64]
	r14b = (byte) eax_522 (alias)
	word64 r15_529 = r12_172 + rax_523
	branch rbp_524 == 0x0000000000000000 l0000000000406619
// DataOut: fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065EA:
// DataOut: fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065F0:
	word64 rdx_555 = Mem0[rbp_524:word64]
	branch rax_523 <u rdx_555 l0000000000406610
// DataOut: fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065F9:
	branch strncmp(r15_529 - rdx_555, Mem0[rbp_524 + 0x0000000000000008:word64], rdx_555) == 0x00000000 l00000000004068A0
// DataOut: fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068A0:
	branch rbp_524 == 0x0000000000000000 l0000000000406619
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068A9:
	rbp_428 = rbp_524 + 0x0000000000000010
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406610:
	rbp_524 = Mem0[rbp_524 + 0x0000000000000020:word64]
	branch rbp_524 != 0x0000000000000000 l00000000004065F0
// DataOut: fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406619:
	edx_469 = 0x00000005 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066B0:
	rbp_428 = ((uint64) edx_469 << 0x0000000000000004) + 6398944
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066C0:
	branch Mem0[rbp_428 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: edi fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406890:
	word64 rsi_460
	fn0000000000404CD0(0x00000004, out rsi_460)
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066D0:
	word64 rsi_438
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_438) != 0x00 l0000000000406840
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406840:
	word64 rdi_455
	fn0000000000406440(0x000000000061A3E0, out rdi_455)
	word64 rdi_458
	fn0000000000406440(0x000000000061A3F0, out rdi_458)
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066DD:
	word64 rdi_446
	fn0000000000406440(0x000000000061A3E0, out rdi_446)
	word64 rdi_449
	fn0000000000406440(rbp_428, out rdi_449)
	word64 rdi_452
	fn0000000000406440(0x000000000061A3F0, out rdi_452)
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406570:
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066FF:
	word64 rbp_203
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067D8:
	word64 rsi_399
	word32 edi_400
	word64 r8_401
	word64 r9_402
	word64 r10_403
	word64 r11_404
	byte r12b_405
	word32 r14d_406
	word64 rax_407 = fn00000000004052D0(0x0000000000000000, Mem0[0x000000000061B0E8:word64], r12_172, r11, fs, out rsi_399, out edi_400, out r8_401, out r9_402, out r10_403, out r11_404, out r12b_405, out r14d_406)
	Mem411[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_407
	rbp_203 = rax_407
// DataOut: fs r11 r11d r13 r14b r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406711:
	word64 rax_298 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_298 + 0x0000000000000008 l0000000000406820
// DataOut: fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406820:
	word64 r15_352
	word64 r14_353
	word64 rcx_355
	word64 rbp_357
	word64 rdi_358
	word64 rdx_360
	byte SCZO_361
	byte sil_362
	byte SZO_363
	byte C_364
	byte Z_365
	word32 r14d_366
	word64 rax_367
	word32 r15d_368
	word32 ecx_369
	word64 rsi_370
	word32 esi_371
	word32 eax_372
	word32 edx_373
	word32 ebp_375
	word32 edi_376
	byte al_377
	byte dl_378
	byte r15b_379
	byte CZ_380
	word64 r8_383
	word64 r9_384
	word64 r10_385
	byte r12b_386
	call _obstack_newchunk (retsize: 8; depth: 64)
		uses: al_300,C_304,CZ_41,dl_48,eax_299,ebp_42,ecx,edi_51,edx_47,esi,fs,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_18,qwLoc30_24,r10,r11,r12_57,r12b_40,r13_12,r14_58,r14b_43,r14d_44,r15_59,r15b_61,r15d_60,r8,r9,rax_298,rbp_56,rbx_26,rcx,rdi_350,rdx_301,rsi_349,rsp_27,SCZO_303,sil,SZO_62,Z_159
		defs: al_377,C_364,CZ_380,dl_378,eax_372,ebp_375,ecx_369,edi_376,edx_373,esi_371,fs_382,r10_385,r11_381,r12_356,r12b_386,r13_354,r14_353,r14b_374,r14d_366,r15_352,r15b_379,r15d_368,r8_383,r9_384,rax_367,rbp_357,rbx_359,rcx_355,rdi_358,rdx_360,rsi_370,rsp_351,SCZO_361,sil_362,SZO_363,Z_365
	rax_298 = Mem0[rbx_171 + 0x0000000000000018:word64]
// DataOut: fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406723:
	Mem345[rax_298:word64] = Mem0[0x000000000061B018:word64]
	Mem347[rbx_171 + 0x0000000000000018:word64] = Mem345[rbx_171 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406732:
	word64 rsi_187
	word32 edi_188
	word64 r8_189
	word64 r9_190
	word64 r10_191
	word64 r11_192
	byte r12b_193
	word32 r14d_194
	word64 rax_195 = fn00000000004052D0(0x0000000000000000, Mem0[0x000000000061B0E8:word64], r12_172, r11, fs, out rsi_187, out edi_188, out r8_189, out r9_190, out r10_191, out r11_192, out r12b_193, out r14d_194)
	word64 rdx_197 = rax_195 + Mem0[0x000000000061B018:word64]
	Mem205[0x000000000061B018:word64] = rdx_197
	rbp_203 = rax_195
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r11d r13 r14b r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406767:
	word64 rax_206 = Mem205[rbx_171 + 0x0000000000000018:word64]
	branch Mem205[rbx_171 + 0x0000000000000020:word64] <u rax_206 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r11d r13 r14b r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406800:
	word64 r15_256
	word64 r14_257
	word64 rcx_259
	word64 r12_260
	word64 rdi_262
	word64 rdx_264
	byte SCZO_265
	byte sil_266
	byte SZO_267
	byte C_268
	byte Z_269
	word32 r14d_270
	word64 rax_271
	word32 r15d_272
	word32 ecx_273
	word64 rsi_274
	word32 esi_275
	word32 eax_276
	word32 edx_277
	word32 ebp_279
	word32 edi_280
	byte al_281
	byte dl_282
	byte r15b_283
	byte CZ_284
	word64 r11_285
	selector fs_286
	word64 r8_287
	word64 r9_288
	word64 r10_289
	byte r12b_290
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_209,C_212,CZ_165,dl_200,eax_208,ebp_204,ecx_183,edi_188,edx_199,esi_170,fs_163,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_18,qwLoc30_24,r10_191,r11_192,r12_172,r12b_193,r13_173,r14_174,r14b_166,r14d_194,r15_175,r15b_177,r15d_176,r8_189,r9_190,rax_206,rbp_203,rbx_171,rcx_210,rdi_254,rdx_197,rsi_253,rsp_178,SCZO_211,sil_169,SZO_184,Z_202
		defs: al_281,C_268,CZ_284,dl_282,eax_276,ebp_279,ecx_273,edi_280,edx_277,esi_275,fs_286,r10_289,r11_285,r12_260,r12b_290,r13_258,r14_257,r14b_278,r14d_270,r15_256,r15b_283,r15d_272,r8_287,r9_288,rax_271,rbp_261,rbx_263,rcx_259,rdi_262,rdx_264,rsi_274,rsp_255,SCZO_265,sil_266,SZO_267,Z_269
	rax_206 = Mem205[rbx_171 + 0x0000000000000018:word64]
	rdx_197 = Mem205[0x000000000061B018:word64]
// DataOut: fs r11 r11d r13 r14b r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406779:
	Mem249[rax_206:word64] = rdx_197
	Mem251[rbx_171 + 0x0000000000000018:word64] = Mem249[rbx_171 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r11d r13 r14b r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406781:
	word64 rdi_97
	word64 rsi_108
	fn0000000000406490(out rsi_108, out rdi_97)
	branch r14b != 0x00 l00000000004067A0
// DataOut: fs r11 r11d r13 r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067A0:
	word64 rdi_132
	*rdiOut = fn0000000000406400()
	word64 rcx_134 = Mem0[0x000000000061B0C8:word64]
	word64 rax_140 = (uint64) ((uint128) (uint64) r13_12 /u rcx_134)
	rsi_108 = rax_140
	branch rax_140 == (uint64) ((uint128) ((uint64) ((rbp_203 - 0x0000000000000001) + r13_12)) /u rcx_134) l000000000040678B
// DataOut: fs r11 r11d r8 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067C6:
	word64 rdi_154
	rsi_108 = fn0000000000406440(0x000000000061A550, out rdi_154)
// DataOut: fs r11 r11d r8 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040678B:
	byte r15b_126
	*r15bOut = (byte) Mem0[rsp_178 + 0x0000000000000030:word64]
	return rsi_108
// DataOut: fs r11 r11d r15b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000406540_exit:
// DataOut: r11 r11d r15b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r15:<invalid> r8:<invalid> r14d:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	word64 rsi_36
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_36) != 0x00 l0000000000406A58
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	word64 rdi_45
	fn0000000000406440(0x000000000061A3E0, out rdi_45)
	word64 rdi_48
	fn0000000000406440(0x000000000061A420, out rdi_48)
// DataOut: fs r11 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	word64 rdi_54
	fn0000000000406440(0x000000000061A3F0, out rdi_54)
	return
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs r11d r14 r15b rdi rdx rsi
// LiveOut: r11 r11d r15 r15b r8 rax
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 rbp rbx rsp
fn0000000000406A80_entry:
	*r15Out = r15
// DataOut: ecx edx fs r11d r14 r15 r15b rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 r12_15 = rdi
	word32 ebp_201 = (word32) rdx
	word64 rbx_181 = rsi
	word64 rax_30 = Mem0[fs:0x00000028:word64]
	word64 rax_114 = 0x0000000000000000
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0030(64)

l0000000000406AB8:
	rax_114 = strstr(rsi, 0x0000000000413766)
	r14 = rax_114
	branch rax_114 == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64) Local -0030(64)

l0000000000406ACD:
	word32 eax_121 = strlen(rsi)
	rax_114 = DPB(rax_114, eax_121, 0) (alias)
	branch rax_114 <=u 0x0000000000000065 l0000000000406B20
// DataOut: bpl ebp fs r11d r12 r13d r14 r15 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64) Local -0030(64)

l0000000000406B20:
	word64 rsp_136
	word64 r14_137
	word64 r13_138
	word32 r13d_139
	word32 ecx_140
	word64 r12_141
	word64 rdi_142
	word64 rbp_143
	word64 rdx_144
	word64 rbx_145
	word64 rsi_146
	byte SCZO_147
	word64 rax_148
	selector fs_149
	word32 eax_150
	byte SZO_151
	byte C_152
	byte Z_153
	word32 esi_154
	byte CZ_155
	word32 r8d_156
	word64 r8_157
	word64 rcx_158
	word32 r9d_159
	word64 r9_160
	word32 r11d_161
	byte r15b_162
	word64 r11_163
	word64 r15_164
	word32 ebp_165
	call __mempcpy_chk (retsize: 8; depth: 320)
		uses: C_118,CZ_124,eax_121,ebp_21,ecx,esi,fs,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_18,qwLoc28_24,qwLoc30_31,r11,r11d,r12_15,r13_9,r13d_10,r14_119,r15,r15b,r8,r8d,r9,r9d,rax_122,rbp_20,rbx_131,rcx_127,rdi_130,rdx_128,rsi_126,rsp_27,SCZO_129,SZO_116,Z_117
		defs: C_152,CZ_155,eax_150,ebp_165,ecx_140,esi_154,fs_149,r11_163,r11d_161,r12_141,r13_138,r13d_139,r14_137,r15_164,r15b_162,r8_157,r8d_156,r9_160,r9d_159,rax_148,rbp_143,rbx_145,rcx_158,rdi_142,rdx_144,rsi_146,rsp_136,SCZO_147,SZO_151,Z_153
	word64 rsp_172
	word64 r13_174
	word32 r13d_175
	word32 ecx_176
	word64 rdi_178
	word64 rbp_179
	word64 rdx_180
	word64 rsi_182
	byte SCZO_183
	word64 rax_184
	word32 eax_186
	byte SZO_187
	byte C_188
	byte Z_189
	word32 esi_190
	byte CZ_191
	word32 r8d_192
	word64 r8_193
	word64 rcx_194
	word32 r9d_195
	word64 r9_196
	word64 r11_199
	word64 r15_200
	call stpcpy (retsize: 8; depth: 320)
		uses: C_152,CZ_155,eax_150,ebp_165,ecx_140,esi_154,fs_149,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_18,qwLoc28_24,qwLoc30_31,r11_163,r11d_161,r12_141,r13_138,r13d_139,r14_137,r15_164,r15b_162,r8_157,r8d_156,r9_160,r9d_159,rax_148,rbp_143,rbx_145,rcx_166,rdi_167,rdx_169,rsi_171,rsp_136,SCZO_170,SZO_151,Z_153
		defs: C_188,CZ_191,eax_186,ebp_201,ecx_176,esi_190,fs_185,r11_199,r11d_197,r12_177,r13_174,r13d_175,r14_173,r15_200,r15b_198,r8_193,r8d_192,r9_196,r9d_195,rax_184,rbp_179,rbx_181,rcx_194,rdi_178,rdx_180,rsi_182,rsp_172,SCZO_183,SZO_187,Z_189
	rax_114 = strcpy(rax_184, rsi_182 + 0x0000000000000002)
// DataOut: bpl ebp fs r11d r12 r13d r14 r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> eax:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64) Local -0030(64)

l0000000000406ADB:
	word64 rbp_69
	word64 rdi_70
	word64 r8_71
	word64 r11_72
	word64 rax_73 = fn0000000000410600(rax_114, rbx_181, ebp_201, 0x00000000000003E9, r12_15, 0x00000000, r11d, r14, r15b, fs, out rbp_69, out rdi_70, out r8_71, out r11_72)
	branch (rax_30 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: fs r11 r11d r15 r15b r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406B66:
	__stack_chk_fail()
// DataOut: fs r11 r11d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406B6B_thunk_fn0000000000406B70:
	word64 r8_107
	word64 r11_108
	word64 r15_109
	return fn0000000000406B70(rbp_69, rdi_70, r11_72, fs, out r8_107, out r11_108, out r15_109)
// DataOut: fs r11 r11d r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406B07:
	return rax_73
// DataOut: fs r11 r11d r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn0000000000406A80_exit:
// DataOut: r11 r11d r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> dil:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> ebx:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> sil:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



word64 fn0000000000406B70(word64 rbp, word64 rdi, word64 r11, selector fs, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r11d rbp rdi
// LiveOut: r11 r11d r15 r15b r8 rax
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406B70_entry:
// DataOut: fs r11 r11d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012E8
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r11d rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x00000000000012A8
	rcx = 0x0000000000003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc12A8 = al
	rax = 0x000000003F3F3F3F
	qwLoc12A7 = 0x000000003F3F3F3F
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc129D = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BA4:
	r13 = fp - 0x00000000000012A8
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x00000000000012A8
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407138:
	bLoc129E = 0x2E
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc129E = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r11d r13 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E6D:
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):0x2B -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BC2:
	bLoc129E = 0x00
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r11d r13 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E88
	rbp = fp - 0x0000000000000E88
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r9 = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r11d r13 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:0x0000000000413764 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407078:
	rsi = fp - 0x0000000000001278
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	r9 = rax
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:0x0000000000413764 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407085:
	r12 = fp - 0x0000000000000E88
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E88
	eax = __sprintf_chk(fp - 0x0000000000000E88, 0x0000000000000001, 0x0000000000000E3B, 0x0000000000413779)
	rdx = fp - 0x0000000000000E88
// DataOut: fs r11 r11d r12 r13 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r11d r12 r13 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r11d r12 r13 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r11d r12 r13 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r11d r12 r13 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070D8_1:
	rbp = rdx
// DataOut: al fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r14 = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001278
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11)
	r14 = rax
// DataOut: fs r11 r11d r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:0x0000000000413764 r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(esi, rdi, fs, out ebx, out rsi, out edi, out r12, out r13, out r14, out r15)
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r11d r12 r13 r14 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r8:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r11d r12 r13 r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):0x20 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):0x20 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r11d r12 r13 r14 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r11d r12 r13 r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r11d r12 r13 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> r9:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	rax = fn000000000040CD70(rsi, rdi, out rsi)
// DataOut: fs r11 r11d r12 r13 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:0x0000000000413764 r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413769)
	rdi = rbp
	eax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407155:
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D01:
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	eax = fputs_unlocked(rdi, rsi)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	rbp = fn00000000004057B0(dl, rsi, edi, r8, fs, out r12)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r11d r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r11d r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rax, rsi, edi, r8)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r11d r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407238:
	r12 = fn0000000000405700(edx, rdi, fs)
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	rbp = fn00000000004057B0(dl, rsi, edi, r8, fs, out r12)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	r12 = fn0000000000405700(edx, rdi, fs)
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F60:
	r14 = 0x0000000000413764
// DataOut: fs r11 r11d r14
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	r13 = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15b r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r11d r12 r14 r14d r15 r15b r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = rbp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413774)
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11)
	r14 = rax
// DataOut: fs r11 r11d r14
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(esi, rdi, fs, out ebx, out rsi, out edi, out r12, out r13, out r14, out r15)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	fn000000000040AB30(rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040727C:
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x01 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r11d r13 r14 r15b rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out r8, out r11, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi)
	r9 = rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F7F:
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F80:
	r9 = 0x0000000000413764
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out r8, out r11, out r15)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r12 r13 r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsi, out rdi, out r12d, out r13d, out r14d, out r15d)
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r11 r12 r13 r15 r8d rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413779)
	rdi = r13
	eax = strlen(rdi)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	rdi = r12
	eax = fputs_unlocked(rdi, rsi)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v39 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	rsi = fn0000000000406540(rcx, rdx, sil, rdi, r11, r15, fs, out rdi, out r8, out r11, out r15b)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r11d r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	call fwrite_unlocked (retsize: 8; depth: 8)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	rsi = fn0000000000406540(rcx, rdx, sil, rdi, r11, r15, fs, out rdi, out r8, out r11, out r15b)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r14 r15 r15b r8 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil, out rsi, out rdi)
// DataOut: fs r11 r11d r14 r15 r15b r8 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r11 r11d r14 r15 r15b r8 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsi, out rdi)
// DataOut: fs r11 r11d r14 r15 r15b r8 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r11 r11d r14 r15 r15b r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040745A:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rax = (uint64) (eax | r8d)
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
// DataOut: al dl fs r11 r11d r15 r15b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
// DataOut: al dl fs r11 r11d r15 r15b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004074B4:
// DataOut: fs r11 r11d r15 r15b r8
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
// DataOut: al fs r11 r11d r15 r15b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
// DataOut: fs r11 r11d r15 r15b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
// DataOut: fs r11 r11d r15 r15b r8 rax rdx
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004074B8:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: fs r11 r11d r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
// DataOut: fs r11 r11d r15 r15b r8 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004074C4:
	rax = 0x0000000000000001
	return rax
// DataOut: fs r11 r11d r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004074A5:
	rsi = rdx
	rdi = rax
	eax = strcmp(rdi, rsi)
	return rax
// DataOut: fs r11 r11d r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r11 r11d r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000406B70_exit:
	use r8 (=> r8Out)
	use r11 (=> r11Out)
	use r15 (=> r15Out)
// DataOut: r11 r11d r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r8b:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbp rbx rsp
fn0000000000407870_entry:
// DataOut: fs r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407870:
	fn0000000000406A30()
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040797E:
	word64 rdi_195 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_195 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000407987:
	word64 rsi_202
	fn000000000040CD70(fp - 0x00000000000002B8, rdi_195, out rsi_202)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004079A0_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004079A7:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004079C0:
	word64 r8_167
	word64 r9_168
	word64 r10_169
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out r8_167, out r9_168, out r10_169, out r11)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004078CD_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004078D4:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004078F9_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000407900:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000407911:
	word64 rdi_72
	word64 r8_73
	word64 r11_74
	byte r15b_75
	fn0000000000406540(rsi, 0x0000000000000000, 0x00, rdi, r11, r15, fs, out rdi_72, out r8_73, out r11_74, out r15b_75)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040792D:
	word64 rsi_120
	word64 rdi_121
	fn0000000000405D00((word32) (uint64) Mem0[rdi + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rdi + 0x0000000000000028:word32], (byte) (word32) Mem0[rdi + 0x00000000000000B0:byte], out rsi_120, out rdi_121)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14d:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000407948:
	branch (Mem0[fp - 0x0000000000000020:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004079E6
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l00000000004079EB_thunk_fn00000000004079F0:
	word64 rsp_111
	fn00000000004079F0(out rsp_111)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000407962:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000407870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



word32 fn00000000004079F0(ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax rsp
// Trashed: SCZO ah al ax eax esp rax rsp sp spl
// Preserved:
fn00000000004079F0_entry:
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	word64 rsp_1
	*rspOut = fp
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407A46:
	return eax
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004079F9:
	word64 rax_43 = (uint64) Mem0[0x000000000061B150:word32]
	word64 rsp_45
	byte SCZO_46
	byte CZ_47
	word64 r15_48
	word64 r14_49
	word64 r13_50
	word64 r12_51
	word64 rbp_52
	word64 rbx_53
	word32 eax_54
	word64 rax_55
	call Mem0[rax_43 * 0x0000000000000008 + 0x00412308:word32] (retsize: 4; depth: 108)
		uses: CZ_4,eax_44,qwLoc08_25,qwLoc10_28,qwLoc18_31,qwLoc20_34,qwLoc28_37,qwLoc30_40,r12,r13,r14,r15,rax_43,rbp,rbx,rsp_41,SCZO_42
		defs: CZ_47,eax_54,r12_51,r13_50,r14_49,r15_48,rax_55,rbp_52,rbx_53,rsp_45,SCZO_46
	return eax_54
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn00000000004079F0_exit:
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000407EA0(word64 rcx, word32 edx, word64 rsi, word64 rdi, word64 r8, word64 r10, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi fs r10 r11 r14 r15 r8 rcx rdi rsi
// LiveOut: ebx r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407EA0_entry:
// DataOut: edi edx esi fs r10 r11 r12 r12d r14 r15 r8 rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = rbp
	rbp = fp - 0x0000000000000008
	rsp = fp - 0x0000000000000010
	qwLoc10 = r15
	rsp = fp - 0x0000000000000018
	qwLoc18 = r14
	rsp = fp - 0x0000000000000020
	qwLoc20 = r13
	r13 = (uint64) esi
	rsp = fp - 0x0000000000000028
	qwLoc28 = r12
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000003A8
	dwLoc038C = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: cl ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 r9b rbp rbx rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -038C(0)

l0000000000408400:
	rax = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - 0x00000000AAAAAAAA)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r9 rbp rbx rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0398 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0398
// DataOut: cl fs r10 r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x00000000AAAAAAAA rcx:<invalid> r9:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408A18:
	Mem0[0x00000000000000C0:byte] = 0x00
	rdi = 0x00000000000000C1
	sil = 0xBF
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004089F9:
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408374:
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408355:
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F46:
	SCZO = cond(bLoc038C - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0398 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l000000000040893D:
	rdi = 0x0000000000000012
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l0000000000408956:
	rdi = 0x0000000000000014
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040896F:
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040827E:
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0398 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l0000000000408317:
	rdi = 0x0000000000000015
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408330:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: eax ecx esi fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F74:
	r15d = (word32) Mem0[r10:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: eax ecx esi fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408670:
	rdi = rbx
	dwLoc039C = ecx
	dwLoc0390 = esi
	qwLoc0398 = rdx
	eax = strlen(rdi)
	rdx = qwLoc0398
	r12 = rax
	rdi = rdx
	eax = strlen(rdi)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0398
	rsi = (uint64) dwLoc0390
	rcx = (uint64) dwLoc039C
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = rsp - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408B3A:
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407FF0:
	SCZO = cond(bLoc038C - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0398 = ecx
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rcx = (uint64) dwLoc0398
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B5E:
	dwLoc0398 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0398
	al = Test(EQ,Z)
// DataOut: al eax edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088E8:
	rax = (uint64) Mem0[0x0000000000000029:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al eax edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408906:
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	call __lxstat (retsize: 8; depth: 8)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040802B:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc0390 = esi
	dwLoc0398 = edx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0398
	rsi = (uint64) dwLoc0390
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0390(64) Local -0398(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0390(64) Local -0398(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0398
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc0390
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004083C8:
	dwLoc0390 = esi
	dwLoc0398 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc0390
	rdx = (uint64) dwLoc0398
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0398 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0398(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0398
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0398(64)

l0000000000408458:
	eax = fn0000000000411840(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0398
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408080:
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0398
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040846B:
	dwLoc0398 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0398
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089C9:
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B40:
	dwLoc0398 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0398
// DataOut: cl edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408841:
	dwLoc0390 = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0398 = rax
	rax = fn0000000000409CC0(rsi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	rdx = (uint64) dwLoc0390
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040887E:
	rdx = (uint64) Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r10 r11 r12 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080D9:
	v45 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v45
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(r11, r15, fs, out rsp, out rbp, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rcx = r13
	rdx = 0x0000000000415E54
	call error (retsize: 8; depth: 8)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084F6:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080EF:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, out rsi)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	eax = fn0000000000405810(edi, r11, r15, fs, out rsi, out rdi, out r8, out r9, out r10, out r11, out r12d, out r13, out r14, out r15)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C0A:
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rdi, out rsi, out rdi)
	r13 = rax
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B98:
	rax = fn0000000000410E30(rdi, out rsi, out rdi)
	r13 = rax
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408557:
	eax = strlen(rdi)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	call stpncpy (retsize: 8; depth: 8)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B8D:
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	rdi = 0x0000000000000001
	call __xstat (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085FC:
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	rcx = 0x0000000000000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(esi, rdi, fs, out ebx, out rsi, out edi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r10 r11 r12 r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: fs r10 r11 r12 r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B10:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, r8, r12, r13, r14, fs, out rsi, out r8, out r9, out r10, out r11, out r12d, out r14d, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:0x00000000FFFFFFFF r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rax, rsi, edi, r8)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040D420(esi, rdi, fs, out ebx, out rsi, out edi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r10 r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BC7_1:
	edx = eax
// DataOut: edx fs r10 r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BCA:
// DataOut: edx fs r10 r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = r15
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rdx = r15
// DataOut: fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE8_1:
	rdx = rcx
// DataOut: al edx fs r10 r11 r12 r12d r13 r14 r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: edx fs r10 r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: edx fs r10 r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: fs r10 r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: fs r10 r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A70:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, r8, r12, r13, r14, fs, out rsi, out r8, out r9, out r10, out r11, out r12d, out r14d, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:0x00000000FFFFFFFF r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408765:
	rax = (uint64) Mem0[0xFFFFFFFFCCCCCCF5:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A30:
	rdi = Mem0[0xFFFFFFFFCCCCCD0D:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(esi, rdi, fs, out ebx, out rsi, out edi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A68:
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408779:
	rax = Mem0[0xFFFFFFFFCCCCCD05:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087BA:
	rax = Mem0[0xFFFFFFFFCCCCCD05:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	eax = fn0000000000405810(edi, r11, r15, fs, out rsi, out rdi, out r8, out r9, out r10, out r11, out r12d, out r13, out r14, out r15)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FE4:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rdi, out rsi, out rdi)
	v42 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v42
	SCZO = cond(v42)
	Mem0[rsi:word64] = rax
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r10:<invalid> edx:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rdi:<invalid> rsi:<invalid> r14:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CEC:
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: eax ebx edx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: eax ebx edx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405020:
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	call strcoll (retsize: 8; depth: 8)
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CBC:
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

fn0000000000407EA0_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r10 (=> r10Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: ebx r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r9:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word64 rbx_10 = (uint64) edi
	word32 ebx_11 = (word32) rbx_10
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005))
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rsi_263
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_263)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005))
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005))
	word64 rbp_283 = Mem0[0x000000000061A610:word64]
	word32 eax_290 = fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005), rbp_283)
	word64 rsp_296
	word64 rbp_297
	word32 edx_298
	word64 rdx_299
	word64 rbx_300
	word32 edi_302
	byte SCZO_303
	byte SZO_304
	byte C_305
	byte Z_306
	word32 esi_307
	word64 rsi_308
	word64 rdi_309
	word64 rax_310
	word64 rcx_311
	word32 eax_312
	word32 ecx_313
	call setlocale (retsize: 8; depth: 32)
		uses: C_294,eax_290,ebx_11,ecx,edi_254,edx,esi,qwLoc08_4,qwLoc10_8,rax_291,rbp_283,rbx_10,rcx_278,rdi_295,rdx_284,rsi_292,rsp_12,SCZO,SZO_293,Z_14
		defs: C_305,eax_312,ebx_301,ecx_313,edi_302,edx_298,esi_307,rax_310,rbp_297,rbx_300,rcx_311,rdi_309,rdx_299,rsi_308,rsp_296,SCZO_303,SZO_304,Z_306
	branch rax_310 == 0x0000000000000000 l0000000000409BC8
// DataOut: ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409BB2:
	branch strncmp(rax_310, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409BFF:
	word64 rsi_341
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_341)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> eax:<invalid> rcx:<invalid> edx:0x00000003 ecx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409BC8:
	word64 rsi_319
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_319)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409768:
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -16(fp):rbx -8(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000409CC0(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	word64 rax_6 = (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000)
	word32 eax_7 = (word32) rax_6
	branch eax_7 == 0x0000A000 l0000000000409D10
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CCF:
	word64 rsp_26
	word32 eax_27
	word64 rsi_28
	byte SZO_30
	byte C_31
	byte SCZO_32
	byte Z_33
	byte S_34
	byte al_35
	word64 rax_29
	call acl_extended_file (retsize: 8; depth: 16)
		uses: al_8,C,eax_7,rax_6,rsi,rsp_21,S,SCZO_22,SZO,Z_10
		defs: al_35,C_31,eax_27,rax_29,rsi_28,rsp_26,S_34,SCZO_32,SZO_30,Z_33
	branch eax_27 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CE8:
	word32 eax_48 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_48 == 0x0000005F l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_48 == 0x00000026 l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_48 == 0x00000016 l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

l0000000000409CFE:
	rax_29 = (uint64) -(word32) (eax_48 != 0x00000010)
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return rax_29
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> al:<invalid> eax:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> al:<invalid> eax:<invalid>



word64 fn0000000000409D20(word64 rsi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000409D20_entry:
	*rsiOut = rsi
// DataOut: fs r10 r11 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 rbx_181 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r10 r11 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D55_1:
	rbx_181 = rsi + 0x0000000000000001
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D59:
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D60:
	branch malloc(rbx_181) == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r10 r11 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D70:
	word64 rsp_136
	word64 r15_137
	word64 rsi_138
	word64 rax_139
	word64 r14_140
	word64 r13_141
	word64 rdi_142
	word64 r12_143
	word64 rbp_144
	word64 rbx_145
	word32 ebx_146
	byte SCZO_147
	byte CZ_148
	byte SZO_149
	byte C_150
	byte Z_151
	word64 rdx_152
	byte S_153
	word32 eax_154
	word32 edx_155
	call readlink (retsize: 8; depth: 80)
		uses: C_55,CZ_41,dwLoc3C,eax_52,ebx_42,edx_40,qwLoc08_4,qwLoc10_11,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc48,r12_45,r13_132,r14_47,r15_48,rax_130,rbp_56,rbx_131,rdi_135,rdx_133,rsi_134,rsp_49,S_38,SCZO_43,SZO_53,Z_54
		defs: C_150,CZ_148,eax_154,ebx_146,edx_155,r12_143,r13_141,r14_140,r15_137,rax_139,rbp_144,rbx_145,rdi_142,rdx_152,rsi_138,rsp_136,S_153,SCZO_147,SZO_149,Z_151
	branch rax_139 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DD8:
	word64 rax_219 = __errno_location()
	word32 edx_223 = (word32) (uint64) Mem0[rax_219:word32]
	branch edx_223 == 0x00000022 l0000000000409D86
// DataOut: edx fs r10 r11 r12 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DE4:
	free(rbp_144)
	Mem232[rax_219:word32] = (word32) (uint64) edx_223
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D86:
	branch rbx_145 >u rax_139 l0000000000409E08
// DataOut: fs r10 r11 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409E08:
	Mem202[rbp_144:byte] = 0x00
	return rbp_144
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409D8B:
	free(rbp_144)
	branch rbx_145 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DC0:
	branch rbx_145 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r10 r11 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409E20:
	Mem184[__errno_location():word32] = 0x0000000C
	return 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409DC5:
	rbx_181 = 0x00000000FFFFFFFF
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D98:
	branch malloc(rbx_145 * 0x0000000000000002) != 0x0000000000000000 l0000000000409D70
// DataOut: fs r10 r11 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DAB:
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DAD:
	return 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -72(fp):<invalid> -60(fp):edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000409D20_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 r14:r14 r13:r13 rbx:rbx rdi:<invalid> rbp:rbp r12:r12 rdx:<invalid> rsi:<invalid> -72(fp):<invalid> -60(fp):edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000409E50(word64 rcx, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx rdi rdx rsi
// LiveOut: al eax rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000409E50_entry:
// DataOut: ebp ebx fs r10 r11 r14b r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc50_109
	word64 rax_105
	word64 rax_32 = DPB(rax, strlen(rdi), 0)
	word64 rbp_126 = rdx
	word64 r14_127 = Mem0[rsi:word64]
	branch r14_127 == 0x0000000000000000 l0000000000409F72
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0058(64)

l0000000000409F72:
	qwLoc50_109 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -88(fp):rdi -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0050(64)

l0000000000409E81:
	byte bLoc41_108 = 0x00
	qwLoc50_109 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_110 = 0x0000000000000000
	rax_122 = rax_32
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -88(fp):rdi -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EE8:
	word64 rax_122
	branch strncmp(r14_127, rdi, rax_32) != 0x00000000 l0000000000409ED8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EFB:
	rax_122 = DPB(rax_122, strlen(r14_127), 0) (alias)
	branch rax_122 == rax_32 l0000000000409F60
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(0) Local -0058(64)

l0000000000409F60:
	return rbx_110
// DataOut: al eax ebp ebx fs r10 r11 r14b r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409F08:
	branch qwLoc50_109 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(64) Local -0058(64)

l0000000000409EA0:
	rax_122 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(64) Local -0058(64)

l0000000000409F50:
	bLoc41_108 = 0x01
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EAE:
	byte cl_198 = (byte) (word32) bLoc41_108
	rax_122 = 0x0000000000000001
	branch memcmp(qwLoc50_109 *s rcx + rdx, rbp_126, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0050(0) Local -0058(64)

l0000000000409ED1_1:
	cl_198 = 0x01 (alias)
// DataOut: cl fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0050(0) Local -0058(64)

l0000000000409ED4:
	bLoc41_108 = cl_198
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409ED8:
	rbx_110 = rbx_110 + 0x0000000000000001
	rbp_126 = rbp_126 + rcx
	r14_127 = Mem0[rsi + rbx_110 * 0x0000000000000008:word64]
	branch r14_127 == 0x0000000000000000 l0000000000409F28
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409F10:
	rbx_110 = rbx_110 + 0x0000000000000001
	qwLoc50_109 = rbx_110
	rbp_126 = rbp_126 + rcx
	r14_127 = Mem0[rsi + rbx_110 * 0x0000000000000008:word64]
	branch r14_127 != 0x0000000000000000 l0000000000409EE8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409F25:
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0041(0) Local -0050(64)

l0000000000409F28:
	rax_105 = 0xFFFFFFFFFFFFFFFE
	branch bLoc41_108 != 0x00 l0000000000409F3B
// DataOut: al eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0050(64)

l0000000000409F36:
	rax_105 = qwLoc50_109
// DataOut: al eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:0xFFFFFFFFFFFFFFFE ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32)

l0000000000409F3B:
	return rax_105
// DataOut: al eax ebp ebx fs r10 r11 r14b r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000409E50_exit:
// DataOut: al eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r12:r12 rbp:rbp eax:<invalid> r14:r14 rax:<invalid> rbx:rbx r13:r13 rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000409F80(word64 rdx, word64 r11, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rdx
// LiveOut: r10 r11 r15 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: fs r11 r15 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000409F95:
	dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000409FA4:
	word64 r15_27
	word64 r11_28 = fn000000000040EBF0(0x00000001, r11, r15, fs, out r15_27)
	word64 r9_37
	word64 r10_38
	word64 r11_39
	word64 r15_40
	fn000000000040E970(0x00000006, 0x00000000, r11_28, r15_27, fs, out r9_37, out r10_38, out r11_39, out r15_40)
	word64 rsp_57
	word64 r12_58
	word64 rdx_59
	byte SCZO_60
	word32 edx_61
	word64 rbp_62
	word64 rdi_63
	word64 rbx_64
	word64 rsi_65
	byte Z_66
	word32 esi_67
	word32 edi_68
	byte SZO_69
	byte C_70
	word64 rax_71
	word64 r8_72
	word64 rcx_73
	word32 eax_74
	word64 r11_75
	word64 r15_76
	selector fs_77
	word64 r9_78
	word64 r10_79
	call error (retsize: 8; depth: 8)
		uses: C_56,edi_33,esi_31,fs,qwLoc08_4,qwLoc10_11,qwLoc18_16,r10_38,r11_39,r12_50,r15_40,r8_45,r9_37,rax_54,rbp_48,rbx_43,rcx_47,rdi_53,rdx_46,rsi_52,rsp_51,SCZO_6,SZO_55,Z_7
		defs: C_70,eax_74,edi_68,edx_61,esi_67,fs_77,r10_79,r11_75,r12_58,r15_76,r8_72,r9_78,rax_71,rbp_62,rbx_64,rcx_73,rdi_63,rdx_59,rsi_65,rsp_57,SCZO_60,SZO_69,Z_66
	return rbx_64
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000409F80_exit:
// DataOut: r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



void fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005), Mem0[0x000000000061A650:word64])
	word64 r15_180 = rdi
	word64 r14_11 = 0x0000000000000000
	word64 r13_17 = rdx
	word64 rbp_176 = rsi
	word64 rbx_175 = 0x0000000000000000
	branch Mem0[rdi:word64] != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_175 == 0x0000000000000000 l000000000040A050
// DataOut: fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A08B:
	branch memcmp(r14_11, rbp_176, r13_17) != 0x00000000 l000000000040A050
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A050:
	word64 rbp_191
	word64 r8_192
	word64 r9_193
	word64 r10_194
	word64 r12_196
	fn000000000040EC10(r11, r15_180, fs, out rbx_175, out rbp_191, out r8_192, out r9_193, out r10_194, out r11, out r12_196, out r13_17, out r14_11, out r15_180)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E4A)
	rbp_176 = rbp_191 + r13_17
	branch Mem0[r15_180 + rbx_175 * 0x0000000000000008:word64] == 0x0000000000000000 l000000000040A0D0
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A09D:
	word64 r8_226
	word64 r9_227
	word64 r10_228
	word64 r12_230
	fn000000000040EC10(r11, r15_180, fs, out rbx_175, out rbp_176, out r8_226, out r9_227, out r10_228, out r11, out r12_230, out r13_17, out r14_11, out r15_180)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E52)
	branch Mem0[r15_180 + rbx_175 * 0x0000000000000008:word64] != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0D0:
	word64 rdi_67 = Mem0[0x000000000061A650:word64]
	word64 rax_69 = Mem0[rdi_67 + 0x0000000000000028:word64]
	branch rax_69 >=u Mem0[rdi_67 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0FB:
	word64 rsp_135
	word64 r15_136
	word64 rdi_137
	word32 edi_138
	byte SZO_139
	byte C_140
	word64 r14_141
	word32 r14d_142
	word64 r13_143
	word64 rdx_144
	word32 edx_145
	word64 r12_146
	word64 rbp_147
	word64 rsi_148
	word32 esi_149
	word64 rbx_150
	byte SCZO_151
	word64 rax_152
	word32 ebx_153
	word32 eax_154
	byte Z_155
	word64 rcx_156
	word64 r11_157
	selector fs_158
	word64 r8_159
	word64 r9_160
	word64 r10_161
	call __overflow (retsize: 8; depth: 8)
		uses: C_72,eax_70,ebx_56,edi_68,edx,esi,fs,qwLoc08_4,qwLoc10_10,qwLoc18_15,qwLoc20_21,qwLoc28_24,qwLoc30_30,r10_50,r11_53,r12_127,r13_129,r14_131,r14d_58,r15_133,r8_52,r9_51,rax_69,rbp_125,rbx_123,rcx_54,rdi_67,rdx_60,rsi_122,rsp_134,SCZO_121,SZO_59,Z_55
		defs: C_140,eax_154,ebx_153,edi_138,edx_145,esi_149,fs_158,r10_161,r11_157,r12_146,r13_143,r14_141,r14d_142,r15_136,r8_159,r9_160,rax_152,rbp_147,rbx_150,rcx_156,rdi_137,rdx_144,rsi_148,rsp_135,SCZO_151,SZO_139,Z_155
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0E1:
	Mem101[rdi_67 + 0x0000000000000028:word64] = rax_69 + 0x0000000000000001
	Mem102[rax_69:byte] = 0x0A
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040A120(word64 rcx, word64 rdx, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A120_entry:
// DataOut: fs r11 r8 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rax_38 = fn0000000000409E50(r8, rcx, rdx, rsi)
	branch rax_38 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word64 rsp_79
	word64 rbp_80
	word64 r9_81
	word64 r10_82
	word64 r11_83
	word64 r15_84
	word64 rbx_85 = fn0000000000409F80(rax_38, r11, r8, fs, out rsp_79, out rbp_80, out r9_81, out r10_82, out r11_83, out r15_84)
	fn000000000040A000(r15_84, rbp_80, rbx_85, r11_83, fs)
	word64 rsp_89
	word64 r15_90
	word64 r8_91
	word64 r14_92
	word64 rdi_93
	word64 r13_94
	word64 r9_95
	word64 r12_96
	word64 rsi_97
	word64 rbp_98
	word64 rcx_99
	word64 rbx_100
	word64 rdx_101
	byte SCZO_102
	word64 rax_103
	byte SZO_104
	byte C_105
	byte S_106
	word32 r13d_107
	word64 r11_108
	selector fs_109
	word64 r10_110
	call r13d (retsize: 4; depth: 4)
		uses: C_41,fs,qwLoc08_4,qwLoc10_9,qwLoc18_14,qwLoc20_19,qwLoc28_25,qwLoc30_31,r10_82,r11_83,r12_21,r13_16,r13d,r14_11,r15_84,r8,r9_81,rax_38,rbp_80,rbx_85,rcx_28,rdi_88,rdx_86,rsi_87,rsp_79,S_40,SCZO_37,SZO_39
		defs: C_105,fs_109,r10_110,r11_108,r12_96,r13_94,r13d_107,r14_92,r15_90,r8_91,r9_95,rax_103,rbp_98,rbx_100,rcx_99,rdi_93,rdx_101,rsi_97,rsp_89,S_106,SCZO_102,SZO_104
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:r8 r14:rdi r13:r9 r12:rsi rdi:<invalid> rbp:rcx rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> ecx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040A2B0(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esi rax rbp rcx rdx rsi si sil
// Preserved: rbp rbx rsp
fn000000000040A2B0_entry:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2E0:
	word64 rax_50 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EB:
	rdx_27 = rax_50
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2DC:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2F3:
	return rdx_27
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: rbx rsp
fn000000000040A400_entry:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_24 = DPB(rax, strlen(rdi), 0)
	branch rax_24 <=u 0x0000000000000001 l000000000040A41A
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A40F:
	word64 rdx_33 = rax_24 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_24:byte] == 0x2F l000000000040A420
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A420:
	rax_24 = rdx_33
	branch rdx_33 != 0x0000000000000001 l000000000040A40F
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A429:
	return rdx_33
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A41A:
	return rax_24
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

fn000000000040A400_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r11d r13 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r11d r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r11d r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsi_8
	word64 rdi_9
	word32 r14d_10
	word64 rax_11 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsi_8, out rdi_9, out r14d_10)
	branch rax_11 == 0x0000000000000000 l000000000040A623
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A623:
	fn0000000000410E50()
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_25
	word64 rsi_26
	word64 rdi_27
	word32 r14d_28
	return fn000000000040A630(rdx_7, rsi_8, rdi_9, out rdx_25, out rsi_26, out rdi_27, out r14d_28)
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_11
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rdi rdx rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A630_entry:
// DataOut: fs r10 r11 r14d r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_31
	word64 rax_32 = fn000000000040A390(rdi, out rsi_31)
	word64 rax_35 = fn000000000040A400(rax_32)
	word64 rdx_39 = rax_32 - rdi
	*rdxOut = rdx_39
	word64 r14_10 = 0x0000000000000000
	word64 rsi_43 = rdx_39 + rax_35
	*rsiOut = rsi_43
	branch rax_35 == 0x0000000000000000 l000000000040A679
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A66D:
	r14_10 = (uint64) (Mem0[rax_32 - 0x0000000000000001 + rax_35:byte] != 0x2F) (alias)
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A679:
	word64 rbx_131 = rsi + 0x0000000000000001
	branch Mem0[rsi:byte] == 0x2F l000000000040A700
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A700:
	rbx_131 = rbx_131 + 0x0000000000000000
	branch Mem0[rbx_131:byte] != 0x2F l000000000040A682
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A70D:
	rbx_131 = rbx_131 + 0x0000000000000001
	branch Mem0[rbx_131 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A71A:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A682:
	word64 rax_114
	word64 rax_56 = DPB(rax_35, strlen(rbx_131), 0)
	word64 rdi_60 = rsi_43 + 0x0000000000000001 + r14_10 + rax_56
	*rdiOut = rdi_60
	word64 rax_61 = malloc(rdi_60)
	branch rax_61 == 0x0000000000000000 l000000000040A720
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64) Local -0048(64)

l000000000040A720:
	rax_114 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32)

l000000000040A6A8:
	word64 rax_101 = mempcpy(rax_61, rdi, rsi_43)
	Mem105[rax_101:byte] = 0x2F
	word64 rdi_106 = rax_101 + r14_10
	*rdiOut = rdi_106
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: fs r10 r11 r13 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64)

l000000000040A6C3:
	Mem125[rdi_106:word64] = rdi_106 - (uint64) (Mem105[rsi:byte] == 0x2F)
// DataOut: fs r10 r11 r13 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64)

l000000000040A6D5:
	Mem113[mempcpy(rdi_106, rbx_131, rax_56):byte] = 0x00
	word64 rdx_110
	*rdxOut = rax_56
	word64 rsi_111
	*rsiOut = rbx_131
	rax_114 = rax_61
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32)

l000000000040A6E8:
	word32 r14d_89
	*r14dOut = (word32) r14
	return rax_114
// DataOut: fs r10 r11 r14d r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A630_exit:
// DataOut: r14d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r12:r12 rbp:rbp rbx:rbx rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:r13 al:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040A730(word64 rdi, word32 r14d, ptr64 & rsiOut, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut: r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
	*r9Out = r9
	*rsiOut = rsi
// DataOut: fs r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_125 = Mem0[rdi:word64]
	byte cl_128 = (byte) (word32) Mem0[rdx_125:byte]
	branch cl_128 == 0x00 l000000000040A7CD
// DataOut: cl fs r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return 0x0000000000000000
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_100 = 0x00
	word64 rax_108 = 0x0000000000000000
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_100 != 0x00 l000000000040A750
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A750:
	rsi = (uint64) ((word32) (uint64) ((int32) cl_128 & 0xFFFFFFDF) - 0x00000041)
	*rsiOut = rsi
	r8b_100 = 0x00 (alias)
	branch (word32) rsi <=u 0x00000019 l000000000040A768
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A77B:
	branch cl_128 == 0x2E l000000000040A7B8
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7B8:
	branch rax_108 == 0x0000000000000000 l000000000040A7C8
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7C8:
	rax_108 = rdx_125
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7BD:
	r8b_100 = 0x01 (alias)
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	word32 esi_112 = (int32) cl_128
	*rsiOut = DPB(rsi, esi_112, 0)
	r9 = DPB(r9, r14 - 0x0000000000000030, 0) (alias)
	*r9Out = r9
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl esi fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A78D:
	rsi = (uint64) ((word32) (uint64) (esi_112 & 0xFFFFFFDF) - 0x00000041)
	*rsiOut = rsi
	branch (word32) rsi >u 0x00000019 l000000000040A761
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:(int32) cl r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A761:
	branch cl_128 == 0x7E l000000000040A768
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A764_1:
	rax_108 = 0x0000000000000000
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A768:
	rdx_125 = rdx_125 + 0x0000000000000001
	Mem92[rdi:word64] = rdx_125
	cl_128 = (byte) (word32) Mem92[rdx_125:byte] (alias)
	branch cl_128 == 0x00 l000000000040A7B0
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A798:
	rdx_125 = rdx_125 + 0x0000000000000001
	Mem126[rdi:word64] = rdx_125
	cl_128 = (byte) (word32) Mem126[rdx_125:byte] (alias)
	branch cl_128 != 0x00 l000000000040A776
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7A6:
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7B0:
	return rax_108
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

fn000000000040A730_exit:
// DataOut: r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030



void fn000000000040AB30(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
// Preserved: rbx rsp
fn000000000040AB30_entry:
// DataOut: fs r11d r13 r14 r15b rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64)

l000000000040AB30:
	word32 eax_10 = clock_gettime(0x0000000000000000, rdi)
	branch eax_10 == 0x00000000 l000000000040AB67
// DataOut: fs r11d r13 r14 r15b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64)

l000000000040AB46:
	word64 rsp_36
	word64 rbx_37
	word64 rsi_38
	word64 rdi_39
	word32 edi_40
	byte SZO_41
	byte C_42
	byte SCZO_43
	word32 eax_44
	byte Z_45
	word32 esi_46
	word64 rax_47
	call gettimeofday (retsize: 8; depth: 32)
		uses: C_33,eax_10,edi,esi_31,qwLoc08_4,rax,rbx_7,rdi_34,rsi_30,rsp_9,SCZO,SZO_32,Z_12
		defs: C_42,eax_44,edi_40,esi_46,rax_47,rbx_37,rdi_39,rsi_38,rsp_36,SCZO_43,SZO_41,Z_45
	Mem50[rbx_37:word64] = qwLoc18
	Mem55[rbx_37 + 0x0000000000000008:word64] = qwLoc10 *s 1000
// DataOut: fs r11d r13 r14 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rsi:rdi rbx:rdi rdi:<invalid> eax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return
// DataOut: fs r11d r13 r14 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rsi:<invalid> rbx:rdi rdi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx

fn000000000040AB30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rbx:rbx rdi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx



word64 fn000000000040AB70(word64 rax, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax
// LiveOut: al rax rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsp_7
	byte SCZO_8
	word32 esi_9
	word64 rsi_10
	byte SZO_11
	byte C_12
	word64 rax_13
	byte Z_14
	word32 eax_15
	word32 edi_16
	word64 rdi_17
	word32 ecx_18
	word64 rcx_19
	byte al_20
	call setlocale (retsize: 8; depth: 16)
		uses: C_6,esi_4,rsi_3,rsp_2,SZO_5
		defs: al_20,C_12,eax_15,ecx_18,edi_16,esi_9,rax_13,rcx_19,rdi_17,rsi_10,rsp_7,SCZO_8,SZO_11,Z_14
	branch rax_13 == 0x0000000000000000 l000000000040ABB0
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return 0x0000000000000001
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

l000000000040AB80:
	byte Z_42 = cond(Mem0[rax_13:byte] - 0x43)
	branch Mem0[rax_13:byte] != 0x43 l000000000040AB98
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	Z_42 = cond(Mem0[rax_13 + 0x0000000000000001:byte]) (alias)
	branch Mem0[rax_13 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_48
	*rsiOut = rax_13
	word64 rdi_50 = 0x0000000000415E6A
	word64 rcx_52 = 0x0000000000000006
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_52 == 0x0000000000000000 l000000000040ABA7
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	Z_42 = cond(Mem0[rsi_102:byte] - Mem0[rdi_103:byte]) (alias)
	*rsiOut = rsi_102 + 0x0000000000000001
	rdi_50 = rdi_103 + 0x0000000000000001
	rcx_52 = rcx_52 - 0x0000000000000001
	word64 rsi_102 = rsi_48
	word64 rdi_103 = rdi_50
	branch Mem0[rsi_102:byte] != Mem0[rdi_103:byte] l000000000040ABA5
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return DPB(rax_13, Z_42, 0)
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return 0x0000000000000000
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

fn000000000040AB70_exit:
// DataOut: al rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



word64 fn000000000040ABC0(word64 rdi, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: r8 r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
	*rsiOut = rsi
	*r8Out = r8
	*r9Out = r9
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_129
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_129 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_129 = 0x000000000000000B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
	word64 r9_29
	*r9Out = 0x00000000AAAAAAAB
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_102
	branch rdi_129 <=u 0x0000000000000009 l000000000040AC48
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC48:
	rcx_102 = 0x0000000000000003
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABE6:
	word64 rdx_rax_89 = rdi_129 *u 0x00000000AAAAAAAB
	branch rdi_129 == (rdx_rax_89 >>u 0x0000000000000001) + (rdx_rax_89 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABF8:
	word64 r8_103
	*r8Out = 0x0000000000000010
	word64 rsi_101 = 0x0000000000000009
	rcx_102 = 0x0000000000000003
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC21:
	rsi_101 = rsi_101 + r8_103
	*rsiOut = rsi_101
	rcx_102 = rcx_102 + 0x0000000000000002
	branch rsi_101 <u rdi_129 l000000000040AC10
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC10:
	*r8Out = r8_103 + 0x0000000000000008
	branch (uint64) (rdi_129 % rcx_102) == 0x0000000000000000 l000000000040AC3A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_129 % rcx_102) != 0x0000000000000000 l000000000040AC44
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC3A:
	rdi_129 = rdi_129 + 0x0000000000000002
	branch rdi_129 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC44:
	return rdi_129
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

fn000000000040ABC0_exit:
// DataOut: r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rsi
// Trashed: SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
// Preserved: rbx rsp
fn000000000040AC80_entry:
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word32] (retsize: 4; depth: 12)
		uses: qwLoc08_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> rsi:<invalid> -8(fp):rbx

l000000000040AC94:
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> rsi:<invalid> -8(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rsiOut, ptr64 & r9Out, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx r11 r8 rax rdi rsi
// LiveOut: r10 r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi r10 r10b r10d r10w r9 r9b r9d r9w rax rcx rdi rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn000000000040ACB0_entry:
	*r9Out = r9
	*r10Out = r10
// DataOut: cl ecx fs r10 r11 r15 r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	word64 rsi_28
	word64 rax_29 = fn000000000040AC80(rax, rdi, out rsi_28)
	Mem31[rsi_28:word64] = rax_29
	byte r13b_13 = (byte) r13_11
	word64 rbp_143 = rdi
	word64 rsi_109 = Mem31[rax_29:word64]
	*rsiOut = rsi_109
	word64 rbx_142 = rax_29
	branch rsi_109 == 0x0000000000000000 l000000000040AD4F
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACD7:
	branch rsi == rsi_109 l000000000040ACE9
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACDC:
	word64 rsp_168
	word64 r14_169
	word64 rdx_170
	word64 r13_171
	word32 r13d_172
	word32 ecx_173
	word64 rsi_175
	word64 rdi_177
	word64 rax_179
	byte SZO_180
	byte C_181
	byte Z_182
	byte SCZO_183
	byte al_184
	word32 esi_185
	word64 r9_187
	word64 r10_189
	word64 rcx_191
	word64 r12_174
	call Mem31[rdi + 0x0000000000000038:word32] (retsize: 4; depth: 44)
		uses: al_30,C_37,ecx,esi_33,qwLoc08_4,qwLoc10_9,qwLoc18_16,qwLoc20_21,qwLoc28_26,r10,r11,r12_18,r13_11,r13b_13,r13d_12,r14_6,r8,r9,rax_29,rbp_23,rbx_34,rcx,rdi_167,rdx,rsi_32,rsp_24,SCZO_99,SZO_35,Z_100
		defs: al_184,C_181,ecx_173,esi_185,r10_189,r11_190,r12_174,r13_171,r13b_186,r13d_172,r14_169,r8_188,r9_187,rax_179,rbp_176,rbx_178,rcx_191,rdi_177,rdx_170,rsi_175,rsp_168,SCZO_183,SZO_180,Z_182
	branch al_184 == 0x00 l000000000040AD46
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD46:
	word64 rax_216 = Mem31[rbx_142 + 0x0000000000000008:word64]
	branch rax_216 != 0x0000000000000000 l000000000040AD30
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD30:
	rsi_109 = Mem31[rax_216:word64]
	*rsiOut = rsi_109
	branch rsi_109 == r12_174 l000000000040AD67
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD38:
	word64 rsp_268
	word64 r14_269
	word64 rdx_270
	word64 r13_271
	word32 r13d_272
	word32 ecx_273
	word64 rsi_275
	word64 rdi_277
	word64 rax_279
	byte SZO_280
	byte C_281
	byte Z_282
	byte SCZO_283
	byte al_284
	word32 esi_285
	word64 r9_287
	word64 r8_288
	word64 r10_289
	word64 r11_290
	word64 rcx_291
	call Mem31[rbp_143 + 0x0000000000000038:word32] (retsize: 4; depth: 44)
		uses: al_217,C_220,ecx_202,esi_222,qwLoc08_4,qwLoc10_9,qwLoc18_16,qwLoc20_21,qwLoc28_26,r10_208,r11_197,r12_212,r13_213,r13b_199,r13d_203,r14_214,r8_198,r9_207,rax_216,rbp_211,rbx_210,rcx_209,rdi_267,rdx_204,rsi_221,rsp_215,SCZO_223,SZO_218,Z_224
		defs: al_284,C_281,ecx_273,esi_285,r10_289,r11_290,r12_274,r13_271,r13b_286,r13d_272,r14_269,r8_288,r9_287,rax_279,rbp_276,rbx_278,rcx_291,rdi_277,rdx_270,rsi_275,rsp_268,SCZO_283,SZO_280,Z_282
	branch al_284 != 0x00 l000000000040AD60
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD60:
	rax_216 = Mem31[rbx_142 + 0x0000000000000008:word64]
	*rsiOut = Mem31[rax_216:word64]
// DataOut: fs r10 r11 r13b r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD67:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD6C:
	Mem250[rbx_142 + 0x0000000000000008:word64] = Mem31[rax_216 + 0x0000000000000008:word64]
	Mem251[rax_216:word64] = 0x0000000000000000
	Mem253[rax_216 + 0x0000000000000008:word64] = Mem251[rbp_143 + 0x0000000000000048:word64]
	Mem254[rbp_143 + 0x0000000000000048:word64] = rax_216
	return rsi_109
// DataOut: fs r10 r11 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040AD42:
	rbx_142 = Mem31[rbx_142 + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD4F:
	word64 rsi_89
	*rsiOut = 0x0000000000000000
	return 0x0000000000000000
// DataOut: fs r10 r11 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040ACE6:
	*rsiOut = Mem31[rbx_142:word64]
// DataOut: fs r10 r11 r13b r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACE9:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r10 r11 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACEE:
	word64 rax_153 = Mem31[rbx_142 + 0x0000000000000008:word64]
	branch rax_153 == 0x0000000000000000 l000000000040AD98
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD98:
	Mem166[rbx_142:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACFB:
	word64 r9_158 = Mem31[r8:word64]
	*r9Out = r9_158
	word64 r10_159 = Mem31[r8 + 0x0000000000000008:word64]
	*r10Out = r10_159
	Mem160[r11:word64] = r9_158
	Mem161[r11 + 0x0000000000000008:word64] = r10_159
	Mem162[rax_153:word64] = 0x0000000000000000
	Mem164[rax_153 + 0x0000000000000008:word64] = Mem162[rbp_143 + 0x0000000000000048:word64]
	Mem165[rbp_143 + 0x0000000000000048:word64] = rax_153
// DataOut: fs r10 r11 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD1C:
	return rsi_109
// DataOut: fs r10 r11 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn000000000040ACB0_exit:
// DataOut: r10 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r14:r14 r13:r13 r12:r12 rbp:rbp rsi:<invalid> rbx:rbx rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



byte fn000000000040ADB0(word64 rdi, word64 r8, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi xmm0 xmm1 xmm2 xmm3
// LiveOut: al xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax eax rax xmm0 xmm1 xmm2 xmm3
// Preserved: rsp
fn000000000040ADB0_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ADB0:
	word64 rax_4 = Mem0[rdi:word64]
	branch r8 == 0x0000000000415EE0 l000000000040AE30
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE30:
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADBB:
	word128 xmm0_37 = DPB(xmm0, Mem0[rax_4 + 0x0000000000000008:real32], 0)
	*xmm0Out = xmm0_37
	branch Mem0[rax_4 + 0x0000000000000008:real32] <=u Mem0[0x0000000000415EF4:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADC9:
	word128 xmm1_54
	*xmm1Out = DPB(xmm1, Mem0[0x0000000000415EF8:real32], 0)
	branch Mem0[0x0000000000415EF8:real32] <=u xmm0_37 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid>

l000000000040ADD6:
	word128 xmm1_57
	*xmm1Out = DPB(xmm1, Mem0[rax_4 + 0x000000000000000C:real32], 0)
	branch Mem0[rax_4 + 0x000000000000000C:real32] <=u Mem0[0x0000000000415EFC:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADE4:
	word128 xmm1_60
	*xmm1Out = DPB(xmm1, Mem0[rax_4:real32], 0)
	branch Mem0[rax_4:real32] <u Mem0[0x0000000000415F00:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADF1:
	word128 xmm1_64 = DPB(xmm1, Mem0[rax_4:real32] + Mem0[0x0000000000415EF4:real32], 0)
	*xmm1Out = xmm1_64
	word128 xmm2_65 = DPB(xmm2, Mem0[rax_4 + 0x0000000000000004:real32], 0)
	*xmm2Out = xmm2_65
	branch Mem0[rax_4 + 0x0000000000000004:real32] <=u xmm1_64 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040AE03:
	word128 xmm3_68
	*xmm3Out = DPB(xmm3, Mem0[0x0000000000415F04:real32], 0)
	branch Mem0[0x0000000000415F04:real32] <u xmm2_65 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid>

l000000000040AE10:
	branch Mem0[rax_4 + 0x0000000000000008:real32] >u xmm1_64 l000000000040AE35
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE35:
	return 0x01
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE1A:
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE20:
	Mem48[rdi:word64] = 0x0000000000415EE0
	return 0x00
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

fn000000000040ADB0_exit:
// DataOut: al xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>



word64 fn000000000040AE40(word64 rax, word32 edx, word64 rbp, word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rbp rdi rsi
// LiveOut: al eax rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040AE40_entry:
	*rsiOut = rsi
// DataOut: dl ebp edx fs r10 r11 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_8 = (byte) (uint64) edx
	word64 r13_113 = Mem0[rsi:word64]
	branch r13_113 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE64:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE71:
	word64 rbx_116 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_116 != 0x0000000000000000 l000000000040AE94
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE94:
	word64 rbp_204 = Mem0[rbx_116:word64]
	word64 rsi_207
	rax = fn000000000040AC80(rax, rdi, out rsi_207)
	word64 rdx_212 = Mem0[rbx_116 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE80:
	Mem243[rbx_116 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem244[rax + 0x0000000000000008:word64] = rbx_116
	branch rdx_212 == 0x0000000000000000 l000000000040AED0
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEAC:
	Mem228[rax:word64] = rbp_204
	Mem230[rdi + 0x0000000000000018:word64] = Mem228[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem234[rbx_116:word64] = 0x0000000000000000
	rax = Mem234[rdi + 0x0000000000000048:word64]
	Mem237[rbx_116 + 0x0000000000000008:word64] = rax
	Mem238[rdi + 0x0000000000000048:word64] = rbx_116
	branch rdx_212 != 0x0000000000000000 l000000000040AE91
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE91:
	rbx_116 = rdx_212
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AECF:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AED0:
	rbp = Mem0[rbp_204:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE7A:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AED4:
	Mem133[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF08:
	word64 rsi_136
	rax = fn000000000040AC80(rax, rdi, out rsi_136)
	branch Mem133[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF5B:
	Mem195[rax:word64] = rbp
	Mem197[rdi + 0x0000000000000018:word64] = Mem195[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF1C:
	rax = Mem133[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF75:
	return 0x0000000000000000
// DataOut: al eax ebp fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040AF26:
	Mem171[rdi + 0x0000000000000048:word64] = Mem133[rax + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF2F:
	word64 rdx_166 = Mem133[rax + 0x0000000000000008:word64]
	Mem167[rax:word64] = rbp
	Mem168[rax + 0x0000000000000008:word64] = rdx_166
	Mem169[rax + 0x0000000000000008:word64] = rax
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF3E:
	Mem149[rbp:word64] = 0x0000000000000000
	Mem151[rsi_136 + 0x0000000000000018:word64] = Mem149[rsi_136 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_113 = r13_113 + 0x0000000000000010
	branch Mem151[rsi + 0x0000000000000008:word64] >u r13_113 l000000000040AE68
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF59:
// DataOut: fs r10 r11 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEE1:
	r13_113 = r13_113 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_113 l000000000040AE68
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEEF:
	return 0x0000000000000001
// DataOut: al eax ebp fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040AE40_exit:
// DataOut: al eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r12:r12 r13:r13 rax:<invalid> rbx:rbx rbp:rbp rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: r13 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return Mem0[rdi + 0x0000000000000020:word64]
// DataOut: r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040B400(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & r9Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r9 rax xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040B400_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r9Out = r9
// DataOut: ebx fs r10 r11 r12d r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B400:
	word64 r15_193 = rdi
	word32 r15d_8 = (word32) rdi
	word64 r13_19 = rdx
	word64 r12_24 = rcx
	word64 rbp_119 = rsi
	branch rdx != 0x0000000000000000 l000000000040B42E
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B42A_1:
	r13_19 = 0x000000000040AC60
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:rdx r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B42E:
	branch rcx != 0x0000000000000000 l000000000040B43A
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B436_1:
	r12_24 = 0x000000000040AC70
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B43A:
	word64 rax_226
	word64 rax_43 = malloc(0x0000000000000050)
	branch rax_43 == 0x0000000000000000 l000000000040B598
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B598:
	rax_226 = 0x0000000000000000
// DataOut: eax fs r10 r11 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B44B:
	branch rsi != 0x0000000000000000 l000000000040B45B
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B457_1:
	rbp_119 = 0x0000000000415EE0
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B45B:
	Mem120[rax_43 + 0x0000000000000028:word64] = rbp_119
	word128 xmm0_125
	word128 xmm1_126
	word128 xmm2_127
	word128 xmm3_128
	branch fn000000000040ADB0(rax_43 + 0x0000000000000028, r8, xmm0, xmm1, xmm2, xmm3, out xmm0_125, out xmm1_126, out xmm2_127, out xmm3_128) == 0x00 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B46C:
	word128 xmm1_170 = DPB(xmm1_126, Mem120[rbp_119 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_170
	branch Mem120[rbp_119 + 0x0000000000000010:byte] != 0x00 l000000000040B4C0
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B477:
	word128 xmm0_233
	branch rdi < 0x0000000000000000 l000000000040B578
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B578:
	r15_193 = (uint64) (r15d_8 & 0x00000001)
	real32 v33_262 = (real32) (rdi >>u 0x0000000000000001 | r15_193)
	xmm0_233 = DPB(xmm0_125, v33_262 + DPB(xmm0_125, v33_262, 0), 0)
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B480:
	xmm0_233 = DPB(xmm0_125, (real32) rdi, 0)
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B485:
	real32 v26_237 = (real32) xmm0_233 / xmm1_170
	word128 xmm0_238
	*xmm0Out = DPB(xmm0_233, v26_237, 0)
	branch v26_237 >=u Mem120[0x0000000000415F08:real32] l000000000040B540
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B496:
	branch v26_237 <u Mem120[0x0000000000415F0C:real32] l000000000040B568
// DataOut: fs r10 r11 r12 r13 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B568:
	r15_193 = DPB(r15_193, v26_237, 0) (alias)
// DataOut: fs r10 r11 r12 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4A3:
	real32 v28_243 = v26_237 - Mem120[0x0000000000415F0C:real32]
	word128 xmm0_244
	*xmm0Out = DPB(xmm0_233, v28_243, 0)
	r15_193 = DPB(r15_193, v28_243, 0) ^ 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4C0:
	word64 rsi_195
	word64 r8_196
	word64 r9_197
	word64 rax_198 = fn000000000040ABC0(r15_193, out rsi_195, out r8_196, out r9_197)
	branch rax_198 >u 0x00000000FFFFFFFF l000000000040B540
// DataOut: fs r10 r11 r12 r13 r14 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B540:
	Mem186[rax_43 + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4DA:
	Mem206[rax_43 + 0x0000000000000010:word64] = rax_198
	branch rax_198 == 0x0000000000000000 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4E3:
	word64 rax_209 = calloc(rax_198, 0x0000000000000010)
	Mem215[rax_43:word64] = rax_209
	branch rax_209 == 0x0000000000000000 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B548:
	free(rax_43)
	return 0x0000000000000000
// DataOut: eax ebx fs r10 r11 r12d r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040B4F8:
	Mem217[rax_43 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem218[rax_43 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem221[r11 + 0x0000000000000030:word64] = r13_19
	Mem223[r11 + 0x0000000000000038:word64] = r12_24
	Mem224[rax_43 + 0x0000000000000008:word64] = rax_209 + (rax_198 << 0x0000000000000004)
	Mem225[r11 + 0x0000000000000040:word64] = r8
	Mem229[rax_43 + 0x0000000000000048:word64] = 0x0000000000000000
	rax_226 = rax_43
// DataOut: eax fs r10 r11 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B52A:
	return rax_226
// DataOut: eax ebx fs r10 r11 r12d r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040B400_exit:
// DataOut: eax r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 rdi:<invalid> r14:r14 r13:r13 r12:r12 rbp:rbp rbx:rbx xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040B640(word64 rdi, word64 r13, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: r12 rbp rbx rdi rsp
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B640:
	word64 rax_117
	word64 rbp_114 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6C6:
	word64 r12_100 = Mem0[r15:word64]
	branch r12_100 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6D0:
	word64 rdi_102 = Mem0[r12_100:word64]
	branch rdi_102 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6E3:
	word64 rsp_121
	word64 rdi_124
	word64 rbx_125
	byte SCZO_126
	byte Z_127
	word64 rax_128
	byte C_130
	byte SZO_131
	byte CZ_132
	word64 r15_133
	call Mem0[rbp_114 + 0x0000000000000040:word32] (retsize: 4; depth: 28)
		uses: C_106,CZ_98,qwLoc08_4,qwLoc10_7,qwLoc18_12,r12_100,r13_95,r15_94,rax_96,rbp_99,rbx_103,rdi_102,rsp_101,SCZO_97,SZO_104,Z_105
		defs: C_130,CZ_132,r12_122,r13_129,r15_133,rax_128,rbp_123,rbx_125,rdi_124,rsp_121,SCZO_126,SZO_131,Z_127
	branch Mem0[rbx_125 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6EF:
	rax_117 = Mem0[rbp_114 + 0x0000000000000008:word64]
	r12_100 = r12_100 + 0x0000000000000010
	branch rax_117 >u r12_100 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B655:
	rax_117 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B659:
	word64 r12_56 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_56 >=u rax_117 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B668:
	word64 rdi_63 = Mem0[r12_56 + 0x0000000000000000:word64]
	branch rdi_63 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B67B:
	word64 rbx_76 = Mem0[rdi_63 + 0x0000000000000008:word64]
	free(rdi_63)
	branch rbx_76 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B678:
	rdi_63 = rbx_76
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B689:
	r12_56 = r12_56 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_56 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B693:
	word64 rdi_25 = Mem0[rbp_114 + 0x0000000000000048:word64]
	branch rdi_25 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6A3:
	word64 rbx_41 = Mem0[rdi_25 + 0x0000000000000008:word64]
	free(rdi_25)
	branch rbx_41 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6A0:
	rdi_25 = rbx_41
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6B1:
	free(Mem0[rbp_114:word64])
	free(rbp_114)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp r12:r12 rax:<invalid> rdi:rdi rbx:rbx -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040B710(word64 rsi, word64 rdi, word64 r11, word128 xmm0, word128 xmm1, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & xmm0Out, ptr64 & xmm1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi r11 rdi rsi xmm0 xmm1
// LiveOut: al r8 r9 rax rsi xmm0 xmm1
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1
// Preserved: r12 rbp rbx rsp
fn000000000040B710_entry:
	*xmm0Out = xmm0
	*rsiOut = rsi
	*r8Out = r8
	*r9Out = r9
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B710:
	word64 rbp_15 = Mem0[rdi + 0x0000000000000028:word64]
	word128 xmm1_20 = DPB(xmm1, Mem0[rbp_15 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_20
	branch Mem0[rbp_15 + 0x0000000000000010:byte] != 0x00 l000000000040B770
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B72A:
	word128 xmm0_250
	branch rsi < 0x0000000000000000 l000000000040B8D0
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B8D0:
	rsi = (uint64) (esi & 0x00000001)
	*rsiOut = rsi
	real32 v28_286 = (real32) (rsi >>u 0x0000000000000001 | rsi)
	xmm0_250 = DPB(xmm0, v28_286 + DPB(xmm0, v28_286, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B733:
	xmm0_250 = DPB(xmm0, (real32) rsi, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B738:
	real32 v16_255 = (real32) xmm0_250 / xmm1_20
	word128 xmm0_256
	*xmm0Out = DPB(xmm0_250, v16_255, 0)
	branch v16_255 >=u Mem0[0x0000000000415F08:real32] l000000000040B870
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B749:
	branch v16_255 <u Mem0[0x0000000000415F0C:real32] l000000000040B880
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B880:
	rsi = DPB(rsi, v16_255, 0) (alias)
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B756:
	real32 v18_265 = v16_255 - Mem0[0x0000000000415F0C:real32]
	word128 xmm0_266
	*xmm0Out = DPB(xmm0_250, v18_265, 0)
	rsi = DPB(rsi, v18_265, 0) ^ 0x0000000000000000
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B770:
	word64 rsi_111
	word64 r8_112
	word64 r9_113
	word64 rax_114 = fn000000000040ABC0(rsi, out rsi_111, out r8_112, out r9_113)
	branch rax_114 >u 0xFFFFFFFFFFFFFFFF l000000000040B870
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B792:
	branch Mem0[r11 + 0x0000000000000010:word64] == rax_114 l000000000040B860
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B860:
	return 0x0000000000000001
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B79C:
	word64 rsi_124
	*rsiOut = 0x0000000000000010
	word64 rax_127 = calloc(rax_114, 0x0000000000000010)
	branch rax_127 == 0x0000000000000000 l000000000040B870
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B870:
	return 0x0000000000000000
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B7B6:
	word64 rax_153 = Mem0[rdi + 0x0000000000000048:word64]
	word64 rsi_155
	word64 rax_156 = fn000000000040AE40(rax_153, 0x00000000, rbp_15, rdi, fp - 0x0000000000000068, out rsi_155)
	word64 rbp_162 = (uint64) (word32) rax_156
	word64 rax_138 = rax_127 + (rax_114 << 0x0000000000000004)
	word32 ebp_163 = (word32) rbp_162
	branch (byte) rax_156 != 0x00 l000000000040B890
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:0x0000000000000010 xmm0:<invalid> esi:0x00000010 r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64) Local -0058(64) Local -0060(64) Local -0068(64)

l000000000040B890:
	free(Mem0[rdi:word64])
	Mem214[rdi:word64] = rax_127
	Mem216[rdi + 0x0000000000000008:word64] = rax_138
	Mem218[rdi + 0x0000000000000010:word64] = rax_114
	Mem220[rdi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem222[rdi + 0x0000000000000048:word64] = rax_153
	return (uint64) ebp_163
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B815:
	Mem169[rdi + 0x0000000000000048:word64] = rax_153
	word64 rsi_170
	word64 rax_171 = fn000000000040AE40(rax_153, 0x00000001, rbp_162, fp - 0x0000000000000068, rdi, out rsi_170)
	branch (byte) rax_171 == 0x00 l000000000040B8EA
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B836:
	word64 rsi_194
	branch (byte) fn000000000040AE40(rax_171, 0x00000000, rbp_162, fp - 0x0000000000000068, rdi, out rsi_194) == 0x00 l000000000040B8EA
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B8EA:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B84B:
	free(rax_127)
	return (uint64) ebp_163
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B710_exit:
// DataOut: al r8 r9 rax rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rbp:rbp xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:r12 rax:(uint64) ebp xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn000000000040B8F0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r10 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3
// Preserved: r12 rbp rbx rsp
fn000000000040B8F0_entry:
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r8Out = r8
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: fs r11 r13 r14 r15 r8 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040B8F0:
	branch rsi == 0x0000000000000000 l000000000040BA67
// DataOut: fs r11 r13 r14 r15 r8 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040B904:
	word32 eax_131
	word64 rsi_69
	word64 r9_70
	word64 r10_71
	word64 rax_72 = fn000000000040ACB0(rax, 0x00000000, rsi, rdi, r8, r11, out rsi_69, out r9_70, out r10_71)
	branch rax_72 == 0x0000000000000000 l000000000040B938
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B938:
	word128 xmm0_171
	word64 rax_165 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_166 = (word32) rax_165
	branch rax_165 < 0x0000000000000000 l000000000040BA70
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA70:
	real32 v26_411 = (real32) (rax_165 >>u 0x0000000000000001 | (uint64) (eax_166 & 0x00000001))
	*xmm0Out = DPB(xmm0, v26_411 + DPB(xmm0, v26_411, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B945:
	*xmm0Out = DPB(xmm0, (real32) rax_165, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B94A:
	word128 xmm1_179
	word64 rax_172 = Mem0[rdi + 0x0000000000000010:word64]
	word32 eax_173 = (word32) rax_172
	word64 rdx_175 = Mem0[rdi + 0x0000000000000028:word64]
	branch rax_172 < 0x0000000000000000 l000000000040BA90
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA90:
	real32 v45_399 = (real32) (rax_172 >>u 0x0000000000000001 | (uint64) (eax_173 & 0x00000001))
	xmm1_179 = DPB(xmm1, v45_399 + DPB(xmm1, v45_399, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B95B:
	xmm1_179 = DPB(xmm1, (real32) rax_172, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B960:
	word128 xmm1_185 = DPB(xmm1_179, (real32) xmm1_179 * Mem0[rdx_175 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_185
	branch (real32) xmm0_171 >u xmm1_185 l000000000040B9C8
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9C8:
	word128 xmm0_297
	word128 xmm0_284
	word128 xmm1_285
	word128 xmm2_286
	word128 xmm3_287
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_171, xmm1_185, xmm2, xmm3, out xmm0_284, out xmm1_285, out xmm2_286, out xmm3_287)
	word64 rax_289 = Mem0[rdi + 0x0000000000000010:word64]
	word64 rdx_292 = Mem0[rdi + 0x0000000000000028:word64]
	word32 eax_290 = (word32) rax_289
	word128 xmm2_296 = DPB(xmm2_286, Mem0[rdx_292 + 0x0000000000000008:real32], 0)
	*xmm2Out = xmm2_296
	branch rax_289 < 0x0000000000000000 l000000000040BAE7
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BAE7:
	real32 v43_387 = (real32) (rax_289 >>u 0x0000000000000001 | (uint64) (eax_290 & 0x00000001))
	*xmm0Out = DPB(xmm0_284, v43_387 + DPB(xmm0_284, v43_387, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9E7:
	*xmm0Out = DPB(xmm0_284, (real32) rax_289, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9EC:
	word128 xmm1_305
	word64 rax_299 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_300 = (word32) rax_299
	branch rax_299 < 0x0000000000000000 l000000000040BB01
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BB01:
	real32 v40_375 = (real32) (rax_299 >>u 0x0000000000000001 | (uint64) (eax_300 & 0x00000001))
	*xmm1Out = DPB(xmm1_285, v40_375 + DPB(xmm1_285, v40_375, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9F9:
	*xmm1Out = DPB(xmm1_285, (real32) rax_299, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9FE:
	word128 xmm3_312 = DPB(xmm2_286, Mem0[rdx_292 + 0x0000000000000008:real32] * xmm0_297, 0)
	*xmm3Out = xmm3_312
	branch (real32) xmm1_305 <=u xmm3_312 l000000000040B96A
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA0E:
	real32 v36_317 = (real32) xmm0_297 * Mem0[rdx_292 + 0x000000000000000C:real32]
	word128 xmm0_318
	*xmm0Out = DPB(xmm0_297, v36_317, 0)
	branch Mem0[rdx_292 + 0x0000000000000010:byte] != 0x00 l000000000040BA1D
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA19:
	*xmm0Out = DPB(xmm0_297, v36_317 * xmm2_296, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA1D:
	branch (real32) xmm0_318 >=u Mem0[0x0000000000415F08:real32] l000000000040BB2E
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA2A:
	word64 rsi_326
	branch (real32) xmm0_318 >=u Mem0[0x0000000000415F0C:real32] l000000000040BAC8
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BAC8:
	real32 v42_356 = (real32) xmm0_318 - Mem0[0x0000000000415F0C:real32]
	xmm0_318 = DPB(xmm0_318, v42_356, 0)
	rsi_326 = DPB(rsi_69, v42_356, 0) ^ 0x0000000000000000
// DataOut: esi fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA37:
	rsi_326 = DPB(rsi_69, (int32) xmm0_318, 0) (alias)
// DataOut: esi fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA3C:
	word64 rsi_328
	word64 r8_329
	word64 r9_330
	word128 xmm0_331
	word128 xmm1_332
	word64 rax_333 = fn000000000040B710(rsi_326, rdi, r11, xmm0_318, xmm1_305, out rsi_328, out r8_329, out r9_330, out xmm0_331, out xmm1_332)
	branch (byte) rax_333 == 0x00 l000000000040BB2E
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA4C:
	word64 rsi_347
	word64 r9_348
	word64 r10_349
	branch fn000000000040ACB0(rax_333, 0x00000000, rsi, rdi, r8_329, r11, out rsi_347, out r9_348, out r10_349) == 0x0000000000000000 l000000000040B96A
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA67:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B96A:
	branch Mem0[qwLoc20:word64] == 0x0000000000000000 l000000000040BAB0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BAB0:
	Mem274[qwLoc20:word64] = rsi
	Mem279[rdi + 0x0000000000000020:word64] = Mem274[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	Mem281[rdi + 0x0000000000000018:word64] = Mem279[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	eax_131 = 0x00000001 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B97A:
	word64 rax_237 = Mem0[rdi + 0x0000000000000048:word64]
	branch rax_237 == 0x0000000000000000 l000000000040BB1B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BB1B:
	rax_237 = malloc(0x0000000000000010)
	branch rax_237 != 0x0000000000000000 l000000000040B98F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BB2E:
	eax_131 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B987:
	Mem266[rdi + 0x0000000000000048:word64] = Mem0[rax_237 + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B98F:
	word64 rdx_248 = Mem0[qwLoc20 + 0x0000000000000008:word64]
	Mem249[rax_237:word64] = rsi
	Mem250[rax_237 + 0x0000000000000008:word64] = rdx_248
	Mem251[qwLoc20 + 0x0000000000000008:word64] = rax_237
	Mem256[rdi + 0x0000000000000020:word64] = Mem251[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	return 0x00000001
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B91B:
	branch rdx == 0x0000000000000000 l000000000040B9B8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B9B8:
	return 0x00000000
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B924:
	Mem146[rdx:word64] = rax_72
	eax_131 = 0x00000000 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B92A:
	return eax_131
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B8F0_exit:
// DataOut: eax r10 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp r12:r12 rdx:<invalid> rcx:<invalid> rbx:rbx rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040BB50(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r10 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3
// Preserved: rbx rsp
fn000000000040BB50_entry:
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64)

l000000000040BB50:
	word64 rax_33
	word64 rsi_18
	word64 r8_19
	word64 r9_20
	word64 r10_21
	word128 xmm0_22
	word128 xmm1_23
	word128 xmm2_24
	word128 xmm3_25
	word32 eax_26 = fn000000000040B8F0(rax, fp - 0x0000000000000010, rsi, rdi, r8, r11, xmm0, xmm1, xmm2, xmm3, out rsi_18, out r8_19, out r9_20, out r10_21, out xmm0_22, out xmm1_23, out xmm2_24, out xmm3_25)
	branch eax_26 == 0xFFFFFFFF l000000000040BB80
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0010(64)

l000000000040BB80:
	rax_33 = 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rcx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l000000000040BB67:
	rax_33 = rsi
	branch eax_26 != 0x00000000 l000000000040BB72
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rcx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32) Local -0010(64)

l000000000040BB6C_1:
	rax_33 = qwLoc10
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rax:rsi rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l000000000040BB72:
	return rax_33
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx

fn000000000040BB50_exit:
// DataOut: eax r10 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx



word64 fn000000000040BB90(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: r10 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3
// Preserved: r12 rbp rbx rsp
fn000000000040BB90_entry:
	*r8Out = r8
	*xmm3Out = xmm3
	*xmm2Out = xmm2
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: fs r11 r13 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040BB90:
	word64 rsi_22
	word64 r9_23
	word64 r10_24
	word64 rax_219 = fn000000000040ACB0(rax, 0x00000001, rsi, rdi, r8, r11, out rsi_22, out r9_23, out r10_24)
	branch rax_219 == 0x0000000000000000 l000000000040BD08
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040BD08:
	rax_219 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:fp - 0x0000000000000020 rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBB6:
	Mem101[rdi + 0x0000000000000020:word64] = Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem101[qwLoc20:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:fp - 0x0000000000000020 rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBD0:
	word128 xmm0_122
	word64 rax_114 = Mem101[rdi + 0x0000000000000018:word64]
	Mem121[rdi + 0x0000000000000018:word64] = rax_114 - 0x0000000000000001
	word32 eax_116 = (word32) (rax_114 - 0x0000000000000001)
	branch rax_114 < 0x0000000000000001 l000000000040BCE8
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCE8:
	real32 v25_302 = (real32) (rax_114 - 0x0000000000000001 >>u 0x0000000000000001 | (uint64) (eax_116 & 0x00000001))
	*xmm0Out = DPB(xmm0, v25_302 + DPB(xmm0, v25_302, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBE5:
	*xmm0Out = DPB(xmm0, (real32) (rax_114 - 0x0000000000000001), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBEA:
	word128 xmm1_133
	word64 rax_123 = Mem121[rdi + 0x0000000000000010:word64]
	word32 eax_124 = (word32) rax_123
	word64 rdx_126 = Mem121[rdi + 0x0000000000000028:word64]
	branch rax_123 < 0x0000000000000000 l000000000040BCC8
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCC8:
	real32 v33_290 = (real32) (rax_123 >>u 0x0000000000000001 | (uint64) (eax_124 & 0x00000001))
	xmm1_133 = DPB(xmm1, v33_290 + DPB(xmm1, v33_290, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBFB:
	xmm1_133 = DPB(xmm1, (real32) rax_123, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC00:
	real32 v22_137 = (real32) xmm1_133 * Mem121[rdx_126:real32]
	word128 xmm1_138 = DPB(xmm1_133, v22_137, 0)
	*xmm1Out = xmm1_138
	branch v22_137 >u xmm0_122 l000000000040BC18
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC18:
	word128 xmm0_182
	word128 xmm0_167
	word128 xmm1_168
	word128 xmm2_169
	word128 xmm3_170
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_122, xmm1_138, xmm2, xmm3, out xmm0_167, out xmm1_168, out xmm2_169, out xmm3_170)
	word64 rdx_172 = Mem121[rdi + 0x0000000000000010:word64]
	word32 edx_173 = (word32) rdx_172
	word64 rax_175 = Mem121[rdi + 0x0000000000000028:word64]
	branch rdx_172 < 0x0000000000000000 l000000000040BD2F
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD2F:
	real32 v36_278 = (real32) (rdx_172 >>u 0x0000000000000001 | (uint64) (edx_173 & 0x00000001))
	*xmm0Out = DPB(xmm0_167, v36_278 + DPB(xmm0_167, v36_278, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC32:
	*xmm0Out = DPB(xmm0_167, (real32) rdx_172, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC37:
	word128 xmm1_190
	word64 rdx_183 = Mem121[rdi + 0x0000000000000018:word64]
	word32 edx_184 = (word32) rdx_183
	branch rdx_183 < 0x0000000000000000 l000000000040BD49
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD49:
	real32 v38_266 = (real32) (rdx_183 >>u 0x0000000000000001 | (uint64) (edx_184 & 0x00000001))
	*xmm1Out = DPB(xmm1_168, v38_266 + DPB(xmm1_168, v38_266, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC44:
	*xmm1Out = DPB(xmm1_168, (real32) rdx_183, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC49:
	real32 v30_195 = Mem121[rax_175:real32] * xmm0_182
	word128 xmm2_196
	*xmm2Out = DPB(xmm2_169, v30_195, 0)
	branch v30_195 <=u xmm1_190 l000000000040BC09
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC56:
	real32 v31_201 = (real32) xmm0_182 * Mem121[rax_175 + 0x0000000000000004:real32]
	word128 xmm0_202 = DPB(xmm0_182, v31_201, 0)
	branch Mem121[rax_175 + 0x0000000000000010:byte] != 0x00 l000000000040BC66
// DataOut: fs r10 r11 r13 r15 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC61:
	xmm0_202 = DPB(xmm0_182, v31_201 * Mem121[rax_175 + 0x0000000000000008:real32], 0)
// DataOut: fs r10 r11 r13 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC66:
	word64 rsi_207
	branch (real32) xmm0_202 >=u Mem121[0x0000000000415F0C:real32] l000000000040BD10
// DataOut: fs r10 r11 r13 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD10:
	real32 v42_247 = (real32) xmm0_202 - Mem121[0x0000000000415F0C:real32]
	xmm0_202 = DPB(xmm0_202, v42_247, 0)
	rsi_207 = DPB(rsi_22, v42_247, 0) ^ 0x0000000000000000
// DataOut: esi fs r10 r11 r13 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC73:
	rsi_207 = DPB(rsi_22, (int32) xmm0_202, 0) (alias)
// DataOut: esi fs r10 r11 r13 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC78:
	word64 rsi_210
	word64 r8_211
	word64 r9_212
	word128 xmm0_213
	word128 xmm1_214
	branch (byte) (uint64) (word32) fn000000000040B710(rsi_207, rdi, r11, xmm0_202, xmm1_190, out rsi_210, out r8_211, out r9_212, out xmm0_213, out xmm1_214) != 0x00 l000000000040BBC6
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC8D:
	word64 rdi_225 = Mem121[rdi + 0x0000000000000048:word64]
	branch rdi_225 != 0x0000000000000000 l000000000040BCA3
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCA3:
	word64 r12_240 = Mem121[r15 + 0x0000000000000008:word64]
	free(rdi_225)
	branch r12_240 != 0x0000000000000000 l000000000040BCA0
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCA0:
	rdi_225 = r12_240
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC96:
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCB1:
	Mem234[rdi + 0x0000000000000048:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC09:
	return rax_219
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040BBC6:
	return rax_219
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040BB90_exit:
// DataOut: r10 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rbx:rbx rdx:<invalid> rbp:rbp rax:<invalid> r12:r12 rsi:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: r10 r11 r11d r8 r9 rax
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsi rsp
fn000000000040BD70_entry:
	def fp
	def r15
	def edx
	def r14
	def rsi
	def r13
	def r12
	def rdi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocC8
	def r8Out
	def r9Out
	def r10Out
	def r11Out
	def dwLoc8C
	def qwLocA8
	def qwLocB0
	def rLoc4
	def wLoc82
	def wLoc84
	def rLocA8
	def rLoc3
	def rLoc2
	def qwLoc80
	def rLoc1
	def rLocE8
	def rdx_rax
	def edx_eax
// DataOut: edx fs r10 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000008
	qwLoc08_4 = r15
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 0x0000000000000010
	qwLoc10_12 = r14
	r14_14 = rsi
	r14d_15 = (word32) r14_14 (alias)
	rsp_16 = fp - 0x0000000000000018
	qwLoc18_18 = r13
	rsp_19 = fp - 0x0000000000000020
	qwLoc20_21 = r12
	r12_23 = rdi
	r12d_24 = (word32) r12_23 (alias)
	rsp_25 = fp - 0x0000000000000028
	qwLoc28_27 = rbp
	rsp_28 = fp - 0x0000000000000030
	qwLoc30_30 = rbx
	rbx_32 = rcx
	ebx_33 = (word32) rbx_32 (alias)
	rsp_34 = fp - 0x00000000000000E8
	dwLocB0_35 = eax_9
	rax_36 = (uint64) edx
	eax_37 = (word32) rax_36 (alias)
	qwLocB8_38 = rsi
	rax_39 = (uint64) (eax_37 & 0x00000020)
	eax_40 = (word32) rax_39 (alias)
	dwLocC8_41 = edx
	qwLocC0_43 = r8
	rcx_46 = Mem0[fs:0x00000028:word64]
	qwLoc40_47 = rcx_46
	rcx_48 = 0x0000000000000000
	SCZO_49 = cond(eax_40 - 0x00000001)
	C_50 = SCZO_49 (alias)
	dwLoc90_51 = eax_40
	rax_52 = (uint64) (0x00000000 - C_50)
	eax_53 = (word32) rax_52 (alias)
	dwLocC4_54 = eax_53
	v21_55 = dwLocC4_54 & 0xFFFFFFE8
	dwLocC4_56 = v21_55
	SZO_57 = cond(dwLocC4_56)
	v22_58 = dwLocC4_56 + 0x00000400
	dwLocC4_59 = v22_58
	SCZO_60 = cond(v22_58)
	call localeconv (retsize: 8; depth: 240)
		uses: C_50,dwLoc90_51,dwLocB0_35,dwLocC4_59,dwLocC8_41,eax_53,ebx_33,edx,fs,qwLoc08_4,qwLoc10_12,qwLoc18_18,qwLoc20_21,qwLoc28_27,qwLoc30_30,qwLoc40_47,qwLocB8_38,qwLocC0_43,r12_23,r12d_24,r13,r14_14,r14d_15,r15,r8,rax_52,rbp,rbx_32,rcx_48,rdi,rsi,rsp_34,SCZO_60,SZO_57
		defs: ah_95,al_101,ax_96,C_67,cl_88,CZ_82,CZP_93,dil_100,dl_98,eax_63,ebx_85,ecx_79,edi_87,edx_64,esi_91,fs_78,P_97,r10_86,r10b_104,r10d_103,r11_80,r12_71,r12d_92,r13_70,r14_68,r14d_94,r15_62,r15d_102,r8_77,r9_90,r9d_89,rax_65,rbp_73,rbx_74,rcx_75,rdi_72,rdx_81,rsi_69,rsp_61,S_84,SCZO_76,sil_99,SZO_66,Z_83
	r15_105 = Mem0[r8_77:word64]
	r15d_106 = (word32) r15_105 (alias)
	r13_107 = rax_65
	rdi_108 = r15_105
	eax_109 = strlen(rdi_108)
	rax_110 = DPB(rax_65, eax_109, 0) (alias)
	rbp_111 = Mem0[rbp_73 + 0x0000000000000010:word64]
	r11_112 = rax_110
	r13_113 = Mem0[r13_107 + 0x0000000000000008:word64]
	rax_114 = rax_110 - 0x0000000000000001
	rdx_115 = 0x0000000000000001
	SCZO_116 = cond(rax_114 - 0x0000000000000010)
	C_117 = SCZO_116 (alias)
	SZO_118 = SCZO_116 (alias)
	Z_119 = SCZO_116 (alias)
	CZ_120 = SCZO_116 (alias)
	S_121 = SCZO_116 (alias)
	CZP_122 = SCZO_116 (alias)
	rdi_123 = r13_113
	edi_124 = (word32) rdi_123 (alias)
	dil_125 = (byte) rdi_123 (alias)
	rax_126 = 0x0000000000413990
	branch rax_114 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE06_1:
	r11_1815 = 0x0000000000000001
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE0A:
	r11_127 = PHI(r11_112, r11_1815)
	branch rax_114 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE0A_1:
	r15_1813 = 0x0000000000413990
	r15d_1814 = (word32) r15_1813 (alias)
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE0E:
	r15d_128 = PHI(r15d_106, r15d_1814)
	r15_129 = PHI(r15_105, r15_1813)
	qwLoc98_130 = r11_127
	eax_131 = strlen(rdi_123)
	rax_132 = DPB(rax_126, eax_131, 0) (alias)
	SCZO_133 = cond(rax_132 - 0x0000000000000011)
	C_134 = SCZO_133 (alias)
	rax_135 = 0x0000000000416919
	r11_136 = qwLoc98_130
	branch rax_132 <u 0x0000000000000011 l000000000040BE2A
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE26_1:
	r13_1812 = 0x0000000000416919
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE2A:
	r13_137 = PHI(r13_113, r13_1812)
	rax_138 = r14_68
	r8_139 = r8_77 + 648
	SCZO_140 = cond(qwLocC0_43 - rbx_74)
	CZ_141 = SCZO_140 (alias)
	qwLocD0_142 = rax_138
	branch qwLocC0_43 >u rbx_74 l000000000040C0E0
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C0E0:
	SZO_1748 = cond(rbx_74 & rbx_74)
	Z_1749 = SZO_1748 (alias)
	C_1750 = false
	branch Test(EQ,Z_1749) l000000000040BE59
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C0E9:
	rax_1753 = qwLocC0_43
	rdx_1754 = 0x0000000000000000
	rdx_rax_1755 = SEQ(rdx_1754, rax_1753) (alias)
	v34_1756 = rdx_rax_1755
	rdx_1757 = (uint64) (v34_1756 % rbx_74)
	rax_1758 = (uint64) (v34_1756 /u rbx_74)
	SZO_1759 = cond(rdx_1757 & rdx_1757)
	Z_1760 = SZO_1759 (alias)
	C_1761 = false
	rsi_1762 = rax_1758
	sil_1763 = (byte) rsi_1762 (alias)
	esi_1764 = (word32) rsi_1762 (alias)
	branch Test(NE,Z_1760) l000000000040BE59
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C0FF:
	rdx_1765 = 0x0000000000000000
	rax_1766 = r12_71
	rdx_rax_1767 = SEQ(rdx_1765, rax_1766) (alias)
	v35_1768 = rdx_rax_1767
	rdx_1769 = (uint64) (v35_1768 % rsi_1762)
	rax_1770 = (uint64) (v35_1768 /u rsi_1762)
	rdi_1771 = rdx_1769 + rdx_1769 * 0x0000000000000004
	r10_1772 = rax_1770
	r10d_1773 = (word32) r10_1772 (alias)
	r10b_1774 = (byte) r10_1772 (alias)
	rdx_1775 = 0x0000000000000000
	rax_1776 = rdi_1771 + rdi_1771
	rdx_rax_1777 = SEQ(rdx_1775, rax_1776) (alias)
	v37_1778 = rdx_rax_1777
	rdx_1779 = (uint64) (v37_1778 % rsi_1762)
	rax_1780 = (uint64) (v37_1778 /u rsi_1762)
	eax_1781 = (word32) rax_1780 (alias)
	rdx_1782 = rdx_1779 + rdx_1779
	edx_1783 = (word32) rdx_1782 (alias)
	rdx_rax_1784 = SEQ(rdx_1782, rax_1780) (alias)
	edx_eax_1785 = rdx_1782 (alias)
	dl_1786 = (byte) rdx_1782 (alias)
	rdi_1787 = (uint64) eax_1781
	edi_1788 = (word32) rdi_1787 (alias)
	dil_1789 = (byte) rdi_1787 (alias)
	SCZO_1790 = cond(rsi_1762 - rdx_1782)
	C_1791 = SCZO_1790 (alias)
	SZO_1792 = SCZO_1790 (alias)
	Z_1793 = SCZO_1790 (alias)
	CZ_1794 = SCZO_1790 (alias)
	S_1795 = SCZO_1790 (alias)
	CZP_1796 = SCZO_1790 (alias)
	branch Test(ULE,CZ_1794) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r11d r13 r15 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C6E0:
	rcx_1804 = (uint64) (0x00000000 - C_1791)
	ecx_1805 = (word32) rcx_1804 (alias)
	rcx_1806 = (uint64) ~ecx_1805
	ecx_1807 = (word32) rcx_1806 (alias)
	rcx_1808 = (uint64) (ecx_1807 + 0x00000003)
	ecx_1809 = (word32) rcx_1808 (alias)
	cl_1810 = (byte) rcx_1808 (alias)
	SCZO_1811 = cond(ecx_1809)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C125:
	rcx_1797 = 0x0000000000000000
	SZO_1798 = cond(rdx_1782 & rdx_1782)
	Z_1799 = SZO_1798 (alias)
	C_1800 = false
	cl_1801 = Test(NE,Z_1799)
	rcx_1802 = DPB(rcx_1797, cl_1801, 0) (alias)
	ecx_1803 = DPB(ecx_79, cl_1801, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040BE43:
	rdx_1710 = 0x0000000000000000
	rax_1711 = rbx_74
	rdx_rax_1712 = SEQ(rdx_1710, rax_1711) (alias)
	v27_1713 = rdx_rax_1712
	rdx_1714 = (uint64) (v27_1713 % qwLocC0_43)
	rax_1715 = (uint64) (v27_1713 /u qwLocC0_43)
	eax_1716 = (word32) rax_1715 (alias)
	rdx_rax_1717 = SEQ(rdx_1714, rax_1715) (alias)
	edx_eax_1718 = rax_1715 (alias)
	ah_1719 = SLICE(rax_1715, byte, 8) (alias)
	ax_1720 = (word16) rax_1715 (alias)
	al_1721 = (byte) rax_1715 (alias)
	SZO_1722 = cond(rdx_1714 & rdx_1714)
	Z_1723 = SZO_1722 (alias)
	C_1724 = false
	rcx_1725 = rax_1715
	ecx_1726 = (word32) rcx_1725 (alias)
	cl_1727 = (byte) rcx_1725 (alias)
	branch Test(EQ,Z_1723) l000000000040C2F0
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r15 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C2F0:
	r10_1728 = rax_1715
	rdx_1729 = 0x0000000000000000
	r10_1730 = r10_1728 *s r12_71
	r10d_1731 = (word32) r10_1730 (alias)
	r10b_1732 = (byte) r10_1730 (alias)
	rax_1733 = r10_1730
	rdx_rax_1734 = SEQ(rdx_1729, rax_1733) (alias)
	v71_1735 = rdx_rax_1734
	rdx_1736 = (uint64) (v71_1735 % rcx_1725)
	rax_1737 = (uint64) (v71_1735 /u rcx_1725)
	SCZO_1738 = cond(rax_1737 - r12_71)
	Z_1739 = SCZO_1738 (alias)
	branch Test(NE,Z_1739) l000000000040BE59
// DataOut: bx fs r10 r10b r10d r11 r11d r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C308:
	rcx_1740 = 0x0000000000000000
	ecx_1741 = (word32) rcx_1740 (alias)
	cl_1742 = (byte) rcx_1740 (alias)
	rdi_1743 = 0x0000000000000000
	edi_1744 = (word32) rdi_1743 (alias)
	dil_1745 = (byte) rdi_1743 (alias)
	SZO_1746 = cond(edi_1744)
	C_1747 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C12D:
	r10b_1267 = PHI(r10b_1774, r10b_1774, r10b_1732)
	r10d_1268 = PHI(r10d_1773, r10d_1773, r10d_1731)
	dil_1269 = PHI(dil_1789, dil_1789, dil_1745)
	sil_1270 = PHI(sil_1763, sil_1763, sil_99)
	CZP_1271 = PHI(CZP_1796, CZP_1796, CZP_122)
	esi_1272 = PHI(esi_1764, esi_1764, esi_91)
	edi_1273 = PHI(edi_1788, edi_1788, edi_1744)
	r10_1274 = PHI(r10_1772, r10_1772, r10_1730)
	S_1275 = PHI(S_1795, S_1795, S_121)
	CZ_1276 = PHI(CZ_1794, CZ_1794, CZ_141)
	rsi_1277 = PHI(rsi_1762, rsi_1762, rsi_69)
	ecx_1278 = PHI(ecx_1803, ecx_1809, ecx_1741)
	rcx_1279 = PHI(rcx_1802, rcx_1808, rcx_1740)
	cl_1280 = PHI(cl_1801, cl_1810, cl_1742)
	rdi_1281 = PHI(rdi_1787, rdi_1787, rdi_1743)
	rax_1282 = PHI(rax_1780, rax_1780, rax_1737)
	eax_1283 = PHI(eax_1781, eax_1781, eax_1716)
	ah_1284 = PHI(ah_95, ah_95, ah_1719)
	ax_1285 = PHI(ax_96, ax_96, ax_1720)
	al_1286 = PHI(al_101, al_101, al_1721)
	rdx_1287 = PHI(rdx_1782, rdx_1782, rdx_1736)
	edx_1288 = PHI(edx_1783, edx_1783, edx_64)
	rdx_rax_1289 = PHI(rdx_rax_1784, rdx_rax_1784, rdx_rax_1734)
	edx_eax_1290 = PHI(edx_eax_1785, edx_eax_1785, edx_eax_1718)
	dl_1291 = PHI(dl_1786, dl_1786, dl_98)
	SCZO_1292 = PHI(SCZO_1790, SCZO_1811, SCZO_1738)
	r9_1293 = (uint64) dwLocC8_41
	r9d_1294 = (word32) r9_1293 (alias)
	r8_1295 = qwLocD0_142
	rbx_1296 = 0x00000000FFFFFFFF
	ebx_1297 = (word32) rbx_1296 (alias)
	r9_1298 = (uint64) (r9d_1294 & 0x00000010)
	r9d_1299 = (word32) r9_1298 (alias)
	SZO_1300 = cond(r9d_1299)
	Z_1301 = SZO_1300 (alias)
	C_1302 = false
	branch Test(EQ,Z_1301) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C146:
	rsi_1486 = (uint64) dwLocC4_59
	sil_1487 = (byte) rsi_1486 (alias)
	esi_1488 = (word32) rsi_1486 (alias)
	SCZO_1489 = cond(r10_1274 - rsi_1486)
	C_1490 = SCZO_1489 (alias)
	branch Test(ULT,C_1490) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C710:
	r8_1705 = qwLocD0_142
	rbx_1706 = 0x0000000000000000
	ebx_1707 = (word32) rbx_1706 (alias)
	SZO_1708 = cond(ebx_1707)
	C_1709 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C153:
	rbx_1491 = 0x0000000000000000
	ebx_1492 = (word32) rbx_1491 (alias)
	SZO_1493 = cond(ebx_1492)
	C_1494 = false
	r12_1495 = (uint64) dwLocC4_59
	r12d_1496 = (word32) r12_1495 (alias)
// DataOut: ebx ecx edi fs r10 r11 r11d r12d r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C17D:
	r10_1497 = PHI(r10_1274, r10_1516)
	ebx_1498 = PHI(ebx_1492, ebx_1550)
	ecx_1499 = PHI(ecx_1278, ecx_1543)
	rdi_1500 = PHI(rdi_1281, rdi_1535)
	SZO_1501 = PHI(SZO_1493, SZO_1546)
	Z_1502 = PHI(Z_1301, Z_1558)
	C_1503 = PHI(C_1494, C_1548)
	edx_1504 = PHI(edx_1288, edx_1525)
	rbx_1505 = PHI(rbx_1491, rbx_1549)
	rax_1506 = r10_1497
	rdx_1507 = 0x0000000000000000
	rdx_rax_1508 = SEQ(rdx_1507, rax_1506) (alias)
	v47_1509 = rdx_rax_1508
	rdx_1510 = (uint64) (v47_1509 % rsi_1486)
	rax_1511 = (uint64) (v47_1509 /u rsi_1486)
	r8_1512 = rax_1511
	eax_1513 = rdx_1510 + rdx_1510 * 0x0000000000000004
	rax_1514 = DPB(rax_1511, eax_1513, 0) (alias)
	rdx_1515 = 0x0000000000000000
	r10_1516 = r8_1512
	r10d_1517 = (word32) r10_1516 (alias)
	r10b_1518 = (byte) r10_1516 (alias)
	eax_1519 = rdi_1500 + rax_1514 * 0x0000000000000002
	edx_eax_1520 = SEQ(edx_1504, eax_1519) (alias)
	rdi_1521 = (uint64) ecx_1499
	edi_1522 = (word32) rdi_1521 (alias)
	rdi_1523 = (uint64) (edi_1522 >> 0x00000001)
	v49_1524 = edx_eax_1520
	edx_1525 = (uint32) (v49_1524 % r12d_1496)
	rdx_1526 = DPB(rdx_1515, edx_1525, 0) (alias)
	eax_1527 = (uint32) (v49_1524 /u r12d_1496)
	rax_1528 = DPB(rax_1514, eax_1527, 0) (alias)
	rdx_rax_1529 = DPB(rdx_rax_1508, eax_1527, 0) (alias)
	edx_eax_1530 = SEQ(edx_1525, eax_1527) (alias)
	ah_1531 = SLICE(eax_1527, byte, 8) (alias)
	ax_1532 = (word16) eax_1527 (alias)
	al_1533 = (byte) eax_1527 (alias)
	r14d_1534 = rdi_1523 + rdx_1526 * 0x0000000000000002
	rdi_1535 = (uint64) eax_1527
	edi_1536 = (word32) rdi_1535 (alias)
	dil_1537 = (byte) rdi_1535 (alias)
	rcx_1538 = (uint64) (ecx_1499 + r14d_1534)
	ecx_1539 = (word32) rcx_1538 (alias)
	cl_1540 = (byte) rcx_1538 (alias)
	SCZO_1541 = cond(r12d_1496 - r14d_1534)
	CZ_1542 = SCZO_1541 (alias)
	branch Test(UGT,CZ_1542) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C160:
	SZO_1698 = cond(ecx_1539 & ecx_1539)
	Z_1699 = SZO_1698 (alias)
	C_1700 = false
	cl_1701 = Test(NE,Z_1699)
	ecx_1702 = (word32) cl_1701
	rcx_1703 = DPB(rcx_1538, ecx_1702, 0) (alias)
	cl_1704 = (byte) ecx_1702 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C1A8:
	SCZO_1688 = cond(r12d_1496 - ecx_1539)
	C_1689 = SCZO_1688 (alias)
	rcx_1690 = (uint64) (0x00000000 - C_1689)
	ecx_1691 = (word32) rcx_1690 (alias)
	rcx_1692 = (uint64) ~ecx_1691
	ecx_1693 = (word32) rcx_1692 (alias)
	rcx_1694 = (uint64) (ecx_1693 + 0x00000003)
	ecx_1695 = (word32) rcx_1694 (alias)
	cl_1696 = (byte) rcx_1694 (alias)
	SCZO_1697 = cond(ecx_1695)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C168:
	ecx_1543 = PHI(ecx_1695, ecx_1702)
	rcx_1544 = PHI(rcx_1694, rcx_1703)
	cl_1545 = PHI(cl_1696, cl_1704)
	SZO_1546 = PHI(SZO_1501, SZO_1698)
	Z_1547 = PHI(Z_1502, Z_1699)
	C_1548 = PHI(C_1689, C_1700)
	rbx_1549 = (uint64) (ebx_1498 + 0x00000001)
	ebx_1550 = (word32) rbx_1549 (alias)
	SCZO_1551 = cond(rsi_1486 - r8_1512)
	CZ_1552 = SCZO_1551 (alias)
	branch Test(UGT,CZ_1552) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C49F:
	SCZO_1559 = cond(r8_1512 - 0x0000000000000009)
	CZ_1560 = SCZO_1559 (alias)
	branch Test(UGT,CZ_1560) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4A9:
	SCZO_1561 = cond(dwLocB0_35 - 0x00000001)
	Z_1562 = SCZO_1561 (alias)
	branch Test(EQ,Z_1562) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7B0:
	rdx_1675 = (uint64) eax_1527
	edx_1676 = (word32) rdx_1675 (alias)
	rdx_1677 = (uint64) (edx_1676 & 0x00000001)
	edx_1678 = (word32) rdx_1677 (alias)
	rdx_1679 = (uint64) (edx_1678 + ecx_1543)
	edx_1680 = (word32) rdx_1679 (alias)
	SCZO_1681 = cond(edx_1680 - 0x00000002)
	SZO_1682 = SCZO_1681 (alias)
	dl_1683 = Test(GT,SZO_1682)
	edx_1684 = DPB(edx_1680, dl_1683, 0) (alias)
	rdx_1685 = DPB(rdx_1679, dl_1683, 0) (alias)
	rdx_rax_1686 = DPB(rdx_rax_1529, dl_1683, 64) (alias)
	edx_eax_1687 = DPB(edx_eax_1530, dl_1683, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4B4:
	r12_1659 = (uint64) dwLocB0_35
	r12d_1660 = (word32) r12_1659 (alias)
	SZO_1661 = cond(ecx_1543 & ecx_1543)
	dl_1662 = Test(GT,SZO_1661)
	edx_1663 = DPB(edx_1525, dl_1662, 0) (alias)
	SZO_1664 = cond(r12d_1660 & r12d_1660)
	Z_1665 = SZO_1664 (alias)
	sil_1666 = Test(EQ,Z_1665)
	esi_1667 = DPB(esi_1488, sil_1666, 0) (alias)
	rdx_1668 = (uint64) (edx_1663 & esi_1667)
	edx_1669 = (word32) rdx_1668 (alias)
	rdx_rax_1670 = SEQ(rdx_1668, rax_1528) (alias)
	edx_eax_1671 = rdx_1668 (alias)
	dl_1672 = (byte) rdx_1668 (alias)
	SZO_1673 = cond(edx_1669)
	C_1674 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4C7:
	sil_1563 = PHI(sil_1666, sil_1487)
	esi_1564 = PHI(esi_1667, esi_1488)
	r12d_1565 = PHI(r12d_1660, r12d_1496)
	rdx_1566 = PHI(rdx_1668, rdx_1685)
	edx_1567 = PHI(edx_1669, edx_1684)
	rdx_rax_1568 = PHI(rdx_rax_1670, rdx_rax_1686)
	edx_eax_1569 = PHI(edx_eax_1671, edx_eax_1687)
	dl_1570 = PHI(dl_1672, dl_1683)
	SCZO_1571 = PHI(SCZO_1561, SCZO_1681)
	r12_1572 = PHI(r12_1659, r12_1495)
	SZO_1573 = cond(dl_1570 & dl_1570)
	Z_1574 = SZO_1573 (alias)
	C_1575 = false
	branch Test(EQ,Z_1574) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C788:
	SZO_1656 = cond(eax_1527 & eax_1527)
	Z_1657 = SZO_1656 (alias)
	C_1658 = false
	branch Test(NE,Z_1657) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4CF:
	edi_1632 = rax_1528 + 0x0000000000000001
	rdi_1633 = DPB(rdi_1535, edi_1632, 0) (alias)
	dil_1634 = (byte) edi_1632 (alias)
	SCZO_1635 = cond(edi_1632 - 0x0000000A)
	Z_1636 = SCZO_1635 (alias)
	branch Test(EQ,Z_1636) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7CE:
	r10_1637 = r8_1512 + 0x0000000000000001
	r10d_1638 = (word32) r10_1637 (alias)
	r10b_1639 = (byte) r10_1637 (alias)
	SCZO_1640 = cond(r10_1637 - 0x000000000000000A)
	Z_1641 = SCZO_1640 (alias)
	branch Test(NE,Z_1641) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7FF:
	rcx_1651 = 0x0000000000000000
	ecx_1652 = (word32) rcx_1651 (alias)
	cl_1653 = (byte) rcx_1651 (alias)
	SZO_1654 = cond(0x00000000)
	C_1655 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C790:
	r10b_1608 = PHI(r10b_1639, r10b_1518)
	r10d_1609 = PHI(r10d_1638, r10d_1517)
	dil_1610 = PHI(dil_1634, dil_1537)
	edi_1611 = PHI(edi_1632, edi_1536)
	r10_1612 = PHI(r10_1637, r10_1516)
	ecx_1613 = PHI(ecx_1652, ecx_1543)
	rcx_1614 = PHI(rcx_1651, rcx_1544)
	cl_1615 = PHI(cl_1653, cl_1545)
	rdi_1616 = PHI(rdi_1633, rdi_1535)
	SCZO_1617 = PHI(SCZO_1640, SCZO_1571)
	SZO_1618 = cond(bLocC8 & 0x08)
	Z_1619 = SZO_1618 (alias)
	C_1620 = false
	branch Test(NE,Z_1619) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7C2:
	r8_1626 = qwLocD0_142
	rdi_1627 = 0x0000000000000000
	edi_1628 = (word32) rdi_1627 (alias)
	dil_1629 = (byte) rdi_1627 (alias)
	SZO_1630 = cond(0x00000000)
	C_1631 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C797:
	rdi_1621 = 0x0000000000000000
	edi_1622 = (word32) rdi_1621 (alias)
	dil_1623 = (byte) rdi_1621 (alias)
	SZO_1624 = cond(0x00000000)
	C_1625 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7D8:
	r8_1642 = qwLocD0_142
	rcx_1643 = 0x0000000000000000
	ecx_1644 = (word32) rcx_1643 (alias)
	cl_1645 = (byte) rcx_1643 (alias)
	rdi_1646 = 0x0000000000000000
	edi_1647 = (word32) rdi_1646 (alias)
	dil_1648 = (byte) rdi_1646 (alias)
	SZO_1649 = cond(0x00000000)
	C_1650 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4DB:
	edi_1576 = PHI(edi_1632, edi_1536, edi_1622)
	r10_1577 = PHI(r10_1516, r10_1516, r10_1612)
	Z_1578 = PHI(Z_1636, Z_1657, Z_1619)
	SCZO_1579 = PHI(SCZO_1635, SCZO_1571, SCZO_1617)
	rax_1580 = qwLocB8_38
	rdi_1581 = (uint64) (edi_1576 + 0x00000030)
	dil_1582 = (byte) rdi_1581 (alias)
	rdx_1583 = r11_136
	rsi_1584 = r15_129
	dwLoc8C_1585 = r9d_1299
	qwLocA8_1586 = r10_1577
	qwLoc98_1587 = r11_136
	r8_1588 = r8_1512 + 0x0000000000000287
	Mem1589[rax_1580 + 0x0000000000000287:byte] = dil_1582
	r8_1590 = r8_1588 - r11_136
	rdi_1591 = r8_1590
	rax_1592 = memcpy(rdi_1591, rsi_1584, rdx_1583)
	r11_1593 = qwLoc98_1587
	r10_1594 = qwLocA8_1586
	r10d_1595 = (word32) r10_1594 (alias)
	r10b_1596 = (byte) r10_1594 (alias)
	r8_1597 = rax_1592
	r9_1598 = (uint64) dwLoc8C_1585
	r9d_1599 = (word32) r9_1598 (alias)
	rcx_1600 = 0x0000000000000000
	ecx_1601 = (word32) rcx_1600 (alias)
	cl_1602 = (byte) rcx_1600 (alias)
	rdi_1603 = 0x0000000000000000
	edi_1604 = (word32) rdi_1603 (alias)
	dil_1605 = (byte) rdi_1603 (alias)
	SZO_1606 = cond(0x00000000)
	C_1607 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C174:
	SCZO_1557 = cond(ebx_1550 - 0x00000008)
	Z_1558 = SCZO_1557 (alias)
	branch Test(EQ,Z_1558) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C768:
	CZ_1553 = PHI(CZ_1552, CZ_1560)
	Z_1554 = PHI(Z_1558, Z_1547)
	SCZO_1555 = PHI(SCZO_1557, SCZO_1559)
	r8_1556 = qwLocD0_142
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C530:
	dwLoc8C_1303 = PHI(dwLoc8C, dwLoc8C, dwLoc8C_1585, dwLoc8C, dwLoc8C, dwLoc8C)
	qwLocA8_1304 = PHI(qwLocA8, qwLocA8, qwLocA8_1586, qwLocA8, qwLocA8, qwLocA8)
	qwLoc98_1305 = PHI(qwLoc98_130, qwLoc98_130, qwLoc98_1587, qwLoc98_130, qwLoc98_130, qwLoc98_130)
	r10b_1306 = PHI(r10b_1267, r10b_1518, r10b_1596, r10b_1639, r10b_1608, r10b_1267)
	r10d_1307 = PHI(r10d_1268, r10d_1517, r10d_1595, r10d_1638, r10d_1609, r10d_1268)
	dil_1308 = PHI(dil_1269, dil_1537, dil_1605, dil_1648, dil_1629, dil_1269)
	sil_1309 = PHI(sil_1487, sil_1487, sil_1563, sil_1563, sil_1563, sil_1270)
	esi_1310 = PHI(esi_1488, esi_1488, esi_1564, esi_1564, esi_1564, esi_1272)
	edi_1311 = PHI(edi_1273, edi_1536, edi_1604, edi_1647, edi_1628, edi_1273)
	r10_1312 = PHI(r10_1274, r10_1516, r10_1594, r10_1637, r10_1612, r10_1274)
	r11_1313 = PHI(r11_136, r11_136, r11_1593, r11_136, r11_136, r11_136)
	r8_1314 = PHI(r8_1705, r8_1556, r8_1597, r8_1642, r8_1626, r8_1295)
	r9_1315 = PHI(r9_1298, r9_1298, r9_1598, r9_1298, r9_1298, r9_1298)
	r9d_1316 = PHI(r9d_1299, r9d_1299, r9d_1599, r9d_1299, r9d_1299, r9d_1299)
	r12d_1317 = PHI(r12d_92, r12d_1496, r12d_1565, r12d_1565, r12d_1565, r12d_92)
	r14d_1318 = PHI(r14d_94, r14d_1534, r14d_1534, r14d_1534, r14d_1534, r14d_94)
	CZ_1319 = PHI(CZ_1276, CZ_1553, CZ_1560, CZ_1560, CZ_1560, CZ_1276)
	ebx_1320 = PHI(ebx_1707, ebx_1550, ebx_1550, ebx_1550, ebx_1550, ebx_1297)
	rsi_1321 = PHI(rsi_1486, rsi_1486, rsi_1584, rsi_1486, rsi_1486, rsi_1277)
	ecx_1322 = PHI(ecx_1278, ecx_1543, ecx_1601, ecx_1644, ecx_1613, ecx_1278)
	rcx_1323 = PHI(rcx_1279, rcx_1544, rcx_1600, rcx_1643, rcx_1614, rcx_1279)
	cl_1324 = PHI(cl_1280, cl_1545, cl_1602, cl_1645, cl_1615, cl_1280)
	rdi_1325 = PHI(rdi_1281, rdi_1535, rdi_1603, rdi_1646, rdi_1627, rdi_1281)
	SZO_1326 = PHI(SZO_1708, SZO_1546, SZO_1606, SZO_1649, SZO_1630, SZO_1300)
	C_1327 = PHI(C_1709, C_1548, C_1607, C_1650, C_1631, C_1302)
	rax_1328 = PHI(rax_1282, rax_1528, rax_1592, rax_1528, rax_1528, rax_1282)
	eax_1329 = PHI(eax_1283, eax_1527, eax_1527, eax_1527, eax_1527, eax_1283)
	ah_1330 = PHI(ah_1284, ah_1531, ah_1531, ah_1531, ah_1531, ah_1284)
	ax_1331 = PHI(ax_1285, ax_1532, ax_1532, ax_1532, ax_1532, ax_1285)
	al_1332 = PHI(al_1286, al_1533, al_1533, al_1533, al_1533, al_1286)
	rdx_1333 = PHI(rdx_1287, rdx_1526, rdx_1583, rdx_1566, rdx_1566, rdx_1287)
	edx_1334 = PHI(edx_1288, edx_1525, edx_1567, edx_1567, edx_1567, edx_1288)
	rdx_rax_1335 = PHI(rdx_rax_1289, rdx_rax_1529, rdx_rax_1568, rdx_rax_1568, rdx_rax_1568, rdx_rax_1289)
	edx_eax_1336 = PHI(edx_eax_1290, edx_eax_1530, edx_eax_1569, edx_eax_1569, edx_eax_1569, edx_eax_1290)
	dl_1337 = PHI(dl_1291, dl_1291, dl_1570, dl_1570, dl_1570, dl_1291)
	rbx_1338 = PHI(rbx_1706, rbx_1549, rbx_1549, rbx_1549, rbx_1549, rbx_1296)
	r12_1339 = PHI(r12_71, r12_1495, r12_1572, r12_1572, r12_1572, r12_71)
	SCZO_1340 = cond(dwLocB0_35 - 0x00000001)
	Z_1341 = SCZO_1340 (alias)
	branch Test(EQ,Z_1341) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C6F0:
	rax_1467 = r10_1312
	eax_1468 = (word32) rax_1467 (alias)
	rcx_1469 = (int64) ecx_1322
	rax_1470 = (uint64) (eax_1468 & 0x00000001)
	rax_1471 = rax_1470 + rcx_1469
	SCZO_1472 = cond(rax_1471)
	Z_1473 = SCZO_1472 (alias)
	al_1474 = Test(NE,Z_1473)
	eax_1475 = (word32) al_1474
	rdi_1476 = (uint64) (edi_1311 + eax_1475)
	edi_1477 = (word32) rdi_1476 (alias)
	SCZO_1478 = cond(edi_1477 - 0x00000005)
	SZO_1479 = SCZO_1478 (alias)
	al_1480 = Test(GT,SZO_1479)
	eax_1481 = DPB(eax_1475, al_1480, 0) (alias)
	rax_1482 = DPB(rax_1471, al_1480, 0) (alias)
	rdx_rax_1483 = DPB(rdx_rax_1335, al_1480, 0) (alias)
	edx_eax_1484 = DPB(edx_eax_1336, al_1480, 0) (alias)
	ax_1485 = DPB(ax_1331, al_1480, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C53B:
	rsi_1446 = (uint64) dwLocB0_35
	esi_1447 = (word32) rsi_1446 (alias)
	rax_1448 = 0x0000000000000000
	eax_1449 = (word32) rax_1448 (alias)
	rdx_rax_1450 = SEQ(rdx_1333, rax_1448) (alias)
	edx_eax_1451 = rax_1448 (alias)
	ax_1452 = (word16) rax_1448 (alias)
	al_1453 = (byte) rax_1448 (alias)
	SZO_1454 = cond(esi_1447 & esi_1447)
	Z_1455 = SZO_1454 (alias)
	C_1456 = false
	branch Test(NE,Z_1455) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C545:
	rcx_1457 = (uint64) (ecx_1322 + edi_1311)
	ecx_1458 = (word32) rcx_1457 (alias)
	SZO_1459 = cond(ecx_1458 & ecx_1458)
	C_1460 = false
	al_1461 = Test(GT,SZO_1459)
	eax_1462 = DPB(eax_1449, al_1461, 0) (alias)
	rax_1463 = DPB(rax_1448, al_1461, 0) (alias)
	rdx_rax_1464 = DPB(rdx_rax_1450, al_1461, 0) (alias)
	edx_eax_1465 = DPB(edx_eax_1451, al_1461, 0) (alias)
	ax_1466 = DPB(ax_1452, al_1461, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C54C:
	esi_1342 = PHI(esi_1447, esi_1447, esi_1310)
	edi_1343 = PHI(edi_1311, edi_1311, edi_1477)
	rsi_1344 = PHI(rsi_1446, rsi_1446, rsi_1321)
	ecx_1345 = PHI(ecx_1322, ecx_1458, ecx_1322)
	rcx_1346 = PHI(rcx_1323, rcx_1457, rcx_1469)
	rdi_1347 = PHI(rdi_1325, rdi_1325, rdi_1476)
	rax_1348 = PHI(rax_1448, rax_1463, rax_1482)
	eax_1349 = PHI(eax_1449, eax_1462, eax_1481)
	ax_1350 = PHI(ax_1452, ax_1466, ax_1485)
	al_1351 = PHI(al_1453, al_1461, al_1480)
	rdx_rax_1352 = PHI(rdx_rax_1450, rdx_rax_1464, rdx_rax_1483)
	edx_eax_1353 = PHI(edx_eax_1451, edx_eax_1465, edx_eax_1484)
	SCZO_1354 = PHI(SCZO_1340, SCZO_1340, SCZO_1478)
	SZO_1355 = cond(al_1351 & al_1351)
	Z_1356 = SZO_1355 (alias)
	C_1357 = false
	branch Test(EQ,Z_1356) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C550:
	r10_1408 = r10_1312 + 0x0000000000000001
	r10d_1409 = (word32) r10_1408 (alias)
	r10b_1410 = (byte) r10_1408 (alias)
	SZO_1411 = cond(r9d_1316 & r9d_1316)
	Z_1412 = SZO_1411 (alias)
	C_1413 = false
	branch Test(EQ,Z_1412) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C559:
	rax_1414 = (uint64) dwLocC4_59
	eax_1415 = (word32) rax_1414 (alias)
	rdx_rax_1416 = SEQ(rdx_1333, rax_1414) (alias)
	edx_eax_1417 = rax_1414 (alias)
	ah_1418 = SLICE(rax_1414, byte, 8) (alias)
	ax_1419 = (word16) rax_1414 (alias)
	al_1420 = (byte) rax_1414 (alias)
	SCZO_1421 = cond(rax_1414 - r10_1408)
	Z_1422 = SCZO_1421 (alias)
	branch Test(NE,Z_1422) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C562:
	SCZO_1423 = cond(ebx_1320 - 0x00000008)
	Z_1424 = SCZO_1423 (alias)
	branch Test(EQ,Z_1424) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C567:
	rbx_1425 = (uint64) (ebx_1320 + 0x00000001)
	ebx_1426 = (word32) rbx_1425 (alias)
	SZO_1427 = cond(bLocC8 & 0x08)
	Z_1428 = SZO_1427 (alias)
	C_1429 = false
	r10_1430 = 0x0000000000000001
	r10d_1431 = (word32) r10_1430 (alias)
	r10b_1432 = (byte) r10_1430 (alias)
	branch Test(NE,Z_1428) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C577:
	rax_1433 = rax_1414 - 0x0000000000000001
	Mem1434[rax_1433 - 0x0000000000000001:byte] = 0x30
	rdx_1435 = r11_1313
	rsi_1436 = r15_129
	qwLocB0_1437 = 0x0000000000000001
	rax_1438 = rax_1433 - r11_1313
	SCZO_1439 = cond(rax_1438)
	rdi_1440 = rax_1438
	rax_1441 = memcpy(rdi_1440, rsi_1436, rdx_1435)
	r10_1442 = 0x0000000000000001
	r10d_1443 = (word32) r10_1442 (alias)
	r10b_1444 = (byte) r10_1442 (alias)
	r8_1445 = rax_1441
// DataOut: ebx fs r10 r10b r11 r11d r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:0x0000000000000001 r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5A0:
	qwLocB0_1358 = PHI(qwLocB0, qwLocB0, qwLocB0, qwLocB0, qwLocB0, qwLocB0_1437)
	r10b_1359 = PHI(r10b_1306, r10b_1410, r10b_1410, r10b_1410, r10b_1432, r10b_1444)
	r10d_1360 = PHI(r10d_1307, r10d_1409, r10d_1409, r10d_1409, r10d_1431, r10d_1443)
	r10_1361 = PHI(r10_1312, r10_1408, r10_1408, r10_1408, r10_1430, r10_1442)
	r8_1362 = PHI(r8_1314, r8_1314, r8_1314, r8_1314, r8_1314, r8_1445)
	ebx_1363 = PHI(ebx_1320, ebx_1320, ebx_1320, ebx_1320, ebx_1426, ebx_1426)
	rsi_1364 = PHI(rsi_1344, rsi_1344, rsi_1344, rsi_1344, rsi_1344, rsi_1436)
	rdi_1365 = PHI(rdi_1347, rdi_1347, rdi_1347, rdi_1347, rdi_1347, rdi_1440)
	SZO_1366 = PHI(SZO_1355, SZO_1411, SZO_1411, SZO_1411, SZO_1427, SZO_1427)
	Z_1367 = PHI(Z_1356, Z_1412, Z_1422, Z_1424, Z_1428, Z_1428)
	C_1368 = PHI(C_1357, C_1413, C_1413, C_1413, C_1429, C_1429)
	rax_1369 = PHI(rax_1348, rax_1348, rax_1414, rax_1414, rax_1414, rax_1441)
	eax_1370 = PHI(eax_1349, eax_1349, eax_1415, eax_1415, eax_1415, eax_1415)
	ah_1371 = PHI(ah_1330, ah_1330, ah_1418, ah_1418, ah_1418, ah_1418)
	ax_1372 = PHI(ax_1350, ax_1350, ax_1419, ax_1419, ax_1419, ax_1419)
	al_1373 = PHI(al_1351, al_1351, al_1420, al_1420, al_1420, al_1420)
	rdx_1374 = PHI(rdx_1333, rdx_1333, rdx_1333, rdx_1333, rdx_1333, rdx_1435)
	rdx_rax_1375 = PHI(rdx_rax_1352, rdx_rax_1352, rdx_rax_1416, rdx_rax_1416, rdx_rax_1416, rdx_rax_1416)
	edx_eax_1376 = PHI(edx_eax_1353, edx_eax_1353, edx_eax_1417, edx_eax_1417, edx_eax_1417, edx_eax_1417)
	SCZO_1377 = PHI(SCZO_1354, SCZO_1354, SCZO_1421, SCZO_1423, SCZO_1423, SCZO_1439)
	rbx_1378 = PHI(rbx_1338, rbx_1338, rbx_1338, rbx_1338, rbx_1425, rbx_1425)
	r12_1379 = r8_1362
	r12d_1380 = (word32) r12_1379 (alias)
	rcx_1381 = 0x00000000CCCCCCCD
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5B0:
	r10_1382 = PHI(r10_1361, r10_1400)
	r12_1383 = PHI(r12_1379, r12_1385)
	rax_1384 = r10_1382
	r12_1385 = r12_1383 - 0x0000000000000001
	r12d_1386 = (word32) r12_1385 (alias)
	rdx_rax_1387 = 0x00000000CCCCCCCD *u rax_1384
	rdx_1388 = SLICE(rdx_rax_1387, word64, 64) (alias)
	rdx_1389 = rdx_1388 >>u 0x0000000000000003
	rax_1390 = rdx_1389 + rdx_1389 * 0x0000000000000004
	rax_1391 = rax_1390 + rax_1390
	r10_1392 = r10_1382 - rax_1391
	r10d_1393 = (word32) r10_1392 (alias)
	r10_1394 = (uint64) (r10d_1393 + 0x00000030)
	r10b_1395 = (byte) r10_1394 (alias)
	SZO_1396 = cond(rdx_1389 & rdx_1389)
	Z_1397 = SZO_1396 (alias)
	C_1398 = false
	Mem1399[r12_1385:byte] = r10b_1395
	r10_1400 = rdx_1389
	r10d_1401 = (word32) r10_1400 (alias)
	r10b_1402 = (byte) r10_1400 (alias)
	branch Test(NE,Z_1397) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5D8:
// DataOut: ebx fs r10 r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BE59:
	r10b_617 = PHI(r10b_104, r10b_104, r10b_104, r10b_1732)
	r10d_618 = PHI(r10d_103, r10d_103, r10d_103, r10d_1731)
	sil_619 = PHI(sil_99, sil_99, sil_1763, sil_99)
	esi_620 = PHI(esi_91, esi_91, esi_1764, esi_91)
	r10_621 = PHI(r10_86, r10_86, r10_86, r10_1730)
	rsi_622 = PHI(rsi_69, rsi_69, rsi_1762, rsi_69)
	ecx_623 = PHI(ecx_1726, ecx_79, ecx_79, ecx_1726)
	rcx_624 = PHI(rcx_1725, rcx_75, rcx_75, rcx_1725)
	cl_625 = PHI(cl_1727, cl_88, cl_88, cl_1727)
	Z_626 = PHI(Z_1723, Z_1749, Z_1760, Z_1739)
	rax_627 = PHI(rax_1715, rax_138, rax_1758, rax_1737)
	eax_628 = PHI(eax_1716, eax_131, eax_131, eax_1716)
	ah_629 = PHI(ah_1719, ah_95, ah_95, ah_1719)
	ax_630 = PHI(ax_1720, ax_96, ax_96, ax_1720)
	al_631 = PHI(al_1721, al_101, al_101, al_1721)
	rdx_632 = PHI(rdx_1714, rdx_115, rdx_1757, rdx_1736)
	rdx_rax_633 = PHI(rdx_rax_1717, rdx_rax, rdx_rax_1755, rdx_rax_1734)
	edx_eax_634 = PHI(edx_eax_1718, edx_eax, edx_eax, edx_eax_1718)
	SCZO_635 = PHI(SCZO_140, SCZO_140, SCZO_140, SCZO_1738)
	qwLoc80_636 = r12_71
	SZO_637 = cond(r12_71 & r12_71)
	S_638 = SZO_637 (alias)
	C_639 = false
	rLoc1_640 = (real64) qwLoc80_636
	branch (r12_71 & r12_71) < 0x0000000000000000 l000000000040C5F0
// DataOut: bx fs r10 r11 r11d r13 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040C5F0:
	rLoc1_1261 = rLoc1_640 + Mem0[0x0000000000415F08:real32]
	qwLoc80_1262 = rbx_74
	SZO_1263 = cond(rbx_74 & rbx_74)
	S_1264 = SZO_1263 (alias)
	C_1265 = false
	rLoc2_1266 = (real64) qwLoc80_1262
	branch Test(NS,S_1264) l000000000040BE7D
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rdi -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040BE6B:
	qwLoc80_1256 = rbx_74
	SZO_1257 = cond(rbx_74 & rbx_74)
	S_1258 = SZO_1257 (alias)
	C_1259 = false
	rLoc2_1260 = (real64) qwLoc80_1256
	branch Test(SG,S_1258) l000000000040C608
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rdi -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040C608:
	rLoc2_1249 = PHI(rLoc2_1260, rLoc2_1266)
	qwLoc80_1250 = PHI(qwLoc80_1256, qwLoc80_1262)
	rLoc1_1251 = PHI(rLoc1_640, rLoc1_1261)
	S_1252 = PHI(S_1258, S_1264)
	SZO_1253 = PHI(SZO_1257, SZO_1263)
	C_1254 = PHI(C_1259, C_1265)
	rLoc2_1255 = rLoc2_1249 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rcx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040BE7D:
	rLoc2_641 = PHI(rLoc2_1260, rLoc2_1255, rLoc2_1266)
	rLoc1_642 = PHI(rLoc1_640, rLoc1_1251, rLoc1_1261)
	rax_643 = qwLocC0_43
	qwLoc80_644 = rax_643
	SZO_645 = cond(rax_643 & rax_643)
	S_646 = SZO_645 (alias)
	C_647 = false
	rLoc3_648 = (real64) qwLoc80_644
	branch (rax_643 & rax_643) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rcx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040C5E0:
	rLoc3_1248 = rLoc3_648 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040BE94:
	rLoc3_649 = PHI(rLoc3_648, rLoc3_1248)
	SZO_650 = cond(bLocC8 & 0x10)
	Z_651 = SZO_650 (alias)
	C_652 = false
	rLoc2_653 = rLoc2_641 / rLoc3_649
	rLoc1_654 = rLoc1_642 * rLoc2_653
	branch (bLocC8 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040C1B8:
	SCZO_1085 = cond(dwLocB0_35 - 0x00000001)
	Z_1086 = SCZO_1085 (alias)
	branch Test(EQ,Z_1086) l000000000040C1CD
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C1BF:
	rLoc2_1127 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1128 = cond(rLoc2_1127 - rLoc1_654)
	CZ_1129 = CZP_1128 (alias)
	branch Test(UGT,CZ_1129) l000000000040C408
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C408:
	rLoc2_1130 = (real64) Mem0[0x0000000000415F0C:real32]
	v69_1131 = rLoc2_1130
	rLoc2_1132 = rLoc1_654
	rLoc1_1133 = v69_1131
	CZP_1134 = cond(rLoc2_1132 - rLoc1_1133)
	C_1135 = CZP_1134 (alias)
	branch Test(UGE,C_1135) l000000000040C6A0
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C6A0:
	wLoc82_1226 = __fstcw()
	eax_1227 = (word32) wLoc82_1226
	ah_1228 = SLICE(eax_1227, byte, 8) (alias)
	rLoc2_1229 = rLoc2_1132 - rLoc1_1133
	v70_1230 = rLoc2_1229
	rLoc2_1231 = rLoc1_1133
	rLoc1_1232 = v70_1230
	rdx_1233 = 0x0000000000000000
	ah_1234 = ah_1228 | 0x0C
	ax_1235 = DPB(ax_630, ah_1234, 8) (alias)
	wLoc84_1236 = ax_1235
	__fldcw(wLoc84_1236)
	qwLoc80_1237 = (int64) rLoc2_1231
	__fldcw(wLoc82_1226)
	rax_1238 = qwLoc80_1237
	rax_1239 = rax_1238 ^ 0x0000000000000000
	eax_1240 = (word32) rax_1239 (alias)
	rdx_rax_1241 = SEQ(rdx_1233, rax_1239) (alias)
	edx_eax_1242 = rax_1239 (alias)
	ah_1243 = SLICE(rax_1239, byte, 8) (alias)
	ax_1244 = (word16) rax_1239 (alias)
	al_1245 = (byte) rax_1239 (alias)
	SZO_1246 = cond(rax_1239)
	C_1247 = false
// DataOut: ax fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C418:
	rLoc1_1208 = rLoc2_1132
	wLoc82_1209 = __fstcw()
	eax_1210 = (word32) wLoc82_1209
	ah_1211 = SLICE(eax_1210, byte, 8) (alias)
	ah_1212 = ah_1211 | 0x0C
	ax_1213 = DPB(ax_630, ah_1212, 8) (alias)
	SZO_1214 = cond(ah_1212)
	C_1215 = false
	wLoc84_1216 = ax_1213
	rLoc2_1217 = rLoc2_1132
	__fldcw(wLoc84_1216)
	qwLoc80_1218 = (int64) rLoc2_1217
	__fldcw(wLoc82_1209)
	rax_1219 = qwLoc80_1218
	eax_1220 = (word32) rax_1219 (alias)
	rdx_rax_1221 = SEQ(rdx_632, rax_1219) (alias)
	edx_eax_1222 = rax_1219 (alias)
	ah_1223 = SLICE(rax_1219, byte, 8) (alias)
	ax_1224 = (word16) rax_1219 (alias)
	al_1225 = (byte) rax_1219 (alias)
// DataOut: ax fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C43E:
	wLoc82_1136 = PHI(wLoc82_1209, wLoc82_1226)
	wLoc84_1137 = PHI(wLoc84_1216, wLoc84_1236)
	rLoc2_1138 = PHI(rLoc2_1217, rLoc2_1231)
	qwLoc80_1139 = PHI(qwLoc80_1218, qwLoc80_1237)
	rLoc1_1140 = PHI(rLoc1_1208, rLoc1_1232)
	rax_1141 = PHI(rax_1219, rax_1239)
	eax_1142 = PHI(eax_1220, eax_1240)
	ah_1143 = PHI(ah_1223, ah_1243)
	ax_1144 = PHI(ax_1224, ax_1244)
	al_1145 = PHI(al_1225, al_1245)
	rsi_1146 = (uint64) dwLocB0_35
	esi_1147 = (word32) rsi_1146 (alias)
	rdx_1148 = 0x0000000000000000
	edx_1149 = (word32) rdx_1148 (alias)
	rdx_rax_1150 = SEQ(rdx_1148, rax_1141) (alias)
	edx_eax_1151 = rdx_1148 (alias)
	dl_1152 = (byte) rdx_1148 (alias)
	SZO_1153 = cond(esi_1147 & esi_1147)
	Z_1154 = SZO_1153 (alias)
	C_1155 = false
	branch Test(NE,Z_1154) l000000000040C470
// DataOut: ax fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C470:
	rLoc1_1207 = rLoc1_1140
// DataOut: fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C448:
	qwLoc80_1175 = rax_1141
	SZO_1176 = cond(rax_1141 & rax_1141)
	S_1177 = SZO_1176 (alias)
	C_1178 = false
	rLoc2_1179 = (real64) qwLoc80_1175
	branch Test(SG,S_1177) l000000000040C772
// DataOut: fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C772:
	rLoc2_1206 = rLoc2_1179 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C45A:
	rLoc2_1180 = PHI(rLoc2_1179, rLoc2_1206)
	rcx_1181 = 0x0000000000000000
	ecx_1182 = (word32) rcx_1181 (alias)
	SZO_1183 = cond(ecx_1182)
	rdx_1184 = 0x0000000000000001
	edx_1185 = (word32) rdx_1184 (alias)
	rdx_rax_1186 = SEQ(rdx_1184, rax_1141) (alias)
	edx_eax_1187 = rdx_1184 (alias)
	dl_1188 = (byte) rdx_1184 (alias)
	CZP_1189 = cond(rLoc2_1180 - rLoc1_1140)
	Z_1190 = CZP_1189 (alias)
	P_1191 = CZP_1189 (alias)
	rLoc1_1192 = rLoc1_1140
	cl_1193 = Test(PE,P_1191)
	rcx_1194 = DPB(rcx_1181, cl_1193, 0) (alias)
	ecx_1195 = DPB(ecx_1182, cl_1193, 0) (alias)
	branch Test(NE,Z_1190) l000000000040C46C
// DataOut: fs r10 r11 r11d r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C468_1:
	rdx_1201 = rcx_1194
	edx_1202 = (word32) rdx_1201 (alias)
	rdx_rax_1203 = SEQ(rdx_1201, rax_1141) (alias)
	edx_eax_1204 = rdx_1201 (alias)
	dl_1205 = (byte) rdx_1201 (alias)
// DataOut: fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C46C:
	rdx_1196 = PHI(rdx_1184, rdx_1201)
	edx_1197 = PHI(edx_1185, edx_1202)
	rdx_rax_1198 = PHI(rdx_rax_1186, rdx_rax_1203)
	edx_eax_1199 = PHI(edx_eax_1187, edx_eax_1204)
	dl_1200 = PHI(dl_1188, dl_1205)
// DataOut: fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C472:
	rLoc2_1156 = PHI(rLoc2_1180, rLoc2_1138)
	P_1157 = PHI(P_1191, P_97)
	CZP_1158 = PHI(CZP_1189, CZP_1134)
	ecx_1159 = PHI(ecx_1195, ecx_623)
	rcx_1160 = PHI(rcx_1194, rcx_624)
	cl_1161 = PHI(cl_1193, cl_625)
	Z_1162 = PHI(Z_1190, Z_1154)
	rdx_1163 = PHI(rdx_1196, rdx_1148)
	edx_1164 = PHI(edx_1197, edx_1149)
	rdx_rax_1165 = PHI(rdx_rax_1198, rdx_rax_1150)
	edx_eax_1166 = PHI(edx_eax_1199, edx_eax_1151)
	dl_1167 = PHI(dl_1200, dl_1152)
	rax_1168 = rax_1141 + rdx_1163
	qwLoc80_1169 = rax_1168
	SZO_1170 = cond(rax_1168 & rax_1168)
	S_1171 = SZO_1170 (alias)
	C_1172 = false
	rLoc1_1173 = (real64) qwLoc80_1169
	branch Test(NS,S_1171) l000000000040C1CD
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C487:
	rLoc1_1174 = rLoc1_1173 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C1CD:
	wLoc82_1087 = PHI(wLoc82, wLoc82, wLoc82_1136, wLoc82_1136)
	wLoc84_1088 = PHI(wLoc84, wLoc84, wLoc84_1137, wLoc84_1137)
	rLoc2_1089 = PHI(rLoc2_653, rLoc2_1127, rLoc2_1156, rLoc2_1156)
	qwLoc80_1090 = PHI(qwLoc80_644, qwLoc80_644, qwLoc80_1169, qwLoc80_1169)
	rLoc1_1091 = PHI(rLoc1_654, rLoc1_654, rLoc1_1173, rLoc1_1174)
	P_1092 = PHI(P_97, P_97, P_1157, P_1157)
	CZP_1093 = PHI(CZP_122, CZP_1128, CZP_1158, CZP_1158)
	esi_1094 = PHI(esi_620, esi_620, esi_1147, esi_1147)
	S_1095 = PHI(S_646, S_646, S_1171, S_1171)
	CZ_1096 = PHI(CZ_141, CZ_1129, CZ_1129, CZ_1129)
	ecx_1097 = PHI(ecx_623, ecx_623, ecx_1159, ecx_1159)
	cl_1098 = PHI(cl_625, cl_625, cl_1161, cl_1161)
	Z_1099 = PHI(Z_1086, Z_1086, Z_1162, Z_1162)
	ah_1100 = PHI(ah_629, ah_629, ah_1143, ah_1143)
	ax_1101 = PHI(ax_630, ax_630, ax_1144, ax_1144)
	al_1102 = PHI(al_631, al_631, al_1145, al_1145)
	edx_1103 = PHI(edx_64, edx_64, edx_1164, edx_1164)
	rdx_rax_1104 = PHI(rdx_rax_633, rdx_rax_633, rdx_rax_1165, rdx_rax_1165)
	edx_eax_1105 = PHI(edx_eax_634, edx_eax_634, edx_eax_1166, edx_eax_1166)
	dl_1106 = PHI(dl_98, dl_98, dl_1167, dl_1167)
	rLocE8_1107 = (real80) rLoc1_1091
	rbx_1108 = qwLocB8_38
	rcx_1109 = 0x0000000000415F18
	rdx_1110 = 0xFFFFFFFFFFFFFFFF
	rsi_1111 = 0x0000000000000001
	rax_1112 = 0x0000000000000000
	r14_1113 = 0x0000000000000000
	r14d_1114 = (word32) r14_1113 (alias)
	SZO_1115 = cond(r14d_1114)
	C_1116 = false
	rdi_1117 = rbx_1108
	eax_1118 = __sprintf_chk(rdi_1117, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_1119 = rbx_1108
	rbx_1120 = 0x00000000FFFFFFFF
	ebx_1121 = (word32) rbx_1120 (alias)
	eax_1122 = strlen(rdi_1119)
	rax_1123 = DPB(rax_1112, eax_1122, 0) (alias)
	r15_1124 = rax_1123
	r15d_1125 = (word32) r15_1124 (alias)
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEA3:
	rLoc2_704 = (real64) dwLocC4_59
	rbx_705 = 0x0000000000000000
	ebx_706 = (word32) rbx_705 (alias)
	SZO_707 = cond(ebx_706)
	C_708 = false
	rLoc3_709 = rLoc3_649
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEB4:
	rLoc4_711 = PHI(rLoc4, rLoc4_722)
	rLoc3_712 = PHI(rLoc3_709, rLoc3_1081)
	rLoc1_713 = PHI(rLoc1_654, rLoc1_1082)
	ebx_714 = PHI(ebx_706, ebx_718)
	Z_715 = PHI(Z_651, Z_1076)
	rLoc4_716 = rLoc4_711
	rbx_717 = (uint64) (ebx_714 + 0x00000001)
	ebx_718 = (word32) rbx_717 (alias)
	SCZO_719 = cond(ebx_718)
	rLoc4_720 = rLoc4_716 * rLoc2_704
	v45_721 = rLoc4_720
	rLoc4_722 = rLoc1_713
	rLoc1_723 = v45_721
	CZP_724 = cond(rLoc4_722 - rLoc1_723)
	C_725 = CZP_724 (alias)
	branch rLoc4_722 <u rLoc1_723 l000000000040BED0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BED0:
	rLoc2_1083 = rLoc4_722
	rLoc1_1084 = rLoc3_712
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEC1:
	SCZO_1075 = cond(ebx_718 - 0x00000008)
	Z_1076 = SCZO_1075 (alias)
	branch Test(NE,Z_1076) l000000000040BEB0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEB0:
	rLoc3_1079 = rLoc4_722
	v55_1080 = rLoc3_1079
	rLoc3_1081 = rLoc1_723
	rLoc1_1082 = v55_1080
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEC6:
	rLoc2_1077 = rLoc4_722
	rLoc1_1078 = rLoc3_712
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BED4:
	rLoc2_726 = PHI(rLoc2_1077, rLoc2_1083)
	rLoc1_727 = PHI(rLoc1_1078, rLoc1_1084)
	rLoc1_728 = rLoc2_726 / rLoc1_727
	SCZO_729 = cond(dwLocB0_35 - 0x00000001)
	Z_730 = SCZO_729 (alias)
	rLoc2_731 = rLoc2_726
	branch dwLocB0_35 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF70:
	v66_1072 = rLoc2_731
	rLoc2_1073 = rLoc1_728
	rLoc1_1074 = v66_1072
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEE3:
	rLoc2_949 = rLoc2_731
	rLoc2_950 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_951 = cond(rLoc2_950 - rLoc1_728)
	CZ_952 = CZP_951 (alias)
	branch Test(ULE,CZ_952) l000000000040C498
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C498:
	rLoc2_1069 = rLoc2_950
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEF3:
	rLoc2_953 = (real64) Mem0[0x0000000000415F0C:real32]
	v51_954 = rLoc2_953
	rLoc2_955 = rLoc1_728
	rLoc1_956 = v51_954
	CZP_957 = cond(rLoc2_955 - rLoc1_956)
	C_958 = CZP_957 (alias)
	branch Test(UGE,C_958) l000000000040C660
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C660:
	wLoc82_1047 = __fstcw()
	eax_1048 = (word32) wLoc82_1047
	ah_1049 = SLICE(eax_1048, byte, 8) (alias)
	rLoc2_1050 = rLoc2_955 - rLoc1_956
	v60_1051 = rLoc2_1050
	rLoc2_1052 = rLoc1_956
	rLoc1_1053 = v60_1051
	rdx_1054 = 0x0000000000000000
	ah_1055 = ah_1049 | 0x0C
	ax_1056 = DPB(ax_630, ah_1055, 8) (alias)
	wLoc84_1057 = ax_1056
	__fldcw(wLoc84_1057)
	qwLoc80_1058 = (int64) rLoc2_1052
	__fldcw(wLoc82_1047)
	rax_1059 = qwLoc80_1058
	rax_1060 = rax_1059 ^ 0x0000000000000000
	eax_1061 = (word32) rax_1060 (alias)
	rdx_rax_1062 = SEQ(rdx_1054, rax_1060) (alias)
	edx_eax_1063 = rax_1060 (alias)
	ah_1064 = SLICE(rax_1060, byte, 8) (alias)
	ax_1065 = (word16) rax_1060 (alias)
	al_1066 = (byte) rax_1060 (alias)
	SZO_1067 = cond(rax_1060)
	C_1068 = false
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF03:
	rLoc1_1029 = rLoc2_955
	wLoc82_1030 = __fstcw()
	eax_1031 = (word32) wLoc82_1030
	ah_1032 = SLICE(eax_1031, byte, 8) (alias)
	ah_1033 = ah_1032 | 0x0C
	ax_1034 = DPB(ax_630, ah_1033, 8) (alias)
	SZO_1035 = cond(ah_1033)
	C_1036 = false
	wLoc84_1037 = ax_1034
	rLoc2_1038 = rLoc2_955
	__fldcw(wLoc84_1037)
	qwLoc80_1039 = (int64) rLoc2_1038
	__fldcw(wLoc82_1030)
	rax_1040 = qwLoc80_1039
	eax_1041 = (word32) rax_1040 (alias)
	rdx_rax_1042 = SEQ(rdx_632, rax_1040) (alias)
	edx_eax_1043 = rax_1040 (alias)
	ah_1044 = SLICE(rax_1040, byte, 8) (alias)
	ax_1045 = (word16) rax_1040 (alias)
	al_1046 = (byte) rax_1040 (alias)
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF29:
	wLoc82_959 = PHI(wLoc82_1030, wLoc82_1047)
	wLoc84_960 = PHI(wLoc84_1037, wLoc84_1057)
	rLoc2_961 = PHI(rLoc2_1038, rLoc2_1052)
	qwLoc80_962 = PHI(qwLoc80_1039, qwLoc80_1058)
	rLoc1_963 = PHI(rLoc1_1029, rLoc1_1053)
	rax_964 = PHI(rax_1040, rax_1060)
	eax_965 = PHI(eax_1041, eax_1061)
	ah_966 = PHI(ah_1044, ah_1064)
	ax_967 = PHI(ax_1045, ax_1065)
	al_968 = PHI(al_1046, al_1066)
	rcx_969 = (uint64) dwLocB0_35
	ecx_970 = (word32) rcx_969 (alias)
	rdx_971 = 0x0000000000000000
	edx_972 = (word32) rdx_971 (alias)
	rdx_rax_973 = SEQ(rdx_971, rax_964) (alias)
	edx_eax_974 = rdx_971 (alias)
	dl_975 = (byte) rdx_971 (alias)
	SZO_976 = cond(ecx_970 & ecx_970)
	Z_977 = SZO_976 (alias)
	C_978 = false
	branch Test(NE,Z_977) l000000000040BF55
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF33:
	qwLoc80_1003 = rax_964
	SZO_1004 = cond(rax_964 & rax_964)
	S_1005 = SZO_1004 (alias)
	C_1006 = false
	rLoc2_1007 = (real64) qwLoc80_1003
	branch Test(SG,S_1005) l000000000040C77D
// DataOut: ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C77D:
	rLoc2_1028 = rLoc2_1007 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF45:
	rLoc2_1008 = PHI(rLoc2_1007, rLoc2_1028)
	rcx_1009 = 0x0000000000000000
	ecx_1010 = (word32) rcx_1009 (alias)
	SZO_1011 = cond(ecx_1010)
	rdx_1012 = 0x0000000000000001
	edx_1013 = (word32) rdx_1012 (alias)
	rdx_rax_1014 = SEQ(rdx_1012, rax_964) (alias)
	edx_eax_1015 = rdx_1012 (alias)
	dl_1016 = (byte) rdx_1012 (alias)
	CZP_1017 = cond(rLoc2_1008 - rLoc1_963)
	Z_1018 = CZP_1017 (alias)
	P_1019 = CZP_1017 (alias)
	cl_1020 = Test(PE,P_1019)
	rcx_1021 = DPB(rcx_1009, cl_1020, 0) (alias)
	ecx_1022 = DPB(ecx_1010, cl_1020, 0) (alias)
	branch Test(NE,Z_1018) l000000000040BF55
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF51_1:
	rdx_1023 = rcx_1021
	edx_1024 = (word32) rdx_1023 (alias)
	rdx_rax_1025 = SEQ(rdx_1023, rax_964) (alias)
	edx_eax_1026 = rdx_1023 (alias)
	dl_1027 = (byte) rdx_1023 (alias)
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> cl:Test(PE,P) r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF55:
	P_979 = PHI(P_1019, P_1019, P_97)
	CZP_980 = PHI(CZP_1017, CZP_1017, CZP_957)
	ecx_981 = PHI(ecx_1022, ecx_1022, ecx_970)
	rcx_982 = PHI(rcx_1021, rcx_1021, rcx_969)
	cl_983 = PHI(cl_1020, cl_1020, cl_625)
	Z_984 = PHI(Z_1018, Z_1018, Z_977)
	rdx_985 = PHI(rdx_1012, rdx_1023, rdx_971)
	edx_986 = PHI(edx_1013, edx_1024, edx_972)
	rdx_rax_987 = PHI(rdx_rax_1014, rdx_rax_1025, rdx_rax_973)
	edx_eax_988 = PHI(edx_eax_1015, edx_eax_1026, edx_eax_974)
	dl_989 = PHI(dl_1016, dl_1027, dl_975)
	rax_990 = rax_964 + rdx_985
	qwLoc80_991 = rax_990
	SZO_992 = cond(rax_990 & rax_990)
	S_993 = SZO_992 (alias)
	C_994 = false
	rLoc2_995 = (real64) qwLoc80_991
	branch Test(SG,S_993) l000000000040C758
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C758:
	rLoc2_999 = rLoc2_995 + Mem0[0x0000000000415F08:real32]
	v62_1000 = rLoc2_999
	rLoc2_1001 = rLoc1_963
	rLoc1_1002 = v62_1000
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF6A:
	v59_996 = rLoc2_995
	rLoc2_997 = rLoc1_963
	rLoc1_998 = v59_996
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF72:
	wLoc82_732 = PHI(wLoc82_959, wLoc82_959, wLoc82, wLoc82)
	wLoc84_733 = PHI(wLoc84_960, wLoc84_960, wLoc84, wLoc84)
	rLoc2_734 = PHI(rLoc2_997, rLoc2_1001, rLoc2_1069, rLoc2_1073)
	qwLoc80_735 = PHI(qwLoc80_991, qwLoc80_991, qwLoc80_644, qwLoc80_644)
	rLoc1_736 = PHI(rLoc1_998, rLoc1_1002, rLoc1_728, rLoc1_1074)
	P_737 = PHI(P_979, P_979, P_97, P_97)
	CZP_738 = PHI(CZP_980, CZP_980, CZP_951, CZP_724)
	S_739 = PHI(S_993, S_993, S_646, S_646)
	ecx_740 = PHI(ecx_981, ecx_981, ecx_623, ecx_623)
	cl_741 = PHI(cl_983, cl_983, cl_625, cl_625)
	C_742 = PHI(C_994, C_994, C_725, C_725)
	ah_743 = PHI(ah_966, ah_966, ah_629, ah_629)
	ax_744 = PHI(ax_967, ax_967, ax_630, ax_630)
	rdx_rax_745 = PHI(rdx_rax_987, rdx_rax_987, rdx_rax_633, rdx_rax_633)
	edx_eax_746 = PHI(edx_eax_988, edx_eax_988, edx_eax_634, edx_eax_634)
	dl_747 = PHI(dl_989, dl_989, dl_98, dl_98)
	r14_748 = qwLocB8_38
	rdx_749 = 0xFFFFFFFFFFFFFFFF
	rcx_750 = 0x0000000000415F1E
	rsi_751 = 0x0000000000000001
	rax_752 = 0x0000000000000000
	qwLoc98_753 = r11_136
	rdi_754 = r14_748
	rLocA8_755 = (real80) rLoc2_734
	rLocE8_756 = (real80) rLoc1_736
	eax_757 = __sprintf_chk(rdi_754, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F1E)
	rdi_758 = r14_748
	eax_759 = strlen(rdi_758)
	rax_760 = DPB(rax_752, eax_759, 0) (alias)
	r11_761 = qwLoc98_753
	rdx_762 = (uint64) dwLoc90_51
	edx_763 = (word32) rdx_762 (alias)
	r15_764 = rax_760
	r15d_765 = (word32) r15_764 (alias)
	rax_766 = 0x0000000000000000
	rLoc1_767 = (real64) rLocA8_755
	SZO_768 = cond(edx_763 & edx_763)
	Z_769 = SZO_768 (alias)
	r14_770 = r11_761 + 0x0000000000000001
	r14d_771 = (word32) r14_770 (alias)
	al_772 = (edx_763 & edx_763) == 0x00000000
	rax_773 = DPB(rax_766, al_772, 0) (alias)
	rax_774 = r14_770 + 0x0000000000000001 + rax_773
	SCZO_775 = cond(r15_764 - rax_774)
	CZ_776 = SCZO_775 (alias)
	branch r15_764 >u rax_774 l000000000040BFF0
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFCB:
	SZO_941 = cond(bLocC8 & 0x08)
	Z_942 = SZO_941 (alias)
	C_943 = false
	branch Test(EQ,Z_942) l000000000040C208
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C208:
	rLoc1_948 = rLoc1_767
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFD6:
	rax_944 = qwLocB8_38
	SCZO_945 = cond(Mem0[rax_944 - 0x0000000000000001 + r15_764:byte] - 0x30)
	Z_946 = SCZO_945 (alias)
	branch Test(NE,Z_946) l000000000040C210
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C210:
	rLoc1_947 = rLoc1_767
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFE7:
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFF0:
	SZO_777 = PHI(SZO_768, SZO_941)
	C_778 = PHI(C_742, C_943)
	rax_779 = PHI(rax_774, rax_944)
	SCZO_780 = cond(dwLocB0_35 - 0x00000001)
	Z_781 = SCZO_780 (alias)
	rLoc1_782 = rLoc1_767 * Mem0[0x0000000000415F84:real32]
	branch dwLocB0_35 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C001:
	rLoc2_820 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_821 = cond(rLoc2_820 - rLoc1_782)
	CZ_822 = CZP_821 (alias)
	branch rLoc2_820 <=u rLoc1_782 l000000000040C0A0
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C00F:
	rLoc2_823 = (real64) Mem0[0x0000000000415F0C:real32]
	v63_824 = rLoc2_823
	rLoc2_825 = rLoc1_782
	rLoc1_826 = v63_824
	CZP_827 = cond(rLoc2_825 - rLoc1_826)
	C_828 = CZP_827 (alias)
	branch rLoc2_825 >=u rLoc1_826 l000000000040C720
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C720:
	wLoc82_919 = __fstcw()
	eax_920 = (word32) wLoc82_919
	ah_921 = SLICE(eax_920, byte, 8) (alias)
	rLoc2_922 = rLoc2_825 - rLoc1_826
	v64_923 = rLoc2_922
	rLoc2_924 = rLoc1_826
	rLoc1_925 = v64_923
	rdx_926 = 0x0000000000000000
	ah_927 = ah_921 | 0x0C
	ax_928 = DPB(ax_744, ah_927, 8) (alias)
	wLoc84_929 = ax_928
	__fldcw(wLoc84_929)
	qwLoc80_930 = (int64) rLoc2_924
	__fldcw(wLoc82_919)
	rax_931 = qwLoc80_930
	rax_932 = rax_931 ^ 0x0000000000000000
	eax_933 = (word32) rax_932 (alias)
	rdx_rax_934 = SEQ(rdx_926, rax_932) (alias)
	edx_eax_935 = rax_932 (alias)
	ah_936 = SLICE(rax_932, byte, 8) (alias)
	ax_937 = (word16) rax_932 (alias)
	al_938 = (byte) rax_932 (alias)
	SZO_939 = cond(rax_932)
	C_940 = false
// DataOut: ax eax ebx fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C01F:
	rLoc1_901 = rLoc2_825
	wLoc82_902 = __fstcw()
	eax_903 = (word32) wLoc82_902
	ah_904 = SLICE(eax_903, byte, 8) (alias)
	ah_905 = ah_904 | 0x0C
	ax_906 = DPB(ax_744, ah_905, 8) (alias)
	SZO_907 = cond(ah_905)
	C_908 = false
	wLoc84_909 = ax_906
	rLoc2_910 = rLoc2_825
	__fldcw(wLoc84_909)
	qwLoc80_911 = (int64) rLoc2_910
	__fldcw(wLoc82_902)
	rax_912 = qwLoc80_911
	eax_913 = (word32) rax_912 (alias)
	rdx_rax_914 = SEQ(rdx_762, rax_912) (alias)
	edx_eax_915 = rax_912 (alias)
	ah_916 = SLICE(rax_912, byte, 8) (alias)
	ax_917 = (word16) rax_912 (alias)
	al_918 = (byte) rax_912 (alias)
// DataOut: ax eax ebx fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C045:
	wLoc82_829 = PHI(wLoc82_902, wLoc82_919)
	wLoc84_830 = PHI(wLoc84_909, wLoc84_929)
	rLoc2_831 = PHI(rLoc2_910, rLoc2_924)
	qwLoc80_832 = PHI(qwLoc80_911, qwLoc80_930)
	rLoc1_833 = PHI(rLoc1_901, rLoc1_925)
	rax_834 = PHI(rax_912, rax_932)
	eax_835 = PHI(eax_913, eax_933)
	ah_836 = PHI(ah_916, ah_936)
	ax_837 = PHI(ax_917, ax_937)
	al_838 = PHI(al_918, al_938)
	r14_839 = (uint64) dwLocB0_35
	r14d_840 = (word32) r14_839 (alias)
	rdx_841 = 0x0000000000000000
	edx_842 = (word32) rdx_841 (alias)
	rdx_rax_843 = SEQ(rdx_841, rax_834) (alias)
	edx_eax_844 = rdx_841 (alias)
	dl_845 = (byte) rdx_841 (alias)
	SZO_846 = cond(r14d_840 & r14d_840)
	Z_847 = SZO_846 (alias)
	C_848 = false
	branch (r14d_840 & r14d_840) != 0x00000000 l000000000040C080
// DataOut: ax eax ebx fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C080:
	rLoc1_900 = rLoc1_833
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C051:
	qwLoc80_868 = rax_834
	SZO_869 = cond(rax_834 & rax_834)
	S_870 = SZO_869 (alias)
	C_871 = false
	rLoc2_872 = (real64) qwLoc80_868
	branch (rax_834 & rax_834) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C79E:
	rLoc2_899 = rLoc2_872 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C063:
	rLoc2_873 = PHI(rLoc2_872, rLoc2_899)
	rcx_874 = 0x0000000000000000
	ecx_875 = (word32) rcx_874 (alias)
	SZO_876 = cond(ecx_875)
	rdx_877 = 0x0000000000000001
	edx_878 = (word32) rdx_877 (alias)
	rdx_rax_879 = SEQ(rdx_877, rax_834) (alias)
	edx_eax_880 = rdx_877 (alias)
	dl_881 = (byte) rdx_877 (alias)
	CZP_882 = cond(rLoc2_873 - rLoc1_833)
	Z_883 = CZP_882 (alias)
	P_884 = CZP_882 (alias)
	rLoc1_885 = rLoc1_833
	cl_886 = Test(PE,P_884)
	rcx_887 = DPB(rcx_874, cl_886, 0) (alias)
	ecx_888 = DPB(ecx_875, cl_886, 0) (alias)
	branch rLoc2_873 != rLoc1_833 l000000000040C075
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C071_1:
	rdx_894 = rcx_887
	edx_895 = (word32) rdx_894 (alias)
	rdx_rax_896 = SEQ(rdx_894, rax_834) (alias)
	edx_eax_897 = rdx_894 (alias)
	dl_898 = (byte) rdx_894 (alias)
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C075:
	rdx_889 = PHI(rdx_877, rdx_894)
	edx_890 = PHI(edx_878, edx_895)
	rdx_rax_891 = PHI(rdx_rax_879, rdx_rax_896)
	edx_eax_892 = PHI(edx_eax_880, edx_eax_897)
	dl_893 = PHI(dl_881, dl_898)
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C082:
	rLoc2_849 = PHI(rLoc2_873, rLoc2_831)
	P_850 = PHI(P_884, P_737)
	CZP_851 = PHI(CZP_882, CZP_827)
	ecx_852 = PHI(ecx_888, ecx_740)
	rcx_853 = PHI(rcx_887, rcx_750)
	cl_854 = PHI(cl_886, cl_741)
	Z_855 = PHI(Z_883, Z_847)
	rdx_856 = PHI(rdx_889, rdx_841)
	edx_857 = PHI(edx_890, edx_842)
	rdx_rax_858 = PHI(rdx_rax_891, rdx_rax_843)
	edx_eax_859 = PHI(edx_eax_892, edx_eax_844)
	dl_860 = PHI(dl_893, dl_845)
	rax_861 = rax_834 + rdx_856
	qwLoc80_862 = rax_861
	SZO_863 = cond(rax_861 & rax_861)
	S_864 = SZO_863 (alias)
	C_865 = false
	rLoc1_866 = (real64) qwLoc80_862
	branch (rax_861 & rax_861) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C093:
	rLoc1_867 = rLoc1_866 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C0A0:
	wLoc82_783 = PHI(wLoc82_732, wLoc82_732, wLoc82_829, wLoc82_829)
	wLoc84_784 = PHI(wLoc84_733, wLoc84_733, wLoc84_830, wLoc84_830)
	rLoc2_785 = PHI(rLoc2_734, rLoc2_820, rLoc2_849, rLoc2_849)
	qwLoc80_786 = PHI(qwLoc80_735, qwLoc80_735, qwLoc80_862, qwLoc80_862)
	rLoc1_787 = PHI(rLoc1_782, rLoc1_782, rLoc1_866, rLoc1_867)
	P_788 = PHI(P_737, P_737, P_850, P_850)
	CZP_789 = PHI(CZP_738, CZP_821, CZP_851, CZP_851)
	S_790 = PHI(S_739, S_739, S_864, S_864)
	CZ_791 = PHI(CZ_776, CZ_822, CZ_822, CZ_822)
	ecx_792 = PHI(ecx_740, ecx_740, ecx_852, ecx_852)
	cl_793 = PHI(cl_741, cl_741, cl_854, cl_854)
	Z_794 = PHI(Z_781, Z_781, Z_855, Z_855)
	ah_795 = PHI(ah_743, ah_743, ah_836, ah_836)
	ax_796 = PHI(ax_744, ax_744, ax_837, ax_837)
	al_797 = PHI(al_772, al_772, al_838, al_838)
	edx_798 = PHI(edx_763, edx_763, edx_857, edx_857)
	rdx_rax_799 = PHI(rdx_rax_745, rdx_rax_745, rdx_rax_858, rdx_rax_858)
	edx_eax_800 = PHI(edx_eax_746, edx_eax_746, edx_eax_859, edx_eax_859)
	dl_801 = PHI(dl_747, dl_747, dl_860, dl_860)
	rLoc1_802 = rLoc1_787 / Mem0[0x0000000000415F84:real32]
	r14_803 = qwLocB8_38
	rcx_804 = 0x0000000000415F18
	rdx_805 = 0xFFFFFFFFFFFFFFFF
	rsi_806 = 0x0000000000000001
	rax_807 = 0x0000000000000000
	rdi_808 = r14_803
	rLocE8_809 = (real80) rLoc1_802
	eax_810 = __sprintf_chk(rdi_808, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_811 = r14_803
	r14_812 = 0x0000000000000000
	r14d_813 = (word32) r14_812 (alias)
	SZO_814 = cond(r14d_813)
	C_815 = false
	eax_816 = strlen(rdi_811)
	rax_817 = DPB(rax_807, eax_816, 0) (alias)
	r15_818 = rax_817
	r15d_819 = (word32) r15_818 (alias)
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C218:
	rLoc4_655 = PHI(rLoc4_722, rLoc4_722, rLoc4_722, rLoc4)
	rLoc3_656 = PHI(rLoc3_712, rLoc3_712, rLoc3_712, rLoc3_649)
	qwLoc98_657 = PHI(qwLoc98_753, qwLoc98_753, qwLoc98_753, qwLoc98_130)
	rLocA8_658 = PHI(rLocA8_755, rLocA8_755, rLocA8_755, rLocA8)
	wLoc82_659 = PHI(wLoc82_732, wLoc82_732, wLoc82_783, wLoc82_1087)
	wLoc84_660 = PHI(wLoc84_733, wLoc84_733, wLoc84_784, wLoc84_1088)
	rLoc2_661 = PHI(rLoc2_734, rLoc2_734, rLoc2_785, rLoc2_1089)
	qwLoc80_662 = PHI(qwLoc80_735, qwLoc80_735, qwLoc80_786, qwLoc80_1090)
	rLoc1_663 = PHI(rLoc1_947, rLoc1_948, rLoc1_802, rLoc1_1091)
	rLocE8_664 = PHI(rLocE8_756, rLocE8_756, rLocE8_809, rLocE8_1107)
	P_665 = PHI(P_737, P_737, P_788, P_1092)
	CZP_666 = PHI(CZP_738, CZP_738, CZP_789, CZP_1093)
	esi_667 = PHI(esi_620, esi_620, esi_620, esi_1094)
	S_668 = PHI(S_739, S_739, S_790, S_1095)
	r11_669 = PHI(r11_761, r11_761, r11_761, r11_136)
	r15d_670 = PHI(r15d_765, r15d_765, r15d_819, r15d_1125)
	r14d_671 = PHI(r14d_771, r14d_771, r14d_813, r14d_1114)
	CZ_672 = PHI(CZ_776, CZ_776, CZ_791, CZ_1096)
	ebx_673 = PHI(ebx_718, ebx_718, ebx_718, ebx_1121)
	ecx_674 = PHI(ecx_740, ecx_740, ecx_792, ecx_1097)
	rcx_675 = PHI(rcx_750, rcx_750, rcx_804, rcx_1109)
	cl_676 = PHI(cl_741, cl_741, cl_793, cl_1098)
	SZO_677 = PHI(SZO_941, SZO_941, SZO_814, SZO_1115)
	Z_678 = PHI(Z_946, Z_942, Z_794, Z_1099)
	C_679 = PHI(C_943, C_943, C_815, C_1116)
	eax_680 = PHI(eax_759, eax_759, eax_816, eax_1122)
	ah_681 = PHI(ah_743, ah_743, ah_795, ah_1100)
	ax_682 = PHI(ax_744, ax_744, ax_796, ax_1101)
	al_683 = PHI(al_772, al_772, al_797, al_1102)
	edx_684 = PHI(edx_763, edx_763, edx_798, edx_1103)
	rdx_rax_685 = PHI(rdx_rax_745, rdx_rax_745, rdx_rax_799, rdx_rax_1104)
	edx_eax_686 = PHI(edx_eax_746, edx_eax_746, edx_eax_800, edx_eax_1105)
	dl_687 = PHI(dl_747, dl_747, dl_801, dl_1106)
	rbx_688 = PHI(rbx_717, rbx_717, rbx_717, rbx_1120)
	r14_689 = PHI(r14_770, r14_770, r14_812, r14_1113)
	r15_690 = PHI(r15_764, r15_764, r15_818, r15_1124)
	r12_691 = qwLocD0_142
	rsi_692 = qwLocB8_38
	rdx_693 = r15_690
	r12_694 = r12_691 - r15_690
	r12d_695 = (word32) r12_694 (alias)
	r15_696 = r15_690 - r14_689
	SCZO_697 = cond(r15_696)
	rdi_698 = r12_694
	rax_699 = memmove(rdi_698, rsi_692, rdx_693)
	r8_700 = r12_694 + r15_696
// DataOut: ebx fs r10 r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> ah:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C237:
	dwLoc8C_143 = PHI(dwLoc8C, dwLoc8C_1303)
	qwLocA8_144 = PHI(qwLocA8, qwLocA8_1304)
	rLoc4_145 = PHI(rLoc4_655, rLoc4)
	rLoc3_146 = PHI(rLoc3_656, rLoc3)
	qwLoc98_147 = PHI(qwLoc98_657, qwLoc98_1305)
	rLocA8_148 = PHI(rLocA8_658, rLocA8)
	wLoc82_149 = PHI(wLoc82_659, wLoc82)
	wLoc84_150 = PHI(wLoc84_660, wLoc84)
	rLoc2_151 = PHI(rLoc2_661, rLoc2)
	qwLoc80_152 = PHI(qwLoc80_662, qwLoc80)
	rLoc1_153 = PHI(rLoc1_663, rLoc1)
	rLocE8_154 = PHI(rLocE8_664, rLocE8)
	qwLocB0_155 = PHI(qwLocB0, qwLocB0_1358)
	r10b_156 = PHI(r10b_617, r10b_1402)
	r10d_157 = PHI(r10d_618, r10d_1401)
	dil_158 = PHI(dil_125, dil_1308)
	sil_159 = PHI(sil_619, sil_1309)
	P_160 = PHI(P_665, P_97)
	CZP_161 = PHI(CZP_666, CZP_1271)
	esi_162 = PHI(esi_667, esi_1342)
	edi_163 = PHI(edi_124, edi_1343)
	r10_164 = PHI(r10_621, r10_1400)
	S_165 = PHI(S_668, S_1275)
	r11_166 = PHI(r11_669, r11_1313)
	r8_167 = PHI(r8_700, r8_1362)
	r15d_168 = PHI(r15d_670, r15d_128)
	r9_169 = PHI(r9_90, r9_1315)
	r9d_170 = PHI(r9d_89, r9d_1316)
	r12d_171 = PHI(r12d_695, r12d_1386)
	r14d_172 = PHI(r14d_671, r14d_1318)
	CZ_173 = PHI(CZ_672, CZ_1319)
	ebx_174 = PHI(ebx_673, ebx_1363)
	rsi_175 = PHI(rsi_692, rsi_1364)
	ecx_176 = PHI(ecx_674, ecx_1345)
	rcx_177 = PHI(rcx_675, rcx_1381)
	cl_178 = PHI(cl_676, cl_1324)
	rdi_179 = PHI(rdi_698, rdi_1365)
	rax_180 = PHI(rax_699, rax_1391)
	eax_181 = PHI(eax_680, eax_1370)
	ah_182 = PHI(ah_681, ah_1371)
	ax_183 = PHI(ax_682, ax_1372)
	al_184 = PHI(al_683, al_1373)
	rdx_185 = PHI(rdx_693, rdx_1389)
	edx_186 = PHI(edx_684, edx_1334)
	rdx_rax_187 = PHI(rdx_rax_685, rdx_rax_1387)
	edx_eax_188 = PHI(edx_eax_686, edx_eax_1376)
	dl_189 = PHI(dl_687, dl_1337)
	SCZO_190 = PHI(SCZO_697, SCZO_1377)
	rbx_191 = PHI(rbx_688, rbx_1378)
	r12_192 = PHI(r12_694, r12_1385)
	r14_193 = PHI(r14_689, r14_68)
	r15_194 = PHI(r15_696, r15_129)
	SZO_196 = cond(bLocC8 & 0x04)
	Z_197 = SZO_196 (alias)
	C_198 = false
	branch (bLocC8 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r10 r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C318:
	r8_480 = r8_167 - r12_192
	SCZO_481 = cond(r8_480)
	rdi_482 = r13_137
	r15_483 = 0xFFFFFFFFFFFFFFFF
	r15d_484 = (word32) r15_483 (alias)
	r14_485 = r8_480
	r14d_486 = (word32) r14_485 (alias)
	eax_487 = strlen(rdi_482)
	rax_488 = DPB(rax_180, eax_487, 0) (alias)
	rdi_489 = fp - 0x0000000000000078
	rsi_490 = r12_192
	rcx_491 = 0x0000000000000029
	rdx_492 = r14_485
	qwLocB0_493 = rax_488
	call __memcpy_chk (retsize: 8; depth: 240)
		uses: ah_182,al_184,ax_183,bLocC8,C_198,cl_178,CZ_173,CZP_161,dil_158,dl_189,dwLoc8C_143,dwLoc90_51,dwLocB0_35,dwLocC4_59,dwLocC8_41,eax_487,ebx_174,ecx_176,edi_163,edx_186,esi_162,fs_78,P_160,qwLoc08_4,qwLoc10_12,qwLoc18_18,qwLoc20_21,qwLoc28_27,qwLoc30_30,qwLoc40_47,qwLoc80_152,qwLoc98_147,qwLocA8_144,qwLocB0_493,qwLocB8_38,qwLocC0_43,qwLocD0_142,r10_164,r10b_156,r10d_157,r11_166,r12_192,r12d_171,r13_137,r14_485,r14d_486,r15_483,r15d_484,r8_480,r9_169,r9d_170,rax_488,rbp_111,rbx_191,rcx_491,rdi_489,rdx_492,rLocA8_148,rLocE8_154,rsi_490,rsp_61,S_165,SCZO_481,sil_159,SZO_196,wLoc82_149,wLoc84_150,Z_197
		defs: ah_528,al_534,ax_529,C_500,cl_521,CZ_515,CZP_526,dil_533,dl_531,eax_496,ebx_518,ecx_512,edi_520,edx_497,esi_524,fs_511,P_530,r10_519,r10b_537,r10d_536,r11_513,r12_504,r12d_525,r13_503,r14_501,r14d_527,r15_495,r15d_535,r8_510,r9_523,r9d_522,rax_498,rbp_506,rbx_507,rcx_508,rdi_505,rdx_514,rsi_502,rsp_494,S_517,SCZO_509,sil_532,SZO_499,Z_516
	r9_538 = r12_504 + r14_501
	r9d_539 = (word32) r9_538 (alias)
	r12_540 = r13_503
	r12d_541 = (word32) r12_540 (alias)
	r13_542 = qwLocB0_493
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C36C:
	r15d_543 = PHI(r15d_535, r15d_575)
	r9_544 = PHI(r9_538, r9_603)
	r9d_545 = PHI(r9d_539, r9d_604)
	r14d_546 = PHI(r14d_527, r14d_578)
	CZ_547 = PHI(CZ_515, CZ_573)
	rsi_548 = PHI(rsi_502, rsi_600)
	rdi_549 = PHI(rdi_505, rdi_601)
	rax_550 = PHI(rax_498, rax_602)
	eax_551 = PHI(eax_496, eax_584)
	ah_552 = PHI(ah_528, ah_587)
	ax_553 = PHI(ax_529, ax_588)
	al_554 = PHI(al_534, al_589)
	rdx_555 = PHI(rdx_514, rdx_599)
	rdx_rax_556 = PHI(rdx_rax_187, rdx_rax_585)
	SCZO_557 = PHI(SCZO_509, SCZO_598)
	rbp_558 = PHI(rbp_506, rbp_570)
	r14_559 = PHI(r14_501, r14_577)
	r15_560 = PHI(r15_495, r15_576)
	edx_561 = (word32) Mem0[rbp_558 + 0x0000000000000000:byte]
	rdx_562 = DPB(rdx_555, edx_561, 0) (alias)
	rdx_rax_563 = DPB(rdx_rax_556, edx_561, 64) (alias)
	edx_eax_564 = SEQ(edx_561, eax_551) (alias)
	dl_565 = (byte) edx_561 (alias)
	SZO_566 = cond(dl_565 & dl_565)
	Z_567 = SZO_566 (alias)
	C_568 = false
	branch (dl_565 & dl_565) == 0x00 l000000000040C383
// DataOut: dl ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C374:
	SCZO_607 = cond(dl_565 - 0x7E)
	CZ_608 = SCZO_607 (alias)
	r15d_609 = (word32) dl_565
	r15_610 = DPB(r15_560, r15d_609, 0) (alias)
	branch dl_565 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C37B_1:
	r15_615 = r14_559
	r15d_616 = (word32) r15_615 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C37F:
	r15d_611 = PHI(r15d_609, r15d_616)
	r15_612 = PHI(r15_610, r15_615)
	rbp_613 = rbp_558 + 0x0000000000000001
	SCZO_614 = cond(rbp_613)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C383:
	r15d_569 = PHI(r15d_543, r15d_611)
	rbp_570 = PHI(rbp_558, rbp_613)
	r15_571 = PHI(r15_560, r15_612)
	SCZO_572 = cond(r15_571 - r14_559)
	CZ_573 = SCZO_572 (alias)
	rax_574 = fp - 0x0000000000000078
	branch r15_571 <=u r14_559 l000000000040C38F
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C38B_1:
	r15_605 = r14_559
	r15d_606 = (word32) r15_605 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:fp - 0x0000000000000078 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C38F:
	r15d_575 = PHI(r15d_569, r15d_606)
	r15_576 = PHI(r15_571, r15_605)
	r14_577 = r14_559 - r15_576
	r14d_578 = (word32) r14_577 (alias)
	r9_579 = r9_544 - r15_576
	rdx_580 = r15_576
	rsi_581 = fp - 0x0000000000000078 + r14_577
	rdi_582 = r9_579
	rax_583 = memcpy(rdi_582, rsi_581, rdx_580)
	eax_584 = (word32) rax_583 (alias)
	rdx_rax_585 = SEQ(rdx_580, rax_583) (alias)
	edx_eax_586 = rax_583 (alias)
	ah_587 = SLICE(rax_583, byte, 8) (alias)
	ax_588 = (word16) rax_583 (alias)
	al_589 = (byte) rax_583 (alias)
	SZO_590 = cond(r14_577 & r14_577)
	Z_591 = SZO_590 (alias)
	C_592 = false
	r9_593 = rax_583
	r9d_594 = (word32) r9_593 (alias)
	branch (r14_577 & r14_577) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:fp - 0x0000000000000078 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C358:
	r9_597 = r9_593 - r13_542
	SCZO_598 = cond(r9_597)
	rdx_599 = r13_542
	rsi_600 = r12_540
	rdi_601 = r9_597
	rax_602 = memcpy(rdi_601, rsi_600, rdx_599)
	r9_603 = rax_602
	r9d_604 = (word32) r9_603 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C3AC:
	r12_595 = rax_583
	r12d_596 = (word32) r12_595 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C242:
	qwLocB0_199 = PHI(qwLocB0_493, qwLocB0_155)
	r10b_200 = PHI(r10b_537, r10b_156)
	r10d_201 = PHI(r10d_536, r10d_157)
	dil_202 = PHI(dil_533, dil_158)
	sil_203 = PHI(sil_532, sil_159)
	P_204 = PHI(P_530, P_160)
	CZP_205 = PHI(CZP_526, CZP_161)
	esi_206 = PHI(esi_524, esi_162)
	edi_207 = PHI(edi_520, edi_163)
	r10_208 = PHI(r10_519, r10_164)
	S_209 = PHI(S_517, S_165)
	r11_210 = PHI(r11_513, r11_166)
	fs_211 = PHI(fs_511, fs_78)
	r8_212 = PHI(r8_510, r8_167)
	r15d_213 = PHI(r15d_575, r15d_168)
	r9_214 = PHI(r9_593, r9_169)
	r9d_215 = PHI(r9d_594, r9d_170)
	r12d_216 = PHI(r12d_596, r12d_171)
	r14d_217 = PHI(r14d_578, r14d_172)
	CZ_218 = PHI(CZ_573, CZ_173)
	ebx_219 = PHI(ebx_518, ebx_174)
	rsi_220 = PHI(rsi_581, rsi_175)
	ecx_221 = PHI(ecx_512, ecx_176)
	rcx_222 = PHI(rcx_508, rcx_177)
	cl_223 = PHI(cl_521, cl_178)
	rdi_224 = PHI(rdi_582, rdi_179)
	rax_225 = PHI(rax_583, rax_180)
	eax_226 = PHI(eax_584, eax_181)
	ah_227 = PHI(ah_587, ah_182)
	ax_228 = PHI(ax_588, ax_183)
	al_229 = PHI(al_589, al_184)
	rdx_230 = PHI(rdx_580, rdx_185)
	edx_231 = PHI(edx_561, edx_186)
	rdx_rax_232 = PHI(rdx_rax_585, rdx_rax_187)
	edx_eax_233 = PHI(edx_eax_586, edx_eax_188)
	dl_234 = PHI(dl_565, dl_189)
	SCZO_235 = PHI(SCZO_572, SCZO_190)
	rbx_236 = PHI(rbx_507, rbx_191)
	rbp_237 = PHI(rbp_570, rbp_111)
	r12_238 = PHI(r12_595, r12_192)
	r13_239 = PHI(r13_542, r13_137)
	r14_240 = PHI(r14_577, r14_193)
	r15_241 = PHI(r15_576, r15_194)
	rsp_242 = PHI(rsp_494, rsp_61)
	SZO_243 = cond(bLocC8 & 0x80)
	Z_244 = SZO_243 (alias)
	C_245 = false
	branch (bLocC8 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C249:
	SCZO_372 = cond(ebx_219 - 0xFFFFFFFF)
	Z_373 = SCZO_372 (alias)
	branch ebx_219 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C618:
	rdx_441 = qwLocC0_43
	edx_442 = (word32) rdx_441 (alias)
	rdx_rax_443 = SEQ(rdx_441, rax_225) (alias)
	edx_eax_444 = rdx_441 (alias)
	dl_445 = (byte) rdx_441 (alias)
	SCZO_446 = cond(rdx_441 - 0x0000000000000001)
	CZ_447 = SCZO_446 (alias)
	branch rdx_441 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C7A9:
	rbx_476 = 0x0000000000000000
	ebx_477 = (word32) rbx_476 (alias)
	SZO_478 = cond(ebx_477)
	C_479 = false
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C627:
	r14_448 = (uint64) dwLocC4_59
	r14d_449 = (word32) r14_448 (alias)
	rbx_450 = 0x0000000000000001
	ebx_451 = (word32) rbx_450 (alias)
	rax_452 = 0x0000000000000001
	eax_453 = (word32) rax_452 (alias)
	rdx_rax_454 = SEQ(rdx_441, rax_452) (alias)
	edx_eax_455 = rax_452 (alias)
	ah_456 = SLICE(rax_452, byte, 8) (alias)
	ax_457 = (word16) rax_452 (alias)
	al_458 = (byte) rax_452 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C640:
	ebx_459 = PHI(ebx_451, ebx_473)
	Z_460 = PHI(Z_373, Z_475)
	rax_461 = PHI(rax_452, rax_463)
	rbx_462 = PHI(rbx_450, rbx_472)
	rax_463 = rax_461 *s r14_448
	eax_464 = (word32) rax_463 (alias)
	rdx_rax_465 = SEQ(rdx_441, rax_463) (alias)
	edx_eax_466 = rax_463 (alias)
	ah_467 = SLICE(rax_463, byte, 8) (alias)
	ax_468 = (word16) rax_463 (alias)
	al_469 = (byte) rax_463 (alias)
	SCZO_470 = cond(rdx_441 - rax_463)
	CZ_471 = SCZO_470 (alias)
	branch rdx_441 <=u rax_463 l000000000040C252
// DataOut: ebx fs r10 r11 r11d r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C64D:
	rbx_472 = (uint64) (ebx_459 + 0x00000001)
	ebx_473 = (word32) rbx_472 (alias)
	SCZO_474 = cond(ebx_473 - 0x00000008)
	Z_475 = SCZO_474 (alias)
	branch ebx_473 != 0x00000008 l000000000040C640
// DataOut: ebx fs r10 r11 r11d r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C655:
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C252:
	r14d_374 = PHI(r14d_217, r14d_449, r14d_449, r14d_217)
	CZ_375 = PHI(CZ_218, CZ_471, CZ_471, CZ_447)
	ebx_376 = PHI(ebx_219, ebx_459, ebx_473, ebx_477)
	rdx_377 = PHI(rdx_230, rdx_441, rdx_441, rdx_441)
	edx_378 = PHI(edx_231, edx_442, edx_442, edx_442)
	dl_379 = PHI(dl_234, dl_445, dl_445, dl_445)
	SCZO_380 = PHI(SCZO_372, SCZO_470, SCZO_474, SCZO_446)
	rbx_381 = PHI(rbx_236, rbx_462, rbx_472, rbx_476)
	r14_382 = PHI(r14_240, r14_448, r14_448, r14_240)
	rax_383 = (uint64) dwLocC8_41
	eax_384 = (word32) rax_383 (alias)
	rcx_385 = (uint64) ebx_376
	ecx_386 = (word32) rcx_385 (alias)
	rax_387 = (uint64) (eax_384 & 0x00000100)
	eax_388 = (word32) rax_387 (alias)
	rdx_rax_389 = SEQ(rdx_377, rax_387) (alias)
	edx_eax_390 = rax_387 (alias)
	ah_391 = SLICE(rax_387, byte, 8) (alias)
	ax_392 = (word16) rax_387 (alias)
	al_393 = (byte) rax_387 (alias)
	rcx_394 = (uint64) (ecx_386 | eax_388)
	ecx_395 = (word32) rcx_394 (alias)
	SZO_396 = cond(ecx_395)
	Z_397 = SZO_396 (alias)
	C_398 = false
	branch ecx_395 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(0) Local -00D0(64)

l000000000040C261:
	SZO_399 = cond(bLocC8 & 0x40)
	Z_400 = SZO_399 (alias)
	C_401 = false
	branch (bLocC8 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00D0(64)

l000000000040C3E8:
	rcx_437 = qwLocB8_38
	rsi_438 = rcx_437 + 0x0000000000000289
	Mem439[rcx_437 + 0x0000000000000288:byte] = 0x20
	qwLocD0_440 = rsi_438
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C26C:
	rsi_402 = PHI(rsi_220, rsi_438)
	rcx_403 = PHI(rcx_394, rcx_437)
	qwLocD0_404 = PHI(qwLocD0_142, qwLocD0_440)
	SZO_405 = cond(ebx_376 & ebx_376)
	Z_406 = SZO_405 (alias)
	C_407 = false
	branch (ebx_376 & ebx_376) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C274:
	rcx_408 = qwLocD0_404
	rdx_409 = rcx_408 + 0x0000000000000001
	edx_410 = (word32) rdx_409 (alias)
	rdx_rax_411 = SEQ(rdx_409, rax_387) (alias)
	edx_eax_412 = rdx_409 (alias)
	dl_413 = (byte) rdx_409 (alias)
	rcx_414 = (uint64) dwLoc90_51
	ecx_415 = (word32) rcx_414 (alias)
	SZO_416 = cond(ecx_415 & ecx_415)
	Z_417 = SZO_416 (alias)
	C_418 = false
	branch (ecx_415 & ecx_415) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C3D0:
	SCZO_432 = cond(ebx_376 - 0x00000001)
	Z_433 = SCZO_432 (alias)
	rcx_434 = 0x000000000000006B
	ecx_435 = (word32) rcx_434 (alias)
	cl_436 = (byte) rcx_434 (alias)
	branch ebx_376 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C289:
	Z_426 = PHI(Z_417, Z_433)
	SCZO_427 = PHI(SCZO_380, SCZO_432)
	rcx_428 = (int64) ebx_376
	ecx_429 = (word32) Mem0[rcx_428 + 0x0000000000415F78:byte]
	rcx_430 = DPB(rcx_428, ecx_429, 0) (alias)
	cl_431 = (byte) ecx_429 (alias)
// DataOut: cl eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C293:
	ecx_419 = PHI(ecx_429, ecx_435)
	rcx_420 = PHI(rcx_430, rcx_434)
	cl_421 = PHI(cl_431, cl_436)
	Z_422 = PHI(Z_426, Z_433)
	SCZO_423 = PHI(SCZO_427, SCZO_432)
	rdi_424 = qwLocD0_404
	Mem425[rdi_424:byte] = cl_421
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32)

l000000000040C29A:
	r14d_317 = PHI(r14d_374, r14d_246)
	CZ_318 = PHI(CZ_375, CZ_247)
	ebx_319 = PHI(ebx_376, ebx_248)
	rsi_320 = PHI(rsi_402, rsi_249)
	ecx_321 = PHI(ecx_419, ecx_250)
	rcx_322 = PHI(rcx_420, rcx_251)
	cl_323 = PHI(cl_421, cl_252)
	qwLocD0_324 = PHI(qwLocD0_404, qwLocD0_253)
	rdi_325 = PHI(rdi_424, rdi_254)
	rax_326 = PHI(rax_387, rax_258)
	eax_327 = PHI(eax_388, eax_259)
	ah_328 = PHI(ah_391, ah_260)
	ax_329 = PHI(ax_392, ax_261)
	al_330 = PHI(al_393, al_262)
	rdx_331 = PHI(rdx_409, rdx_266)
	edx_332 = PHI(edx_410, edx_267)
	rdx_rax_333 = PHI(rdx_rax_411, rdx_rax_268)
	edx_eax_334 = PHI(edx_eax_412, edx_eax_269)
	dl_335 = PHI(dl_413, dl_270)
	SCZO_336 = PHI(SCZO_423, SCZO_263)
	rbx_337 = PHI(rbx_381, rbx_264)
	r14_338 = PHI(r14_382, r14_265)
	SZO_339 = cond(eax_327 & eax_327)
	Z_340 = SZO_339 (alias)
	C_341 = false
	branch (eax_327 & eax_327) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32)

l000000000040C7F5:
	qwLocD0_371 = rdx_331
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C2A2:
	rax_342 = (uint64) dwLoc90_51
	eax_343 = (word32) rax_342 (alias)
	rdx_rax_344 = SEQ(rdx_331, rax_342) (alias)
	edx_eax_345 = rax_342 (alias)
	SZO_346 = cond(eax_343 & eax_343)
	Z_347 = SZO_346 (alias)
	C_348 = false
	branch (eax_343 & eax_343) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32)

l000000000040C3B8:
	SZO_361 = cond(ebx_319 & ebx_319)
	Z_362 = SZO_361 (alias)
	C_363 = false
	branch (ebx_319 & ebx_319) == 0x00000000 l000000000040C2AE
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32)

l000000000040C3C0:
	Mem364[rdx_331:byte] = 0x69
	rdx_365 = rdx_331 + 0x0000000000000001
	edx_366 = (word32) rdx_365 (alias)
	rdx_rax_367 = SEQ(rdx_365, rax_342) (alias)
	edx_eax_368 = rdx_365 (alias)
	dl_369 = (byte) rdx_365 (alias)
	SCZO_370 = cond(rdx_365)
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32)

l000000000040C2AE:
	SZO_349 = PHI(SZO_346, SZO_361, SZO_361)
	Z_350 = PHI(Z_347, Z_362, Z_362)
	C_351 = PHI(C_348, C_363, C_363)
	rdx_352 = PHI(rdx_331, rdx_331, rdx_365)
	edx_353 = PHI(edx_332, edx_332, edx_366)
	rdx_rax_354 = PHI(rdx_rax_344, rdx_rax_344, rdx_rax_367)
	edx_eax_355 = PHI(edx_eax_345, edx_eax_345, edx_eax_368)
	dl_356 = PHI(dl_335, dl_335, dl_369)
	SCZO_357 = PHI(SCZO_336, SCZO_336, SCZO_370)
	rax_358 = rdx_352 + 0x0000000000000001
	Mem359[rdx_352:byte] = 0x42
	qwLocD0_360 = rax_358
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C2BA:
	r14d_271 = PHI(r14d_217, r14d_374, r14d_317, r14d_317)
	CZ_272 = PHI(CZ_218, CZ_375, CZ_318, CZ_318)
	ebx_273 = PHI(ebx_219, ebx_376, ebx_319, ebx_319)
	rsi_274 = PHI(rsi_220, rsi_220, rsi_320, rsi_320)
	ecx_275 = PHI(ecx_221, ecx_395, ecx_321, ecx_321)
	rcx_276 = PHI(rcx_222, rcx_394, rcx_322, rcx_322)
	cl_277 = PHI(cl_223, cl_223, cl_323, cl_323)
	qwLocD0_278 = PHI(qwLocD0_142, qwLocD0_142, qwLocD0_360, qwLocD0_371)
	rdx_279 = PHI(rdx_230, rdx_377, rdx_352, rdx_331)
	edx_280 = PHI(edx_231, edx_378, edx_353, edx_332)
	dl_281 = PHI(dl_234, dl_379, dl_356, dl_335)
	SCZO_282 = PHI(SCZO_235, SCZO_380, SCZO_357, SCZO_336)
	rbx_283 = PHI(rbx_236, rbx_381, rbx_337, rbx_337)
	r14_284 = PHI(r14_240, r14_382, r14_338, r14_338)
	rax_285 = qwLocD0_278
	rdi_286 = qwLoc40_47
	rdi_287 = rdi_286 ^ Mem0[fs_211:0x00000028:word64]
	SZO_288 = cond(rdi_287)
	Z_289 = SZO_288 (alias)
	C_290 = false
	Mem291[rax_285:byte] = 0x00
	rax_292 = r12_238
	eax_293 = (word32) rax_292 (alias)
	rdx_rax_294 = SEQ(rdx_279, rax_292) (alias)
	edx_eax_295 = rax_292 (alias)
	ah_296 = SLICE(rax_292, byte, 8) (alias)
	ax_297 = (word16) rax_292 (alias)
	al_298 = (byte) rax_292 (alias)
	branch rdi_287 != 0x0000000000000000 l000000000040C7E6
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C7EB:
	r14d_246 = PHI(r14d_374, r14d_271)
	CZ_247 = PHI(CZ_375, CZ_272)
	ebx_248 = PHI(ebx_376, ebx_273)
	rsi_249 = PHI(rsi_402, rsi_274)
	ecx_250 = PHI(ecx_395, ecx_275)
	rcx_251 = PHI(rcx_403, rcx_276)
	cl_252 = PHI(cl_223, cl_277)
	qwLocD0_253 = PHI(qwLocD0_404, qwLocD0_278)
	rdi_254 = PHI(rdi_224, rdi_287)
	SZO_255 = PHI(SZO_405, SZO_288)
	Z_256 = PHI(Z_406, Z_289)
	C_257 = PHI(C_407, C_290)
	rax_258 = PHI(rax_387, rax_292)
	eax_259 = PHI(eax_388, eax_293)
	ah_260 = PHI(ah_391, ah_296)
	ax_261 = PHI(ax_392, ax_297)
	al_262 = PHI(al_393, al_298)
	SCZO_263 = PHI(SCZO_380, SCZO_282)
	rbx_264 = PHI(rbx_381, rbx_283)
	r14_265 = PHI(r14_382, r14_284)
	rdx_266 = qwLocD0_253
	edx_267 = (word32) rdx_266 (alias)
	rdx_rax_268 = SEQ(rdx_266, rax_258) (alias)
	edx_eax_269 = rdx_266 (alias)
	dl_270 = (byte) rdx_266 (alias)
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0090(32)

l000000000040C2DC:
	rsp_299 = fp - 0x0000000000000030
	SCZO_300 = cond(fp - 0x0000000000000030)
	rbx_301 = qwLoc30_30
	rsp_302 = fp - 0x0000000000000028
	rbp_303 = qwLoc28_27
	rsp_304 = fp - 0x0000000000000020
	r12_305 = qwLoc20_21
	rsp_306 = fp - 0x0000000000000018
	r13_307 = qwLoc18_18
	rsp_308 = fp - 0x0000000000000010
	r14_309 = qwLoc10_12
	rsp_310 = fp - 0x0000000000000008
	r15_311 = qwLoc08_4
	rsp_312 = fp
	return rax_292
// DataOut: fs r10 r11 r11d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040BD70_exit:
	use r8_212 (=> r8Out)
	use r9_214 (=> r9Out)
	use r10_208 (=> r10Out)
	use r11_210 (=> r11Out)
// DataOut: r10 r11 r11d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r14:r14 r12:r12 rbx:rbx rcx:<invalid> r15:r15 r13:r13 rdi:<invalid> eax:<invalid> rbp:rbp r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040C810(word64 rdx, word64 rdi, word64 r8, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi rdx
// LiveOut: ebx r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn000000000040C810_entry:
	*r9Out = r9
	*r8Out = r8
// DataOut: ebx fs r10 r11 r13b r14 r14b r15 r8 r9 rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0030(64)

l000000000040C810:
	word32 ebp_139
	word64 rbp_110
	word64 rdx_136
	word64 rbx_108 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C910:
	word64 rax_235 = getenv(0x00000000004138E4)
	rbx_108 = rax_235
	branch rax_235 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:rdi -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C926:
	word64 rax_242 = getenv(0x0000000000415F24)
	rbx_108 = rax_242
	branch rax_242 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C93C:
	word64 rdx_257 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem261[rdx:word64] = rdx_257 + 512
	rbp_110 = 0x0000000000000000
	ebp_139 = 0x00000000 (alias)
	rdx_136 = rdx_257 + 512
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C82C:
	rbp_110 = 0x0000000000000000
	word32 ebp_111 = 0x00000000
	branch Mem0[rbx_108:byte] == 0x27 l000000000040C8A0
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C8A0:
	rbx_108 = rbx_108 + 0x0000000000000001
	rbp_110 = 0x0000000000000004 (alias)
	ebp_111 = 0x00000004 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C833:
	word64 rax_126 = fn0000000000409E50(0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_108)
	byte al_129 = (byte) rax_126
	branch (word32) rax_126 < 0x00000000 l000000000040C8B0
// DataOut: al ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C8B0:
	word64 r9_158
	branch fn0000000000411360(0x00000000, fp - 0x0000000000000030, rbx_108, 0x0000000000415F3E, out ebp_139, out r8, out r9_158) != 0x00000000 l000000000040C968
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ecx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C968:
	Mem225[rbp_110:word32] = 0x00000000
	rdx_136 = Mem225[rdx:word64]
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_108:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C8DA:
	branch rbx_108 != qwLoc30 l000000000040C8F9
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C8F9:
	rbx_108 = rbx_108 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_108:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C8F0:
	branch rbx_108 == qwLoc30 l000000000040C980
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C8E4:
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C980:
	branch Mem0[qwLoc30 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C998:
	rbp_110 = (uint64) (ebp_139 | 0x00000180)
	ebp_139 = (word32) rbp_110 (alias)
	branch Mem0[qwLoc30 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C9A8:
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C986:
	ebp_139 = DPB(ebp_139, 0x84, 0) (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C98A:
	rbp_110 = (uint64) (ebp_139 | 0x00000020)
	ebp_139 = (word32) rbp_110 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C907:
	rdx_136 = Mem0[rdx:word64]
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C84E:
	Mem135[rdx:word64] = 0x0000000000000001
	rbp_110 = (uint64) (ebp_111 | Mem135[DPB(rax_126, (int16) al_129, 0) * 0x0000000000000004 + 0x00415F50:word32])
	rdx_136 = 0x0000000000000001
	ebp_139 = (word32) rbp_110 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ecx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C864:
	Mem100[rbp_110:word32] = ebp_139
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> r8:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C86A:
	branch rdx_136 != 0x0000000000000000 l000000000040C894
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C86F:
	Mem78[rdx:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	word64 r8_75
	*r8Out = r8 + 512
// DataOut: fs r10 r11 r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C894:
	return (word32) rbx
// DataOut: ebx fs r10 r11 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn000000000040C810_exit:
// DataOut: ebx r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbx:rbx rbp:rbp rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r8 rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040C9B0_entry:
// DataOut: ebp edi fs r10 r11 r11d r12b r13 r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rbx_15 = Mem0[0x000000000061B1F8:word64]
	branch rbx_15 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r10 r11 r11d r13 r14 r14d r15 r15d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(8) Local -0010(32)

l000000000040C9D1:
	branch Mem0[rbx_15:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r10 r11 r11d r13 r14 r14d r15 r15d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(8) Local -0010(32)

l000000000040C9C8:
	rbx_15 = Mem0[rbx_15 + 0x0000000000000008:word64]
	branch rbx_15 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r10 r11 r11d r13 r14 r14d r15 r15d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(8) Local -0010(32)

l000000000040C9C2:
// DataOut: ebp fs r10 r11 r11d r13 r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(8) Local -0010(32)

l000000000040C9F0:
	word64 r12_45 = 0x0000000000416919
	word64 rax_47 = getpwuid((uint64) ebp_10)
	word64 rdi_51 = 0x0000000000000011
	branch rax_47 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(8) Local -0010(32)

l000000000040CA07:
	r12_45 = Mem0[r8:word64]
	rdi_51 = DPB(rax_47, strlen(r12_45), 0) + 0x0000000000000011
// DataOut: ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(8) Local -0010(32)

l000000000040CA16:
	word64 rax_60 = fn0000000000410C40(rsi, rdi_51)
	Mem62[rax_60:word32] = ebp_10
	strcpy(rax_60 + 0x0000000000000010, r12_45)
	word64 rax_66 = Mem62[0x000000000061B1F8:word64]
	Mem67[0x000000000061B1F8:word64] = rax_60
	Mem68[rax_60 + 0x0000000000000008:word64] = rax_66
	rbx_15 = rax_60
// DataOut: fs r10 r11 r11d r13 r14 r14d r15 r15d r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(8) Local -0010(32)

l000000000040C9D5:
	word64 rax_25 = 0x0000000000000000
	word64 rdx_29 = rbx_15 + 0x0000000000000010
	branch Mem0[rbx_15 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp fs r10 r11 r11d r12b r12d r13 r14 r14d r15 r15d r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040C9E3_1:
	rax_25 = rdx_29
// DataOut: ebp fs r10 r11 r11d r12b r12d r13 r14 r14d r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040C9E7:
	return rax_25
// DataOut: ebp fs r10 r11 r11d r12b r12d r13 r14 r14d r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040C9B0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040CB40(word64 rax, word64 rsi, word32 edi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r8 rax rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040CB40_entry:
// DataOut: edi fs r10 r11 r11d r12d r13 r13d r14 r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word64 rbx_101
	word64 rbp_9 = (uint64) edi
	word32 ebp_10 = (word32) rbp_9
	word64 rbx_15 = Mem0[0x000000000061B1E8:word64]
	rbx_101 = rbx_15
	branch rbx_15 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r10 r11 r11d r13 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32)

l000000000040CB61:
	branch Mem0[rbx_101:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r10 r11 r11d r13 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(32)

l000000000040CB58:
	rbx_101 = Mem0[rbx_101 + 0x0000000000000008:word64]
	branch rbx_101 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r10 r11 r11d r13 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(32)

l000000000040CB52:
// DataOut: ebp fs r10 r11 r11d r13 r13d r14 r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(32)

l000000000040CB80:
	word64 rsp_52
	word64 rbp_54
	word32 ebp_55
	word32 edi_56
	word64 rbx_57
	byte SZO_58
	byte C_59
	byte Z_60
	byte SCZO_61
	word32 eax_62
	word64 rax_63
	word64 rdx_64
	word64 rdi_65
	word32 r12d_66
	word64 r8_67
	word64 rsi_68
	word64 r12_53
	call getgrgid (retsize: 8; depth: 32)
		uses: C_18,eax,ebp_10,edi,qwLoc08_4,qwLoc10_7,qwLoc18_13,r12_44,r12d_45,r8,rax,rbp_9,rbx_15,rdi_43,rdx,rsi,rsp_11,SCZO,SZO_16,Z_17
		defs: C_59,eax_62,ebp_55,edi_56,r12_53,r12d_66,r8_67,rax_63,rbp_54,rbx_57,rdi_65,rdx_64,rsi_68,rsp_52,SCZO_61,SZO_58,Z_60
	word64 rdi_72 = 0x0000000000000011
	branch rax_63 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r10 r11 r11d r12 r13 r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(32)

l000000000040CB97:
	r12_53 = Mem0[r8_67:word64]
	rdi_72 = DPB(rax_63, strlen(r12_53), 0) + 0x0000000000000011
// DataOut: ebp fs r10 r11 r11d r12 r13 r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(32)

l000000000040CBA6:
	word64 rax_79 = fn0000000000410C40(rsi_68, rdi_72)
	Mem81[rax_79:word32] = ebp_55
	strcpy(rax_79 + 0x0000000000000010, r12_53)
	word64 rax_85 = Mem81[0x000000000061B1E8:word64]
	Mem86[0x000000000061B1E8:word64] = rax_79
	Mem87[rax_79 + 0x0000000000000008:word64] = rax_85
	rbx_101 = rax_79
// DataOut: fs r10 r11 r11d r13 r13d r14 r14d r15 r15d r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(32)

l000000000040CB65:
	word64 rax_27 = 0x0000000000000000
	word64 rdx_31 = rbx_101 + 0x0000000000000010
	branch Mem0[rbx_101 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r10 r11 r11d r12d r13 r13d r14 r14d r15 r15d r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040CB73_1:
	rax_27 = rdx_31
// DataOut: fs r10 r11 r11d r12d r13 r13d r14 r14d r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040CB77:
	return rax_27
// DataOut: fs r10 r11 r11d r12d r13 r13d r14 r14d r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040CB40_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040CCD0(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_25 = rsi + 0x0000000000000014
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CD30:
	word64 rdx_67 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem78[rcx_25:byte] = (byte) (uint64) (rdx_67 * 0x0000000000000005 * 0x0000000000000002 + 0x0000000000000030 - edi)
	rdi = rdx_67
	edi = (word32) rdx_67 (alias)
	branch rdx_67 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem82[rcx_25 - 0x0000000000000001:byte] = 0x2D
	return rcx_25 - 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CCF0:
	word64 rdx_34 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem44[rcx_25:byte] = (byte) (uint64) ((word32) (rdi - (rdx_34 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_34
	branch rdx_34 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_25
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:0x0000000066666667 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r10 r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 rsi_5
	*rsiOut = 0x00000000CCCCCCCD
// DataOut: dil fs r10 r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rdi *u 0x00000000CCCCCCCD
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r10 r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: fs r10 r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



word64 fn000000000040CDC0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rcx rdi rdx rsi
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040CDC0_entry:
// DataOut: ebx fs r10 r11 r12d r8 r8d r9 r9b r9d rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_412
	word64 qwLoc58_102
	word64 rbp_117
	word64 rax_363
	word64 rcx_111
	word32 eax_286
	word32 ecx_280
	word64 r12_118
	word64 rbx_26 = (uint64) r9d
	word32 eax_36 = strlen(rdi)
	word64 rax_38 = DPB(rax, eax_36, 0)
	word64 r13_12 = rsi
	word64 r12_17 = rcx
	word32 ebx_115 = (word32) rbx_26
	byte bl_116 = (byte) rbx_26
	word64 qwLoc60_101 = rdi
	word64 r14_121 = rax_38
	word64 rbp_45 = rax_38
	branch (bl_116 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CF60:
	word64 rsp_543
	word64 r15_544
	word64 rcx_549
	word64 rbx_551
	word32 r9d_553
	byte SCZO_554
	word64 rdi_555
	word64 rdx_556
	word32 r8d_557
	word32 eax_558
	byte SZO_560
	byte C_561
	word64 rax_562
	byte Z_563
	word32 ebp_564
	byte CZ_565
	word32 ecx_566
	word32 r12d_567
	word32 edx_568
	word32 edi_569
	word32 r15d_570
	word16 ax_571
	byte al_572
	call __ctype_get_mb_cur_max (retsize: 8; depth: 112)
		uses: al_40,ax_39,bl_28,bLoc39,C_43,CZ,dwLoc40_35,eax_36,ebp_46,ebx_27,ecx,edi,edx,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_21,qwLoc30_24,qwLoc48,qwLoc50_33,qwLoc58,qwLoc60_31,r12_17,r12d_18,r13_12,r14_44,r15,r15d,r8d,r9d,rax_38,rbp_45,rbx_26,rcx,rdi,rdx,rsi,rsp_29,SCZO,SZO_41,Z_42
		defs: al_572,ax_571,bl_559,C_561,CZ_565,eax_558,ebp_564,ebx_552,ecx_566,edi_569,edx_568,r12_548,r12d_567,r13_546,r14_545,r15_544,r15d_570,r8d_557,r9d_553,rax_562,rbp_550,rbx_551,rcx_549,rdi_555,rdx_556,rsi_547,rsp_543,SCZO_554,SZO_560,Z_563
	branch rax_562 <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CF6F:
	word64 rsp_581
	word64 r15_582
	word64 rcx_587
	word64 rbp_588
	word64 rbx_589
	word32 r9d_591
	byte SCZO_592
	word64 rdi_593
	word64 rdx_594
	word32 r8d_595
	word32 eax_596
	byte SZO_598
	byte C_599
	word64 rax_600
	byte Z_601
	word32 ebp_602
	byte CZ_603
	word32 ecx_604
	word32 r12d_605
	word32 edx_606
	word32 edi_607
	word32 r15d_608
	word16 ax_609
	byte al_610
	call mbstowcs (retsize: 8; depth: 112)
		uses: al_572,ax_571,bl_559,bLoc39,C_580,CZ_574,dwLoc40_35,eax_558,ebp_564,ebx_552,ecx_566,edi_578,edx_568,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_21,qwLoc30_24,qwLoc48,qwLoc50_33,qwLoc58,qwLoc60_31,r12_548,r12d_567,r13_546,r14_545,r15_544,r15d_570,r8d_557,r9d_553,rax_562,rbp_550,rbx_551,rcx_549,rdi_577,rdx_576,rsi_575,rsp_543,SCZO_573,SZO_579,Z_563
		defs: al_610,ax_609,bl_597,C_599,CZ_603,eax_596,ebp_602,ebx_590,ecx_604,edi_607,edx_606,r12_586,r12d_605,r13_584,r14_583,r15_582,r15d_608,r8d_595,r9d_591,rax_600,rbp_588,rbx_589,rcx_587,rdi_593,rdx_594,rsi_585,rsp_581,SCZO_592,SZO_598,Z_601
	branch rax_600 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CFA8:
	word64 r15_639 = (rax_600 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_643 = malloc(r15_639)
	qwLoc58_102 = rax_643
	branch rax_643 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D160:
	branch (bl_116 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D169:
	r15_412 = r14_121
	rbp_117 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CFCF:
	word64 rsp_654
	word64 r15_655
	word64 rcx_660
	word64 rbx_662
	word32 r9d_664
	byte SCZO_665
	word64 rdi_666
	word64 rdx_667
	word32 r8d_668
	word32 eax_669
	byte SZO_671
	byte C_672
	word64 rax_673
	byte Z_674
	word32 ebp_675
	byte CZ_676
	word32 ecx_677
	word32 r12d_678
	word32 edx_679
	word32 edi_680
	word32 r15d_681
	word16 ax_682
	byte al_683
	call mbstowcs (retsize: 8; depth: 112)
		uses: al_646,ax_645,bl_597,bLoc39,C_649,CZ_603,dwLoc40_35,eax_644,ebp_602,ebx_590,ecx_604,edi_607,edx_606,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_21,qwLoc30_24,qwLoc48_641,qwLoc50_33,qwLoc58_650,qwLoc60_31,r12_586,r12d_605,r13_584,r14_583,r15_639,r15d_640,r8d_595,r9d_591,rax_643,rbp_588,rbx_589,rcx_587,rdi_653,rdx_651,rsi_652,rsp_581,SCZO_611,SZO_647,Z_648
		defs: al_683,ax_682,bl_670,C_672,CZ_676,eax_669,ebp_675,ebx_663,ecx_677,edi_680,edx_679,r12_659,r12d_678,r13_657,r14_656,r15_655,r15d_681,r8d_668,r9d_664,rax_673,rbp_661,rbx_662,rcx_660,rdi_666,rdx_667,rsi_658,rsp_654,SCZO_665,SZO_671,Z_674
	branch rax_673 == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CFEC:
	word64 qwLoc48_700
	Mem691[rax_643 - 0x0000000000000004 + r15_655:word32] = 0x00000000
	word64 rdi_692 = (uint64) Mem691[rax_643:word32]
	word32 edi_693 = (word32) rdi_692
	branch edi_693 == 0x00000000 l000000000040D106
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D106:
	r15_412 = (int64) wcswidth(rax_643, rax_600 + 0x0000000000000001)
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D004:
	byte bLoc39_854 = 0x00
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D010:
	word64 rsp_856
	word64 r15_857
	word64 rsi_860
	word64 rcx_862
	word64 rbx_864
	word32 r9d_866
	byte SCZO_867
	word64 rdi_868
	word64 rdx_869
	word32 r8d_870
	word32 eax_871
	byte SZO_873
	byte C_874
	word64 rax_875
	byte Z_876
	word32 ebp_877
	byte CZ_878
	word32 ecx_879
	word32 r12d_880
	word32 edx_881
	word32 edi_882
	word32 r15d_883
	word16 ax_884
	byte al_885
	call iswprint (retsize: 8; depth: 112)
		uses: al_690,ax_689,bl_670,bLoc39_855,C_696,CZ_676,dwLoc40_35,eax_688,ebp_675,ebx_663,ecx_677,edi_693,edx_679,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_21,qwLoc30_24,qwLoc48_641,qwLoc50_33,qwLoc58_650,qwLoc60_31,r12_659,r12d_678,r13_657,r14_656,r15_852,r15d_853,r8d_668,r9d_664,rax_687,rbp_661,rbx_662,rcx_660,rdi_692,rdx_667,rsi_658,rsp_654,SCZO_665,SZO_694,Z_695
		defs: al_885,ax_884,bl_872,C_874,CZ_878,eax_871,ebp_877,ebx_865,ecx_879,edi_882,edx_881,r12_861,r12d_880,r13_859,r14_858,r15_857,r15d_883,r8d_870,r9d_866,rax_875,rbp_863,rbx_864,rcx_862,rdi_868,rdx_869,rsi_860,rsp_856,SCZO_867,SZO_873,Z_876
	branch eax_871 != 0x00000000 l000000000040D025
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D019:
	Mem912[rdi_868:word32] = 0x0000FFFD
	bLoc39_854 = 0x01
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D025:
	branch (word32) (uint64) Mem691[rdi_868:word32] != 0x00000000 l000000000040D010
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D030:
	r15_412 = (int64) wcswidth(rax_643, rax_600 + 0x0000000000000001)
	branch bLoc39_854 == 0x00 l000000000040D118
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D118:
	rsi = rax_600 + 0x0000000000000001
	rax_363 = Mem691[r12_17:word64]
	branch r15_412 <=u rax_363 l000000000040CF28
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF28:
	rbp_117 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D125:
	qwLoc48_700 = rbp_45 + 0x0000000000000001
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D04D:
	rsi = rax_643
	qwLoc48_700 = DPB(rax_875, wcstombs(0x0000000000000000, rax_643, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D064:
	word64 rax_723 = malloc(qwLoc48_700)
	rbp_117 = rax_723
	branch rax_723 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D138:
	branch (bl_116 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D141:
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040D07A:
	word64 rdi_735 = (uint64) Mem691[rax_643:word32]
	word64 rax_729 = Mem691[r12_17:word64]
	word64 rax_731 = rax_643
	branch (word32) rdi_735 == 0x00000000 l000000000040D173
// DataOut: bl ebx fs r10 r11 r12 r13 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D173:
	r15_412 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64)

l000000000040D092:
	r15_412 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0BA:
	word32 eax_771 = wcwidth(rdi_735)
	byte al_774 = (byte) eax_771
	branch eax_771 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0A0:
	rax_731 = DPB(rax_731, (int16) al_774, 0) + r15_412
	branch rax_729 <u rax_731 l000000000040D0E0
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0C4:
	Mem791[rsi:word32] = 0x0000FFFD
	rax_731 = r15_412 + 0x0000000000000001
	branch rax_729 >=u rax_731 l000000000040D0AC
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0AC:
	rdi_735 = (uint64) Mem691[rsi:word32]
	r15_412 = rax_731
	branch (word32) rdi_735 == 0x00000000 l000000000040D0E0
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0DA:
// DataOut: bl ebx fs r10 r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64)

l000000000040D0E0:
	Mem753[rax_643:word32] = 0x00000000
	rsi = rax_643
	qwLoc60_101 = rax_723
	r14_121 = DPB(rax_731, wcstombs(rax_723, rax_643, qwLoc48_700), 0)
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF83:
	branch (bl_116 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040D14D:
	r15_412 = r14_121
	qwLoc58_102 = 0x0000000000000000
	rbp_117 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF8C:
	qwLoc58_102 = 0x0000000000000000
	rbp_117 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CDFA:
	qwLoc58_102 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE03:
	r15_412 = rbp_45
	rbp_117 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE08:
	rax_363 = Mem0[r12_17:word64]
	branch r15_412 <=u rax_363 l000000000040CF2A
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF2A:
	branch r15_412 >=u rax_363 l000000000040D180
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D180:
	rax_363 = r15_412
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF33:
	Mem420[r12_17:word64] = r15_412
	word64 rax_416 = rax_363 - r15_412
	rcx_111 = rax_416
	ecx_280 = (word32) rax_416 (alias)
	eax_286 = (word32) (uint64) r8d (alias)
	branch eax_286 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx fs r10 r11 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE15:
	r14_121 = rax_363
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE1A:
	Mem374[r12_17:word64] = rax_363
	ecx_280 = 0x00000000
	rcx_111 = 0x0000000000000000
	eax_286 = (word32) (uint64) r8d (alias)
	branch eax_286 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx fs r10 r11 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF4C:
	r12_118 = rcx_111
	rcx_111 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE2A:
	r12_118 = 0x0000000000000000
	branch eax_286 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE32:
	r12_118 = rcx_111 >>u 0x0000000000000001
	rcx_111 = (uint64) (ecx_280 & 0x00000001) + r12_118
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE3E:
	branch (bl_116 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE43_1:
	rcx_111 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_115 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE4A_1:
	r12_118 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64) Local -0060(64)

l000000000040CE5A:
	word64 rdx_169 = rcx_111 - 0x0000000000000001
	word64 rbx_171 = r13_12 - 0x0000000000000001 + rdx
	branch rcx_111 == 0x0000000000000000 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE6D:
	branch r13_12 >=u rbx_171 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE72:
	word64 rax_245 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE89:
	Mem259[rbp_117 - 0x0000000000000001:byte] = 0x20
	r13_12 = r13_12 + 0x0000000000000001
	branch rdx_169 != rax_245 l000000000040CE80
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE80:
	rax_245 = rax_245 + 0x0000000000000001
	branch r13_12 == rbx_171 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE97:
	Mem184[rbp_117:byte] = 0x00
	word64 rdx_185 = rbx_171 - r13_12
	branch rdx_185 <=u r14_121 l000000000040CEB6
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64)

l000000000040CEB2_1:
	rdx_185 = r14_121
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64)

l000000000040CEB6:
	word64 rax_193 = mempcpy(r13_12, qwLoc60_101, rdx_185)
	word64 rdx_200 = rax_193
	rsi = r12_118 - 0x0000000000000001
	branch r12_118 == 0x0000000000000000 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CECD:
	branch rbx_171 <=u rax_193 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CED2:
	word64 rax_219 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEE9:
	rdx_200 = rdx_200 + 0x0000000000000001
	Mem234[rdx_200 - 0x0000000000000001:byte] = 0x20
	branch rsi != rax_219 l000000000040CEE0
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEE0:
	rax_219 = rax_219 + 0x0000000000000001
	branch rdx_200 == rbx_171 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEF6:
	Mem216[rdx_200:byte] = 0x00
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEF9:
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEFF:
	free(qwLoc58_102)
	free(rbp_117)
	return rsi
// DataOut: ebx fs r10 r11 r12d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040CDC0_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbx:rbx eax:<invalid> r14:r14 rbp:rbp rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:r15 rcx:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & ebxOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12dOut, ptr64 & r13dOut, ptr64 & r14dOut, ptr64 & r15dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax ebx edi r12b r12d r13d r14b r14d r15b r15d rax rdi rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040D240_entry:
// DataOut: ebx edi edx fs r10 r11 r11d r12d r13d r14d r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64)

l000000000040D240:
	word64 rax_187
	word64 rsp_38
	word64 r15_39
	word32 edx_40
	word64 r14_41
	word64 rsi_44
	word64 r12_45
	word64 rbx_47
	byte SCZO_48
	word64 rax_50
	word32 eax_51
	byte SZO_52
	byte C_53
	byte CZ_54
	word32 r15d_55
	word32 r12d_56
	word32 r14d_57
	byte al_58
	byte SO_59
	word64 rdx_60
	word64 rcx_61
	byte Z_62
	byte S_63
	word32 esi_64
	byte dh_65
	word32 ebx_66
	word32 r13d_67
	word32 edi_68
	selector fs_164
	word64 rdi_165
	word64 rbp_259
	word64 r13_262
	call __ctype_get_mb_cur_max (retsize: 8; depth: 96)
		uses: al_35,C_37,eax_34,edx,fs,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_20,qwLoc28_23,qwLoc30_27,qwLoc40_32,r12,r13_16,r13d_17,r14,r15_6,r15d_7,rax_33,rbp_24,rbx,rdi,rsi,rsp_28,SZO_36
		defs: al_58,C_53,CZ_54,dh_65,eax_51,ebx_66,edi_68,edx_40,esi_64,fs_49,r12_45,r12d_56,r13_42,r13d_67,r14_41,r14d_57,r15_39,r15d_55,rax_50,rbp_46,rbx_47,rcx_61,rdi_43,rdx_60,rsi_44,rsp_38,S_63,SCZO_48,SO_59,SZO_52,Z_62
	word64 rax_31 = Mem0[fs:0x00000028:word64]
	branch false l000000000040D370
// DataOut: edi fs r10 r11 r11d r13 r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D370:
	branch rbp_259 >=u r13_262 l000000000040D406
// DataOut: edi fs r10 r11 r11d r13 r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D379:
	word64 rsp_565
	word64 r15_566
	word32 edx_567
	word64 r14_568
	word64 r13_569
	word64 rsi_571
	word64 r12_572
	word64 rbx_574
	byte SCZO_575
	word64 rax_577
	word32 eax_578
	byte SZO_579
	byte C_580
	byte CZ_581
	word32 r15d_582
	word32 r12d_583
	word32 r14d_584
	byte al_585
	byte SO_586
	word64 rcx_588
	byte Z_589
	byte S_590
	word32 esi_591
	byte dh_592
	word32 ebx_593
	word32 r13d_594
	word32 edi_595
	word64 rbp_573
	word64 rdx_587
	call __ctype_b_loc (retsize: 8; depth: 96)
		uses: al_58,C_564,CZ_70,dh_65,dwLoc4C,eax_51,ebx_66,edi_68,edx_40,esi_64,fs_49,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_20,qwLoc28_23,qwLoc30_27,qwLoc40_32,qwLoc48,r12_45,r12d_56,r13_42,r13d_67,r14_41,r14d_57,r15_39,r15d_55,rax_50,rbp_46,rbx_47,rcx_61,rdi_43,rdx_60,rsi_44,rsp_38,S_63,SCZO_563,SO_59,SZO_52,Z_62
		defs: al_585,C_580,CZ_581,dh_592,eax_578,ebx_593,edi_595,edx_567,esi_591,fs_576,r12_572,r12d_583,r13_569,r13d_594,r14_568,r14d_584,r15_566,r15d_582,rax_577,rbp_573,rbx_574,rcx_588,rdi_570,rdx_587,rsi_571,rsp_565,S_590,SCZO_575,SO_586,SZO_579,Z_589
	word64 rcx_598 = Mem0[rax_577:word64]
	rax_187 = 0x0000000000000000
	word32 eax_600 = 0x00000000
	word32 esi_603 = (word32) (uint64) ((word32) (uint64) r15d_582 & 0x00000002)
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D398:
	rbp_573 = rbp_573 + 0x0000000000000001
	word32 edx_615 = (word32) Mem0[rcx_598 + DPB(rdx_587, (word32) Mem0[rbp_573 - 0x0000000000000001:byte], 0) * 0x0000000000000002:word16]
	rdx_587 = DPB(rdx_587, edx_615, 0) (alias)
	branch (SLICE(edx_615, byte, 8) & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edi edx esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D3A9:
	branch esi_603 != 0x00000000 l000000000040D369
// DataOut: eax edi edx esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D3AD:
	rdx_587 = (uint64) (edx_615 & 0x00000002)
	branch (word32) rdx_587 != 0x00000000 l000000000040D393
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D3B2:
	branch eax_600 != 0x7FFFFFFF l000000000040D390
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D390:
	rax_187 = (uint64) (eax_600 + 0x00000001)
	eax_600 = (word32) rax_187 (alias)
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D393:
	branch rbp_573 == r13_569 l000000000040D3C5
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D3B9:
// DataOut: edi fs r10 r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D277:
	branch rbp_259 >=u r13_262 l000000000040D406
// DataOut: edi fs r10 r11 r11d r13 r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D406:
	rax_187 = 0x0000000000000000
// DataOut: eax edi fs r10 r11 r11d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D280:
	word32 r12d_234 = 0x00000000
	word32 r15d_236
	*r15dOut = (word32) (uint64) (r15d_55 & 0x00000001)
	word32 r14d_238
	*r14dOut = (word32) (uint64) ((word32) (uint64) r15d_55 & 0x00000002)
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2AC:
	word32 eax_269 = (word32) Mem0[rbp_259:byte]
	byte al_271 = (byte) eax_269
	branch al_271 <= 0x3F l000000000040D290
// DataOut: al eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D290:
	branch al_271 >= 0x25 l000000000040D29B
// DataOut: al eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D294:
	branch (byte) (uint64) (eax_269 - 0x00000020) >u 0x03 l000000000040D2C3
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2B4:
	branch al_271 < 0x41 l000000000040D2C3
// DataOut: al eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2B8:
	branch al_271 <= 0x5F l000000000040D29B
// DataOut: al eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2BC:
	branch (byte) (uint64) (eax_269 - 0x00000061) <=u 0x1D l000000000040D29B
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2C3:
// DataOut: fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2F4:
	word64 rsp_389
	word64 r15_390
	word32 edx_391
	word64 r14_392
	word64 rsi_395
	word64 r12_396
	word64 rbx_398
	byte SCZO_399
	word64 rax_401
	word32 eax_402
	byte SZO_403
	byte C_404
	byte CZ_405
	word32 r15d_406
	word32 r14d_408
	byte al_409
	byte SO_410
	word64 rdx_411
	word64 rcx_412
	byte Z_413
	byte S_414
	word32 esi_415
	byte dh_416
	word32 ebx_417
	word32 r13d_418
	word32 edi_419
	call mbrtowc (retsize: 8; depth: 96)
		uses: al_377,C_253,CZ_373,dh_242,eax_376,ebx_258,edi_385,edx_249,esi_251,fs_247,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_20,qwLoc28_23,qwLoc30_27,qwLoc40_32,qwLoc48_379,r12_260,r12d_261,r13_381,r13d_263,r14_264,r14d_265,r15_266,r15d_267,rax_375,rbp_380,rbx_257,rcx_383,rdi_384,rdx_386,rsi_388,rsp_268,S_243,SCZO_387,SO_372,SZO_374,Z_252
		defs: al_409,C_404,CZ_405,dh_416,eax_402,ebx_417,edi_419,edx_391,esi_415,fs_400,r12_396,r12d_407,r13_393,r13d_418,r14_392,r14d_408,r15_390,r15d_406,rax_401,rbp_397,rbx_398,rcx_412,rdi_394,rdx_411,rsi_395,rsp_389,S_414,SCZO_399,SO_410,SZO_403,Z_413
	branch rax_401 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D360:
	branch r15d_406 == 0x00000000 l000000000040D29B
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D29B:
	rbp_259 = rbp_259 + 0x0000000000000001
	*r12dOut = (word32) (uint64) (r12d_234 + 0x00000001)
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D315:
	branch rax_401 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3E8:
	branch r15d_406 != 0x00000000 l000000000040D369
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3F1:
	rbp_259 = r13_262
	r12d_234 = (word32) (uint64) (r12d_234 + 0x00000001) (alias)
	*r12dOut = r12d_234
	branch r13_262 >u r13_262 l000000000040D2AC
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D31F:
	rdi_165 = (uint64) dwLoc4C
	*rdiOut = rdi_165
	branch rax_401 != 0x0000000000000000 l000000000040D32F
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D32B_1:
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D32F:
	word32 eax_435 = wcwidth(rdi_165)
	branch eax_435 >= 0x00000000 l000000000040D2D0
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2D0:
	branch eax_435 > (word32) ((uint64) (0x7FFFFFFF - r12d_234)) l000000000040D3C0
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2E0:
// DataOut: eax fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D338:
	branch r14d_408 != 0x00000000 l000000000040D369
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D369:
	rax_187 = 0x00000000FFFFFFFF
// DataOut: eax edi fs r10 r11 r11d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D33D:
	word64 rsp_486
	word64 r15_487
	word32 edx_488
	word64 r14_489
	word64 r13_490
	word64 rsi_492
	word64 r12_493
	word64 rbp_494
	word64 rbx_495
	byte SCZO_496
	word64 rax_498
	word32 eax_499
	byte SZO_500
	byte C_501
	byte CZ_502
	word32 r15d_503
	word32 r12d_504
	word32 r14d_505
	byte al_506
	byte SO_507
	word64 rdx_508
	word64 rcx_509
	byte Z_510
	byte S_511
	word32 esi_512
	byte dh_513
	word32 ebx_514
	word32 r13d_515
	word32 edi_516
	call iswcntrl (retsize: 8; depth: 96)
		uses: al_437,C_483,CZ_405,dh_416,dwLoc4C,eax_435,ebx_434,edi_485,edx_391,esi_415,fs_400,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_20,qwLoc28_23,qwLoc30_27,qwLoc40_32,qwLoc48_379,r12_396,r12d_407,r13_393,r13d_418,r14_392,r14d_408,r15_390,r15d_406,rax_436,rbp_397,rbx_433,rcx_412,rdi_484,rdx_411,rsi_395,rsp_389,S_439,SCZO_424,SO_410,SZO_481,Z_482
		defs: al_506,C_501,CZ_502,dh_513,eax_499,ebx_514,edi_516,edx_488,esi_512,fs_497,r12_493,r12d_504,r13_490,r13d_515,r14_489,r14d_505,r15_487,r15d_503,rax_498,rbp_494,rbx_495,rcx_509,rdi_491,rdx_508,rsi_492,rsp_486,S_511,SCZO_496,SO_507,SZO_500,Z_510
	branch eax_499 != 0x00000000 l000000000040D2E3
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D34A:
	branch r12d_504 == 0x7FFFFFFF l000000000040D3C0
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3C0:
	rax_187 = 0x000000007FFFFFFF
// DataOut: eax edi fs r10 r11 r11d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D353:
// DataOut: eax fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2E3:
	word64 rsp_447
	word64 r15_448
	word32 edx_449
	word64 r14_450
	word64 rsi_453
	word64 r12_454
	word64 rbx_456
	byte SCZO_457
	word64 rax_459
	word32 eax_460
	byte SZO_461
	byte C_462
	byte CZ_463
	word32 r15d_464
	word32 r14d_466
	byte al_467
	byte SO_468
	word64 rdx_469
	word64 rcx_470
	byte Z_471
	byte S_472
	word32 esi_473
	byte dh_474
	word32 ebx_475
	word32 r13d_476
	word32 edi_477
	call mbsinit (retsize: 8; depth: 96)
		uses: al_437,C_440,CZ_405,dh_416,dwLoc4C,eax_435,ebx_434,edi_444,edx_391,esi_415,fs_400,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_20,qwLoc28_23,qwLoc30_27,qwLoc40_32,qwLoc48_379,r12_396,r12d_407,r13_393,r13d_418,r14_392,r14d_408,r15_390,r15d_406,rax_436,rbp_445,rbx_441,rcx_412,rdi_443,rdx_411,rsi_395,rsp_389,S_439,SCZO_446,SO_410,SZO_438,Z_430
		defs: al_467,C_462,CZ_463,dh_474,eax_460,ebx_475,edi_477,edx_449,esi_473,fs_458,r12_454,r12d_465,r13_451,r13d_476,r14_450,r14d_466,r15_448,r15d_464,rax_459,rbp_455,rbx_456,rcx_470,rdi_452,rdx_469,rsi_453,rsp_447,S_472,SCZO_457,SO_468,SZO_461,Z_471
	branch eax_460 != 0x00000000 l000000000040D2A3
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2A3:
	branch r13_262 <=u rbp_259 l000000000040D401
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D401:
	rax_187 = (uint64) r12d_234
// DataOut: eax edi fs r10 r11 r11d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32) Local -0040(64)

l000000000040D3C5:
	word64 rsi_99 = rax_31 ^ Mem0[fs_164:0x00000028:word64]
	*rsiOut = rsi_99
	word32 esi_100 = (word32) rsi_99
	branch rsi_99 != 0x0000000000000000 l000000000040D40A
// DataOut: eax edi esi fs r10 r11 r11d r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(32) Local -0018(32) Local -0020(32) Local -0030(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut: esi fs r10 r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040D40A_thunk_fn000000000040D420:
	word32 ebx_148
	word64 rsi_149
	word32 edi_150
	word64 r12_151
	word64 r13_152
	word64 r14_153
	word64 r15_154
	return fn000000000040D420(esi_100, rdi_165, fs_164, out ebx_148, out rsi_149, out edi_150, out r12_151, out r13_152, out r14_153, out r15_154)
// DataOut: eax ebx edi fs r10 r11 r11d r12b r12d r13d r14b r14d r15b r15d r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D3D5:
	word32 ebx_132
	*ebxOut = (word32) rbx
	word32 r12d_137
	*r12dOut = (word32) r12
	word32 r13d_140
	*r13dOut = (word32) r13
	word32 r14d_143
	*r14dOut = (word32) r14
	word32 r15d_146
	*r15dOut = (word32) r15
	return rax_187
// DataOut: eax ebx edi fs r10 r11 r11d r12b r12d r13d r14b r14d r15b r15d r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D240_exit:
// DataOut: eax ebx edi r12b r12d r13d r14b r14d r15b r15d rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> r12:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040D420(word32 esi, word64 rdi, selector fs, ptr64 & ebxOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rdi
// LiveOut: eax ebx edi r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbp rbx rdi rsp
fn000000000040D420_entry:
// DataOut: esi fs r10 r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = rbp
	rbp = (uint64) esi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000010
	qwLoc10 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000018
	eax = strlen(rdi)
	rax = DPB(rax, eax, 0) (alias)
	rsp = fp - 0x0000000000000010
	SCZO = cond(fp - 0x0000000000000010)
	rdi = rbx
	edi = (word32) rdi (alias)
	rdx = (uint64) ebp
	edx = (word32) rdx (alias)
	dh = SLICE(rdx, byte, 8) (alias)
	rbx = qwLoc10
	rsp = fp - 0x0000000000000008
	rbp = qwLoc08
	rsp = fp
	rsi = rax
	esi = (word32) rsi (alias)
// DataOut: edx fs r10 r11 r11d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43B_thunk_fn000000000040D240:
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsi, out rdi, out r12d, out r13d, out r14d, out r15d)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax ebx edi fs r10 r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx eax:<invalid> rdi:rdi rdx:(uint64) ebp rsi:rax -16(fp):rbx -8(fp):rbp

fn000000000040D420_exit:
	use ebx (=> ebxOut)
	use rsi (=> rsiOut)
	use edi (=> ediOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax ebx edi r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r12:<invalid> r14:<invalid> -16(fp):rbx -8(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rsiOut, ptr64 & r13dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r13d rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040D450_entry:
// DataOut: eax fs r10 r11 r13d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000068
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc68 = rsi
	qwLoc50 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax fs r10 r11 r15 r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32) Local -0068(64)

l000000000040D490:
	rsi = qwLoc68
	rdx = qwLoc50
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc60 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc40 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: fs r10 r11 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: fs r10 r11 r12 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D547:
	v24 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v24
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: fs r10 r11 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: fs r10 r11 r12 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	r15 = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdi = rbx + r15 * 0x0000000000000008
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = rcx + rax * 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = memcpy(rdi, rsi, rdx)
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5C3:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax fs r10 r11 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r13d = (word32) r13 (alias)
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4; depth: 108)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax fs r10 r11 r12 r13 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000030
	SCZO = cond(fp - 0x0000000000000030)
	rbx = qwLoc30
	rsp = fp - 0x0000000000000028
	rbp = qwLoc28
	rsp = fp - 0x0000000000000020
	r12 = qwLoc20
	rsp = fp - 0x0000000000000018
	r13 = qwLoc18
	rsp = fp - 0x0000000000000010
	r14 = qwLoc10
	rsp = fp - 0x0000000000000008
	r15 = qwLoc08
	rsp = fp
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	r13d = (word32) r13 (alias)
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D450_exit:
	use rsi (=> rsiOut)
	use r13d (=> r13dOut)
// DataOut: eax r13d rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut: r12 r13 r13d r14 r15 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
	*r15Out = r15
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
// DataOut: edi fs r10 r11 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax fs r10 r11 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsi_12
	word32 r13d_13
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsi_12, out r13d_13)
	return rsi_12
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut: r12 r13 r13d r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid>



void fn000000000040D6A0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn000000000040D6A0_entry:
// DataOut: ebx fs r10 r11 r15 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_119 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: fs r10 r11 r15 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0008(32)

l000000000040D713:
	fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64])
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6B8:
	word64 rcx_49 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_50 = cond(rcx_49 - 0x0000000000000006)
	byte C_110 = SCZO_50
	byte Z_143 = SCZO_50
	byte CZ_112 = SCZO_50
	branch rcx_49 <= 0x0000000000000006 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:0x000000000000002F rax:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6C8:
	word64 rsi_145 = rax_11 - 0x0000000000000006
	word64 rdi_148 = 0x0000000000415FD8
	word64 rcx_150 = 0x0000000000000007
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D6:
	branch rcx_150 == 0x0000000000000000 l000000000040D6D8
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D6_1:
	byte SCZO_140 = cond(Mem0[rsi_158:byte] - Mem0[rdi_159:byte])
	C_110 = SCZO_140 (alias)
	Z_143 = SCZO_140 (alias)
	CZ_112 = SCZO_140 (alias)
	rsi_145 = rsi_158 + 0x0000000000000001
	rdi_148 = rdi_159 + 0x0000000000000001
	rcx_150 = rcx_150 - 0x0000000000000001
	word64 rsi_158 = rsi_145
	word64 rdi_159 = rdi_148
	branch Mem0[rsi_158:byte] != Mem0[rdi_159:byte] l000000000040D6D6
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D8:
	branch Z_143 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6DA:
	word64 rcx_104 = 0x0000000000000003
	word64 rsi_100 = rax_11 + 0x0000000000000001
	word64 rdi_102 = 0x0000000000415FE0
// DataOut: fs r10 r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E7:
	branch rcx_104 == 0x0000000000000000 l000000000040D6E9
// DataOut: fs r10 r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E7_2:
	byte SCZO_127 = cond(Mem0[rsi_160:byte] - Mem0[rdi_161:byte])
	C_110 = SCZO_127 (alias)
	CZ_112 = SCZO_127 (alias)
	rsi_100 = rsi_160 + 0x0000000000000001
	rdi_102 = rdi_161 + 0x0000000000000001
	rcx_104 = rcx_104 - 0x0000000000000001
	word64 rsi_160 = rsi_100
	word64 rdi_161 = rdi_102
	branch Mem0[rsi_160:byte] != Mem0[rdi_161:byte] l000000000040D6E7
// DataOut: fs r10 r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E9:
	rbx_119 = rax_11 + 0x0000000000000001
	branch CZ_112 != C_110 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6F8:
	Mem125[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_119 = rax_11 + 0x0000000000000004
// DataOut: fs r10 r11 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_119
	Mem43[0x000000000061A648:word64] = rbx_119
	return
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx

fn000000000040D6A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r11 r15 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_16 = 0x0000000000000007
	word64 rdi_15 = fp - 0x0000000000000048
// DataOut: ebx esi fs r11 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_16 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r11 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r11 r15 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

l000000000040D759:
	Mem26[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem29[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem32[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem35[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem38[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem41[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem44[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem18[rdi_15:word64] = 0x0000000000000000
	rdi_15 = rdi_15 + 0x0000000000000008
	rcx_16 = rcx_16 - 0x0000000000000001
// DataOut: ebx esi fs r11 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, word64 r13, word64 r15, selector fs, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r13 r15 r8 rdi
// LiveOut: r10 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn000000000040D7B0_entry:
	*r10Out = r10
// DataOut: ebx esi fs r10 r13 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 rax_24 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word32 r12d_11 = (word32) (uint64) esi
	word64 rbx_100 = rax_24
	branch rax_24 == rdi l000000000040D7E8
// DataOut: fs r10 r12d r13 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7E8:
	word64 r10_55
	word64 rax_56 = fn0000000000411900(rdi, rdi, r8, r13, r15, fs, out r10_55)
	byte dl_62 = (byte) (uint64) ((word32) Mem0[rax_56:byte] & 0xFFFFFFDF)
	branch dl_62 != 0x55 l000000000040D850
// DataOut: dl fs r10 r12d r15 r8 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D850:
	branch dl_62 != 0x47 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_56 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D861:
	branch Mem0[rax_56 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D867:
	branch Mem0[rax_56 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D86D:
	branch Mem0[rax_56 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D873:
	branch Mem0[rax_56 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D879:
	branch Mem0[rax_56 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D87F:
	branch Mem0[rax_56 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D885:
	rbx_100 = 0x0000000000415FED
	branch Mem0[rdi:byte] == 0x60 l000000000040D89B
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D897_1:
	rbx_100 = 0x0000000000415FE8
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D89B:
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_56 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_56 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D810:
	branch Mem0[rax_56 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D816:
	branch Mem0[rax_56 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D81C:
	branch Mem0[rax_56 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D838:
	rbx_100 = 0x0000000000415FEB
	branch r12d_11 == 0x00000007 l000000000040D84A
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D846_1:
	rbx_100 = 0x0000000000416DEA
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D84A:
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D822:
	rbx_100 = 0x0000000000415FE4
	branch Mem0[rax_24:byte] != 0x60 l000000000040D833
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D82F_1:
	rbx_100 = 0x0000000000415FF1
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D833:
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7D7:
	return rbx_100
// DataOut: ebx fs r10 r15 r8 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn000000000040D7B0_exit:
// DataOut: r10 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> r12:r12 rsi:<invalid> rbp:rbp rdi:<invalid> rax:<invalid> rbx:rbx r13:r13 edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word32 r9d, selector fs, word64 qwArg08, word64 qwArg10, word64 qwArg18, ptr64 & ebpOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp edi r10 r11 r11d r12d r8 r9 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsp
// Stack args: Stack +0008(64) Stack +0010(64) Stack +0018(64)
fn000000000040D8A0_entry:
// DataOut: ebp edi fs r10 r12d r8 r8d r9b r9d rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64) Stack +0008(64) Stack +0010(64) Stack +0018(64)

l000000000040D8A0:
	word32 dwLocC4_117 = r8d
	word64 qwLoc88_114 = qwArg10
	word64 qwLoc90_115 = qwArg18
	word64 rsp_54
	word64 rcx_56
	word64 r14_57
	word32 r14d_58
	word32 r8d_59
	word64 rdx_61
	word64 r12_62
	word64 rbp_63
	word64 rbx_64
	word32 ebx_65
	word32 r9d_66
	byte SCZO_67
	word64 rax_68
	word64 rdi_69
	word32 eax_72
	byte SZO_73
	byte C_74
	byte al_75
	byte CZ_76
	word64 r11_77
	byte Z_78
	word32 edi_79
	word32 esi_80
	word64 r9_81
	word32 ebp_82
	word64 r8_83
	byte cl_84
	word32 ecx_85
	word32 r11d_86
	word32 r12d_87
	byte r12b_88
	word32 edx_89
	byte dl_90
	byte r11b_91
	word16 dx_92
	word64 r10_93
	byte dil_94
	byte sil_95
	word64 r13_1526
	selector fs_1014
	word64 r15_1048
	word64 rsi_1036
	call __ctype_get_mb_cur_max (retsize: 8; depth: 256)
		uses: C_53,dwLoc68_38,dwLocC4_37,eax_51,ebx_29,fs,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc88_42,qwLoc90_45,qwLocA0_39,qwLocD0_34,qwLocD8_36,r12,r13_17,r14_11,r14d_12,r15_6,r8d,r9d,rax_50,rbp,rbx_28,rcx,rdi,rdx,rsi,rsp_30,SZO_52
		defs: al_75,C_74,cl_84,CZ_76,dil_94,dl_90,dx_92,eax_72,ebp_82,ebx_65,ecx_85,edi_79,edx_89,esi_80,fs_71,r10_93,r11_77,r11b_91,r11d_86,r12_62,r12b_88,r12d_87,r13_60,r14_57,r14d_58,r15_55,r8_83,r8d_59,r9_81,r9d_66,rax_68,rbp_63,rbx_64,rcx_56,rdi_69,rdx_61,rsi_70,rsp_54,SCZO_67,sil_95,SZO_73,Z_78
	byte al_102 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) ebx_65 >>u 0x00000001) & 0x00000001)
	word64 rax_48 = Mem0[fs:0x00000028:word64]
	byte bLocC5_108 = al_102
	branch r14d_58 >u 0x00000008 l000000000040E280
// DataOut: edi fs r10 r13 r14d r15 r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64) Local -00D8(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D92D:
	word64 rbx_1040
	word64 r14_173
	word64 qwLoc98_175
	byte bLocD8_172
	word64 rax_109 = (uint64) r14d_58
	word64 r11_110 = rsi
	switch (r14d_58) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: edi fs r10 r11 r13 r15 r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64)

l000000000040DFE0:
	branch r14d_58 == 0x00000008 l000000000040E012
// DataOut: fs r10 r11 r13 r15 r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64)

l000000000040DFE2:
	word32 ebx_2194 = (word32) (uint64) r8d
	rsi_1036 = (uint64) ebx_2194
	word64 r10_2199
	qwLoc88_114 = fn000000000040D7B0((word32) (uint64) ebx_2194, 0x0000000000415FF5, r8_83, r13_1526, r15_1048, fs_1014, out r10_2199)
	word64 r10_2205
	rax_109 = fn000000000040D7B0((word32) rsi_1036, 0x0000000000416DEA, r8_83, r13_1526, r15_1048, fs_1014, out r10_2205)
	qwLoc90_115 = rax_109
// DataOut: fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(0) Local -00D0(64)

l000000000040E012:
	rbx_1040 = 0x0000000000000000
	branch al_102 != 0x00 l000000000040E044
// DataOut: fs r10 r11 r13 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E01B:
	word32 eax_2166 = (word32) Mem0[qwLoc88_114:byte]
	rax_109 = DPB(rax_109, eax_2166, 0) (alias)
	byte al_2168 = (byte) eax_2166
	branch al_2168 == 0x00 l000000000040E044
// DataOut: al fs r10 r11 r13 r15 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E027:
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E030:
	branch rbx_1040 >=u rsi l000000000040E038
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E035:
	Mem2192[rdi + rbx_1040:byte] = al_2168
// DataOut: fs r10 r11 r13 r15 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E038:
	rbx_1040 = rbx_1040 + 0x0000000000000001
	word32 eax_2186 = (word32) Mem0[qwLoc88_114 + rbx_1040:byte]
	rax_109 = DPB(rax_109, eax_2186, 0) (alias)
	al_2168 = (byte) eax_2186 (alias)
	branch al_2168 != 0x00 l000000000040E030
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E044:
	word32 edi_2151
	*ediOut = (word32) qwLoc90_115
	qwLoc98_175 = qwLoc90_115
	r14_173 = DPB(rax_109, strlen(qwLoc90_115), 0)
	bLocD8_172 = 0x01
	r11_110 = rsi
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF90:
	bLocC5_108 = 0x00
	bLocD8_172 = 0x01
	r14_173 = 0x0000000000000000
	qwLoc98_175 = 0x0000000000000000
	rbx_1040 = 0x0000000000000000
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DFB0:
	bLocC5_108 = 0x01
	bLocD8_172 = 0x01
	r14_173 = 0x0000000000000001
	qwLoc98_175 = 0x0000000000415FEB
	rbx_1040 = 0x0000000000000000
	dwLocC4_117 = 0x00000003
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF50:
	branch al_102 != 0x00 l000000000040E428
// DataOut: edi fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: edi fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E2B3:
	bLocD8_172 = 0x01
	r14_173 = 0x0000000000000001
	qwLoc98_175 = 0x0000000000415FEB
	rbx_1040 = 0x0000000000000001
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF64:
	Mem2092[rdi:byte] = 0x22
	bLocD8_172 = 0x01
	r14_173 = 0x0000000000000001
	qwLoc98_175 = 0x0000000000415FEB
	rbx_1040 = 0x0000000000000001
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF10:
	branch al_102 != 0x00 l000000000040E408
// DataOut: edi fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E408:
	bLocD8_172 = 0x00
	r14_173 = 0x0000000000000001
	qwLoc98_175 = 0x0000000000416DEA
	rbx_1040 = 0x0000000000000000
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: edi fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E2D1:
	bLocD8_172 = 0x00
	r14_173 = 0x0000000000000001
	qwLoc98_175 = 0x0000000000416DEA
	rbx_1040 = 0x0000000000000001
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF24:
	Mem2063[rdi:byte] = 0x27
	bLocD8_172 = 0x00
	r14_173 = 0x0000000000000001
	qwLoc98_175 = 0x0000000000416DEA
	rbx_1040 = 0x0000000000000001
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040E070:
	bLocC5_108 = 0x01
	bLocD8_172 = 0x00
	r14_173 = 0x0000000000000001
	qwLoc98_175 = 0x0000000000416DEA
	rbx_1040 = 0x0000000000000000
	dwLocC4_117 = 0x00000002
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040D940:
	bLocC5_108 = 0x00
	bLocD8_172 = 0x00
	r14_173 = 0x0000000000000000
	qwLoc98_175 = 0x0000000000000000
	rbx_1040 = 0x0000000000000000
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040D960:
	word64 rax_1033 = (uint64) ((word32) bLocD8_172 ^ 0x00000001)
	word64 r9_1985
	*r9Out = r14_173
	word64 rbp_1041 = 0x0000000000000000
	word64 r14_1047 = r11_110
	word64 r8_1021
	*r8Out = r13_1526
	byte al_243 = (byte) (uint64) ((word32) bLocC5_108 ^ 0x00000001)
	byte al_248 = (byte) rax_1033
// DataOut: edi fs r10 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D986:
	word64 rax_347
	byte al_1998 = rbp_1041 != r15_1048
	word64 rax_1914 = DPB(rax_1033, al_1998, 0)
	branch r15_1048 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al edi fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D996:
// DataOut: al edi fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9A0:
	branch al_1998 == 0x00 l000000000040DB86
// DataOut: edi fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9A8:
	byte r11b_1018
	word64 r13_1919
	word32 r11d_1921
	branch r9_1985 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx edi fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9B4:
	branch bLocD8_172 == 0x00 l000000000040E0A0
// DataOut: ecx edi fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9BF:
	rax_1914 = rbp_1041 + r9_1985
	branch r15_1048 <u rax_1914 l000000000040E0A0
// DataOut: ecx edi fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E0A0:
	r13_1919 = r8_1021 + rbp_1041
	r11d_1921 = 0x00000000 (alias)
	r11b_1018 = 0x00 (alias)
// DataOut: edi fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9CD:
	r13_1919 = r8_1021 + rbp_1041
	word32 eax_1941 = memcmp(r13_1919, qwLoc98_175, r9_1985)
	rsi_1036 = qwLoc98_175
	word32 edi_1938
	*ediOut = (word32) r13_1919
	rax_1914 = DPB(rax_1914, eax_1941, 0) (alias)
	branch eax_1941 != 0x00000000 l000000000040E0B0
// DataOut: edi fs r10 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E0B0:
	r11d_1921 = 0x00000000 (alias)
	r11b_1018 = 0x00 (alias)
// DataOut: edi fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DA05:
	branch bLocC5_108 != 0x00 l000000000040DC40
// DataOut: edi fs r10 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DA10:
	r11d_1921 = 0x00000001 (alias)
	r11b_1018 = 0x01 (alias)
// DataOut: edi fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DA20:
	word32 r12d_1044 = (word32) Mem0[r13_1919:byte]
	*r8Out = r8_1021
	*r9Out = r9_1985
	byte r12b_1045 = (byte) r12d_1044
	branch r12b_1045 >u 0x7E l000000000040DE18
// DataOut: edi fs r10 r11b r11d r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE18:
	byte dl_1372
	word32 esi_1197
	byte dl_1209
	branch true l000000000040E0C0
// DataOut: edi fs r10 r11b r11d r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E0C0:
	branch r15_1048 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r10 r11b r11d r12b r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E285:
	r15_1048 = DPB(rax_1914, strlen(r8_1021), 0)
	r11b_1018 = (byte) (uint64) r11d_1921 (alias)
// DataOut: fs r10 r11b r12b r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E0D6:
// DataOut: fs r10 r12d r13 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E11D:
	word64 rsp_1520
	word64 r15_1521
	word64 rcx_1522
	word64 r14_1523
	word32 r14d_1524
	word32 r8d_1525
	word64 rdx_1527
	word64 r12_1528
	word64 rbp_1529
	word64 rbx_1530
	word32 ebx_1531
	word32 r9d_1532
	byte SCZO_1533
	word64 rax_1534
	word32 eax_1538
	byte SZO_1539
	byte C_1540
	byte al_1541
	byte CZ_1542
	word64 r11_1543
	byte Z_1544
	word32 edi_1545
	word64 r9_1547
	word32 ebp_1548
	word64 r8_1549
	byte cl_1550
	word32 ecx_1551
	word32 r11d_1552
	word32 r12d_1553
	byte r12b_1554
	word32 edx_1555
	byte dl_1556
	byte r11b_1557
	word16 dx_1558
	word64 r10_1559
	byte dil_1560
	byte sil_1561
	word64 rdi_1535
	call mbrtowc (retsize: 8; depth: 256)
		uses: al_1505,bLoc61_1497,bLoc62_1488,bLoc63_251,bLoc68,bLocC0_244,bLocC5_185,bLocD8_221,C_1486,cl_685,CZ_769,dil_1510,dl_1516,dwLoc68_38,dwLocA8_742,dwLocB0_1472,dwLocB8_643,dwLocC4_184,dx_1517,eax_1504,ebp_674,ebx_1491,ecx_687,edi_1509,edx_1515,esi_646,fs_644,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_1471,qwLoc60_1489,qwLoc70_1493,qwLoc78_1487,qwLoc80_96,qwLoc88_181,qwLoc90_182,qwLoc98_222,qwLocA0_39,qwLocA8_1498,qwLocB0_1492,qwLocB8_1500,qwLocC0_183,qwLocD0_34,qwLocD8_180,qwLocE8_206,qwLocF0_207,qwLocF8_205,r10_656,r11_1480,r11b_1474,r11d_1473,r12_1494,r12b_1496,r12d_1495,r13_1502,r14_1511,r14d_1512,r15_1513,r8_1478,r8d_1475,r9_1479,r9d_1477,rax_1503,rbp_673,rbx_1501,rcx_1507,rdi_1508,rdx_1514,rsi_1519,rsp_681,SCZO_1518,sil_645,SZO_1485,Z_1470
		defs: al_1541,C_1540,cl_1550,CZ_1542,dil_1560,dl_1556,dx_1558,eax_1538,ebp_1548,ebx_1531,ecx_1551,edi_1545,edx_1555,esi_1546,fs_1537,r10_1559,r11_1543,r11b_1557,r11d_1552,r12_1528,r12b_1554,r12d_1553,r13_1526,r14_1523,r14d_1524,r15_1521,r8_1549,r8d_1525,r9_1547,r9d_1532,rax_1534,rbp_1529,rbx_1530,rcx_1522,rdi_1535,rdx_1527,rsi_1536,rsp_1520,SCZO_1533,sil_1561,SZO_1539,Z_1544
	branch rax_1534 == 0x0000000000000000 l000000000040E30E
// DataOut: eax edi fs r10 r12d r13 r14 r15 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E30E:
	r12d_1044 = (word32) r12b_1045
	rax_1033 = rbx_1530
	r11b_1018 = (byte) (word32) r11b_1018 (alias)
	*r8Out = r13_1526
	r12b_1045 = (byte) r12d_1044 (alias)
	dl_1372 = (byte) (uint64) ((word32) (uint64) r12d_1553 ^ 0x00000001) (alias)
// DataOut: dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E157:
	branch rax_1534 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: eax edi fs r10 r12d r13 r14 r15 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E350:
	r12d_1044 = (word32) r12b_1045
	rax_1033 = rbx_1530
	r12b_1045 = (byte) r12d_1044 (alias)
	r11b_1018 = (byte) (word32) r11b_1018 (alias)
	*r8Out = r13_1526
	dl_1372 = 0x01 (alias)
// DataOut: dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E161:
	branch rax_1534 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: eax edi fs r10 r12d r13 r14 r15 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E391:
	r12d_1044 = (word32) r12b_1045
	word64 r10_1801
	*r10Out = r15_1521
	rsi_1036 = r14_1523
	rax_1033 = rbx_1530
	*r8Out = r13_1526
	r12b_1045 = (byte) r12d_1044 (alias)
	r11b_1018 = (byte) (word32) r11b_1018 (alias)
	branch r15_1048 <=u r14_1523 l000000000040E3FE
// DataOut: edi fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3DB:
	branch Mem0[rdx_1527:byte] != 0x00 l000000000040E3F0
// DataOut: edi fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3F0:
	rax_1033 = rax_1033 + 0x0000000000000001
	branch r15_1048 >u rbp_1041 + rax_1033 l000000000040E3E8
// DataOut: edi fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3E8:
	branch Mem0[r13_1919 + rax_1033:byte] == 0x00 l000000000040E3FE
// DataOut: edi fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3E1:
// DataOut: edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3FE:
	dl_1372 = 0x01 (alias)
// DataOut: dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E16B:
	branch bLocC5_108 == 0x00 l000000000040E1BF
// DataOut: eax fs r10 r12d r13 r15 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E172:
	branch dwLocC4_117 != 0x00000002 l000000000040E1BF
// DataOut: eax fs r10 r12d r13 r15 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E179:
	branch rax_1534 == 0x0000000000000001 l000000000040E1BF
// DataOut: eax fs r10 r12d r13 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E17F:
	word64 rdx_1757 = 0x0000000000000001
// DataOut: eax fs r10 r12d r13 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E190:
	rdi_1535 = DPB(rdi_1535, (word32) Mem0[r15_1521 + rdx_1757:byte], 0) (alias)
	byte cl_1777 = (byte) (rdi_1535 - 0x000000000000005B)
	branch cl_1777 >u 0x21 l000000000040E1B6
// DataOut: cl eax fs r10 r12d r13 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E19D:
	rdi_1535 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1777 & 0x000000000000002B) != 0x0000000000000000 l000000000040E260
// DataOut: eax fs r10 r12d r13 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E260:
	r11_110 = r14_1047
// DataOut: fs r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:0x000000000000002B edi:0x0000002B ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(64) Local -00C5(32) Local -00D0(64)

l000000000040E1B6:
	rdx_1757 = rdx_1757 + 0x0000000000000001
	branch rdx_1757 != rax_1534 l000000000040E190
// DataOut: eax fs r10 r12d r13 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1BF:
	word64 rsp_1623
	word64 r15_1624
	word64 rcx_1625
	word64 r14_1626
	word32 r14d_1627
	word32 r8d_1628
	word64 r13_1629
	word64 rdx_1630
	word64 r12_1631
	word64 rbp_1632
	word64 rbx_1633
	word32 ebx_1634
	word32 r9d_1635
	byte SCZO_1636
	word64 rax_1637
	word64 rdi_1638
	word64 rsi_1639
	selector fs_1640
	word32 eax_1641
	byte SZO_1642
	byte C_1643
	byte al_1644
	byte CZ_1645
	word64 r11_1646
	byte Z_1647
	word32 edi_1648
	word32 esi_1649
	word64 r9_1650
	word32 ebp_1651
	word64 r8_1652
	byte cl_1653
	word32 ecx_1654
	word32 r11d_1655
	word32 r12d_1656
	byte r12b_1657
	word32 edx_1658
	byte dl_1659
	byte r11b_1660
	word16 dx_1661
	word64 r10_1662
	byte dil_1663
	byte sil_1664
	call iswprint (retsize: 8; depth: 256)
		uses: al_1541,bLoc61_1497,bLoc62_1488,bLoc63_251,bLoc68,bLocC0_244,bLocC5_185,bLocD8_221,C_1564,cl_1550,CZ_1542,dil_1560,dl_1556,dwLoc4C,dwLoc68_38,dwLocA8_742,dwLocB0_1472,dwLocB8_643,dwLocC4_184,dx_1558,eax_1538,ebp_1566,ebx_1531,ecx_1551,edi_1545,edx_1555,esi_1546,fs_1537,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_1471,qwLoc60_1489,qwLoc70_1493,qwLoc78_1487,qwLoc80_96,qwLoc88_181,qwLoc90_182,qwLoc98_222,qwLocA0_39,qwLocA8_1498,qwLocB0_1492,qwLocB8_1500,qwLocC0_183,qwLocD0_34,qwLocD8_180,qwLocE8_206,qwLocF0_207,qwLocF8_205,r10_1559,r11_1543,r11b_1557,r11d_1552,r12_1528,r12b_1554,r12d_1553,r13_1526,r14_1523,r14d_1524,r15_1521,r8_1549,r8d_1525,r9_1547,r9d_1532,rax_1534,rbp_1565,rbx_1530,rcx_1522,rdi_1622,rdx_1527,rsi_1536,rsp_1520,SCZO_1619,sil_1561,SZO_1562,Z_1620
		defs: al_1644,C_1643,cl_1653,CZ_1645,dil_1663,dl_1659,dx_1661,eax_1641,ebp_1651,ebx_1634,ecx_1654,edi_1648,edx_1658,esi_1649,fs_1640,r10_1662,r11_1646,r11b_1660,r11d_1655,r12_1631,r12b_1657,r12d_1656,r13_1629,r14_1626,r14d_1627,r15_1624,r8_1652,r8d_1628,r9_1650,r9d_1635,rax_1637,rbp_1632,rbx_1633,rcx_1625,rdi_1638,rdx_1630,rsi_1639,rsp_1623,SCZO_1636,sil_1664,SZO_1642,Z_1647
	branch eax_1641 != 0x00000000 l000000000040E1DE
// DataOut: edi fs r10 r12d r13 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1DA_1:
// DataOut: edi fs r10 r12d r13 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000000 r11:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1DE:
	word64 rsp_1675
	word64 r15_1676
	word64 rcx_1677
	word64 r14_1678
	word32 r14d_1679
	word32 r8d_1680
	word64 r13_1681
	word64 rdx_1682
	word64 r12_1683
	word64 rbp_1684
	word64 rbx_1685
	word32 ebx_1686
	word32 r9d_1687
	byte SCZO_1688
	word64 rax_1689
	word64 rdi_1690
	word64 rsi_1691
	word32 eax_1693
	byte SZO_1694
	byte C_1695
	byte al_1696
	byte CZ_1697
	word64 r11_1698
	byte Z_1699
	word32 edi_1700
	word32 esi_1701
	word64 r9_1702
	word32 ebp_1703
	word64 r8_1704
	byte cl_1705
	word32 ecx_1706
	word32 r11d_1707
	word32 r12d_1708
	byte r12b_1709
	word32 edx_1710
	byte dl_1711
	byte r11b_1712
	word16 dx_1713
	word64 r10_1714
	byte dil_1715
	byte sil_1716
	call mbsinit (retsize: 8; depth: 256)
		uses: al_1644,bLoc61_1497,bLoc62_1488,bLoc63_251,bLoc68,bLocC0_244,bLocC5_185,bLocD8_221,C_1670,cl_1653,CZ_1645,dil_1667,dl_1659,dwLoc4C,dwLoc68_38,dwLocA8_742,dwLocB0_1472,dwLocB8_643,dwLocC4_184,dx_1661,eax_1641,ebp_1651,ebx_1673,ecx_1654,edi_1666,edx_1658,esi_1649,fs_1640,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_1471,qwLoc60_1489,qwLoc70_1493,qwLoc78_1487,qwLoc80_96,qwLoc88_181,qwLoc90_182,qwLoc98_222,qwLocA0_39,qwLocA8_1498,qwLocB0_1492,qwLocB8_1500,qwLocC0_183,qwLocD0_34,qwLocD8_180,qwLocE8_206,qwLocF0_207,qwLocF8_205,r10_1662,r11_1646,r11b_1660,r11d_1655,r12_1631,r12b_1657,r12d_1656,r13_1629,r14_1626,r14d_1627,r15_1624,r8_1652,r8d_1628,r9_1650,r9d_1635,rax_1671,rbp_1632,rbx_1672,rcx_1625,rdi_1665,rdx_1630,rsi_1639,rsp_1623,SCZO_1674,sil_1664,SZO_1668,Z_1669
		defs: al_1696,C_1695,cl_1705,CZ_1697,dil_1715,dl_1711,dx_1713,eax_1693,ebp_1703,ebx_1686,ecx_1706,edi_1700,edx_1710,esi_1701,fs_1692,r10_1714,r11_1698,r11b_1712,r11d_1707,r12_1683,r12b_1709,r12d_1708,r13_1681,r14_1678,r14d_1679,r15_1676,r8_1704,r8d_1680,r9_1702,r9d_1687,rax_1689,rbp_1684,rbx_1685,rcx_1677,rdi_1690,rdx_1682,rsi_1691,rsp_1675,SCZO_1688,sil_1716,SZO_1694,Z_1699
	branch 0x00000000 == 0x00000000 l000000000040E11D
// DataOut: edi fs r10 r12d r13 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000000 r11:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1EE:
	rsi_1036 = (uint64) r12d_1708
	r12d_1044 = (word32) r12b_1045
	esi_1197 = (word32) rsi_1036 (alias)
	r11b_1018 = (byte) (word32) r11b_1018 (alias)
	r12b_1045 = (byte) r12d_1044 (alias)
	rax_1033 = rbx_1685
	*r8Out = r13_1681
	dl_1372 = (byte) (uint64) ((word32) (uint64) esi_1197 ^ 0x00000001) (alias)
// DataOut: dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E22D:
	branch rax_1033 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E237:
	dl_1209 = dl_1372 & bLocD8_172
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DE24:
	word64 rsp_1402
	word64 rcx_1404
	word32 r14d_1406
	word32 r8d_1407
	word64 r13_1408
	word64 rdx_1409
	word64 r12_1410
	word32 ebx_1413
	word32 r9d_1414
	byte SCZO_1415
	word64 rax_1416
	word64 rdi_1417
	word32 eax_1420
	byte SZO_1421
	byte C_1422
	byte al_1423
	byte CZ_1424
	word64 r11_1425
	byte Z_1426
	word32 edi_1427
	word64 r9_1429
	word32 ebp_1430
	word64 r8_1431
	byte cl_1432
	word32 ecx_1433
	word32 r11d_1434
	word32 edx_1437
	byte dl_1438
	byte r11b_1439
	word16 dx_1440
	word64 r10_1441
	byte dil_1442
	byte sil_1443
	call __ctype_b_loc (retsize: 8; depth: 256)
		uses: al_759,bLoc61_639,bLoc62_636,bLoc63_251,bLoc68,bLocC0_244,bLocC5_185,bLocD8_221,C_763,cl_685,CZ_769,dil_749,dl_662,dwLoc68_38,dwLocA8_742,dwLocB0_634,dwLocB8_1401,dwLocC4_184,dx_663,eax_758,ebp_674,ebx_670,ecx_687,edi_751,edx_661,esi_646,fs_644,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_633,qwLoc60_637,qwLoc70_638,qwLoc78_635,qwLoc80_96,qwLoc88_181,qwLoc90_182,qwLoc98_222,qwLocA0_39,qwLocA8_1399,qwLocB0_1400,qwLocB8_743,qwLocC0_183,qwLocD0_34,qwLocD8_180,qwLocE8_206,qwLocF0_207,qwLocF8_205,r10_656,r11_754,r11b_746,r11d_745,r12_766,r12b_767,r12d_765,r13_764,r14_679,r14d_669,r15_680,r8_752,r8d_747,r9_753,r9d_750,rax_757,rbp_673,rbx_672,rcx_755,rdi_748,rdx_756,rsi_760,rsp_681,SCZO_1182,sil_645,SZO_762,Z_1183
		defs: al_1423,C_1422,cl_1432,CZ_1424,dil_1442,dl_1438,dx_1440,eax_1420,ebp_1430,ebx_1413,ecx_1433,edi_1427,edx_1437,esi_1428,fs_1419,r10_1441,r11_1425,r11b_1439,r11d_1434,r12_1410,r12b_1436,r12d_1435,r13_1408,r14_1405,r14d_1406,r15_1403,r8_1431,r8d_1407,r9_1429,r9d_1414,rax_1416,rbp_1411,rbx_1412,rcx_1404,rdi_1417,rdx_1409,rsi_1418,rsp_1402,SCZO_1415,sil_1443,SZO_1421,Z_1426
	word32 edx_1454 = (word32) Mem0[Mem0[rax_1416:word64] + DPB(rdx_1409, (word32) r12b_1045, 0) * 0x0000000000000002:word16]
	r11b_1018 = (byte) (uint64) r11d_1921 (alias)
	*r8Out = r8_1021
	rax_1033 = 0x0000000000000001
	dl_1372 = (byte) (uint64) ((word32) (uint64) (DPB(edx_1454, (word16) edx_1454 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001) (alias)
// DataOut: dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DE61:
	dl_1209 = dl_1372 & bLocD8_172
	branch dl_1209 == 0x00 l000000000040DAF8
// DataOut: dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DE6B:
	word32 edi_1233 = (word32) bLocC5_108
	*ediOut = edi_1233
	rax_1033 = rax_1033 + rbp_1041
	byte dil_1235 = (byte) edi_1233
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DEF0:
	branch dl_1209 != 0x00 l000000000040DE80
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DE80:
	branch dil_1235 != 0x00 l000000000040DC40
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DE89:
	branch rbx_1040 >=u r14_1047 l000000000040DE92
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE8E:
	Mem1341[rdi + rbx_1040:byte] = 0x5C
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE92:
	branch r14_1047 <=u rbx_1040 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE9B:
	word64 rsi_1336 = (uint64) (DPB(esi_1197, (byte) (uint64) r12d_1044 >>u 0x06, 0) + 0x00000030)
	Mem1340[rdi + 0x0000000000000001 + rbx_1040:byte] = (byte) rsi_1336
	esi_1197 = (word32) rsi_1336 (alias)
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEAA:
	rsi_1036 = rbx_1040 + 0x0000000000000002
	branch r14_1047 <=u rsi_1036 l000000000040DEC5
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEB3:
	rsi_1036 = (uint64) ((word32) (uint64) (DPB(esi_1197, (byte) (uint64) r12d_1044 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem1331[rdi + 0x0000000000000002 + rbx_1040:byte] = (byte) rsi_1036
	esi_1197 = (word32) rsi_1036 (alias)
// DataOut: dil dl edi fs r10 r11b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEC5:
	rbx_1040 = rbx_1040 + 0x0000000000000003
	r12b_1045 = (byte) (uint64) ((word32) (uint64) (r12d_1044 & 0x00000007) + 0x00000030) (alias)
// DataOut: dil dl edi fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF4:
	branch r11b_1018 == 0x00 l000000000040DED1
// DataOut: dil dl edi fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF9:
	branch rbx_1040 >=u r14_1047 l000000000040DF02
// DataOut: dil dl edi fs r10 r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEFE:
	Mem1296[rdi + rbx_1040:byte] = 0x5C
// DataOut: dil dl edi fs r10 r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DF02:
	rbx_1040 = rbx_1040 + 0x0000000000000001
	r11b_1018 = 0x00 (alias)
// DataOut: dil dl edi fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DED1:
	rbp_1041 = rbp_1041 + 0x0000000000000001
	branch rax_1033 <=u rbp_1041 l000000000040DB54
// DataOut: dil dl edi fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEDE:
	branch rbx_1040 >=u r14_1047 l000000000040DEE7
// DataOut: dil dl edi fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DEE3:
	Mem1283[rdi + rbx_1040:byte] = r12b_1045
// DataOut: dil dl edi fs r10 r11b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DEE7:
	r12d_1044 = (word32) Mem0[r8_1021 + rbp_1041:byte]
	r12b_1045 = (byte) r12d_1044 (alias)
	rbx_1040 = rbx_1040 + 0x0000000000000001
// DataOut: dil dl edi fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DA2F:
	rax_1033 = DPB(rax_1914, (word32) r12b_1045, 0) (alias)
	switch (rax_1033) { l000000000040DD20 }
// DataOut: edi fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD20:
	branch bLocD8_172 == 0x00 l000000000040E240
// DataOut: edi fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E240:
	branch (bLoc68 & 0x01) == 0x00 l000000000040DAF8
// DataOut: edi fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DAF8:
	branch al_243 == 0x00 l000000000040DB09
// DataOut: edi fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DAFF:
	branch al_248 != 0x00 l000000000040DB2E
// DataOut: edi fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E24E:
	rbp_1041 = rbp_1041 + 0x0000000000000001
// DataOut: edi fs r10 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD2B:
	branch bLocC5_108 != 0x00 l000000000040DC40
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DD36:
	branch rbx_1040 >=u r14_1047 l000000000040DD44
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD3B:
	Mem1174[rdi + rbx_1040:byte] = 0x5C
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD44:
	rax_1033 = rbx_1040 + 0x0000000000000001
	branch r15_1048 <=u rbp_1041 + 0x0000000000000001 l000000000040DD80
// DataOut: fs r10 r11b r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD51:
	rsi_1036 = DPB(rsi_1036, (word32) Mem0[r8_1021 + 0x0000000000000001 + rbp_1041:byte], 0) (alias)
	branch (byte) (rsi_1036 - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: fs r10 r11b r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD5F:
	branch r14_1047 >u rax_1033 l000000000040E300
// DataOut: fs r10 r11b r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E300:
	Mem1172[rdi + rax_1033:byte] = 0x30
	rsi_1036 = rdi
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD68:
	branch r14_1047 <=u rbx_1040 + 0x0000000000000002 l000000000040DD7B
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD71:
	Mem1170[rdi + 0x0000000000000002 + rbx_1040:byte] = 0x30
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD7B:
	rax_1033 = rbx_1040 + 0x0000000000000003
// DataOut: fs r10 r11b r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD80:
	rbx_1040 = rax_1033
	r12d_1044 = 0x00000030 (alias)
	r12b_1045 = 0x30 (alias)
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB09:
	word32 edi_1051
	*ediOut = (word32) qwArg08
	branch qwArg08 == 0x0000000000000000 l000000000040DB2E
// DataOut: edi fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB13:
	word64 rdx_1056 = (uint64) r12d_1044
	rax_1033 = (uint64) (0x00000001 << (byte) ((uint64) ((word32) ((uint64) r12d_1044) & 0x0000001F)))
	branch (Mem0[qwArg08 + DPB(rdx_1056, (word32) ((byte) rdx_1056 >>u 0x05), 0) * 0x0000000000000004:word32] & (word32) rax_1033) != 0x00000000 l000000000040DB33
// DataOut: edi fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB2E:
	branch r11b_1018 == 0x00 l000000000040DB50
// DataOut: edi fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB33:
	branch bLocC5_108 != 0x00 l000000000040DC40
// DataOut: edi fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DC40:
	r11_110 = r14_1047
	r13_1526 = r8_1021
// DataOut: fs r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(64) Local -00C5(32) Local -00D0(64)

l000000000040DB3E:
	branch rbx_1040 >=u r14_1047 l000000000040DB4C
// DataOut: edi fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB43:
	Mem949[rdi + rbx_1040:byte] = 0x5C
	rax_1033 = rdi
// DataOut: edi fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB4C:
	rbx_1040 = rbx_1040 + 0x0000000000000001
// DataOut: edi fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB50:
	rbp_1041 = rbp_1041 + 0x0000000000000001
// DataOut: edi fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB54:
	*r9Out = r9_1985
	branch rbx_1040 >=u r14_1047 l000000000040DB62
// DataOut: edi fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB59:
	Mem834[rdi + rbx_1040:byte] = r12b_1045
	rax_1033 = rdi
// DataOut: edi fs r10 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB62:
	al_1998 = rbp_1041 != r15_1048
	rbx_1040 = rbx_1040 + 0x0000000000000001
	rax_1914 = DPB(rax_1033, al_1998, 0) (alias)
	branch r15_1048 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al edi fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB76:
	byte al_626 = Mem0[r8_1021 + rbp_1041:byte] != 0x00
	rax_1914 = DPB(rax_1914, al_626, 0) (alias)
	branch al_626 != 0x00 l000000000040D9A8
// DataOut: edi fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB86:
	r11_110 = r14_1047
	*r11Out = r11_110
	r13_1526 = r8_1021
	branch rbx_1040 != 0x0000000000000000 l000000000040DBA3
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(0) Local -00D0(64)

l000000000040DB91:
	branch dwLocC4_117 != 0x00000002 l000000000040DBA3
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(64) Local -00C5(0) Local -00D0(64)

l000000000040DB98:
	branch bLocC5_108 != 0x00 l000000000040DC46
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(64) Local -00C5(0) Local -00D0(64)

l000000000040DC46:
	word32 ebp_447
	word32 edi_448
	word64 r8_449
	word64 r9_450
	word64 r10_451
	word32 r12d_453
	rax_347 = fn000000000040D8A0(r15_1048, r13_1526, r11_110, rdi, (uint64) dwLocC4_117, (word32) (uint64) ((word32) (uint64) r9d & 0xFFFFFFFD), fs_1014, 0x0000000000000000, qwLoc88_114, qwLoc90_115, out ebp_447, out edi_448, out r8_449, out r9_450, out r10_451, out r11_110, out r12d_453)
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> cl:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBA3:
	branch bLocC5_108 != 0x00 l000000000040DBE4
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBAA:
	branch qwLoc98_175 == 0x0000000000000000 l000000000040DBE4
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBB2:
	byte al_540 = (byte) (word32) Mem0[qwLoc98_175:byte]
	branch al_540 == 0x00 l000000000040DBE4
// DataOut: al edi fs r10 r11 r11d r13 r15 r8 r9 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBBE:
	word64 rdx_547 = qwLoc98_175 - rbx_1040
// DataOut: al edi fs r10 r11 r11d r13 r15 r8 r9 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBD0:
	branch r14_1047 <=u rbx_1040 l000000000040DBD8
// DataOut: al edi fs r10 r11 r11d r13 r15 r8 r9 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBD5:
	Mem570[rdi + rbx_1040:byte] = al_540
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBD8:
	rbx_1040 = rbx_1040 + 0x0000000000000001
	al_540 = (byte) (word32) Mem0[rdx_547 + rbx_1040:byte] (alias)
	branch al_540 != 0x00 l000000000040DBD0
// DataOut: al edi fs r10 r11 r11d r13 r15 r8 r9 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBE4:
	rax_347 = rbx_1040
	branch rbx_1040 >=u r14_1047 l000000000040DC86
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DBF0:
	Mem531[rdi + rbx_1040:byte] = 0x00
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040DC86:
	rsi_1036 = rax_48 ^ Mem0[fs_1014:0x00000028:word64]
	branch rsi_1036 != 0x0000000000000000 l000000000040E423
// DataOut: edi fs r10 r11 r11d r13 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E423:
	__stack_chk_fail()
// DataOut: edi fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E428:
	bLocD8_172 = 0x01
	r14_173 = 0x0000000000000001
	qwLoc98_175 = 0x0000000000415FEB
	rbx_1040 = 0x0000000000000000
// DataOut: edi fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DC9D:
	word32 ebp_373
	*ebpOut = (word32) rbp
	word32 r12d_376
	*r12dOut = (word32) r12
	return rax_347
// DataOut: ebp edi fs r10 r11 r11d r12d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D8A0_exit:
// DataOut: ebp edi r10 r11 r11d r12d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r13:r13 rbx:rbx rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:rbp r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:r12 cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E450(word64 rcx, word64 rdx, word32 edi, word64 r11, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12bOut, ptr64 & r13dOut, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r15 rcx rdx
// LiveOut: ebx r10 r11 r12b r13d r15b r8 r9 rax
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040E450_entry:
// DataOut: edi fs r11 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E450:
	word64 r15_6 = (int64) edi
	__errno_location()
	word32 r15d_7 = (word32) r15_6
	word64 r12_194 = Mem0[0x000000000061A5D8:word64]
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0008(0)

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E48C:
	branch r15d_7 <u Mem0[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E495:
	word64 r14_184 = (uint64) (rdi + 0x0000000000000001)
	branch r12_194 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E5E0:
	word64 r8_222
	word64 rax_223 = fn0000000000410C90(rdx, r14_184 << 0x0000000000000004, r12_194, out r8_222)
	Mem227[0x000000000061A5D8:word64] = rax_223
	r12_194 = rax_223
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E4B0:
	word64 r8_211
	word64 rax_212 = fn0000000000410C90(rdx, r14_184 << 0x0000000000000004, 0x0000000000000000, out r8_211)
	word64 rsi_213 = Mem0[0x000000000061A5E0:word64]
	word64 rdi_214 = Mem0[0x000000000061A5E8:word64]
	Mem218[0x000000000061A5D8:word64] = rax_212
	Mem219[rax_212:word64] = rsi_213
	Mem220[rax_212 + 0x0000000000000008:word64] = rdi_214
	r12_194 = rax_212
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E4D6:
	word64 rdi_197 = (uint64) Mem0[0x000000000061A5F0:word32]
	memset((rdi_197 << 0x0000000000000004) + r12_194, 0x0000000000000000, r14_184 - rdi_197 << 0x0000000000000004)
	Mem206[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E4FA:
	word64 r12_55 = r12_194 + (r15_6 << 0x0000000000000004)
	word32 ebp_54 = (word32) (uint64) Mem0[rcx + 0x0000000000000004:word32]
	word64 r8_59 = (uint64) Mem0[r11:word32]
	word64 r11_63 = Mem0[r12_55:word64]
	word64 r14_110 = Mem0[r12_55 + 0x0000000000000008:word64]
	Mem65[fp - 0x0000000000000068:word64] = Mem0[rcx + 0x0000000000000030:word64]
	word64 rax_66 = Mem65[rcx + 0x0000000000000028:word64]
	word64 rcx_71 = Mem65[fp - 0x0000000000000050:word64]
	word64 rdx_72 = Mem65[fp - 0x0000000000000058:word64]
	Mem76[fp - 0x0000000000000078:word64] = r11 + 0x0000000000000008
	Mem79[fp - 0x0000000000000070:word64] = rax_66
	Mem80[fp - 0x0000000000000040:word64] = r11_63
	word64 rbp_67 = (uint64) (ebp_54 | 0x00000001)
	word32 ebp_85
	word32 edi_86
	word64 r8_87
	word64 r9_88
	word64 r10_89
	word64 r11_90
	word32 r12d_91
	word64 rax_92 = fn000000000040D8A0(rcx_71, rdx_72, r11_63, r14_110, r8_59, (word32) (uint64) (word32) rbp_67, fs, qwArg00, qwArg08, qwArg10, out ebp_85, out edi_86, out r8_87, out r9_88, out r10_89, out r11_90, out r12d_91)
	word64 r11_94 = Mem80[fp - 0x0000000000000040:word64]
	*r11Out = r11_94
	branch r11_94 >u rax_92 l000000000040E5BF
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E554:
	Mem148[r12_55:word64] = rax_92 + 0x0000000000000001
	word64 rsi_144 = rax_92 + 0x0000000000000001
	branch r14_110 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:r11 + 0x0000000000000008 rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E565:
	Mem178[fp - 0x0000000000000040:word64] = rax_92 + 0x0000000000000001
	free(r14_110)
	rsi_144 = Mem178[fp - 0x0000000000000040:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:r11 + 0x0000000000000008 rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E577:
	Mem152[fp - 0x0000000000000040:word64] = rsi_144
	word64 rax_153 = fn0000000000410C40(rsi_144, rsi_144)
	Mem154[r12_55 + 0x0000000000000008:word64] = rax_153
	word64 r8_157 = (uint64) Mem154[r11_94:word32]
	word64 rcx_158 = Mem154[fp - 0x0000000000000050:word64]
	word64 rdx_161 = Mem154[fp - 0x0000000000000058:word64]
	word64 rsi_162 = Mem154[fp - 0x0000000000000040:word64]
	Mem165[fp - 0x0000000000000068:word64] = Mem154[rcx + 0x0000000000000030:word64]
	word64 rax_166 = Mem165[rcx + 0x0000000000000028:word64]
	Mem167[fp - 0x0000000000000078:word64] = r11 + 0x0000000000000008
	Mem168[fp - 0x0000000000000070:word64] = rax_166
	word32 ebp_169
	word32 edi_170
	word64 r8_171
	word64 r9_172
	word64 r10_173
	word64 r11_174
	word32 r12d_175
	fn000000000040D8A0(rcx_158, rdx_161, rsi_162, rax_153, r8_157, (word32) (uint64) ebp_85, fs, qwArg00, qwArg08, qwArg10, out ebp_169, out edi_170, out r8_171, out r9_172, out r10_173, out r11_174, out r12d_175)
	r14_110 = rax_153
// DataOut: fs r10 r11 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:r11 + 0x0000000000000008 rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E5BF:
	Mem113[rbp_67:word32] = (word32) (uint64) Mem80[fp - 0x0000000000000044:word32]
	word32 ebx_119
	*ebxOut = (word32) Mem113[fp - 0x0000000000000030:word64]
	byte r12b_124
	*r12bOut = (byte) Mem113[fp - 0x0000000000000020:word64]
	word32 r13d_128
	*r13dOut = (word32) Mem113[fp - 0x0000000000000018:word64]
	byte r15b_134
	*r15bOut = (byte) Mem113[fp - 0x0000000000000008:word64]
	return r14_110
// DataOut: ebx fs r10 r11 r12b r13d r15b r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:r11 + 0x0000000000000008 rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040E450_exit:
// DataOut: ebx r10 r11 r12b r13d r15b r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E600(word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040E600_entry:
// DataOut: ebx fs r10 r11 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word32 r12d_17 = (word32) (uint64) Mem0[r8:word32]
	word64 rdi_21 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: fs r10 r11 r12d r13b r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l000000000040E61A_1:
	rdi_21 = rdi
// DataOut: fs r10 r11 r12d r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l000000000040E61E:
	word64 rdi_27
	word64 rax_28 = fn0000000000410E00(0x0000000000000038, rdi_21, out rdi_27)
	Mem29[r11:word32] = r12d_17
	return rax_28
// DataOut: ebx fs r10 r11 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040E600_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rax:<invalid> r12:r12 rdi:<invalid> rbx:rbx rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
	rax_12 = rdi
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return (word32) (uint64) Mem0[rax_12:word32]
// DataOut: eax ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: ebx esi fs r10 r11 r15 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: ebx esi fs r10 r11 r15 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: ebx esi fs r10 r11 r15 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: ebx edx esi fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl ebx edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl ebx edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_25 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem42[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_25) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_25)
	return rsi_20
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rcx rdi rdx rsi
// LiveOut: edi r10 r11 r11d r8 r9 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp
fn000000000040E6F0_entry:
// DataOut: fs r11 r14b r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	word64 rbx_28 = r8
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8)

l000000000040E712_1:
	rbx_28 = 0x000000000061B320
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8)

l000000000040E716:
	__errno_location()
	word32 ebp_59
	word32 edi_60
	word64 r8_61
	word64 r9_62
	word64 r10_63
	word64 r11_64
	word32 r12d_65
	word64 rax_66 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (uint64) Mem0[r11:word32], (word32) (uint64) Mem0[r11 + 0x0000000000000004:word32], fs, rbx_28 + 0x0000000000000008, Mem0[rbx_28 + 0x0000000000000028:word64], Mem0[rbx_28 + 0x0000000000000030:word64], out ebp_59, out edi_60, out r8_61, out r9_62, out r10_63, out r11_64, out r12d_65)
	Mem68[rsi:word32] = r12d_65
	return rax_66
// DataOut: edi fs r10 r11 r11d r14b r14d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040E6F0_exit:
// DataOut: edi r10 r11 r11d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 r14:r14 r13:r13 rbx:rbx r12:r12 rbp:rbp r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040E930(word64 r11, word64 r15, selector fs, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15
// LiveOut: ebx r10 r11 r15 r9 rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
	*r15Out = r15
	*rbpOut = rbp
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: edi fs r11 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E93F_thunk_fn000000000040E450:
	word32 ebx_14
	word64 r8_15
	word64 r9_16
	word64 r10_17
	word64 r11_18
	byte r12b_19
	word32 r13d_20
	byte r15b_21
	fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r15, fs, out ebx_14, out r8_15, out r9_16, out r10_17, out r11_18, out r12b_19, out r13d_20, out r15b_21)
	return ebx_14
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040E930_exit:
// DataOut: ebx r10 r11 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040E970(word32 esi, word32 edi, word64 r11, word64 r15, selector fs, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r15
// LiveOut: r10 r11 r15 r9 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E970_entry:
	*r15Out = r15
// DataOut: edi esi fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000058)
	word32 ebx_25
	word64 r8_26
	word64 r9_27
	word64 r10_28
	word64 r11_29
	byte r12b_30
	word32 r13d_31
	byte r15b_32
	fn000000000040E450(fp - 0x0000000000000058, 0xFFFFFFFFFFFFFFFF, (word32) (uint64) (word32) (uint64) edi, r11, r15, fs, out ebx_25, out r8_26, out r9_27, out r10_28, out r11_29, out r12b_30, out r13d_31, out r15b_32)
	return fp + 0x0000000000000008
// DataOut: fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r10 r11 r15 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn000000000040EAB0(word64 r11, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15
// LiveOut: r10 r11 r12 r12b r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040EAB0_entry:
	*r15Out = r15
	*rbpOut = rbp
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_34 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32]
	byte cl_18 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem53[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_34 >>u cl_18) ^ 0x00000001) & 0x00000001) << cl_18) ^ r9d_34)
	word32 ebx_57
	word64 r8_58
	word64 r9_59
	word64 r10_60
	word64 r11_61
	byte r12b_62
	word32 r13d_63
	byte r15b_64
	fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r15, fs, out ebx_57, out r8_58, out r9_59, out r10_60, out r11_61, out r12b_62, out r13d_63, out r15b_64)
	word64 rsp_67
	*rspOut = fp + 0x0000000000000008
	return rbx
// DataOut: fs r10 r11 r12 r12b r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: r10 r11 r12 r12b r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word32 edi, word64 r11, word64 r15, selector fs, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r15
// LiveOut: r11 r15
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
	*r15Out = r15
// DataOut: edi fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: edi fs r11 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word32 ebx_9
	word64 r8_10
	word64 r9_11
	word64 r10_12
	word64 r11_13
	byte r12b_14
	word32 r13d_15
	byte r15b_16
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, edi, r11, r15, fs, out ebx_9, out r8_10, out r9_11, out r10_12, out r11_13, out r12b_14, out r13d_15, out r15b_16)
	return r11_13
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 r11, word64 r15, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15
// LiveOut: ebx r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
	*r15Out = r15
	*rbxOut = rbx
	*rbpOut = rbp
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: edi fs r11 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC21_thunk_fn000000000040E450:
	word32 ebx_14
	word64 r8_15
	word64 r9_16
	word64 r10_17
	word64 r11_18
	byte r12b_19
	word32 r13d_20
	byte r15b_21
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r15, fs, out ebx_14, out r8_15, out r9_16, out r10_17, out r11_18, out r12b_19, out r13d_20, out r15b_21)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040EC10_exit:
// DataOut: ebx r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040EC30(word64 rax, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: r12 rbp rbx rsp
fn000000000040EC30_entry:
// DataOut: ebp fs r11 r11d r13 r14 r15b r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC30:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: fs r11 r11d r13 r14 r15b r9d rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32)

l000000000040EC40:
	word64 rsp_45
	word64 r12_46
	word64 rdx_47
	byte SZO_48
	byte C_49
	word64 rdi_51
	byte Z_53
	word64 rsi_54
	word32 ecx_55
	word64 rax_56
	word32 edx_57
	byte dl_59
	byte SCZO_60
	word64 rcx_58
	word64 rbx_52
	call __ctype_tolower_loc (retsize: 8; depth: 32)
		uses: C_8,dl,ecx,edx,qwLoc08_4,qwLoc10_11,qwLoc18_16,r12_43,rax,rbp_13,rbx_17,rcx,rdi,rdx,rsi,rsp_14,SCZO,SZO_6,Z_7
		defs: C_49,dl_59,ecx_55,edx_57,r12_46,rax_56,rbp_50,rbx_52,rcx_58,rdi_51,rdx_47,rsi_54,rsp_45,SCZO_60,SZO_48,Z_53
// DataOut: fs r11 r11d r12 r13 r14 r15b r9d rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:rdx - 0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040EC50:
	rcx_58 = DPB(rcx_58, (word32) Mem0[r12_46 + rbx_52:byte], 0) (alias)
	Mem69[rbp_13 + rbx_52:byte] = (byte) (uint64) Mem0[Mem0[rax_56:word64] + rcx_58 * 0x0000000000000004:word32]
	rbx_52 = rbx_52 - 0x0000000000000001
	branch rbx_52 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: fs r11 r11d r12 r13 r14 r15b r9d rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040EC69:
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r13 r14 r15b r9d rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040EC30_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:rdi r12:r12 ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040EC80(word64 rax, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: r12 rbp rbx rsp
fn000000000040EC80_entry:
// DataOut: ebp fs r11 r11d r13 r14 r15b r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC80:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r11d r13 r14 r15b r9d rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32)

l000000000040EC90:
	word64 rsp_45
	word64 r12_46
	word64 rdx_47
	byte SZO_48
	byte C_49
	word64 rdi_51
	byte Z_53
	word64 rsi_54
	word32 ecx_55
	word64 rax_56
	word32 edx_57
	byte dl_59
	byte SCZO_60
	word64 rcx_58
	word64 rbx_52
	call __ctype_toupper_loc (retsize: 8; depth: 32)
		uses: C_8,dl,ecx,edx,qwLoc08_4,qwLoc10_11,qwLoc18_16,r12_43,rax,rbp_13,rbx_17,rcx,rdi,rdx,rsi,rsp_14,SCZO,SZO_6,Z_7
		defs: C_49,dl_59,ecx_55,edx_57,r12_46,rax_56,rbp_50,rbx_52,rcx_58,rdi_51,rdx_47,rsi_54,rsp_45,SCZO_60,SZO_48,Z_53
// DataOut: fs r11 r11d r12 r13 r14 r15b r9d rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:rdx - 0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040ECA0:
	rcx_58 = DPB(rcx_58, (word32) Mem0[r12_46 + rbx_52:byte], 0) (alias)
	Mem69[rbp_13 + rbx_52:byte] = (byte) (uint64) Mem0[Mem0[rax_56:word64] + rcx_58 * 0x0000000000000004:word32]
	rbx_52 = rbx_52 - 0x0000000000000001
	branch rbx_52 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r11d r12 r13 r14 r15b r9d rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040ECB9:
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r13 r14 r15b r9d rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040EC80_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:rdi r12:r12 ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word32 ebp, word64 rsi, byte dil, word32 r9d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl dil ebp fs r11d r14 r15b r9d rax rcx rdx rsi
// LiveOut: r11 r11d r8 rax rdi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040ECD0_entry:
	*r8Out = r8
	*rdiOut = rdi
	*r11Out = r11
// DataOut: bpl dil ebp fs r11 r11d r14 r15b r8 r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -04E8(64)

l000000000040ECD0:
	word64 rax_1092 = Mem0[rax + 0x0000000000000030:word64]
	word64 r10_472 = rdx
	word64 r12_1076 = rsi
	word64 rbx_1005 = rcx
	word64 rsi_31 = Mem0[fs:0x00000028:word64]
	word32 esi_35 = (word32) (uint64) Mem0[rax_1092 + 0x0000000000000008:word32]
	branch esi_35 <= 0x0000000C l000000000040EEE0
// DataOut: bpl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04C8(32) Local -04E8(64) Local -04F9(32)

l000000000040EEE0:
	rax_1092 = 0x000000000000000C
	branch (word32) (uint64) esi_35 == 0x00000000 l000000000040EEEE
// DataOut: bpl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EEEB_1:
// DataOut: bpl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EEEE:
// DataOut: bpl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED26:
// DataOut: bpl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED2B:
	word64 r14_1085
	word64 rax_129
	word32 eax_51 = (word32) Mem0[rcx:byte]
	word64 rax_235 = DPB(rax_1092, eax_51, 0)
	byte al_329 = (byte) eax_51
	word64 r13_1077 = 0x0000000000000000
	branch al_329 == 0x00 l000000000040F053
// DataOut: al bpl ebp fs r10 r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1273(fp):dil -1272(fp):r8 -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED39:
	r14_1085 = rdx
	qwLoc04E8 = fp - 0x0000000000000447
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED85:
	branch al_329 != 0x25 l000000000040ED50
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED50:
	branch r14_1085 - r13_1077 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED60:
	branch r12_1076 == 0x0000000000000000 l000000000040ED6D
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED65:
	Mem1081[r12_1076:byte] = al_329
	r12_1076 = r12_1076 + 0x0000000000000001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED6D:
	r13_1077 = r13_1077 + 0x0000000000000001
	word64 r8_1080
	*r8Out = rbx_1005
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED89:
	r9d = (word32) dil
	byte r9b_1064 = (byte) r9d
	word64 r11_1068
	*r11Out = 0x0000000000000000
	r11d = 0x00000000 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r9b r9d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED94:
	rbx_1005 = rbx_1005 + 0x0000000000000001
	word32 edi_697 = (word32) Mem0[rbx_1005:byte]
	byte dil_1023 = (byte) edi_697
	rdi = DPB(rdi, edi_697, 0) (alias)
	*rdiOut = rdi
	byte SZO_1053 = cond(dil_1023 - 0x30)
	branch dil_1023 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDA1:
	branch SZO_1053 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDD0:
	branch dil_1023 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE70:
	branch dil_1023 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE7A:
	r11d = (int32) dil_1023
	*r11Out = DPB(r11_1068, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r9b r9d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDDA:
	r9d = 0x00000001 (alias)
	r9b_1064 = 0x01 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r9b r9d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDA3:
	branch dil_1023 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDE8:
	branch dil_1023 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDEE:
	word64 rdx_1026 = (uint64) ((int32) dil_1023 - 0x00000030)
	word32 ebp_1015 = 0xFFFFFFFF
	branch (word32) rdx_1026 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDFF:
	word64 rbp_1004 = 0x0000000000000000
	ebp_1015 = 0x00000000 (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ebp:0xFFFFFFFF -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE28:
	branch ebp_1015 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE08:
	word32 edx_1032 = (int32) Mem0[rbx_1005:byte]
	word64 rdx_1033 = DPB(rdx_1026, edx_1032, 0)
	byte dl_1034 = (byte) edx_1032
	branch ebp_1015 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r9b r9d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE88:
	branch dl_1034 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r9b r9d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE8D:
	rbp_1004 = 0x000000007FFFFFFF
	ebp_1015 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_1004 * 0x0000000000000005, 0) (alias)
	ebp_1015 = rdx_1033 - 0x0000000000000030 + rcx * 0x0000000000000002
	rbp_1004 = DPB(rbp_1004, ebp_1015, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE30:
	rbp_1004 = 0x000000007FFFFFFF
	ebp_1015 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE15:
	rbx_1005 = rbx_1005 + 0x0000000000000001
	word32 edi_1022 = (word32) Mem0[rbx_1005:byte]
	dil_1023 = (byte) edi_1022 (alias)
	rdx_1026 = (uint64) ((int32) dil_1023 - 0x00000030)
	rdi = DPB(rdi, edi_1022, 0) (alias)
	*rdiOut = rdi
	branch (word32) rdx_1026 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE40:
	branch dil_1023 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE4A:
	branch dil_1023 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EEC8:
	rbx_1005 = rbx_1005 + 0x0000000000000001
	word32 edi_988 = (word32) Mem0[rbx_1005:byte]
	dil_1023 = (byte) edi_988 (alias)
	*rdiOut = DPB(rdi, edi_988, 0)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE52:
	word64 r8_767
	branch dil_1023 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040FF4D:
	r8_767 = rbx_1005
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b r9d rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE60:
	switch (DPB(rdx_1026, (word32) dil_1023, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b r9d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040FEFB:
	word32 edi_979 = (word32) Mem0[rbx_1005 - 0x0000000000000001:byte]
	r8_767 = r11_1068 - 0x0000000000000001
	dil_1023 = (byte) edi_979 (alias)
	*rdiOut = DPB(rdi, edi_979, 0)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b r9d rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:(word32) dil rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F39F:
	word64 r15_777
	word64 rcx_774
	branch dil_1023 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r8 r9b r9d rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0B2:
	word64 rax_952 = r8_767 - 0x0000000000000001
	word32 ecx_958 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r9b r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0C1:
	r15_777 = rax_952
	rax_952 = rax_952 - 0x0000000000000001
	ecx_958 = (word32) (uint64) (ecx_958 + 0x00000001) (alias)
	branch Mem0[rax_952 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r15 r15b r9b r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0D1:
	rcx_774 = (int64) ecx_958
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F3A9:
	r15_777 = r8_767
	rcx_774 = 0x0000000000000001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0D7:
	word64 r8_773
	*r8Out = r8_767
	word64 rax_782 = 0x0000000000000000
	byte al_784 = 0x00
	branch ebp_1015 < 0x00000000 l000000000040F0E1
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rcx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0DE_1:
	rax_782 = (uint64) ebp_1015 (alias)
	al_784 = (byte) ebp_1015 (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rcx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0E1:
	rax_235 = DPB(rax_782, (int16) al_784, 0) (alias)
	rbx_1005 = rax_235
	branch rcx_774 <u rax_235 l000000000040F0ED
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0E9_1:
	rbx_1005 = rcx_774
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0ED:
	branch rbx_1005 >=u r14_1085 - r13_1077 l000000000040EE98
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0F9:
	branch r12_1076 == 0x0000000000000000 l000000000040F16E
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F0FE:
	branch rax_235 <=u rcx_774 l000000000040F144
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F103:
	word64 rbp_903 = (int64) ebp_1015 - rcx_774
	branch r11d == 0x00000030 l000000000040F1C1
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04D8(64) Local -04E0(8) Local -04E8(64) Local -04F0(64) Local -04F9(32)

l000000000040F1C1:
	word64 r9_935 = (uint64) r9d
	r12_1076 = r12_1076 + rbp_903
	rax_235 = memset(r12_1076, 0x0000000000000030, rbp_903)
	r9d = (word32) r9_935 (alias)
	r9b_1064 = (byte) r9_935 (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F125:
	word64 r9_922 = (uint64) r9d
	r12_1076 = r12_1076 + rbp_903
	rax_235 = memset(r12_1076, 0x0000000000000020, rbp_903)
	r9d = (word32) r9_922 (alias)
	r9b_1064 = (byte) r9_922 (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F144:
	*rdiOut = r12_1076
	branch r9b_1064 == 0x00 l000000000040F180
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E0(64) Local -04E8(64) Local -04F0(64) Local -04F9(32)

l000000000040F180:
	rax_235 = memcpy(r12_1076, r15_777, rcx_774)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F15C:
	rax_235 = fn000000000040EC80(rax_235, rcx_774, r15_777, r12_1076)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F16B:
	r12_1076 = r12_1076 + rcx_774
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F16E:
	word64 r8_822
	*r8Out = r8_767
	rcx = rcx_774
	r13_1077 = r13_1077 + rbx_1005
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040ED74:
	word32 eax_622 = (word32) Mem0[rax_235 + 0x0000000000000001:byte]
	rax_235 = DPB(rax_235, eax_622, 0) (alias)
	al_329 = (byte) eax_622 (alias)
	rbx_1005 = rax_235 + 0x0000000000000001
	branch al_329 == 0x00 l000000000040F050
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F050:
	r10_472 = r14_1085
// DataOut: bpl ebp fs r10 r11 r11d r12 r13 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F053:
	branch r12_1076 == 0x0000000000000000 l000000000040F191
// DataOut: bpl ebp fs r10 r11 r11d r12 r13 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F05C:
	branch r10_472 == 0x0000000000000000 l000000000040F191
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F191:
	rax_129 = r13_1077
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F065:
	Mem524[r12_1076:byte] = 0x00
	rax_129 = r13_1077
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE9A:
	branch (rsi_31 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004105EA
// DataOut: bpl ebp esi fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l00000000004105EA:
	__stack_chk_fail()
// DataOut: bpl ebp esi fs r11d r12 r13 r14 r15b r9d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F25D:
// DataOut: bpl ebp fs r11d r12 r13 r14 r15b r8 r9d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EF37:
	word64 rsp_223
	word64 r15_224
	word64 r10_225
	word64 rdx_226
	word64 rsi_230
	word64 rbp_231
	word64 rbx_232
	byte SCZO_234
	word32 esi_237
	byte SZO_238
	byte C_239
	word64 r8_240
	word32 r9d_241
	byte dil_242
	word32 eax_243
	word32 r13d_244
	byte al_245
	byte Z_246
	word32 r11d_247
	word64 r11_248
	word32 edi_249
	word32 edx_250
	word32 ebp_251
	byte CZ_252
	word64 r9_253
	byte cl_254
	byte S_256
	word32 ecx_257
	word16 ax_258
	byte dl_259
	byte r15b_260
	byte r9b_261
	call strftime (retsize: 8; depth: 1296)
		uses: al_210,ax_211,bLoc0454_218,bLoc0455_213,bLoc0456_205,bLoc04F9_41,C_185,cl_157,CZ_176,dil_216,dl_154,dwLoc04C4_39,dwLoc04C8_46,dwLoc04D0_220,dwLoc04D8_221,dwLoc04E0_145,dwLoc04F0_204,eax_209,ebp_146,ecx_158,edi_217,edx_153,esi_182,fs_142,qwLoc04C0_42,qwLoc04D8_144,qwLoc04E0_222,qwLoc04E8_135,qwLoc04F0_151,qwLoc04F8_37,qwLoc08_4,qwLoc10_9,qwLoc18_12,qwLoc20_15,qwLoc28_20,qwLoc30_23,qwLoc40_32,r10_143,r11_179,r11d_178,r12_164,r13_165,r13d_162,r14_166,r15_167,r15b_168,r8_207,r9_147,r9b_149,r9d_148,rax_208,rbp_163,rbx_170,rcx_212,rdi_215,rdx_214,rsi_219,rsp_169,S_177,SCZO_175,SZO_183,Z_184
		defs: al_245,ax_258,C_239,cl_254,CZ_252,dil_242,dl_259,eax_243,ebp_251,ecx_257,edi_249,edx_250,esi_237,fs_236,r10_225,r11_248,r11d_247,r12_229,r13_228,r13d_244,r14_227,r15_224,r15b_260,r8_240,r9_253,r9b_261,r9d_241,rax_235,rbp_231,rbx_232,rcx_233,rdi_255,rdx_226,rsi_230,rsp_223,S_256,SCZO_234,SZO_238,Z_246
	word64 r11_266 = (uint64) r11d
	*r11Out = r11_266
	word64 r9_268 = (uint64) r9d
	word64 r8_265 = rbx_1005
	*r8Out = r8_265
	r11d = (word32) r11_266 (alias)
	r9d = (word32) r9_268 (alias)
	byte r9b_270 = (byte) r9_268
	branch (fp - 0x0000000000000455 & fp - 0x0000000000000455) == 0x0000000000000000 l000000000040ED74
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:fp - 0x0000000000000455 rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> r14:rdx rdx:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EF84:
	rbx_1005 = rax_235 - 0x0000000000000001
	word64 rax_272 = 0x0000000000000000
	byte al_274 = 0x00
	branch ebp_251 < 0x00000000 l000000000040EF8F
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EF8C_1:
	rax_272 = (uint64) ebp_251 (alias)
	al_274 = (byte) ebp_251 (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EF8F:
	word64 rax_287 = DPB(rax_272, (int16) al_274, 0)
	word64 rcx_289 = rax_235 - 0x0000000000000001
	branch rax_287 <u rax_235 - 0x0000000000000001 l000000000040EF9E
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EF9A_1:
	rcx_289 = rax_287
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EF9E:
	branch rcx_289 >=u r14_1085 - r13_1077 l000000000040EE98
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EE98:
	rax_129 = 0x0000000000000000
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EFAA:
	branch r12_1076 == 0x0000000000000000 l000000000040F03A
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EFB3:
	branch rax_235 - 0x0000000000000001 >=u rax_287 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EFB8:
	rax_287 = 0x0000000000000000
	branch false l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EFC0:
	word64 rbp_419 = (int64) ebp_251 - (rax_235 - 0x0000000000000001)
	branch r11d == 0x00000030 l0000000000410239
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):0x00000000 -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04D8(64) Local -04E0(64) Local -04E8(64) Local -04F0(64) Local -04F9(32)

l0000000000410239:
	word64 r9_451 = (uint64) r9d
	r12_1076 = r12_1076 + rbp_419
	rax_287 = memset(r12_1076, 0x0000000000000030, rbp_419)
	r9d = (word32) r9_451 (alias)
	r9b_270 = (byte) r9_451 (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EFE2:
	word64 r9_438 = (uint64) r9d
	r12_1076 = r12_1076 + rbp_419
	rax_287 = memset(r12_1076, 0x0000000000000020, rbp_419)
	r9d = (word32) r9_438 (alias)
	r9b_270 = (byte) r9_438 (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F001:
	*rdiOut = r12_1076
	branch r15b_260 != 0x00 l000000000040F1AD
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9b r9d rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E0(64) Local -04E8(64) Local -04F0(64) Local -04F9(32)

l000000000040F1AD:
	rax_287 = fn000000000040EC30(rax_287, rax_235 - 0x0000000000000001, qwLoc04E8, r12_1076)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F01F:
	branch r9b_270 == 0x00 l000000000040F199
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E0(64) Local -04E8(64) Local -04F0(64) Local -04F9(32)

l000000000040F199:
	rax_287 = memcpy(r12_1076, qwLoc04E8, rax_235 - 0x0000000000000001)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F028:
	rax_287 = fn000000000040EC80(rax_287, rax_235 - 0x0000000000000001, qwLoc04E8, r12_1076)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F037:
	r12_1076 = r12_1076 + (rax_235 - 0x0000000000000001)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F03A:
	word32 eax_327 = (word32) Mem0[rax_287 + 0x0000000000000001:byte]
	rax_235 = DPB(rax_287, eax_327, 0) (alias)
	word64 r8_316
	*r8Out = rbx_1005
	rcx = rcx_289
	al_329 = (byte) eax_327 (alias)
	r13_1077 = r13_1077 + rcx_289
	rbx_1005 = rax_235 + 0x0000000000000001
	branch al_329 != 0x00 l000000000040ED85
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040F04E:
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx ecx:<invalid> rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EEB1:
	return rax_129
// DataOut: fs r11 r11d r15b r8 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040ECD0_exit:
// DataOut: r11 r11d r8 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp r10:<invalid> r12:r12 rbx:rbx rax:<invalid> rsi:<invalid> eax:<invalid> r13:r13 rbp:rbp r14:r14 r15:r15 rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EDA9:
	rbx_1005 = rbx_1005 + 0x0000000000000001
	word32 edi_1048 = (word32) Mem0[rbx_1005:byte]
	dil_1023 = (byte) edi_1048 (alias)
	rdi = DPB(rdi, edi_1048, 0) (alias)
	*rdiOut = rdi
	SZO_1053 = cond(dil_1023 - 0x30) (alias)
	branch dil_1023 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r9b r9d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:0x0001 ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)

l000000000040EDC0:
	r11d = (int32) dil_1023
	*r11Out = DPB(r11_1068, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r9b r9d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> rbp:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1232(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -1110(fp):cl -1109(fp):dil -1108(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0040(64) Local -04E8(64) Local -04F9(32)



word64 fn0000000000410600(word64 rax, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r8d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rbpOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// LiveOut: r11 r11d r8 rax rbp rdi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000410600_entry:
	*rbpOut = rbp
// DataOut: bpl ebp fs r11d r14 r15 r15b r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 rdi_28
	word64 r8_29
	word64 r11_30
	return fn000000000040ECD0(rax, rdx, rsi, ebp, rdi, 0x00, (word32) (uint64) r8d, r11d, r14, r15b, fs, out rdi_28, out r8_29, out r11_30)
// DataOut: fs r11 r11d r15 r15b r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: r11 r11d r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r13 r14 r15
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410A30:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168CC)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000410650:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168C0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	__fprintf_chk(rdi, 0x0000000000000001, 0x0000000000416BA0)
	word64 rax_48 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word32 eax_51 = fputs_unlocked(rax_48, rdi)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:<invalid> eax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000410A50:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004107A1:
	__fprintf_chk(rdi, 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005))
	return fp
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004106BE:
	word64 rsp_107
	word64 r15_108
	word64 r14_109
	word64 r13_110
	word64 r12_111
	word64 r9_112
	word64 rbp_113
	word64 rdi_114
	word64 rbx_115
	word64 r8_116
	byte SCZO_117
	word64 rsi_118
	byte SZO_119
	byte C_120
	byte Z_121
	word64 rcx_122
	word64 rdx_123
	word32 edx_124
	word32 esi_125
	word32 eax_126
	word64 rax_127
	word32 edi_128
	word32 r8d_129
	byte CZ_130
	word64 r10_131
	word64 r11_132
	call Mem0[0x00416B48:word32] (retsize: 4; depth: 140)
		uses: C_31,CZ_53,eax_51,edi,edx,esi,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_18,qwLoc30_23,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,qwLoc78,qwLoc80,qwLoc88,r10,r11,r12_15,r13,r14,r15,r8_38,r8d,r9_33,rax_48,rbp_20,rbx_25,rcx_39,rdi_50,rdx_46,rsi_49,rsp_26,SCZO_52,SZO_32,Z_29
		defs: C_120,CZ_130,eax_126,edi_128,edx_124,esi_125,r10_131,r11_132,r12_111,r13_110,r14_109,r15_108,r8_116,r8d_129,r9_112,rax_127,rbp_113,rbx_115,rcx_122,rdi_114,rdx_123,rsi_118,rsp_107,SCZO_117,SZO_119,Z_121
	return rsp_107
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:r13 r15:r15 r14:r14 -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_13 = 0x0000000000000000
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_18 = (word32) (uint64) Mem0[rax:word32]
	branch eax_18 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 rax_58 = (uint64) (eax_18 + 0x00000008)
	Mem60[rax_58:word32] = (word32) rax_58
	rax = Mem60[rdx:word64]
	Mem66[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem49[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem49[rdx:word64]
	Mem55[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_13 = r9_13 + 0x0000000000000001
	branch r9_13 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_13, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid>



void fn0000000000410B30(byte al, word64 rdx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al r11 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410B30_entry:
// DataOut: al r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B30:
	branch al == 0x00 l0000000000410B7C
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B7C:
	fn0000000000410AC0(fp - 0x00000000000000B8, rdx, rsi, rdi, fp - 0x00000000000000D0, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9

fn0000000000410B30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -208(fp):0x00000020 -204(fp):0x00000030 -200(fp):fp + 0x0000000000000008 -192(fp):fp - 0x00000000000000B8 -152(fp):r8 -144(fp):r9

l0000000000410B45:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9



word64 fn0000000000410C40(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rbx rsp
fn0000000000410C40_entry:
// DataOut: ebp ebx fs r10 r11 r11d r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp ebx fs r10 r11 r11d r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp ebx fs r10 r11 r11d r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_32 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_32 <u rdi l0000000000410C7A
// DataOut: ebp ebx fs r10 r11 r11d r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem39[fp - 0x0000000000000010:word64] = rax_32
	fn0000000000410E50()
// DataOut: ebp ebx fs r10 r11 r11d r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp ebx fs r10 r11 r11d r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	return rax_13
// DataOut: ebp ebx fs r10 r11 r11d r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al r8 rax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi rsp
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	return 0x0000000000000000
// DataOut: al ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx

l0000000000410C99:
	word64 rax_59 = realloc(rdi, rsi)
	branch rax_59 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_82 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_82 <u rsi l0000000000410CED
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem91[fp - 0x0000000000000010:word64] = rax_82
	fn0000000000410E50()
	word64 r8_95
	*r8Out = rdx
	word64 rcx_109 = Mem91[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_109 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_196 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_109 = (uint64) (rax_196 == 0x0000000000000000) + rax_196
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	rdx = (uint64) (0xFFFFFFFFAAAAAAAA % rdx)
	word64 rax_121 = (uint64) (0xFFFFFFFFAAAAAAAA /u rdx)
	branch rcx_109 >=u rax_121 l0000000000410D5C
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem134[fp - 0x0000000000000018:word64] = rax_121
	fn0000000000410E50()
	word64 rax_138 = Mem134[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_138 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_138 = 0x0000000000000080
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem180[rsi:word64] = rax_138
	rsi = rax_138
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_138 >u 0x00000000AAAAAAA9 l0000000000410DB7
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem155[fp - 0x0000000000000020:word64] = rax_138
	fn0000000000410E50()
	Mem157[fp - 0x0000000000000028:word64] = rsi
	return memset(fn0000000000410C40(rsi, rdi), 0x0000000000000000, rdi)
// DataOut: al ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -8(fp):rbx
// Terminates process

l0000000000410D87:
	rdx = rax_138 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_148 = rax_138 + rdx
	Mem151[rsi:word64] = rax_148
	rsi = rax_148
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_109 = rcx_109 + (rcx_109 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem110[rsi:word64] = rcx_109
	rsi = rcx_109 *s rdx
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	return rax_59
// DataOut: al ebp fs r10 r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx

fn0000000000410C90_exit:
// DataOut: al r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx



word64 fn0000000000410E00(word64 rsi, word64 rdi, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax rax rdi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbp rbx rsi rsp
fn0000000000410E00_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	word64 rax_15 = fn0000000000410C40(rsi, rsi)
	word64 rdi_24
	*rdiOut = rax_15
	return memcpy(rax_15, rdi, rsi)
// DataOut: eax fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410E00_exit:
// DataOut: eax rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rdi:<invalid> rbx:rbx rdx:rsi rsi:<invalid> rax:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000410E30(word64 rdi, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax rax rdi rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000410E30_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_9 = DPB(rax, strlen(rdi), 0)
	word64 rsi_11
	*rsiOut = rax_9 + 0x0000000000000001
// DataOut: fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E41_thunk_fn0000000000410E00:
	word64 rdi_14
	return fn0000000000410E00(rax_9 + 0x0000000000000001, rdi, out rdi_14)
// DataOut: eax fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rsi:rax + 0x0000000000000001 -8(fp):rbx

fn0000000000410E30_exit:
// DataOut: eax rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	word64 rsp_16
	byte SCZO_17
	word32 edx_18
	word64 rdx_19
	word32 esi_20
	word64 rsi_21
	word32 edi_22
	word64 rdi_23
	byte SZO_24
	byte C_25
	word64 rax_26
	word64 rcx_27
	word32 eax_28
	call error (retsize: 8; depth: 16)
		uses: C_15,eax_13,rax_12,rcx_9,rdi_8,rdx_10,rsi_11,rsp_2,SZO_14
		defs: C_25,eax_28,edi_22,edx_18,esi_20,rax_26,rcx_27,rdi_23,rdx_19,rsi_21,rsp_16,SCZO_17,SZO_24
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



word32 fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebxOut, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebx r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rdi rsp
fn0000000000410E90_entry:
// DataOut: ebx edx fs r10 r11 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(64)

l0000000000410E90:
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: fs r10 r11 r14d r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0030(32) Local -0040(64)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410EAA:
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: fs r10 r11 r12 r14d r15 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32) Local -0040(64)

l0000000000410EBE_1:
// DataOut: fs r10 r11 r12 r14d r15 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:rsi r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32) Local -0040(64)

l0000000000410EC2:
	word64 rsp_43
	word64 r15_44
	word64 r14_45
	word32 r14d_46
	word32 edx_47
	word64 r13_48
	word64 r12_49
	word64 rbp_50
	word64 rbx_51
	byte SCZO_52
	byte CZ_53
	word64 rax_54
	word64 rdi_55
	word64 rsi_56
	byte SZO_57
	byte C_58
	word64 rcx_59
	word64 r8_60
	byte Z_61
	word32 ecx_62
	word64 rdx_63
	word32 esi_64
	word32 edi_65
	word32 ebx_66
	word32 r9d_67
	word32 eax_70
	word32 ebp_71
	byte dl_72
	byte al_73
	byte S_74
	word32 r8d_75
	byte cl_76
	word64 r9_69
	byte bl_68
	call __ctype_b_loc (retsize: 8; depth: 96)
		uses: bl_42,C_34,CZ_25,ebp_29,ebx_40,edx,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_16,qwLoc28_19,qwLoc30_22,r12_38,r13_36,r14_9,r14d_10,r15_31,r8,rax_26,rbp_28,rbx_41,rcx,rdi,rsi,rsp_23,SCZO_24,SZO_32,Z_33
		defs: al_73,bl_68,C_58,cl_76,CZ_53,dl_72,eax_70,ebp_71,ebx_66,ecx_62,edi_65,edx_47,esi_64,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_69,r9d_67,rax_54,rbp_50,rbx_51,rcx_59,rdi_55,rdx_63,rsi_56,rsp_43,S_74,SCZO_52,SZO_57,Z_61
	word64 rax_81 = rbp_50
// DataOut: bl fs r10 r11 r12 r14d r15 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:<invalid> r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410EDF:
	r9_69 = DPB(r9_69, (word32) bl_68, 0) (alias)
	*r9Out = r9_69
	branch (Mem0[qwLoc40 + 0x0000000000000001 + r9_69 * 0x0000000000000002:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl fs r10 r11 r12 r14d r15 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410ED8:
	rax_81 = rax_81 + 0x0000000000000001
	bl_68 = (byte) (word32) Mem0[rax_81:byte] (alias)
// DataOut: bl fs r10 r11 r12 r14d r15 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410EEB:
	word32 eax_159
	branch bl_68 != 0x2D l0000000000410F08
// DataOut: fs r10 r11 r12 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F08:
	word64 rbp_242
	word32 ebp_240
	word32 edx_291
	word64 rax_203 = __errno_location()
	Mem205[rax_203:word32] = 0x00000000
	word64 rax_211 = DPB(rax_203, strtoul(rbp_50, r15_44, (uint64) r14d_46), 0)
	word64 r14_212 = Mem205[r15_44:word64]
	word64 rbx_214 = rax_211
	branch r14_212 == rbp_50 l0000000000410FE7
// DataOut: fs r10 r11 r12 r14 r15 r9 rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FE7:
	branch r12_49 == 0x0000000000000000 l0000000000410EF0
// DataOut: fs r10 r11 r12 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FF0:
	word32 edx_926 = (word32) Mem205[rbp_50:byte]
	byte dl_929 = (byte) edx_926
	branch dl_929 == 0x00 l0000000000410EF0
// DataOut: dl edx fs r10 r11 r12 r14 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FFC:
	rbp_242 = 0x0000000000000000
	ebp_240 = 0x00000000 (alias)
	rbx_214 = 0x0000000000000001
	edx_291 = (word32) (uint64) edx_926 (alias)
	branch strchr(r12_49, DPB(r15_44, (int32) dl_929, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041101F:
// DataOut: fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F3A:
	word32 eax_885 = (word32) (uint64) Mem205[rax_203:word32]
	branch eax_885 != 0x00000000 l0000000000410F68
// DataOut: eax fs r10 r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F68:
	rbp_242 = 0x0000000000000001
	ebp_240 = 0x00000001 (alias)
	branch eax_885 != 0x00000022 l0000000000410EF0
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F76:
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F40:
	rbp_242 = 0x0000000000000000
	ebp_240 = 0x00000000 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F42:
	branch r12_49 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F47:
	word32 edx_896 = (word32) Mem205[r15_44:byte]
	byte dl_899 = (byte) edx_896
	branch dl_899 != 0x00 l0000000000410F78
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F78:
	edx_291 = (word32) (uint64) edx_896 (alias)
	branch strchr(r12_49, DPB(r15_44, (int32) dl_899, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F94:
	word32 eax_317
	word32 ecx_312
	word64 rsi_300 = 0x0000000000000030
	word32 edx_309 = (word32) (uint64) edx_291
	branch strchr(r12_49, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FAE:
	byte al_855 = (byte) (word32) Mem205[0x0000000000000031:byte]
	branch al_855 == 0x44 l0000000000411262
// DataOut: al dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FBB:
	branch al_855 == 0x69 l000000000041124A
// DataOut: al dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041124A:
	word64 rcx_879 = (uint64) (Mem205[0x0000000000000032:byte] == 0x42)
	eax_317 = 0x00000400 (alias)
	ecx_312 = rcx_879 + 0x0000000000000001 + rcx_879
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FC3:
	branch al_855 == 0x42 l0000000000411262
// DataOut: dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411262:
	ecx_312 = 0x00000002 (alias)
	eax_317 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FCB:
	ecx_312 = 0x00000001 (alias)
	eax_317 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FD5:
	word64 rdx_319 = (uint64) (edx_309 - 0x00000042)
	byte dl_322 = (byte) rdx_319
	branch dl_322 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FDD:
	word32 edx_337
	word64 rdi_506
	switch (DPB(rdx_319, (word32) dl_322, 0)) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411054:
	branch rbx_214 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041105D:
	rbx_214 = rbx_214 * 0x0000000000000002
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411036:
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411064:
	branch rbx_214 >u 0x00000000FFFFFFFF l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411077:
	rbx_214 = rbx_214 << 0x0000000000000009
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:0xFFFFFFFF rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041107F:
	word64 rdi_753 = (int64) eax_317
	word64 rax_760 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_753)
	word32 esi_764 = 0x00000007
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110A6:
	word32 r8d_787
	branch rax_760 >=u rbx_214 l0000000000411097
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411097:
	rbx_214 = rbx_214 *s rdi_753
	r8d_787 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110AB:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_787 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041109E:
	rsi_300 = (uint64) (esi_764 - 0x00000001)
	edx_337 = (word32) (uint64) (edx_337 | r8d_787) (alias)
	esi_764 = (word32) rsi_300 (alias)
	branch esi_764 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110BA:
	word64 rdi_693 = (int64) eax_317
	word64 rax_700 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_693)
	word32 esi_704 = 0x00000008
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110E5:
	word32 r8d_727
	branch rax_700 >=u rbx_214 l00000000004110D2
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110D2:
	rbx_214 = rbx_214 *s rdi_693
	r8d_727 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110EA:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_727 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110D9:
	rsi_300 = (uint64) (esi_704 - 0x00000001)
	edx_337 = (word32) (uint64) (edx_337 | r8d_727) (alias)
	esi_704 = (word32) rsi_300 (alias)
	branch esi_704 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110F9:
	rsi_300 = (int64) eax_317
	word64 rax_640 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_300)
	word32 edi_644 = 0x00000004
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041110F:
	word32 r8d_667
	branch rax_640 <u rbx_214 l0000000000411271
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411271:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_667 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411118:
	rbx_214 = rbx_214 *s rsi_300
	r8d_667 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041111F:
	edx_337 = (word32) (uint64) (edx_337 | r8d_667) (alias)
	edi_644 = (word32) (uint64) (edi_644 - 0x00000001) (alias)
	branch edi_644 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411127:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041112C:
	rsi_300 = (int64) eax_317
	word64 rax_580 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_300)
	word32 edi_584 = 0x00000005
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411157:
	word32 r8d_607
	branch rax_580 >=u rbx_214 l0000000000411144
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411144:
	rbx_214 = rbx_214 *s rsi_300
	r8d_607 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041115C:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_607 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041114B:
	edx_337 = (word32) (uint64) (edx_337 | r8d_607) (alias)
	edi_584 = (word32) (uint64) (edi_584 - 0x00000001) (alias)
	branch edi_584 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041116B:
	rdi_506 = (int64) eax_317
	rsi_300 = 0xFFFFFFFFFFFFFFFF
	word64 rax_553 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_506)
	branch rbx_214 >u rax_553 l00000000004112A3
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411186:
	rbx_214 = rbx_214 *s rdi_506
	branch rax_553 <u rbx_214 l00000000004112A3
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004112A3:
	edx_337 = 0x00000001 (alias)
	rbx_214 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041119E:
	rdi_506 = (int64) eax_317
	rsi_300 = 0xFFFFFFFFFFFFFFFF
	branch rbx_214 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_506) l0000000000411193
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411193:
	rsi_300 = 0xFFFFFFFFFFFFFFFF
	rbx_214 = rbx_214 *s rdi_506
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111B5:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	edx_337 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041121B:
	rsi_300 = (int64) eax_317
	word64 rax_453 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_300)
	word32 edi_457 = 0x00000003
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411231:
	word32 r8d_480
	branch rax_453 <u rbx_214 l0000000000411294
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411294:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_480 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411236:
	rbx_214 = rbx_214 *s rsi_300
	r8d_480 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041123D:
	edx_337 = (word32) (uint64) (edx_337 | r8d_480) (alias)
	edi_457 = (word32) (uint64) (edi_457 - 0x00000001) (alias)
	branch edi_457 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411245:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111C2:
	word64 rdi_386 = (int64) eax_317
	word64 rax_393 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_386)
	word32 esi_397 = 0x00000006
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111ED:
	word32 r8d_420
	branch rax_393 >=u rbx_214 l00000000004111DA
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111DA:
	rbx_214 = rbx_214 *s rdi_386
	r8d_420 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111F2:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_420 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111E1:
	rsi_300 = (uint64) (esi_397 - 0x00000001)
	edx_337 = (word32) (uint64) (edx_337 | r8d_420) (alias)
	esi_397 = (word32) rsi_300 (alias)
	branch esi_397 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411028:
	Mem284[rbp_242:word64] = rbx_214
	eax_159 = (word32) (uint64) ((word32) (uint64) ebp_240 | 0x00000002) (alias)
// DataOut: eax fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411201:
	branch rbx_214 >u 0x00000000FFFFFFFF l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411283:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	edx_337 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411210:
	rbx_214 = rbx_214 << 0x000000000000000A
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:0xFFFFFFFF rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411038:
	rbp_242 = (uint64) (ebp_240 | edx_337)
	Mem354[r15_44:word64] = r14_212 + (int64) ecx_312
	ebp_240 = (word32) rbp_242 (alias)
	word32 eax_352 = (word32) (uint64) ((word32) (uint64) ebp_240 | 0x00000002)
	branch Mem354[rsi_300:byte] == 0x00 l000000000041104F
// DataOut: eax ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041104C_1:
	ebp_240 = eax_352
	rbp_242 = DPB(rbp_242, eax_352, 0) (alias)
// DataOut: ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041104F:
// DataOut: ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F4F:
	Mem243[rbp_242:word64] = rbx_214
	word32 ebx_251
	*ebxOut = (word32) rbx
	return (word32) (uint64) ebp_240
// DataOut: eax ebx fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410EF0:
	eax_159 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410EF5:
	word32 ebx_164
	*ebxOut = (word32) rbx
	return eax_159
// DataOut: eax ebx fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000410E90_exit:
// DataOut: eax ebx r9
// DataOut (flags): 
// SymbolicIn: rsp:fp r14:r14 rax:<invalid> rbp:rbp r15:r15 r13:r13 r12:r12 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rbx:rbx rsi:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004112D0:
	word64 rsi_130
	word64 r10_6 = (int64) esi
	word32 r10d_7 = (word32) r10_6
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000041133B:
	rsi_130 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:0x0000000000416DD1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l0000000000411334:
	rsi_130 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l00000000004112F0:
	rsi_130 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000041130C:
	dcgettext(0x0000000000000000, rsi_130, 0x0000000000000005)
	word64 rsp_84
	word64 r13_85
	word64 r10_86
	word32 esi_87
	word64 r12_88
	word64 r8_89
	word64 rbp_90
	word64 rbx_91
	byte SCZO_92
	word32 edi_93
	word32 ebp_94
	byte CZ_95
	byte C_96
	word64 rdi_97
	word64 rsi_98
	byte Z_99
	word32 r10d_100
	byte SZO_101
	byte S_102
	word32 ebx_103
	word64 rcx_104
	word32 edx_105
	word64 rdx_106
	word64 rax_107
	word64 r9_108
	word32 eax_109
	byte dl_110
	call error (retsize: 8; depth: 64)
		uses: bLoc37_65,bLoc38_64,C_80,CZ_22,dl,eax_78,ebp_25,ebx,edi_58,edx,esi_60,qwLoc08_4,qwLoc10_10,qwLoc18_15,qwLoc20_18,r10_6,r10d_7,r12_12,r13_67,r8_73,r9_71,rax_77,rbp_24,rbx_66,rcx_74,rdi_76,rdx_72,rsi_75,rsp_19,S_62,SCZO_59,SZO_79,Z_55
		defs: C_96,CZ_95,dl_110,eax_109,ebp_94,ebx_103,edi_93,edx_105,esi_87,r10_86,r10d_100,r12_88,r13_85,r8_89,r9_108,rax_107,rbp_90,rbx_91,rcx_104,rdi_97,rdx_106,rsi_98,rsp_84,S_102,SCZO_92,SZO_101,Z_99
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:<invalid> r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r13:<invalid> -56(fp):dl -55(fp):0x00 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:<invalid> r12:r8 rbp:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> -56(fp):dl -55(fp):0x00 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebpOut, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000411360_entry:
// DataOut: ebp edx fs r10 r11 r14b r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(64)

l0000000000411360:
	branch edx >u 0x00000024 l0000000000411788
// DataOut: fs r10 r11 r14d r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0040(64)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000041137A:
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: fs r10 r11 r12 r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0040(64)

l000000000041138E_1:
// DataOut: fs r10 r11 r12 r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:rsi r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0040(64)

l0000000000411392:
	word64 rsp_43
	word64 r15_44
	word64 r14_45
	word32 r14d_46
	word32 edx_47
	word64 r13_48
	word64 r12_49
	word64 rbp_50
	word64 rbx_51
	byte SCZO_52
	byte CZ_53
	word64 rax_54
	word64 rdi_55
	word64 rsi_56
	byte SZO_57
	byte C_58
	word64 rcx_59
	word64 r8_60
	byte Z_61
	word32 ecx_62
	word64 rdx_63
	word32 esi_64
	word32 edi_65
	word32 ebx_66
	word32 r9d_67
	word32 eax_70
	word32 ebp_71
	byte dl_72
	byte al_73
	byte S_74
	word32 r8d_75
	byte cl_76
	word64 r9_69
	byte bl_1016
	call __ctype_b_loc (retsize: 8; depth: 96)
		uses: bl_42,C_34,CZ_25,ebp_29,ebx_40,edx,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_16,qwLoc28_19,qwLoc30_22,r12_38,r13_36,r14_9,r14d_10,r15_31,r8,rax_26,rbp_28,rbx_41,rcx,rdi,rsi,rsp_23,SCZO_24,SZO_32,Z_33
		defs: al_73,bl_68,C_58,cl_76,CZ_53,dl_72,eax_70,ebp_71,ebx_66,ecx_62,edi_65,edx_47,esi_64,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_69,r9d_67,rax_54,rbp_50,rbx_51,rcx_59,rdi_55,rdx_63,rsi_56,rsp_43,S_74,SCZO_52,SZO_57,Z_61
	word64 rax_1009 = rbp_50
// DataOut: bl fs r10 r11 r12 r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:<invalid> r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113AF:
	word32 r9d_94 = (word32) bl_1016
	r9_69 = DPB(r9_69, r9d_94, 0) (alias)
	*r9Out = r9_69
	branch (Mem0[qwLoc40 + 0x0000000000000001 + r9_69 * 0x0000000000000002:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl fs r10 r11 r12 r14d r15 r8 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113A8:
	rax_1009 = rax_1009 + 0x0000000000000001
	bl_1016 = (byte) (word32) Mem0[rax_1009:byte] (alias)
// DataOut: bl fs r10 r11 r12 r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113BB:
	word32 eax_169
	branch bl_1016 != 0x2D l00000000004113D8
// DataOut: fs r10 r11 r12 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113D8:
	word32 ebp_302
	word64 rbp_301
	word32 edx_1006
	word64 rax_223 = __errno_location()
	Mem232[rax_223:word32] = 0x00000000
	word64 rsp_237
	word64 r15_238
	word64 r14_239
	word32 r14d_240
	word32 edx_241
	word64 r13_242
	word64 r12_243
	word64 rbp_244
	word64 rbx_245
	byte SCZO_246
	byte CZ_247
	word64 rax_248
	word64 rdi_249
	word64 rsi_250
	byte SZO_251
	byte C_252
	word64 rcx_253
	word64 r8_254
	byte Z_255
	word32 ecx_256
	word64 rdx_257
	word32 esi_258
	word32 edi_259
	word32 ebx_260
	word32 r9d_261
	byte bl_262
	word64 r9_263
	word32 eax_264
	word32 ebp_265
	byte dl_266
	byte al_267
	byte S_268
	word32 r8d_269
	byte cl_270
	call __strtoul_internal (retsize: 8; depth: 96)
		uses: al_225,bl_87,C_229,cl_76,CZ_53,dl_80,dwLoc50,eax_224,ebp_71,ebx_86,ecx_227,edi_65,edx_79,esi_234,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_16,qwLoc28_19,qwLoc30_22,qwLoc40,qwLoc50_236,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_95,r9d_94,rax_223,rbp_50,rbx_93,rcx_226,rdi_235,rdx_230,rsi_233,rsp_43,S_74,SCZO_99,SZO_228,Z_100
		defs: al_267,bl_262,C_252,cl_270,CZ_247,dl_266,eax_264,ebp_265,ebx_260,ecx_256,edi_259,edx_241,esi_258,r12_243,r13_242,r14_239,r14d_240,r15_238,r8_254,r8d_269,r9_263,r9d_261,rax_248,rbp_244,rbx_245,rcx_253,rdi_249,rdx_257,rsi_250,rsp_237,S_268,SCZO_246,SZO_251,Z_255
	word64 r14_271 = Mem232[r15_238:word64]
	word64 rbx_273 = rax_248
	word64 r8_276 = rax_223
	*r8Out = r8_276
	branch r14_271 == rbp_244 l00000000004114BF
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114BF:
	branch r12_243 == 0x0000000000000000 l00000000004113C0
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114C8:
	word32 edx_985 = (word32) Mem232[rbp_244:byte]
	byte dl_988 = (byte) edx_985
	branch dl_988 == 0x00 l00000000004113C0
// DataOut: dl edx fs r10 r11 r12 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114D4:
	rbp_301 = 0x0000000000000000
	ebp_302 = 0x00000000 (alias)
	rbx_273 = 0x0000000000000001
	edx_1006 = (word32) (uint64) edx_985 (alias)
	branch strchr(r12_243, DPB(rsi_250, (int32) dl_988, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114F7:
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041140C:
	word32 eax_944 = (word32) (uint64) Mem232[rax_248:word32]
	branch eax_944 != 0x00000000 l0000000000411440
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411440:
	rbp_301 = 0x0000000000000001
	ebp_302 = 0x00000001 (alias)
	branch eax_944 != 0x00000022 l00000000004113C0
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041144E:
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411413:
	rbp_301 = 0x0000000000000000
	ebp_302 = 0x00000000 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411415:
	branch r12_243 == 0x0000000000000000 l0000000000411422
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041141A:
	word32 edx_955 = (word32) Mem232[rsi_250:byte]
	byte dl_958 = (byte) edx_955
	branch dl_958 != 0x00 l0000000000411450
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411450:
	edx_1006 = (word32) (uint64) edx_955 (alias)
	branch strchr(r12_243, DPB(rsi_250, (int32) dl_958, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041146C:
	word32 eax_376
	word32 ecx_371
	word64 rsi_359 = 0x0000000000000030
	word32 edx_368 = (word32) (uint64) edx_1006
	branch strchr(r12_243, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411486:
	byte al_914 = (byte) (word32) Mem232[0x0000000000000031:byte]
	branch al_914 == 0x44 l000000000041173A
// DataOut: al dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411493:
	branch al_914 == 0x69 l0000000000411722
// DataOut: al dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411722:
	word64 rcx_938 = (uint64) (Mem232[0x0000000000000032:byte] == 0x42)
	eax_376 = 0x00000400 (alias)
	ecx_371 = rcx_938 + 0x0000000000000001 + rcx_938
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041149B:
	branch al_914 == 0x42 l000000000041173A
// DataOut: dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041173A:
	ecx_371 = 0x00000002 (alias)
	eax_376 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114A3:
	ecx_371 = 0x00000001 (alias)
	eax_376 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114AD:
	word64 rdx_378 = (uint64) (edx_368 - 0x00000042)
	byte dl_381 = (byte) rdx_378
	branch dl_381 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114B5:
	word32 edx_398
	word64 rdi_565
	switch (DPB(rdx_378, (word32) dl_381, 0)) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041152C:
	branch rbx_273 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411535:
	rbx_273 = rbx_273 * 0x0000000000000002
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041150E:
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041153C:
	branch rbx_273 >u 0x00000000FFFFFFFF l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041154F:
	rbx_273 = rbx_273 << 0x0000000000000009
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411557:
	word64 rdi_812 = (int64) eax_376
	word64 rax_819 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_812)
	word32 esi_823 = 0x00000007
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041157E:
	word32 r8d_846
	branch rax_819 >=u rbx_273 l000000000041156F
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041156F:
	rbx_273 = rbx_273 *s rdi_812
	word64 r8_868
	*r8Out = 0x0000000000000000
	r8d_846 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411583:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_863
	*r8Out = 0x0000000000000001
	r8d_846 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411576:
	rsi_359 = (uint64) (esi_823 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_846) (alias)
	esi_823 = (word32) rsi_359 (alias)
	branch esi_823 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411592:
	word64 rdi_752 = (int64) eax_376
	word64 rax_759 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_752)
	word32 esi_763 = 0x00000008
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115BD:
	word32 r8d_786
	branch rax_759 >=u rbx_273 l00000000004115AA
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115AA:
	rbx_273 = rbx_273 *s rdi_752
	word64 r8_808
	*r8Out = 0x0000000000000000
	r8d_786 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115C2:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_803
	*r8Out = 0x0000000000000001
	r8d_786 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115B1:
	rsi_359 = (uint64) (esi_763 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_786) (alias)
	esi_763 = (word32) rsi_359 (alias)
	branch esi_763 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115D1:
	rsi_359 = (int64) eax_376
	word64 rax_699 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_359)
	word32 edi_703 = 0x00000004
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115E7:
	word32 r8d_726
	branch rax_699 <u rbx_273 l0000000000411749
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411749:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_750
	*r8Out = 0x0000000000000001
	r8d_726 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115F0:
	rbx_273 = rbx_273 *s rsi_359
	word64 r8_743
	*r8Out = 0x0000000000000000
	r8d_726 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115F7:
	edx_398 = (word32) (uint64) (edx_398 | r8d_726) (alias)
	edi_703 = (word32) (uint64) (edi_703 - 0x00000001) (alias)
	branch edi_703 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115FF:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411604:
	rsi_359 = (int64) eax_376
	word64 rax_639 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_359)
	word32 edi_643 = 0x00000005
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041162F:
	word32 r8d_666
	branch rax_639 >=u rbx_273 l000000000041161C
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041161C:
	rbx_273 = rbx_273 *s rsi_359
	word64 r8_688
	*r8Out = 0x0000000000000000
	r8d_666 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411634:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_683
	*r8Out = 0x0000000000000001
	r8d_666 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411623:
	edx_398 = (word32) (uint64) (edx_398 | r8d_666) (alias)
	edi_643 = (word32) (uint64) (edi_643 - 0x00000001) (alias)
	branch edi_643 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411643:
	rdi_565 = (int64) eax_376
	rsi_359 = 0xFFFFFFFFFFFFFFFF
	word64 rax_612 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_565)
	branch rbx_273 >u rax_612 l000000000041177B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041165E:
	rbx_273 = rbx_273 *s rdi_565
	branch rax_612 <u rbx_273 l000000000041177B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041177B:
	edx_398 = 0x00000001 (alias)
	rbx_273 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411676:
	rdi_565 = (int64) eax_376
	rsi_359 = 0xFFFFFFFFFFFFFFFF
	branch rbx_273 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_565) l000000000041166B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041166B:
	rsi_359 = 0xFFFFFFFFFFFFFFFF
	rbx_273 = rbx_273 *s rdi_565
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041168D:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	edx_398 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116F3:
	rsi_359 = (int64) eax_376
	word64 rax_512 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_359)
	word32 edi_516 = 0x00000003
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411709:
	word32 r8d_539
	branch rax_512 <u rbx_273 l000000000041176C
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041176C:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_563
	*r8Out = 0x0000000000000001
	r8d_539 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041170E:
	rbx_273 = rbx_273 *s rsi_359
	word64 r8_556
	*r8Out = 0x0000000000000000
	r8d_539 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411715:
	edx_398 = (word32) (uint64) (edx_398 | r8d_539) (alias)
	edi_516 = (word32) (uint64) (edi_516 - 0x00000001) (alias)
	branch edi_516 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041171D:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041169A:
	word64 rdi_445 = (int64) eax_376
	word64 rax_452 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_445)
	word32 esi_456 = 0x00000006
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116C5:
	word32 r8d_479
	branch rax_452 >=u rbx_273 l00000000004116B2
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116B2:
	rbx_273 = rbx_273 *s rdi_445
	word64 r8_501
	*r8Out = 0x0000000000000000
	r8d_479 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116CA:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_496
	*r8Out = 0x0000000000000001
	r8d_479 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116B9:
	rsi_359 = (uint64) (esi_456 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_479) (alias)
	esi_456 = (word32) rsi_359 (alias)
	branch esi_456 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411500:
	Mem343[rbp_301:word64] = rbx_273
	eax_169 = (word32) (uint64) ((word32) (uint64) ebp_302 | 0x00000002) (alias)
// DataOut: eax fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116D9:
	branch rbx_273 >u 0x00000000FFFFFFFF l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041175B:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	edx_398 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116E8:
	rbx_273 = rbx_273 << 0x000000000000000A
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411510:
	rbp_301 = (uint64) (ebp_302 | edx_398)
	Mem413[r15_238:word64] = r14_271 + (int64) ecx_371
	ebp_302 = (word32) rbp_301 (alias)
	word32 eax_411 = (word32) (uint64) ((word32) (uint64) ebp_302 | 0x00000002)
	branch Mem413[rsi_359:byte] == 0x00 l0000000000411527
// DataOut: eax ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411524_1:
	ebp_302 = eax_411
	rbp_301 = DPB(rbp_301, eax_411, 0) (alias)
// DataOut: ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411527:
// DataOut: ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411422:
	Mem303[rbp_301:word64] = rbx_273
	word32 ebp_313
	*ebpOut = (word32) rbp
	return (word32) (uint64) ebp_302
// DataOut: eax ebp fs r10 r11 r14b r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004113C0:
	eax_169 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113C5:
	word32 ebp_176
	*ebpOut = (word32) rbp
	return eax_169
// DataOut: eax ebp fs r10 r11 r14b r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000411360_exit:
// DataOut: eax ebp r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp r14:r14 rax:<invalid> rbp:rbp r15:r15 r13:r13 r12:r12 ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:rbx rcx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004117B0_entry:
// DataOut: edi fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r10 r11 r12 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem78[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117B8:
	word64 rax_24 = (uint64) edi
	byte Z_22 = cond(edi - 0x0000000A)
	eax_16 = (word32) rax_24 (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117C8:
	word64 rdx_31 = Mem0[rsi:word64]
	word64 rdi_32 = 0x00000000004137B1
	word64 rcx_34 = 0x000000000000000A
	word64 rsi_35 = rdx_31
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi

l00000000004117D8:
	branch rcx_34 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117D8_1:
	Z_22 = cond(Mem0[rsi_82:byte] - Mem0[rdi_81:byte]) (alias)
	rsi_35 = rsi_82 + 0x0000000000000001
	rdi_32 = rdi_81 + 0x0000000000000001
	rcx_34 = rcx_34 - 0x0000000000000001
	word64 rdi_81 = rdi_32
	word64 rsi_82 = rsi_35
	branch Mem0[rsi_82:byte] != Mem0[rdi_81:byte] l00000000004117D8
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DA:
	branch Z_22 l00000000004117BF
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DC:
	word64 rsp_53
	byte SCZO_54
	word32 edi_55
	byte SZO_56
	byte C_57
	byte Z_58
	word64 rax_59
	word64 rsi_60
	word64 rdx_61
	word64 rdi_62
	word64 rcx_63
	word32 eax_64
	call freecon (retsize: 8; depth: 8)
		uses: C_48,eax_25,edi_50,rax_24,rcx_44,rdi_52,rdx_31,rsi_46,rsp_2,SCZO_51,SZO_49,Z_47
		defs: C_57,eax_64,edi_55,rax_59,rcx_63,rdi_62,rdx_61,rsi_60,rsp_53,SCZO_54,SZO_56,Z_58
	Mem66[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117BF:
	return eax_16
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:v3 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi rsp
fn0000000000411820_entry:
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word64 rsp_7
	word64 rbx_8
	word64 rsi_9
	word32 edi_10
	word32 eax_11
	word64 rdi_12
	byte SCZO_13
	byte SZO_14
	byte C_15
	byte Z_16
	word64 rax_17
	word64 rdx_18
	word32 ecx_19
	word64 rcx_20
	call getfilecon (retsize: 8; depth: 16)
		uses: qwLoc08_4,rbx_6,rsi,rsp_2
		defs: C_15,eax_11,ecx_19,edi_10,rax_17,rbx_8,rcx_20,rdi_12,rdx_18,rsi_9,rsp_7,SCZO_13,SZO_14,Z_16
	word32 edi_23 = (word32) (uint64) eax_11
// DataOut: edi fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182E_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_8, edi_23)
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:rsi rdi:(uint64) eax -8(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx



word32 fn0000000000411840(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi rsp
fn0000000000411840_entry:
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word64 rsp_7
	word64 rbx_8
	word64 rsi_9
	word32 edi_10
	word32 eax_11
	word64 rdi_12
	call lgetfilecon (retsize: 8; depth: 16)
		uses: qwLoc08_4,rbx_6,rsi,rsp_2
		defs: eax_11,edi_10,rbx_8,rdi_12,rsi_9,rsp_7
	word32 edi_15 = (word32) (uint64) eax_11
// DataOut: edi fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_8, edi_15)
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:rsi rdi:(uint64) eax -8(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx



void fn0000000000411880(word64 rax, word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rax rdi
// LiveOut:
// Trashed: SCZO ah al ax bl bx dh dl dx eax ebx edx esi rax rbx rdx rsi si sil
// Preserved: r12 rbp rbx rdi rsp
fn0000000000411880_entry:
// DataOut: r13 r8 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rsp_13
	word64 r12_14
	word64 rbp_15
	word64 rdi_16
	word64 rbx_17
	word32 ebx_18
	word64 rax_19
	byte SZO_20
	byte C_21
	word32 eax_22
	byte dl_23
	byte Z_24
	byte SCZO_25
	byte bl_26
	word64 r8_27
	word64 r13_28
	word64 rsi_29
	call __fpending (retsize: 8; depth: 32)
		uses: qwLoc08_4,qwLoc10_7,qwLoc18_12,r12,rbp_9,rbx,rdi,rsp_10
		defs: bl_26,C_21,dl_23,eax_22,ebx_18,r12_14,r13_28,r8_27,rax_19,rbp_15,rbx_17,rdi_16,rsi_29,rsp_13,SCZO_25,SZO_20,Z_24
	word32 ebx_32 = (word32) (uint64) Mem0[rbp_15:word32]
	word64 rsi_35
	word32 eax_36 = fn0000000000411D30(rbp_15, r8_27, r13_28, out rsi_35)
	branch (word32) (uint64) (ebx_32 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004118C0:
	branch eax_36 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118C9:
	Mem102[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:0x00000000FFFFFFFF rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004118A6:
	branch eax_36 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118AA:
	branch rax_19 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:0x00000000FFFFFFFF rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rdi:rdi r12:r12 dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn0000000000411900(word64 rbp, word64 rsi, word64 r8, word64 r13, word64 r15, selector fs, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r13 r15 r8 rbp rsi
// LiveOut: r10 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000411900_entry:
// DataOut: fs r10 r12d r13 r15 r8 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rdi = 0x000000000000000E
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rsp = fp - 0x00000000000000D8
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	SZO = cond(eax)
	C = false
	call nl_langinfo (retsize: 8; depth: 224)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(0x0000000000000000)
	C = false
	rbx = 0x0000000000000000
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411940_1:
	rbx = 0x0000000000416919
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411949:
// DataOut: fs r10 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C52:
	rdi = rax
	eax = strlen(rdi)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119EF:
	rax = 0x0000000000000007
	r12 = 0x0000000000000008
	r15 = 0x0000000000416FF3
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	r13 = 0x0000000000000001
	dwLocD0 = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r10 r12 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32)

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	dwLocD0 = 0x00000000
// DataOut: fs r10 r12 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> r13:0x0000000000000001 -208(fp):0x00000001 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32)

l0000000000411A19:
	r13 = r13 + r12
	rdi = rbp + 0x000000000000000E
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: fs r10 r12 r13 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32)

l0000000000411CF2:
	r14 = 0x0000000000416919
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:rbp + 0x000000000000000E rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) dwLocD0
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:rbp + 0x000000000000000E rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A4D:
	r13 = r13 + rbp
	rax = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[rbp + 0x0000000000000000:word64] = 0x0000000072616863
	rax = 0x0000000000000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	eax = open(rdi, 0x0000000000020000)
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r10 r12d r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: fs r10 r12d r13 r14 r15 r8 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000020000 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C20:
	rdi = (uint64) r12d
	eax = close(rdi)
// DataOut: fs r10 r13 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411AA2:
	r12 = fp - 0x00000000000000B8
	qwLocD0 = 0x0000000000000000
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: eax fs r10 r13 r14 r15 r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: eax fs r10 r13 r14 r15 r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8; depth: 224)
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411ADF:
	rsi = r15
	eax = ungetc(rdi, rsi)
	rcx = fp - 0x0000000000000078
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = fp - 0x00000000000000B8
	rsi = 0x0000000000417012
	rdi = r15
	call fscanf (retsize: 8; depth: 224)
	SCZO = cond(0xFFFFFFFF)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411B07:
	rdx = fp - 0x00000000000000B8
// DataOut: fs r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B21:
	rcx = (uint64) eax
	r10 = fp - 0x0000000000000078
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r14 r15 r8 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B37_1:
	rdx = rcx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - (fp - 0x00000000000000B8)
	SCZO = cond(rdx)
// DataOut: fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B44:
	rcx = (uint64) Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B66_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r14 r15 r8 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B6D_1:
	r10 = rcx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = fp - 0x0000000000000078
	r10 = r10 - 0x03 - C
	r10 = r10 - (fp - 0x0000000000000078)
	SCZO = cond(qwLocD0 - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411CBC:
	rax = rax + qwLocD0
	SCZO = cond(rax)
	rdi = r14
	qwLocC0 = r10
	qwLocC8 = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	qwLocD0 = rcx
	rax = realloc(rdi, rsi)
	r10 = qwLocC0
	r13 = rax
	rdx = qwLocC8
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	qwLocC0 = rdx
	qwLocC8 = r10
	qwLocD0 = rcx
	rax = malloc(rdi)
	r10 = qwLocC8
	rdx = qwLocC0
	r13 = rax
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411BC1:
	r14 = qwLocD0
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = fp - 0x00000000000000B8
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, fp - 0x00000000000000B8)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = fp - 0x0000000000000078
	r14 = r13
	rax = strcpy(rdi, fp - 0x0000000000000078)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: eax fs r10 r13 r14 r15 r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8; depth: 224)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C9C:
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out rsi)
	rax = qwLocD0
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: fs r10 r13 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C28:
	r14 = 0x0000000000416919
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rbp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411973:
	rsi = r14
	rdi = rbx
	eax = strcmp(rdi, rsi)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411950:
	rdi = r14
	eax = strlen(rdi)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	eax = strlen(rdi)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041198F:
	rdi = r14
	eax = strlen(rdi)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:0xFC -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119A8:
	rcx = qwLoc40
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: fs r10 r13 r14 r15 r8 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:0xFC -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411CFD:
	__stack_chk_fail()
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411D02:
	rdi = r14
	r14 = 0x0000000000416919
	free(rdi)
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out rsi)
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119C2:
	rsp = fp - 0x0000000000000030
	SCZO = cond(fp - 0x0000000000000030)
	rbx = qwLoc30
	rsp = fp - 0x0000000000000028
	rbp = qwLoc28
	rsp = fp - 0x0000000000000020
	r12 = qwLoc20
	rsp = fp - 0x0000000000000018
	r13 = qwLoc18
	rsp = fp - 0x0000000000000010
	r14 = qwLoc10
	rsp = fp - 0x0000000000000008
	r15 = qwLoc08
	rsp = fp
	return rax
// DataOut: fs r10 r12d r8 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000411900_exit:
	use r10 (=> r10Out)
// DataOut: r10 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r14:r14 rbx:rbx ebp:<invalid> rcx:<invalid> rbp:rbp r12:r12 r13:r13 r15:r15 rsi:<invalid> eax:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000411C14:
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)



word32 fn0000000000411D30(word64 rdi, word64 r8, word64 r13, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: r12 rbp rbx rdi rsp
fn0000000000411D30_entry:
	*rsiOut = rsi
// DataOut: ebx fs r10 r13 r14 r15 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word32 eax_13 = fileno(rdi)
	word64 rdi_115 = rdi
	branch eax_13 < 0x00000000 l0000000000411D9F
// DataOut: eax fs r10 r13 r14 r15 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D43:
	word64 rsp_74
	word64 r12_75
	word64 rbp_76
	word64 rdi_78
	byte SZO_80
	byte C_81
	byte S_82
	byte Z_83
	word64 rax_84
	word32 r12d_85
	word32 esi_88
	word64 rsi_89
	word32 edx_90
	word64 rdx_91
	word32 edi_92
	byte SCZO_93
	word64 r13_120
	word64 r8_121
	word32 eax_127
	word64 rbx_111
	call __freading (retsize: 8; depth: 32)
		uses: C_18,eax_13,edi_20,edx,esi,qwLoc08_4,qwLoc10_7,qwLoc18_10,r12,r12d,r13,r8,rax_15,rbp,rbx_12,rdi_19,rdx,rsi,rsp_8,S_17,SCZO,SZO_16,Z
		defs: C_81,eax_79,edi_92,edx_90,esi_88,r12_75,r12d_85,r13_87,r8_86,rax_84,rbp_76,rbx_77,rdi_78,rdx_91,rsi_89,rsp_74,S_82,SCZO_93,SZO_80,Z_83
	branch eax_127 != 0x00000000 l0000000000411D80
// DataOut: eax fs r10 r13 r14 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D80:
	word32 eax_161 = fileno(rbx_111)
	word64 rsp_169
	word64 r12_170
	word64 rbp_171
	word64 rdi_173
	byte SZO_175
	byte C_176
	byte S_177
	byte Z_178
	word64 rax_179
	word32 r12d_180
	word32 esi_183
	word64 rsi_184
	word32 edx_185
	word64 rdx_186
	word32 edi_187
	byte SCZO_188
	call lseek (retsize: 8; depth: 32)
		uses: C_166,eax_161,edi_92,edx_90,esi_164,qwLoc08_4,qwLoc10_7,qwLoc18_10,r12_75,r12d_85,r13_87,r8_86,rax_162,rbp_76,rbx_77,rdi_168,rdx_167,rsi_163,rsp_74,S_82,SCZO_93,SZO_165,Z_95
		defs: C_176,eax_174,edi_187,edx_185,esi_183,r12_170,r12d_180,r13_182,r8_181,rax_179,rbp_171,rbx_172,rdi_173,rdx_186,rsi_184,rsp_169,S_177,SCZO_188,SZO_175,Z_178
	branch rax_179 != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: eax fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D4C:
	word64 rsi_133
	branch fn0000000000411DB0(eax_127, rbx_111, out rsi_133) == 0x00000000 l0000000000411D9C
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D9C:
	rdi_115 = rbx_111
// DataOut: fs r10 r13 r14 r15 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D9F:
	return fclose(rdi_115)
// DataOut: eax ebx fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000411D58:
	__errno_location()
	word32 r12d_141 = (word32) (uint64) Mem0[r8_121:word32]
	word32 eax_144 = fclose(rbx_111)
	branch r12d_141 == 0x00000000 l0000000000411D79
// DataOut: eax fs r10 r12d r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D70:
	Mem157[r13_120:word32] = r12d_141
	eax_144 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D79:
	return eax_144
// DataOut: eax ebx fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000411D30_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rbp:rbp r12:r12 rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn0000000000411DB0(word32 eax, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rbx rdi rsp
fn0000000000411DB0_entry:
	*rsiOut = rsi
// DataOut: eax fs r10 r13 r14 r15 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	word64 rbx_33 = rdi
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: eax fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411DB9:
	word64 rsp_39
	word64 rdi_40
	byte SZO_41
	byte C_42
	byte Z_44
	word32 eax_45
	word32 edx_46
	word64 rdx_47
	word32 esi_48
	word64 rsi_49
	call __freading (retsize: 8; depth: 16)
		uses: C_5,eax,edx,esi,qwLoc08_8,rbx_9,rdi,rdx,rsi,rsp_6,SZO_3,Z_4
		defs: C_42,eax_45,edx_46,esi_48,rbx_43,rdi_40,rdx_47,rsi_49,rsp_39,SZO_41,Z_44
	branch eax_45 != 0x00000000 l0000000000411DD0
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l0000000000411DD0:
	branch (Mem0[rbx_33:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l0000000000411DD8:
	word64 rsi_64
	*rsiOut = fn0000000000411DF0(0x00000001, rbx_33)
	return fflush(rbx_33)
// DataOut: eax fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l0000000000411DC2:
	return fflush(rbx_33)
// DataOut: eax fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:rdi eax:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx



word64 fn0000000000411DF0(word32 edx, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi
// LiveOut: rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000411DF0_entry:
// DataOut: edx fs r10 r13 r14 r15 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	word64 rax_9 = Mem0[rdi + 0x0000000000000008:word64]
	branch Mem0[rdi + 0x0000000000000010:word64] == rax_9 l0000000000411E10
// DataOut: edx fs r10 r13 r14 r15 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	branch Mem0[rdi + 0x0000000000000028:word64] != Mem0[rdi + 0x0000000000000020:word64] l0000000000411E02
// DataOut: edx fs r10 r13 r14 r15 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: edx fs r10 r13 r14 r15 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word32 eax_61 = fileno(rdi)
	word64 rsp_66
	word64 rbx_67
	word64 rdi_68
	byte SCZO_69
	word64 rax_70
	byte Z_71
	word32 edx_72
	word64 rsi_73
	word32 eax_74
	word64 rdx_75
	word32 edi_76
	byte SZO_77
	byte C_78
	call lseek (retsize: 8; depth: 32)
		uses: C,dwLoc0C_59,eax_61,edi,edx,qwLoc08_4,qwLoc18_60,rax_62,rbx_6,rdi_65,rdx_63,rsi_64,rsp_7,SCZO_57,SZO,Z_58
		defs: C_78,eax_74,edi_76,edx_72,rax_70,rbx_67,rdi_68,rdx_75,rsi_73,rsp_66,SCZO_69,SZO_77,Z_71
	branch rax_70 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: fs r10 r13 r14 r15 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem89[rbx_67:word32] = Mem0[rbx_67:word32] & 0xFFFFFFEF
	Mem91[rbx_67 + 0x0000000000000090:word64] = rax_70
// DataOut: fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	return rsi_73
// DataOut: fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx

l0000000000411E02:
	word64 rsp_41
	word64 rbx_42
	word64 rdi_43
	byte SCZO_44
	word64 rax_45
	byte Z_46
	word32 edx_47
	word64 rsi_48
	word32 eax_49
	word64 rdx_50
	word32 edi_51
	byte SZO_52
	byte C_53
	call fseeko (retsize: 8; depth: 8)
		uses: C,dwLoc0C,eax,edi,edx,qwLoc08_4,qwLoc18,rax_9,rbx_30,rdi_29,rdx,rsi,rsp_31,SCZO_28,SZO,Z_11
		defs: C_53,eax_49,edi_51,edx_47,rax_45,rbx_42,rdi_43,rdx_50,rsi_48,rsp_41,SCZO_44,SZO_52,Z_46
	return rsi_48
// DataOut: fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx

fn0000000000411DF0_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx



void fn0000000000411EE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: ebx fs r10 r11 r15 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
	word64 rsp_10
	word64 rax_11
	byte SZO_12
	byte C_13
	byte Z_14
	word64 rdx_15
	word32 esi_16
	word64 rsi_17
	word32 edx_18
	call __cxa_atexit (retsize: 8; depth: 8)
		uses: C_9,esi_7,rax_2,rsi_6,rsp_1,SZO_8,Z_4
		defs: C_13,edx_18,esi_16,rax_11,rdx_15,rsi_17,rsp_10,SZO_12,Z_14
	return
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



