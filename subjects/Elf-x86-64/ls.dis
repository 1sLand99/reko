void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn00000000004028C0(word64 rsi, word32 edi, word64 r9, word64 r10, word64 r11, word64 r14, word64 r15, selector fs, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r10 r11 r14 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004028C0_entry:
// DataOut: edi fs r10 r11 r14 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004028C0:
	word64 rsp_35 = fn000000000040D6A0(Mem0[rsi:word64])
	word64 rsp_38
	word64 r15_39
	word64 r14_40
	word64 r13_41
	word64 r12_42
	word64 rbp_43
	word64 rsi_44
	word64 rbx_45
	word32 ebx_46
	word32 edi_47
	byte SCZO_48
	word64 rdi_49
	word64 rax_50
	selector fs_51
	word32 eax_52
	byte SZO_53
	byte C_54
	word32 esi_55
	byte Z_56
	word32 ecx_57
	word64 rcx_58
	word32 edx_59
	word64 rdx_60
	byte S_61
	word16 ax_62
	byte al_63
	word32 r8d_64
	word64 r8_65
	word32 r14d_66
	word32 r13d_67
	word32 r12d_68
	byte CZ_69
	bcuiposr0 None_70
	word32 r9d_71
	word64 r9_72
	byte cl_73
	byte SO_74
	word32 ebp_75
	byte r13b_76
	word32 r15d_77
	byte r14b_78
	word64 r10_79
	word64 r11_80
	word128 xmm0_81
	word128 xmm1_82
	word128 xmm2_83
	word128 xmm3_84
	byte r12b_85
	byte sil_86
	byte bpl_87
	call setlocale (retsize: 8; depth: 8)
		uses: C_34,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_32,ebx_24,edi,fs,qwLoc28_30,r12,r13,r14,r15,rax_31,rbp_18,rbx_23,rdi_37,rsi_36,rsp_35,SZO_33
		defs: al_63,ax_62,bpl_87,C_54,cl_73,CZ_69,eax_52,ebp_75,ebx_46,ecx_57,edi_47,edx_59,esi_55,fs_51,None_70,r10_79,r11_80,r12_42,r12b_85,r12d_68,r13_41,r13b_76,r13d_67,r14_40,r14b_78,r14d_66,r15_39,r15d_77,r8_65,r8d_64,r9_72,r9d_71,rax_50,rbp_43,rbx_45,rcx_58,rdi_49,rdx_60,rsi_44,rsp_38,S_61,SCZO_48,sil_86,SO_74,SZO_53,xmm0_81,xmm1_82,xmm2_83,xmm3_84,Z_56
	word64 r15_91
	word64 r14_92
	word64 r13_93
	word64 r12_94
	word64 rbp_95
	word64 rsi_96
	word64 rbx_97
	word32 ebx_98
	word32 edi_99
	byte SCZO_100
	word64 rdi_101
	word64 rax_102
	word32 eax_104
	byte SZO_105
	byte C_106
	word32 esi_107
	byte Z_108
	word32 ecx_109
	word64 rcx_110
	word32 edx_111
	word64 rdx_112
	byte S_113
	word16 ax_114
	byte al_115
	word32 r8d_116
	word64 r8_117
	word32 r14d_118
	word32 r13d_119
	word32 r12d_120
	byte CZ_121
	bcuiposr0 None_122
	word32 r9d_123
	word64 r9_124
	byte cl_125
	byte SO_126
	word32 ebp_127
	byte r13b_128
	word32 r15d_129
	byte r14b_130
	word64 r10_131
	word128 xmm0_133
	word128 xmm1_134
	word128 xmm2_135
	word128 xmm3_136
	byte r12b_137
	byte sil_138
	byte bpl_139
	word64 rsp_240
	selector fs_103
	word64 r11_1054
	call bindtextdomain (retsize: 8; depth: 8)
		uses: al_63,ax_62,bpl_87,C_54,cl_73,CZ_69,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_52,ebp_75,ebx_46,ecx_57,edi_47,edx_59,esi_55,fs_51,None_70,qwLoc28_30,r10_79,r11_80,r12_42,r12b_85,r12d_68,r13_41,r13b_76,r13d_67,r14_40,r14b_78,r14d_66,r15_39,r15d_77,r8_65,r8d_64,r9_72,r9d_71,rax_50,rbp_43,rbx_45,rcx_58,rdi_89,rdx_60,rsi_88,rsp_38,S_61,SCZO_48,sil_86,SO_74,SZO_53,xmm0_81,xmm1_82,xmm2_83,xmm3_84,Z_56
		defs: al_115,ax_114,bpl_139,C_106,cl_125,CZ_121,eax_104,ebp_127,ebx_98,ecx_109,edi_99,edx_111,esi_107,fs_103,None_122,r10_131,r11_132,r12_94,r12b_137,r12d_120,r13_93,r13b_128,r13d_119,r14_92,r14b_130,r14d_118,r15_91,r15d_129,r8_117,r8d_116,r9_124,r9d_123,rax_102,rbp_95,rbx_97,rcx_110,rdi_101,rdx_112,rsi_96,rsp_90,S_113,SCZO_100,sil_138,SO_126,SZO_105,xmm0_133,xmm1_134,xmm2_135,xmm3_136,Z_108
	textdomain(0x0000000000413800)
	Mem143[0x000000000061A580:word32] = 0x00000002
	fn0000000000411EE0()
	Mem145[0x000000000061B030:word32] = 0x00000000
	Mem146[0x000000000061B0D0:byte] = 0x01
	Mem147[0x000000000061B180:word64] = 0x0000000000000000
	word32 eax_150 = (word32) (uint64) Mem147[0x000000000061A56C:word32]
	Mem153[0x000000000061B190:word64] = 0x0000000000000000
	Mem154[0x000000000061B188:word64] = 0xFFFFFFFFFFFFFFFF
	Mem155[0x000000000061B0F0:byte] = 0x00
	branch eax_150 == 0x00000002 l0000000000403203
// DataOut: eax ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040297B:
	branch eax_150 == 0x00000003 l00000000004029AF
// DataOut: eax ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004029AF:
	Mem6538[0x000000000061B150:word32] = 0x00000000
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402980:
	word64 rax_6468 = (uint64) (eax_150 - 0x00000001)
	word32 eax_6470 = (word32) rax_6468
	branch eax_6470 == 0x00000000 l000000000040298A
// DataOut: eax ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040298A:
	word64 r15_6477
	word64 r14_6478
	word64 r13_6479
	word64 r12_6480
	word64 rbp_6481
	word64 rsi_6482
	word64 rbx_6483
	word32 ebx_6484
	word32 edi_6485
	byte SCZO_6486
	word64 rdi_6487
	word64 rax_6488
	word32 eax_6490
	byte SZO_6491
	byte C_6492
	word32 esi_6493
	byte Z_6494
	word32 ecx_6495
	word64 rcx_6496
	word32 edx_6497
	word64 rdx_6498
	byte S_6499
	word16 ax_6500
	byte al_6501
	word32 r8d_6502
	word64 r8_6503
	word32 r14d_6504
	word32 r13d_6505
	word32 r12d_6506
	byte CZ_6507
	bcuiposr0 None_6508
	word32 r9d_6509
	word64 r9_6510
	byte cl_6511
	byte SO_6512
	word32 ebp_6513
	byte r13b_6514
	word32 r15d_6515
	byte r14b_6516
	word64 r10_6517
	word128 xmm0_6519
	word128 xmm1_6520
	word128 xmm2_6521
	word128 xmm3_6522
	byte r12b_6523
	byte sil_6524
	byte bpl_6525
	call isatty (retsize: 8; depth: 8)
		uses: al_6472,ax_6471,bpl_139,C_106,cl_125,CZ_121,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_6470,ebp_127,ebx_98,ecx_109,edi_99,edx_111,esi_107,fs_103,None_122,qwLoc04,qwLoc08,qwLoc28_30,r10_131,r11_132,r12_94,r12b_137,r12d_120,r13_93,r13b_128,r13d_119,r14_92,r14b_130,r14d_118,r15_91,r15d_129,r8_117,r8d_116,r9_124,r9d_123,rax_6468,rbp_95,rbx_97,rcx_110,rdi_6475,rdx_112,rsi_96,rsp_90,S_113,SCZO_6473,sil_138,SO_126,SZO_105,xmm0_133,xmm1_134,xmm2_135,xmm3_136,Z_6474
		defs: al_6501,ax_6500,bpl_6525,C_6492,cl_6511,CZ_6507,eax_6490,ebp_6513,ebx_6484,ecx_6495,edi_6485,edx_6497,esi_6493,fs_6489,None_6508,r10_6517,r11_6518,r12_6480,r12b_6523,r12d_6506,r13_6479,r13b_6514,r13d_6505,r14_6478,r14b_6516,r14d_6504,r15_6477,r15d_6515,r8_6503,r8d_6502,r9_6510,r9d_6509,rax_6488,rbp_6481,rbx_6483,rcx_6496,rdi_6487,rdx_6498,rsi_6482,rsp_6476,S_6499,SCZO_6486,sil_6524,SO_6512,SZO_6491,xmm0_6519,xmm1_6520,xmm2_6521,xmm3_6522,Z_6494
	branch eax_6490 == 0x00000000 l00000000004037EC
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004037EC:
	Mem6531[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040299C:
	Mem6529[0x000000000061B150:word32] = 0x00000002
	Mem6530[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004029C5:
	Mem303[0x000000000061B14C:word32] = 0x00000000
	Mem304[0x000000000061B148:word32] = 0x00000000
	Mem305[0x000000000061B147:byte] = 0x00
	Mem306[0x000000000061B145:byte] = 0x00
	Mem307[0x000000000061B144:byte] = 0x00
	Mem308[0x000000000061B12C:word32] = 0x00000000
	Mem309[0x000000000061B114:byte] = 0x00
	Mem310[0x000000000061B110:word32] = 0x00000001
	Mem311[0x000000000061B10E:byte] = 0x00
	Mem312[0x000000000061B10D:byte] = 0x00
	Mem313[0x000000000061B108:word32] = 0x00000000
	Mem314[0x000000000061B100:word64] = 0x0000000000000000
	Mem315[0x000000000061B0F8:word64] = 0x0000000000000000
	Mem316[0x000000000061B17D:byte] = 0x00
	word64 rax_317 = getenv(0x000000000041382E)
	branch rax_317 == 0x0000000000000000 l0000000000402A7F
// DataOut: ebx fs r10 r11 r15 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402A50:
	word64 rbp_6377
	word64 r12_6378
	word64 r14_6379
	word64 r15_6380
	word64 rax_6381 = fn0000000000409E50(0x0000000000000004, 0x0000000000416460, 0x0000000000416480, rax_317, qwLoc08, qwArg00, qwArg08, out rsp_240, out rbp_6377, out r12_6378, out r14_6379, out r15_6380)
	word32 eax_6383 = (word32) rax_6381
	byte al_6385 = (byte) rax_6381
	branch eax_6383 < 0x00000000 l0000000000403786
// DataOut: al ebx fs r10 r11 r14 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000041382E rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403786:
	word64 r9_6398
	word64 r10_6399
	word64 r11_6400
	word64 r15_6401
	word32 ebx_6402 = fn000000000040E930(r11_1054, r14_6379, r15_6380, fs_103, out r9_6398, out r10_6399, out r11_6400, out r15_6401)
	dcgettext(0x0000000000000000, 0x0000000000415B00, 0x0000000000000005)
	word64 r15_6417
	word64 r14_6418
	word64 r13_6419
	word64 r12_6420
	word64 rbp_6421
	word64 rsi_6422
	word64 rbx_6423
	word32 ebx_6424
	word32 edi_6425
	byte SCZO_6426
	word64 rdi_6427
	word64 rax_6428
	word32 eax_6430
	byte SZO_6431
	byte C_6432
	word32 esi_6433
	byte Z_6434
	word32 ecx_6435
	word64 rcx_6436
	word32 edx_6437
	word64 rdx_6438
	byte S_6439
	word16 ax_6440
	byte al_6441
	word32 r8d_6442
	word64 r8_6443
	word32 r14d_6444
	word32 r13d_6445
	word32 r12d_6446
	byte CZ_6447
	bcuiposr0 None_6448
	word32 r9d_6449
	word64 r9_6450
	byte cl_6451
	byte SO_6452
	word32 ebp_6453
	byte r13b_6454
	word32 r15d_6455
	byte r14b_6456
	word64 r10_6457
	word128 xmm0_6459
	word128 xmm1_6460
	word128 xmm2_6461
	word128 xmm3_6462
	byte r12b_6463
	byte sil_6464
	byte bpl_6465
	call error (retsize: 8; depth: 8)
		uses: al_6385,ax_6384,bpl_261,C_6415,cl_271,CZ_292,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_6383,ebp_269,ebx_6402,ecx_279,edi_293,edx_283,esi_298,fs_280,None_273,qwLoc04,qwLoc08,qwLoc28_30,r10_6399,r11_6400,r12_6405,r12b_262,r12d_274,r13_288,r13b_268,r13d_275,r14_6379,r14b_267,r14d_276,r15_6401,r15d_282,r8_300,r8d_277,r9_6398,r9d_272,rax_6413,rbp_6377,rbx_6403,rcx_6409,rdi_6412,rdx_6410,rsi_6411,rsp_6376,S_6387,SCZO_295,sil_297,SO_270,SZO_6414,xmm0_266,xmm1_265,xmm2_264,xmm3_263,Z_323
		defs: al_6441,ax_6440,bpl_6465,C_6432,cl_6451,CZ_6447,eax_6430,ebp_6453,ebx_6424,ecx_6435,edi_6425,edx_6437,esi_6433,fs_6429,None_6448,r10_6457,r11_6458,r12_6420,r12b_6463,r12d_6446,r13_6419,r13b_6454,r13d_6445,r14_6418,r14b_6456,r14d_6444,r15_6417,r15d_6455,r8_6443,r8d_6442,r9_6450,r9d_6449,rax_6428,rbp_6421,rbx_6423,rcx_6436,rdi_6427,rdx_6438,rsi_6422,rsp_6416,S_6439,SCZO_6426,sil_6464,SO_6452,SZO_6431,xmm0_6459,xmm1_6460,xmm2_6461,xmm3_6462,Z_6434
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402A6F:
	fn000000000040E640((word32) (uint64) Mem316[DPB(rax_6381, (int16) al_6385, 0) * 0x0000000000000004 + 0x00416460:word32], 0x0000000000000000)
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402A7F:
	Mem370[0x000000000061B0C8:word64] = 0x0000000000000050
	word64 rax_371 = getenv(0x000000000041383C)
	Mem379[rsp_240 + 0x0000000000000020:word64] = rsp_240 + 0x0000000000000040
	branch rax_371 == 0x0000000000000000 l0000000000402AB1
// DataOut: ebx fs r10 r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:(int16) al r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402AA6:
	branch Mem379[rax_371:byte] != 0x00 l00000000004037B8
// DataOut: ebx fs r10 r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004037B8:
	word32 ebx_6283
	word64 rsp_6284
	word64 r9_6285
	word64 r14_6286
	word64 r15_6287
	word32 eax_6288 = fn0000000000410E90(0x00000000, 0x0000000000000000, rax_371, 0x0000000000000000, qwLoc08, qwArg00, qwArg08, out ebx_6283, out rsp_6284, out r9_6285, out r14_6286, out r15_6287)
	branch eax_6288 != 0x00000000 l0000000000403A93
// DataOut: ebx fs r10 r11 r14 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004037D2:
	word64 rax_6363 = Mem379[rsp_6284 + 0x0000000000000040:word64]
	branch rax_6363 == 0x0000000000000000 l0000000000403A93
// DataOut: ebx fs r10 r11 r14 r15 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403A93:
	word64 r9_6295
	word64 r10_6296
	word64 r11_6297
	word64 r15_6298
	word32 ebx_6299 = fn000000000040E930(r11_1054, r14_6286, r15_6287, fs_103, out r9_6295, out r10_6296, out r11_6297, out r15_6298)
	dcgettext(0x0000000000000000, 0x0000000000415B48, 0x0000000000000005)
	word64 rsp_6313
	word64 r15_6314
	word64 r14_6315
	word64 r13_6316
	word64 r12_6317
	word64 rbp_6318
	word64 rsi_6319
	word64 rbx_6320
	word32 ebx_6321
	word32 edi_6322
	byte SCZO_6323
	word64 rdi_6324
	word64 rax_6325
	selector fs_6326
	word32 eax_6327
	byte SZO_6328
	byte C_6329
	word32 esi_6330
	byte Z_6331
	word32 ecx_6332
	word64 rcx_6333
	word32 edx_6334
	word64 rdx_6335
	byte S_6336
	word16 ax_6337
	byte al_6338
	word32 r8d_6339
	word64 r8_6340
	word32 r14d_6341
	word32 r13d_6342
	word32 r12d_6343
	byte CZ_6344
	bcuiposr0 None_6345
	word32 r9d_6346
	word64 r9_6347
	byte cl_6348
	byte SO_6349
	word32 ebp_6350
	byte r13b_6351
	word32 r15d_6352
	byte r14b_6353
	word64 r10_6354
	word64 r11_6355
	word128 xmm0_6356
	word128 xmm1_6357
	word128 xmm2_6358
	word128 xmm3_6359
	byte r12b_6360
	byte sil_6361
	byte bpl_6362
	call error (retsize: 8; depth: 8)
		uses: al_368,ax_359,bpl_326,C_6312,cl_335,CZ_355,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_6288,ebp_333,ebx_6299,ecx_342,edi_356,edx_6277,esi_364,fs_343,None_337,qwLoc04,qwLoc08,qwLoc28_30,r10_6296,r11_6297,r12_6302,r12b_374,r12d_373,r13_351,r13b_332,r13d_338,r14_6286,r14b_331,r14d_339,r15_6298,r15d_345,r8_6275,r8d_340,r9_6295,r9d_336,rax_6310,rbp_350,rbx_6300,rcx_6306,rdi_6309,rdx_6307,rsi_6308,rsp_6284,S_341,SCZO_6273,sil_363,SO_334,SZO_6311,xmm0_330,xmm1_329,xmm2_328,xmm3_327,Z_6290
		defs: al_6338,ax_6337,bpl_6362,C_6329,cl_6348,CZ_6344,eax_6327,ebp_6350,ebx_6321,ecx_6332,edi_6322,edx_6334,esi_6330,fs_6326,None_6345,r10_6354,r11_6355,r12_6317,r12b_6360,r12d_6343,r13_6316,r13b_6351,r13d_6342,r14_6315,r14b_6353,r14d_6341,r15_6314,r15d_6352,r8_6340,r8d_6339,r9_6347,r9d_6346,rax_6325,rbp_6318,rbx_6320,rcx_6333,rdi_6324,rdx_6335,rsi_6319,rsp_6313,S_6336,SCZO_6323,sil_6361,SO_6349,SZO_6328,xmm0_6356,xmm1_6357,xmm2_6358,xmm3_6359,Z_6331
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004037E0:
	Mem6371[0x000000000061B0C8:word64] = rax_6363
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402AB1:
	word64 r15_389
	word64 r14_390
	word64 r13_391
	word64 r12_392
	word64 rbp_393
	word64 rsi_394
	word64 rbx_395
	word32 ebx_396
	word32 edi_397
	byte SCZO_398
	word64 rdi_399
	word64 rax_400
	selector fs_401
	word32 eax_402
	byte SZO_403
	byte C_404
	word32 esi_405
	byte Z_406
	word32 ecx_407
	word64 rcx_408
	word32 edx_409
	word64 rdx_410
	byte S_411
	word16 ax_412
	byte al_413
	word32 r8d_414
	word64 r8_415
	word32 r14d_416
	word32 r13d_417
	word32 r12d_418
	byte CZ_419
	bcuiposr0 None_420
	word32 r9d_421
	word64 r9_422
	byte cl_423
	byte SO_424
	word32 ebp_425
	byte r13b_426
	word32 r15d_427
	byte r14b_428
	word64 r10_429
	word64 r11_430
	word128 xmm0_431
	word128 xmm1_432
	word128 xmm2_433
	word128 xmm3_434
	byte r12b_435
	byte sil_436
	byte bpl_437
	word64 rsp_388
	call ioctl (retsize: 8; depth: 8)
		uses: al_368,ax_359,bpl_326,C_385,cl_335,CZ_355,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_358,ebp_333,ebx_347,ecx_342,edi_356,edx_346,esi_364,fs_343,None_337,qwLoc28_30,r10_348,r11_349,r12_372,r12b_374,r12d_373,r13_351,r13b_332,r13d_338,r14_352,r14b_331,r14d_339,r15_353,r15d_345,r8_366,r8d_340,r9_365,r9d_336,rax_383,rbp_350,rbx_344,rcx_360,rdi_387,rdx_382,rsi_386,rsp_380,S_341,SCZO_361,sil_363,SO_334,SZO_384,xmm0_330,xmm1_329,xmm2_328,xmm3_327,Z_377
		defs: al_413,ax_412,bpl_437,C_404,cl_423,CZ_419,eax_402,ebp_425,ebx_396,ecx_407,edi_397,edx_409,esi_405,fs_401,None_420,r10_429,r11_430,r12_392,r12b_435,r12d_418,r13_391,r13b_426,r13d_417,r14_390,r14b_428,r14d_416,r15_389,r15d_427,r8_415,r8d_414,r9_422,r9d_421,rax_400,rbp_393,rbx_395,rcx_408,rdi_399,rdx_410,rsi_394,rsp_388,S_411,SCZO_398,sil_436,SO_424,SZO_403,xmm0_431,xmm1_432,xmm2_433,xmm3_434,Z_406
	branch 0x00000001 == 0x00000000 l0000000000402ADD
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402ACC:
	word32 eax_6264 = (word32) Mem379[rsp_388 + 0x0000000000000042:word16]
	word64 rax_6265 = DPB(rax_400, eax_6264, 0)
	branch (word16) eax_6264 == 0x0000 l0000000000402ADD
// DataOut: ebx fs r10 r11 r15 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402AD6:
	Mem6272[0x000000000061B0C8:word64] = rax_6265
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402ADD:
	word64 rax_441 = getenv(0x0000000000413844)
	Mem450[0x000000000061B0D8:word64] = 0x0000000000000008
	branch rax_441 == 0x0000000000000000 l0000000000402B22
// DataOut: eax ebx fs r10 r11 r15 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402AFA:
	word32 ebx_6176
	word64 r9_6178
	word64 r14_6179
	word64 r15_6180
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, rax_441, 0x0000000000000000, qwLoc08, qwArg00, qwArg08, out ebx_6176, out rsp_388, out r9_6178, out r14_6179, out r15_6180) != 0x00000000 l00000000004041BB
// DataOut: ebx fs r10 r11 r14 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413844 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00413844 r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004041BB:
	word64 r9_6192
	word64 r10_6193
	word64 r11_6194
	word64 r15_6195
	word32 ebx_6196 = fn000000000040E930(r11_430, r14_6179, r15_6180, fs_401, out r9_6192, out r10_6193, out r11_6194, out r15_6195)
	dcgettext(0x0000000000000000, 0x0000000000415B88, 0x0000000000000005)
	word64 r15_6215
	word64 r14_6216
	word64 r13_6217
	word64 r12_6218
	word64 rbp_6219
	word64 rsi_6220
	word64 rbx_6221
	word32 ebx_6222
	word32 edi_6223
	byte SCZO_6224
	word64 rdi_6225
	word64 rax_6226
	selector fs_6227
	word32 eax_6228
	byte SZO_6229
	byte C_6230
	word32 esi_6231
	byte Z_6232
	word32 ecx_6233
	word64 rcx_6234
	word32 edx_6235
	word64 rdx_6236
	byte S_6237
	word16 ax_6238
	byte al_6239
	word32 r8d_6240
	word64 r8_6241
	word32 r14d_6242
	word32 r13d_6243
	word32 r12d_6244
	byte CZ_6245
	bcuiposr0 None_6246
	word32 r9d_6247
	word64 r9_6248
	byte cl_6249
	byte SO_6250
	word32 ebp_6251
	byte r13b_6252
	word32 r15d_6253
	byte r14b_6254
	word64 r10_6255
	word64 r11_6256
	word128 xmm0_6257
	word128 xmm1_6258
	word128 xmm2_6259
	word128 xmm3_6260
	byte r12b_6261
	byte sil_6262
	byte bpl_6263
	call error (retsize: 8; depth: 8)
		uses: al_6211,ax_6210,bpl_437,C_6213,cl_423,CZ_419,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_6209,ebp_425,ebx_6196,ecx_407,edi_397,edx_6171,esi_405,fs_401,None_420,qwLoc04,qwLoc08,qwLoc28_30,r10_6193,r11_6194,r12_6199,r12b_435,r12d_418,r13_391,r13b_426,r13d_417,r14_6179,r14b_428,r14d_416,r15_6195,r15d_427,r8_6169,r8d_414,r9_6192,r9d_421,rax_6207,rbp_393,rbx_6197,rcx_6203,rdi_6206,rdx_6204,rsi_6205,rsp_6177,S_411,SCZO_438,sil_436,SO_424,SZO_6212,xmm0_431,xmm1_432,xmm2_433,xmm3_434,Z_6183
		defs: al_6239,ax_6238,bpl_6263,C_6230,cl_6249,CZ_6245,eax_6228,ebp_6251,ebx_6222,ecx_6233,edi_6223,edx_6235,esi_6231,fs_6227,None_6246,r10_6255,r11_6256,r12_6218,r12b_6261,r12d_6244,r13_6217,r13b_6252,r13d_6243,r14_6216,r14b_6254,r14d_6242,r15_6215,r15d_6253,r8_6241,r8d_6240,r9_6248,r9d_6247,rax_6226,rbp_6219,rbx_6221,rcx_6234,rdi_6225,rdx_6236,rsi_6220,rsp_6214,S_6237,SCZO_6224,sil_6262,SO_6250,SZO_6229,xmm0_6257,xmm1_6258,xmm2_6259,xmm3_6260,Z_6232
// DataOut: eax ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402B16:
	Mem6190[0x000000000061B0D8:word64] = Mem450[rsp_388 + 0x0000000000000040:word64]
// DataOut: eax ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402B22:
	Mem473[rsp_388 + 0x0000000000000038:word32] = 0xFFFFFFFF
	word64 r13_477
	word64 r12_478
	word64 rbp_479
	word64 rsi_480
	word64 rbx_481
	word32 ebx_482
	word32 edi_483
	byte SCZO_484
	word64 rdi_485
	word64 rax_486
	word32 eax_488
	byte SZO_489
	byte C_490
	word32 esi_491
	byte Z_492
	word32 ecx_493
	word64 rcx_494
	word32 edx_495
	word64 rdx_496
	byte S_497
	word16 ax_498
	byte al_499
	word32 r8d_500
	word32 r14d_502
	word32 r13d_503
	word32 r12d_504
	byte CZ_505
	bcuiposr0 None_506
	word32 r9d_507
	byte cl_509
	byte SO_510
	word32 ebp_511
	word32 r15d_513
	byte r14b_514
	byte r12b_521
	byte sil_522
	byte r13b_512
	byte bpl_1029
	word128 xmm3_1031
	word128 xmm2_1032
	word128 xmm1_1033
	word128 xmm0_1034
	word64 r10_1053
	word64 r15_1059
	word64 r9_1065
	word64 r8_1066
	word64 r14_1058
	call getopt_long (retsize: 8; depth: 8)
		uses: al_445,ax_444,bpl_437,C_465,cl_423,CZ_419,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_443,ebp_425,ebx_451,ecx_407,edi_397,edx_409,esi_405,fs_401,None_420,qwLoc28_30,r10_429,r11_430,r12_461,r12b_463,r12d_462,r13_458,r13b_460,r13d_459,r14_455,r14b_457,r14d_456,r15_389,r15d_427,r8_466,r8d_467,r9_422,r9d_421,rax_454,rbp_452,rbx_395,rcx_468,rdi_472,rdx_469,rsi_471,rsp_453,S_411,SCZO_438,sil_436,SO_424,SZO_464,xmm0_431,xmm1_432,xmm2_433,xmm3_434,Z_447
		defs: al_499,ax_498,bpl_523,C_490,cl_509,CZ_505,eax_488,ebp_511,ebx_482,ecx_493,edi_483,edx_495,esi_491,fs_487,None_506,r10_515,r11_516,r12_478,r12b_521,r12d_504,r13_477,r13b_512,r13d_503,r14_476,r14b_514,r14d_502,r15_475,r15d_513,r8_501,r8d_500,r9_508,r9d_507,rax_486,rbp_479,rbx_481,rcx_494,rdi_485,rdx_496,rsi_480,rsp_474,S_497,SCZO_484,sil_522,SO_510,SZO_489,xmm0_517,xmm1_518,xmm2_519,xmm3_520,Z_492
	branch eax_488 == 0xFFFFFFFF l000000000040321E
// DataOut: eax ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040321E:
	branch Mem473[0x000000000061B138:word64] == 0x0000000000000000 l000000000040398A
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040398A:
	r8_1066 = fn000000000040C810(0x000000000061B138, getenv(0x00000000004138E1), r8_1066, r12_478, r13_477, out r9_1065, out r13b_512, out r14_1058, out r15_1059)
	branch r15_1059 == 0x0000000000000000 l0000000000404531
// DataOut: fs r10 r11 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404531:
	branch getenv(0x00000000004138E4) != 0x0000000000000000 l00000000004039B2
// DataOut: fs r10 r11 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404544:
// DataOut: fs r10 r11 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:0x004138E4 r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004039B2:
	Mem6160[0x000000000061B134:word32] = (word32) (uint64) Mem473[0x000000000061B140:word32]
	Mem6162[0x000000000061A560:word64] = Mem6160[0x000000000061B138:word64]
// DataOut: fs r10 r11 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004039CC:
	branch r14b_514 == 0x00 l000000000040322C
// DataOut: fs r10 r11 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004039D5:
	Mem6152[0x000000000061B140:word32] = 0x00000000
	Mem6153[0x000000000061B138:word64] = 0x0000000000000400
// DataOut: fs r10 r11 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040322C:
	word64 rdx_673 = Mem473[0x000000000061B0C8:word64]
	word64 rax_6124 = 0x0000000000000001
	branch rdx_673 >u 0x0000000000000002 l00000000004037FB
// DataOut: fs r10 r11 r13b r14 r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004037FB:
	rax_6124 = (uint64) ((uint128) (uint64) rdx_673 /u 0x0000000000000003)
// DataOut: fs r10 r11 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:0x01 r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403242:
	Mem691[0x000000000061B020:word64] = rax_6124
	word32 ebx_692
	word64 rsp_693
	word64 rbp_694
	word64 r12_695
	word64 rax_696 = fn000000000040E600(0x0000000000000000, r8_1066, r11_1054, out ebx_692, out rsp_693, out rbp_694, out r12_695)
	Mem698[0x000000000061B0E8:word64] = rax_696
	branch fn000000000040E630(rax_696) == 0x00000005 l000000000040426C
// DataOut: fs r10 r11 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040426C:
	fn000000000040E650(0x00000001, 0x00000020, Mem698[0x000000000061B0E8:word64])
// DataOut: fs r10 r11 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403268:
	word64 rax_707 = (uint64) Mem698[0x000000000061B12C:word32]
	branch (word32) rax_707 <=u 0x00000001 l00000000004032A9
// DataOut: fs r10 r11 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403273:
	r14_1058 = r8_1066 + 0x00000000004138ED
	byte al_6087 = (byte) (word32) Mem698[rax_707 + 0x00000000004138ED:byte]
	branch al_6087 == 0x00 l00000000004032A9
// DataOut: al fs r10 r11 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403289:
	r14_1058 = r14_1058 + 0x0000000000000001
	al_6087 = (byte) (word32) Mem698[fn000000000040E650(0x00000001, (int32) al_6087, Mem698[0x000000000061B0E8:word64]):byte] (alias)
	branch al_6087 != 0x00 l0000000000403289
// DataOut: al fs r10 r11 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> sil:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004032A9:
	word64 rsp_1060
	word32 ebx_1052
	word64 rbp_1055
	word64 r12_1154
	word64 rax_728 = fn000000000040E600(0x0000000000000000, r8_1066, r11_1054, out ebx_1052, out rsp_1060, out rbp_1055, out r12_1154)
	Mem734[0x000000000061B0E0:word64] = rax_728
	word64 rsi_1069 = fn000000000040E650(0x00000001, 0x0000003A, rax_728)
	branch Mem734[0x000000000061B130:byte] == 0x00 l00000000004032E2
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004032D2:
	branch Mem734[0x000000000061B150:word32] == 0x00000000 l00000000004032E2
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004032DB:
	Mem6078[0x000000000061B130:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004032E2:
	word64 rax_5835 = (uint64) ((word32) (uint64) Mem734[0x000000000061B14C:word32] - 0x00000001)
	branch (word32) rax_5835 <=u 0x00000001 l0000000000403965
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403965:
	branch r13b_512 != 0x00 l00000000004032F4
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040396E:
	branch Mem734[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040397B:
	Mem6075[0x000000000061B148:word32] = 0x00000004
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004032F4:
	branch Mem734[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040380D:
	byte Z_5818 = cond(r12_1154)
	branch r12_1154 == 0x0000000000000000 l00000000004045C6
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004045C6:
	word64 rax_6044 = getenv(0x00000000004138F5)
	r12_1154 = rax_6044
	Z_5818 = cond(rax_6044) (alias)
	rax_5835 = 0x0000000000413827
	branch rax_6044 != 0x0000000000000000 l00000000004045DF
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004045DB_1:
	r12_1154 = 0x0000000000413827
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:0x27 r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004045DF:
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:0x27 r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403816:
	r14_1058 = 0x0000000000412CA0
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040383E:
	word64 rsi_5859 = r12_1154
	word64 rdi_5862 = 0x0000000000412CA0
	word64 rcx_5864 = 0x0000000000000006
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403847:
	branch rcx_5864 == 0x0000000000000000 l0000000000403849
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403847_1:
	Z_5818 = cond(Mem734[rsi_6539:byte] - Mem734[rdi_6540:byte]) (alias)
	rsi_5859 = rsi_6539 + 0x0000000000000001
	rdi_5862 = rdi_6540 + 0x0000000000000001
	rcx_5864 = rcx_5864 - 0x0000000000000001
	word64 rsi_6539 = rsi_5859
	word64 rdi_6540 = rdi_5862
	branch Mem734[rsi_6539:byte] != Mem734[rdi_6540:byte] l0000000000403847
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403849:
	branch Z_5818 l0000000000403828
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403828:
	rax_5835 = fn000000000040AB70(rax_5835, out rsi_1069)
	branch (byte) rax_5835 == 0x00 l0000000000403301
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040383A:
	r12_1154 = r12_1154 + 0x0000000000000006
	Z_5818 = cond(r12_1154) (alias)
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x00000002 r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040384B:
	branch Mem734[r12_1154:byte] == 0x2B l00000000004043D9
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403856:
	word64 r12_5905
	word64 rax_5908 = fn0000000000409E50(0x0000000000000004, 0x00000000004136F0, 0x0000000000413700, r12_1154, qwLoc08, qwArg00, qwArg08, out rsp_1060, out rbp_1055, out r12_5905, out r14_1058, out r15_1059)
	branch rax_5908 < 0x0000000000000000 l0000000000404564
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404564:
	word64 rbp_5959
	word64 r9_5960
	word64 r10_5961
	word64 r15_5963
	fn0000000000409F80(rax_5908, r11_1054, r14_1058, r15_1059, fs_103, out rsp_240, out rbp_5959, out r9_5960, out r10_5961, out r11_1054, out r15_5963)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413928, 0x0000000000000005), Mem734[0x000000000061A650:word64])
	word64 rbx_5974 = 0x0000000000413700
// DataOut: fs r10 r11 r15 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040459C:
	branch Mem734[rbx_5974:word64] == 0x0000000000000000 l00000000004031D6
// DataOut: fs r10 r11 r15 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004031D6:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415BF8, 0x0000000000000005), Mem734[0x000000000061A650:word64])
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004045A8:
	__fprintf_chk(Mem734[0x000000000061A650:word64], 0x0000000000000001, 0x000000000041393E)
	rbx_5974 = rbx_5974 + 0x0000000000000008
// DataOut: fs r10 r11 r15 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403876:
	branch rax_5908 == 0x0000000000000001 l0000000000404549
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404549:
	Mem5953[0x000000000061A3D8:word64] = 0x0000000000413966
	Mem5954[0x000000000061A3D0:word64] = 0x0000000000413966
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403880:
	branch rax_5908 <= 0x0000000000000001 l0000000000404465
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404465:
	branch rax_5908 != 0x0000000000000000 l00000000004038A8
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040446E:
	Mem5951[0x000000000061A3D8:word64] = 0x000000000041394E
	Mem5952[0x000000000061A3D0:word64] = 0x000000000041394E
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403886:
	branch rax_5908 == 0x0000000000000002 l00000000004045F3
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004045F3:
	Mem5946[0x000000000061A3D0:word64] = 0x0000000000413975
	Mem5947[0x000000000061A3D8:word64] = 0x0000000000413969
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403890:
	branch rax_5908 != 0x0000000000000003 l00000000004038A8
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403896:
	word64 rsi_5928
	branch (byte) fn000000000040AB70(rax_5908, out rsi_5928) != 0x00 l000000000040460E
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040460E:
	word64 rax_5937 = dcgettext(0x0000000000000000, Mem734[0x000000000061A3D0:word64], 0x0000000000000002)
	word64 rsi_5938 = Mem734[0x000000000061A3D8:word64]
	Mem5943[0x000000000061A3D0:word64] = rax_5937
	Mem5945[0x000000000061A3D8:word64] = dcgettext(0x0000000000000000, rsi_5938, 0x0000000000000002)
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x004136F0 cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:0x00000002 r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403301:
	word64 r12_1425 = (uint64) Mem734[0x000000000061A620:word32]
	word32 r12d_1426 = (word32) r12_1425
	byte r12b_1427 = (byte) r12_1425
	branch Mem734[0x000000000061B129:byte] != 0x00 l0000000000403AC5
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403AC5:
	word64 rax_5185 = getenv(0x000000000041397F)
	Mem5193[rsp_1060 + 0x0000000000000038:word64] = rax_5185
	branch rax_5185 == 0x0000000000000000 l0000000000403AE2
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403AD9:
	branch Mem5193[rax_5185:byte] != 0x00 l00000000004044FA
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004044FA:
	Mem5748[rsp_1060 + 0x0000000000000030:word16] = 0x3F3F
	Mem5749[rsp_1060 + 0x0000000000000032:byte] = 0x00
	word64 rsp_5754
	word64 rbp_5755
	word64 rsi_5756
	word64 rdi_5757
	word64 rax_5758 = fn0000000000410E30(rax_5185, out rsp_5754, out rbp_5755, out rsi_5756, out rdi_5757)
	Mem5762[0x000000000061B118:word64] = rax_5758
	Mem5763[rsp_5754 + 0x0000000000000040:word64] = rax_5758
	branch false l0000000000402985
// DataOut: edx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000404528:
	word64 rsp_5767
	word64 r15_5768
	word64 r14_5769
	word64 r13_5770
	word64 r12_5771
	word64 rbp_5772
	word64 rsi_5773
	word64 rbx_5774
	word32 ebx_5775
	word32 edi_5776
	byte SCZO_5777
	word64 rdi_5778
	word64 rax_5779
	selector fs_5780
	word32 eax_5781
	byte SZO_5782
	byte C_5783
	word32 esi_5784
	byte Z_5785
	word32 ecx_5786
	word64 rcx_5787
	word32 edx_5788
	word64 rdx_5789
	byte S_5790
	word16 ax_5791
	byte al_5792
	word32 r8d_5793
	word64 r8_5794
	word32 r14d_5795
	word32 r13d_5796
	word32 r12d_5797
	byte CZ_5798
	bcuiposr0 None_5799
	word32 r9d_5800
	word64 r9_5801
	byte cl_5802
	byte SO_5803
	word32 ebp_5804
	byte r13b_5805
	word32 r15d_5806
	byte r14b_5807
	word64 r10_5808
	word64 r11_5809
	word128 xmm0_5810
	word128 xmm1_5811
	word128 xmm2_5812
	word128 xmm3_5813
	byte r12b_5814
	byte sil_5815
	byte bpl_5816
	call Mem5763[0x0000000000412BC8:word32] (retsize: 4; depth: 4)
		uses: al_5189,ax_5188,bpl_1377,C_5753,cl_1386,CZ_5765,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_5187,ebp_1384,ebx_1398,ecx_1393,edi_1407,edx_5760,esi_1414,fs_1394,None_1388,qwLoc04,qwLoc08,qwLoc28_30,r10_1399,r11_1400,r12_1425,r12b_1427,r12d_1426,r13_5750,r13b_1383,r13d_5751,r14_1403,r14b_1382,r14d_1390,r15_1404,r15d_1396,r8_1416,r8d_1391,r9_1415,r9d_1387,rax_5766,rbp_5755,rbx_1395,rcx_1411,rdi_5757,rdx_5759,rsi_5756,rsp_5754,S_1392,SCZO_5764,sil_1413,SO_1385,SZO_5752,xmm0_1381,xmm1_1380,xmm2_1379,xmm3_1378,Z_5746
		defs: al_5792,ax_5791,bpl_5816,C_5783,cl_5802,CZ_5798,eax_5781,ebp_5804,ebx_5775,ecx_5786,edi_5776,edx_5788,esi_5784,fs_5780,None_5799,r10_5808,r11_5809,r12_5771,r12b_5814,r12d_5797,r13_5770,r13b_5805,r13d_5796,r14_5769,r14b_5807,r14d_5795,r15_5768,r15d_5806,r8_5794,r8d_5793,r9_5801,r9d_5800,rax_5779,rbp_5772,rbx_5774,rcx_5787,rdi_5778,rdx_5789,rsi_5773,rsp_5767,S_5790,SCZO_5777,sil_5815,SO_5803,SZO_5782,xmm0_5810,xmm1_5811,xmm2_5812,xmm3_5813,Z_5785
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000403AE2:
	branch Mem5193[0x000000000061B129:byte] == 0x00 l0000000000403315
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403AEF:
	word64 rsi_5198
	word32 eax_5199 = fn0000000000404CD0(0x0000000D, out rsi_5198)
	byte al_5203 = (byte) eax_5199
	branch al_5203 != 0x00 l0000000000403B2B
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403AFD:
	word64 rsi_5720
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_5720) == 0x00 l0000000000403B14
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000D r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B0B:
	branch Mem5193[0x000000000061B198:byte] != 0x00 l0000000000403B2B
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B14:
	word64 rsi_5732
	branch (byte) fn0000000000404CD0(0x0000000C, out rsi_5732) == 0x00 l0000000000403B32
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B22:
	branch Mem5193[0x000000000061B150:word32] != 0x00000000 l0000000000403B32
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000C r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B2B:
	Mem5717[0x000000000061B115:byte] = 0x01
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B32:
	word64 rsp_5209
	word64 r13_5212
	word64 r12_5213
	word64 rbx_5216
	word32 edi_5218
	byte SCZO_5219
	word64 rdi_5220
	word64 rax_5221
	word32 eax_5223
	byte SZO_5224
	byte C_5225
	word32 esi_5226
	byte Z_5227
	word32 ecx_5228
	word64 rcx_5229
	word32 edx_5230
	word64 rdx_5231
	byte S_5232
	word16 ax_5233
	byte al_5234
	word32 r8d_5235
	word32 r14d_5237
	word32 r13d_5238
	byte CZ_5240
	bcuiposr0 None_5241
	word32 r9d_5242
	byte cl_5244
	byte SO_5245
	word32 ebp_5246
	byte r13b_5247
	word32 r15d_5248
	byte r14b_5249
	byte sil_5257
	call tcgetpgrp (retsize: 8; depth: 8)
		uses: al_5203,ax_5202,bpl_1377,C_5206,cl_1386,CZ_1406,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_5199,ebp_1384,ebx_1398,ecx_1393,edi_5197,edx_1397,esi_1414,fs_1394,None_1388,qwLoc04,qwLoc08,qwLoc28_30,r10_1399,r11_1400,r12_1425,r12b_1427,r12d_1426,r13_1402,r13b_1383,r13d_1389,r14_1403,r14b_1382,r14d_1390,r15_1404,r15d_1396,r8_1416,r8d_1391,r9_1415,r9d_1387,rax_5200,rbp_1401,rbx_1395,rcx_1411,rdi_5208,rdx_1417,rsi_5198,rsp_1405,S_1392,SCZO_5194,sil_1413,SO_1385,SZO_5204,xmm0_1381,xmm1_1380,xmm2_1379,xmm3_1378,Z_5205
		defs: al_5234,ax_5233,bpl_5258,C_5225,cl_5244,CZ_5240,eax_5223,ebp_5246,ebx_5217,ecx_5228,edi_5218,edx_5230,esi_5226,fs_5222,None_5241,r10_5250,r11_5251,r12_5213,r12b_5256,r12d_5239,r13_5212,r13b_5247,r13d_5238,r14_5211,r14b_5249,r14d_5237,r15_5210,r15d_5248,r8_5236,r8d_5235,r9_5243,r9d_5242,rax_5221,rbp_5214,rbx_5216,rcx_5229,rdi_5220,rdx_5231,rsi_5215,rsp_5209,S_5232,SCZO_5219,sil_5257,SO_5245,SZO_5224,xmm0_5252,xmm1_5253,xmm2_5254,xmm3_5255,Z_5227
	branch eax_5223 < 0x00000000 l0000000000403315
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B44:
	word64 rsp_5268
	word64 r15_5269
	word64 r14_5270
	word64 r13_5271
	word64 r12_5272
	word64 rbp_5273
	word64 rsi_5274
	word64 rbx_5275
	word32 ebx_5276
	word32 edi_5277
	byte SCZO_5278
	word64 rdi_5279
	word64 rax_5280
	selector fs_5281
	word32 eax_5282
	byte SZO_5283
	byte C_5284
	word32 esi_5285
	byte Z_5286
	word32 ecx_5287
	word64 rcx_5288
	word32 edx_5289
	word64 rdx_5290
	byte S_5291
	word16 ax_5292
	byte al_5293
	word32 r8d_5294
	word64 r8_5295
	word32 r14d_5296
	word32 r13d_5297
	word32 r12d_5298
	byte CZ_5299
	bcuiposr0 None_5300
	word32 r9d_5301
	word64 r9_5302
	byte cl_5303
	byte SO_5304
	word32 ebp_5305
	byte r13b_5306
	word32 r15d_5307
	byte r14b_5308
	word64 r10_5309
	word64 r11_5310
	word128 xmm0_5311
	word128 xmm1_5312
	word128 xmm2_5313
	word128 xmm3_5314
	byte r12b_5315
	byte sil_5316
	byte bpl_5317
	call sigemptyset (retsize: 8; depth: 8)
		uses: al_5234,ax_5233,bpl_5258,C_5267,cl_5244,CZ_5240,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_5223,ebp_5246,ebx_5217,ecx_5228,edi_5218,edx_5230,esi_5226,fs_5222,None_5241,qwLoc04,qwLoc08,qwLoc28_30,r10_5250,r11_5251,r12_5213,r12b_5256,r12d_5239,r13_5263,r13b_5265,r13d_5264,r14_5211,r14b_5249,r14d_5237,r15_5210,r15d_5248,r8_5236,r8d_5235,r9_5243,r9d_5242,rax_5221,rbp_5214,rbx_5216,rcx_5229,rdi_5262,rdx_5231,rsi_5215,rsp_5209,S_5260,SCZO_5219,sil_5257,SO_5245,SZO_5266,xmm0_5252,xmm1_5253,xmm2_5254,xmm3_5255,Z_5227
		defs: al_5293,ax_5292,bpl_5317,C_5284,cl_5303,CZ_5299,eax_5282,ebp_5305,ebx_5276,ecx_5287,edi_5277,edx_5289,esi_5285,fs_5281,None_5300,r10_5309,r11_5310,r12_5272,r12b_5315,r12d_5298,r13_5271,r13b_5306,r13d_5297,r14_5270,r14b_5308,r14d_5296,r15_5269,r15d_5307,r8_5295,r8d_5294,r9_5302,r9d_5301,rax_5280,rbp_5273,rbx_5275,rcx_5288,rdi_5279,rdx_5290,rsi_5274,rsp_5268,S_5291,SCZO_5278,sil_5316,SO_5304,SZO_5283,xmm0_5311,xmm1_5312,xmm2_5313,xmm3_5314,Z_5286
// DataOut: eax ebx fs r10 r11 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B51:
	word64 r15_5331
	word64 r14_5332
	word64 r12_5334
	word64 rbp_5335
	word64 rsi_5336
	word64 rbx_5337
	word32 ebx_5338
	word32 edi_5339
	byte SCZO_5340
	word64 rdi_5341
	word64 rax_5342
	selector fs_5343
	word32 eax_5344
	byte SZO_5345
	byte C_5346
	word32 esi_5347
	byte Z_5348
	word32 ecx_5349
	word64 rcx_5350
	word32 edx_5351
	word64 rdx_5352
	byte S_5353
	word16 ax_5354
	byte al_5355
	word32 r8d_5356
	word64 r8_5357
	word32 r14d_5358
	word32 r13d_5359
	word32 r12d_5360
	byte CZ_5361
	bcuiposr0 None_5362
	word32 r9d_5363
	word64 r9_5364
	byte cl_5365
	byte SO_5366
	word32 ebp_5367
	byte r13b_5368
	word32 r15d_5369
	byte r14b_5370
	word64 r10_5371
	word64 r11_5372
	word128 xmm0_5373
	word128 xmm1_5374
	word128 xmm2_5375
	word128 xmm3_5376
	byte r12b_5377
	byte sil_5378
	byte bpl_5379
	word64 r13_5333
	word64 rsp_5330
	call sigaction (retsize: 8; depth: 8)
		uses: al_5293,ax_5292,bpl_5317,C_5328,cl_5303,CZ_5299,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_5282,ebp_5305,ebx_5276,ecx_5287,edi_5277,edx_5289,esi_5285,fs_5281,None_5300,qwLoc04,qwLoc08,qwLoc28_30,r10_5309,r11_5310,r12_5272,r12b_5315,r12d_5298,r13_5318,r13b_5306,r13d_5297,r14_5321,r14b_5323,r14d_5322,r15_5269,r15d_5307,r8_5295,r8d_5294,r9_5302,r9d_5301,rax_5320,rbp_5273,rbx_5275,rcx_5288,rdi_5329,rdx_5324,rsi_5326,rsp_5319,S_5291,SCZO_5278,sil_5316,SO_5304,SZO_5327,xmm0_5311,xmm1_5312,xmm2_5313,xmm3_5314,Z_5286
		defs: al_5355,ax_5354,bpl_5379,C_5346,cl_5365,CZ_5361,eax_5344,ebp_5367,ebx_5338,ecx_5349,edi_5339,edx_5351,esi_5347,fs_5343,None_5362,r10_5371,r11_5372,r12_5334,r12b_5377,r12d_5360,r13_5333,r13b_5368,r13d_5359,r14_5332,r14b_5370,r14d_5358,r15_5331,r15d_5369,r8_5357,r8d_5356,r9_5364,r9d_5363,rax_5342,rbp_5335,rbx_5337,rcx_5350,rdi_5341,rdx_5352,rsi_5336,rsp_5330,S_5353,SCZO_5340,sil_5378,SO_5366,SZO_5345,xmm0_5373,xmm1_5374,xmm2_5375,xmm3_5376,Z_5348
	branch Mem5193[rsp_5330 + 0x0000000000000040:word64] == 0x0000000000000001 l0000000000403B7C
// DataOut: eax ebx fs r10 r11 r12d r13 r14d r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B6F:
	word64 r15_5656
	word64 r14_5657
	word64 r12_5659
	word64 rbp_5660
	word64 rsi_5661
	word64 rbx_5662
	word32 ebx_5663
	word32 edi_5664
	byte SCZO_5665
	word64 rdi_5666
	word64 rax_5667
	selector fs_5668
	word32 eax_5669
	byte SZO_5670
	byte C_5671
	word32 esi_5672
	byte Z_5673
	word32 ecx_5674
	word64 rcx_5675
	word32 edx_5676
	word64 rdx_5677
	byte S_5678
	word16 ax_5679
	byte al_5680
	word32 r8d_5681
	word64 r8_5682
	word32 r14d_5683
	word32 r13d_5684
	word32 r12d_5685
	byte CZ_5686
	bcuiposr0 None_5687
	word32 r9d_5688
	word64 r9_5689
	byte cl_5690
	byte SO_5691
	word32 ebp_5692
	byte r13b_5693
	word32 r15d_5694
	byte r14b_5695
	word64 r10_5696
	word64 r11_5697
	word128 xmm0_5698
	word128 xmm1_5699
	word128 xmm2_5700
	word128 xmm3_5701
	byte r12b_5702
	byte sil_5703
	byte bpl_5704
	call sigaddset (retsize: 8; depth: 8)
		uses: al_5355,ax_5354,bpl_5379,C_5346,cl_5365,CZ_5361,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_5344,ebp_5367,ebx_5338,ecx_5349,edi_5339,edx_5351,esi_5347,fs_5343,None_5362,qwLoc04,qwLoc08,qwLoc28_30,r10_5371,r11_5372,r12_5334,r12b_5377,r12d_5360,r13_5333,r13b_5368,r13d_5359,r14_5332,r14b_5370,r14d_5358,r15_5331,r15d_5369,r8_5357,r8d_5356,r9_5364,r9d_5363,rax_5342,rbp_5335,rbx_5337,rcx_5350,rdi_5654,rdx_5352,rsi_5653,rsp_5330,S_5353,SCZO_5380,sil_5378,SO_5366,SZO_5345,xmm0_5373,xmm1_5374,xmm2_5375,xmm3_5376,Z_5381
		defs: al_5680,ax_5679,bpl_5704,C_5671,cl_5690,CZ_5686,eax_5669,ebp_5692,ebx_5663,ecx_5674,edi_5664,edx_5676,esi_5672,fs_5668,None_5687,r10_5696,r11_5697,r12_5659,r12b_5702,r12d_5685,r13_5658,r13b_5693,r13d_5684,r14_5657,r14b_5695,r14d_5683,r15_5656,r15d_5694,r8_5682,r8d_5681,r9_5689,r9d_5688,rax_5667,rbp_5660,rbx_5662,rcx_5675,rdi_5666,rdx_5677,rsi_5661,rsp_5655,S_5678,SCZO_5665,sil_5703,SO_5691,SZO_5670,xmm0_5698,xmm1_5699,xmm2_5700,xmm3_5701,Z_5673
// DataOut: eax ebx fs r10 r11 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B7C:
	branch r13_5333 != 0xFFFFFFFFFFFFFFD4 l0000000000403B51
// DataOut: eax ebx fs r10 r11 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B86:
	word64 rdi_5433 = rsp_5330 + 0x0000000000000048
	word64 rsi_5435 = 0x000000000061B040
	word64 rcx_5438 = 0x0000000000000020
// DataOut: eax ebx fs r10 r11 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B95:
	branch rcx_5438 == 0x0000000000000000 l0000000000403B97
// DataOut: eax ebx fs r10 r11 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B97:
	Mem5459[rsp_5330 + 0x00000000000000C8:word32] = 0x10000000
// DataOut: eax ebx fs r10 r11 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403BAB:
	word64 rsp_5476
	word64 r12_5480
	word64 rbx_5483
	word32 edi_5485
	byte SCZO_5486
	word64 rdi_5487
	word64 rax_5488
	word32 eax_5490
	byte SZO_5491
	byte C_5492
	word32 esi_5493
	byte Z_5494
	word32 ecx_5495
	word64 rcx_5496
	word32 edx_5497
	word64 rdx_5498
	byte S_5499
	word16 ax_5500
	byte al_5501
	word32 r8d_5502
	word32 r14d_5504
	word32 r13d_5505
	byte CZ_5507
	bcuiposr0 None_5508
	word32 r9d_5509
	byte cl_5511
	byte SO_5512
	word32 ebp_5513
	byte r13b_5514
	word32 r15d_5515
	byte r14b_5516
	byte sil_5524
	word64 r13_5479
	call sigismember (retsize: 8; depth: 8)
		uses: al_5424,ax_5415,bpl_5382,C_5464,cl_5441,CZ_5412,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_5414,ebp_5389,ebx_5403,ecx_5442,edi_5443,edx_5402,esi_5475,fs_5399,None_5393,qwLoc04,qwLoc08,qwLoc28_30,r10_5404,r11_5405,r12_5407,r12b_5383,r12d_5394,r13_5468,r13b_5460,r13d_5462,r14_5465,r14b_5467,r14d_5466,r15_5470,r15d_5471,r8_5421,r8d_5396,r9_5420,r9d_5392,rax_5423,rbp_5406,rbx_5400,rcx_5444,rdi_5472,rdx_5422,rsi_5473,rsp_5411,S_5397,SCZO_5431,sil_5474,SO_5390,SZO_5463,xmm0_5387,xmm1_5386,xmm2_5385,xmm3_5384,Z_5432
		defs: al_5501,ax_5500,bpl_5525,C_5492,cl_5511,CZ_5507,eax_5490,ebp_5513,ebx_5484,ecx_5495,edi_5485,edx_5497,esi_5493,fs_5489,None_5508,r10_5517,r11_5518,r12_5480,r12b_5523,r12d_5506,r13_5479,r13b_5514,r13d_5505,r14_5478,r14b_5516,r14d_5504,r15_5477,r15d_5515,r8_5503,r8d_5502,r9_5510,r9d_5509,rax_5488,rbp_5481,rbx_5483,rcx_5496,rdi_5487,rdx_5498,rsi_5482,rsp_5476,S_5499,SCZO_5486,sil_5524,SO_5512,SZO_5491,xmm0_5519,xmm1_5520,xmm2_5521,xmm3_5522,Z_5494
	branch eax_5490 == 0x00000000 l0000000000403BE4
// DataOut: eax ebx fs r10 r11 r12d r13 r14 r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403BC3:
	word64 rax_5586 = 0x00000000004057F0
	branch r15d_5515 == 0x00000014 l0000000000403BD5
// DataOut: eax ebx fs r10 r11 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403BD1_1:
	rax_5586 = 0x00000000004049B0
// DataOut: eax ebx fs r10 r11 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x00000000004057F0 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x004057F0 r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:0xF0 r13b:<invalid> r15:<invalid> ax:0x57F0 r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403BD5:
	Mem5597[rsp_5476 + 0x0000000000000040:word64] = rax_5586
	word64 rsp_5598
	word64 r12_5602
	word64 rbx_5605
	word32 edi_5607
	byte SCZO_5608
	word64 rdi_5609
	word64 rax_5610
	word32 eax_5612
	byte SZO_5613
	byte C_5614
	word32 esi_5615
	byte Z_5616
	word32 ecx_5617
	word64 rcx_5618
	word32 edx_5619
	word64 rdx_5620
	byte S_5621
	word16 ax_5622
	byte al_5623
	word32 r8d_5624
	word32 r14d_5626
	word32 r13d_5627
	byte CZ_5629
	bcuiposr0 None_5630
	word32 r9d_5631
	byte cl_5633
	byte SO_5634
	word32 ebp_5635
	byte r13b_5636
	word32 r15d_5637
	byte r14b_5638
	byte sil_5646
	call sigaction (retsize: 8; depth: 8)
		uses: al_5590,ax_5589,bpl_5525,C_5596,cl_5511,CZ_5507,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_5588,ebp_5513,ebx_5484,ecx_5495,edi_5485,edx_5497,esi_5583,fs_5489,None_5508,qwLoc04,qwLoc08,qwLoc28_30,r10_5517,r11_5518,r12_5480,r12b_5523,r12d_5506,r13_5479,r13b_5514,r13d_5505,r14_5478,r14b_5516,r14d_5504,r15_5477,r15d_5515,r8_5503,r8d_5502,r9_5510,r9d_5509,rax_5591,rbp_5481,rbx_5483,rcx_5496,rdi_5592,rdx_5593,rsi_5581,rsp_5476,S_5499,SCZO_5584,sil_5582,SO_5512,SZO_5595,xmm0_5519,xmm1_5520,xmm2_5521,xmm3_5522,Z_5585
		defs: al_5623,ax_5622,bpl_5647,C_5614,cl_5633,CZ_5629,eax_5612,ebp_5635,ebx_5606,ecx_5617,edi_5607,edx_5619,esi_5615,fs_5611,None_5630,r10_5639,r11_5640,r12_5602,r12b_5645,r12d_5628,r13_5601,r13b_5636,r13d_5627,r14_5600,r14b_5638,r14d_5626,r15_5599,r15d_5637,r8_5625,r8d_5624,r9_5632,r9d_5631,rax_5610,rbp_5603,rbx_5605,rcx_5618,rdi_5609,rdx_5620,rsi_5604,rsp_5598,S_5621,SCZO_5608,sil_5646,SO_5634,SZO_5613,xmm0_5641,xmm1_5642,xmm2_5643,xmm3_5644,Z_5616
// DataOut: eax ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403BE4:
	branch r13_5479 != 0xFFFFFFFFFFFFFFD4 l0000000000403BAB
// DataOut: eax ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403BEE:
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403B95_1:
	Mem5450[rdi_5433:word32] = Mem5193[rsi_5435:word32]
	rsi_5435 = rsi_5435 + 0x0000000000000004
	rdi_5433 = rdi_5433 + 0x0000000000000004
	rcx_5438 = rcx_5438 - 0x0000000000000001
// DataOut: eax ebx fs r10 r11 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403315:
	branch Mem734[0x000000000061B110:word32] == 0x00000001 l0000000000403A39
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403A39:
	word32 eax_5158 = 0x00000002
	branch Mem734[0x000000000061B10D:byte] != 0x00 l0000000000403A5F
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403A47:
	branch Mem734[0x000000000061B12C:word32] == 0x00000003 l0000000000403A5F
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x02 edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403A50:
	eax_5158 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond(Mem734[0x000000000061B150:word32] - 0x00000001)) & 0xFFFFFFFE) + 0x00000004) (alias)
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x02 edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403A5F:
	Mem5169[0x000000000061B110:word32] = eax_5158
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403322:
	word32 eax_1520
	branch Mem734[0x000000000061B10E:byte] != 0x00 l00000000004039EF
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004039EF:
	word64 r14_5079
	word64 rax_5085 = fn000000000040B400(0x0000000000404990, 0x0000000000404980, 0x0000000000000000, 0x000000000000001E, 0x00000000004049D0, r11_1054, xmm0_1034, xmm1_1033, xmm2_1032, xmm3_1031, qwLoc08, qwArg00, qwArg08, out rsp_1060, out rbp_1055, out r9_1065, out r12_1154, out r14_5079, out r15_1059, out xmm0_1034, out xmm1_1033, out xmm2_1032, out xmm3_1031)
	Mem5093[0x000000000061B1C8:word64] = rax_5085
	eax_1520 = (word32) rax_5085 (alias)
	branch rax_5085 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403A1B:
	word64 rsp_5104
	word64 r13_5107
	word64 r12_5108
	word64 rbx_5111
	word32 edi_5113
	byte SCZO_5114
	word64 rdi_5115
	word64 rax_5116
	word32 eax_5118
	byte SZO_5119
	byte C_5120
	word32 esi_5121
	byte Z_5122
	word32 ecx_5123
	word64 rcx_5124
	word32 edx_5125
	word64 rdx_5126
	byte S_5127
	word16 ax_5128
	byte al_5129
	word32 r8d_5130
	word32 r14d_5132
	word32 r13d_5133
	byte CZ_5135
	bcuiposr0 None_5136
	word32 r9d_5137
	byte cl_5139
	byte SO_5140
	word32 ebp_5141
	byte r13b_5142
	word32 r15d_5143
	byte r14b_5144
	byte sil_5152
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_5089,ax_5088,bpl_1428,C_5102,cl_1438,CZ_1460,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_5087,ebp_1436,ebx_1451,ecx_1446,edi_1461,edx_1450,esi_5100,fs_1447,None_1440,qwLoc04,qwLoc08,qwLoc28_30,r10_1452,r11_1453,r12_5078,r12b_1429,r12d_1441,r13_1456,r13b_1435,r13d_1442,r14_5079,r14b_1434,r14d_1443,r15_5080,r15d_1449,r8_5094,r8d_5095,r9_5077,r9d_1439,rax_5085,rbp_5076,rbx_1448,rcx_5096,rdi_5103,rdx_5097,rsi_5098,rsp_5075,S_1445,SCZO_1485,sil_5099,SO_1437,SZO_5101,xmm0_5081,xmm1_5082,xmm2_5083,xmm3_5084,Z_5091
		defs: al_5129,ax_5128,bpl_5153,C_5120,cl_5139,CZ_5135,eax_5118,ebp_5141,ebx_5112,ecx_5123,edi_5113,edx_5125,esi_5121,fs_5117,None_5136,r10_5145,r11_5146,r12_5108,r12b_5151,r12d_5134,r13_5107,r13b_5142,r13d_5133,r14_5106,r14b_5144,r14d_5132,r15_5105,r15d_5143,r8_5131,r8d_5130,r9_5138,r9d_5137,rax_5116,rbp_5109,rbx_5111,rcx_5124,rdi_5115,rdx_5126,rsi_5110,rsp_5104,S_5127,SCZO_5114,sil_5152,SO_5140,SZO_5119,xmm0_5147,xmm1_5148,xmm2_5149,xmm3_5150,Z_5122
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB r15d:<invalid> ax:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00404980 cl:0x90 ecx:0x00404990 r12d:<invalid> dx:0x4980 dl:0x80 edi:0x0000001E r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040332F:
	byte al_1593
	word32 eax_1584 = (word32) (uint64) Mem734[0x000000000061B148:word32]
	branch eax_1584 == 0x00000004 l000000000040377A
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040333E:
	branch eax_1584 == 0x00000002 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403347:
	branch Mem734[0x000000000061B150:word32] == 0x00000000 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403354:
	branch Mem734[0x000000000061B17D:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403361:
	branch Mem734[0x000000000061B144:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040377A:
	Mem5045[0x000000000061B0C1:byte] = 0x01
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040336E:
	Mem5056[0x000000000061B0C1:byte] = 0x00
	al_1593 = 0x01 (alias)
	branch Mem734[0x000000000061B10E:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403383:
	branch Mem5056[0x000000000061B129:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040338C:
	branch Mem5056[0x000000000061B12C:word32] != 0x00000000 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403395:
	branch Mem5056[0x000000000061B10C:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040339E:
	al_1593 = 0x00 (alias)
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033A0:
	Mem1595[0x000000000061B0C0:byte] = al_1593
	Mem1597[0x000000000061B0C0:byte] = Mem1595[0x000000000061B0C0:byte] & 0x01
	branch Mem1597[0x000000000061B130:byte] == 0x00 l00000000004033E8
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033B6:
	word64 rsp_4924
	word64 r15_4925
	word64 r14_4926
	word64 r13_4927
	word64 r12_4928
	word64 rbp_4929
	word64 rsi_4930
	word64 rbx_4931
	word32 ebx_4932
	word32 edi_4933
	byte SCZO_4934
	word64 rdi_4935
	word64 rax_4936
	selector fs_4937
	word32 eax_4938
	byte SZO_4939
	byte C_4940
	word32 esi_4941
	byte Z_4942
	word32 ecx_4943
	word64 rcx_4944
	word32 edx_4945
	word64 rdx_4946
	byte S_4947
	word16 ax_4948
	byte al_4949
	word32 r8d_4950
	word64 r8_4951
	word32 r14d_4952
	word32 r13d_4953
	word32 r12d_4954
	byte CZ_4955
	bcuiposr0 None_4956
	word32 r9d_4957
	word64 r9_4958
	byte cl_4959
	byte SO_4960
	word32 ebp_4961
	byte r13b_4962
	word32 r15d_4963
	byte r14b_4964
	word64 r10_4965
	word64 r11_4966
	word128 xmm0_4967
	word128 xmm1_4968
	word128 xmm2_4969
	word128 xmm3_4970
	byte r12b_4971
	byte sil_4972
	byte bpl_4973
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_1593,ax_1591,bpl_1538,C_4922,cl_1548,CZ_1570,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_1590,ebp_1546,ebx_1561,ecx_1556,edi_1571,edx_1560,esi_1575,fs_1557,None_1550,qwLoc04,qwLoc08,qwLoc28_30,r10_1562,r11_1563,r12_1565,r12b_1539,r12d_1551,r13_1566,r13b_1545,r13d_1552,r14_1567,r14b_1544,r14d_1553,r15_1568,r15d_1559,r8_4917,r8d_1554,r9_1576,r9d_1549,rax_1592,rbp_1564,rbx_1558,rcx_4918,rdi_4923,rdx_4919,rsi_4920,rsp_1569,S_1555,SCZO_1599,sil_1574,SO_1547,SZO_4921,xmm0_1543,xmm1_1542,xmm2_1541,xmm3_1540,Z_1600
		defs: al_4949,ax_4948,bpl_4973,C_4940,cl_4959,CZ_4955,eax_4938,ebp_4961,ebx_4932,ecx_4943,edi_4933,edx_4945,esi_4941,fs_4937,None_4956,r10_4965,r11_4966,r12_4928,r12b_4971,r12d_4954,r13_4927,r13b_4962,r13d_4953,r14_4926,r14b_4964,r14d_4952,r15_4925,r15d_4963,r8_4951,r8d_4950,r9_4958,r9d_4957,rax_4936,rbp_4929,rbx_4931,rcx_4944,rdi_4935,rdx_4946,rsi_4930,rsp_4924,S_4947,SCZO_4934,sil_4972,SO_4960,SZO_4939,xmm0_4967,xmm1_4968,xmm2_4969,xmm3_4970,Z_4942
	word64 rsp_4984
	word64 r13_4987
	word64 r12_4988
	word64 rbx_4991
	word32 edi_4993
	byte SCZO_4994
	word64 rdi_4995
	word64 rax_4996
	word32 eax_4998
	byte SZO_4999
	byte C_5000
	word32 esi_5001
	byte Z_5002
	word32 ecx_5003
	word64 rcx_5004
	word32 edx_5005
	word64 rdx_5006
	byte S_5007
	word16 ax_5008
	byte al_5009
	word32 r8d_5010
	word32 r14d_5012
	word32 r13d_5013
	byte CZ_5015
	bcuiposr0 None_5016
	word32 r9d_5017
	byte cl_5019
	byte SO_5020
	word32 ebp_5021
	byte r13b_5022
	word32 r15d_5023
	byte r14b_5024
	byte sil_5032
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_4949,ax_4948,bpl_4973,C_4982,cl_4959,CZ_4955,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_4938,ebp_4961,ebx_4932,ecx_4943,edi_4933,edx_4945,esi_4980,fs_4937,None_4956,qwLoc04,qwLoc08,qwLoc28_30,r10_4965,r11_4966,r12_4928,r12b_4971,r12d_4954,r13_4927,r13b_4962,r13d_4953,r14_4926,r14b_4964,r14d_4952,r15_4925,r15d_4963,r8_4974,r8d_4975,r9_4958,r9d_4957,rax_4936,rbp_4929,rbx_4931,rcx_4976,rdi_4983,rdx_4977,rsi_4978,rsp_4924,S_4947,SCZO_4934,sil_4979,SO_4960,SZO_4981,xmm0_4967,xmm1_4968,xmm2_4969,xmm3_4970,Z_4942
		defs: al_5009,ax_5008,bpl_5033,C_5000,cl_5019,CZ_5015,eax_4998,ebp_5021,ebx_4992,ecx_5003,edi_4993,edx_5005,esi_5001,fs_4997,None_5016,r10_5025,r11_5026,r12_4988,r12b_5031,r12d_5014,r13_4987,r13b_5022,r13d_5013,r14_4986,r14b_5024,r14d_5012,r15_4985,r15d_5023,r8_5011,r8d_5010,r9_5018,r9d_5017,rax_4996,rbp_4989,rbx_4991,rcx_5004,rdi_4995,rdx_5006,rsi_4990,rsp_4984,S_5007,SCZO_4994,sil_5032,SO_5020,SZO_4999,xmm0_5027,xmm1_5028,xmm2_5029,xmm3_5030,Z_5002
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033E8:
	word64 rsp_1670
	word64 rsi_1672
	Mem1646[0x000000000061B1B8:word64] = 0x0000000000000064
	word64 rsp_1650
	word64 rax_1651 = fn0000000000410C40(rsi_1069, 0x0000000000004B00, out rsp_1650)
	Mem1652[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem1653[0x000000000061B1C0:word64] = rax_1651
	fn0000000000404DD0()
	word32 r13d_1648 = (word32) (uint64) ((word32) (uint64) ebx_1052 - r12d_1426)
	branch r13d_1648 <= 0x00000000 l00000000004042A0
// DataOut: fs r10 r11 r12d r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042A0:
	branch Mem1653[0x000000000061B10D:byte] == 0x00 l00000000004043A5
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043A5:
	word64 rbp_4912
	word64 r12_4914
	word64 r13_4915
	rsp_1670 = fn0000000000404D20(0x00000001, 0x0000000000000000, 0x0000000000413990, r11_1054, out rbp_4912, out rsi_1672, out r12_4914, out r13_4915)
// DataOut: bpl fs r10 r11 r12b r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042AD:
	word32 ebx_4891
	word64 rbp_4893
	word64 r10_4897
	word64 r12_4899
	word64 r13_4900
	fn0000000000407EA0(0x0000000000416919, 0x00000001, rbp_1055, 0x0000000000000003, 0x0000000000413990, r8_1066, r10_1053, r11_1054, r14_1058, r15_1059, fs_103, out ebx_4891, out rsp_1670, out rbp_4893, out rsi_1672, out r8_1066, out r9_1065, out r10_4897, out r11_1054, out r12_4899, out r13_4900, out r14_1058, out r15_1059)
// DataOut: bpl fs r10 r11 r12b r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403423:
	word64 rbp_4843 = rbp_1055 + (int64) r12d_1426 * 0x0000000000000008
// DataOut: fs r10 r11 r12d r14 r15 r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040342B:
	word64 rbp_4863 = rbp_4843 + 0x0000000000000008
	word32 ebx_4867
	word64 r12_4875
	word64 r13_4876
	fn0000000000407EA0(0x0000000000416919, 0x00000001, rbp_4863, 0x0000000000000000, Mem1653[rbp_4843:word64], r8_1066, r10_1053, r11_1054, r14_1058, r15_1059, fs_103, out ebx_4867, out rsp_1670, out rbp_4843, out rsi_1672, out r8_1066, out r9_1065, out r10_1053, out r11_1054, out r12_4875, out r13_4876, out r14_1058, out r15_1059)
	word64 r12_4857 = (uint64) (r12d_1426 + 0x00000001)
	r12d_1426 = (word32) r12_4857 (alias)
	r12b_1427 = (byte) r12_4857 (alias)
	bpl_1029 = (byte) rbp_4863 (alias)
	branch ebx_4867 > r12d_1426 l000000000040342B
// DataOut: bpl fs r10 r11 r12b r12d r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040344D:
	word64 r13_1712
	branch Mem1653[0x000000000061B1B0:word64] != 0x0000000000000000 l0000000000404200
// DataOut: bpl fs r10 r11 r12b r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404200:
	word64 rbp_4679
	word64 rsi_4680
	word64 r12_4682
	word64 r14_4684
	rsp_1670 = fn0000000000404E80(rsi_1672, r11_1054, r14_1058, r15_1059, out rbp_4679, out rsi_4680, out r8_1066, out r12_4682, out r13_1712, out r14_4684, out r15_1059)
	branch Mem1653[0x000000000061B10D:byte] == 0x00 l0000000000404454
// DataOut: bpl fs r10 r11 r12b r13 r13d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404454:
	word64 rbp_4836
	word64 rsi_4837
	rsp_1670 = fn0000000000405090(0x01, 0x0000000000000000, r11_1054, out rbp_4836, out rsi_4837, out r12b_1427, out r13_1712, out r15_1059)
// DataOut: bpl fs r10 r11 r12b r13 r13d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404212:
	branch Mem1653[0x000000000061B1B0:word64] == 0x0000000000000000 l000000000040345B
// DataOut: bpl fs r10 r11 r12b r13 r13d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404220:
	fn00000000004079F0(out rsp_1670)
	branch Mem1653[0x000000000061B190:word64] == 0x0000000000000000 l00000000004044B5
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044B5:
	Mem4829[rsp_1670 + 0x0000000000000018:word64] = 0x0000000000000000
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404233:
	word64 rdi_4710 = Mem1653[0x000000000061A610:word64]
	word64 rax_4712 = Mem1653[rdi_4710 + 0x0000000000000028:word64]
	branch rax_4712 >=u Mem1653[rdi_4710 + 0x0000000000000030:word64] l00000000004044A3
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044A3:
	word64 r14_4781
	word64 r12_4783
	word64 rbp_4784
	word64 rsi_4785
	word64 rbx_4786
	word32 ebx_4787
	word32 edi_4788
	byte SCZO_4789
	word64 rdi_4790
	word64 rax_4791
	selector fs_4792
	word32 eax_4793
	byte SZO_4794
	byte C_4795
	word32 esi_4796
	byte Z_4797
	word32 ecx_4798
	word64 rcx_4799
	word32 edx_4800
	word64 rdx_4801
	byte S_4802
	word16 ax_4803
	byte al_4804
	word32 r8d_4805
	word32 r14d_4807
	word32 r13d_4808
	word32 r12d_4809
	byte CZ_4810
	bcuiposr0 None_4811
	word32 r9d_4812
	byte cl_4814
	byte SO_4815
	word32 ebp_4816
	byte r13b_4817
	word32 r15d_4818
	byte r14b_4819
	word64 r10_4820
	byte sil_4827
	call __overflow (retsize: 8; depth: 8)
		uses: al_4716,ax_4715,bpl_1657,C_4718,cl_1611,CZ_1630,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_4714,ebp_1659,ebx_1662,ecx_1618,edi_4711,edx_1661,esi_4778,fs_1619,None_1613,qwLoc04,qwLoc08,qwLoc28_30,r10_1663,r11_1664,r12_4682,r12b_4689,r12d_1660,r13_4691,r13b_1608,r13d_1648,r14_4684,r14b_1607,r14d_1615,r15_4692,r15d_1621,r8_4681,r8d_1616,r9_1675,r9d_1612,rax_4712,rbp_4690,rbx_1620,rcx_1671,rdi_4710,rdx_1677,rsi_4776,rsp_4702,S_1617,SCZO_4717,sil_4777,SO_1610,SZO_4698,xmm0_1606,xmm1_1605,xmm2_1604,xmm3_1603,Z_4709
		defs: al_4804,ax_4803,bpl_4828,C_4795,cl_4814,CZ_4810,eax_4793,ebp_4816,ebx_4787,ecx_4798,edi_4788,edx_4800,esi_4796,fs_4792,None_4811,r10_4820,r11_4821,r12_4783,r12b_4826,r12d_4809,r13_4782,r13b_4817,r13d_4808,r14_4781,r14b_4819,r14d_4807,r15_4780,r15d_4818,r8_4806,r8d_4805,r9_4813,r9d_4812,rax_4791,rbp_4784,rbx_4786,rcx_4799,rdi_4790,rdx_4801,rsi_4785,rsp_4779,S_4802,SCZO_4789,sil_4827,SO_4815,SZO_4794,xmm0_4822,xmm1_4823,xmm2_4824,xmm3_4825,Z_4797
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404248:
	Mem4774[rdi_4710 + 0x0000000000000028:word64] = rax_4712 + 0x0000000000000001
	Mem4775[rax_4712:byte] = 0x0A
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404253:
	word64 rax_4764 = Mem1653[0x000000000061B190:word64]
	Mem4770[0x000000000061B018:word64] = Mem1653[0x000000000061B018:word64] + 0x0000000000000001
	Mem4772[rsp_1670 + 0x0000000000000018:word64] = rax_4764
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040345B:
	word64 rax_4662 = Mem1653[0x000000000061B190:word64]
	Mem4672[rsp_1670 + 0x0000000000000018:word64] = rax_4662
	r13_1712 = (uint64) (r13d_1648 - 0x00000001)
	branch (word32) r13_1712 > 0x00000000 l00000000004034D2
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040346D:
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404385:
	branch rax_4662 == 0x0000000000000000 l00000000004034D2
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040438E:
	branch Mem4672[rax_4662 + 0x0000000000000018:word64] != 0x0000000000000000 l00000000004034D2
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404399:
	Mem4678[0x000000000061B0D0:byte] = 0x00
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034D2:
	branch Mem1653[rsp_1670 + 0x0000000000000018:word64] == 0x0000000000000000 l00000000004040B5
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040B5:
	branch Mem1653[0x000000000061B129:byte] == 0x00 l0000000000404152
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040C2:
	branch Mem1653[0x000000000061B128:byte] == 0x00 l00000000004040ED
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040CB:
	branch Mem1653[0x000000000061A3E0:word64] == 0x0000000000000002 l00000000004042CB
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042CB:
	branch memcmp(Mem1653[0x000000000061A3E8:word64], 0x00000000004139E1, 0x0000000000000002) != 0x00000000 l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042E9:
	branch Mem1653[0x000000000061A3F0:word64] != 0x0000000000000001 l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042F7:
	branch Mem1653[Mem1653[0x000000000061A3F8:word64]:byte] != 0x6D l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404307:
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040D9:
	word64 rdi_4624
	fn0000000000406440(0x000000000061A3E0, out rdi_4624)
	word64 rdi_4627
	fn0000000000406440(0x000000000061A3F0, out rdi_4627)
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040ED:
	word64 rsp_4319
	word64 r15_4320
	word64 r14_4321
	word64 r13_4322
	word64 r12_4323
	word64 rbp_4324
	word64 rsi_4325
	word64 rbx_4326
	word32 ebx_4327
	word32 edi_4328
	byte SCZO_4329
	word64 rdi_4330
	word64 rax_4331
	selector fs_4332
	word32 eax_4333
	byte SZO_4334
	byte C_4335
	word32 esi_4336
	byte Z_4337
	word32 ecx_4338
	word64 rcx_4339
	word32 edx_4340
	word64 rdx_4341
	byte S_4342
	word16 ax_4343
	byte al_4344
	word32 r8d_4345
	word64 r8_4346
	word32 r14d_4347
	word32 r13d_4348
	word32 r12d_4349
	byte CZ_4350
	bcuiposr0 None_4351
	word32 r9d_4352
	word64 r9_4353
	byte cl_4354
	byte SO_4355
	word32 ebp_4356
	byte r13b_4357
	word32 r15d_4358
	byte r14b_4359
	word64 r10_4360
	word64 r11_4361
	word128 xmm0_4362
	word128 xmm1_4363
	word128 xmm2_4364
	word128 xmm3_4365
	byte r12b_4366
	byte sil_4367
	byte bpl_4368
	call fflush_unlocked (retsize: 8; depth: 8)
		uses: al_1729,ax_1720,bpl_1684,C_1732,cl_1694,CZ_1716,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_1719,ebp_1692,ebx_4318,ecx_1702,edi_1717,edx_1706,esi_1724,fs_1703,None_1696,qwLoc04,qwLoc08,qwLoc28_30,r10_1708,r11_1709,r12_1711,r12b_1685,r12d_1697,r13_1712,r13b_1691,r13d_1698,r14_1713,r14b_1690,r14d_1699,r15_1714,r15d_1705,r8_1726,r8d_1700,r9_1725,r9d_1695,rax_1728,rbp_1710,rbx_4317,rcx_1721,rdi_4316,rdx_1727,rsi_1722,rsp_1715,S_1701,SCZO_4313,sil_1723,SO_1693,SZO_1731,xmm0_1689,xmm1_1688,xmm2_1687,xmm3_1686,Z_4314
		defs: al_4344,ax_4343,bpl_4368,C_4335,cl_4354,CZ_4350,eax_4333,ebp_4356,ebx_4327,ecx_4338,edi_4328,edx_4340,esi_4336,fs_4332,None_4351,r10_4360,r11_4361,r12_4323,r12b_4366,r12d_4349,r13_4322,r13b_4357,r13d_4348,r14_4321,r14b_4359,r14d_4347,r15_4320,r15d_4358,r8_4346,r8d_4345,r9_4353,r9d_4352,rax_4331,rbp_4324,rbx_4326,rcx_4339,rdi_4330,rdx_4341,rsi_4325,rsp_4319,S_4342,SCZO_4329,sil_4367,SO_4355,SZO_4334,xmm0_4362,xmm1_4363,xmm2_4364,xmm3_4365,Z_4337
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040410D:
	word64 rsp_4376
	word64 r14_4378
	word64 r12_4380
	word64 rbp_4381
	word64 rsi_4382
	word64 rbx_4383
	word32 ebx_4384
	word32 edi_4385
	byte SCZO_4386
	word64 rdi_4387
	word64 rax_4388
	selector fs_4389
	word32 eax_4390
	byte SZO_4391
	byte C_4392
	word32 esi_4393
	byte Z_4394
	word32 ecx_4395
	word64 rcx_4396
	word32 edx_4397
	word64 rdx_4398
	byte S_4399
	word16 ax_4400
	byte al_4401
	word32 r8d_4402
	word64 r8_4403
	word32 r14d_4404
	word32 r13d_4405
	word32 r12d_4406
	byte CZ_4407
	bcuiposr0 None_4408
	word32 r9d_4409
	word64 r9_4410
	byte cl_4411
	byte SO_4412
	word32 ebp_4413
	byte r13b_4414
	word32 r15d_4415
	byte r14b_4416
	word64 r10_4417
	word64 r11_4418
	word128 xmm0_4419
	word128 xmm1_4420
	word128 xmm2_4421
	word128 xmm3_4422
	byte r12b_4423
	byte sil_4424
	byte bpl_4425
	call sigismember (retsize: 8; depth: 8)
		uses: al_4344,ax_4343,bpl_4373,C_4335,cl_4354,CZ_4350,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_4333,ebp_4372,ebx_4327,ecx_4338,edi_4328,edx_4340,esi_4336,fs_4332,None_4351,qwLoc04,qwLoc08,qwLoc28_30,r10_4360,r11_4361,r12_4323,r12b_4366,r12d_4349,r13_4322,r13b_4357,r13d_4348,r14_4321,r14b_4359,r14d_4347,r15_4320,r15d_4358,r8_4346,r8d_4345,r9_4353,r9d_4352,rax_4331,rbp_4371,rbx_4369,rcx_4339,rdi_4374,rdx_4341,rsi_4375,rsp_4319,S_4342,SCZO_4329,sil_4367,SO_4355,SZO_4334,xmm0_4362,xmm1_4363,xmm2_4364,xmm3_4365,Z_4337
		defs: al_4401,ax_4400,bpl_4425,C_4392,cl_4411,CZ_4407,eax_4390,ebp_4413,ebx_4384,ecx_4395,edi_4385,edx_4397,esi_4393,fs_4389,None_4408,r10_4417,r11_4418,r12_4380,r12b_4423,r12d_4406,r13_4379,r13b_4414,r13d_4405,r14_4378,r14b_4416,r14d_4404,r15_4377,r15d_4415,r8_4403,r8d_4402,r9_4410,r9d_4409,rax_4388,rbp_4381,rbx_4383,rcx_4396,rdi_4387,rdx_4398,rsi_4382,rsp_4376,S_4399,SCZO_4386,sil_4424,SO_4412,SZO_4391,xmm0_4419,xmm1_4420,xmm2_4421,xmm3_4422,Z_4394
	branch eax_4390 == 0x00000000 l0000000000404100
// DataOut: eax ebp r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040411F:
	signal((uint64) ebp_4413, 0x0000000000000000)
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404100:
	branch rbx_4383 == 0xFFFFFFFFFFBED314 l000000000040412A
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040412A:
	word64 rbx_4442 = (uint64) Mem1653[0x000000000061B034:word32]
	word32 ebx_4443 = (word32) rbx_4442
	branch ebx_4443 == 0x00000000 l0000000000404143
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404134:
	word64 rsp_4548
	word64 r14_4550
	word64 r12_4552
	word64 rbp_4553
	word64 rsi_4554
	word64 rbx_4555
	word32 ebx_4556
	word32 edi_4557
	byte SCZO_4558
	word64 rdi_4559
	word64 rax_4560
	selector fs_4561
	word32 eax_4562
	byte SZO_4563
	byte C_4564
	word32 esi_4565
	byte Z_4566
	word32 ecx_4567
	word64 rcx_4568
	word32 edx_4569
	word64 rdx_4570
	byte S_4571
	word16 ax_4572
	byte al_4573
	word32 r8d_4574
	word64 r8_4575
	word32 r14d_4576
	word32 r13d_4577
	word32 r12d_4578
	byte CZ_4579
	bcuiposr0 None_4580
	word32 r9d_4581
	word64 r9_4582
	byte cl_4583
	byte SO_4584
	word32 ebp_4585
	byte r13b_4586
	word32 r15d_4587
	byte r14b_4588
	word64 r10_4589
	word64 r11_4590
	word128 xmm0_4591
	word128 xmm1_4592
	word128 xmm2_4593
	word128 xmm3_4594
	byte r12b_4595
	byte sil_4596
	byte bpl_4597
	call raise (retsize: 8; depth: 8)
		uses: al_4434,ax_4431,bpl_4425,C_4446,cl_4411,CZ_4407,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_4430,ebp_4413,ebx_4443,ecx_4395,edi_4385,edx_4397,esi_4393,fs_4389,None_4408,qwLoc04,qwLoc08,qwLoc28_30,r10_4417,r11_4418,r12_4380,r12b_4423,r12d_4406,r13_4379,r13b_4414,r13d_4405,r14_4378,r14b_4416,r14d_4404,r15_4377,r15d_4415,r8_4403,r8d_4402,r9_4410,r9d_4409,rax_4433,rbp_4381,rbx_4442,rcx_4396,rdi_4547,rdx_4398,rsi_4432,rsp_4376,S_4399,SCZO_4440,sil_4424,SO_4412,SZO_4444,xmm0_4419,xmm1_4420,xmm2_4421,xmm3_4422,Z_4445
		defs: al_4573,ax_4572,bpl_4597,C_4564,cl_4583,CZ_4579,eax_4562,ebp_4585,ebx_4556,ecx_4567,edi_4557,edx_4569,esi_4565,fs_4561,None_4580,r10_4589,r11_4590,r12_4552,r12b_4595,r12d_4578,r13_4551,r13b_4586,r13d_4577,r14_4550,r14b_4588,r14d_4576,r15_4549,r15d_4587,r8_4575,r8d_4574,r9_4582,r9d_4581,rax_4560,rbp_4553,rbx_4555,rcx_4568,rdi_4559,rdx_4570,rsi_4554,rsp_4548,S_4571,SCZO_4558,sil_4596,SO_4584,SZO_4563,xmm0_4591,xmm1_4592,xmm2_4593,xmm3_4594,Z_4566
	branch (word32) (uint64) (ebx_4556 - 0x00000001) != 0x00000000 l0000000000404134
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404143:
	word64 rdi_4492 = (uint64) Mem1653[0x000000000061B038:word32]
	word32 edi_4493 = (word32) rdi_4492
	branch edi_4493 == 0x00000000 l0000000000404152
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040414D:
	word64 rsp_4497
	word64 r14_4499
	word64 r12_4501
	word64 rbp_4502
	word64 rsi_4503
	word64 rbx_4504
	word32 ebx_4505
	word32 edi_4506
	byte SCZO_4507
	word64 rdi_4508
	word64 rax_4509
	selector fs_4510
	word32 eax_4511
	byte SZO_4512
	byte C_4513
	word32 esi_4514
	byte Z_4515
	word32 ecx_4516
	word64 rcx_4517
	word32 edx_4518
	word64 rdx_4519
	byte S_4520
	word16 ax_4521
	byte al_4522
	word32 r8d_4523
	word64 r8_4524
	word32 r14d_4525
	word32 r13d_4526
	word32 r12d_4527
	byte CZ_4528
	bcuiposr0 None_4529
	word32 r9d_4530
	word64 r9_4531
	byte cl_4532
	byte SO_4533
	word32 ebp_4534
	byte r13b_4535
	word32 r15d_4536
	byte r14b_4537
	word64 r10_4538
	word64 r11_4539
	word128 xmm0_4540
	word128 xmm1_4541
	word128 xmm2_4542
	word128 xmm3_4543
	byte r12b_4544
	byte sil_4545
	byte bpl_4546
	call raise (retsize: 8; depth: 8)
		uses: al_4491,ax_4481,bpl_4447,C_4496,cl_4457,CZ_4479,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_4480,ebp_4455,ebx_4470,ecx_4465,edi_4493,edx_4469,esi_4486,fs_4466,None_4459,qwLoc04,qwLoc08,qwLoc28_30,r10_4471,r11_4472,r12_4474,r12b_4448,r12d_4460,r13_4475,r13b_4454,r13d_4461,r14_4476,r14b_4453,r14d_4462,r15_4477,r15d_4468,r8_4488,r8d_4463,r9_4487,r9d_4458,rax_4490,rbp_4473,rbx_4467,rcx_4482,rdi_4492,rdx_4489,rsi_4484,rsp_4478,S_4464,SCZO_4483,sil_4485,SO_4456,SZO_4494,xmm0_4452,xmm1_4451,xmm2_4450,xmm3_4449,Z_4495
		defs: al_4522,ax_4521,bpl_4546,C_4513,cl_4532,CZ_4528,eax_4511,ebp_4534,ebx_4505,ecx_4516,edi_4506,edx_4518,esi_4514,fs_4510,None_4529,r10_4538,r11_4539,r12_4501,r12b_4544,r12d_4527,r13_4500,r13b_4535,r13d_4526,r14_4499,r14b_4537,r14d_4525,r15_4498,r15d_4536,r8_4524,r8d_4523,r9_4531,r9d_4530,rax_4509,rbp_4502,rbx_4504,rcx_4517,rdi_4508,rdx_4519,rsi_4503,rsp_4497,S_4520,SCZO_4507,sil_4545,SO_4533,SZO_4512,xmm0_4540,xmm1_4541,xmm2_4542,xmm3_4543,Z_4515
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404152:
	branch Mem1653[0x000000000061B130:byte] != 0x00 l000000000040430C
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040430C:
	fn0000000000405630(0x000000000061AFC0, 0x00000000004139E4, qwLoc04)
	fn0000000000405630(0x000000000061AF60, 0x00000000004139EE, qwLoc04)
	fn000000000040E630(Mem1653[0x000000000061B0E8:word64])
	__printf_chk(0x0000000000000001, 0x0000000000415D40)
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040415F:
	word64 rbx_4278 = Mem1653[0x000000000061B1C8:word64]
	branch rbx_4278 == 0x0000000000000000 l00000000004041F5
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040416F:
	branch fn000000000040AFB0(rbx_4278) == 0x0000000000000000 l00000000004041ED
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004041ED:
	fn000000000040B640(rbx_4278, r13_1712, r15_1059, qwLoc04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004041F5:
	exit((uint64) Mem1653[0x000000000061B030:word32])
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040417C:
	__assert_fail(0x0000000000415D68, 0x0000000000413736, 0x00000000000005DC, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004034DE:
	word64 rcx_1735 = Mem1653[rsp_1670 + 0x0000000000000018:word64]
	Mem1739[0x000000000061B190:word64] = Mem1653[rcx_1735 + 0x0000000000000018:word64]
	branch Mem1653[0x000000000061B1C8:word64] == 0x0000000000000000 l0000000000403FB5
// DataOut: bpl fs r10 r11 r12b r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FB5:
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034FC:
	word64 r14_4060 = Mem1739[r9_1065:word64]
	branch r14_4060 == 0x0000000000000000 l0000000000403FC2
// DataOut: bpl fs r10 r11 r12b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FC2:
	word64 rax_4066 = Mem1739[0x000000000061AF18:word64]
	word32 edx_4072 = (word32) (rax_4066 - Mem1739[0x000000000061AF10:word64])
	branch edx_4072 <=u 0x0000000F l00000000004044C3
// DataOut: bpl fs r11 r12b r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044C3:
	__assert_fail(0x0000000000415C58, 0x0000000000413736, 0x00000000000003D5, 0x0000000000412C38)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000403FDC:
	word64 rdx_4077 = Mem1739[0x000000000061AF20:word64] - rax_4066
	branch rdx_4077 >= 0xFFFFFFFFFFFFFFF0 l0000000000404002
// DataOut: bpl fs r11 r12b r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FEC:
	word64 r15_4158
	word64 r14_4159
	word64 r13_4160
	word64 r12_4161
	word64 rbp_4162
	word64 rsi_4163
	word64 rbx_4164
	word32 ebx_4165
	word32 edi_4166
	byte SCZO_4167
	word64 rdi_4168
	word64 rax_4169
	selector fs_4170
	word32 eax_4171
	byte SZO_4172
	byte C_4173
	word32 esi_4174
	byte Z_4175
	word32 ecx_4176
	word64 rcx_4177
	word32 edx_4178
	word64 rdx_4179
	byte S_4180
	word16 ax_4181
	byte al_4182
	word32 r8d_4183
	word32 r14d_4185
	word32 r13d_4186
	word32 r12d_4187
	byte CZ_4188
	bcuiposr0 None_4189
	word32 r9d_4190
	word64 r9_4191
	byte cl_4192
	byte SO_4193
	word32 ebp_4194
	byte r13b_4195
	word32 r15d_4196
	byte r14b_4197
	word64 r10_4198
	byte sil_4205
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_4069,ax_4068,bpl_1684,C_4065,cl_1694,CZ_4075,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_4067,ebp_1692,ebx_1707,ecx_1702,edi_1717,edx_4072,esi_1724,fs_1703,None_1696,qwLoc08,qwLoc28_30,r10_1708,r11_1709,r12_1711,r12b_1685,r12d_1697,r13_1712,r13b_1691,r13d_1698,r14_4060,r14b_4062,r14d_4061,r15_1714,r15d_1705,r8_1726,r8d_1700,r9_1725,r9d_1695,rax_4066,rbp_1710,rbx_1704,rcx_1735,rdi_4156,rdx_4077,rsi_4155,rsp_1715,S_1701,SCZO_4079,sil_1723,SO_4080,SZO_4063,xmm0_1689,xmm1_1688,xmm2_1687,xmm3_1686,Z_4064
		defs: al_4182,ax_4181,bpl_4206,C_4173,cl_4192,CZ_4188,eax_4171,ebp_4194,ebx_4165,ecx_4176,edi_4166,edx_4178,esi_4174,fs_4170,None_4189,r10_4198,r11_4199,r12_4161,r12b_4204,r12d_4187,r13_4160,r13b_4195,r13d_4186,r14_4159,r14b_4197,r14d_4185,r15_4158,r15d_4196,r8_4184,r8d_4183,r9_4191,r9d_4190,rax_4169,rbp_4162,rbx_4164,rcx_4177,rdi_4168,rdx_4179,rsi_4163,rsp_4157,S_4180,SCZO_4167,sil_4205,SO_4193,SZO_4172,xmm0_4200,xmm1_4201,xmm2_4202,xmm3_4203,Z_4175
	rax_4066 = Mem1739[0x000000000061AF18:word64]
// DataOut: bpl fs r11 r12b r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404002:
	word64 rsi_4116 = Mem1739[rsp_1670 + 0x0000000000000020:word64]
	word64 rdi_4119 = Mem1739[0x000000000061B1C8:word64]
	Mem4120[0x000000000061AF18:word64] = rax_4066 - 0x0000000000000010
	word64 rax_4122 = Mem4120[rax_4066 - 0x0000000000000008:word64]
	Mem4123[rsp_1670 + 0x0000000000000040:word64] = Mem4120[rax_4066 - 0x0000000000000010:word64]
	Mem4124[rsp_1670 + 0x0000000000000048:word64] = rax_4122
	word64 rbp_4126
	word64 rsi_4127
	word64 r10_4130
	word64 rax_4138 = fn000000000040BB90(rax_4122, bpl_1029, rsi_4116, rdi_4119, r8_1066, r11_1054, r12b_1427, xmm0_1034, xmm1_1033, xmm2_1032, xmm3_1031, out rsp_1670, out rbp_4126, out rsi_4127, out r8_1066, out r9_1065, out r10_4130, out r12b_1427, out r13_1712, out r15_1059, out xmm0_1034, out xmm1_1033, out xmm2_1032, out xmm3_1031)
	branch rax_4138 == 0x0000000000000000 l0000000000404287
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404287:
	__assert_fail(0x0000000000413992, 0x0000000000413736, 0x000000000000059D, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000404039:
	free(rax_4138)
	word64 rbx_4147 = Mem4124[rsp_1670 + 0x0000000000000018:word64]
	free(Mem4124[rbx_4147:word64])
	free(Mem4124[rbx_4147 + 0x0000000000000008:word64])
	free(rbx_4147)
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403508:
	word32 ecx_1794 = (word32) Mem1739[Mem1739[rsp_1670 + 0x0000000000000018:word64] + 0x0000000000000010:byte]
	byte cl_1795 = (byte) ecx_1794
	Mem1798[rsp_1670 + 0x000000000000002F:byte] = cl_1795
	word64 rax_1799 = __errno_location()
	Mem1805[rax_1799:word32] = 0x00000000
	word64 rsp_1809
	word64 r13_1812
	word64 rsi_1815
	word32 edi_1818
	byte SCZO_1819
	word64 rdi_1820
	word64 rax_1821
	word32 eax_1823
	byte SZO_1824
	byte C_1825
	word32 esi_1826
	byte Z_1827
	word32 ecx_1828
	word64 rcx_1829
	word32 edx_1830
	word64 rdx_1831
	byte S_1832
	word16 ax_1833
	byte al_1834
	word32 r8d_1835
	word64 r8_1836
	word32 r14d_1837
	word32 r13d_1838
	word32 r12d_1839
	byte CZ_1840
	bcuiposr0 None_1841
	word32 r9d_1842
	word64 r9_1843
	byte cl_1844
	byte SO_1845
	word32 ebp_1846
	byte r13b_1847
	word32 r15d_1848
	byte r14b_1849
	word64 r10_1850
	byte sil_1857
	word64 rbx_1816
	word64 r14_1811
	call opendir (retsize: 8; depth: 8)
		uses: al_1803,ax_1802,bpl_1684,C_1732,cl_1795,CZ_1716,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_1801,ebp_1692,ebx_1797,ecx_1794,edi_1717,edx_1706,esi_1724,fs_1703,None_1696,qwLoc08,qwLoc28_30,r10_1708,r11_1709,r12_1806,r12b_1808,r12d_1807,r13_1712,r13b_1691,r13d_1698,r14_1792,r14b_1690,r14d_1699,r15_1714,r15d_1705,r8_1726,r8d_1700,r9_1725,r9d_1695,rax_1799,rbp_1710,rbx_1796,rcx_1735,rdi_1804,rdx_1727,rsi_1722,rsp_1715,S_1701,SCZO_1736,sil_1723,SO_1693,SZO_1731,xmm0_1689,xmm1_1688,xmm2_1687,xmm3_1686,Z_1737
		defs: al_1834,ax_1833,bpl_1858,C_1825,cl_1844,CZ_1840,eax_1823,ebp_1846,ebx_1817,ecx_1828,edi_1818,edx_1830,esi_1826,fs_1822,None_1841,r10_1850,r11_1851,r12_1813,r12b_1856,r12d_1839,r13_1812,r13b_1847,r13d_1838,r14_1811,r14b_1849,r14d_1837,r15_1810,r15d_1848,r8_1836,r8d_1835,r9_1843,r9d_1842,rax_1821,rbp_1814,rbx_1816,rcx_1829,rdi_1820,rdx_1831,rsi_1815,rsp_1809,S_1832,SCZO_1819,sil_1857,SO_1845,SZO_1824,xmm0_1852,xmm1_1853,xmm2_1854,xmm3_1855,Z_1827
	branch rax_1821 == 0x0000000000000000 l0000000000404195
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404195:
	dcgettext(0x0000000000000000, 0x0000000000413998, 0x0000000000000005)
	word64 rbp_4048
	word64 rsi_4049
	word64 rdi_4050
	word64 r10_4053
	word64 r12_4055
	word64 r14_4057
	fn0000000000405810((word32) Mem1805[rsp_1809 + 0x000000000000002F:byte], r11_1054, r14_1811, r15_1059, fs_103, out rsp_1670, out rbp_4048, out rsi_4049, out rdi_4050, out r8_1066, out r9_1065, out r10_4053, out r11_1054, out r12_4055, out r13_1712, out r14_4057, out r15_1059)
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040353B:
	branch Mem1805[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004035FF
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403549:
	byte al_3538
	word64 r8_3535
	word64 rsi_3531
	word64 rsp_3523
	word64 r15_3522
	word64 r14_3521
	word64 r12_3519
	word128 xmm0_3497
	word128 xmm1_3496
	word128 xmm2_3495
	word128 xmm3_3494
	word64 rsp_3437
	word64 r15_3438
	word64 r14_3439
	word64 r13_3440
	word64 r12_3441
	word64 rbp_3442
	word64 rsi_3443
	word64 rbx_3444
	word32 ebx_3445
	word32 edi_3446
	byte SCZO_3447
	word64 rdi_3448
	word64 rax_3449
	selector fs_3450
	word32 eax_3451
	byte SZO_3452
	byte C_3453
	word32 esi_3454
	byte Z_3455
	word32 ecx_3456
	word64 rcx_3457
	word32 edx_3458
	word64 rdx_3459
	byte S_3460
	word16 ax_3461
	byte al_3462
	word32 r8d_3463
	word64 r8_3464
	word32 r14d_3465
	word32 r13d_3466
	word32 r12d_3467
	byte CZ_3468
	bcuiposr0 None_3469
	word32 r9d_3470
	word64 r9_3471
	byte cl_3472
	byte SO_3473
	word32 ebp_3474
	byte r13b_3475
	word32 r15d_3476
	byte r14b_3477
	word64 r10_3478
	word64 r11_3479
	word128 xmm0_3480
	word128 xmm1_3481
	word128 xmm2_3482
	word128 xmm3_3483
	byte r12b_3484
	byte sil_3485
	byte bpl_3486
	call dirfd (retsize: 8; depth: 8)
		uses: al_1834,ax_1833,bpl_1858,C_1861,cl_1844,CZ_1840,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_1823,ebp_1846,ebx_1817,ecx_1828,edi_1818,edx_1830,esi_1826,fs_1822,None_1841,qwLoc08,qwLoc28_30,r10_1850,r11_1851,r12_1813,r12b_1856,r12d_1839,r13_1862,r13b_1864,r13d_1863,r14_1811,r14b_1849,r14d_1837,r15_1810,r15d_1848,r8_1836,r8d_1835,r9_1843,r9d_1842,rax_1821,rbp_1814,rbx_1816,rcx_1829,rdi_3436,rdx_1831,rsi_1815,rsp_1809,S_1832,SCZO_1919,sil_1857,SO_1845,SZO_1859,xmm0_1852,xmm1_1853,xmm2_1854,xmm3_1855,Z_1920
		defs: al_3462,ax_3461,bpl_3486,C_3453,cl_3472,CZ_3468,eax_3451,ebp_3474,ebx_3445,ecx_3456,edi_3446,edx_3458,esi_3454,fs_3450,None_3469,r10_3478,r11_3479,r12_3441,r12b_3484,r12d_3467,r13_3440,r13b_3475,r13d_3466,r14_3439,r14b_3477,r14d_3465,r15_3438,r15d_3476,r8_3464,r8d_3463,r9_3471,r9d_3470,rax_3449,rbp_3442,rbx_3444,rcx_3457,rdi_3448,rdx_3459,rsi_3443,rsp_3437,S_3460,SCZO_3447,sil_3485,SO_3473,SZO_3452,xmm0_3480,xmm1_3481,xmm2_3482,xmm3_3483,Z_3455
	branch eax_3451 < 0x00000000 l0000000000403E95
// DataOut: eax fs r11 r12 r14 r15 r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E95:
	word64 r13_3982
	word64 rbp_3984
	word32 ebx_3987
	word32 edi_3988
	byte SCZO_3989
	word64 rdi_3990
	word64 rax_3991
	word32 eax_3993
	byte SZO_3994
	byte C_3995
	word32 esi_3996
	byte Z_3997
	word32 ecx_3998
	word64 rcx_3999
	word32 edx_4000
	word64 rdx_4001
	byte S_4002
	word16 ax_4003
	byte al_4004
	word32 r8d_4005
	word32 r14d_4007
	word32 r13d_4008
	word32 r12d_4009
	byte CZ_4010
	bcuiposr0 None_4011
	word32 r9d_4012
	word64 r9_4013
	byte cl_4014
	byte SO_4015
	word32 ebp_4016
	byte r13b_4017
	word32 r15d_4018
	byte r14b_4019
	word64 r10_4020
	byte r12b_4026
	byte sil_4027
	byte bpl_4028
	call __xstat (retsize: 8; depth: 8)
		uses: al_3462,ax_3461,bpl_3486,C_3489,cl_3472,CZ_3468,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3451,ebp_3474,ebx_3445,ecx_3456,edi_3446,edx_3458,esi_3977,fs_3450,None_3469,qwLoc08,qwLoc28_30,r10_3478,r11_3479,r12_3441,r12b_3484,r12d_3467,r13_3440,r13b_3475,r13d_3466,r14_3439,r14b_3477,r14d_3465,r15_3438,r15d_3476,r8_3464,r8d_3463,r9_3471,r9d_3470,rax_3449,rbp_3442,rbx_3444,rcx_3457,rdi_3978,rdx_3490,rsi_3975,rsp_3437,S_3488,SCZO_3447,sil_3976,SO_3473,SZO_3487,xmm0_3480,xmm1_3481,xmm2_3482,xmm3_3483,Z_3455
		defs: al_4004,ax_4003,bpl_4028,C_3995,cl_4014,CZ_4010,eax_3993,ebp_4016,ebx_3987,ecx_3998,edi_3988,edx_4000,esi_3996,fs_3992,None_4011,r10_4020,r11_4021,r12_3983,r12b_4026,r12d_4009,r13_3982,r13b_4017,r13d_4008,r14_3981,r14b_4019,r14d_4007,r15_3980,r15d_4018,r8_4006,r8d_4005,r9_4013,r9d_4012,rax_3991,rbp_3984,rbx_3986,rcx_3999,rdi_3990,rdx_4001,rsi_3985,rsp_3979,S_4002,SCZO_3989,sil_4027,SO_4015,SZO_3994,xmm0_4022,xmm1_4023,xmm2_4024,xmm3_4025,Z_3997
	al_3538 = (byte) (uint64) (eax_3993 >>u 0x0000001F) (alias)
// DataOut: al fs r11 r12 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040355E:
	word64 r13_3922
	word64 rbp_3924
	word32 ebx_3927
	word32 edi_3928
	byte SCZO_3929
	word64 rdi_3930
	word64 rax_3931
	word32 eax_3933
	byte SZO_3934
	byte C_3935
	word32 esi_3936
	byte Z_3937
	word32 ecx_3938
	word64 rcx_3939
	word32 edx_3940
	word64 rdx_3941
	byte S_3942
	word16 ax_3943
	byte al_3944
	word32 r8d_3945
	word32 r14d_3947
	word32 r13d_3948
	word32 r12d_3949
	byte CZ_3950
	bcuiposr0 None_3951
	word32 r9d_3952
	word64 r9_3953
	byte cl_3954
	byte SO_3955
	word32 ebp_3956
	byte r13b_3957
	word32 r15d_3958
	byte r14b_3959
	word64 r10_3960
	byte r12b_3966
	byte sil_3967
	byte bpl_3968
	call __fxstat (retsize: 8; depth: 8)
		uses: al_3462,ax_3461,bpl_3486,C_3489,cl_3472,CZ_3468,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3451,ebp_3474,ebx_3445,ecx_3456,edi_3446,edx_3458,esi_3917,fs_3450,None_3469,qwLoc08,qwLoc28_30,r10_3478,r11_3479,r12_3441,r12b_3484,r12d_3467,r13_3440,r13b_3475,r13d_3466,r14_3439,r14b_3477,r14d_3465,r15_3438,r15d_3476,r8_3464,r8d_3463,r9_3471,r9d_3470,rax_3449,rbp_3442,rbx_3444,rcx_3457,rdi_3918,rdx_3490,rsi_3915,rsp_3437,S_3488,SCZO_3447,sil_3916,SO_3473,SZO_3487,xmm0_3480,xmm1_3481,xmm2_3482,xmm3_3483,Z_3455
		defs: al_3944,ax_3943,bpl_3968,C_3935,cl_3954,CZ_3950,eax_3933,ebp_3956,ebx_3927,ecx_3938,edi_3928,edx_3940,esi_3936,fs_3932,None_3951,r10_3960,r11_3961,r12_3923,r12b_3966,r12d_3949,r13_3922,r13b_3957,r13d_3948,r14_3921,r14b_3959,r14d_3947,r15_3920,r15d_3958,r8_3946,r8d_3945,r9_3953,r9d_3952,rax_3931,rbp_3924,rbx_3926,rcx_3939,rdi_3930,rdx_3941,rsi_3925,rsp_3919,S_3942,SCZO_3929,sil_3967,SO_3955,SZO_3934,xmm0_3962,xmm1_3963,xmm2_3964,xmm3_3965,Z_3937
	al_3538 = (byte) (uint64) (eax_3933 >>u 0x0000001F) (alias)
// DataOut: al fs r11 r12 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040356D:
	branch al_3538 != 0x00 l0000000000403478
// DataOut: fs r11 r12 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403478:
	word64 rax_3844 = dcgettext(0x0000000000000000, 0x0000000000415CE8, 0x0000000000000005)
	word32 edi_3845 = (word32) Mem1805[rsp_3523 + 0x000000000000002F:byte]
	word64 rsp_3851
	word64 rbp_3852
	word64 rsi_3853
	word64 rdi_3854
	word64 r8_3855
	word64 r9_3856
	word64 r10_3857
	word64 r11_3858
	word64 r12_3859
	word64 r13_3860
	word64 r14_3861
	word64 r15_3862
	word32 eax_3863 = fn0000000000405810(edi_3845, r11_1054, r14_3521, r15_3522, fs_103, out rsp_3851, out rbp_3852, out rsi_3853, out rdi_3854, out r8_3855, out r9_3856, out r10_3857, out r11_3858, out r12_3859, out r13_3860, out r14_3861, out r15_3862)
	word64 r14_3867
	word64 r12_3869
	word64 rbp_3870
	word64 rsi_3871
	word64 rbx_3872
	word32 ebx_3873
	word32 edi_3874
	byte SCZO_3875
	word64 rdi_3876
	word64 rax_3877
	selector fs_3878
	word32 eax_3879
	byte SZO_3880
	byte C_3881
	word32 esi_3882
	byte Z_3883
	word32 ecx_3884
	word64 rcx_3885
	word32 edx_3886
	word64 rdx_3887
	byte S_3888
	word16 ax_3889
	byte al_3890
	word32 r8d_3891
	word32 r14d_3893
	word32 r13d_3894
	word32 r12d_3895
	byte CZ_3896
	bcuiposr0 None_3897
	word32 r9d_3898
	byte cl_3900
	byte SO_3901
	word32 ebp_3902
	byte r13b_3903
	word32 r15d_3904
	byte r14b_3905
	word64 r10_3906
	byte sil_3913
	call closedir (retsize: 8; depth: 8)
		uses: al_3538,ax_3528,bpl_3492,C_3843,cl_3502,CZ_3524,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3863,ebp_3500,ebx_3515,ecx_3510,edi_3845,edx_3514,esi_3850,fs_3511,None_3504,qwLoc08,qwLoc28_30,r10_3857,r11_3858,r12_3859,r12b_3493,r12d_3505,r13_3860,r13b_3499,r13d_3506,r14_3861,r14b_3498,r14d_3507,r15_3862,r15d_3513,r8_3855,r8d_3508,r9_3856,r9d_3503,rax_3844,rbp_3852,rbx_3512,rcx_3529,rdi_3864,rdx_3847,rsi_3853,rsp_3851,S_3509,SCZO_3530,sil_3849,SO_3501,SZO_3842,xmm0_3497,xmm1_3496,xmm2_3495,xmm3_3494,Z_3541
		defs: al_3890,ax_3889,bpl_3914,C_3881,cl_3900,CZ_3896,eax_3879,ebp_3902,ebx_3873,ecx_3884,edi_3874,edx_3886,esi_3882,fs_3878,None_3897,r10_3906,r11_3907,r12_3869,r12b_3912,r12d_3895,r13_3868,r13b_3903,r13d_3894,r14_3867,r14b_3905,r14d_3893,r15_3866,r15d_3904,r8_3892,r8d_3891,r9_3899,r9d_3898,rax_3877,rbp_3870,rbx_3872,rcx_3885,rdi_3876,rdx_3887,rsi_3871,rsp_3865,S_3888,SCZO_3875,sil_3913,SO_3901,SZO_3880,xmm0_3908,xmm1_3909,xmm2_3910,xmm3_3911,Z_3883
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403575:
	word64 rdx_3544 = Mem1805[rsp_3523 + 0x0000000000000040:word64]
	Mem3546[rsp_3523 + 0x0000000000000010:word64] = Mem1805[rsp_3523 + 0x0000000000000048:word64]
	Mem3547[rsp_3523 + 0x0000000000000008:word64] = rdx_3544
	word64 rsp_3548
	word64 rax_3549 = fn0000000000410C40(rsi_3531, 0x0000000000000010, out rsp_3548)
	word64 rcx_3550 = Mem3547[rsp_3548 + 0x0000000000000010:word64]
	word64 rdx_3551 = Mem3547[rsp_3548 + 0x0000000000000008:word64]
	word64 rdi_3555 = Mem3547[0x000000000061B1C8:word64]
	Mem3559[rax_3549:word64] = rcx_3550
	Mem3560[rax_3549 + 0x0000000000000008:word64] = rdx_3551
	word64 rsi_3564
	word64 r8_3565
	word64 r13_3569
	word64 rax_3576 = fn000000000040BB50(rax_3549, rax_3549, rax_3549, rdi_3555, r8_3535, r11_1054, r12_3519, xmm0_3497, xmm1_3496, xmm2_3495, xmm3_3494, out ebx_1052, out rsp_1060, out rbp_1055, out rsi_3564, out r8_3565, out r9_1065, out r10_1053, out r12_1154, out r13_3569, out r14_1811, out r15_1059, out xmm0_1034, out xmm1_1033, out xmm2_1032, out xmm3_1031)
	bpl_1029 = (byte) rax_3549 (alias)
	eax_1520 = (word32) rax_3576 (alias)
	branch rax_3576 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004043BB:
	fn0000000000410E50()
	r8_1066 = Mem734[0x000000000061A640:word64]
	fn00000000004112D0(0x0000000000413080, (word32) (uint64) Mem734[rsp_1060 + 0x0000000000000038:word32], (word32) (uint64) eax_1520)
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r15d:<invalid> ax:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r8b:<invalid> r8d:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004043D9:
	word64 r13_1211
	word64 r12_1171 = r12_1154 + 0x0000000000000001
	word64 rax_1176 = strchr(r12_1171, 0x000000000000000A)
	r14_1058 = rax_1176
	branch rax_1176 == 0x0000000000000000 l000000000040444F
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040444F:
	r13_1211 = r12_1171
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004043F2:
	r13_1211 = r8_1066 + 0x0000000000000001
	word64 rsi_1238 = 0x000000000000000A
	branch strchr(r13_1211, 0x000000000000000A) == 0x0000000000000000 l0000000000404438
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404408:
	word64 rbx_1298
	word64 rbp_1299
	word64 r8_1300
	word64 r9_1301
	word64 r10_1302
	word64 r11_1303
	word64 r12_1304
	word64 r13_1305
	word64 r14_1306
	word64 r15_1307
	fn000000000040EC10(r11_1054, rax_1176, r15_1059, fs_103, out rbx_1298, out rbp_1299, out r8_1300, out r9_1301, out r10_1302, out r11_1303, out r12_1304, out r13_1305, out r14_1306, out r15_1307)
	dcgettext(0x0000000000000000, 0x0000000000413900, 0x0000000000000005)
	word64 rbx_1331
	word32 edi_1333
	byte SCZO_1334
	word64 rdi_1335
	word64 rax_1336
	word32 eax_1338
	byte SZO_1339
	byte C_1340
	word32 esi_1341
	byte Z_1342
	word32 ecx_1343
	word64 rcx_1344
	word32 edx_1345
	word64 rdx_1346
	byte S_1347
	word16 ax_1348
	byte al_1349
	word32 r8d_1350
	word32 r14d_1352
	word32 r13d_1353
	word32 r12d_1354
	byte CZ_1355
	bcuiposr0 None_1356
	word32 r9d_1357
	byte cl_1359
	byte SO_1360
	word32 ebp_1361
	byte r13b_1362
	word32 r15d_1363
	byte r14b_1364
	byte r12b_1371
	byte sil_1372
	call error (retsize: 8; depth: 8)
		uses: al_1170,ax_1162,bpl_1131,C_1323,cl_1139,CZ_1158,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_1161,ebp_1137,ebx_1150,ecx_1145,edi_1159,edx_1149,esi_1319,fs_1146,None_1141,qwLoc08,qwLoc28_30,r10_1302,r11_1303,r12_1304,r12b_1173,r12d_1172,r13_1305,r13b_1237,r13d_1236,r14_1306,r14b_1182,r14d_1181,r15_1310,r15d_1311,r8_1300,r8d_1143,r9_1301,r9d_1140,rax_1321,rbp_1299,rbx_1298,rcx_1315,rdi_1320,rdx_1316,rsi_1317,rsp_1157,S_1144,SCZO_1164,sil_1318,SO_1138,SZO_1322,xmm0_1135,xmm1_1134,xmm2_1133,xmm3_1132,Z_1244
		defs: al_1349,ax_1348,bpl_1373,C_1340,cl_1359,CZ_1355,eax_1338,ebp_1361,ebx_1332,ecx_1343,edi_1333,edx_1345,esi_1341,fs_1337,None_1356,r10_1365,r11_1366,r12_1328,r12b_1371,r12d_1354,r13_1327,r13b_1362,r13d_1353,r14_1326,r14b_1364,r14d_1352,r15_1325,r15d_1363,r8_1351,r8d_1350,r9_1358,r9d_1357,rax_1336,rbp_1329,rbx_1331,rcx_1344,rdi_1335,rdx_1346,rsi_1330,rsp_1324,S_1347,SCZO_1334,sil_1372,SO_1360,SZO_1339,xmm0_1367,xmm1_1368,xmm2_1369,xmm3_1370,Z_1342
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404438:
	Mem1296[rsi_1238:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040443C:
	Mem1233[0x000000000061A3D0:word64] = r12_1171
	Mem1234[0x000000000061A3D8:word64] = r13_1211
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004038A8:
	branch strstr(Mem734[0x000000000061A3D0:word64], 0x0000000000413766) == 0x0000000000000000 l0000000000404484
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404484:
	rsi_1069 = 0x0000000000413766
	branch strstr(Mem734[0x000000000061A3D8:word64], 0x0000000000413766) != 0x0000000000000000 l00000000004038C2
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040449E:
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004038C2:
	Mem801[0x000000000061A748:word64] = 0x0000000000000005
// DataOut: ebx fs r10 r11 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004038CD:
	r14_1058 = Mem801[0x000000000061A748:word64]
	Mem850[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12d r13 r14 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004038EB:
	Mem859[rsp_1060 + 0x0000000000000040:word64] = r14_1058
	word64 rsp_860
	word64 r15_861
	word64 r14_862
	word64 r13_863
	word64 r12_864
	word64 rbp_865
	word64 rsi_866
	word64 rbx_867
	word32 edi_869
	byte SCZO_870
	word64 rdi_871
	word64 rax_872
	word32 eax_874
	byte SZO_875
	byte C_876
	word32 esi_877
	byte Z_878
	word32 ecx_879
	word64 rcx_880
	word32 edx_881
	word64 rdx_882
	byte S_883
	word16 ax_884
	byte al_885
	word32 r8d_886
	word64 r8_887
	word32 r14d_888
	word32 r13d_889
	word32 r12d_890
	byte CZ_891
	bcuiposr0 None_892
	word32 r9d_893
	word64 r9_894
	byte cl_895
	byte SO_896
	word32 ebp_897
	byte r13b_898
	word32 r15d_899
	byte r14b_900
	byte r12b_907
	byte sil_908
	call nl_langinfo (retsize: 8; depth: 8)
		uses: al_840,ax_829,bpl_802,C_843,cl_809,CZ_825,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_828,ebp_807,ebx_819,ecx_814,edi_826,edx_818,esi_835,fs_815,None_811,qwLoc28_30,r10_820,r11_821,r12_851,r12b_853,r12d_854,r13_847,r13b_849,r13d_848,r14_855,r14b_846,r14d_845,r15_823,r15d_817,r8_837,r8d_812,r9_836,r9d_810,rax_839,rbp_822,rbx_816,rcx_830,rdi_858,rdx_838,rsi_833,rsp_856,S_813,SCZO_831,sil_834,SO_808,SZO_842,xmm0_806,xmm1_805,xmm2_804,xmm3_803,Z_832
		defs: al_885,ax_884,bpl_909,C_876,cl_895,CZ_891,eax_874,ebp_897,ebx_868,ecx_879,edi_869,edx_881,esi_877,fs_873,None_892,r10_901,r11_902,r12_864,r12b_907,r12d_890,r13_863,r13b_898,r13d_889,r14_862,r14b_900,r14d_888,r15_861,r15d_899,r8_887,r8d_886,r9_894,r9d_893,rax_872,rbp_865,rbx_867,rcx_880,rdi_871,rdx_882,rsi_866,rsp_860,S_883,SCZO_870,sil_908,SO_896,SZO_875,xmm0_903,xmm1_904,xmm2_905,xmm3_906,Z_878
	word64 rcx_910 = Mem859[rsp_860 + 0x0000000000000020:word64]
	r9_1065 = 0x0000000000000000
	r8_1066 = 0x0000000000000000
	word32 r12d_927
	word64 r13_928
	rsp_1060 = fn000000000040CDC0(rcx_910, 0x00000000000000A1, r13_863, rax_872, 0x00000000, 0x00000000, qwLoc08, qwArg00, qwArg08, out rbp_1055, out rsi_1069, out r12d_927, out r13_928, out r14_1058, out r15_1059)
	branch false l0000000000404356
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404356:
	Mem1028[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040391F:
	word64 rax_1007 = Mem859[rsp_1060 + 0x0000000000000040:word64]
	branch Mem859[0x000000000061A748:word64] <u rax_1007 l0000000000403933
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040392B_1:
	rax_1007 = Mem859[0x000000000061A748:word64]
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403933:
	Mem1017[0x000000000061A748:word64] = rax_1007
	branch (word32) (uint64) (r12d_927 + 0x00000001) != 0x0002001A l00000000004038EB
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040394E:
	branch rax_1007 <u r14_1058 l00000000004038CD
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403957:
	branch rax_1007 != 0x0000000000000000 l0000000000403301
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403960:
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404361:
	dcgettext(0x0000000000000000, 0x0000000000415C30, 0x0000000000000005)
	word64 r13_950
	word64 r12_951
	word64 rbx_954
	word32 edi_956
	byte SCZO_957
	word64 rdi_958
	word64 rax_959
	word32 eax_961
	byte SZO_962
	byte C_963
	word32 esi_964
	byte Z_965
	word32 ecx_966
	word64 rcx_967
	word32 edx_968
	word64 rdx_969
	byte S_970
	word16 ax_971
	byte al_972
	word32 r8d_973
	word32 r14d_975
	word32 r13d_976
	word32 r12d_977
	byte CZ_978
	bcuiposr0 None_979
	word32 r9d_980
	byte cl_982
	byte SO_983
	word32 ebp_984
	byte r13b_985
	word32 r15d_986
	byte r14b_987
	byte r12b_994
	byte sil_995
	call error (retsize: 8; depth: 8)
		uses: al_885,ax_884,bpl_909,C_946,cl_895,CZ_933,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_874,ebp_897,ebx_868,ecx_879,edi_869,edx_881,esi_941,fs_873,None_892,qwLoc08,qwLoc28_30,r10_901,r11_902,r12_864,r12b_907,r12d_927,r13_928,r13b_898,r13d_889,r14_929,r14b_900,r14d_888,r15_930,r15d_899,r8_913,r8d_914,r9_911,r9d_912,rax_944,rbp_925,rbx_867,rcx_910,rdi_943,rdx_942,rsi_939,rsp_931,S_883,SCZO_932,sil_940,SO_896,SZO_945,xmm0_903,xmm1_904,xmm2_905,xmm3_906,Z_878
		defs: al_972,ax_971,bpl_996,C_963,cl_982,CZ_978,eax_961,ebp_984,ebx_955,ecx_966,edi_956,edx_968,esi_964,fs_960,None_979,r10_988,r11_989,r12_951,r12b_994,r12d_977,r13_950,r13b_985,r13d_976,r14_949,r14b_987,r14d_975,r15_948,r15d_986,r8_974,r8d_973,r9_981,r9d_980,rax_959,rbp_952,rbx_954,rcx_967,rdi_958,rdx_969,rsi_953,rsp_947,S_970,SCZO_957,sil_995,SO_983,SZO_962,xmm0_990,xmm1_991,xmm2_992,xmm3_993,Z_965
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004035BF:
	branch rbp_1055 != rax_3576 l0000000000403EE2
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403EE2:
	free(rbp_1055)
	word64 rsp_3712
	word64 rbp_3713
	word64 r8_3714
	word64 r9_3715
	word64 r10_3716
	word64 r11_3717
	byte r12b_3718
	word64 r13_3719
	word64 r14_3720
	word64 r15_3721
	fn000000000040EAB0(r11_1054, r14_1811, r15_1059, fs_103, out rsp_3712, out rbp_3713, out r8_3714, out r9_3715, out r10_3716, out r11_3717, out r12b_3718, out r13_3719, out r14_3720, out r15_3721)
	dcgettext(0x0000000000000000, 0x0000000000415D10, 0x0000000000000005)
	word64 rsp_3737
	word64 r15_3738
	word64 r14_3739
	word64 r13_3740
	word64 r12_3741
	word64 rbp_3742
	word64 rsi_3743
	word64 rbx_3744
	word32 ebx_3745
	word32 edi_3746
	byte SCZO_3747
	word64 rdi_3748
	word64 rax_3749
	selector fs_3750
	word32 eax_3751
	byte SZO_3752
	byte C_3753
	word32 esi_3754
	byte Z_3755
	word32 ecx_3756
	word64 rcx_3757
	word32 edx_3758
	word64 rdx_3759
	byte S_3760
	word16 ax_3761
	byte al_3762
	word32 r8d_3763
	word64 r8_3764
	word32 r14d_3765
	word32 r13d_3766
	word32 r12d_3767
	byte CZ_3768
	bcuiposr0 None_3769
	word32 r9d_3770
	word64 r9_3771
	byte cl_3772
	byte SO_3773
	word32 ebp_3774
	byte r13b_3775
	word32 r15d_3776
	byte r14b_3777
	word64 r10_3778
	word64 r11_3779
	word128 xmm0_3780
	word128 xmm1_3781
	word128 xmm2_3782
	word128 xmm3_3783
	byte r12b_3784
	byte sil_3785
	byte bpl_3786
	call error (retsize: 8; depth: 8)
		uses: al_3580,ax_3579,bpl_3558,C_3736,cl_3502,CZ_3524,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3578,ebp_3557,ebx_3561,ecx_3510,edi_3525,edx_3514,esi_3732,fs_3511,None_3504,qwLoc08,qwLoc28_30,r10_3716,r11_3717,r12_3568,r12b_3718,r12d_3505,r13_3719,r13b_3499,r13d_3506,r14_3720,r14b_3498,r14d_3507,r15_3721,r15d_3513,r8_3714,r8d_3508,r9_3715,r9d_3503,rax_3734,rbp_3713,rbx_3724,rcx_3728,rdi_3733,rdx_3729,rsi_3730,rsp_3712,S_3509,SCZO_3584,sil_3731,SO_3501,SZO_3735,xmm0_3572,xmm1_3573,xmm2_3574,xmm3_3575,Z_3585
		defs: al_3762,ax_3761,bpl_3786,C_3753,cl_3772,CZ_3768,eax_3751,ebp_3774,ebx_3745,ecx_3756,edi_3746,edx_3758,esi_3754,fs_3750,None_3769,r10_3778,r11_3779,r12_3741,r12b_3784,r12d_3767,r13_3740,r13b_3775,r13d_3766,r14_3739,r14b_3777,r14d_3765,r15_3738,r15d_3776,r8_3764,r8d_3763,r9_3771,r9d_3770,rax_3749,rbp_3742,rbx_3744,rcx_3757,rdi_3748,rdx_3759,rsi_3743,rsp_3737,S_3760,SCZO_3747,sil_3785,SO_3773,SZO_3752,xmm0_3780,xmm1_3781,xmm2_3782,xmm3_3783,Z_3755
	word64 r14_3790
	word64 r12_3792
	word64 rbp_3793
	word64 rsi_3794
	word64 rbx_3795
	word32 ebx_3796
	word32 edi_3797
	byte SCZO_3798
	word64 rdi_3799
	word64 rax_3800
	selector fs_3801
	word32 eax_3802
	byte SZO_3803
	byte C_3804
	word32 esi_3805
	byte Z_3806
	word32 ecx_3807
	word64 rcx_3808
	word32 edx_3809
	word64 rdx_3810
	byte S_3811
	word16 ax_3812
	byte al_3813
	word32 r8d_3814
	word32 r14d_3816
	word32 r13d_3817
	word32 r12d_3818
	byte CZ_3819
	bcuiposr0 None_3820
	word32 r9d_3821
	byte cl_3823
	byte SO_3824
	word32 ebp_3825
	byte r13b_3826
	word32 r15d_3827
	byte r14b_3828
	word64 r10_3829
	byte sil_3836
	call closedir (retsize: 8; depth: 8)
		uses: al_3762,ax_3761,bpl_3786,C_3753,cl_3772,CZ_3768,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3751,ebp_3774,ebx_3745,ecx_3756,edi_3746,edx_3758,esi_3754,fs_3750,None_3769,qwLoc08,qwLoc28_30,r10_3778,r11_3779,r12_3741,r12b_3784,r12d_3767,r13_3740,r13b_3775,r13d_3766,r14_3739,r14b_3777,r14d_3765,r15_3738,r15d_3776,r8_3764,r8d_3763,r9_3771,r9d_3770,rax_3749,rbp_3742,rbx_3744,rcx_3757,rdi_3787,rdx_3759,rsi_3743,rsp_3737,S_3760,SCZO_3747,sil_3785,SO_3773,SZO_3752,xmm0_3780,xmm1_3781,xmm2_3782,xmm3_3783,Z_3755
		defs: al_3813,ax_3812,bpl_3837,C_3804,cl_3823,CZ_3819,eax_3802,ebp_3825,ebx_3796,ecx_3807,edi_3797,edx_3809,esi_3805,fs_3801,None_3820,r10_3829,r11_3830,r12_3792,r12b_3835,r12d_3818,r13_3791,r13b_3826,r13d_3817,r14_3790,r14b_3828,r14d_3816,r15_3789,r15d_3827,r8_3815,r8d_3814,r9_3822,r9d_3821,rax_3800,rbp_3793,rbx_3795,rcx_3808,rdi_3799,rdx_3810,rsi_3794,rsp_3788,S_3811,SCZO_3798,sil_3836,SO_3824,SZO_3803,xmm0_3831,xmm1_3832,xmm2_3833,xmm3_3834,Z_3806
	Mem3838[0x000000000061B030:word32] = 0x00000002
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035C8:
	word64 rax_3586 = Mem3560[0x000000000061AF18:word64]
	word64 rdx_3591 = Mem3560[0x000000000061AF20:word64] - rax_3586
	branch rdx_3591 <= 0x000000000000000F l0000000000404064
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000404064:
	word64 r13_3658
	word64 rsi_3661
	word32 edi_3664
	byte SCZO_3665
	word64 rdi_3666
	word64 rax_3667
	word32 eax_3669
	byte SZO_3670
	byte C_3671
	word32 esi_3672
	byte Z_3673
	word32 ecx_3674
	word64 rcx_3675
	word32 edx_3676
	word64 rdx_3677
	byte S_3678
	word16 ax_3679
	byte al_3680
	word32 r8d_3681
	word64 r8_3682
	word32 r14d_3683
	word32 r13d_3684
	word32 r12d_3685
	byte CZ_3686
	bcuiposr0 None_3687
	word32 r9d_3688
	word64 r9_3689
	byte cl_3690
	byte SO_3691
	word32 ebp_3692
	byte r13b_3693
	word32 r15d_3694
	byte r14b_3695
	word64 r10_3696
	word128 xmm0_3698
	word128 xmm1_3699
	word128 xmm2_3700
	word128 xmm3_3701
	byte r12b_3702
	byte sil_3703
	byte bpl_3704
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3589,ax_3588,bpl_3558,C_3583,cl_3502,CZ_3524,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3587,ebp_3557,ebx_3561,ecx_3510,edi_3525,edx_3514,esi_3653,fs_3511,None_3504,qwLoc08,qwLoc28_30,r10_3567,r11_3517,r12_3568,r12b_3493,r12d_3505,r13_3569,r13b_3499,r13d_3506,r14_3570,r14b_3498,r14d_3507,r15_3571,r15d_3513,r8_3565,r8d_3508,r9_3566,r9d_3503,rax_3586,rbp_3563,rbx_3512,rcx_3550,rdi_3654,rdx_3591,rsi_3651,rsp_3562,S_3509,SCZO_3593,sil_3652,SO_3501,SZO_3594,xmm0_3572,xmm1_3573,xmm2_3574,xmm3_3575,Z_3585
		defs: al_3680,ax_3679,bpl_3704,C_3671,cl_3690,CZ_3686,eax_3669,ebp_3692,ebx_3663,ecx_3674,edi_3664,edx_3676,esi_3672,fs_3668,None_3687,r10_3696,r11_3697,r12_3659,r12b_3702,r12d_3685,r13_3658,r13b_3693,r13d_3684,r14_3657,r14b_3695,r14d_3683,r15_3656,r15d_3694,r8_3682,r8d_3681,r9_3689,r9d_3688,rax_3667,rbp_3660,rbx_3662,rcx_3675,rdi_3666,rdx_3677,rsi_3661,rsp_3655,S_3678,SCZO_3665,sil_3703,SO_3691,SZO_3670,xmm0_3698,xmm1_3699,xmm2_3700,xmm3_3701,Z_3673
	rax_3586 = Mem3560[0x000000000061AF18:word64]
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004035E3:
	Mem3646[0x000000000061AF18:word64] = rax_3586 + 0x0000000000000010
	Mem3648[rax_3586 + 0x0000000000000008:word64] = Mem3646[rsp_1060 + 0x0000000000000040:word64]
	Mem3650[rax_3586:word64] = Mem3648[rsp_1060 + 0x0000000000000048:word64]
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004035FF:
	branch Mem1805[0x000000000061B10E:byte] != 0x00 l0000000000403615
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403608:
	branch Mem1805[0x000000000061B0D0:byte] == 0x00 l00000000004036D6
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403615:
	branch Mem1805[0x000000000061A3C0:byte] != 0x00 l0000000000403646
// DataOut: ebx fs r11 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040361E:
	word64 rdi_3319 = Mem1805[0x000000000061A610:word64]
	word64 rax_3321 = Mem1805[rdi_3319 + 0x0000000000000028:word64]
	branch rax_3321 >=u Mem1805[rdi_3319 + 0x0000000000000030:word64] l00000000004045E4
// DataOut: ebx fs r11 r14 r15 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004045E4:
	word64 rsp_3384
	word64 r13_3387
	word64 r12_3388
	word64 rsi_3390
	word32 edi_3393
	byte SCZO_3394
	word64 rdi_3395
	word64 rax_3396
	word32 eax_3398
	byte SZO_3399
	byte C_3400
	word32 esi_3401
	byte Z_3402
	word32 ecx_3403
	word64 rcx_3404
	word32 edx_3405
	word64 rdx_3406
	byte S_3407
	word16 ax_3408
	byte al_3409
	word32 r8d_3410
	word64 r8_3411
	word32 r14d_3412
	word32 r13d_3413
	word32 r12d_3414
	byte CZ_3415
	bcuiposr0 None_3416
	word32 r9d_3417
	word64 r9_3418
	byte cl_3419
	byte SO_3420
	word32 ebp_3421
	byte r13b_3422
	word32 r15d_3423
	byte r14b_3424
	word64 r10_3425
	word128 xmm0_3427
	word128 xmm1_3428
	word128 xmm2_3429
	word128 xmm3_3430
	byte r12b_3431
	byte sil_3432
	byte bpl_3433
	call __overflow (retsize: 8; depth: 8)
		uses: al_3325,ax_3324,bpl_1921,C_3327,cl_1931,CZ_1953,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3323,ebp_1929,ebx_1944,ecx_1939,edi_3320,edx_1943,esi_1961,fs_1940,None_1933,qwLoc08,qwLoc28_30,r10_1945,r11_1946,r12_1948,r12b_1922,r12d_1934,r13_1949,r13b_1928,r13d_1935,r14_1950,r14b_1927,r14d_1936,r15_1951,r15d_1942,r8_1963,r8d_1937,r9_1962,r9d_1932,rax_3321,rbp_1947,rbx_1941,rcx_1958,rdi_3319,rdx_1964,rsi_3383,rsp_1952,S_1938,SCZO_3326,sil_1960,SO_1930,SZO_1968,xmm0_1926,xmm1_1925,xmm2_1924,xmm3_1923,Z_2834
		defs: al_3409,ax_3408,bpl_3433,C_3400,cl_3419,CZ_3415,eax_3398,ebp_3421,ebx_3392,ecx_3403,edi_3393,edx_3405,esi_3401,fs_3397,None_3416,r10_3425,r11_3426,r12_3388,r12b_3431,r12d_3414,r13_3387,r13b_3422,r13d_3413,r14_3386,r14b_3424,r14d_3412,r15_3385,r15d_3423,r8_3411,r8d_3410,r9_3418,r9d_3417,rax_3396,rbp_3389,rbx_3391,rcx_3404,rdi_3395,rdx_3406,rsi_3390,rsp_3384,S_3407,SCZO_3394,sil_3432,SO_3420,SZO_3399,xmm0_3427,xmm1_3428,xmm2_3429,xmm3_3430,Z_3402
// DataOut: ebx fs r11 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403633:
	Mem3381[rdi_3319 + 0x0000000000000028:word64] = rax_3321 + 0x0000000000000001
	Mem3382[rax_3321:byte] = 0x0A
// DataOut: ebx fs r11 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040363E:
	Mem3378[0x000000000061B018:word64] = Mem1805[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: ebx fs r11 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403646:
	Mem2886[0x000000000061A3C0:byte] = 0x00
	branch Mem1805[0x000000000061B130:byte] != 0x00 l0000000000403F2E
// DataOut: ebx fs r11 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403F2E:
	word64 rsp_3146
	word64 r13_3149
	word64 r12_3150
	word64 rsi_3152
	word32 edi_3155
	byte SCZO_3156
	word64 rdi_3157
	word64 rax_3158
	word32 eax_3160
	byte SZO_3161
	byte C_3162
	word32 esi_3163
	byte Z_3164
	word32 ecx_3165
	word64 rcx_3166
	word32 edx_3167
	word64 rdx_3168
	byte S_3169
	word16 ax_3170
	byte al_3171
	word32 r8d_3172
	word64 r8_3173
	word32 r14d_3174
	word32 r13d_3175
	word32 r12d_3176
	byte CZ_3177
	bcuiposr0 None_3178
	word32 r9d_3179
	word64 r9_3180
	byte cl_3181
	byte SO_3182
	word32 ebp_3183
	byte r13b_3184
	word32 r15d_3185
	byte r14b_3186
	word64 r10_3187
	word128 xmm0_3189
	word128 xmm1_3190
	word128 xmm2_3191
	word128 xmm3_3192
	byte r12b_3193
	byte sil_3194
	byte bpl_3195
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2880,ax_2871,bpl_2835,C_2883,cl_2845,CZ_2867,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_2870,ebp_2843,ebx_2858,ecx_2853,edi_2868,edx_2857,esi_2875,fs_2854,None_2847,qwLoc08,qwLoc28_30,r10_2859,r11_2860,r12_2862,r12b_2836,r12d_2848,r13_2863,r13b_2842,r13d_2849,r14_2864,r14b_2841,r14d_2850,r15_2865,r15d_2856,r8_2877,r8d_2851,r9_2876,r9d_2846,rax_2879,rbp_2861,rbx_2855,rcx_3142,rdi_3145,rdx_3143,rsi_3144,rsp_2866,S_2852,SCZO_2884,sil_2874,SO_2844,SZO_2882,xmm0_2840,xmm1_2839,xmm2_2838,xmm3_2837,Z_2885
		defs: al_3171,ax_3170,bpl_3195,C_3162,cl_3181,CZ_3177,eax_3160,ebp_3183,ebx_3154,ecx_3165,edi_3155,edx_3167,esi_3163,fs_3159,None_3178,r10_3187,r11_3188,r12_3150,r12b_3193,r12d_3176,r13_3149,r13b_3184,r13d_3175,r14_3148,r14b_3186,r14d_3174,r15_3147,r15d_3185,r8_3173,r8d_3172,r9_3180,r9d_3179,rax_3158,rbp_3151,rbx_3153,rcx_3166,rdi_3157,rdx_3168,rsi_3152,rsp_3146,S_3169,SCZO_3156,sil_3194,SO_3182,SZO_3161,xmm0_3189,xmm1_3190,xmm2_3191,xmm3_3192,Z_3164
	Mem3197[0x000000000061B018:word64] = Mem2886[0x000000000061B018:word64] + 0x0000000000000002
	branch Mem3197[0x000000000061B130:byte] == 0x00 l000000000040365A
// DataOut: ebx fs r11 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403F5E:
	word64 rax_3200 = Mem3197[0x000000000061AF78:word64]
	branch Mem3197[0x000000000061AF80:word64] <u rax_3200 + 0x0000000000000008 l000000000040407F
// DataOut: ebx fs r11 r14 r15 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040407F:
	word64 rsp_3264
	word64 r13_3267
	word64 r12_3268
	word64 rsi_3270
	word32 edi_3273
	byte SCZO_3274
	word64 rdi_3275
	word64 rax_3276
	word32 eax_3278
	byte SZO_3279
	byte C_3280
	word32 esi_3281
	byte Z_3282
	word32 ecx_3283
	word64 rcx_3284
	word32 edx_3285
	word64 rdx_3286
	byte S_3287
	word16 ax_3288
	byte al_3289
	word32 r8d_3290
	word64 r8_3291
	word32 r14d_3292
	word32 r13d_3293
	word32 r12d_3294
	byte CZ_3295
	bcuiposr0 None_3296
	word32 r9d_3297
	word64 r9_3298
	byte cl_3299
	byte SO_3300
	word32 ebp_3301
	byte r13b_3302
	word32 r15d_3303
	byte r14b_3304
	word64 r10_3305
	word128 xmm0_3307
	word128 xmm1_3308
	word128 xmm2_3309
	word128 xmm3_3310
	byte r12b_3311
	byte sil_3312
	byte bpl_3313
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3203,ax_3202,bpl_3195,C_3207,cl_3181,CZ_3177,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3201,ebp_3183,ebx_3154,ecx_3165,edi_3155,edx_3167,esi_3163,fs_3159,None_3178,qwLoc08,qwLoc28_30,r10_3187,r11_3188,r12_3150,r12b_3193,r12d_3176,r13_3149,r13b_3184,r13d_3175,r14_3148,r14b_3186,r14d_3174,r15_3147,r15d_3185,r8_3173,r8d_3172,r9_3180,r9d_3179,rax_3200,rbp_3151,rbx_3153,rcx_3166,rdi_3263,rdx_3204,rsi_3262,rsp_3146,S_3169,SCZO_3206,sil_3194,SO_3182,SZO_3161,xmm0_3189,xmm1_3190,xmm2_3191,xmm3_3192,Z_3199
		defs: al_3289,ax_3288,bpl_3313,C_3280,cl_3299,CZ_3295,eax_3278,ebp_3301,ebx_3272,ecx_3283,edi_3273,edx_3285,esi_3281,fs_3277,None_3296,r10_3305,r11_3306,r12_3268,r12b_3311,r12d_3294,r13_3267,r13b_3302,r13d_3293,r14_3266,r14b_3304,r14d_3292,r15_3265,r15d_3303,r8_3291,r8d_3290,r9_3298,r9d_3297,rax_3276,rbp_3269,rbx_3271,rcx_3284,rdi_3275,rdx_3286,rsi_3270,rsp_3264,S_3287,SCZO_3274,sil_3312,SO_3300,SZO_3279,xmm0_3307,xmm1_3308,xmm2_3309,xmm3_3310,Z_3282
	rax_3200 = Mem3197[0x000000000061AF78:word64]
// DataOut: ebx fs r11 r14 r15 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403F76:
	Mem3258[rax_3200:word64] = Mem3197[0x000000000061B018:word64]
	Mem3260[0x000000000061AF78:word64] = Mem3258[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040365A:
	word64 rdx_2934 = Mem2886[0x000000000061B0E0:word64]
	branch rbx_1816 != 0x0000000000000000 l000000000040366F
// DataOut: ebx fs r11 r14 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040366B_1:
	rbx_1816 = r14_1811
	ebx_1052 = (word32) r14_1811 (alias)
// DataOut: ebx fs r11 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040366F:
	word64 rbx_2944
	word64 rsp_2945
	word64 rsi_2946
	word32 edi_2947
	word64 r8_2948
	word64 r9_2949
	word64 r10_2950
	word64 r11_2951
	word64 r12_2952
	word64 r13_2953
	word64 r14_2954
	word64 r15_2955
	word64 rax_2956 = fn00000000004052D0(rdx_2934, ebx_1052, rbp_1055, rbx_1816, r11_1054, r15_1059, fs_103, out rbx_2944, out rsp_2945, out rsi_2946, out edi_2947, out r8_2948, out r9_2949, out r10_2950, out r11_2951, out r12_2952, out r13_2953, out r14_2954, out r15_2955)
	Mem2958[0x000000000061B018:word64] = Mem2886[0x000000000061B018:word64] + rax_2956
	branch Mem2958[0x000000000061B130:byte] == 0x00 l00000000004036B3
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403689:
	word64 rax_3021 = Mem2958[0x000000000061AF78:word64]
	branch Mem2958[0x000000000061AF80:word64] <u rax_3021 + 0x0000000000000008 l000000000040409A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040409A:
	word64 rsp_3085
	word64 r15_3086
	word64 r14_3087
	word64 r13_3088
	word64 r12_3089
	word64 rbp_3090
	word64 rsi_3091
	word64 rbx_3092
	word32 ebx_3093
	word32 edi_3094
	byte SCZO_3095
	word64 rdi_3096
	word64 rax_3097
	selector fs_3098
	word32 eax_3099
	byte SZO_3100
	byte C_3101
	word32 esi_3102
	byte Z_3103
	word32 ecx_3104
	word64 rcx_3105
	word32 edx_3106
	word64 rdx_3107
	byte S_3108
	word16 ax_3109
	byte al_3110
	word32 r8d_3111
	word64 r8_3112
	word32 r14d_3113
	word32 r13d_3114
	word32 r12d_3115
	byte CZ_3116
	bcuiposr0 None_3117
	word32 r9d_3118
	word64 r9_3119
	byte cl_3120
	byte SO_3121
	word32 ebp_3122
	byte r13b_3123
	word32 r15d_3124
	byte r14b_3125
	word64 r10_3126
	word64 r11_3127
	word128 xmm0_3128
	word128 xmm1_3129
	word128 xmm2_3130
	word128 xmm3_3131
	byte r12b_3132
	byte sil_3133
	byte bpl_3134
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3024,ax_3023,bpl_2887,C_3028,cl_2897,CZ_2918,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_3022,ebp_2895,ebx_2939,ecx_2905,edi_2947,edx_2935,esi_2926,fs_2906,None_2899,qwLoc08,qwLoc28_30,r10_2950,r11_2951,r12_2952,r12b_2888,r12d_2900,r13_2953,r13b_2894,r13d_2901,r14_2954,r14b_2893,r14d_2902,r15_2955,r15d_2908,r8_2948,r8d_2903,r9_2949,r9d_2898,rax_3021,rbp_2912,rbx_2944,rcx_2940,rdi_3084,rdx_3025,rsi_3083,rsp_2945,S_2904,SCZO_3027,sil_2925,SO_2896,SZO_2941,xmm0_2892,xmm1_2891,xmm2_2890,xmm3_2889,Z_2960
		defs: al_3110,ax_3109,bpl_3134,C_3101,cl_3120,CZ_3116,eax_3099,ebp_3122,ebx_3093,ecx_3104,edi_3094,edx_3106,esi_3102,fs_3098,None_3117,r10_3126,r11_3127,r12_3089,r12b_3132,r12d_3115,r13_3088,r13b_3123,r13d_3114,r14_3087,r14b_3125,r14d_3113,r15_3086,r15d_3124,r8_3112,r8d_3111,r9_3119,r9d_3118,rax_3097,rbp_3090,rbx_3092,rcx_3105,rdi_3096,rdx_3107,rsi_3091,rsp_3085,S_3108,SCZO_3095,sil_3133,SO_3121,SZO_3100,xmm0_3128,xmm1_3129,xmm2_3130,xmm3_3131,Z_3103
	rax_3021 = Mem2958[0x000000000061AF78:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004036A1:
	Mem3079[rax_3021:word64] = Mem2958[0x000000000061B018:word64]
	Mem3081[0x000000000061AF78:word64] = Mem3079[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004036B3:
	word64 rsp_2968
	word64 r15_2969
	word64 r14_2970
	word64 r13_2971
	word64 rbp_2973
	word64 rsi_2974
	word64 rbx_2975
	word32 ebx_2976
	word32 edi_2977
	byte SCZO_2978
	word64 rdi_2979
	word64 rax_2980
	selector fs_2981
	word32 eax_2982
	byte SZO_2983
	byte C_2984
	word32 esi_2985
	byte Z_2986
	word32 ecx_2987
	word64 rcx_2988
	word32 edx_2989
	word64 rdx_2990
	byte S_2991
	word16 ax_2992
	byte al_2993
	word32 r8d_2994
	word64 r8_2995
	word32 r14d_2996
	word32 r13d_2997
	word32 r12d_2998
	byte CZ_2999
	bcuiposr0 None_3000
	word32 r9d_3001
	word64 r9_3002
	byte cl_3003
	byte SO_3004
	word32 ebp_3005
	byte r13b_3006
	word32 r15d_3007
	byte r14b_3008
	word64 r10_3009
	word64 r11_3010
	word128 xmm0_3011
	word128 xmm1_3012
	word128 xmm2_3013
	word128 xmm3_3014
	byte r12b_3015
	byte sil_3016
	byte bpl_3017
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2930,ax_2921,bpl_2887,C_2942,cl_2897,CZ_2918,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_2920,ebp_2895,ebx_2939,ecx_2905,edi_2947,edx_2935,esi_2966,fs_2906,None_2899,qwLoc08,qwLoc28_30,r10_2950,r11_2951,r12_2952,r12b_2888,r12d_2900,r13_2953,r13b_2894,r13d_2901,r14_2954,r14b_2893,r14d_2902,r15_2955,r15d_2908,r8_2948,r8d_2903,r9_2949,r9d_2898,rax_2956,rbp_2912,rbx_2944,rcx_2962,rdi_2967,rdx_2963,rsi_2964,rsp_2945,S_2904,SCZO_2959,sil_2965,SO_2896,SZO_2941,xmm0_2892,xmm1_2891,xmm2_2890,xmm3_2889,Z_2960
		defs: al_2993,ax_2992,bpl_3017,C_2984,cl_3003,CZ_2999,eax_2982,ebp_3005,ebx_2976,ecx_2987,edi_2977,edx_2989,esi_2985,fs_2981,None_3000,r10_3009,r11_3010,r12_2972,r12b_3015,r12d_2998,r13_2971,r13b_3006,r13d_2997,r14_2970,r14b_3008,r14d_2996,r15_2969,r15d_3007,r8_2995,r8d_2994,r9_3002,r9d_3001,rax_2980,rbp_2973,rbx_2975,rcx_2988,rdi_2979,rdx_2990,rsi_2974,rsp_2968,S_2991,SCZO_2978,sil_3016,SO_3004,SZO_2983,xmm0_3011,xmm1_3012,xmm2_3013,xmm3_3014,Z_2986
	Mem3019[0x000000000061B018:word64] = Mem2958[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004036D6:
	word64 rsp_2019 = fn0000000000404DD0()
	word32 eax_2020 = (word32) Mem1805[rsp_2019 + 0x000000000000002F:byte]
	Mem2025[rsp_2019 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem2026[rsp_2019 + 0x0000000000000010:word32] = eax_2020
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004036F0:
	Mem2030[r12_1154:word32] = 0x00000000
	word64 rsp_2033
	word64 r15_2034
	word64 r14_2035
	word64 r13_2036
	word64 rbp_2038
	word64 rsi_2039
	word64 rbx_2040
	word32 ebx_2041
	word32 edi_2042
	byte SCZO_2043
	word64 rax_2045
	selector fs_2046
	word32 eax_2047
	byte SZO_2048
	byte C_2049
	word32 esi_2050
	byte Z_2051
	word32 ecx_2052
	word64 rcx_2053
	word32 edx_2054
	word64 rdx_2055
	byte S_2056
	word16 ax_2057
	byte al_2058
	word32 r8d_2059
	word64 r8_2060
	word32 r14d_2061
	word32 r13d_2062
	word32 r12d_2063
	byte CZ_2064
	bcuiposr0 None_2065
	word32 r9d_2066
	word64 r9_2067
	byte cl_2068
	byte SO_2069
	word32 ebp_2070
	byte r13b_2071
	word32 r15d_2072
	byte r14b_2073
	word64 r10_2074
	word64 r11_2075
	word128 xmm0_2076
	word128 xmm1_2077
	word128 xmm2_2078
	word128 xmm3_2079
	byte r12b_2080
	byte sil_2081
	byte bpl_2082
	word64 rdi_2044
	call readdir (retsize: 8; depth: 8)
		uses: al_2024,ax_2023,bpl_1972,C_2018,cl_1982,CZ_2003,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_2020,ebp_1980,ebx_1995,ecx_1990,edi_2032,edx_1994,esi_2011,fs_1991,None_1984,qwLoc08,qwLoc28_30,r10_1996,r11_1997,r12_2027,r12b_1973,r12d_1985,r13_2028,r13b_1979,r13d_1986,r14_2001,r14b_1978,r14d_1987,r15_2002,r15d_1993,r8_2013,r8d_1988,r9_2012,r9d_1983,rax_2021,rbp_1998,rbx_1992,rcx_2006,rdi_2031,rdx_2014,rsi_2009,rsp_2019,S_1989,SCZO_2007,sil_2010,SO_1981,SZO_2017,xmm0_1977,xmm1_1976,xmm2_1975,xmm3_1974,Z_2008
		defs: al_2058,ax_2057,bpl_2082,C_2049,cl_2068,CZ_2064,eax_2047,ebp_2070,ebx_2041,ecx_2052,edi_2042,edx_2054,esi_2050,fs_2046,None_2065,r10_2074,r11_2075,r12_2037,r12b_2080,r12d_2063,r13_2036,r13b_2071,r13d_2062,r14_2035,r14b_2073,r14d_2061,r15_2034,r15d_2072,r8_2060,r8d_2059,r9_2067,r9d_2066,rax_2045,rbp_2038,rbx_2040,rcx_2053,rdi_2044,rdx_2055,rsi_2039,rsp_2033,S_2056,SCZO_2043,sil_2081,SO_2069,SZO_2048,xmm0_2076,xmm1_2077,xmm2_2078,xmm3_2079,Z_2051
	branch rax_2045 == 0x0000000000000000 l0000000000403CC0
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403CC0:
	word64 rdx_2262 = (uint64) Mem2030[r12_1154:word32]
	word32 edx_2263 = (word32) rdx_2262
	branch edx_2263 == 0x00000000 l0000000000403CF3
// DataOut: eax fs r10 r11 r14 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403CC8:
	dcgettext(0x0000000000000000, 0x00000000004139B1, 0x0000000000000005)
	word64 rsp_2814
	word64 rbp_2815
	word64 rsi_2816
	word64 rdi_2817
	word64 r8_2818
	word64 r9_2819
	word64 r10_2820
	word64 r11_2821
	word64 r13_2823
	word64 r14_2824
	word64 r15_2825
	fn0000000000405810((word32) (uint64) Mem2030[rsp_2033 + 0x0000000000000010:word32], r11_2075, r14_2035, r15_2034, fs_2046, out rsp_2814, out rbp_2815, out rsi_2816, out rdi_2817, out r8_2818, out r9_2819, out r10_2820, out r11_2821, out r12_1154, out r13_2823, out r14_2824, out r15_2825)
	branch Mem2030[r12_1154:word32] == 0x0000004B l0000000000403770
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403CF3:
	word64 rsp_2271
	word64 r13_2274
	word64 r12_2275
	word64 rbp_2276
	word64 rbx_2278
	word32 ebx_2279
	word32 edi_2280
	byte SCZO_2281
	word64 rdi_2282
	word64 rax_2283
	word32 eax_2285
	byte SZO_2286
	byte C_2287
	word32 esi_2288
	byte Z_2289
	word32 ecx_2290
	word64 rcx_2291
	word32 edx_2292
	word64 rdx_2293
	byte S_2294
	word16 ax_2295
	byte al_2296
	word32 r8d_2297
	word64 r8_2298
	word32 r14d_2299
	word32 r13d_2300
	word32 r12d_2301
	byte CZ_2302
	bcuiposr0 None_2303
	word32 r9d_2304
	byte cl_2306
	byte SO_2307
	word32 ebp_2308
	byte r13b_2309
	word32 r15d_2310
	byte r14b_2311
	word64 r10_2312
	byte sil_2319
	word64 r14_2273
	word64 r15_2272
	word64 rsi_2277
	selector fs_2284
	call closedir (retsize: 8; depth: 8)
		uses: al_2058,ax_2057,bpl_2088,C_2267,cl_2068,CZ_2064,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_2047,ebp_2087,ebx_2041,ecx_2052,edi_2042,edx_2263,esi_2050,fs_2046,None_2065,qwLoc08,qwLoc28_30,r10_2074,r11_2075,r12_2037,r12b_2080,r12d_2063,r13_2268,r13b_2071,r13d_2062,r14_2035,r14b_2073,r14d_2061,r15_2034,r15d_2072,r8_2060,r8d_2059,r9_2067,r9d_2066,rax_2045,rbp_2086,rbx_2040,rcx_2053,rdi_2270,rdx_2262,rsi_2039,rsp_2033,S_2056,SCZO_2043,sil_2081,SO_2069,SZO_2265,xmm0_2076,xmm1_2077,xmm2_2078,xmm3_2079,Z_2266
		defs: al_2296,ax_2295,bpl_2320,C_2287,cl_2306,CZ_2302,eax_2285,ebp_2308,ebx_2279,ecx_2290,edi_2280,edx_2292,esi_2288,fs_2284,None_2303,r10_2312,r11_2313,r12_2275,r12b_2318,r12d_2301,r13_2274,r13b_2309,r13d_2300,r14_2273,r14b_2311,r14d_2299,r15_2272,r15d_2310,r8_2298,r8d_2297,r9_2305,r9d_2304,rax_2283,rbp_2276,rbx_2278,rcx_2291,rdi_2282,rdx_2293,rsi_2277,rsp_2271,S_2294,SCZO_2281,sil_2319,SO_2307,SZO_2286,xmm0_2314,xmm1_2315,xmm2_2316,xmm3_2317,Z_2289
	branch eax_2285 != 0x00000000 l0000000000403EBC
// DataOut: fs r10 r11 r14 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403EBC:
	dcgettext(0x0000000000000000, 0x00000000004139C6, 0x0000000000000005)
	word64 rsp_2789
	word64 rbp_2790
	word64 rdi_2792
	word64 r8_2793
	word64 r10_2795
	word64 r12_2797
	word64 r13_2798
	fn0000000000405810((word32) Mem2030[rsp_2271 + 0x000000000000002F:byte], r11_1054, r14_2273, r15_2272, fs_2284, out rsp_2789, out rbp_2790, out rsi_2277, out rdi_2792, out r8_2793, out r9_1065, out r10_2795, out r11_1054, out r12_2797, out r13_2798, out r14_2273, out r15_2272)
// DataOut: fs r10 r11 r14 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403D03:
	word64 rsi_2340
	word64 r12_2342
	word64 r14_2344
	word64 rbp_2339
	rsp_1670 = fn0000000000404E80(rsi_2277, r11_1054, r14_2273, r15_2272, out rbp_2339, out rsi_2340, out r8_1066, out r12_2342, out r13_1712, out r14_2344, out r15_1059)
	branch Mem2030[0x000000000061B10E:byte] != 0x00 l0000000000403EAA
// DataOut: bpl fs r10 r11 r12b r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403EAA:
	word64 rsi_2772
	rsp_1670 = fn0000000000405090((byte) (word32) Mem2030[rsp_1670 + 0x000000000000002F:byte], r14_2344, r11_1054, out rbp_2339, out rsi_2772, out r12b_1427, out r13_1712, out r15_1059)
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403D15:
	word64 rax_2358 = (uint64) Mem2030[0x000000000061B150:word32]
	word32 eax_2359 = (word32) rax_2358
	branch eax_2359 == 0x00000000 l0000000000403D2C
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403D1F:
	branch Mem2030[0x000000000061B144:byte] == 0x00 l0000000000403E00
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403D2C:
	branch Mem2030[0x000000000061B130:byte] != 0x00 l0000000000403F8D
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403F8D:
	word64 r15_2713
	word64 r14_2714
	word64 r13_2715
	word64 r12_2716
	word64 rsi_2718
	word64 rbx_2719
	word32 ebx_2720
	word32 edi_2721
	byte SCZO_2722
	word64 rdi_2723
	word64 rax_2724
	word32 eax_2726
	byte SZO_2727
	byte C_2728
	word32 esi_2729
	byte Z_2730
	word32 ecx_2731
	word64 rcx_2732
	word32 edx_2733
	word64 rdx_2734
	byte S_2735
	word16 ax_2736
	byte al_2737
	word32 r8d_2738
	word64 r8_2739
	word32 r14d_2740
	word32 r13d_2741
	word32 r12d_2742
	byte CZ_2743
	bcuiposr0 None_2744
	word32 r9d_2745
	word64 r9_2746
	byte cl_2747
	byte SO_2748
	word32 ebp_2749
	byte r13b_2750
	word32 r15d_2751
	byte r14b_2752
	word64 r10_2753
	word64 r11_2754
	byte r12b_2759
	byte sil_2760
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2296,ax_2295,bpl_2320,C_2362,cl_2306,CZ_2302,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_2359,ebp_2308,ebx_2279,ecx_2290,edi_2328,edx_2292,esi_2356,fs_2284,None_2303,qwLoc08,qwLoc28_30,r10_2324,r11_2325,r12_2342,r12b_2349,r12d_2301,r13_2351,r13b_2309,r13d_2300,r14_2344,r14b_2311,r14d_2299,r15_2352,r15d_2310,r8_2341,r8d_2297,r9_2333,r9d_2304,rax_2358,rbp_2350,rbx_2278,rcx_2708,rdi_2711,rdx_2709,rsi_2710,rsp_2353,S_2294,SCZO_2416,sil_2355,SO_2307,SZO_2360,xmm0_2314,xmm1_2315,xmm2_2316,xmm3_2317,Z_2417
		defs: al_2737,ax_2736,bpl_2761,C_2728,cl_2747,CZ_2743,eax_2726,ebp_2749,ebx_2720,ecx_2731,edi_2721,edx_2733,esi_2729,fs_2725,None_2744,r10_2753,r11_2754,r12_2716,r12b_2759,r12d_2742,r13_2715,r13b_2750,r13d_2741,r14_2714,r14b_2752,r14d_2740,r15_2713,r15d_2751,r8_2739,r8d_2738,r9_2746,r9d_2745,rax_2724,rbp_2717,rbx_2719,rcx_2732,rdi_2723,rdx_2734,rsi_2718,rsp_2712,S_2735,SCZO_2722,sil_2760,SO_2748,SZO_2727,xmm0_2755,xmm1_2756,xmm2_2757,xmm3_2758,Z_2730
	Mem2763[0x000000000061B018:word64] = Mem2030[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403D39:
	word64 rax_2460 = dcgettext(0x0000000000000000, 0x00000000004139DB, 0x0000000000000005)
	fputs_unlocked(rax_2460, Mem2030[0x000000000061A610:word64])
	word64 rax_2467 = DPB(rax_2460, strlen(rax_2460), 0)
	word64 rdi_2468 = Mem2030[0x000000000061A610:word64]
	Mem2471[0x000000000061B018:word64] = Mem2030[0x000000000061B018:word64] + rax_2467
	word64 rax_2472 = Mem2471[rdi_2468 + 0x0000000000000028:word64]
	branch rax_2472 >=u Mem2471[rdi_2468 + 0x0000000000000030:word64] l00000000004044EB
// DataOut: fs rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004044EB:
	word64 r15_2659
	word64 r14_2660
	word64 r13_2661
	word64 r12_2662
	word64 rsi_2664
	word64 rbx_2665
	word32 ebx_2666
	word32 edi_2667
	byte SCZO_2668
	word64 rdi_2669
	word64 rax_2670
	word32 eax_2672
	byte SZO_2673
	byte C_2674
	word32 esi_2675
	byte Z_2676
	word32 ecx_2677
	word64 rcx_2678
	word32 edx_2679
	word64 rdx_2680
	byte S_2681
	word16 ax_2682
	byte al_2683
	word32 r8d_2684
	word64 r8_2685
	word32 r14d_2686
	word32 r13d_2687
	word32 r12d_2688
	byte CZ_2689
	bcuiposr0 None_2690
	word32 r9d_2691
	word64 r9_2692
	byte cl_2693
	byte SO_2694
	word32 ebp_2695
	byte r13b_2696
	word32 r15d_2697
	byte r14b_2698
	word64 r10_2699
	word64 r11_2700
	byte r12b_2705
	byte sil_2706
	call __overflow (retsize: 8; depth: 8)
		uses: al_2476,ax_2475,bpl_2418,C_2478,cl_2428,CZ_2449,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_2474,ebp_2426,ebx_2440,ecx_2436,edi_2469,edx_2439,esi_2453,fs_2437,None_2430,qwLoc08,qwLoc28_30,r10_2441,r11_2442,r12_2444,r12b_2419,r12d_2431,r13_2445,r13b_2425,r13d_2432,r14_2446,r14b_2424,r14d_2433,r15_2447,r15d_2438,r8_2455,r8d_2434,r9_2454,r9d_2429,rax_2472,rbp_2443,rbx_2462,rcx_2450,rdi_2468,rdx_2457,rsi_2657,rsp_2448,S_2435,SCZO_2477,sil_2452,SO_2427,SZO_2456,xmm0_2423,xmm1_2422,xmm2_2421,xmm3_2420,Z_2451
		defs: al_2683,ax_2682,bpl_2707,C_2674,cl_2693,CZ_2689,eax_2672,ebp_2695,ebx_2666,ecx_2677,edi_2667,edx_2679,esi_2675,fs_2671,None_2690,r10_2699,r11_2700,r12_2662,r12b_2705,r12d_2688,r13_2661,r13b_2696,r13d_2687,r14_2660,r14b_2698,r14d_2686,r15_2659,r15d_2697,r8_2685,r8d_2684,r9_2692,r9d_2691,rax_2670,rbp_2663,rbx_2665,rcx_2678,rdi_2669,rdx_2680,rsi_2664,rsp_2658,S_2681,SCZO_2668,sil_2706,SO_2694,SZO_2673,xmm0_2701,xmm1_2702,xmm2_2703,xmm3_2704,Z_2676
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403D80:
	Mem2655[rdi_2468 + 0x0000000000000028:word64] = rax_2472 + 0x0000000000000001
	Mem2656[rax_2472:byte] = 0x20
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403D8B:
	word64 rdx_2508 = (uint64) Mem2471[0x000000000061B140:word32]
	word64 r8_2506 = Mem2471[0x000000000061B138:word64]
	word64 rdi_2511 = Mem2471[rsp_1670 + 0x0000000000000008:word64]
	Mem2514[0x000000000061B018:word64] = Mem2471[0x000000000061B018:word64] + 0x0000000000000001
	word32 edx_2509 = (word32) rdx_2508
	word64 rbp_2517
	word64 r10_2520
	word64 rax_2525 = fn000000000040BD70(0x0000000000000200, edx_2509, rbp_2339, rsp_1670 + 0x00000000000000E0, rdi_2511, r8_2506, fs_2284, qwLoc08, qwArg00, qwArg08, out rsp_1670, out rbp_2517, out r8_1066, out r9_1065, out r10_2520, out r11_1054, out r12b_1427, out r13_1712, out r15_1059)
	fputs_unlocked(rax_2525, Mem2514[0x000000000061A610:word64])
	word64 rax_2534 = DPB(rax_2525, strlen(rax_2525), 0)
	word64 rdi_2535 = Mem2514[0x000000000061A610:word64]
	Mem2538[0x000000000061B018:word64] = Mem2514[0x000000000061B018:word64] + rax_2534
	word64 rax_2539 = Mem2538[rdi_2535 + 0x0000000000000028:word64]
	branch rax_2539 >=u Mem2538[rdi_2535 + 0x0000000000000030:word64] l00000000004044DC
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044DC:
	word64 r14_2606
	word64 r12_2608
	word64 rbp_2609
	word64 rsi_2610
	word64 rbx_2611
	word32 ebx_2612
	word32 edi_2613
	byte SCZO_2614
	word64 rdi_2615
	word64 rax_2616
	selector fs_2617
	word32 eax_2618
	byte SZO_2619
	byte C_2620
	word32 esi_2621
	byte Z_2622
	word32 ecx_2623
	word64 rcx_2624
	word32 edx_2625
	word64 rdx_2626
	byte S_2627
	word16 ax_2628
	byte al_2629
	word32 r8d_2630
	word32 r14d_2632
	word32 r13d_2633
	word32 r12d_2634
	byte CZ_2635
	bcuiposr0 None_2636
	word32 r9d_2637
	byte cl_2639
	byte SO_2640
	word32 ebp_2641
	byte r13b_2642
	word32 r15d_2643
	byte r14b_2644
	word64 r10_2645
	byte sil_2652
	call __overflow (retsize: 8; depth: 8)
		uses: al_2543,ax_2542,bpl_2479,C_2545,cl_2488,CZ_2503,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_16,dwLoc18_21,eax_2541,ebp_2486,ebx_2498,ecx_2495,edi_2536,edx_2509,esi_2603,fs_2496,None_2490,qwLoc08,qwLoc28_30,r10_2520,r11_2521,r12_2500,r12b_2522,r12d_2491,r13_2523,r13b_2485,r13d_2492,r14_2501,r14b_2484,r14d_2493,r15_2524,r15d_2497,r8_2518,r8d_2507,r9_2519,r9d_2489,rax_2539,rbp_2517,rbx_2529,rcx_2512,rdi_2535,rdx_2508,rsi_2601,rsp_2516,S_2494,SCZO_2544,sil_2602,SO_2487,SZO_2505,xmm0_2483,xmm1_2482,xmm2_2481,xmm3_2480,Z_2504
		defs: al_2629,ax_2628,bpl_2653,C_2620,cl_2639,CZ_2635,eax_2618,ebp_2641,ebx_2612,ecx_2623,edi_2613,edx_2625,esi_2621,fs_2617,None_2636,r10_2645,r11_2646,r12_2608,r12b_2651,r12d_2634,r13_2607,r13b_2642,r13d_2633,r14_2606,r14b_2644,r14d_2632,r15_2605,r15d_2643,r8_2631,r8d_2630,r9_2638,r9d_2637,rax_2616,rbp_2609,rbx_2611,rcx_2624,rdi_2615,rdx_2626,rsi_2610,rsp_2604,S_2627,SCZO_2614,sil_2652,SO_2640,SZO_2619,xmm0_2647,xmm1_2648,xmm2_2649,xmm3_2650,Z_2622
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403DED:
	Mem2599[rdi_2535 + 0x0000000000000028:word64] = rax_2539 + 0x0000000000000001
	Mem2600[rax_2539:byte] = 0x0A
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403DF8:
	Mem2596[0x000000000061B018:word64] = Mem2538[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E00:
	branch Mem2030[0x000000000061B1B0:word64] == 0x0000000000000000 l00000000004034A1
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E0E:
	fn00000000004079F0(out rsp_1670)
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034A1:
	word64 rbx_1914 = Mem1805[rsp_1670 + 0x0000000000000018:word64]
	free(Mem1805[rbx_1914:word64])
	free(Mem1805[rbx_1914 + 0x0000000000000008:word64])
	free(rbx_1914)
	Mem1918[0x000000000061B0D0:byte] = 0x01
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034C6:
	Mem1791[rsp_1670 + 0x0000000000000018:word64] = Mem1739[0x000000000061B190:word64]
// DataOut: bpl eax fs r10 r11 r12b r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040370C:
	word32 eax_2124 = (word32) (uint64) Mem2030[0x000000000061B108:word32]
	branch eax_2124 == 0x00000002 l0000000000403C78
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040371F:
	branch Mem2030[rax_2045 + 0x0000000000000013:byte] == 0x2E l0000000000403C58
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403C58:
	branch eax_2124 == 0x00000000 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403C60:
	branch Mem2030[rax_2045 + 0x0000000000000014 + (uint64) (Mem2030[rax_2045 + 0x0000000000000014:byte] == 0x2E):byte] == 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403C74:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:Test(EQ,Z) dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403729:
	branch eax_2124 != 0x00000000 l0000000000403C78
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403731:
	word64 r15_2231 = Mem2030[0x000000000061B0F8:word64]
	branch r15_2231 != 0x0000000000000000 l0000000000403755
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403755:
	rdi_2044 = Mem2030[rdi_2044:word64]
	branch fnmatch(rdi_2044, rax_2045 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403748
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403748:
	r15_2231 = Mem2030[r15_2231 + 0x0000000000000008:word64]
	branch r15_2231 == 0x0000000000000000 l0000000000403C78
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:0x0004 r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403769:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:0x0004 r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040373D:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403C78:
	word64 r15_2137 = Mem2030[0x000000000061B100:word64]
	branch r15_2137 != 0x0000000000000000 l0000000000403C9D
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403C9D:
	rdi_2044 = Mem2030[rdi_2044:word64]
	branch fnmatch(rdi_2044, rax_2045 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403C90
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403C90:
	r15_2137 = Mem2030[r15_2137 + 0x0000000000000008:word64]
	branch r15_2137 == 0x0000000000000000 l0000000000403E20
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:0x0004 r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403CB1:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:0x0004 r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403C84:
// DataOut: fs r10 r11 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403E20:
	word64 rax_2154 = (uint64) ((word32) Mem2030[rax_2045 + 0x0000000000000012:byte] - 0x00000001)
	word64 rsi_2151 = 0x0000000000000000
	byte al_2158 = (byte) rax_2154
	branch al_2158 >u 0x0D l0000000000403E37
// DataOut: al esi fs r10 r11 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403E2D:
	rsi_2151 = (uint64) Mem2030[DPB(rax_2154, (word32) al_2158, 0) * 0x0000000000000004 + 0x00412C00:word32]
// DataOut: esi fs r10 r11 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403E37:
	word32 ebx_2171
	word64 rsp_2172
	word64 rbp_2173
	word64 rsi_2174
	word64 r8_2175
	word64 r9_2176
	word64 r10_2177
	word64 r11_2178
	word64 r13_2180
	word64 r14_2181
	word64 r15_2182
	word64 rax_2183 = fn0000000000407EA0(r14_2035, 0x00000000, rax_2045, rsi_2151, rax_2045 + 0x0000000000000013, r8_2060, r10_2074, r11_2075, r14_2035, r15_2137, fs_2046, out ebx_2171, out rsp_2172, out rbp_2173, out rsi_2174, out r8_2175, out r9_2176, out r10_2177, out r11_2178, out r12_1154, out r13_2180, out r14_2181, out r15_2182)
	Mem2185[rsp_2172 + 0x0000000000000008:word64] = Mem2030[rsp_2172 + 0x0000000000000008:word64] + rax_2183
	branch Mem2185[0x000000000061B150:word32] != 0x00000001 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403E56:
	branch Mem2185[0x000000000061B148:word32] != 0xFFFFFFFF l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403E63:
	branch Mem2185[0x000000000061B144:byte] != 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403E70:
	branch Mem2185[0x000000000061B10E:byte] != 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403E7D:
	word64 rbp_2194
	word64 rsi_2195
	word64 r8_2196
	word64 r13_2198
	word64 r14_2199
	word64 r15_2200
	fn0000000000404E80(rsi_2174, r11_2178, r14_2181, r15_2182, out rbp_2194, out rsi_2195, out r8_2196, out r12_1154, out r13_2198, out r14_2199, out r15_2200)
	word64 rsp_2202
	fn00000000004079F0(out rsp_2202)
	fn0000000000404DD0()
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403770:
	word64 rsp_2112
	word64 rsi_2113
	word64 rdi_2114
	fn0000000000406490(out rsp_2112, out rsi_2113, out rdi_2114)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402B5A:
	branch (word32) (uint64) (eax_488 + 0x00000083) >u 0x00000112 l00000000004031F9
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004031F9:
	fn0000000000409750(0x00000002)
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000403203:
	Mem260[0x000000000061B150:word32] = 0x00000002
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000402B6A:
	return
// DataOut: r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn00000000004028C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> sil:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000402DFF:
	word64 rsi_632
	word32 eax_624 = (word32) (uint64) Mem473[0x000000000061A56C:word32]
	branch eax_624 == 0x00000001 l0000000000403BF3
// DataOut: eax r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000403BF3:
	rsi_632 = 0x0000000000413807
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000402E15:
	rsi_632 = 0x000000000041380F
	branch eax_624 == 0x00000002 l0000000000402E26
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000402E22_1:
	rsi_632 = 0x000000000041380E
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x000000000041380E rsi:0x000000000041380F r12:<invalid> rdx:<invalid> eax:0x0041380E r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x380E r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:0x0041380F ecx:<invalid> sil:0x0F cl:<invalid> al:0x0E r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000402E26:
	word64 rdi_635 = Mem473[0x000000000061A610:word64]
	Mem636[rsp_240:word64] = 0x0000000000000000
	fn0000000000410B30(0x00, 0x00000000004137FC, rsi_632, rdi_635, r11_1054)
	exit(0x0000000000000000)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000402985:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> r12:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



void fn0000000000404890(word64 rdx, word64 qwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	__libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, DPB(qwArg00, fp + 0x0000000000000004, 0))
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esp r8 r8b r8d r8w rax rdi rsp sp spl
// Preserved: rbp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004048E1:
	word64 rsp_43
	word32 eax_44
	word64 rax_45
	word64 rbp_46
	word64 r8_47
	byte SCZO_48
	byte CZ_49
	byte SZO_50
	byte C_51
	byte Z_52
	word32 edi_53
	word64 rdi_54
	call eax (retsize: 4;)
		uses: C_39,CZ_9,dwLoc04_5,eax,edi,qwLoc04,r8_7,rax_36,rbp_40,rdi_42,rsp_41,SCZO_8,SZO_37,Z_38
		defs: C_51,CZ_49,eax_44,edi_53,r8_47,rax_45,rbp_46,rdi_54,rsp_43,SCZO_48,SZO_50,Z_52
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -4(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15, word64 qwArg00, word64 qwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx eax ebp ecx esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rsp sp spl
// Preserved: rbx
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004049E0:
	word64 r8_102 = Mem0[r14:word64]
	word64 rax_105 = 0x0000000000000000
	word32 eax_211 = 0x00000000
	word64 r9_104 = Mem0[r15:word64]
	word64 r10_103 = 0x0000000000000000
	word64 r11_116 = 0x0000000000000000
	word32 r11d_117 = 0x00000000
	byte r11b_118 = 0x00
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404A06:
	byte al_267
	byte SZO_161
	byte al_123
	word32 eax_144
	branch eax_211 == 0x00000002 l0000000000404A59
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A59:
	rax_105 = DPB(rax_105, (word32) Mem0[rax_105:byte], 0) (alias)
	rcx = DPB(rcx, rax_105 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_105 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A50:
	r11d_117 = rax_105 - 0x0000000000000030 + r11_116 * 0x0000000000000008
	r11_116 = DPB(r11_116, r11d_117, 0) (alias)
	r11b_118 = (byte) r11d_117 (alias)
	r8_102 = r8_102 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A0B:
	branch eax_211 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B20:
	branch eax_211 != 0x00000001 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A11:
	branch eax_211 == 0x00000003 l0000000000404AE0
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404AE0:
	rax_105 = DPB(rax_105, (word32) Mem0[rax_105:byte], 0) (alias)
	rcx = DPB(rcx, rax_105 - 0x0000000000000030, 0) (alias)
	byte cl_383 = (byte) (rax_105 - 0x0000000000000030)
	branch cl_383 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404AF0:
	r14 = 0x0000000000000001 << cl_383
	word32 r14d_400 = (word32) r14
	branch (r14d_400 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B78:
	word64 r11_423 = (uint64) (r11d_117 << 0x00000004)
	r11d_117 = rax_105 - 0x0000000000000037 + r11_423
	rax_105 = DPB(rax_105, (word32) Mem0[rax_105:byte], 0) (alias)
	r8_102 = r8_102 + 0x0000000000000001
	r11_116 = DPB(r11_423, r11d_117, 0) (alias)
	r11b_118 = (byte) r11d_117 (alias)
	rcx = DPB(rcx, rax_105 - 0x0000000000000030, 0) (alias)
	cl_383 = (byte) (rax_105 - 0x0000000000000030) (alias)
	branch cl_383 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B95:
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404AD0:
	word64 r11_416 = (uint64) (r11d_117 << 0x00000004)
	r11d_117 = rax_105 - 0x0000000000000057 + r11_416
	r8_102 = r8_102 + 0x0000000000000001
	r11_116 = DPB(r11_416, r11d_117, 0) (alias)
	r11b_118 = (byte) r11d_117 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B04:
	branch (r14d_400 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A65:
	Mem350[r9_104:byte] = r11b_118
	r10_103 = r10_103 + 0x0000000000000001
	r9_104 = r9_104 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B11:
	word64 r11_410 = (uint64) (r11d_117 << 0x00000004)
	r11d_117 = rax_105 - 0x0000000000000030 + r11_410
	r8_102 = r8_102 + 0x0000000000000001
	r11_116 = DPB(r11_410, r11d_117, 0) (alias)
	r11b_118 = (byte) r11d_117 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A1A:
	branch eax_211 != 0x00000004 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A22:
	eax_144 = (word32) Mem0[rax_105:byte]
	rax_105 = DPB(rax_105, eax_144, 0) (alias)
	al_267 = (byte) eax_144 (alias)
	rcx = DPB(rcx, rax_105 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_105 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A2E:
	branch al_267 == 0x3F l0000000000404CB0
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404CB0:
	Mem329[rcx:byte] = 0x7F
	r10_103 = r10_103 + 0x0000000000000001
	r9_104 = r9_104 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A70:
	word32 eax_298 = (word32) Mem0[rax_105:byte]
	al_123 = (byte) eax_298 (alias)
	rax_105 = DPB(rax_105, eax_298, 0) (alias)
	SZO_161 = cond(al_123 - 0x3D) (alias)
	branch al_123 == 0x3D l0000000000404ABA
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A78:
	branch SZO_161 l0000000000404B40
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B40:
	branch al_123 == 0x00 l0000000000404B48
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B44:
	branch al_123 != 0x3A l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A7E:
	branch al_123 == 0x5C l0000000000404CA0
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404CA0:
	r8_102 = r8_102 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B29:
	word32 eax_200 = (word32) Mem0[rax_105:byte]
	byte al_202 = (byte) eax_200
	branch al_202 >u 0x78 l0000000000404C90
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404C90:
	r11_116 = (uint64) eax_200
	r11d_117 = (word32) r11_116 (alias)
	r11b_118 = (byte) r11_116 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404BD0:
	Mem231[r9_104:byte] = r11b_118
	r10_103 = r10_103 + 0x0000000000000001
	r9_104 = r9_104 + 0x0000000000000001
	rax_105 = 0x0000000000000000
	eax_211 = 0x00000000 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B35:
	rcx = DPB(rcx, (word32) al_202, 0) (alias)
	switch (rcx) { l0000000000404BF0 }
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404BF0:
	rax_105 = 0x0000000000000006
	eax_211 = 0x00000006 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:(word32) al r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404BB0:
	r8_102 = r8_102 + 0x0000000000000001
	branch eax_211 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A86:
	branch al_123 != 0x5E l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A8E:
	eax_144 = (word32) Mem0[rax_105:byte]
	rax_105 = DPB(rax_105, eax_144, 0) (alias)
	r8_102 = r8_102 + 0x0000000000000001
	al_267 = (byte) eax_144 (alias)
	rcx = DPB(rcx, rax_105 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_105 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A9E:
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404AA0:
	word64 rax_149 = (uint64) (eax_144 & 0x0000001F)
	Mem154[rcx:byte] = (byte) rax_149
	word32 eax_155 = (word32) Mem154[rax_149:byte]
	al_123 = (byte) eax_155 (alias)
	r8_102 = r8_102 + 0x0000000000000001
	r10_103 = r10_103 + 0x0000000000000001
	rax_105 = DPB(rax_149, eax_155, 0) (alias)
	r9_104 = r9_104 + 0x0000000000000001
	SZO_161 = cond(al_123 - 0x3D) (alias)
	branch al_123 != 0x3D l0000000000404A78
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404B60:
	Mem109[rcx:byte] = al_123
	r8_102 = r8_102 + 0x0000000000000001
	r10_103 = r10_103 + 0x0000000000000001
	r9_104 = r9_104 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14
// LocalsOut: fp(64)

l0000000000404A38:
	Mem75[r15:word64] = r9_104
	Mem76[r14:word64] = r8_102
	Mem77[r13:word64] = r10_103
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:SLICE(r14, word64, 32) rbp:r12 rbx:rbx eax:<invalid> ecx:<invalid> r14:<invalid> al:Test(NE,Z) r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r14



word32 fn0000000000404CD0(word32 edi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word32 eax_33 = 0x00000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	*rsiOut = rsi_10
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (word32) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_42 = cond(rdx_9 - 0x0000000000000002)
	eax_33 = 0x00000001 (alias)
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_46 = 0x0000000000413733
	word64 rcx_48 = 0x0000000000000002
// DataOut: ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_48 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_42 = cond(Mem0[rsi_85:byte] - Mem0[rdi_86:byte]) (alias)
	*rsiOut = rsi_85 + 0x0000000000000001
	rdi_46 = rdi_86 + 0x0000000000000001
	rcx_48 = rcx_48 - 0x0000000000000001
	word64 rsi_85 = rsi_10
	word64 rdi_86 = rdi_46
	branch Mem0[rsi_85:byte] != Mem0[rdi_86:byte] l0000000000404D0A
// DataOut: ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x00000001, Z_42, 0)
// DataOut: al eax ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return eax_33
// DataOut: al eax ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx r11 rdi rsi
// LiveOut: bpl r12 r12b r13 r13d rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404D20_entry:
	*rsiOut = rsi
// DataOut: dl edx fs r10 r11 r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	byte r13b_8 = (byte) (uint64) edx
	word64 rbp_18 = rdi
	word64 rsp_25
	word64 rax_26 = fn0000000000410C40(rsi, 0x0000000000000020, out rsp_25)
	word64 rax_28 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: fs r10 r11 r12 r13b r14 r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404D47:
	word64 rsi_81
	word64 rdi_82
	rax_28 = fn0000000000410E30(rsi, out rsp_25, out rbp_18, out rsi_81, out rdi_82)
// DataOut: fs r10 r11 r13b r14 r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l0000000000404D4F:
	Mem38[rax_26 + 0x0000000000000008:word64] = rax_28
	word64 rax_39 = 0x0000000000000000
	branch rbp_18 == 0x0000000000000000 l0000000000404D62
// DataOut: fs r10 r11 r13b r14 r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l0000000000404D5A:
	word64 rbp_73
	word64 rsi_74
	word64 rdi_75
	rax_39 = fn0000000000410E30(rbp_18, out rsp_25, out rbp_73, out rsi_74, out rdi_75)
// DataOut: fs r10 r11 r13b r14 r14d r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l0000000000404D62:
	Mem49[rax_26:word64] = rax_39
	word64 rax_50 = Mem49[0x000000000061B190:word64]
	Mem51[r11 + 0x0000000000000010:byte] = r13b_8
	Mem53[0x000000000061B190:word64] = rax_26
	Mem54[rax_26 + 0x0000000000000018:word64] = rax_50
	word64 rsp_55 = rsp_25 + 0x0000000000000008
	word64 rbp_59
	*rbpOut = Mem54[rsp_55 + 0x0000000000000008:word64]
	word64 r12_61
	*r12Out = Mem54[rsp_55 + 0x0000000000000010:word64]
	word64 r13_63
	*r13Out = Mem54[rsp_55 + 0x0000000000000018:word64]
	return rsp_55 + 0x0000000000000020
// DataOut: bpl fs r10 r11 r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

fn0000000000404D20_exit:
// DataOut: bpl r12 r12b r13 r13d rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13



word64 fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO di dil edi esp rdi rsp sp spl
// Preserved: rbx
fn0000000000404D90_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DC0:
	return fp + 0x0000000000000004
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l0000000000404DB5:
	word64 rsp_21
	word64 rbx_22
	word64 rdi_23
	byte SCZO_24
	byte Z_25
	call freecon (retsize: 8;)
		uses: dwLoc04_4,qwLoc04,rbx_19,rdi_10,rsp_20,SCZO_11,Z_12
		defs: rbx_22,rdi_23,rsp_21,SCZO_24,Z_25
	return rsp_21
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

fn0000000000404D90_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx



word64 fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bx di dil eax ebx edi esp rax rbx rdi rsp sp spl
// Preserved: rbx
fn0000000000404DD0_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rsp_18 = fp - 0x0000000000000004
	word64 rbx_33 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> -4(fp):rbx

l0000000000404DE0:
	rbx_33 = rbx_33 + 0x0000000000000001
	rsp_18 = fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_33 * 0x0000000000000008:word64])
	branch Mem0[0x000000000061B1B0:word64] >u rbx_33 l0000000000404DE0
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

l0000000000404DFD:
	Mem19[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem20[0x000000000061B17C:byte] = 0x00
	Mem21[0x000000000061B178:word32] = 0x00000000
	Mem22[0x000000000061B174:word32] = 0x00000000
	Mem23[0x000000000061B170:word32] = 0x00000000
	Mem24[0x000000000061B168:word32] = 0x00000000
	Mem25[0x000000000061B164:word32] = 0x00000000
	Mem26[0x000000000061B160:word32] = 0x00000000
	Mem27[0x000000000061B16C:word32] = 0x00000000
	Mem28[0x000000000061B15C:word32] = 0x00000000
	Mem29[0x000000000061B158:word32] = 0x00000000
	Mem30[0x000000000061B154:word32] = 0x00000000
	return rsp_18 + 0x0000000000000008
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

fn0000000000404DD0_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx



word64 fn0000000000404E80(word64 rsi, word64 r11, word64 r14, word64 r15, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r14 r15 rsi
// LiveOut: bpl r12 r12b r13 r13d r14 r15 r8 rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404E80_entry:
	*r8Out = r8
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
	*rsiOut = rsi
// DataOut: fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rsp_115 = fp - 0x0000000000000010
	word64 rbp_12 = rbx_10
	*rbpOut = rbp_12
	branch (rbx_10 >>u 0x0000000000000001) + rbx_10 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: al bpl eax fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	word64 rdi_262 = Mem0[0x000000000061B1A8:word64]
	free(rdi_262)
	branch rbx_10 >u 0x00000000AAAAAAAA l0000000000404FF8
// DataOut: bpl fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
	word64 rsi_279 = Mem0[rsi:word64]
	*rsiOut = rsi_279
	strcmp(Mem0[rdi_262:word64], rsi_279)
	return fp - 0x0000000000000010
// DataOut: bpl fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FB3:
	word64 rax_271 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018, out rsp_115)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem273[0x000000000061B1A8:word64] = rax_271
	Mem278[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: al eax fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: al eax fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EAB:
	word64 rax_243 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_247 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_249 = rax_243 + rbp_12 * 0x0000000000000008
// DataOut: fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EC0:
	Mem253[rax_243:word64] = rdx_247
	rax_243 = rax_243 + 0x0000000000000008
	rdx_247 = rdx_247 + 192
	branch rax_243 != rcx_249 l0000000000404EC0
// DataOut: al eax fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: al eax fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EE0:
	word64 rsi_165
	word32 ecx_158
	word64 rdi_153
	word64 rbp_124
	word64 rbx_125
	byte SCZO_126
	word64 rax_127
	byte CZ_128
	byte SZO_129
	byte C_130
	byte Z_131
	word64 rdx_132
	word64 rcx_133
	word32 edi_134
	word64 rdi_135
	word32 eax_136
	word32 r8d_137
	word64 rsi_139
	word32 ecx_140
	word32 edx_141
	word16 ax_142
	byte al_143
	word32 esi_144
	word64 r11_145
	word64 r14_146
	word64 r15_147
	word64 r12_148
	word64 r13_149
	word64 r8_138
	call _setjmp (retsize: 8; depth: 8)
		uses: al_75,ax_76,C_68,CZ_56,dwLoc04_4,dwLoc08_7,eax_78,ecx_74,edi_58,edx_77,esi,r11,r12,r13,r14,r15,r8,r8d,rax_79,rbp_64,rbx_10,rcx_73,rdi_122,rdx_80,rsi,rsp_65,SCZO_81,SZO_66,Z_82
		defs: al_143,ax_142,C_130,CZ_128,eax_136,ecx_140,edi_134,edx_141,esi_144,r11_145,r12_148,r13_149,r14_146,r15_147,r8_138,r8d_137,rax_127,rbp_124,rbx_125,rcx_133,rdi_135,rdx_132,rsi_139,rsp_123,SCZO_126,SZO_129,Z_131
	branch eax_136 == 0x00000000 l0000000000404F40
// DataOut: al fs r10 r11 r14 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F40:
	ecx_158 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_165 = Mem0[0x000000000061B1B0:word64]
	rdi_153 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi fs r10 r11 r14 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EEE:
	r8_138 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_194 = (word32) r8_138
	branch r8d_194 == 0x00000003 l0000000000404FDF
// DataOut: fs r10 r11 r14 r15 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EFF:
	rsi_165 = Mem0[0x000000000061B1B0:word64]
	rdi_153 = Mem0[0x000000000061B1A8:word64]
	branch rsi_165 == 0x0000000000000000 l0000000000404F33
// DataOut: edi fs r10 r11 r14 r15 r8d r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F12:
	word64 rdx_214 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_216 = rdi_153 + rsi_165 * 0x0000000000000008
	word64 rax_218 = rdi_153
// DataOut: edi fs r10 r11 r14 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F20:
	Mem224[rax_218:word64] = rdx_214
	rax_218 = rax_218 + 0x0000000000000008
	rdx_214 = rdx_214 + 192
	branch rax_218 != rcx_216 l0000000000404F20
// DataOut: edi fs r10 r11 r14 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F33:
	ecx_158 = (word32) (uint64) r8d_194 (alias)
// DataOut: al ecx edi fs r10 r11 r14 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F54:
	branch ecx_158 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx fs r10 r11 r14 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx fs r10 r11 r14 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F60:
	word64 r8_175 = DPB(r8_138, (word32) Mem0[0x000000000061B10C:byte], 0)
	*r8Out = r8_175
	word64 r12_185
	word64 r13_186
	word64 r14_187
	word64 r15_188
	word64 rsi_189
	*rsiOut = fn000000000040D690(rsi_165, rdi_153, r8_175, r11_145, r14_146, r15_147, out r12_185, out r13_186, out r14_187, out r15_188)
// DataOut: fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F8C:
	word64 rsp_116 = rsp_115 + 0x0000000000000008
	word64 rbp_120
	*rbpOut = Mem0[rsp_116 + 0x0000000000000008:word64]
	return rsp_116 + 0x0000000000000010
// DataOut: bpl fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000404E80_exit:
// DataOut: bpl r12 r12b r13 r13d r14 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> eax:<invalid> rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000405090(byte sil, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12bOut, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut: bpl r12b r13 r13d r15 rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405090_entry:
	*rsiOut = rsi
// DataOut: fs r10 r11 r8 r9 rdi rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_118 = (word32) sil
	word64 r13_126 = rdi
	word64 rsp_101 = fp - 0x0000000000000020
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: fs r10 r11 r13 r14d r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: fs r10 r11 r13 r14d r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004050B4:
	word64 rbp_291
	word64 rsi_292
	word64 r12_293
	rsp_101 = fn0000000000404D20(0x00000000, rdi, 0x0000000000000000, r11, out rbp_291, out rsi_292, out r12_293, out r13_126)
// DataOut: fs r10 r11 r13 r14d r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004050C0:
	word64 rbx_103 = Mem0[0x000000000061B1B0:word64]
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405108:
	branch rbx_103 == 0x0000000000000000 l00000000004051A8
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004051A8:
	word64 rdx_221
	word64 rdi_206 = Mem0[0x000000000061B1B0:word64]
	branch rdi_206 == 0x0000000000000000 l00000000004051F7
// DataOut: fs r10 r11 r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004051F7:
	rdx_221 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004051B4:
	word64 rsi_246 = Mem0[0x000000000061B1A8:word64]
	*rsiOut = rsi_246
	rdx_221 = 0x0000000000000000
	word64 rax_251 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004051C0:
	word64 rcx_258 = Mem0[rsi_246 + rax_251 * 0x0000000000000008:word64]
	Mem261[rsi_246 + rdx_221 * 0x0000000000000008:word64] = rcx_258
	rax_251 = rax_251 + 0x0000000000000001
	rdx_221 = rdx_221 + DPB(rcx_258, (word32) (Mem0[rcx_258 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_251 != rdi_206 l00000000004051C0
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004051E1:
	Mem225[0x000000000061B1B0:word64] = rdx_221
	word64 rsp_226 = rsp_101 + 0x0000000000000008
	word64 rbp_230
	*rbpOut = Mem225[rsp_226 + 0x0000000000000008:word64]
	byte r12b_233
	*r12bOut = (byte) Mem225[rsp_226 + 0x0000000000000010:word64]
	word64 r13_235
	*r13Out = Mem225[rsp_226 + 0x0000000000000018:word64]
	word64 r15_239
	*r15Out = Mem225[rsp_226 + 0x0000000000000028:word64]
	return rsp_226 + 0x0000000000000030
// DataOut: bpl fs r10 r11 r12b r13 r13d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000405090_exit:
// DataOut: bpl r12b r13 r13d r15 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405111:
	word64 rbp_78 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_80 = (word32) (uint64) Mem0[rbp_78 + 0x00000000000000A0:word32]
	branch eax_80 == 0x00000009 l000000000040512C
// DataOut: eax fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405127:
	branch eax_80 != 0x00000003 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040512C:
	word64 rbp_124
	word64 r15_111 = Mem0[r13_126:word64]
	branch r13_126 == 0x0000000000000000 l00000000004050E2
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405135:
	word64 rsi_154
	word64 rax_155 = fn000000000040A390(r15_111, out rsi_154)
	branch Mem0[rax_155:byte] != 0x2E l00000000004050D8
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405142:
	byte al_198 = (byte) (word32) Mem0[rax_155 + 0x0000000000000001 + (uint64) (Mem0[rax_155 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_198 == 0x2F l0000000000405100
// DataOut: al fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405154:
	branch al_198 == 0x00 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405158:
// DataOut: fs r10 r11 r13 r14d r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004050D8:
	branch Mem0[r15_111:byte] != 0x2F l0000000000405160
// DataOut: fs r10 r11 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405160:
	word64 rbp_174
	word64 rax_176 = fn000000000040A610(0x0000000000000000, r15_111, r13_126, out rbp_174, out r14d_118)
	word64 rsi_184
	word64 r12_185
	rsp_101 = fn0000000000404D20((word32) (uint64) r14d_118, Mem0[rbp_174 + 0x0000000000000008:word64], rax_176, r11, out rbp_124, out rsi_184, out r12_185, out r13_126)
	free(rax_176)
	branch Mem0[rbp_124 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004050E2:
	word64 rsi_146
	word64 r12_147
	rsp_101 = fn0000000000404D20((word32) (uint64) r14d_118, Mem0[rbp_78 + 0x0000000000000008:word64], r15_111, r11, out rbp_124, out rsi_146, out r12_147, out r13_126)
	branch Mem0[rbp_124 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405194:
	rsp_101 = fn0000000000404D90(rbp_124)
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004050FE:
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000405100:
	rbx_103 = rbx_103 - 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



void fn0000000000405200(word64 rsi, word64 rdi, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbp_143 = rsi
	word64 rbx_109 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	word64 rcx_137 = Mem0[0x000000000061B0D8:word64]
	branch rcx_137 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_114 = rbx_109 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rbp_143 /u rcx_137) <=u (uint64) ((uint128) ((uint64) rsi_114) /u rcx_137) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_109 = rsi_114
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_128 = Mem0[0x000000000061A610:word64]
	word64 rax_129 = Mem0[rdi_128 + 0x0000000000000028:word64]
	branch rax_129 >=u Mem0[rdi_128 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	word64 rsp_158
	word64 rsi_160
	word64 rdi_162
	byte SCZO_163
	byte C_164
	word64 rcx_165
	byte SZO_166
	byte Z_167
	word64 rdx_168
	word64 rax_169
	byte CZ_170
	word32 esi_171
	word32 edx_172
	call __overflow (retsize: 8; depth: 24)
		uses: C_132,CZ_127,dwLoc04_4,dwLoc08_9,edx_45,esi_115,qwLoc08,rax_129,rbp_54,rbx_53,rcx_57,rdi_128,rdx_124,rsi_157,rsp_55,SCZO_131,SZO_58,Z_59
		defs: C_164,CZ_170,edx_172,esi_171,rax_169,rbp_159,rbx_161,rcx_165,rdi_162,rdx_168,rsi_160,rsp_158,SCZO_163,SZO_166,Z_167
	rcx_137 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem155[rdi_128 + 0x0000000000000028:word64] = rax_129 + 0x0000000000000001
	Mem156[rax_129:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_109 = rbx_109 + rcx_137 - (uint64) ((uint128) ((uint64) rbx_109) % rcx_137)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_109 = rbx_109 + 0x0000000000000001
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_82 = Mem0[0x000000000061A610:word64]
	word64 rdx_83 = Mem0[rdi_82 + 0x0000000000000028:word64]
	branch rdx_83 >=u Mem0[rdi_82 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	word64 rsp_94
	word64 rsi_96
	word64 rdi_98
	byte SCZO_99
	byte C_100
	word64 rcx_101
	byte SZO_102
	byte Z_103
	word64 rdx_104
	word64 rax_105
	byte CZ_106
	word32 esi_107
	word32 edx_108
	call __overflow (retsize: 8; depth: 24)
		uses: C_87,CZ_80,dwLoc04_4,dwLoc08_9,edx_85,esi_77,qwLoc08,rax_79,rbp_54,rbx_81,rcx_57,rdi_82,rdx_83,rsi_93,rsp_55,SCZO_86,SZO_58,Z_59
		defs: C_100,CZ_106,edx_108,esi_107,rax_105,rbp_95,rbx_97,rcx_101,rdi_98,rdx_104,rsi_96,rsp_94,SCZO_99,SZO_102,Z_103
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rbp_143 <=u rbx_109 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem91[rdi_82 + 0x0000000000000028:word64] = rdx_83 + 0x0000000000000001
	Mem92[rdx_83:byte] = 0x20
	branch rbp_143 >u rbx_109 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:rdi -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004052D0(word64 rdx, word32 ebx, word64 rbp, word64 rsi, word64 r11, word64 r15, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx fs r11 r15 rbp rdx rsi
// LiveOut: edi r10 r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r8 r9 rax rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbp
fn00000000004052D0_entry:
// DataOut: ebx fs r11 r15 rbp rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word32 ebp_8 = (word32) (fp - 0x0000000000000004)
	word32 edi_50
	word64 r9_52
	word64 r10_53
	word64 r11_54
	word64 r13_56
	word64 r14_57
	word64 r15_58
	word64 r12_119
	word64 r8_109
	word64 rbp_124
	word64 rsp_125
	word64 rax_59 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, ebx, ebp_8, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFBC, rdx, r11, fs, out rsp_125, out rbp_124, out edi_50, out r8_109, out r9_52, out r10_53, out r11_54, out r12_119, out r13_56, out r14_57, out r15_58)
	Mem68[rbp_124 + 0xFFFFFFFFFFFFDF98:word64] = rbp_124 + 0xFFFFFFFFFFFFDFC0
	word64 rsi_111
	*rsiOut = 0x0000000000002000
	word64 rdi_105 = fp + 0xFFFFFFFFFFFFDFBC
	word64 rbx_117 = rax_59
	word32 ebx_61 = (word32) rax_59
	branch rax_59 >u 0x0000000000001FFF l0000000000405590
// DataOut: ebp ebx edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405590:
	Mem889[rbp_124 + 0xFFFFFFFFFFFFDF98:word64] = rsp_125 - (rax_59 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem891[rbp_124 + 0xFFFFFFFFFFFFDF98:word64] = Mem889[rbp_124 + 0xFFFFFFFFFFFFDF98:word64] & 0xFFFFFFFFFFFFFFF0
	rdi_105 = Mem891[rbp_124 + 0xFFFFFFFFFFFFDF98:word64]
	word32 edi_898
	word64 r9_900
	word64 r10_901
	word64 r11_902
	word64 r13_904
	word64 r14_905
	word64 r15_906
	fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, r14_57, ebx_61, ebp_8, rax_59 + 0x0000000000000001, rdi_105, r13_56, r11_54, fs, out rsp_125, out rbp_124, out edi_898, out r8_109, out r9_900, out r10_901, out r11_902, out r12_119, out r13_904, out r14_905, out r15_906)
	*rsiOut = rax_59 + 0x0000000000000001
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):fp + 0xFFFFFFFFFFFFDFBC -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405343:
	branch Mem68[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405412:
	word64 rdx_454
	word64 r15_455
	word64 r14_456
	word64 r13_458
	word32 esi_459
	word64 r12_460
	byte SCZO_462
	word64 rcx_464
	word32 eax_467
	byte SZO_468
	byte C_469
	byte CZ_470
	byte Z_471
	word32 edx_472
	word32 r12d_473
	word16 dx_474
	byte al_475
	byte SO_476
	byte dl_477
	word32 edi_478
	byte S_479
	word32 ecx_480
	byte cl_481
	word16 ax_482
	word32 ebx_483
	word64 r11_484
	word64 r9_485
	word64 r10_486
	word32 ebp_487
	word64 rax_465
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_83,ax_84,C_78,cl,CZ_67,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_19,dwLoc14_26,dwLoc18_29,dx,eax_82,ebp_8,ebx_61,ecx,edi_80,edx,esi_74,fs,qwLoc08,qwLoc2074_36,qwLoc207C_32,qwLoc3C_41,r10_69,r11_71,r12_85,r12d,r13_86,r14_87,r15_88,r8_76,r9_70,rax_81,rbp_89,rbx_60,rcx_72,rdi_73,rdx_75,rsi_79,rsp_90,S,SCZO_91,SO,SZO_77,Z_92
		defs: al_475,ax_482,C_469,cl_481,CZ_470,dl_477,dx_474,eax_467,ebp_487,ebx_483,ecx_480,edi_478,edx_472,esi_459,fs_466,r10_486,r11_484,r12_460,r12d_473,r13_458,r14_456,r15_455,r8_453,r9_485,rax_465,rbp_452,rbx_461,rcx_464,rdi_463,rdx_454,rsi_457,rsp_451,S_479,SCZO_462,SO_476,SZO_468,Z_471
	branch rax_465 <=u 0x0000000000000001 l00000000004055D1
// DataOut: ebp edi fs r10 r11 r11d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004055D1:
	word64 r14_778 = Mem68[r13_458 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_778
	word64 r12_779 = r14_778 + rbx_117
	branch r14_778 >=u r12_779 l0000000000405602
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004055E1:
	word64 rdx_823
	word64 r15_824
	word64 r14_825
	word64 r13_827
	word32 esi_828
	word64 r12_829
	byte SCZO_831
	word64 rcx_833
	word64 rax_834
	word32 eax_836
	byte SZO_837
	byte C_838
	byte CZ_839
	byte Z_840
	word32 edx_841
	word32 r12d_842
	word16 dx_843
	byte al_844
	byte SO_845
	byte dl_846
	word32 edi_847
	byte S_848
	word32 ecx_849
	byte cl_850
	word16 ax_851
	word32 ebx_852
	word64 r11_853
	word64 r9_854
	word64 r10_855
	word32 ebp_856
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_475,ax_482,C_782,cl_481,CZ_489,dl_477,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_19,dwLoc14_26,dwLoc18_29,dx_474,eax_467,ebp_487,ebx_483,ecx_480,edi_478,edx_472,esi_459,fs_466,qwLoc08,qwLoc2074_36,qwLoc207C_32,qwLoc3C_41,r10_486,r11_484,r12_779,r12d_780,r13_458,r14_778,r15_455,r8_453,r9_485,rax_465,rbp_452,rbx_461,rcx_464,rdi_463,rdx_454,rsi_457,rsp_451,S_479,SCZO_781,SO_476,SZO_468,Z_471
		defs: al_844,ax_851,C_838,cl_850,CZ_839,dl_846,dx_843,eax_836,ebp_856,ebx_852,ecx_849,edi_847,edx_841,esi_828,fs_835,r10_855,r11_853,r12_829,r12d_842,r13_827,r14_825,r15_824,r8_822,r9_854,rax_834,rbp_821,rbx_830,rcx_833,rdi_832,rdx_823,rsi_826,rsp_820,S_848,SCZO_831,SO_845,SZO_837,Z_840
	word64 rdx_857 = r14_825
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004055E9:
	rsi_111 = DPB(rsi_111, (word32) Mem68[rdx_857:byte], 0) (alias)
	*rsiOut = rsi_111
	branch (Mem68[Mem68[rax_834:word64] + 0x0000000000000001 + rsi_111 * 0x0000000000000002:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004055F6:
	Mem879[rdx_857:byte] = 0x3F
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004055F9:
	rdx_857 = rdx_857 + 0x0000000000000001
	branch rdx_857 != r12_829 l00000000004055E9
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405602:
	r12_119 = rbx_117
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405421:
	word64 r15_490 = Mem68[r13_458 + 0xFFFFFFFFFFFFDF98:word64]
	*r15Out = r15_490
	word64 r13_491 = r15_490 + rbx_117
	*r13Out = r13_491
	branch r15_490 >=u r13_491 l0000000000405612
// DataOut: ebp edi fs r10 r11 r11d r13 r13d r14 r14b r14d r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405612:
	rbx_117 = 0x0000000000000000
	r12_119 = 0x0000000000000000
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405435:
	word64 rbx_494 = r15_490
	r12_119 = 0x0000000000000000
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405440:
	word32 eax_532 = (word32) Mem68[rdi_105:byte]
	rax_465 = DPB(rax_465, eax_532, 0) (alias)
	byte al_534 = (byte) eax_532
	branch al_534 > 0x3F l0000000000405520
// DataOut: al ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405520:
	branch al_534 < 0x41 l0000000000405460
// DataOut: al ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405528:
	branch al_534 <= 0x5F l0000000000405538
// DataOut: al ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l000000000040552C:
	branch (byte) (rax_465 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l000000000040544C:
	branch al_534 >= 0x25 l0000000000405538
// DataOut: al ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405454:
	branch (byte) (rax_465 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405538:
	Mem751[rbx_494:byte] = al_534
	r15_490 = r15_490 + 0x0000000000000001
	*r15Out = r15_490
	r12_119 = r12_119 + 0x0000000000000001
	rbx_494 = rbx_494 + 0x0000000000000001
	branch r15_490 <u r13_491 l0000000000405440
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l000000000040554F:
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405460:
	Mem582[rbp_124 + 0xFFFFFFFFFFFFDFB0:word64] = 0x0000000000000000
// DataOut: ebp fs r10 r11 r11d r12 r13 r13d r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405470:
	word64 rdx_597
	word64 r15_598
	word64 r14_599
	word32 esi_602
	word64 r12_603
	word64 rbx_604
	byte SCZO_605
	word64 rcx_607
	word32 eax_610
	byte SZO_611
	byte C_612
	byte CZ_613
	byte Z_614
	word32 edx_615
	word32 r12d_616
	word16 dx_617
	byte al_618
	byte SO_619
	byte dl_620
	word32 edi_621
	byte S_622
	word32 ecx_623
	byte cl_624
	word16 ax_625
	word32 ebx_626
	word64 r11_627
	word64 r9_628
	word64 r10_629
	word32 ebp_630
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_534,ax_535,C_519,cl_503,CZ_579,dl_576,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_19,dwLoc14_26,dwLoc18_29,dx_508,eax_532,ebp_517,ebx_524,ecx_504,edi_589,edx_578,esi_593,fs_511,qwLoc08,qwLoc2074_36,qwLoc207C_32,qwLoc3C_41,r10_500,r11_502,r12_525,r12d_526,r13_583,r14_528,r15_584,r8_516,r9_501,rax_533,rbp_585,rbx_523,rcx_587,rdi_588,rdx_590,rsi_592,rsp_531,S_505,SCZO_591,SO_577,SZO_581,Z_518
		defs: al_618,ax_625,C_612,cl_624,CZ_613,dl_620,dx_617,eax_610,ebp_630,ebx_626,ecx_623,edi_621,edx_615,esi_602,fs_609,r10_629,r11_627,r12_603,r12d_616,r13_601,r14_599,r15_598,r8_596,r9_628,rax_608,rbp_595,rbx_604,rcx_607,rdi_606,rdx_597,rsi_600,rsp_594,S_622,SCZO_605,SO_619,SZO_611,Z_614
	word64 r14_633 = rax_465
	*r14Out = r14_633
	branch rax_465 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405551:
	Mem738[rbx_604:byte] = 0x3F
	r15_490 = r15_598 + 0x0000000000000001
	*r15Out = r15_490
	r12_119 = r12_603 + 0x0000000000000001
	rbx_494 = rbx_604 + 0x0000000000000001
	branch r15_598 + 0x0000000000000001 <u r13_491 l0000000000405440
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405569:
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405499:
	branch rax_465 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l000000000040556B:
	Mem730[rbx_604:byte] = 0x3F
	r15_490 = r13_491
	*r15Out = r15_490
	r12_119 = r12_603 + 0x0000000000000001
	rbx_494 = rbx_604 + 0x0000000000000001
	branch r13_491 <u r13_491 l0000000000405440
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405582:
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004054A3:
	word64 rdi_636 = (uint64) Mem582[rbp_124 + 0xFFFFFFFFFFFFDFAC:word32]
	branch rax_465 != 0x0000000000000000 l00000000004054B5
// DataOut: ebp fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004054B1_1:
	r14_633 = 0x0000000000000001
// DataOut: ebp fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004054B5:
	word32 eax_643 = wcwidth(rdi_636)
	branch eax_643 < 0x00000000 l0000000000405510
// DataOut: al eax ebp fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405510:
	Mem721[rbx_604:byte] = 0x3F
// DataOut: eax ebp fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004054BE:
	word64 rsi_694 = r15_598 + r14_633
	word64 rdx_696 = rbx_604
	r15_701 = r15_598
// DataOut: al ebp fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004054C8:
	word64 r15_701
	rdx_696 = rdx_696 + 0x0000000000000001
	Mem711[rdx_696 - 0x0000000000000001:byte] = (byte) (word32) Mem582[rdi_636 - 0x0000000000000001:byte]
	r15_701 = r15_701 + 0x0000000000000001
	branch r15_701 != rsi_694 l00000000004054C8
// DataOut: al ebp fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004054DD:
// DataOut: eax ebp fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004054E5:
	word64 rdx_655
	word64 r14_657
	word32 esi_660
	byte SCZO_663
	word64 rcx_665
	word32 eax_668
	byte SZO_669
	byte C_670
	byte CZ_671
	byte Z_672
	word32 edx_673
	word32 r12d_674
	word16 dx_675
	byte al_676
	byte SO_677
	byte dl_678
	word32 edi_679
	byte S_680
	word32 ecx_681
	byte cl_682
	word16 ax_683
	word32 ebx_684
	word64 r11_685
	word64 r9_686
	word64 r10_687
	word32 ebp_688
	call mbsinit (retsize: 8; depth: 8)
		uses: al_645,ax_646,C_649,cl_624,CZ_613,dl_620,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_19,dwLoc14_26,dwLoc18_29,dx_617,eax_643,ebp_630,ebx_626,ecx_623,edi_651,edx_615,esi_602,fs_609,qwLoc08,qwLoc2074_36,qwLoc207C_32,qwLoc3C_41,r10_629,r11_627,r12_603,r12d_616,r13_601,r14_642,r15_598,r8_596,r9_628,rax_644,rbp_595,rbx_604,rcx_607,rdi_650,rdx_597,rsi_600,rsp_594,S_648,SCZO_634,SO_619,SZO_647,Z_639
		defs: al_676,ax_683,C_670,cl_682,CZ_671,dl_678,dx_675,eax_668,ebp_688,ebx_684,ecx_681,edi_679,edx_673,esi_660,fs_667,r10_687,r11_685,r12_661,r12d_674,r13_659,r14_657,r15_656,r8_654,r9_686,rax_666,rbp_653,rbx_662,rcx_665,rdi_664,rdx_655,rsi_658,rsp_652,S_680,SCZO_663,SO_677,SZO_669,Z_672
	branch eax_668 == 0x00000000 l0000000000405470
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004054F9:
	branch r15_490 <u r13_491 l0000000000405440
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405502:
	rbx_117 = rbx_494 - Mem68[rbp_124 + 0xFFFFFFFFFFFFDF98:word64]
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405350:
	branch Mem68[rbp_124 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l0000000000405379
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040535A:
	word64 rdx_317
	word64 r15_318
	word64 r14_319
	word64 r13_321
	word32 esi_322
	word64 r12_323
	byte SCZO_325
	word64 rcx_327
	word64 rax_328
	word32 eax_330
	byte SZO_331
	byte C_332
	byte CZ_333
	byte Z_334
	word32 edx_335
	word32 r12d_336
	word16 dx_337
	byte al_338
	byte SO_339
	byte dl_340
	word32 edi_341
	byte S_342
	word32 ecx_343
	byte cl_344
	word16 ax_345
	word32 ebx_346
	word64 r11_347
	word64 r9_348
	word64 r10_349
	word32 ebp_350
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_83,ax_84,C_78,cl,CZ_67,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_19,dwLoc14_26,dwLoc18_29,dx,eax_82,ebp_8,ebx_61,ecx,edi_80,edx,esi_74,fs,qwLoc2074_36,qwLoc207C_32,qwLoc3C_41,r10_69,r11_71,r12_85,r12d,r13_86,r14_87,r15_88,r8_76,r9_70,rax_81,rbp_89,rbx_60,rcx_72,rdi_73,rdx_75,rsi_79,rsp_90,S,SCZO_304,SO,SZO_77,Z_305
		defs: al_338,ax_345,C_332,cl_344,CZ_333,dl_340,dx_337,eax_330,ebp_350,ebx_346,ecx_343,edi_341,edx_335,esi_322,fs_329,r10_349,r11_347,r12_323,r12d_336,r13_321,r14_319,r15_318,r8_316,r9_348,rax_328,rbp_315,rbx_324,rcx_327,rdi_326,rdx_317,rsi_320,rsp_314,S_342,SCZO_325,SO_339,SZO_331,Z_334
	branch rax_328 <=u 0x0000000000000001 l00000000004053CD
// DataOut: ebp edi fs r10 r11 r11d r13 r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053CD:
	word64 r14_377 = Mem68[r13_321 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_377
	word64 r13_378 = r14_377 + rbx_117
	*r13Out = r13_378
	branch r14_377 >=u r13_378 l000000000040560A
// DataOut: ebp edi fs r10 r11 r11d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l000000000040560A:
	r12_119 = 0x0000000000000000
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004053E1:
	word64 r15_385
	word64 r14_386
	word64 r13_388
	word32 esi_389
	word64 r12_390
	byte SCZO_392
	word64 rcx_394
	word64 rax_395
	word32 eax_397
	byte SZO_398
	byte C_399
	byte CZ_400
	byte Z_401
	word32 edx_402
	word32 r12d_403
	word16 dx_404
	byte al_405
	byte SO_406
	byte dl_407
	word32 edi_408
	byte S_409
	word32 ecx_410
	byte cl_411
	word16 ax_412
	word32 ebx_413
	word64 r11_414
	word64 r9_415
	word64 r10_416
	word32 ebp_417
	word64 rdx_384
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_338,ax_345,C_380,cl_344,CZ_352,dl_340,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_19,dwLoc14_26,dwLoc18_29,dx_337,eax_330,ebp_350,ebx_346,ecx_343,edi_341,edx_335,esi_322,fs_329,qwLoc08,qwLoc2074_36,qwLoc207C_32,qwLoc3C_41,r10_349,r11_347,r12_323,r12d_336,r13_378,r14_377,r15_318,r8_316,r9_348,rax_328,rbp_315,rbx_324,rcx_327,rdi_326,rdx_317,rsi_320,rsp_314,S_342,SCZO_379,SO_339,SZO_331,Z_334
		defs: al_405,ax_412,C_399,cl_411,CZ_400,dl_407,dx_404,eax_397,ebp_417,ebx_413,ecx_410,edi_408,edx_402,esi_389,fs_396,r10_416,r11_414,r12_390,r12d_403,r13_388,r14_386,r15_385,r8_383,r9_415,rax_395,rbp_382,rbx_391,rcx_394,rdi_393,rdx_384,rsi_387,rsp_381,S_409,SCZO_392,SO_406,SZO_398,Z_401
	r12_119 = 0x0000000000000000
	word64 rcx_422 = Mem68[rax_395:word64]
	word64 rax_425 = r14_386
// DataOut: ebp edi fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004053F0:
	rdx_384 = DPB(rdx_384, (word32) Mem68[rax_425:byte], 0) (alias)
	r12_119 = r12_119 - 0xFF - (((word16) ((word32) Mem68[rcx_422 + rdx_384 * 0x0000000000000002:word16]) & 0x4000) <u 0x0001)
	rax_425 = rax_425 + 0x0000000000000001
	branch rax_425 != r13_388 l00000000004053F0
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l000000000040540D:
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405365:
	word64 rdi_353 = Mem68[rbp_124 + 0xFFFFFFFFFFFFDF98:word64]
	word32 edi_354
	*ediOut = (word32) rdi_353
	word32 ebx_364
	word64 r12_369
	word64 r13_370
	word64 r14_371
	word64 r15_372
	r12_119 = (int64) (word32) fn000000000040D240(0x00000000, rbx_117, rdi_353, fs, qwLoc08, qwArg00, qwArg08, out ebx_364, out rsp_125, out rbp_124, out rsi_111, out rdi_105, out r12_369, out r13_370, out r14_371, out r15_372)
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405379:
	word64 rcx_126 = Mem68[rbp_124 + 0xFFFFFFFFFFFFDF88:word64]
	branch rcx_126 == 0x0000000000000000 l0000000000405399
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405385:
	word64 rdx_270
	word64 r15_271
	word64 r14_272
	word64 r13_274
	word32 esi_275
	byte SCZO_278
	word64 rcx_280
	word64 rax_281
	word32 eax_283
	byte SZO_284
	byte C_285
	byte CZ_286
	byte Z_287
	word32 edx_288
	word32 r12d_289
	word16 dx_290
	byte al_291
	byte SO_292
	byte dl_293
	word32 edi_294
	byte S_295
	word32 ecx_296
	byte cl_297
	word16 ax_298
	word32 ebx_299
	word64 r11_300
	word64 r9_301
	word64 r10_302
	word32 ebp_303
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_115,ax_116,C_129,cl_96,CZ_103,dl_99,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_19,dwLoc14_26,dwLoc18_29,dx_101,eax_114,ebp_110,ebx_118,ecx_97,edi_263,edx_102,esi_266,fs_104,qwLoc2074_36,qwLoc207C_32,qwLoc3C_41,r10_93,r11_95,r12_119,r12d_120,r13_121,r14_122,r15_123,r8_109,r9_94,rax_113,rbp_124,rbx_117,rcx_126,rdi_262,rdx_264,rsi_265,rsp_125,S_98,SCZO_106,SO_100,SZO_127,Z_128
		defs: al_291,ax_298,C_285,cl_297,CZ_286,dl_293,dx_290,eax_283,ebp_303,ebx_299,ecx_296,edi_294,edx_288,esi_275,fs_282,r10_302,r11_300,r12_276,r12d_289,r13_274,r14_272,r15_271,r8_269,r9_301,rax_281,rbp_268,rbx_277,rcx_280,rdi_279,rdx_270,rsi_273,rsp_267,S_295,SCZO_278,SO_292,SZO_284,Z_287
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405399:
	branch Mem68[rbp_124 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004053A5:
	Mem261[r8_109:word64] = r12_119
// DataOut: ebp edi fs r10 r11 r11d r12d r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004053A8:
	word64 rbx_172 = Mem68[rbp_124 - 0x0000000000000038:word64] ^ Mem68[fs:0x00000028:word64]
	branch rbx_172 != 0x0000000000000000 l000000000040561C
// DataOut: ebp ebx edi fs r10 r11 r11d r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l000000000040561C:
	__stack_chk_fail()
	word64 rsp_223 = rsp_125 - 0x0000000000000004
	Mem224[rsp_223:word32] = r12_119
	Mem226[rsp_223 - 0x0000000000000004:word32] = rbp_124
	Mem228[rsp_223 - 0x0000000000000008:word32] = rbx_172
	word64 rax_229 = Mem228[rsi_111 + 0x0000000000000018:word64]
	word64 rbp_233 = Mem228[rsi_111 + 0x0000000000000010:word64]
	word64 r12_238 = (uint64) ((word32) (rax_229 - rbp_233) >>u 0x00000003)
	branch r12_238 == 0x0000000000000000 l00000000004056DB
// DataOut: fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_252
	word64 rsp_253
	word64 rsi_254
	word32 edi_255
	word64 r12_256
	return fn000000000040564F(rax_229, rbp_233, rsi_111, rdi_105, r12_238, out rbx_252, out rsp_253, out rsi_254, out edi_255, out r12_256)
// DataOut: edi fs r10 r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_243
	word64 rsp_244
	word64 rsi_245
	word32 edi_246
	word64 r12_247
	return fn000000000040564F(rax_229, rbp_233, rsi_111, rdi_105, r12_238, out rbx_243, out rsp_244, out rsi_245, out edi_246, out r12_247)
// DataOut: edi fs r10 r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004053BE:
	word64 rsp_208 = rbp_124 - 0x0000000000000028
	word64 rbx_209
	*rbxOut = Mem68[rsp_208:word64]
	word64 r12_212
	*r12Out = Mem68[rsp_208 + 0x0000000000000008:word64]
	word64 r13_215
	*r13Out = Mem68[rsp_208 + 0x0000000000000010:word64]
	word64 r14_217
	*r14Out = Mem68[rsp_208 + 0x0000000000000018:word64]
	word64 r15_219
	*r15Out = Mem68[rsp_208 + 0x0000000000000020:word64]
	word64 rsp_222
	*rspOut = rsp_208 + 0x0000000000000030
	return rbx_117
// DataOut: edi fs r10 r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

fn00000000004052D0_exit:
// DataOut: edi r10 r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> eax:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp



void fn0000000000405630(word64 rsi, word64 rdi, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405630_entry:
// DataOut: r13 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_14 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_18 = (uint64) ((word32) (rax_13 - rbp_14) >>u 0x00000003)
	branch r12_18 == 0x0000000000000000 l00000000004056DB_in_fn0000000000405630
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004056DB_in_fn0000000000405630:
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_31
	word64 rsp_32
	word64 rsi_33
	word32 edi_34
	word64 r12_35
	fn000000000040564F(rax_13, rbp_14, rsi, rdi, r12_18, out rbx_31, out rsp_32, out rsi_33, out edi_34, out r12_35)
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040564F(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r12, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r12 rax rbp rdi rsi
// LiveOut: edi r12 r12b rax rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040564F_entry:
// DataOut: fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040564F:
	branch rax == rbp l00000000004056E6
// DataOut: fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004056E6:
	Mem117[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3

l0000000000405658:
	word64 rcx_10 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word32 edx_18 = (word32) (uint64) ~(word32) (uint64) (word32) rcx_10
	word64 rcx_15 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_20 = (int64) edx_18 & rax + rcx_10
	word64 rax_21 = Mem0[rsi + 0x0000000000000008:word64]
	Mem23[rsi + 0x0000000000000018:word64] = rdx_20
	branch rdx_20 - rax_21 > rcx_15 - rax_21 l00000000004056E0
// DataOut: fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3

l00000000004056E0:
	Mem115[rsi + 0x0000000000000018:word64] = rcx_15
// DataOut: fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l0000000000405683:
	Mem33[rsi + 0x0000000000000010:word64] = Mem23[rsi + 0x0000000000000018:word64]
	fputs_unlocked(rdi, Mem33[0x000000000061A610:word64])
	word64 rbx_29 = 0x0000000000000000
// DataOut: fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l00000000004056A0:
	__printf_chk(0x0000000000000001, 0x0000000000413759)
	word64 rsi_40
	*rsiOut = 0x0000000000413759
	rbx_29 = rbx_29 + 0x0000000000000001
	branch r12 >u rbx_29 l00000000004056A0
// DataOut: fs r10 r11 r11d r12 r13 r13d r14 r14b r14d r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:0x0000000000000001

l00000000004056BF:
	word64 rdi_48 = Mem33[0x000000000061A610:word64]
	word32 edi_49 = (word32) rdi_48
	*ediOut = edi_49
	word64 rax_50 = Mem33[rdi_48 + 0x0000000000000028:word64]
	branch rax_50 >=u Mem33[rdi_48 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: edi fs r10 r11 r11d r13 r13d r14 r14b r14d r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:0x0000000000000001

l00000000004056EF:
	word64 rsp_96
	word64 rax_97
	word64 rbp_98
	byte SCZO_99
	byte Z_100
	word64 rsi_101
	word64 rcx_102
	word32 ecx_103
	word64 rdx_104
	word32 edx_105
	byte SZO_106
	byte C_107
	word64 rbx_108
	word32 ebx_109
	word64 rdi_110
	word32 eax_111
	word64 r12_112
	byte CZ_113
	word32 edi_114
	call __overflow (retsize: 8; depth: 8)
		uses: C_53,CZ_47,eax_51,ebx_89,ecx_16,edi_49,edx_18,r12_93,rax_50,rbp_91,rbx_88,rcx_15,rdi_48,rdx_38,rsi_95,rsp_94,SCZO_52,SZO_31,Z_5
		defs: C_107,CZ_113,eax_111,ebx_109,ecx_103,edi_114,edx_105,r12_112,rax_97,rbp_98,rbx_108,rcx_102,rdi_110,rdx_104,rsi_101,rsp_96,SCZO_99,SZO_106,Z_100
	return rax_97
// DataOut: edi fs r10 r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

l00000000004056D0:
	Mem79[rdi_48 + 0x0000000000000028:word64] = rax_50 + 0x0000000000000001
	Mem80[rax_50:byte] = 0x0A
// DataOut: edi fs r10 r11 r11d r13 r13d r14 r14b r14d r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

l00000000004056DB:
	word64 rbx_81
	*rbxOut = Mem80[v3:word64]
	word64 r12_86
	*r12Out = Mem80[v3 + 0x0000000000000010:word64]
	word64 rsp_87
	*rspOut = v3 + 0x0000000000000018
	return rax_50
// DataOut: edi fs r10 r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

fn000000000040564F_exit:
// DataOut: edi r12 r12b rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 + 0x0000000000000018 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rbp:<invalid> r12:<invalid>



word64 fn0000000000405700(word32 edx, word64 rdi, selector fs, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi
// LiveOut: r12 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405700_entry:
	*r12Out = r12
// DataOut: edx fs r11 r11d r12 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_100
	word32 ebx_12 = (word32) (uint64) edx
	word64 rsp_101 = fp - 0x0000000000000010
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r11d r12 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405780:
	__printf_chk(0x0000000000000001, 0x000000000041375E)
	rbp_100 = (int64) ebx_12
// DataOut: fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405710:
	word32 ebx_55
	word64 rbp_57
	word64 rsi_58
	word32 edi_59
	word64 r12_60
	word64 r13_61
	word64 r14_62
	word64 r15_63
	word32 eax_65 = (word32) fn000000000040D420(0x00000000, rdi, fs, qwLoc18, out ebx_55, out rsp_101, out rbp_57, out rsi_58, out edi_59, out r12_60, out r13_61, out r14_62, out r15_63)
	word64 rsi_66 = Mem0[0x000000000061A610:word64]
	word32 ebx_123 = (word32) (uint64) (ebx_55 - eax_65)
	branch ebx_123 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r11d r12 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405725_1:
	ebx_123 = 0x00000000
// DataOut: ebx fs r11 r11d r12 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 eax:0x00000000 rdx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405728:
	fputs_unlocked(rbp_57, rsi_66)
	rbp_100 = (int64) ebx_123 + (uint64) strlen(rbp_57)
// DataOut: ebx fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> eax:0x00000000 rdx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405740:
	word64 rdi_102 = Mem0[0x000000000061A610:word64]
	word64 rcx_104 = Mem0[rdi_102 + 0x0000000000000028:word64]
	branch rcx_104 >=u Mem0[rdi_102 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r11d r12 r8 rbp rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405799:
	word64 rdi_137
	word64 rbx_138
	word32 edx_140
	byte SCZO_141
	byte SZO_142
	byte C_143
	byte Z_144
	word32 esi_145
	word64 rsi_146
	word32 eax_147
	word64 rax_148
	byte S_149
	word64 rcx_150
	word32 edi_151
	word64 rdx_152
	selector fs_153
	word64 r12_154
	word64 r13_155
	word64 r14_156
	word64 r15_157
	call __overflow (retsize: 8; depth: 8)
		uses: C_106,dwLoc04_4,dwLoc08_9,eax_90,ebx_96,edi_103,edx_94,esi_92,fs_88,qwLoc18,r12_87,r13_86,r14_85,r15_84,rax_98,rbp_100,rbx_99,rcx_104,rdi_102,rdx_95,rsi_134,rsp_101,S_89,SCZO_105,SZO_93,Z_97
		defs: C_143,eax_147,ebx_139,edi_151,edx_140,esi_145,fs_153,r12_154,r13_155,r14_156,r15_157,rax_148,rbp_136,rbx_138,rcx_150,rdi_137,rdx_152,rsi_146,rsp_135,S_149,SCZO_141,SZO_142,Z_144
// DataOut: ebx fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405751:
	Mem132[rdi_102 + 0x0000000000000028:word64] = rcx_104 + 0x0000000000000001
	Mem133[rcx_104:byte] = 0x20
// DataOut: ebx fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040575C:
	ebx_123 = (word32) (uint64) (ebx_123 - 0x00000001) (alias)
	branch ebx_123 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405764:
	Mem40[0x000000000061B018:word64] = rbp_100 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	word64 rsp_41 = rsp_101 + 0x0000000000000008
	word64 rbp_45
	*rbpOut = Mem40[rsp_41 + 0x0000000000000008:word64]
	return rsp_41 + 0x0000000000000010
// DataOut: fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405700_exit:
// DataOut: r12 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, selector fs, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r8 rsi
// LiveOut: r12 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r11d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_20 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r11d r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004057C0:
	rax_20 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r11d r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:0x0000000000413764 rbx:(uint64) edi -4(fp):rbx

l00000000004057E0:
	word64 rsp_50
	word64 rbp_51
	word64 r12_52
	rax_20 = fn000000000040C9B0(rsi, edi, r8, out rsp_50, out rbp_51, out r12_52)
	esi = (word32) (uint64) Mem0[rsp_50 + 0x000000000000000C:word32] (alias)
// DataOut: esi fs r11 r11d r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:<invalid> rbx:(uint64) edi -4(fp):rbx

l00000000004057CB:
	word32 edx_30 = (word32) (uint64) esi
// DataOut: edx fs r11 r11d r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> r12:<invalid> rdi:<invalid> eax:<invalid> -8(fp):esi -4(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	word64 rbp_38
	word64 r12_39
	return fn0000000000405700(edx_30, rax_20, fs, out rbp_38, out r12_39)
// DataOut: fs r11 r11d r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:(uint64) esi rsi:<invalid> rdi:<invalid> rbp:<invalid> r12:<invalid> eax:<invalid> -8(fp):esi -4(fp):rbx

fn00000000004057B0_exit:
// DataOut: r12 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> eax:<invalid> r12:<invalid> ebx:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> edx:<invalid> -8(fp):esi -4(fp):rbx



word32 fn0000000000405810(word32 edi, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r14 r15
// LiveOut: bpl eax ebp r10 r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405810_entry:
// DataOut: edi fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word64 rsp_22
	word64 rbp_23
	word64 r8_24
	word64 r9_25
	word64 r10_26
	word64 r11_27
	byte r12b_28
	word64 r13_29
	word64 r14_30
	word64 r15_31
	word64 rbx_32 = fn000000000040EAB0(r11, r14, r15, fs, out rsp_22, out rbp_23, out r8_24, out r9_25, out r10_26, out r11_27, out r12b_28, out r13_29, out r14_30, out r15_31)
	__errno_location()
	word64 rsp_47
	word64 r12_48
	word32 r12d_49
	word32 edi_50
	word64 rdi_51
	word64 rdx_52
	word64 rbp_53
	word64 rbx_54
	word64 rsi_55
	word64 rax_56
	word32 esi_57
	byte SZO_58
	byte C_59
	word64 rcx_61
	byte r12b_62
	byte Z_63
	word64 r11_64
	word64 r14_65
	word64 r15_66
	selector fs_67
	word64 r8_68
	word64 r9_69
	word64 r10_70
	word64 r13_71
	word32 eax_113
	call error (retsize: 8; depth: 8)
		uses: C_44,dwLoc04_4,dwLoc08_12,dwLoc0C_15,eax_42,edi_40,esi_38,fs,r10_26,r11_27,r12_6,r12b_28,r13_29,r14_30,r15_31,r8_24,r9_25,rax_41,rbp_34,rbx_32,rcx_45,rdi_39,rdx_46,rsi_37,rsp_22,SZO_43
		defs: C_59,eax_60,edi_50,esi_57,fs_67,r10_70,r11_64,r12_48,r12b_62,r12d_49,r13_71,r14_65,r15_66,r8_68,r9_69,rax_56,rbp_53,rbx_54,rcx_61,rdi_51,rdx_52,rsi_55,rsp_47,SZO_58,Z_63
	branch r12b_62 == 0x00 l0000000000405850
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	eax_113 = (word32) (uint64) Mem0[0x000000000061B030:word32] (alias)
	branch eax_113 != 0x00000000 l000000000040584A
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040585A:
	word64 rbp_119
	*rbpOut = Mem0[rsp_47 + 0x0000000000000008:word64]
	Mem121[0x000000000061B030:word32] = 0x00000001
	word64 r12_122
	*r12Out = Mem121[rsp_47 + 0x0000000000000010:word64]
	return eax_113
// DataOut: bpl eax ebp fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000405840:
	Mem111[0x000000000061B030:word32] = 0x00000002
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040584A:
	word64 rbp_105
	*rbpOut = Mem0[rsp_47 + 0x0000000000000008:word64]
	word64 r12_107
	*r12Out = Mem0[rsp_47 + 0x0000000000000010:word64]
	return eax_113
// DataOut: bpl eax ebp fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn0000000000405810_exit:
// DataOut: bpl eax ebp r10 r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_129
	word32 eax_107
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_107 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_129 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C25:
	word32 eax_102 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_102 != 0x00008000 l0000000000405CA0
// DataOut: dil eax edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_129 = eax_102 == 0x00004000
// DataOut: cl dil edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C55:
	eax_107 = 0x0000002F (alias)
	branch cl_129 != 0x00 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C6B:
	word32 eax_53
	branch dil == 0x00 l0000000000405CC0
// DataOut: edi edx esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CC0:
	eax_107 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CCE:
	eax_107 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid>

l0000000000405CDC:
	eax_53 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax edi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid>

l0000000000405C70:
	word64 rsi_61 = (uint64) (esi & 0x0000F000)
	*rsiOut = rsi_61
	word32 esi_62 = (word32) rsi_61
	eax_107 = 0x00000040 (alias)
	branch esi_62 == 0x0000A000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C83:
	eax_107 = 0x0000007C (alias)
	branch esi_62 == 0x00001000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid> rsi:<invalid>

l0000000000405C90:
	eax_53 = DPB(0x0000007C, esi_62 == 0x0000C000, 0) (alias)
// DataOut: eax edi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid> rsi:<invalid>

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_53 & 0x0000003D)
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid> rsi:<invalid>

l0000000000405C33:
	eax_107 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405CB0:
	word64 rsi_114 = (uint64) (esi & 0x00000049)
	*rsiOut = rsi_114
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - cond((word32) rsi_114 - 0x00000001)) & 0x0000002A)
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C3E:
	return eax_107
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> rsi:<invalid>

fn0000000000405C20_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid>



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rdi rsi rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r15 r15b r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 edi_6 = (word32) dil
	word64 rsi_12
	word32 eax_13 = fn0000000000405C20(edx, esi, (byte) edi_6, out rsi_12)
	word64 rbx_18 = (uint64) eax_13
	word64 rdi_8
	*rdiOut = DPB(rdi, edi_6, 0)
	byte bl_20 = (byte) rbx_18
	branch (byte) eax_13 == 0x00 l0000000000405D33
// DataOut: bl fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D10:
	word64 rdi_49 = Mem0[0x000000000061A610:word64]
	*rdiOut = rdi_49
	word64 rax_52 = Mem0[rdi_49 + 0x0000000000000028:word64]
	branch rax_52 >=u Mem0[rdi_49 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D3A:
	word64 rsp_82
	word64 rbx_83
	word32 edi_84
	byte dil_85
	byte al_86
	byte SZO_87
	byte C_88
	word32 ebx_89
	word32 eax_90
	byte Z_91
	word64 rdi_92
	word64 rax_93
	byte SCZO_94
	word64 rdx_95
	word32 esi_97
	word32 edx_98
	word64 rsi_99
	call __overflow (retsize: 8; depth: 12)
		uses: al_53,bl_20,C_56,dil_51,dwLoc04_4,eax_54,ebx_19,edi_50,edx,esi_80,qwLoc04,rax_52,rbx_18,rdi_49,rdx,rsi_81,rsp_2,SCZO_55,SZO_15,Z_16
		defs: al_86,bl_96,C_88,dil_85,eax_90,ebx_89,edi_84,edx_98,esi_97,rax_93,rbx_83,rdi_92,rdx_95,rsi_99,rsp_82,SCZO_94,SZO_87,Z_91
// DataOut: bl fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D21:
	Mem78[rdi_49 + 0x0000000000000028:word64] = rax_52 + 0x0000000000000001
	Mem79[rax_52:byte] = bl_20
// DataOut: bl fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D2B:
	Mem75[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D33:
	word64 rsp_44
	*rspOut = fp + 0x0000000000000004
	return bl_20 != 0x00
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -4(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rdi
// LiveOut: r12b r15 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D50_entry:
	*r12bOut = r12b
// DataOut: fs r11 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rbp_198 = rdi
	word64 rbx_10 = 0x0000000000000000
	word32 ebx_11 = 0x00000000
	word64 rax_17 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: ebx fs r11 r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 r15 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 rsi_247
	word64 rax_248 = fn000000000040CD70(fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000018:word64], out rsi_247)
	rax_17 = DPB(rax_248, strlen(rax_248), 0) (alias)
	rbx_10 = rax_17 + 0x0000000000000001
	ebx_11 = (word32) (rax_17 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	word64 rbx_241 = (int64) Mem0[0x000000000061B178:word32]
	rbx_10 = rbx_241 + 0x0000000000000001
	ebx_11 = (word32) (rbx_241 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: ebx fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_17 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 rsp_222
	word64 r8_224
	word64 r9_225
	word64 r10_226
	byte r12b_228
	word64 r13_229
	word64 rax_231 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, qwLoc02C8, qwLoc02C0, qwLoc02B8, out rsp_222, out rbp_198, out r8_224, out r9_225, out r10_226, out r11, out r12b_228, out r13_229, out r15)
	rax_17 = DPB(rax_231, strlen(rax_231), 0) + 0x0000000000000001
// DataOut: fs r11 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:<invalid> eax:0x00000002 rcx:<invalid> rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DA8:
	rax_17 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB3:
	rbx_10 = rbx_10 + rax_17
	ebx_11 = (word32) rbx_10 (alias)
// DataOut: ebx fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: ebx fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DBF:
	word64 rax_162
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E40:
	rax_162 = DPB(rax_17, strlen(Mem0[rbp_198 + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs r11 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DC8:
	rax_162 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD3:
	ebx_11 = (word32) (rbx_10 + rax_162) (alias)
// DataOut: ebx fs r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD6:
	word64 rbx_74
	word64 rsp_75
	word64 r8_78
	word64 r9_79
	word64 r10_80
	word64 r11_81
	word64 r12_82
	word64 r13_83
	word64 r14_84
	word64 r15_85
	word32 edi_141
	word64 rsi_148
	fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_11, rbp_198, Mem0[rbp_198:word64], r11, r15, fs, out rbx_74, out rsp_75, out rsi_148, out edi_141, out r8_78, out r9_79, out r10_80, out r11_81, out r12_82, out r13_83, out r14_84, out r15_85)
	word64 rax_87 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_102 = rbx_74 + Mem0[rsp_75 + 0x0000000000000008:word64]
	branch (word32) rax_87 == 0x00000000 l0000000000405E1C
// DataOut: edi fs r11 r12b r13d r14 r14d r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DFC:
	edi_141 = (word32) Mem0[rbp_198 + 0x00000000000000B0:byte]
	rbx_102 = rbx_102 + DPB(rax_87, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rbp_198 + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rbp_198 + 0x0000000000000028:word32]), (byte) edi_141, out rsi_148) != 0x00), 0)
// DataOut: edi fs r11 r12b r13d r14 r14d r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ecx:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E1C:
	branch (Mem0[rsp_75 + 0x00000000000002A8:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: edi fs r11 r12b r13d r14 r14d r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
// DataOut: edi fs r11 r13d r14 r14d r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EC4_thunk_fn0000000000405ED0:
	word64 rsp_133
	word64 rbp_134
	word64 r9_135
	byte r12b_136
	word64 r15_137
	return fn0000000000405ED0(rbp_198, rsi_148, edi_141, r8_78, r11_81, r13d, r14_84, r15_85, fs, out rsp_133, out rbp_134, out r9_135, out r12b_136, out r15_137)
// DataOut: fs r12b r15 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E36:
	word64 rbp_130
	*rbpOut = Mem0[rsp_75 + 0x00000000000002C0:word64]
	word64 rsp_131
	*rspOut = rsp_75 + 0x00000000000002C8
	return rbx_102
// DataOut: fs r12b r15 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r15 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r12:<invalid> r8:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> edx:<invalid> r11:<invalid> r15:<invalid> dl:<invalid> r9:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000405ED0(word64 rbp, word64 rsi, word32 edi, word64 r8, word64 r11, word32 r13d, word64 r14, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r13d r14 r14d r15 r8 rbp rsi
// LiveOut: r12b r15 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405ED0_entry:
	*r15Out = r15
	*r9Out = r9
// DataOut: edi fs r11 r13d r14 r14d r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 r12_21 = (uint64) edi
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	word32 r12d_22 = (word32) r12_21
	byte r12b_23
	*r12bOut = (byte) r12_21
	word64 rsp_120 = fp - 0x0000000000000014
	word64 rbx_127 = rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: fs r11 r12d r13d r14 r14d r15 r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405EEF_1:
	rbx_127 = rax_8
// DataOut: fs r11 r12d r13d r14 r14d r15 r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405EF3:
	word64 rax_329
	word64 rsi_325
	word64 r8_324
	branch rbx_127 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: fs r11 r12d r13d r14 r14d r15 r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l00000000004060C8:
	rax_329 = 0x0000000000000000
	r8_324 = rdx_6
	rsi_325 = Mem0[0x000000000061B028:word64]
	branch rbx_127 == 0x0000000000000000 l0000000000406004
// DataOut: fs r11 r15 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l00000000004060DD:
// DataOut: fs r11 r15 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405F00:
	word64 rdi_362 = Mem0[0x000000000061B028:word64]
	word32 edi_363 = (word32) rdi_362
	branch rbx_127 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: edi fs r11 r12d r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406170:
	branch rbx_127 >u 0x0000000055555555 l000000000040619D
// DataOut: edi fs r11 r12d r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040617F:
	rbp = rbx_127 * 0x0000000000000002
	word64 rsp_509
	Mem512[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp + rbx_127 << 0x0000000000000004, rdi_362, out rsp_509, out r8)
// DataOut: fs r11 r12d r13d r14 r14d r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:0x0000000055555555 r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405F16:
	branch rax_8 >u 0x00000000AAAAAAAA l000000000040619D
// DataOut: edi fs r11 r12d r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405F29:
	word64 rsp_494
	word64 rax_496 = fn0000000000410C90(0x00000000AAAAAAAA, rax_8 * 0x0000000000000018, rdi_362, out rsp_494, out r8)
	rbp = Mem0[0x000000000061B020:word64]
	Mem499[0x000000000061B028:word64] = rax_496
// DataOut: fs r11 r12d r13d r14 r14d r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:0x00000000AAAAAAAA rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405F44:
	word64 rax_408 = Mem0[0x000000000061A660:word64]
	word64 rdi_411 = rbp - rax_408
	rsi = rbp + 0x0000000000000001 + rax_408
	edi_363 = (word32) rdi_411 (alias)
	word64 rcx_414 = rsi *s rdi_411
	branch rbp >u rsi l000000000040619D
// DataOut: edi fs r11 r12d r13d r14 r14d r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405F66:
	branch rsi != (uint64) ((uint128) ((uint64) rcx_414) /u rdi_411) l000000000040619D
// DataOut: edi fs r11 r12d r13d r14 r14d r15 r8 r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405F77:
	branch rcx_414 >>u 0x0000000000000001 >u 0x00000000FFFFFFFF l000000000040619D
// DataOut: edi fs r11 r12d r13d r14 r14d r15 r8 r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040619D:
	fn0000000000410E50()
// DataOut: edi fs r12d r13d r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word64 rsp_385
	word64 rbp_386
	word64 rsi_387
	word64 r8_388
	word64 r9_389
	word64 r10_390
	word64 r11_391
	word64 r12_392
	word32 r13d_393
	word64 r14_394
	word64 r15_395
	return fn00000000004061B0(rbx_127, rbp, rsi, edi_363, r8, r12d_22, r13d, r14, fs, out rsp_385, out rbp_386, out rsi_387, out r8_388, out r9_389, out r10_390, out r11_391, out r12_392, out r13d_393, out r14_394, out r15_395)
// DataOut: fs r12b r15 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405F8D:
	word64 rax_434 = fn0000000000410C40(rsi, (rcx_414 >>u 0x0000000000000001) * 0x0000000000000008, out rsp_120)
	word64 rcx_438 = Mem0[0x000000000061A660:word64]
	branch rbp <=u rcx_438 l0000000000405FE4
// DataOut: fs r11 r15 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:0x00000000FFFFFFFF r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405FA6:
	word64 rsi_458 = Mem0[0x000000000061B028:word64]
	word64 rcx_461 = rcx_438 * 0x0000000000000008 + 0x00000008
	word64 rdx_463 = rsi_458 + (rcx_438 * 0x0000000000000003) * 0x0000000000000008 + 0x0000000000000010
	word64 rsi_466 = rsi_458 + (rbp * 0x0000000000000003) * 0x0000000000000008
// DataOut: fs r11 r15 r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405FD0:
	Mem470[rdx_463 + 0x0000000000000000:word64] = rax_434
	rdx_463 = rdx_463 + 0x0000000000000018
	rax_434 = rax_434 + rcx_461
	rcx_461 = rcx_461 + 0x0000000000000008
	branch rdx_463 != rsi_466 l0000000000405FD0
// DataOut: fs r11 r15 r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000405FE4:
	Mem455[0x000000000061A660:word64] = rbp
	rax_329 = 0x0000000000000000
	r8_324 = Mem455[0x000000000061B1B0:word64]
	rsi_325 = Mem455[0x000000000061B028:word64]
	branch rbx_127 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r11 r15 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l00000000004060E0:
	word64 rcx_337 = Mem0[rsi_325 + 0x0000000000000010:word64]
	Mem339[rsi_325:byte] = 0x01
	word64 rdi_335 = rax_329 + 0x0000000000000001
	Mem341[rsi_325 + 0x0000000000000008:word64] = rdi_335 * 0x0000000000000003
	word64 rdx_342 = 0x0000000000000000
// DataOut: fs r11 r15 r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l00000000004060F8:
	Mem348[rcx_337 + rdx_342 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_342 = rdx_342 + 0x0000000000000001
	branch rdx_342 <=u rax_329 l00000000004060F8
// DataOut: fs r11 r15 r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406109:
	rsi_325 = rsi_325 + 0x0000000000000018
	branch rdi_335 == rbx_127 l0000000000406004
// DataOut: fs r11 r15 r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406116:
	rax_329 = rdi_335
// DataOut: fs r11 r15 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406004:
	word64 rbp_189 = 0x0000000000000000
	branch r8_324 == 0x0000000000000000 l000000000040612D
// DataOut: fs r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040600F:
// DataOut: fs r11 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406010:
	word64 rbp_196
	byte r12b_198
	word64 r9_197
	word64 rax_200 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_189 * 0x0000000000000008:word64], r11, r15, fs, out rsp_120, out rbp_196, out r9_197, out r12b_198, out r15)
	r11 = rax_200
	word64 r14_205 = Mem0[0x000000000061B1B0:word64]
	branch rbx_127 == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406033:
	word64 r13_229 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_231 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	word64 rcx_232 = 0x0000000000000001
	rsi_239 = rsi_231
// DataOut: fs r11 r12b r13 r14 r15 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> cl:<invalid> r9:<invalid> edx:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> r10:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l00000000004060A7:
	word64 rsi_239
	r9_197 = r9_197 - 0x0000000000000001
	*r9Out = r9_197
	branch Mem0[rsi_239:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l00000000004060B3:
	word64 r10_275
	branch r12b_198 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r15 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406050:
	r10_275 = (uint64) ((uint128) (uint64) rbp_196 /u (uint64) ((uint128) ((uint64) ((rsi_231 - 0x0000000000000001) + rcx_524)) /u rcx_524))
// DataOut: fs r10 r11 r12b r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l00000000004060B8:
	r10_275 = (uint64) ((uint128) (uint64) rbp_196 % rcx_524)
// DataOut: fs r10 r11 r12b r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040606A:
	word64 rdx_281 = rax_200 + (uint64) (r9_197 != r10_275) * 0x0000000000000002
	word64 rax_284 = Mem0[rsi_239 + 0x0000000000000000:word64] + r10_275 * 0x0000000000000008
	r9_197 = Mem0[rcx_524:word64]
	*r9Out = r9_197
	branch rdx_281 <=u r9_197 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406086:
	Mem294[r14_205 + 0x0000000000000008:word64] = Mem0[r14_205 + 0x0000000000000008:word64] + (rdx_281 - r9_197)
	Mem295[rax_284:word64] = rdx_281
	Mem298[rsi_239:byte] = Mem295[r14_205 + 0x0000000000000008:word64] <u r13_229
// DataOut: fs r11 r12b r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040609A:
	rsi_239 = rsi_239 + 0x0000000000000018
	rcx_232 = rcx_524 + 0x0000000000000001
	word64 rcx_524 = rcx_232
	branch rbx_127 <=u rcx_524 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r15 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406120:
	rbp_189 = rbp_196 + 0x0000000000000001
	branch rbp_196 + 0x0000000000000001 <u r14_205 l0000000000406010
// DataOut: fs r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040612D:
	branch rbx_127 <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r15 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406133:
	word64 rdx_145 = Mem0[0x000000000061B028:word64]
	word64 rax_147 = rbx_127 * 0x0000000000000003
	branch Mem0[rdx_145 - 0x0000000000000018 + (rax_147 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: fs r15 r9 rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406149:
	word64 rax_154 = (rax_147 << 0x0000000000000003) + rdx_145
// DataOut: fs r15 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040615A:
	rbx_127 = rbx_127 - 0x0000000000000001
	branch rbx_127 != 0x0000000000000001 l0000000000406150
// DataOut: fs r15 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406150:
	rax_154 = rax_154 - 0x0000000000000018
	branch Mem0[rax_154 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r15 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406164:
	word64 rsp_133 = rsp_120 + 0x0000000000000008
	word64 rbp_134
	*rbpOut = Mem0[rsp_133:word64]
	byte r12b_139
	*r12bOut = (byte) Mem0[rsp_133 + 0x0000000000000008:word64]
	word64 rsp_144
	*rspOut = rsp_133 + 0x0000000000000020
	return rbx_127
// DataOut: fs r12b r15 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r15:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

fn0000000000405ED0_exit:
// DataOut: r12b r15 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> r13:<invalid> r14:<invalid> rdi:<invalid> edx:<invalid> r11:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> edi:<invalid> ecx:<invalid> r15:<invalid> r10:<invalid> dx:<invalid> esi:<invalid> r9d:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14



word64 fn00000000004061B0(word64 rbx, word64 rbp, word64 rsi, word32 edi, word64 r8, word32 r12d, word32 r13d, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r12d r13d r14 r14d r8 rbp rbx rsi
// LiveOut: eax r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004061B0_entry:
// DataOut: edi fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = (uint64) edi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	rsp = fp - 0x0000000000000030
	rax = Mem0[fs:0x00000028:word64]
	qwLoc18 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi esp fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp esp fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rbp:(uint64) edi rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406259:
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax ebp ebx edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406264_1:
	edx = eax
// DataOut: ebp ebx edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> r12:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> edx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406267:
// DataOut: ebp ebx edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r12:<invalid> rbx:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061D1:
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = rsp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rbx = rsp
	rax = rsp
// DataOut: ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebp ebx edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebp ebx ecx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040621D_1:
	rax = rcx
// DataOut: dl eax ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: ebp ebx edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406269:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	rdx = (uint64) (edx | esi)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062CC:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: eax fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax ebp ebx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: ebp ebx fs r10 r11 r12d r13d r14d r15 r15d r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = r14
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = r13
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = r12
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	eax = strcmp(rdi, rsi)
	r13 = (uint64) eax
	rax = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: eax fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A806:
	eax = (word32) dl
	rsi = 0x000000000000002E
	rsi = (uint64) (esi - eax)
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax esi fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A81D:
	eax = (word32) cl
	rdi = 0x000000000000002E
	rdi = (uint64) (edi - eax)
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	rax = 0x0000000000000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl eax edi esi fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax edi fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: eax fs r10 r11 r13d r14d r15 r15d r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAD6:
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x00000000FFFFFFFF rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbx:<invalid> eax:0xFFFFFFFF r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: fs r10 r11 r13d r14d r15 r15d r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d, out rsi, out r9)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d, out rsi, out r9)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: fs r10 r12 r13d r14 r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB02:
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	eax = strncmp(rdi, rsi, rdx)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: fs r10 r12 r13d r15 r15d r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8BB:
	rcx = 0x0000000000000000
	r8 = 0x0000000000000000
	SZO = cond(r8d)
	C = false
	r11 = 0x00000000FFFFFFFF
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8CF:
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A97A:
	esi = (word32) Mem0[rbx + r8:byte]
	eax = (int32) sil
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8E7:
	eax = (int32) r9b
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D4:
	edx = (word32) Mem0[rbx + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9DE:
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9F0:
	eax = (int32) dl
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AADB:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:(int32) r9b r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA03:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:(int32) r9b r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA0B:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA22:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA26:
	eax = (int32) dl
	rax = (uint64) (eax - r9d)
	SCZO = cond(eax)
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[rbx + r8:byte]
	esi = (int32) dl
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rax rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9d rax rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rax = 0x0000000000000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	rdx = (uint64) (edx - 0x00000030)
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rax rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAE7:
	rax = 0x00000000FFFFFFFF
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rax rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA5D:
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB18:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A900:
	edx = (word32) Mem0[rbx + r8:byte]
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A98F:
	rdx = (uint64) esi
// DataOut: dl fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A905:
	esi = (word32) dl
	rax = 0x0000000000000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A912:
	rax = (uint64) esi
	rax = (uint64) (eax & 0xFFFFFFDF)
	rax = (uint64) (eax - 0x00000041)
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA68:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(dl - 0x7E)
	rax = (uint64) esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA73_1:
	eax = r11d
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA77:
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A923:
	rax = (uint64) esi
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB1F:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A934:
	esi = (word32) r9b
	rdi = 0x0000000000000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A942:
	rdx = (uint64) esi
	rdi = (uint64) esi
	rdx = (uint64) (edx & 0xFFFFFFDF)
	rdx = (uint64) (edx - 0x00000041)
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 r9b rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A951:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(r9b - 0x7E)
	rdi = (uint64) esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA80:
	rax = (uint64) (eax - edi)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: eax fs r10 r11 r13d r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA82_1:
	eax = r13d
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA86:
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: fs r10 r11 r11d r12 r13d r15 r15d r8 r9 rbp rbx rcx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB10:
	rax = (uint64) r13d
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r11:0x00000000FFFFFFFF r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A834:
// DataOut: eax fs r10 r11 r15 r15d r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> eax:0x00000001 r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> ecx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062AE:
	return rax
// DataOut: eax fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) eax:0x00000001 rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn00000000004061B0_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r10 (=> r10Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13d (=> r13dOut)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> ecx:<invalid> r15:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r11:0x00000000FFFFFFFF edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):r12 -56(fp):r13 -52(fp):r14 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rdi
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	word64 rdi_17
	fn0000000000406440(0x000000000061A3E0, out rdi_17)
	word64 rdi_20
	fn0000000000406440(0x000000000061A410, out rdi_20)
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	word64 rdi_26
	fn0000000000406440(0x000000000061A3F0, out rdi_26)
	return rdi_26
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid>

l000000000040640A:
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	word64 rdi_12
	fn0000000000406440(0x000000000061A400, out rdi_12)
	return rdi_12
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid>



word64 fn0000000000406440(word64 rdi, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rdi rsi
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem26[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
	word64 rsp_16
	byte SCZO_17
	byte Z_18
	word64 rsi_19
	word64 rdi_20
	word64 rcx_21
	word32 edx_22
	word64 rdx_23
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: qwLoc10_8,rcx_11,rdi_13,rdx_12,rsi_10,rsp_14,SCZO_15,Z_5
		defs: edx_22,rcx_21,rdi_20,rdx_23,rsi_19,rsp_16,SCZO_17,Z_18
	return rsi_19
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> -16(fp):rdi



word64 fn0000000000406490(ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax rax rdi rsi rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406490_entry:
	*rsiOut = rsi
	*rdiOut = rdi
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	word64 rax_138 = (uint64) Mem0[0x000000000061B034:word32]
	branch (word32) rax_138 == 0x00000000 l0000000000406538
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	word64 rsp_147
	*rspOut = fp + 0x0000000000000004
	return rax_138
// DataOut: eax fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx

fn0000000000406490_exit:
// DataOut: eax rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:<invalid> rbx:rbx rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> -4(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	word64 rdi_133
	fn0000000000406440(0x000000000061A3E0, out rdi_133)
	word64 rdi_136
	fn0000000000406440(0x000000000061A3F0, out rdi_136)
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	word64 rsp_37
	word64 rbx_38
	byte SCZO_39
	word32 eax_40
	word64 rax_41
	byte SZO_42
	byte C_43
	byte Z_44
	word32 edi_45
	word64 rdi_46
	word64 rdx_47
	word32 esi_48
	word64 rsi_49
	word32 ebx_50
	word32 edx_51
	call fflush_unlocked (retsize: 8; depth: 140)
		uses: C_30,dwLoc04_4,eax_33,ebx_15,edi_20,edx_14,esi_17,rax_32,rbx_22,rdi_36,rdx_18,rsi_16,rsp_23,SCZO_34,SZO_31,Z_35
		defs: C_43,eax_40,ebx_50,edi_45,edx_51,esi_48,rax_41,rbx_38,rdi_46,rdx_47,rsi_49,rsp_37,SCZO_39,SZO_42,Z_44
	word64 rsp_58
	word64 rbx_59
	byte SCZO_60
	word32 eax_61
	word64 rax_62
	byte SZO_63
	byte C_64
	byte Z_65
	word32 edi_66
	word64 rdi_67
	word64 rdx_68
	word32 esi_69
	word64 rsi_70
	word32 ebx_71
	word32 edx_72
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_55,dwLoc04_4,eax_40,ebx_50,edi_53,edx_51,esi_48,rax_41,rbx_38,rdi_52,rdx_56,rsi_57,rsp_37,SCZO_39,SZO_54,Z_44
		defs: C_64,eax_61,ebx_71,edi_66,edx_72,esi_69,rax_62,rbx_59,rdi_67,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_63,Z_65
	word64 rbx_73 = (uint64) Mem0[0x000000000061B038:word32]
	word64 rax_75 = (uint64) Mem0[0x000000000061B034:word32]
	word32 ebx_74 = (word32) rbx_73
	word32 eax_76 = (word32) rax_75
	branch eax_76 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_74, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem125[0x000000000061B034:word32] = (word32) (uint64) (eax_76 - 0x00000001)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	word64 rsp_82
	word64 rbx_83
	byte SCZO_84
	word32 eax_85
	word64 rax_86
	byte SZO_87
	byte C_88
	byte Z_89
	word32 edi_90
	word64 rdi_91
	word64 rdx_92
	word32 esi_93
	word64 rsi_94
	word32 ebx_95
	word32 edx_96
	call raise (retsize: 8; depth: 140)
		uses: C_79,dwLoc04_4,eax_76,ebx_80,edi_66,edx_72,esi_69,rax_75,rbx_73,rdi_81,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_77,Z_78
		defs: C_88,eax_85,ebx_95,edi_90,edx_96,esi_93,rax_86,rbx_83,rdi_91,rdx_92,rsi_94,rsp_82,SCZO_84,SZO_87,Z_89
	word64 rsp_105
	word64 rbx_106
	byte SCZO_107
	word32 eax_108
	word64 rax_109
	byte SZO_110
	byte C_111
	byte Z_112
	word32 edi_113
	word64 rdi_114
	word64 rdx_115
	word32 esi_116
	word64 rsi_117
	word32 ebx_118
	word32 edx_119
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_100,dwLoc04_4,eax_85,ebx_95,edi_104,edx_98,esi_102,rax_86,rbx_83,rdi_103,rdx_97,rsi_101,rsp_82,SCZO_84,SZO_99,Z_89
		defs: C_111,eax_108,ebx_118,edi_113,edx_119,esi_116,rax_109,rbx_106,rdi_114,rdx_115,rsi_117,rsp_105,SCZO_107,SZO_110,Z_112
// DataOut: fs r10 r11 r11d r12 r13 r14 r14b r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rcx rdi rdx sil
// LiveOut: r11 r11d r12 r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rax
fn0000000000406540_entry:
// DataOut: fs r11 r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	byte r15b_521
	word32 r15d_520
	word32 edx_481
	word32 r14d_517
	word64 rbp_180 = rdi
	word64 rbx_26 = rdx
	word32 ebx_179 = (word32) rdx
	word64 rdx_34 = Mem0[rdi:word64]
	word64 r12_181 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: ebx fs r11 r12 r13 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: ebx fs r11 r13 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004069D8:
	word32 r14d_900
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: ebx fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406A08:
	r14d_900 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: ebx fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406A20:
	r14d_900 = 0x00000000 (alias)
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406A10:
	r15 = (uint64) Mem0[rcx + 0x0000000000000028:word32]
	r15d_520 = (word32) r15 (alias)
	r15b_521 = (byte) r15 (alias)
// DataOut: ebx fs r11 r14d r15 r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004069EA:
	r15 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r15d_520 = (word32) r15 (alias)
	r15b_521 = (byte) r15 (alias)
	r14d_900 = 0x00000001 (alias)
// DataOut: ebx fs r11 r14d r15 r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004069F7:
	word64 r14_904 = (uint64) (r14d_900 ^ 0x00000001)
	r14d_517 = (word32) r14_904 (alias)
	r14b = (byte) r14_904 (alias)
	r12_181 = rdx_34
// DataOut: ebx fs r11 r12 r14b r14d r15 r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004069C6:
	r12_181 = rdx_34
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: ebx fs r11 r12 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406580:
	r14d_517 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	r15 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r14b = (byte) r14d_517 (alias)
	r15d_520 = (word32) r15 (alias)
	r15b_521 = (byte) r15 (alias)
	branch r14b != 0x00 l00000000004065B0
// DataOut: ebx fs r11 r12 r14b r14d r15 r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406594:
	word64 rsi_879
	eax = fn0000000000404CD0(0x0000000C, out rsi_879)
	edx_481 = 0x0000000C (alias)
	branch (byte) eax != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r14b r14d r15 r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004065AB:
// DataOut: ebx fs r11 r12 r14b r14d r15 r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004065B0:
	word64 rax_533
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: ebx fs r11 r12 r14b r14d r15 r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406628:
	rax_533 = (uint64) ((word32) (uint64) r15d_520 & 0x0000F000)
	word32 eax_653 = (word32) rax_533
	branch eax_653 == 0x00008000 l0000000000406868
// DataOut: eax ebx fs r11 r12 r14b r15 r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406868:
	branch (r15d_520 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: ebx fs r11 r12 r15 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406871:
	word64 rsi_845
	branch (byte) fn0000000000404CD0(0x00000010, out rsi_845) == 0x00 l00000000004068B8
// DataOut: ebx fs r11 r12 r15 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004068B8:
	branch (r15d_520 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: ebx fs r11 r12 r15 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004068C1:
	word64 rsi_833
	branch (byte) fn0000000000404CD0(0x00000011, out rsi_833) == 0x00 l000000000040693B
// DataOut: ebx fs r11 r12 r15 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040693B:
	word64 rsi_778
	branch (byte) fn0000000000404CD0(0x00000015, out rsi_778) == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040695C:
	r15 = (uint64) (r15d_520 & 0x00000049)
	branch (word32) r15 == 0x00000000 l000000000040697A
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406962:
	word64 rsi_815
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_815) == 0x00 l000000000040697A
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: ebx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406985:
	word64 rsi_803
	branch (byte) fn0000000000404CD0(0x00000016, out rsi_803) == 0x00 l00000000004065CF
// DataOut: ebx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406997:
	edx_481 = 0x00000016 (alias)
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406970:
	edx_481 = 0x0000000E (alias)
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406952:
	edx_481 = 0x00000015 (alias)
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004068CF:
	edx_481 = 0x00000011 (alias)
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040687F:
	edx_481 = 0x00000010 (alias)
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040663B:
	branch eax_653 == 0x00004000 l00000000004068E0
// DataOut: eax ebx fs r11 r12 r14b r15 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_520 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: ebx fs r11 r12 r15 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004069A1:
	edx_481 = 0x00000014 (alias)
	word64 rsi_755
	branch (byte) fn0000000000404CD0(0x00000014, out rsi_755) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004069B8:
// DataOut: ebx fs r11 r12 r15 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004068F3:
	branch (r15b_521 & 0x02) == 0x00 l0000000000406910
// DataOut: ebx fs r11 r12 r15 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004068F9:
	edx_481 = 0x00000013 (alias)
	word64 rsi_743
	branch (byte) fn0000000000404CD0(0x00000013, out rsi_743) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406910:
	r15 = (uint64) (r15d_520 & 0x00000200)
	edx_481 = 0x00000006 (alias)
	branch (word32) r15 == 0x00000000 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406922:
	word64 rsi_727
	edx_481 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x00000012, out rsi_727) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406646:
	branch eax_653 == 0x0000A000 l0000000000406859
// DataOut: eax ebx fs r11 r12 r14b r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406859:
	edx_481 = 0x00000007 (alias)
// DataOut: ebx edx fs r11 r12 r14b r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406651:
	edx_481 = 0x00000008 (alias)
	branch eax_653 == 0x00001000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040665D:
	edx_481 = 0x00000009 (alias)
	branch eax_653 == 0x0000C000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406666:
	edx_481 = 0x0000000A (alias)
	branch eax_653 == 0x00006000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040666F:
	word64 rdx_683 = (uint64) (eax_653 != 0x00002000)
	edx_481 = rdx_683 + 0x000000000000000B + rdx_683
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004065B9:
	rax_533 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	edx_481 = (word32) (uint64) Mem0[rax_533 * 0x0000000000000004 + 0x00412C60:word32] (alias)
	branch edx_481 != 0x00000005 l0000000000406680
// DataOut: ebx edx fs r11 r12 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406680:
	r14b = (byte) (uint64) (r14d_517 & DPB(eax, edx_481 == 0x00000007, 0)) (alias)
// DataOut: ebx edx fs r11 r12 r14b r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406689:
	branch r14b == 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040668E:
	edx_481 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040669C:
	word64 rsi_618
	edx_481 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x0000000D, out rsi_618) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004065CF:
	word32 eax_535 = strlen(r12_181)
	word64 rax_536 = DPB(rax_533, eax_535, 0)
	word64 rbp_537 = Mem0[0x000000000061B120:word64]
	r14b = (byte) eax_535 (alias)
	r15 = r12_181 + rax_536
	branch rbp_537 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004065EA:
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004065F0:
	word64 rdx_568 = Mem0[rbp_537:word64]
	branch rax_536 <u rdx_568 l0000000000406610
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004065F9:
	branch strncmp(r15 - rdx_568, Mem0[rbp_537 + 0x0000000000000008:word64], rdx_568) == 0x00000000 l00000000004068A0
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004068A0:
	branch rbp_537 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004068A9:
	rbp_180 = rbp_537 + 0x0000000000000010
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406610:
	rbp_537 = Mem0[rbp_537 + 0x0000000000000020:word64]
	branch rbp_537 != 0x0000000000000000 l00000000004065F0
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406619:
	edx_481 = 0x00000005 (alias)
// DataOut: ebx edx fs r11 r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004066B0:
	rbp_180 = ((uint64) edx_481 << 0x0000000000000004) + 6398944
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004066C0:
	branch Mem0[rbp_180 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: ebx edi fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406890:
	word64 rsi_475
	fn0000000000404CD0(0x00000004, out rsi_475)
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004066D0:
	word64 rsi_453
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_453) != 0x00 l0000000000406840
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406840:
	word64 rdi_470
	fn0000000000406440(0x000000000061A3E0, out rdi_470)
	word64 rdi_473
	fn0000000000406440(0x000000000061A3F0, out rdi_473)
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004066DD:
	word64 rdi_461
	fn0000000000406440(0x000000000061A3E0, out rdi_461)
	word64 rdi_464
	fn0000000000406440(rbp_180, out rdi_464)
	word64 rdi_467
	fn0000000000406440(0x000000000061A3F0, out rdi_467)
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406570:
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004066FF:
	word64 r13_204
	word64 rbp_215
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004067D8:
	word64 rbx_411
	word64 rsp_412
	word64 rsi_413
	word32 edi_414
	word64 r8_415
	word64 r9_416
	word64 r10_417
	word64 r11_418
	word64 r12_419
	word64 r14_421
	word64 r15_422
	word64 rax_423 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_179, rbp_180, r12_181, r11, r15, fs, out rbx_411, out rsp_412, out rsi_413, out edi_414, out r8_415, out r9_416, out r10_417, out r11_418, out r12_419, out r13_204, out r14_421, out r15_422)
	Mem427[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_423
	rbp_215 = rax_423
// DataOut: fs r11 r11d r13 r14b r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: ebx fs r11 r12 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406711:
	word64 rax_310 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_310 + 0x0000000000000008 l0000000000406820
// DataOut: ebx fs r11 r12 r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406820:
	word64 rsp_363
	word64 r14_365
	word64 r13_366
	word64 rcx_367
	word64 rdi_370
	word64 rdx_372
	byte SCZO_373
	byte sil_374
	byte SZO_375
	byte C_376
	byte Z_377
	word32 r14d_378
	word64 rax_379
	word32 r15d_380
	word32 ecx_381
	word64 rsi_382
	word32 esi_383
	word32 eax_384
	word32 edx_385
	word32 ebp_387
	word32 edi_388
	byte al_389
	byte dl_390
	byte r15b_391
	byte CZ_392
	word64 r8_395
	word64 r9_397
	word64 r10_398
	call _obstack_newchunk (retsize: 8; depth: 40)
		uses: al_312,C_316,CZ_40,dl_44,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_18,dwLoc18_24,eax_311,ebp_53,ebx_27,ecx,edi_47,edx_43,esi,fs,r10,r11,r12_54,r13_12,r14_55,r14b_57,r14d_56,r15_58,r15b_60,r15d_59,r8,r9,rax_310,rbp_52,rbx_26,rcx,rdi_362,rdx_313,rsi_361,rsp_28,SCZO_315,sil,SZO_61,Z_168
		defs: al_389,C_376,CZ_392,dl_390,eax_384,ebp_387,ebx_396,ecx_381,edi_388,edx_385,esi_383,fs_394,r10_398,r11_393,r12_368,r13_366,r14_365,r14b_386,r14d_378,r15_364,r15b_391,r15d_380,r8_395,r9_397,rax_379,rbp_369,rbx_371,rcx_367,rdi_370,rdx_372,rsi_382,rsp_363,SCZO_373,sil_374,SZO_375,Z_377
	rax_310 = Mem0[rbx_26 + 0x0000000000000018:word64]
// DataOut: ebx fs r11 r12 r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406723:
	Mem357[rax_310:word64] = Mem0[0x000000000061B018:word64]
	Mem359[rbx_26 + 0x0000000000000018:word64] = Mem357[rbx_26 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r12 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406732:
	word64 rsp_196
	word64 rsi_197
	word32 edi_198
	word64 r8_199
	word64 r9_200
	word64 r10_201
	word64 r11_202
	word64 r12_203
	word64 r14_205
	word64 r15_206
	word64 rbx_195
	word64 rax_207 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_179, rbp_180, r12_181, r11, r15, fs, out rbx_195, out rsp_196, out rsi_197, out edi_198, out r8_199, out r9_200, out r10_201, out r11_202, out r12_203, out r13_204, out r14_205, out r15_206)
	word64 rdx_209 = rax_207 + Mem0[0x000000000061B018:word64]
	Mem217[0x000000000061B018:word64] = rdx_209
	rbp_215 = rax_207
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r11d r13 r14b r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406767:
	word64 rax_218 = Mem217[rbx_195 + 0x0000000000000018:word64]
	branch Mem217[rbx_195 + 0x0000000000000020:word64] <u rax_218 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r11d r13 r14b r8 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> eax:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406800:
	word64 rsp_267
	word64 r15_268
	word64 r14_269
	word64 rcx_271
	word64 r12_272
	word64 rdi_274
	word64 rdx_276
	byte SCZO_277
	byte sil_278
	byte SZO_279
	byte C_280
	byte Z_281
	word32 r14d_282
	word64 rax_283
	word32 r15d_284
	word32 ecx_285
	word64 rsi_286
	word32 esi_287
	word32 eax_288
	word32 edx_289
	word32 ebp_291
	word32 edi_292
	byte al_293
	byte dl_294
	byte r15b_295
	byte CZ_296
	word64 r11_297
	selector fs_298
	word64 r8_299
	word32 ebx_300
	word64 r9_301
	word64 r10_302
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_221,C_224,CZ_174,dl_212,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_18,dwLoc18_24,eax_220,ebp_216,ebx_179,ecx_191,edi_198,edx_211,esi_178,fs_172,r10_201,r11_202,r12_203,r13_204,r14_205,r14b_183,r14d_182,r15_206,r15b_186,r15d_185,r8_199,r9_200,rax_218,rbp_215,rbx_195,rcx_222,rdi_266,rdx_209,rsi_265,rsp_196,SCZO_223,sil_177,SZO_192,Z_214
		defs: al_293,C_280,CZ_296,dl_294,eax_288,ebp_291,ebx_300,ecx_285,edi_292,edx_289,esi_287,fs_298,r10_302,r11_297,r12_272,r13_270,r14_269,r14b_290,r14d_282,r15_268,r15b_295,r15d_284,r8_299,r9_301,rax_283,rbp_273,rbx_275,rcx_271,rdi_274,rdx_276,rsi_286,rsp_267,SCZO_277,sil_278,SZO_279,Z_281
	rax_218 = Mem217[rbx_195 + 0x0000000000000018:word64]
	rdx_209 = Mem217[0x000000000061B018:word64]
// DataOut: fs r11 r11d r13 r14b r8 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> eax:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406779:
	Mem261[rax_218:word64] = rdx_209
	Mem263[rbx_195 + 0x0000000000000018:word64] = Mem261[rbx_195 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r11d r13 r14b r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> eax:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406781:
	word64 rsp_94
	word64 rsi_95
	word64 rdi_96
	fn0000000000406490(out rsp_94, out rsi_95, out rdi_96)
	branch r14b != 0x00 l00000000004067A0
// DataOut: fs r11 r11d r13 r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004067A0:
	word64 rdi_141
	*rdiOut = fn0000000000406400()
	word64 rcx_143 = Mem0[0x000000000061B0C8:word64]
	word64 rax_149 = (uint64) ((uint128) (uint64) r13_204 /u rcx_143)
	word64 rsi_151
	*rsiOut = rax_149
	branch rax_149 == (uint64) ((uint128) ((uint64) ((rbp_215 - 0x0000000000000001) + r13_204)) /u rcx_143) l000000000040678B
// DataOut: fs r11 r11d r8 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004067C6:
	word64 rdi_163
	word64 rsi_164
	*rsiOut = fn0000000000406440(0x000000000061A550, out rdi_163)
// DataOut: fs r11 r11d r8 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040678B:
	word64 rbp_116
	*rbpOut = Mem0[rsp_94 + 0x0000000000000010:word64]
	word64 r12_119
	*r12Out = Mem0[rsp_94 + 0x0000000000000018:word64]
	word64 r13_121
	*r13Out = Mem0[rsp_94 + 0x0000000000000020:word64]
	word64 r14_123
	*r14Out = Mem0[rsp_94 + 0x0000000000000028:word64]
	word64 r15_127
	*r15Out = Mem0[rsp_94 + 0x0000000000000030:word64]
	word64 rsp_130
	*rspOut = rsp_94 + 0x0000000000000038
	return Mem0[rsp_94 + 0x0000000000000008:word64]
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000406540_exit:
// DataOut: r11 r11d r12 r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r15:<invalid> r8:<invalid> r14d:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	word64 rsi_36
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_36) != 0x00 l0000000000406A58
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	word64 rdi_45
	fn0000000000406440(0x000000000061A3E0, out rdi_45)
	word64 rdi_48
	fn0000000000406440(0x000000000061A420, out rdi_48)
// DataOut: fs r11 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	word64 rdi_54
	fn0000000000406440(0x000000000061A3F0, out rdi_54)
	return
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, word32 r11d, word64 r14, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs r11d r14 r15 r15b rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406A80_entry:
// DataOut: ecx edx fs r11d r14 r15 r15b rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 r12_15 = rdi
	word32 ebp_21 = (word32) rdx
	word64 rbx_201 = rsi
	word64 rsp_192 = fp - 0x0000000000000124
	word64 rax_132 = 0x0000000000000000
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	rax_132 = strstr(rsi, 0x0000000000413766)
	r14 = rax_132
	branch rax_132 == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14
// LocalsOut: fp(64)

l0000000000406ACD:
	word32 eax_140 = strlen(rsi)
	rax_132 = DPB(rax_132, eax_140, 0) (alias)
	branch rax_132 <=u 0x0000000000000065 l0000000000406B20
// DataOut: bpl ebp fs r11d r12 r13d r14 r15 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rsp_155
	word64 r14_156
	word64 r13_157
	word32 r13d_158
	word32 ecx_159
	word64 r12_160
	word64 rdi_161
	word64 rbp_162
	word64 rdx_163
	word64 rbx_164
	word64 rsi_165
	byte SCZO_166
	word64 rax_167
	selector fs_168
	word32 eax_169
	byte SZO_170
	byte C_171
	byte Z_172
	word32 esi_173
	byte CZ_174
	word32 r8d_175
	word64 r8_176
	word64 rcx_177
	word32 r9d_178
	word64 r9_179
	word32 r11d_180
	word64 r15_181
	word64 r11_182
	word32 ebp_183
	word32 r14d_184
	word32 r15d_185
	call __mempcpy_chk (retsize: 8; depth: 300)
		uses: C_136,CZ_143,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_18,dwLoc14_24,eax_140,ebp_21,ecx,esi,fs,qwLoc1C_31,r11,r11d,r12_15,r13_9,r13d_10,r14_137,r14d_138,r15,r15d,r8,r8d,r9,r9d,rax_141,rbp_20,rbx_150,rcx_146,rdi_149,rdx_147,rsi_145,rsp_27,SCZO_148,SZO_134,Z_135
		defs: C_171,CZ_174,eax_169,ebp_183,ecx_159,esi_173,fs_168,r11_182,r11d_180,r12_160,r13_157,r13d_158,r14_156,r14d_184,r15_181,r15d_185,r8_176,r8d_175,r9_179,r9d_178,rax_167,rbp_162,rbx_164,rcx_177,rdi_161,rdx_163,rsi_165,rsp_155,SCZO_166,SZO_170,Z_172
	word64 r13_194
	word32 r13d_195
	word32 ecx_196
	word64 rdi_198
	word64 rbp_199
	word64 rdx_200
	word64 rsi_202
	byte SCZO_203
	word64 rax_204
	word32 eax_206
	byte SZO_207
	byte C_208
	byte Z_209
	word32 esi_210
	byte CZ_211
	word32 r8d_212
	word64 r8_213
	word64 rcx_214
	word32 r9d_215
	word64 r9_216
	word64 r11_219
	word32 r14d_221
	call stpcpy (retsize: 8; depth: 300)
		uses: C_171,CZ_174,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_18,dwLoc14_24,eax_169,ebp_183,ecx_159,esi_173,fs_168,qwLoc1C_31,r11_182,r11d_180,r12_160,r13_157,r13d_158,r14_156,r14d_184,r15_181,r15d_185,r8_176,r8d_175,r9_179,r9d_178,rax_167,rbp_162,rbx_164,rcx_186,rdi_187,rdx_189,rsi_191,rsp_155,SCZO_190,SZO_170,Z_172
		defs: C_208,CZ_211,eax_206,ebp_220,ecx_196,esi_210,fs_205,r11_219,r11d_217,r12_197,r13_194,r13d_195,r14_193,r14d_221,r15_218,r15d_222,r8_213,r8d_212,r9_216,r9d_215,rax_204,rbp_199,rbx_201,rcx_214,rdi_198,rdx_200,rsi_202,rsp_192,SCZO_203,SZO_207,Z_209
	rax_132 = strcpy(rax_204, rsi_202 + 0x0000000000000002)
// DataOut: bpl ebp fs r11d r12 r13d r14 r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> eax:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406ADB:
	word64 rbp_69
	word64 rdi_70
	word64 r8_71
	word64 r11_72
	word32 r14d_73
	word64 r15_74
	word64 rax_75 = fn0000000000410600(rax_132, rbx_201, ebp_21, 0x00000000000003E9, r12_15, 0x00000000, r11d, r14, r15, fs, out rbp_69, out rdi_70, out r8_71, out r11_72, out r14d_73, out r15_74)
	branch (Mem0[rsp_192 + 0x0000000000000108:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: fs r11 r11d r14d r15 r15b r15d r8 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406B66:
	__stack_chk_fail()
// DataOut: fs r11 r11d r14d r15d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r15:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406B6B_thunk_fn0000000000406B70:
	word64 rsp_120
	word64 rbp_121
	word64 r8_122
	word64 r11_123
	word64 r12_124
	word64 r13_125
	word64 r14_126
	word64 r15_127
	return fn0000000000406B70(rbp_69, rdi_70, r11_72, r14d_73, r15d, fs, out rsp_120, out rbp_121, out r8_122, out r11_123, out r12_124, out r13_125, out r14_126, out r15_127)
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r15:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l0000000000406B07:
	word64 rsp_105 = rsp_192 + 272
	word64 rbp_109
	*rbpOut = Mem0[rsp_105 + 0x0000000000000008:word64]
	word64 r12_112
	*r12Out = Mem0[rsp_105 + 0x0000000000000010:word64]
	word64 r13_114
	*r13Out = Mem0[rsp_105 + 0x0000000000000018:word64]
	word64 r14_117
	*r14Out = Mem0[rsp_105 + 0x0000000000000020:word64]
	word64 rsp_119
	*rspOut = rsp_105 + 0x0000000000000028
	return rax_75
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r15:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

fn0000000000406A80_exit:
// DataOut: r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r15:<invalid> r11:<invalid> ax:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> ebx:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> sil:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14



word64 fn0000000000406B70(word64 rbp, word64 rdi, word64 r11, word32 r14d, word32 r15d, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r11d r14d r15d rbp rdi
// LiveOut: r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406B70_entry:
// DataOut: fs r11 r11d r14d r15d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = r15
	rsp = fp - 0x0000000000000008
	dwLoc08 = r14
	rsp = fp - 0x000000000000000C
	dwLoc0C = r13
	rsp = fp - 0x0000000000000010
	dwLoc10 = r12
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012D0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r11d rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x0000000000001290
	rcx = 0x0000000000003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc1290 = al
	rax = 0x000000003F3F3F3F
	qwLoc128F = 0x000000003F3F3F3F
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc1285 = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BA4:
	r13 = fp - 0x0000000000001290
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x0000000000001290
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407138:
	bLoc1286 = 0x2E
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc1286 = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r11d r13 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E6D:
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):0x2B -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC2:
	bLoc1286 = 0x00
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r11d r13 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E70
	rbp = fp - 0x0000000000000E70
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r9 = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r11d r13 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r9:0x0000000000413764 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407078:
	rsi = fp - 0x0000000000001260
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	r9 = rax
// DataOut: fs r11 r11d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r9:0x0000000000413764 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407085:
	r12 = fp - 0x0000000000000E70
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E70
	eax = __sprintf_chk(fp - 0x0000000000000E70, 0x0000000000000001, 0x0000000000000E3B, 0x0000000000413779)
	rdx = fp - 0x0000000000000E70
// DataOut: fs r11 r11d r12 r13 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r11d r12 r13 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r9:<invalid> r8:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r11d r12 r13 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r9:<invalid> r8:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r11d r12 r13 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r11d r12 r13 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8_1:
	rbp = rdx
// DataOut: al fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r14 = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001260
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, qwLoc12D8, qwLoc12D0, qwLoc12C8, out rsp, out rbp, out r8, out r9, out r10, out r11, out r12b, out r13, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x0000000000413764 r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r11d r12 r13 r14 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r8:<invalid> r9:<invalid> al:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r11d r12 r13 r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r11d r12 r13 r14 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r11d r12 r13 r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r11d r12 r13 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> r9:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	rax = fn000000000040CD70(rsi, rdi, out rsi)
// DataOut: fs r11 r11d r12 r13 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:0x0000000000413764 r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413769)
	rdi = rbp
	eax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407155:
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406D01:
// DataOut: fs r11 r11d r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	eax = fputs_unlocked(rdi, rsi)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	rsp = fn00000000004057B0(dl, rsi, edi, r8, fs, out rbp, out r12)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r11d r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r11d r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rax, rsi, edi, r8, out rsp, out rbp, out r12)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r11d r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407238:
	rsp = fn0000000000405700(edx, rdi, fs, out rbp, out r12)
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r11d r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	rsp = fn00000000004057B0(dl, rsi, edi, r8, fs, out rbp, out r12)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rsp = fn0000000000405700(edx, rdi, fs, out rbp, out r12)
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F60:
	r14 = 0x0000000000413764
// DataOut: fs r11 r11d r14
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	r13 = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15b r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r11d r12 r14 r14d r15 r15b r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = rbp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413774)
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, qwLoc08, qwArg00, qwArg08, out rsp, out rbp, out r8, out r9, out r10, out r11, out r12b, out r13, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: ecx edi fs r11d r13 r14 r15 r15b rax rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: ecx edi fs r11d r13 r14 r15 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: ecx edi fs r11d r13 r14 r15 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rsp = fn000000000040AB30(rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r11d r13 r14 r15 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r11d r13 r14 r15 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r11d r13 r14 r15 r15b r8d rax rdx rsi
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040727C:
// DataOut: ecx fs r11d r13 r14 r15 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15 r15b r8d rax
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15 r15b r8d rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x01 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r11d r13 r14 r15 r15b rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15, fs, out rsp, out rbp, out r8, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi)
	r9 = rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F7F:
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F80:
	r9 = 0x0000000000413764
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15, fs, out rsp, out rbp, out r8, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r12 r13 r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	rax = fn000000000040D240(edx, rsi, rdi, fs, qwLoc08, qwArg00, qwArg08, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r11 r12 r13 r15 r8d rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413779)
	rdi = r13
	eax = strlen(rdi)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	rdi = r12
	eax = fputs_unlocked(rdi, rsi)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v39 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	call fwrite_unlocked (retsize: 8; depth: 8)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040745A:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rax = (uint64) (eax | r8d)
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
// DataOut: al dl fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
// DataOut: al dl fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004074B4:
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rdx rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004074B8:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004074C4:
	rax = 0x0000000000000001
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004074A5:
	rsi = rdx
	rdi = rax
	eax = strcmp(rdi, rsi)
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000406B70_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: r11 r11d r12 r13 r14 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r8b:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):0x000000003F3F3F3F -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)



void fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407870_entry:
// DataOut: fs r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407870:
	fn0000000000406A30()
	word64 rbp_168 = rsi
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040797E:
	word64 rdi_223 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_223 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407987:
	word64 rsi_230
	fn000000000040CD70(fp - 0x00000000000002B0, rdi_223, out rsi_230)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A0_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A7:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079C0:
	word64 rsp_190
	word64 r8_192
	word64 r9_193
	word64 r10_194
	byte r12b_196
	word64 r13_197
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, qwLoc02B8, qwLoc02B0, qwLoc02A8, out rsp_190, out rbp_168, out r8_192, out r9_193, out r10_194, out r11, out r12b_196, out r13_197, out r15)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078CD_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078D4:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> al:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078F9_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407900:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407911:
	word64 rbp_80
	word64 rsi_81
	word64 rdi_82
	word64 r8_83
	word64 r11_84
	word64 r12_85
	word64 r13_86
	word64 r14_87
	word64 r15_88
	word64 rsp_107
	word64 rbx_89 = fn0000000000406540(rbp_168, 0x0000000000000000, 0x00, rdi, r11, r15, fs, out rsp_107, out rbp_80, out rsi_81, out rdi_82, out r8_83, out r11_84, out r12_85, out r13_86, out r14_87, out r15_88)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040792D:
	word64 rsi_135
	word64 rdi_136
	fn0000000000405D00((word32) (uint64) Mem0[rbx_89 + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rbx_89 + 0x0000000000000028:word32], (byte) (word32) Mem0[rbx_89 + 0x00000000000000B0:byte], out rsp_107, out rsi_135, out rdi_136)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> eax:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> al:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407948:
	branch (Mem0[rsp_107 + 0x0000000000000298:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004079E6
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079EB_thunk_fn00000000004079F0:
	word64 rsp_125
	fn00000000004079F0(out rsp_125)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407962:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000407870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word32 fn00000000004079F0(ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax rsp
// Trashed: SCZO ah al ax eax esp rax rsp sp spl
// Preserved:
fn00000000004079F0_entry:
// DataOut: bpl eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	word64 rsp_1
	*rspOut = fp
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut: bpl eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407A46:
	return eax
// DataOut: bpl eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004079F9:
	word64 rax_43 = (uint64) Mem0[0x000000000061B150:word32]
	word64 rsp_45
	byte SCZO_46
	byte CZ_47
	word64 r15_48
	word64 r14_49
	word64 r13_50
	word64 r12_51
	word64 rbp_52
	word64 rbx_53
	word32 eax_54
	word64 rax_55
	call Mem0[rax_43 * 0x0000000000000008 + 0x00412308:word32] (retsize: 4; depth: 84)
		uses: CZ_4,dwLoc04_25,dwLoc08_28,dwLoc0C_31,dwLoc10_34,dwLoc14_37,dwLoc18_40,eax_44,r12,r13,r14,r15,rax_43,rbp,rbx,rsp_41,SCZO_42
		defs: CZ_47,eax_54,r12_51,r13_50,r14_49,r15_48,rax_55,rbp_52,rbx_53,rsp_45,SCZO_46
	return eax_54
// DataOut: bpl eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn00000000004079F0_exit:
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn0000000000407EA0(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r10, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi edx esi fs r10 r11 r14 r15 r8 rbp rcx rdi rsi
// LiveOut: bpl ebx r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407EA0_entry:
// DataOut: edi edx esi fs r10 r11 r12 r12b r12d r14 r15 r8 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = fp - 0x0000000000000004
	rsp = fp - 0x0000000000000008
	dwLoc08 = r15
	rsp = fp - 0x000000000000000C
	dwLoc0C = r14
	rsp = fp - 0x0000000000000010
	dwLoc10 = r13
	r13 = (uint64) esi
	rsp = fp - 0x0000000000000014
	dwLoc14 = r12
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000390
	dwLoc0388 = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc3C = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: bpl cl ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 r9b rbp rbx rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408400:
	rax = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - 0x00000000AAAAAAAA)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: bpl ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0394 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out rsp, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0394
// DataOut: cl fs r10 r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x00000000AAAAAAAA rcx:<invalid> r9:<invalid> rdi:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A18:
	Mem0[0x00000000000000C0:byte] = 0x00
	rdi = 0x00000000000000C1
	sil = 0xBF
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089F9:
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408374:
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408355:
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F46:
	SCZO = cond(bLoc0388 - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0394 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l000000000040893D:
	rdi = 0x0000000000000012
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408956:
	rdi = 0x0000000000000014
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040896F:
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040827E:
// DataOut: al eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0394 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408317:
	rdi = 0x0000000000000015
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408330:
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: eax ecx esi fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F74:
	r15d = (word32) Mem0[r10:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: eax ecx esi fs r10 r11 r13 r13d r14 r15b r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408670:
	rdi = rbx
	dwLoc0398 = ecx
	dwLoc038C = esi
	qwLoc0394 = rdx
	eax = strlen(rdi)
	rdx = qwLoc0394
	r12 = rax
	rdi = rdx
	eax = strlen(rdi)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0394
	rsi = (uint64) dwLoc038C
	rcx = (uint64) dwLoc0398
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = rsp - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B3A:
// DataOut: ecx fs r10 r11 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r10 r11 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rax rbp rbx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rax rbp rbx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r10 r11 r13 r13d r14 r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407FF0:
	SCZO = cond(bLoc0388 - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0394 = ecx
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rcx = (uint64) dwLoc0394
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B5E:
	dwLoc0394 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0394
	al = Test(EQ,Z)
// DataOut: al eax edx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E8:
	rax = (uint64) Mem0[0x0000000000000029:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al eax edx fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408906:
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: eax fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	call __lxstat (retsize: 8; depth: 8)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: edx esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040802B:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc038C = esi
	dwLoc0394 = edx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0394
	rsi = (uint64) dwLoc038C
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(64) Local -0394(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(64) Local -0394(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc038C
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083C8:
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc038C
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0394 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r10 r11 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0394(64)

l0000000000408458:
	eax = fn0000000000411840(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408080:
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040846B:
	dwLoc0394 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0394
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004089C9:
// DataOut: eax edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: edx fs r10 r11 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r10 r11 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r10 r11 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r10 r11 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r10 r11 r13 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B40:
	dwLoc0394 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
// DataOut: cl edx fs r10 r11 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408841:
	dwLoc038C = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0394 = rax
	rax = fn0000000000409CC0(rsi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	rdx = (uint64) dwLoc038C
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r10 r11 r13b r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040887E:
	rdx = (uint64) Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r10 r11 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r10 r11 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r10 r11 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl edx fs r10 r11 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: edx fs r10 r11 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl edx fs r10 r11 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r10 r11 r13b r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r10 r11 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:Test(NE,Z) cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax edx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D9:
	v45 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v45
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(r11, r14, r15, fs, out rsp, out rbp, out r8, out r9, out r10, out r11, out r12b, out r13, out r14, out r15)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rcx = r13
	rdx = 0x0000000000415E54
	call error (retsize: 8; depth: 8)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004084F6:
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080EF:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, qwLoc08, qwArg00, qwArg08, out rbp, out rsi, out r12, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	eax = fn0000000000405810(edi, r11, r14, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0A:
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	r13 = rax
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, qwLoc08, out rbp, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B98:
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	r13 = rax
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408557:
	eax = strlen(rdi)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi, out rsp)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	call stpncpy (retsize: 8; depth: 8)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B8D:
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	rdi = 0x0000000000000001
	call __xstat (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085FC:
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	rcx = 0x0000000000000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, qwLoc08, qwArg00, qwArg08, out rsp, out rbp, out r8, out r9, out r10, out r11, out r12b, out r13, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r10 r11 r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: fs r10 r11 r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B10:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rbx, rbp, rsi, edi, r8, r12d, r13d, r14, fs, out rsp, out rbp, out rsi, out r8, out r9, out r10, out r11, out r12, out r13d, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:0x00000000FFFFFFFF r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rax, rsi, edi, r8, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BC7_1:
	edx = eax
// DataOut: edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BCA:
// DataOut: edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = r15
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rdx = r15
// DataOut: fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AE8_1:
	rdx = rcx
// DataOut: al edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: edx fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: fs r10 r11 r12 r12b r12d r13d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A70:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rbx, rbp, rsi, edi, r8, r12d, r13d, r14, fs, out rsp, out rbp, out rsi, out r8, out r9, out r10, out r11, out r12, out r13d, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r10 r11 r12 r12b r12d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: fs r10 r11 r12 r12b r12d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:0x00000000FFFFFFFF r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408765:
	rax = (uint64) Mem0[0xFFFFFFFFCCCCCCF5:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A30:
	rdi = Mem0[0xFFFFFFFFCCCCCD0D:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, qwLoc08, qwArg00, qwArg08, out rsp, out rbp, out r8, out r9, out r10, out r11, out r12b, out r13, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408A68:
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408779:
	rax = Mem0[0xFFFFFFFFCCCCCD05:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004087BA:
	rax = Mem0[0xFFFFFFFFCCCCCD05:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	eax = fn0000000000405810(edi, r11, r14, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: bpl ebp fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000407FE4:
// DataOut: fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	v42 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v42
	SCZO = cond(v42)
	Mem0[rsi:word64] = rax
// DataOut: bpl ebp fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r10:<invalid> edx:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: bpl ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut: bpl ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al bpl dl ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rdi:<invalid> rsi:<invalid> r14:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al bpl dl ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CEC:
// DataOut: bpl ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: bpl dl ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: bpl ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: bpl eax ebp ebx edx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: bpl ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: bpl eax ebp ebx edx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return rax
// DataOut: bpl ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: bpl ebp ebx edx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return rax
// DataOut: bpl ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut: ebp ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000405020:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	call strcoll (retsize: 8; depth: 8)
	return rax
// DataOut: bpl ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000408CBC:
	return rax
// DataOut: bpl ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: bpl ebx fs r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

fn0000000000407EA0_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r10 (=> r10Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: bpl ebx r10 r11 r12 r12b r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r9:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):r12 -16(fp):r13 -12(fp):r14 -8(fp):r15 -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word64 rbx_10 = (uint64) edi
	word32 ebx_11 = (word32) rbx_10
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005))
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rsi_263
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_263)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005))
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005))
	word64 rbp_283 = Mem0[0x000000000061A610:word64]
	word32 eax_290 = fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005), rbp_283)
	word64 rsp_296
	word64 rbp_297
	word32 edx_298
	word64 rdx_299
	word64 rbx_300
	word32 edi_302
	byte SCZO_303
	byte SZO_304
	byte C_305
	byte Z_306
	word32 esi_307
	word64 rsi_308
	word64 rdi_309
	word64 rax_310
	word64 rcx_311
	word32 eax_312
	word32 ecx_313
	call setlocale (retsize: 8; depth: 24)
		uses: C_294,dwLoc04_4,dwLoc08_8,eax_290,ebx_11,ecx,edi_254,edx,esi,rax_291,rbp_283,rbx_10,rcx_278,rdi_295,rdx_284,rsi_292,rsp_12,SCZO,SZO_293,Z_14
		defs: C_305,eax_312,ebx_301,ecx_313,edi_302,edx_298,esi_307,rax_310,rbp_297,rbx_300,rcx_311,rdi_309,rdx_299,rsi_308,rsp_296,SCZO_303,SZO_304,Z_306
	branch rax_310 == 0x0000000000000000 l0000000000409BC8
// DataOut: ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BB2:
	branch strncmp(rax_310, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BFF:
	word64 rsi_341
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_341)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> eax:<invalid> rcx:<invalid> edx:0x00000003 ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BC8:
	word64 rsi_319
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_319)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409768:
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000409CC0(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r10 r11 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	word64 rax_6 = (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000)
	word32 eax_7 = (word32) rax_6
	branch eax_7 == 0x0000A000 l0000000000409D10
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x0000000000000000
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CCF:
	word64 rsp_26
	word32 eax_27
	word64 rsi_28
	byte SZO_30
	byte C_31
	byte SCZO_32
	byte Z_33
	byte S_34
	byte al_35
	word64 rax_29
	call acl_extended_file (retsize: 8; depth: 16)
		uses: al_8,C,eax_7,rax_6,rsi,rsp_21,S,SCZO_22,SZO,Z_10
		defs: al_35,C_31,eax_27,rax_29,rsi_28,rsp_26,S_34,SCZO_32,SZO_30,Z_33
	branch eax_27 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CE8:
	word32 eax_48 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_48 == 0x0000005F l0000000000409D18
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_48 == 0x00000026 l0000000000409D18
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_48 == 0x00000016 l0000000000409D18
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return 0x0000000000000000
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

l0000000000409CFE:
	rax_29 = (uint64) -(word32) (eax_48 != 0x00000010)
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return rax_29
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> al:<invalid> eax:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> al:<invalid> eax:<invalid>



word64 fn0000000000409D20(word64 rsi, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: r12 r14 r15 rax rbp rsi
// Trashed: SCZO ah al ax bp bpl dh di dil dl dx eax ebp edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0008(64) Stack +0010(64)
fn0000000000409D20_entry:
	*rsiOut = rsi
// DataOut: fs r10 r11 r12 r14 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0008(64) Stack +0010(64)

l0000000000409D20:
	word64 rbx_191 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r10 r11 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409D55_1:
	rbx_191 = rsi + 0x0000000000000001
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409D59:
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409D60:
	branch malloc(rbx_191) == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r10 r11 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409D70:
	word64 rsp_146
	word64 r15_147
	word64 rsi_148
	word64 rax_149
	word64 r14_150
	word64 r13_151
	word64 rdi_152
	word64 r12_153
	word64 rbp_154
	word64 rbx_155
	word32 ebx_156
	byte SCZO_157
	byte CZ_158
	byte SZO_159
	byte C_160
	byte Z_161
	word64 rdx_162
	byte S_163
	word32 eax_164
	word32 edx_165
	call readlink (retsize: 8; depth: 56)
		uses: C_55,CZ_41,dwLoc04_4,dwLoc08_11,dwLoc0C_15,dwLoc10_20,dwLoc14_23,dwLoc18_26,dwLoc24,eax_52,ebx_42,edx_40,qwLoc08,qwLoc10,qwLoc18,qwLoc30,r12_45,r13_142,r14_47,r15_48,rax_140,rbp_56,rbx_141,rdi_145,rdx_143,rsi_144,rsp_49,S_38,SCZO_43,SZO_53,Z_54
		defs: C_160,CZ_158,eax_164,ebx_156,edx_165,r12_153,r13_151,r14_150,r15_147,rax_149,rbp_154,rbx_155,rdi_152,rdx_162,rsi_148,rsp_146,S_163,SCZO_157,SZO_159,Z_161
	branch rax_149 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409DD8:
	word64 rax_229 = __errno_location()
	word32 edx_233 = (word32) (uint64) Mem0[rax_229:word32]
	branch edx_233 == 0x00000022 l0000000000409D86
// DataOut: edx fs r10 r11 r12 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409DE4:
	free(rbp_154)
	Mem242[rax_229:word32] = (word32) (uint64) edx_233
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409D86:
	branch rbx_155 >u rax_149 l0000000000409E08
// DataOut: fs r10 r11 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409E08:
	Mem212[rbp_154:byte] = 0x00
	return rbp_154
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000409D8B:
	free(rbp_154)
	branch rbx_155 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409DC0:
	branch rbx_155 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r10 r11 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409E20:
	Mem194[__errno_location():word32] = 0x0000000C
	return 0x0000000000000000
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000409DC5:
	rbx_191 = 0x00000000FFFFFFFF
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409D98:
	branch malloc(rbx_155 * 0x0000000000000002) != 0x0000000000000000 l0000000000409D70
// DataOut: fs r10 r11 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409DAB:
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(64) Stack +0010(64)

l0000000000409DAD:
	return 0x0000000000000000
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000409D20_exit:
// DataOut: r12 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000018 rax:<invalid> r15:<invalid> r14:<invalid> r13:SLICE(r15, word64, 32) rbx:rbx rdi:<invalid> rbp:r12 r12:r14 rdx:<invalid> rsi:<invalid> -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn0000000000409E50(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx rdi rdx rsi
// LiveOut: al eax ebp r12 r14 r14b r15 rax rbp rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0008(64) Stack +0010(64)
fn0000000000409E50_entry:
// DataOut: ebx fs r10 r11 r12d r14 r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0008(64) Stack +0010(64)

l0000000000409E50:
	word64 qwLoc38_106
	word64 rax_116
	word64 rax_32 = DPB(rax, strlen(rdi), 0)
	word64 rbp_137 = rdx
	word64 r14_138 = Mem0[rsi:word64]
	branch r14_138 == 0x0000000000000000 l0000000000409F72
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409F72:
	qwLoc38_106 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0038(64) Stack +0008(64) Stack +0010(64)

l0000000000409E81:
	byte bLoc29_119 = 0x00
	qwLoc38_106 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_121 = 0x0000000000000000
	rax_133 = rax_32
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409EE8:
	word64 rax_133
	branch strncmp(r14_138, rdi, rax_32) != 0x00000000 l0000000000409ED8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409EFB:
	rax_133 = DPB(rax_133, strlen(r14_138), 0) (alias)
	branch rax_133 == rax_32 l0000000000409F60
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409F60:
	return rbx_121
// DataOut: al eax ebp ebx fs r10 r11 r12 r14 r14b r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000409F08:
	branch qwLoc38_106 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409EA0:
	rax_133 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409F50:
	bLoc29_119 = 0x01
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409EAE:
	byte cl_209 = (byte) (word32) bLoc29_119
	rax_133 = 0x0000000000000001
	branch memcmp(qwLoc38_106 *s rcx + rdx, rbp_137, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409ED1_1:
	cl_209 = 0x01 (alias)
// DataOut: cl fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409ED4:
	bLoc29_119 = cl_209
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409ED8:
	rbx_121 = rbx_121 + 0x0000000000000001
	rbp_137 = rbp_137 + rcx
	r14_138 = Mem0[rsi + rbx_121 * 0x0000000000000008:word64]
	branch r14_138 == 0x0000000000000000 l0000000000409F28
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409F10:
	rbx_121 = rbx_121 + 0x0000000000000001
	qwLoc38_106 = rbx_121
	rbp_137 = rbp_137 + rcx
	r14_138 = Mem0[rsi + rbx_121 * 0x0000000000000008:word64]
	branch r14_138 != 0x0000000000000000 l0000000000409EE8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64) Stack +0008(64) Stack +0010(64)

l0000000000409F25:
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0029(0) Local -0038(64) Stack +0008(64) Stack +0010(64)

l0000000000409F28:
	rax_116 = 0xFFFFFFFFFFFFFFFE
	branch bLoc29_119 != 0x00 l0000000000409F3B
// DataOut: al eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Local -0038(64) Stack +0008(64) Stack +0010(64)

l0000000000409F36:
	rax_116 = qwLoc38_106
// DataOut: al eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:0xFFFFFFFFFFFFFFFE ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(32) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000409F3B:
	return rax_116
// DataOut: al eax ebp ebx fs r10 r11 r12 r14 r14b r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000409E50_exit:
// DataOut: al eax ebp r12 r14 r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000018 r15:<invalid> r12:r14 rbp:r12 eax:<invalid> r14:<invalid> rax:<invalid> rbx:rbx r13:SLICE(r15, word64, 32) rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn0000000000409F80(word64 rdx, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14 r15 rdx
// LiveOut: r10 r11 r15 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: fs r11 r14 r15 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000409F95:
	dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000409FA4:
	word64 r14_28
	word64 r15_29
	word64 r11_30 = fn000000000040EBF0(0x00000001, r11, r14, r15, fs, out r14_28, out r15_29)
	word64 r9_39
	word64 r10_40
	word64 r11_41
	word64 r15_42
	fn000000000040E970(0x00000006, 0x00000000, r11_30, r14_28, r15_29, fs, out r9_39, out r10_40, out r11_41, out r15_42)
	word64 rsp_59
	word64 r12_60
	word64 rdx_61
	byte SCZO_62
	word32 edx_63
	word64 rbp_64
	word64 rdi_65
	word64 rbx_66
	word64 rsi_67
	byte Z_68
	word32 esi_69
	word32 edi_70
	byte SZO_71
	byte C_72
	word64 rax_73
	word64 r8_74
	word64 rcx_75
	word32 eax_76
	word64 r11_77
	word64 r14_78
	word64 r15_79
	selector fs_80
	word64 r9_81
	word64 r10_82
	call error (retsize: 8; depth: 8)
		uses: C_58,dwLoc04_4,dwLoc08_11,dwLoc0C_16,edi_35,esi_33,fs,r10_40,r11_41,r12_52,r14_28,r15_42,r8_47,r9_39,rax_56,rbp_50,rbx_45,rcx_49,rdi_55,rdx_48,rsi_54,rsp_53,SCZO_6,SZO_57,Z_7
		defs: C_72,eax_76,edi_70,edx_63,esi_69,fs_80,r10_82,r11_77,r12_60,r14_78,r15_79,r8_74,r9_81,rax_73,rbp_64,rbx_66,rcx_75,rdi_65,rdx_61,rsi_67,rsp_59,SCZO_62,SZO_71,Z_68
	return rbx_66
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn0000000000409F80_exit:
// DataOut: r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005), Mem0[0x000000000061A650:word64])
	word64 r15_180 = rdi
	word64 r14_11 = 0x0000000000000000
	word64 r13_17 = rdx
	word64 rbp_176 = rsi
	word64 rbx_175 = 0x0000000000000000
	branch Mem0[rdi:word64] != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_175 == 0x0000000000000000 l000000000040A050
// DataOut: fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A08B:
	branch memcmp(r14_11, rbp_176, r13_17) != 0x00000000 l000000000040A050
// DataOut: fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A050:
	word64 rbp_191
	word64 r8_192
	word64 r9_193
	word64 r10_194
	word64 r12_196
	fn000000000040EC10(r11, rbp_176, r15_180, fs, out rbx_175, out rbp_191, out r8_192, out r9_193, out r10_194, out r11, out r12_196, out r13_17, out r14_11, out r15_180)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E4A)
	rbp_176 = rbp_191 + r13_17
	branch Mem0[r15_180 + rbx_175 * 0x0000000000000008:word64] == 0x0000000000000000 l000000000040A0D0
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A09D:
	word64 r8_226
	word64 r9_227
	word64 r10_228
	word64 r12_230
	fn000000000040EC10(r11, r14_11, r15_180, fs, out rbx_175, out rbp_176, out r8_226, out r9_227, out r10_228, out r11, out r12_230, out r13_17, out r14_11, out r15_180)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E52)
	branch Mem0[r15_180 + rbx_175 * 0x0000000000000008:word64] != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A0D0:
	word64 rdi_67 = Mem0[0x000000000061A650:word64]
	word64 rax_69 = Mem0[rdi_67 + 0x0000000000000028:word64]
	branch rax_69 >=u Mem0[rdi_67 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A0FB:
	word64 rsp_135
	word64 r15_136
	word64 rdi_137
	word32 edi_138
	byte SZO_139
	byte C_140
	word64 r14_141
	word32 r14d_142
	word64 r13_143
	word64 rdx_144
	word32 edx_145
	word64 r12_146
	word64 rbp_147
	word64 rsi_148
	word32 esi_149
	word64 rbx_150
	byte SCZO_151
	word64 rax_152
	word32 ebx_153
	word32 eax_154
	byte Z_155
	word64 rcx_156
	word64 r11_157
	selector fs_158
	word64 r8_159
	word64 r9_160
	word64 r10_161
	call __overflow (retsize: 8; depth: 8)
		uses: C_72,dwLoc04_4,dwLoc08_10,dwLoc0C_15,dwLoc10_21,dwLoc14_24,dwLoc18_30,eax_70,ebx_56,edi_68,edx,esi,fs,r10_50,r11_53,r12_127,r13_129,r14_131,r14d_58,r15_133,r8_52,r9_51,rax_69,rbp_125,rbx_123,rcx_54,rdi_67,rdx_60,rsi_122,rsp_134,SCZO_121,SZO_59,Z_55
		defs: C_140,eax_154,ebx_153,edi_138,edx_145,esi_149,fs_158,r10_161,r11_157,r12_146,r13_143,r14_141,r14d_142,r15_136,r8_159,r9_160,rax_152,rbp_147,rbx_150,rcx_156,rdi_137,rdx_144,rsi_148,rsp_135,SCZO_151,SZO_139,Z_155
	return rsp_135
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A0E1:
	Mem101[rdi_67 + 0x0000000000000028:word64] = rax_69 + 0x0000000000000001
	Mem102[rax_69:byte] = 0x0A
	return fp + 0x0000000000000018
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040A000_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



void fn000000000040A120(word64 rcx, word64 rdx, word64 rbx, word64 rbp, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rbp rbx rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A120_entry:
// DataOut: fs r11 r8 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 qwLoc18_33 = DPB(qwLoc18, rbx, 0)
	word64 rsp_42
	word64 rbp_43
	word64 r12_44
	word64 r14_45
	word64 r15_46
	word64 rax_47 = fn0000000000409E50(r8, rcx, rdx, rsi, qwLoc28, qwLoc20, qwLoc18_33, out rsp_42, out rbp_43, out r12_44, out r14_45, out r15_46)
	branch rax_47 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r14 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word64 rsp_88
	word64 rbp_89
	word64 r9_90
	word64 r10_91
	word64 r11_92
	word64 r15_93
	word64 rbx_94 = fn0000000000409F80(rax_47, r11, r14_45, r15_46, fs, out rsp_88, out rbp_89, out r9_90, out r10_91, out r11_92, out r15_93)
	word64 rsp_98 = fn000000000040A000(r15_93, rbp_89, rbx_94, r11_92, fs)
	word64 rsp_99
	word64 r15_100
	word64 r8_101
	word64 r14_102
	word64 rdi_103
	word64 r13_104
	word64 r9_105
	word64 r12_106
	word64 rsi_107
	word64 rbp_108
	word64 rcx_109
	word64 rbx_110
	word64 rdx_111
	byte SCZO_112
	word64 rax_113
	byte SZO_114
	byte C_115
	byte S_116
	word32 r13d_117
	word64 r11_118
	selector fs_119
	word64 r10_120
	call r13d (retsize: 4; depth: 4)
		uses: C_50,dwLoc04_4,dwLoc08_9,dwLoc0C_14,dwLoc10_19,dwLoc14_25,dwLoc18_31,fs,qwLoc18_33,qwLoc20,qwLoc28,r10_91,r11_92,r12_44,r13_16,r13d,r14_45,r15_93,r8,r9_90,rax_47,rbp_89,rbx_94,rcx_28,rdi_97,rdx_95,rsi_96,rsp_98,S_49,SCZO_39,SZO_48
		defs: C_115,fs_119,r10_120,r11_118,r12_106,r13_104,r13d_117,r14_102,r15_100,r8_101,r9_105,rax_113,rbp_108,rbx_110,rcx_109,rdi_103,rdx_111,rsi_107,rsp_99,S_116,SCZO_112,SZO_114
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> ecx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040A2B0(word64 rdi, word64 qwArg00, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rbp rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esi esp rax rbp rcx rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn000000000040A2B0_entry:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2E0:
	word64 rax_55 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2EB:
	rdx_27 = rax_55
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2DC:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2F3:
	word64 rbp_35
	*rbpOut = qwArg00
	return rdx_27
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh dl dx eax edx esp rax rdx rsp sp spl
// Preserved: rbx
fn000000000040A400_entry:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_25 = DPB(rax, strlen(rdi), 0)
	branch rax_25 <=u 0x0000000000000001 l000000000040A41A
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A40F:
	word64 rdx_35 = rax_25 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_25:byte] == 0x2F l000000000040A420
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A420:
	rax_25 = rdx_35
	branch rdx_35 != 0x0000000000000001 l000000000040A40F
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A429:
	return rdx_35
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx

l000000000040A41A:
	return rax_25
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx

fn000000000040A400_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r11d r13 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r11d r13 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r11d r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r11d r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & rbpOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: fs r10 r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsp_8
	word64 rbp_9
	word64 rsi_10
	word64 rdi_11
	word32 r14d_12
	word64 rax_13 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsp_8, out rbp_9, out rsi_10, out rdi_11, out r14d_12)
	branch rax_13 == 0x0000000000000000 l000000000040A623
// DataOut: fs r10 r11 r14d r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: fs r10 r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_29
	word64 rsp_30
	word64 rbp_31
	word64 rsi_32
	word64 rdi_33
	word32 r14d_34
	return fn000000000040A630(rdx_7, rsi_10, rdi_11, out rdx_29, out rsp_30, out rbp_31, out rsi_32, out rdi_33, out r14d_34)
// DataOut: fs r10 r11 r14d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_13
// DataOut: fs r10 r11 r14d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp rdi rdx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A630_entry:
// DataOut: fs r10 r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_31
	word64 rax_32 = fn000000000040A390(rdi, out rsi_31)
	word64 rsp_35
	word64 rax_36 = fn000000000040A400(rax_32, out rsp_35)
	word64 rdx_40 = rax_32 - rdi
	*rdxOut = rdx_40
	word64 rsi_44 = rdx_40 + rax_36
	*rsiOut = rsi_44
	Mem45[rsp_35:word64] = rsi_44
	word64 r14_10 = 0x0000000000000000
	branch rax_36 == 0x0000000000000000 l000000000040A679
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A66D:
	r14_10 = (uint64) (Mem45[rax_32 - 0x0000000000000001 + rax_36:byte] != 0x2F) (alias)
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A679:
	word64 rbx_133 = rsi + 0x0000000000000001
	branch Mem45[rsi:byte] == 0x2F l000000000040A700
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A700:
	rbx_133 = rbx_133 + 0x0000000000000000
	branch Mem45[rbx_133:byte] != 0x2F l000000000040A682
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A70D:
	rbx_133 = rbx_133 + 0x0000000000000001
	branch Mem45[rbx_133 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A71A:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A682:
	word64 rax_116
	word64 rax_56 = DPB(rax_36, strlen(rbx_133), 0)
	word64 rcx_57 = Mem45[rsp_35:word64]
	Mem58[rsp_35 + 0x0000000000000008:word64] = rax_56
	word64 rdi_60 = rcx_57 + 0x0000000000000001 + r14_10 + rax_56
	*rdiOut = rdi_60
	word64 rax_61 = malloc(rdi_60)
	branch rax_61 == 0x0000000000000000 l000000000040A720
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A720:
	rax_116 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A6A8:
	word64 rax_103 = mempcpy(rax_61, rdi, Mem58[rsp_35:word64])
	Mem107[rax_103:byte] = 0x2F
	word64 rdi_108 = rax_103 + r14_10
	*rdiOut = rdi_108
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: fs r10 r11 r13 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A6C3:
	Mem127[rdi_108:word64] = rdi_108 - (uint64) (Mem107[rsi:byte] == 0x2F)
// DataOut: fs r10 r11 r13 r8 r9 rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A6D5:
	word64 rdx_112 = Mem107[rsp_35 + 0x0000000000000008:word64]
	*rdxOut = rdx_112
	Mem115[mempcpy(rdi_108, rbx_133, rdx_112):byte] = 0x00
	word64 rsi_113
	*rsiOut = rbx_133
	rax_116 = rax_61
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040A6E8:
	word64 rbp_82
	*rbpOut = Mem58[rsp_35 + 0x0000000000000020:word64]
	word32 r14d_89
	*r14dOut = (word32) Mem58[rsp_35 + 0x0000000000000038:word64]
	word64 rsp_93
	*rspOut = rsp_35 + 0x0000000000000048
	return rax_116
// DataOut: fs r10 r11 r14d r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040A630_exit:
// DataOut: r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040A730(word64 rdi, word32 r14d, ptr64 & rsiOut, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut: r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
	*r9Out = r9
	*rsiOut = rsi
// DataOut: fs r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_125 = Mem0[rdi:word64]
	byte cl_128 = (byte) (word32) Mem0[rdx_125:byte]
	branch cl_128 == 0x00 l000000000040A7CD
// DataOut: cl fs r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return 0x0000000000000000
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_100 = 0x00
	word64 rax_108 = 0x0000000000000000
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_100 != 0x00 l000000000040A750
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A750:
	rsi = (uint64) ((word32) (uint64) ((int32) cl_128 & 0xFFFFFFDF) - 0x00000041)
	*rsiOut = rsi
	r8b_100 = 0x00 (alias)
	branch (word32) rsi <=u 0x00000019 l000000000040A768
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A77B:
	branch cl_128 == 0x2E l000000000040A7B8
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7B8:
	branch rax_108 == 0x0000000000000000 l000000000040A7C8
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7C8:
	rax_108 = rdx_125
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7BD:
	r8b_100 = 0x01 (alias)
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	word32 esi_112 = (int32) cl_128
	*rsiOut = DPB(rsi, esi_112, 0)
	r9 = DPB(r9, r14 - 0x0000000000000030, 0) (alias)
	*r9Out = r9
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl esi fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A78D:
	rsi = (uint64) ((word32) (uint64) (esi_112 & 0xFFFFFFDF) - 0x00000041)
	*rsiOut = rsi
	branch (word32) rsi >u 0x00000019 l000000000040A761
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:(int32) cl r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A761:
	branch cl_128 == 0x7E l000000000040A768
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A764_1:
	rax_108 = 0x0000000000000000
// DataOut: fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A768:
	rdx_125 = rdx_125 + 0x0000000000000001
	Mem92[rdi:word64] = rdx_125
	cl_128 = (byte) (word32) Mem92[rdx_125:byte] (alias)
	branch cl_128 == 0x00 l000000000040A7B0
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A798:
	rdx_125 = rdx_125 + 0x0000000000000001
	Mem126[rdi:word64] = rdx_125
	cl_128 = (byte) (word32) Mem126[rdx_125:byte] (alias)
	branch cl_128 != 0x00 l000000000040A776
// DataOut: cl fs r10 r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7A6:
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7B0:
	return rax_108
// DataOut: fs r12 r13d r14 r15 r15d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

fn000000000040A730_exit:
// DataOut: r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030



word64 fn000000000040AB30(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AB30_entry:
// DataOut: fs r11d r13 r14 r15 r15b rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB30:
	word32 eax_10 = clock_gettime(0x0000000000000000, rdi)
	branch eax_10 == 0x00000000 l000000000040AB67
// DataOut: fs r11d r13 r14 r15 r15b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB46:
	word64 rsp_37
	word64 rbx_38
	word64 rsi_39
	word64 rdi_40
	word32 edi_41
	byte SZO_42
	byte C_43
	byte SCZO_44
	word32 eax_45
	byte Z_46
	word32 esi_47
	word64 rax_48
	call gettimeofday (retsize: 8; depth: 28)
		uses: C_34,dwLoc04_4,eax_10,edi,esi_32,qwLoc04,rax,rbx_7,rdi_35,rsi_31,rsp_9,SCZO,SZO_33,Z_12
		defs: C_43,eax_45,edi_41,esi_47,rax_48,rbx_38,rdi_40,rsi_39,rsp_37,SCZO_44,SZO_42,Z_46
	Mem51[rbx_38:word64] = qwLoc14
	Mem56[rbx_38 + 0x0000000000000008:word64] = qwLoc0C *s 1000
// DataOut: fs r11d r13 r14 r15 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:rdi rbx:rdi rdi:<invalid> eax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return fp + 0x0000000000000004
// DataOut: fs r11d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:<invalid> rbx:rdi rdi:<invalid> eax:<invalid> rax:<invalid> -4(fp):rbx

fn000000000040AB30_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rsi:<invalid> rbx:rbx rdi:<invalid> eax:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040AB70(word64 rax, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax
// LiveOut: al rax rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsp_7
	byte SCZO_8
	word32 esi_9
	word64 rsi_10
	byte SZO_11
	byte C_12
	word64 rax_13
	byte Z_14
	word32 eax_15
	word32 edi_16
	word64 rdi_17
	word32 ecx_18
	word64 rcx_19
	byte al_20
	call setlocale (retsize: 8; depth: 16)
		uses: C_6,esi_4,rsi_3,rsp_2,SZO_5
		defs: al_20,C_12,eax_15,ecx_18,edi_16,esi_9,rax_13,rcx_19,rdi_17,rsi_10,rsp_7,SCZO_8,SZO_11,Z_14
	branch rax_13 == 0x0000000000000000 l000000000040ABB0
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return 0x0000000000000001
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

l000000000040AB80:
	byte Z_42 = cond(Mem0[rax_13:byte] - 0x43)
	branch Mem0[rax_13:byte] != 0x43 l000000000040AB98
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	Z_42 = cond(Mem0[rax_13 + 0x0000000000000001:byte]) (alias)
	branch Mem0[rax_13 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_48
	*rsiOut = rax_13
	word64 rdi_50 = 0x0000000000415E6A
	word64 rcx_52 = 0x0000000000000006
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_52 == 0x0000000000000000 l000000000040ABA7
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	Z_42 = cond(Mem0[rsi_102:byte] - Mem0[rdi_103:byte]) (alias)
	*rsiOut = rsi_102 + 0x0000000000000001
	rdi_50 = rdi_103 + 0x0000000000000001
	rcx_52 = rcx_52 - 0x0000000000000001
	word64 rsi_102 = rsi_48
	word64 rdi_103 = rdi_50
	branch Mem0[rsi_102:byte] != Mem0[rdi_103:byte] l000000000040ABA5
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return DPB(rax_13, Z_42, 0)
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return 0x0000000000000000
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

fn000000000040AB70_exit:
// DataOut: al rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



word64 fn000000000040ABC0(word64 rdi, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: r8 r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
	*rsiOut = rsi
	*r8Out = r8
	*r9Out = r9
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_129
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_129 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_129 = 0x000000000000000B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
	word64 r9_29
	*r9Out = 0x00000000AAAAAAAB
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_102
	branch rdi_129 <=u 0x0000000000000009 l000000000040AC48
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC48:
	rcx_102 = 0x0000000000000003
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABE6:
	word64 rdx_rax_89 = rdi_129 *u 0x00000000AAAAAAAB
	branch rdi_129 == (rdx_rax_89 >>u 0x0000000000000001) + (rdx_rax_89 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABF8:
	word64 r8_103
	*r8Out = 0x0000000000000010
	word64 rsi_101 = 0x0000000000000009
	rcx_102 = 0x0000000000000003
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC21:
	rsi_101 = rsi_101 + r8_103
	*rsiOut = rsi_101
	rcx_102 = rcx_102 + 0x0000000000000002
	branch rsi_101 <u rdi_129 l000000000040AC10
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC10:
	*r8Out = r8_103 + 0x0000000000000008
	branch (uint64) (rdi_129 % rcx_102) == 0x0000000000000000 l000000000040AC3A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_129 % rcx_102) != 0x0000000000000000 l000000000040AC44
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC3A:
	rdi_129 = rdi_129 + 0x0000000000000002
	branch rdi_129 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC44:
	return rdi_129
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

fn000000000040ABC0_exit:
// DataOut: r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rsi rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AC80_entry:
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word32] (retsize: 4; depth: 8)
		uses: dwLoc04_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

l000000000040AC94:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx r11 r8 rax rdi rsi
// LiveOut: r10 r12 r13 r14 r9 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040ACB0_entry:
	*r9Out = r9
	*r10Out = r10
// DataOut: cl ecx fs r10 r11 r15 r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	word64 rsi_29
	word64 rsp_122
	word64 rax_30 = fn000000000040AC80(rax, rdi, out rsp_122, out rsi_29)
	Mem32[rsi_29:word64] = rax_30
	byte r13b_13 = (byte) r13_11
	word64 rbp_149 = rdi
	word64 rsi_114 = Mem32[rax_30:word64]
	*rsiOut = rsi_114
	word64 rbx_148 = rax_30
	branch rsi_114 == 0x0000000000000000 l000000000040AD4F
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ACD7:
	branch rsi == rsi_114 l000000000040ACE9
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040ACDC:
	word64 r14_177
	word64 rdx_178
	word64 r13_179
	word32 r13d_180
	word32 ecx_181
	word64 rsi_183
	word64 rdi_185
	word64 rax_187
	byte SZO_188
	byte C_189
	byte Z_190
	byte SCZO_191
	byte al_192
	word32 esi_193
	word64 r9_195
	word64 r10_197
	word64 rcx_199
	word64 r12_182
	call Mem32[rdi + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_31,C_38,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_26,ecx,esi_34,r10,r11,r12_18,r13_11,r13b_13,r13d_12,r14_6,r8,r9,rax_30,rbp_23,rbx_35,rcx,rdi_175,rdx,rsi_33,rsp_28,SCZO_106,SZO_36,Z_107
		defs: al_192,C_189,ecx_181,esi_193,r10_197,r11_198,r12_182,r13_179,r13b_194,r13d_180,r14_177,r8_196,r9_195,rax_187,rbp_184,rbx_186,rcx_199,rdi_185,rdx_178,rsi_183,rsp_176,SCZO_191,SZO_188,Z_190
	branch al_192 == 0x00 l000000000040AD46
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD46:
	word64 rax_224 = Mem32[rbx_148 + 0x0000000000000008:word64]
	branch rax_224 != 0x0000000000000000 l000000000040AD30
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD30:
	rsi_114 = Mem32[rax_224:word64]
	*rsiOut = rsi_114
	branch rsi_114 == r12_182 l000000000040AD67
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD38:
	word64 r14_279
	word64 rdx_280
	word64 r13_281
	word32 r13d_282
	word32 ecx_283
	word64 rsi_285
	word64 rdi_287
	word64 rax_289
	byte SZO_290
	byte C_291
	byte Z_292
	byte SCZO_293
	byte al_294
	word32 esi_295
	word64 r9_297
	word64 r8_298
	word64 r10_299
	word64 r11_300
	word64 rcx_301
	call Mem32[rbp_149 + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_225,C_228,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_26,ecx_209,esi_230,r10_214,r11_205,r12_218,r13_219,r13b_221,r13d_220,r14_222,r8_206,r9_213,rax_224,rbp_217,rbx_216,rcx_215,rdi_277,rdx_210,rsi_229,rsp_223,SCZO_231,SZO_226,Z_232
		defs: al_294,C_291,ecx_283,esi_295,r10_299,r11_300,r12_284,r13_281,r13b_296,r13d_282,r14_279,r8_298,r9_297,rax_289,rbp_286,rbx_288,rcx_301,rdi_287,rdx_280,rsi_285,rsp_278,SCZO_293,SZO_290,Z_292
	branch al_294 != 0x00 l000000000040AD60
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD60:
	rax_224 = Mem32[rbx_148 + 0x0000000000000008:word64]
	*rsiOut = Mem32[rax_224:word64]
// DataOut: fs r10 r11 r13b r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD67:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD6C:
	Mem258[rbx_148 + 0x0000000000000008:word64] = Mem32[rax_224 + 0x0000000000000008:word64]
	Mem259[rax_224:word64] = 0x0000000000000000
	Mem261[rax_224 + 0x0000000000000008:word64] = Mem259[rbp_149 + 0x0000000000000048:word64]
	Mem262[rbp_149 + 0x0000000000000048:word64] = rax_224
	word64 rsp_266 = rsp_122 + 0x0000000000000008
	word64 rbp_267
	*rbpOut = Mem262[rsp_266:word64]
	word64 r12_269
	*r12Out = Mem262[rsp_266 + 0x0000000000000008:word64]
	word64 r13_271
	*r13Out = Mem262[rsp_266 + 0x0000000000000010:word64]
	word64 r14_275
	*r14Out = Mem262[rsp_266 + 0x0000000000000018:word64]
	word64 rsp_276
	*rspOut = rsp_266 + 0x0000000000000020
	return rsi_114
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD42:
	rbx_148 = Mem32[rbx_148 + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD4F:
	word64 rsp_89 = rsp_122 + 0x0000000000000008
	word64 rbp_90
	*rbpOut = Mem32[rsp_89:word64]
	word64 r12_92
	*r12Out = Mem32[rsp_89 + 0x0000000000000008:word64]
	word64 rsi_94
	*rsiOut = 0x0000000000000000
	word64 r13_98
	*r13Out = Mem32[rsp_89 + 0x0000000000000010:word64]
	word64 r14_104
	*r14Out = Mem32[rsp_89 + 0x0000000000000018:word64]
	word64 rsp_105
	*rspOut = rsp_89 + 0x0000000000000020
	return 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040ACE6:
	*rsiOut = Mem32[rbx_148:word64]
// DataOut: fs r10 r11 r13b r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040ACE9:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r10 r11 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040ACEE:
	word64 rax_161 = Mem32[rbx_148 + 0x0000000000000008:word64]
	branch rax_161 == 0x0000000000000000 l000000000040AD98
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD98:
	Mem174[rbx_148:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040ACFB:
	word64 r9_166 = Mem32[r8:word64]
	*r9Out = r9_166
	word64 r10_167 = Mem32[r8 + 0x0000000000000008:word64]
	*r10Out = r10_167
	Mem168[r11:word64] = r9_166
	Mem169[r11 + 0x0000000000000008:word64] = r10_167
	Mem170[rax_161:word64] = 0x0000000000000000
	Mem172[rax_161 + 0x0000000000000008:word64] = Mem170[rbp_149 + 0x0000000000000048:word64]
	Mem173[rbp_149 + 0x0000000000000048:word64] = rax_161
// DataOut: fs r10 r11 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

l000000000040AD1C:
	word64 rsp_124 = rsp_122 + 0x0000000000000008
	word64 rbp_125
	*rbpOut = Mem32[rsp_124:word64]
	word64 r12_127
	*r12Out = Mem32[rsp_124 + 0x0000000000000008:word64]
	word64 r13_129
	*r13Out = Mem32[rsp_124 + 0x0000000000000010:word64]
	word64 r14_135
	*r14Out = Mem32[rsp_124 + 0x0000000000000018:word64]
	word64 rsp_136
	*rspOut = rsp_124 + 0x0000000000000020
	return rsi_114
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14

fn000000000040ACB0_exit:
// DataOut: r10 r12 r13 r14 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):r12 -8(fp):r13 -4(fp):r14



byte fn000000000040ADB0(word64 rdi, word64 r8, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi xmm0 xmm1 xmm2 xmm3
// LiveOut: al xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax eax rax xmm0 xmm1 xmm2 xmm3
// Preserved: rsp
fn000000000040ADB0_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ADB0:
	word64 rax_4 = Mem0[rdi:word64]
	branch r8 == 0x0000000000415EE0 l000000000040AE30
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE30:
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADBB:
	word128 xmm0_37 = DPB(xmm0, Mem0[rax_4 + 0x0000000000000008:real32], 0)
	*xmm0Out = xmm0_37
	branch Mem0[rax_4 + 0x0000000000000008:real32] <=u Mem0[0x0000000000415EF4:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADC9:
	word128 xmm1_54
	*xmm1Out = DPB(xmm1, Mem0[0x0000000000415EF8:real32], 0)
	branch Mem0[0x0000000000415EF8:real32] <=u xmm0_37 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid>

l000000000040ADD6:
	word128 xmm1_57
	*xmm1Out = DPB(xmm1, Mem0[rax_4 + 0x000000000000000C:real32], 0)
	branch Mem0[rax_4 + 0x000000000000000C:real32] <=u Mem0[0x0000000000415EFC:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADE4:
	word128 xmm1_60
	*xmm1Out = DPB(xmm1, Mem0[rax_4:real32], 0)
	branch Mem0[rax_4:real32] <u Mem0[0x0000000000415F00:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADF1:
	word128 xmm1_64 = DPB(xmm1, Mem0[rax_4:real32] + Mem0[0x0000000000415EF4:real32], 0)
	*xmm1Out = xmm1_64
	word128 xmm2_65 = DPB(xmm2, Mem0[rax_4 + 0x0000000000000004:real32], 0)
	*xmm2Out = xmm2_65
	branch Mem0[rax_4 + 0x0000000000000004:real32] <=u xmm1_64 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040AE03:
	word128 xmm3_68
	*xmm3Out = DPB(xmm3, Mem0[0x0000000000415F04:real32], 0)
	branch Mem0[0x0000000000415F04:real32] <u xmm2_65 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid>

l000000000040AE10:
	branch Mem0[rax_4 + 0x0000000000000008:real32] >u xmm1_64 l000000000040AE35
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE35:
	return 0x01
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE1A:
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE20:
	Mem48[rdi:word64] = 0x0000000000415EE0
	return 0x00
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

fn000000000040ADB0_exit:
// DataOut: al xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>



word64 fn000000000040AE40(word64 rax, word32 edx, word64 rbp, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rbp rdi rsi
// LiveOut: al eax ebp r13 r14 r15 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AE40_entry:
	*rsiOut = rsi
// DataOut: dl edx fs r10 r11 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_8 = (byte) (uint64) edx
	word64 rsp_107 = fp - 0x0000000000000020
	word64 r13_106 = Mem0[rsi:word64]
	branch r13_106 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE64:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AE71:
	word64 rbx_128 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_128 != 0x0000000000000000 l000000000040AE94
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AE94:
	word64 rbp_220 = Mem0[rbx_128:word64]
	word64 rsi_224
	rax = fn000000000040AC80(rax, rdi, out rsp_107, out rsi_224)
	word64 rdx_229 = Mem0[rbx_128 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AE80:
	Mem260[rbx_128 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem261[rax + 0x0000000000000008:word64] = rbx_128
	branch rdx_229 == 0x0000000000000000 l000000000040AED0
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AEAC:
	Mem245[rax:word64] = rbp_220
	Mem247[rdi + 0x0000000000000018:word64] = Mem245[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem251[rbx_128:word64] = 0x0000000000000000
	rax = Mem251[rdi + 0x0000000000000048:word64]
	Mem254[rbx_128 + 0x0000000000000008:word64] = rax
	Mem255[rdi + 0x0000000000000048:word64] = rbx_128
	branch rdx_229 != 0x0000000000000000 l000000000040AE91
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AE91:
	rbx_128 = rdx_229
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AECF:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AED0:
	rbp = Mem0[rbp_220:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AE7A:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AED4:
	Mem146[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF08:
	word64 rsi_150
	rax = fn000000000040AC80(rax, rdi, out rsp_107, out rsi_150)
	branch Mem146[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF5B:
	Mem211[rax:word64] = rbp
	Mem213[rdi + 0x0000000000000018:word64] = Mem211[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF1C:
	rax = Mem146[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF75:
	word64 rbp_199
	*rbpOut = Mem146[rsp_107 + 0x0000000000000010:word64]
	word64 r13_203
	*r13Out = Mem146[rsp_107 + 0x0000000000000020:word64]
	word64 r14_205
	*r14Out = Mem146[rsp_107 + 0x0000000000000028:word64]
	word64 r15_207
	*r15Out = Mem146[rsp_107 + 0x0000000000000030:word64]
	word64 rsp_210
	*rspOut = rsp_107 + 0x0000000000000038
	return 0x0000000000000000
// DataOut: al eax ebp fs r10 r11 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF26:
	Mem185[rdi + 0x0000000000000048:word64] = Mem146[rax + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF2F:
	word64 rdx_180 = Mem146[rax + 0x0000000000000008:word64]
	Mem181[rax:word64] = rbp
	Mem182[rax + 0x0000000000000008:word64] = rdx_180
	Mem183[rax + 0x0000000000000008:word64] = rax
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF3E:
	Mem163[rbp:word64] = 0x0000000000000000
	Mem165[rsi_150 + 0x0000000000000018:word64] = Mem163[rsi_150 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_106 = r13_106 + 0x0000000000000010
	branch Mem165[rsi + 0x0000000000000008:word64] >u r13_106 l000000000040AE68
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AF59:
// DataOut: fs r10 r11 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AEE1:
	r13_106 = r13_106 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_106 l000000000040AE68
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040AEEF:
	word64 rsp_75 = rsp_107 + 0x0000000000000008
	word64 rbp_81
	*rbpOut = Mem0[rsp_75 + 0x0000000000000008:word64]
	word64 r13_85
	*r13Out = Mem0[rsp_75 + 0x0000000000000018:word64]
	word64 r14_87
	*r14Out = Mem0[rsp_75 + 0x0000000000000020:word64]
	word64 r15_89
	*r15Out = Mem0[rsp_75 + 0x0000000000000028:word64]
	word64 rsp_92
	*rspOut = rsp_75 + 0x0000000000000030
	return 0x0000000000000001
// DataOut: al eax ebp fs r10 r11 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040AE40_exit:
// DataOut: al eax ebp r13 r14 r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> r13:<invalid> rax:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: r13 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return Mem0[rdi + 0x0000000000000020:word64]
// DataOut: r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040B400(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r12 r12d r14 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
// Stack args: Stack +0008(64) Stack +0010(64)
fn000000000040B400_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r9Out = r9
// DataOut: ebx fs r10 r11 r12 r14 r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0008(64) Stack +0010(64)

l000000000040B400:
	word64 r15_203 = rdi
	word32 r15d_8 = (word32) rdi
	word64 r13_19 = rdx
	word64 r12_24 = rcx
	word64 rbp_130 = rsi
	branch rdx != 0x0000000000000000 l000000000040B42E
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B42A_1:
	r13_19 = 0x000000000040AC60
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:rdx r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B42E:
	branch rcx != 0x0000000000000000 l000000000040B43A
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B436_1:
	r12_24 = 0x000000000040AC70
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B43A:
	word64 rax_100
	word64 rax_43 = malloc(0x0000000000000050)
	branch rax_43 == 0x0000000000000000 l000000000040B598
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B598:
	rax_100 = 0x0000000000000000
// DataOut: eax fs r10 r11 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B44B:
	branch rsi != 0x0000000000000000 l000000000040B45B
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B457_1:
	rbp_130 = 0x0000000000415EE0
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B45B:
	Mem131[rax_43 + 0x0000000000000028:word64] = rbp_130
	word128 xmm0_136
	word128 xmm1_137
	word128 xmm2_138
	word128 xmm3_139
	branch fn000000000040ADB0(rax_43 + 0x0000000000000028, r8, xmm0, xmm1, xmm2, xmm3, out xmm0_136, out xmm1_137, out xmm2_138, out xmm3_139) == 0x00 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B46C:
	word128 xmm1_181 = DPB(xmm1_137, Mem131[rbp_130 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_181
	branch Mem131[rbp_130 + 0x0000000000000010:byte] != 0x00 l000000000040B4C0
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B477:
	word128 xmm0_244
	branch rdi < 0x0000000000000000 l000000000040B578
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B578:
	r15_203 = (uint64) (r15d_8 & 0x00000001)
	real32 v33_273 = (real32) (rdi >>u 0x0000000000000001 | r15_203)
	xmm0_244 = DPB(xmm0_136, v33_273 + DPB(xmm0_136, v33_273, 0), 0)
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B480:
	xmm0_244 = DPB(xmm0_136, (real32) rdi, 0)
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B485:
	real32 v26_248 = (real32) xmm0_244 / xmm1_181
	word128 xmm0_249
	*xmm0Out = DPB(xmm0_244, v26_248, 0)
	branch v26_248 >=u Mem131[0x0000000000415F08:real32] l000000000040B540
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B496:
	branch v26_248 <u Mem131[0x0000000000415F0C:real32] l000000000040B568
// DataOut: fs r10 r11 r12 r13 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B568:
	r15_203 = DPB(r15_203, v26_248, 0) (alias)
// DataOut: fs r10 r11 r12 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B4A3:
	real32 v28_254 = v26_248 - Mem131[0x0000000000415F0C:real32]
	word128 xmm0_255
	*xmm0Out = DPB(xmm0_244, v28_254, 0)
	r15_203 = DPB(r15_203, v28_254, 0) ^ 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B4C0:
	word64 rsi_206
	word64 r8_207
	word64 r9_208
	word64 rax_209 = fn000000000040ABC0(r15_203, out rsi_206, out r8_207, out r9_208)
	branch rax_209 >u 0x00000000FFFFFFFF l000000000040B540
// DataOut: fs r10 r11 r12 r13 r14 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B540:
	Mem197[rax_43 + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B4DA:
	Mem217[rax_43 + 0x0000000000000010:word64] = rax_209
	branch rax_209 == 0x0000000000000000 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B4E3:
	word64 rax_220 = calloc(rax_209, 0x0000000000000010)
	Mem226[rax_43:word64] = rax_220
	branch rax_220 == 0x0000000000000000 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B548:
	free(rax_43)
	return 0x0000000000000000
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040B4F8:
	Mem228[rax_43 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem229[rax_43 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem232[r11 + 0x0000000000000030:word64] = r13_19
	Mem234[r11 + 0x0000000000000038:word64] = r12_24
	Mem235[rax_43 + 0x0000000000000008:word64] = rax_220 + (rax_209 << 0x0000000000000004)
	Mem236[r11 + 0x0000000000000040:word64] = r8
	Mem240[rax_43 + 0x0000000000000048:word64] = 0x0000000000000000
	rax_100 = rax_43
// DataOut: eax fs r10 r11 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000040B52A:
	return rax_100
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040B400_exit:
// DataOut: eax r12 r12d r14 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000018 rax:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:SLICE(r15, word64, 32) r12:r14 rbp:r12 rbx:rbx xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



void fn000000000040B640(word64 rdi, word64 r13, word64 r15, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl eax ebp esp r12 r12b r12d r12w rax rbp rsp sp spl
// Preserved: rbx rdi
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B640:
	word64 rax_120
	word64 rbp_102 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6C6:
	word64 r12_103 = Mem0[r15:word64]
	branch r12_103 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6D0:
	word64 rdi_105 = Mem0[r12_103:word64]
	branch rdi_105 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6E3:
	word64 rsp_124
	word64 rdi_127
	word64 rbx_128
	byte SCZO_129
	byte Z_130
	word64 rax_131
	byte C_133
	byte SZO_134
	byte CZ_135
	word64 r15_136
	call Mem0[rbp_102 + 0x0000000000000040:word32] (retsize: 4; depth: 16)
		uses: C_109,CZ_101,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc04,qwLoc0C,r12_103,r13_98,r15_97,rax_99,rbp_102,rbx_106,rdi_105,rsp_104,SCZO_100,SZO_107,Z_108
		defs: C_133,CZ_135,r12_125,r13_132,r15_136,rax_131,rbp_126,rbx_128,rdi_127,rsp_124,SCZO_129,SZO_134,Z_130
	branch Mem0[rbx_128 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6EF:
	rax_120 = Mem0[rbp_102 + 0x0000000000000008:word64]
	r12_103 = r12_103 + 0x0000000000000010
	branch rax_120 >u r12_103 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B655:
	rax_120 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B659:
	word64 r12_59 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_59 >=u rax_120 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B668:
	word64 rdi_66 = Mem0[r12_59 + 0x0000000000000000:word64]
	branch rdi_66 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B67B:
	word64 rbx_79 = Mem0[rdi_66 + 0x0000000000000008:word64]
	free(rdi_66)
	branch rbx_79 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B678:
	rdi_66 = rbx_79
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B689:
	r12_59 = r12_59 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_59 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B693:
	word64 rdi_25 = Mem0[rbp_102 + 0x0000000000000048:word64]
	branch rdi_25 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6A3:
	word64 rbx_44 = Mem0[rdi_25 + 0x0000000000000008:word64]
	free(rdi_25)
	branch rbx_44 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6A0:
	rdi_25 = rbx_44
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64)

l000000000040B6B1:
	free(Mem0[rbp_102:word64])
	free(rbp_102)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x000000000000000C rbp:r12 r12:<invalid> rax:<invalid> rdi:rdi rbx:rbx -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040B710(word64 rsi, word64 rdi, word64 r11, word128 xmm0, word128 xmm1, word64 qwArg04, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi r11 rdi rsi xmm0 xmm1
// LiveOut: al r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1
// Preserved: rbx
fn000000000040B710_entry:
	*xmm0Out = xmm0
	*rsiOut = rsi
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
	*r8Out = r8
	*r9Out = r9
// DataOut: esi fs r10 r11 r12 r13 r14 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B710:
	word64 rbp_15 = Mem0[rdi + 0x0000000000000028:word64]
	word128 xmm1_20 = DPB(xmm1, Mem0[rbp_15 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_20
	branch Mem0[rbp_15 + 0x0000000000000010:byte] != 0x00 l000000000040B770
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(64)

l000000000040B72A:
	word128 xmm0_288
	branch rsi < 0x0000000000000000 l000000000040B8D0
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B8D0:
	rsi = (uint64) (esi & 0x00000001)
	*rsiOut = rsi
	real32 v28_324 = (real32) (rsi >>u 0x0000000000000001 | rsi)
	xmm0_288 = DPB(xmm0, v28_324 + DPB(xmm0, v28_324, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B733:
	xmm0_288 = DPB(xmm0, (real32) rsi, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B738:
	real32 v16_293 = (real32) xmm0_288 / xmm1_20
	word128 xmm0_294
	*xmm0Out = DPB(xmm0_288, v16_293, 0)
	branch v16_293 >=u Mem0[0x0000000000415F08:real32] l000000000040B870
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B749:
	branch v16_293 <u Mem0[0x0000000000415F0C:real32] l000000000040B880
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B880:
	rsi = DPB(rsi, v16_293, 0) (alias)
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B756:
	real32 v18_303 = v16_293 - Mem0[0x0000000000415F0C:real32]
	word128 xmm0_304
	*xmm0Out = DPB(xmm0_288, v18_303, 0)
	rsi = DPB(rsi, v18_303, 0) ^ 0x0000000000000000
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B770:
	word64 rsi_126
	word64 r8_127
	word64 r9_128
	word64 rax_129 = fn000000000040ABC0(rsi, out rsi_126, out r8_127, out r9_128)
	branch rax_129 >u 0xFFFFFFFFFFFFFFFF l000000000040B870
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B792:
	branch Mem0[r11 + 0x0000000000000010:word64] == rax_129 l000000000040B860
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B860:
	word64 rbp_280
	*rbpOut = qwLoc04
	word64 rsp_284
	*rspOut = fp + 0x000000000000000C
	return 0x0000000000000001
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B79C:
	word64 rsi_139
	*rsiOut = 0x0000000000000010
	branch calloc(rax_129, 0x0000000000000010) == 0x0000000000000000 l000000000040B870
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(64)

l000000000040B870:
	word64 rbp_99
	*rbpOut = qwLoc04
	word64 rsp_104
	*rspOut = fp + 0x000000000000000C
	return 0x0000000000000000
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -92(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B7B6:
	word64 rsp_170
	word64 rbp_171
	word64 rsi_172
	word64 r13_173
	word64 r14_174
	word64 r15_175
	word64 rax_176 = fn000000000040AE40(Mem0[rdi + 0x0000000000000048:word64], 0x00000000, rbp_15, rdi, fp - 0x000000000000005C, out rsp_170, out rbp_171, out rsi_172, out r13_173, out r14_174, out r15_175)
	word64 rbp_182 = (uint64) (word32) rax_176
	word32 ebp_183 = (word32) rbp_182
	branch (byte) rax_176 != 0x00 l000000000040B890
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:0x0000000000000010 xmm0:<invalid> esi:0x00000010 r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -92(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B890:
	free(Mem0[rdi:word64])
	Mem250[rdi:word64] = Mem0[rsp_170:word64]
	Mem252[rdi + 0x0000000000000008:word64] = Mem250[rsp_170 + 0x0000000000000008:word64]
	Mem254[rdi + 0x0000000000000010:word64] = Mem252[rsp_170 + 0x0000000000000010:word64]
	Mem256[rdi + 0x0000000000000018:word64] = Mem254[rsp_170 + 0x0000000000000018:word64]
	Mem258[rdi + 0x0000000000000048:word64] = Mem256[rsp_170 + 0x0000000000000048:word64]
	word64 rbp_266
	*rbpOut = Mem258[rsp_170 + 0x0000000000000058:word64]
	word64 rsp_270
	*rspOut = rsp_170 + 0x0000000000000068
	return (uint64) ebp_183
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B815:
	word64 rax_184 = Mem0[rsp_170 + 0x0000000000000048:word64]
	Mem189[rdi + 0x0000000000000048:word64] = rax_184
	word64 rsp_190
	word64 rbp_191
	word64 rsi_192
	word64 r13_193
	word64 r14_194
	word64 r15_195
	word64 rax_196 = fn000000000040AE40(rax_184, 0x00000001, rbp_182, rsp_170, rdi, out rsp_190, out rbp_191, out rsi_192, out r13_193, out r14_194, out r15_195)
	branch (byte) rax_196 == 0x00 l000000000040B8EA
// DataOut: fs r10 r11 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B836:
	word64 rsp_224
	word64 rbp_225
	word64 rsi_226
	word64 r13_227
	word64 r14_228
	word64 r15_229
	branch (byte) fn000000000040AE40(rax_196, 0x00000000, rbp_191, rsp_190, rdi, out rsp_224, out rbp_225, out rsi_226, out r13_227, out r14_228, out r15_229) == 0x00 l000000000040B8EA
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B8EA:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B84B:
	free(Mem189[rsp_224:word64])
	word64 rbp_243
	*rbpOut = Mem189[rsp_224 + 0x0000000000000058:word64]
	word64 rsp_247
	*rspOut = rsp_224 + 0x0000000000000068
	return (uint64) ebp_183
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040B710_exit:
// DataOut: al r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:(uint64) ebp xmm0:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word32 fn000000000040B8F0(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r12, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r12 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r10 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040B8F0_entry:
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r8Out = r8
	*r15Out = r15
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: fs r11 r12 r15 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B8F0:
	branch rsi == 0x0000000000000000 l000000000040BA67
// DataOut: fs r11 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040B904:
	word32 eax_156
	word64 rsi_79
	word64 r9_80
	word64 r10_81
	word64 r12_82
	word64 r13_83
	word64 r14_84
	word64 rbp_267
	word64 rsp_160
	word64 rax_85 = fn000000000040ACB0(rax, 0x00000000, rsi, rdi, r8, r11, out rsp_160, out rbp_267, out rsi_79, out r9_80, out r10_81, out r12_82, out r13_83, out r14_84)
	branch rax_85 == 0x0000000000000000 l000000000040B938
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000001C rbp:rsi -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B938:
	word128 xmm0_197
	word64 rax_191 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_192 = (word32) rax_191
	branch rax_191 < 0x0000000000000000 l000000000040BA70
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA70:
	real32 v26_457 = (real32) (rax_191 >>u 0x0000000000000001 | (uint64) (eax_192 & 0x00000001))
	*xmm0Out = DPB(xmm0, v26_457 + DPB(xmm0, v26_457, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B945:
	*xmm0Out = DPB(xmm0, (real32) rax_191, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B94A:
	word128 xmm1_205
	word64 rax_198 = Mem0[rdi + 0x0000000000000010:word64]
	word32 eax_199 = (word32) rax_198
	word64 rdx_201 = Mem0[rdi + 0x0000000000000028:word64]
	branch rax_198 < 0x0000000000000000 l000000000040BA90
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA90:
	real32 v45_445 = (real32) (rax_198 >>u 0x0000000000000001 | (uint64) (eax_199 & 0x00000001))
	xmm1_205 = DPB(xmm1, v45_445 + DPB(xmm1, v45_445, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B95B:
	xmm1_205 = DPB(xmm1, (real32) rax_198, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B960:
	word128 xmm1_211 = DPB(xmm1_205, (real32) xmm1_205 * Mem0[rdx_201 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_211
	branch (real32) xmm0_197 >u xmm1_211 l000000000040B9C8
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9C8:
	word128 xmm0_332
	word128 xmm0_319
	word128 xmm1_320
	word128 xmm2_321
	word128 xmm3_322
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_197, xmm1_211, xmm2, xmm3, out xmm0_319, out xmm1_320, out xmm2_321, out xmm3_322)
	word64 rax_324 = Mem0[rdi + 0x0000000000000010:word64]
	word64 rdx_327 = Mem0[rdi + 0x0000000000000028:word64]
	word32 eax_325 = (word32) rax_324
	word128 xmm2_331 = DPB(xmm2_321, Mem0[rdx_327 + 0x0000000000000008:real32], 0)
	*xmm2Out = xmm2_331
	branch rax_324 < 0x0000000000000000 l000000000040BAE7
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BAE7:
	real32 v43_433 = (real32) (rax_324 >>u 0x0000000000000001 | (uint64) (eax_325 & 0x00000001))
	*xmm0Out = DPB(xmm0_319, v43_433 + DPB(xmm0_319, v43_433, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9E7:
	*xmm0Out = DPB(xmm0_319, (real32) rax_324, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9EC:
	word128 xmm1_340
	word64 rax_334 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_335 = (word32) rax_334
	branch rax_334 < 0x0000000000000000 l000000000040BB01
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BB01:
	real32 v40_421 = (real32) (rax_334 >>u 0x0000000000000001 | (uint64) (eax_335 & 0x00000001))
	*xmm1Out = DPB(xmm1_320, v40_421 + DPB(xmm1_320, v40_421, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9F9:
	*xmm1Out = DPB(xmm1_320, (real32) rax_334, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9FE:
	word128 xmm3_347 = DPB(xmm2_321, Mem0[rdx_327 + 0x0000000000000008:real32] * xmm0_332, 0)
	*xmm3Out = xmm3_347
	branch (real32) xmm1_340 <=u xmm3_347 l000000000040B96A
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA0E:
	real32 v36_352 = (real32) xmm0_332 * Mem0[rdx_327 + 0x000000000000000C:real32]
	word128 xmm0_353
	*xmm0Out = DPB(xmm0_332, v36_352, 0)
	branch Mem0[rdx_327 + 0x0000000000000010:byte] != 0x00 l000000000040BA1D
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA19:
	*xmm0Out = DPB(xmm0_332, v36_352 * xmm2_331, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA1D:
	branch (real32) xmm0_353 >=u Mem0[0x0000000000415F08:real32] l000000000040BB2E
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA2A:
	word64 rsi_361
	branch (real32) xmm0_353 >=u Mem0[0x0000000000415F0C:real32] l000000000040BAC8
// DataOut: fs r10 r11 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BAC8:
	real32 v42_402 = (real32) xmm0_353 - Mem0[0x0000000000415F0C:real32]
	xmm0_353 = DPB(xmm0_353, v42_402, 0)
	rsi_361 = DPB(rsi_79, v42_402, 0) ^ 0x0000000000000000
// DataOut: esi fs r10 r11 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA37:
	rsi_361 = DPB(rsi_79, (int32) xmm0_353, 0) (alias)
// DataOut: esi fs r10 r11 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA3C:
	word64 rbp_365
	word64 rsi_366
	word64 r8_367
	word64 r9_368
	word64 r13_369
	word64 r14_370
	word64 r15_371
	word128 xmm0_372
	word128 xmm1_373
	word64 rax_374 = fn000000000040B710(rsi_361, rdi, r11, xmm0_353, xmm1_340, qwLoc04, out rsp_160, out rbp_365, out rsi_366, out r8_367, out r9_368, out r13_369, out r14_370, out r15_371, out xmm0_372, out xmm1_373)
	branch (byte) rax_374 == 0x00 l000000000040BB2E
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r14:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BA4C:
	word64 rsi_390
	word64 r9_391
	word64 r10_392
	word64 r12_393
	word64 r13_394
	word64 r14_395
	branch fn000000000040ACB0(rax_374, 0x00000000, rbp_365, rdi, r8_367, r11, out rsp_160, out rbp_267, out rsi_390, out r9_391, out r10_392, out r12_393, out r13_394, out r14_395) == 0x0000000000000000 l000000000040B96A
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BA67:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:<invalid> r8:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B96A:
	word64 r12_269 = Mem0[rsp_160 + 0x0000000000000008:word64]
	branch Mem0[r12_269:word64] == 0x0000000000000000 l000000000040BAB0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BAB0:
	Mem309[r12_269:word64] = rbp_267
	Mem314[rdi + 0x0000000000000020:word64] = Mem309[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	Mem316[rdi + 0x0000000000000018:word64] = Mem314[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	eax_156 = 0x00000001 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B97A:
	word64 rax_272 = Mem0[rdi + 0x0000000000000048:word64]
	branch rax_272 == 0x0000000000000000 l000000000040BB1B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BB1B:
	rax_272 = malloc(0x0000000000000010)
	branch rax_272 != 0x0000000000000000 l000000000040B98F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BB2E:
	eax_156 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B987:
	Mem301[rdi + 0x0000000000000048:word64] = Mem0[rax_272 + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B98F:
	word64 rdx_283 = Mem0[r12_269 + 0x0000000000000008:word64]
	Mem284[rax_272:word64] = rbp_267
	Mem285[rax_272 + 0x0000000000000008:word64] = rdx_283
	Mem286[r12_269 + 0x0000000000000008:word64] = rax_272
	Mem291[rdi + 0x0000000000000020:word64] = Mem286[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	word64 rsp_292 = rsp_160 + 0x0000000000000010
	word64 rbp_296
	*rbpOut = Mem291[rsp_292 + 0x0000000000000008:word64]
	word64 r12_298
	*r12Out = Mem291[rsp_292 + 0x0000000000000010:word64]
	word64 rsp_299
	*rspOut = rsp_292 + 0x0000000000000018
	return 0x00000001
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B91B:
	branch r12_82 == 0x0000000000000000 l000000000040B9B8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B9B8:
	word64 rbp_187
	*rbpOut = Mem0[rsp_160 + 0x0000000000000018:word64]
	word64 r12_189
	*r12Out = Mem0[rsp_160 + 0x0000000000000020:word64]
	word64 rsp_190
	*rspOut = rsp_160 + 0x0000000000000028
	return 0x00000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B924:
	Mem173[r12_82:word64] = rax_85
	eax_156 = 0x00000000 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040B92A:
	word64 rsp_161 = rsp_160 + 0x0000000000000010
	word64 rbp_166
	*rbpOut = Mem0[rsp_161 + 0x0000000000000008:word64]
	word64 r12_168
	*r12Out = Mem0[rsp_161 + 0x0000000000000010:word64]
	word64 rsp_169
	*rspOut = rsp_161 + 0x0000000000000018
	return eax_156
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040B8F0_exit:
// DataOut: eax r10 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040BB50(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r12, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r12 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax ebx r10 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040BB50_entry:
// DataOut: fs r11 r12 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB50:
	word64 rax_42
	word64 rsp_21
	word64 rbp_22
	word64 rsi_23
	word64 r8_24
	word64 r9_25
	word64 r10_26
	word64 r12_27
	word64 r13_28
	word64 r14_29
	word64 r15_30
	word128 xmm0_31
	word128 xmm1_32
	word128 xmm2_33
	word128 xmm3_34
	word32 eax_35 = fn000000000040B8F0(rax, rbp, rsi, rdi, r8, r11, r12, xmm0, xmm1, xmm2, xmm3, out rsp_21, out rbp_22, out rsi_23, out r8_24, out r9_25, out r10_26, out r12_27, out r13_28, out r14_29, out r15_30, out xmm0_31, out xmm1_32, out xmm2_33, out xmm3_34)
	branch eax_35 == 0xFFFFFFFF l000000000040BB80
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040BB80:
	rax_42 = 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -4(fp):rbx

l000000000040BB67:
	rax_42 = rsi
	branch eax_35 != 0x00000000 l000000000040BB72
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -4(fp):rbx

l000000000040BB6C_1:
	rax_42 = Mem0[rsp_21 + 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -4(fp):rbx

l000000000040BB72:
	word32 ebx_48
	*ebxOut = (word32) Mem0[rsp_21 + 0x0000000000000010:word64]
	word64 rsp_49
	*rspOut = rsp_21 + 0x0000000000000018
	return rax_42
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -4(fp):rbx

fn000000000040BB50_exit:
// DataOut: eax ebx r10 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -4(fp):rbx



word64 fn000000000040BB90(word64 rax, byte bpl, word64 rsi, word64 rdi, word64 r8, word64 r11, byte r12b, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r12bOut, ptr64 & r13Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl r11 r12b r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: bpl r10 r12b r13 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040BB90_entry:
	*r8Out = r8
	*xmm3Out = xmm3
	*xmm2Out = xmm2
	*r15Out = r15
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: bpl fs r11 r12b r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB90:
	word64 rbp_23
	word64 rsi_24
	word64 r9_25
	word64 r10_26
	word64 r12_27
	word64 r13_28
	word64 r14_29
	word64 rsp_108
	word64 rax_105 = fn000000000040ACB0(rax, 0x00000001, rsi, rdi, r8, r11, out rsp_108, out rbp_23, out rsi_24, out r9_25, out r10_26, out r12_27, out r13_28, out r14_29)
	branch rax_105 == 0x0000000000000000 l000000000040BD08
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD08:
	rax_105 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BBB6:
	word64 rdx_120 = Mem0[rsp_108 + 0x0000000000000008:word64]
	Mem122[rdi + 0x0000000000000020:word64] = Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem122[rdx_120:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBD0:
	word128 xmm0_144
	word64 rax_136 = Mem122[rdi + 0x0000000000000018:word64]
	Mem143[rdi + 0x0000000000000018:word64] = rax_136 - 0x0000000000000001
	word32 eax_138 = (word32) (rax_136 - 0x0000000000000001)
	branch rax_136 < 0x0000000000000001 l000000000040BCE8
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BCE8:
	real32 v25_334 = (real32) (rax_136 - 0x0000000000000001 >>u 0x0000000000000001 | (uint64) (eax_138 & 0x00000001))
	*xmm0Out = DPB(xmm0, v25_334 + DPB(xmm0, v25_334, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBE5:
	*xmm0Out = DPB(xmm0, (real32) (rax_136 - 0x0000000000000001), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBEA:
	word128 xmm1_155
	word64 rax_145 = Mem143[rdi + 0x0000000000000010:word64]
	word32 eax_146 = (word32) rax_145
	word64 rdx_148 = Mem143[rdi + 0x0000000000000028:word64]
	branch rax_145 < 0x0000000000000000 l000000000040BCC8
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BCC8:
	real32 v33_322 = (real32) (rax_145 >>u 0x0000000000000001 | (uint64) (eax_146 & 0x00000001))
	xmm1_155 = DPB(xmm1, v33_322 + DPB(xmm1, v33_322, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBFB:
	xmm1_155 = DPB(xmm1, (real32) rax_145, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC00:
	real32 v22_159 = (real32) xmm1_155 * Mem143[rdx_148:real32]
	word128 xmm1_160 = DPB(xmm1_155, v22_159, 0)
	*xmm1Out = xmm1_160
	branch v22_159 >u xmm0_144 l000000000040BC18
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC18:
	word128 xmm0_206
	word128 xmm0_191
	word128 xmm1_192
	word128 xmm2_193
	word128 xmm3_194
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_144, xmm1_160, xmm2, xmm3, out xmm0_191, out xmm1_192, out xmm2_193, out xmm3_194)
	word64 rdx_196 = Mem143[rdi + 0x0000000000000010:word64]
	word32 edx_197 = (word32) rdx_196
	word64 rax_199 = Mem143[rdi + 0x0000000000000028:word64]
	branch rdx_196 < 0x0000000000000000 l000000000040BD2F
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD2F:
	real32 v36_310 = (real32) (rdx_196 >>u 0x0000000000000001 | (uint64) (edx_197 & 0x00000001))
	*xmm0Out = DPB(xmm0_191, v36_310 + DPB(xmm0_191, v36_310, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC32:
	*xmm0Out = DPB(xmm0_191, (real32) rdx_196, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC37:
	word128 xmm1_214
	word64 rdx_207 = Mem143[rdi + 0x0000000000000018:word64]
	word32 edx_208 = (word32) rdx_207
	branch rdx_207 < 0x0000000000000000 l000000000040BD49
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD49:
	real32 v38_298 = (real32) (rdx_207 >>u 0x0000000000000001 | (uint64) (edx_208 & 0x00000001))
	*xmm1Out = DPB(xmm1_192, v38_298 + DPB(xmm1_192, v38_298, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC44:
	*xmm1Out = DPB(xmm1_192, (real32) rdx_207, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC49:
	real32 v30_219 = Mem143[rax_199:real32] * xmm0_206
	word128 xmm2_220
	*xmm2Out = DPB(xmm2_193, v30_219, 0)
	branch v30_219 <=u xmm1_214 l000000000040BC09
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC56:
	real32 v31_225 = (real32) xmm0_206 * Mem143[rax_199 + 0x0000000000000004:real32]
	word128 xmm0_226 = DPB(xmm0_206, v31_225, 0)
	branch Mem143[rax_199 + 0x0000000000000010:byte] != 0x00 l000000000040BC66
// DataOut: fs r10 r11 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC61:
	xmm0_226 = DPB(xmm0_206, v31_225 * Mem143[rax_199 + 0x0000000000000008:real32], 0)
// DataOut: fs r10 r11 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC66:
	word64 rsi_231
	branch (real32) xmm0_226 >=u Mem143[0x0000000000415F0C:real32] l000000000040BD10
// DataOut: fs r10 r11 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD10:
	real32 v42_279 = (real32) xmm0_226 - Mem143[0x0000000000415F0C:real32]
	xmm0_226 = DPB(xmm0_226, v42_279, 0)
	rsi_231 = DPB(rsi_24, v42_279, 0) ^ 0x0000000000000000
// DataOut: esi fs r10 r11 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC73:
	rsi_231 = DPB(rsi_24, (int32) xmm0_226, 0) (alias)
// DataOut: esi fs r10 r11 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC78:
	rax_105 = rbp_236
	word64 rbp_236
	word64 rsi_237
	word64 r8_238
	word64 r9_239
	word64 r13_240
	word64 r14_241
	word64 r15_242
	word128 xmm0_243
	word128 xmm1_244
	branch (byte) (uint64) (word32) fn000000000040B710(rsi_231, rdi, r11, xmm0_226, xmm1_214, qwLoc04, out rsp_108, out rbp_236, out rsi_237, out r8_238, out r9_239, out r13_240, out r14_241, out r15_242, out xmm0_243, out xmm1_244) != 0x00 l000000000040BBC6
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BC8D:
	word64 rdi_255 = Mem143[rdi + 0x0000000000000048:word64]
	branch rdi_255 != 0x0000000000000000 l000000000040BCA3
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BCA3:
	word64 r12_271 = Mem143[r15_242 + 0x0000000000000008:word64]
	free(rdi_255)
	branch r12_271 != 0x0000000000000000 l000000000040BCA0
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BCA0:
	rdi_255 = r12_271
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BC96:
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BCB1:
	Mem265[rdi + 0x0000000000000048:word64] = 0x0000000000000000
	rax_105 = rbp_236
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BC09:
	word64 rbp_184
	*rbpOut = Mem143[rsp_108 + 0x0000000000000018:word64]
	byte r12b_188
	*r12bOut = (byte) Mem143[rsp_108 + 0x0000000000000020:word64]
	word64 rsp_189
	*rspOut = rsp_108 + 0x0000000000000028
	return rax_105
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040BBC6:
	word64 rsp_109 = rsp_108 + 0x0000000000000010
	word64 rbp_114
	*rbpOut = Mem0[rsp_109 + 0x0000000000000008:word64]
	byte r12b_118
	*r12bOut = (byte) Mem0[rsp_109 + 0x0000000000000010:word64]
	word64 rsp_119
	*rspOut = rsp_109 + 0x0000000000000018
	return rax_105
// DataOut: bpl fs r10 r11 r12b r13 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040BB90_exit:
// DataOut: bpl r10 r12b r13 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r15:<invalid> r8:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12bOut, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: bpl r10 r11 r11d r12b r13 r15 r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
// Stack args: Stack +0000(64) Stack +0010(64)
fn000000000040BD70_entry:
	def fp
	def r15
	def edx
	def r14
	def rsi
	def r13
	def r12
	def rdi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocB0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def qwArg00
	def qwArg08
	def qwArg10
	def rspOut
	def rbpOut
	def r8Out
	def r9Out
	def r10Out
	def r11Out
	def r12bOut
	def r13Out
	def r15Out
	def dwLoc74
	def qwLoc90
	def qwLoc98
	def rLoc4
	def wLoc6A
	def wLoc6C
	def rLoc90
	def rLoc3
	def rLoc2
	def qwLoc68
	def rLoc1
	def rLocD0
	def rdx_rax
	def edx_eax
// DataOut: edx fs r10 r12 r14b r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0010(64)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = r15
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 0x0000000000000008
	dwLoc08_12 = r14
	r14_14 = rsi
	r14d_15 = (word32) r14_14 (alias)
	rsp_16 = fp - 0x000000000000000C
	dwLoc0C_18 = r13
	rsp_19 = fp - 0x0000000000000010
	dwLoc10_21 = r12
	r12_23 = rdi
	r12d_24 = (word32) r12_23 (alias)
	r12b_25 = (byte) r12_23 (alias)
	rsp_26 = fp - 0x0000000000000014
	dwLoc14_28 = rbp
	rsp_29 = fp - 0x0000000000000018
	dwLoc18_31 = rbx
	rbx_33 = rcx
	ebx_34 = (word32) rbx_33 (alias)
	rsp_35 = fp - 0x00000000000000D0
	dwLoc98_36 = eax_9
	rax_37 = (uint64) edx
	eax_38 = (word32) rax_37 (alias)
	qwLocA0_39 = rsi
	rax_40 = (uint64) (eax_38 & 0x00000020)
	eax_41 = (word32) rax_40 (alias)
	dwLocB0_42 = edx
	qwLocA8_44 = r8
	rcx_47 = Mem0[fs:0x00000028:word64]
	qwLoc28_48 = rcx_47
	rcx_49 = 0x0000000000000000
	SCZO_50 = cond(eax_41 - 0x00000001)
	C_51 = SCZO_50 (alias)
	dwLoc78_52 = eax_41
	rax_53 = (uint64) (0x00000000 - C_51)
	eax_54 = (word32) rax_53 (alias)
	dwLocAC_55 = eax_54
	v21_56 = dwLocAC_55 & 0xFFFFFFE8
	dwLocAC_57 = v21_56
	SZO_58 = cond(dwLocAC_57)
	v22_59 = dwLocAC_57 + 0x00000400
	dwLocAC_60 = v22_59
	SCZO_61 = cond(v22_59)
	call localeconv (retsize: 8; depth: 216)
		uses: C_51,dwLoc04_4,dwLoc08_12,dwLoc0C_18,dwLoc10_21,dwLoc14_28,dwLoc18_31,dwLoc78_52,dwLoc98_36,dwLocAC_60,dwLocB0_42,eax_54,ebx_34,edx,fs,qwLoc28_48,qwLocA0_39,qwLocA8_44,r12_23,r12b_25,r12d_24,r13,r14_14,r14d_15,r15,r8,rax_53,rbp,rbx_33,rcx_49,rdi,rsi,rsp_35,SCZO_61,SZO_58
		defs: ah_96,al_102,ax_97,C_68,cl_89,CZ_83,CZP_94,dil_101,dl_99,eax_64,ebx_86,ecx_80,edi_88,edx_65,esi_92,fs_79,P_98,r10_87,r10b_105,r10d_104,r11_81,r12_72,r12b_106,r12d_93,r13_71,r14_69,r14d_95,r15_63,r15d_103,r8_78,r9_91,r9d_90,rax_66,rbp_74,rbx_75,rcx_76,rdi_73,rdx_82,rsi_70,rsp_62,S_85,SCZO_77,sil_100,SZO_67,Z_84
	r15_107 = Mem0[r8_78:word64]
	r15d_108 = (word32) r15_107 (alias)
	r13_109 = rax_66
	rdi_110 = r15_107
	eax_111 = strlen(rdi_110)
	rax_112 = DPB(rax_66, eax_111, 0) (alias)
	rbp_113 = Mem0[rbp_74 + 0x0000000000000010:word64]
	r11_114 = rax_112
	r13_115 = Mem0[r13_109 + 0x0000000000000008:word64]
	rax_116 = rax_112 - 0x0000000000000001
	rdx_117 = 0x0000000000000001
	SCZO_118 = cond(rax_116 - 0x0000000000000010)
	C_119 = SCZO_118 (alias)
	SZO_120 = SCZO_118 (alias)
	Z_121 = SCZO_118 (alias)
	CZ_122 = SCZO_118 (alias)
	S_123 = SCZO_118 (alias)
	CZP_124 = SCZO_118 (alias)
	rdi_125 = r13_115
	edi_126 = (word32) rdi_125 (alias)
	dil_127 = (byte) rdi_125 (alias)
	rax_128 = 0x0000000000413990
	branch rax_116 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32) Stack +0000(64) Stack +0010(64)

l000000000040BE06_1:
	r11_1841 = 0x0000000000000001
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32) Stack +0000(64) Stack +0010(64)

l000000000040BE0A:
	r11_129 = PHI(r11_114, r11_1841)
	branch rax_116 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32) Stack +0000(64) Stack +0010(64)

l000000000040BE0A_1:
	r15_1839 = 0x0000000000413990
	r15d_1840 = (word32) r15_1839 (alias)
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32) Stack +0000(64) Stack +0010(64)

l000000000040BE0E:
	r15_130 = PHI(r15_107, r15_1839)
	r15d_131 = PHI(r15d_108, r15d_1840)
	qwLoc80_132 = r11_129
	eax_133 = strlen(rdi_125)
	rax_134 = DPB(rax_128, eax_133, 0) (alias)
	SCZO_135 = cond(rax_134 - 0x0000000000000011)
	C_136 = SCZO_135 (alias)
	rax_137 = 0x0000000000416919
	r11_138 = qwLoc80_132
	branch rax_134 <u 0x0000000000000011 l000000000040BE2A
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32) Stack +0000(64) Stack +0010(64)

l000000000040BE26_1:
	r13_1838 = 0x0000000000416919
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32) Stack +0000(64) Stack +0010(64)

l000000000040BE2A:
	r13_139 = PHI(r13_115, r13_1838)
	rax_140 = r14_69
	r8_141 = r8_78 + 648
	SCZO_142 = cond(qwLocA8_44 - rbx_75)
	CZ_143 = SCZO_142 (alias)
	qwLocB8_144 = rax_140
	branch qwLocA8_44 >u rbx_75 l000000000040C0E0
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C0E0:
	SZO_1774 = cond(rbx_75 & rbx_75)
	Z_1775 = SZO_1774 (alias)
	C_1776 = false
	branch Test(EQ,Z_1775) l000000000040BE59
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C0E9:
	rax_1779 = qwLocA8_44
	rdx_1780 = 0x0000000000000000
	rdx_rax_1781 = SEQ(rdx_1780, rax_1779) (alias)
	v34_1782 = rdx_rax_1781
	rdx_1783 = (uint64) (v34_1782 % rbx_75)
	rax_1784 = (uint64) (v34_1782 /u rbx_75)
	SZO_1785 = cond(rdx_1783 & rdx_1783)
	Z_1786 = SZO_1785 (alias)
	C_1787 = false
	rsi_1788 = rax_1784
	sil_1789 = (byte) rsi_1788 (alias)
	esi_1790 = (word32) rsi_1788 (alias)
	branch Test(NE,Z_1786) l000000000040BE59
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C0FF:
	rdx_1791 = 0x0000000000000000
	rax_1792 = r12_72
	rdx_rax_1793 = SEQ(rdx_1791, rax_1792) (alias)
	v35_1794 = rdx_rax_1793
	rdx_1795 = (uint64) (v35_1794 % rsi_1788)
	rax_1796 = (uint64) (v35_1794 /u rsi_1788)
	rdi_1797 = rdx_1795 + rdx_1795 * 0x0000000000000004
	r10_1798 = rax_1796
	r10d_1799 = (word32) r10_1798 (alias)
	r10b_1800 = (byte) r10_1798 (alias)
	rdx_1801 = 0x0000000000000000
	rax_1802 = rdi_1797 + rdi_1797
	rdx_rax_1803 = SEQ(rdx_1801, rax_1802) (alias)
	v37_1804 = rdx_rax_1803
	rdx_1805 = (uint64) (v37_1804 % rsi_1788)
	rax_1806 = (uint64) (v37_1804 /u rsi_1788)
	eax_1807 = (word32) rax_1806 (alias)
	rdx_1808 = rdx_1805 + rdx_1805
	edx_1809 = (word32) rdx_1808 (alias)
	rdx_rax_1810 = SEQ(rdx_1808, rax_1806) (alias)
	edx_eax_1811 = rdx_1808 (alias)
	dl_1812 = (byte) rdx_1808 (alias)
	rdi_1813 = (uint64) eax_1807
	edi_1814 = (word32) rdi_1813 (alias)
	dil_1815 = (byte) rdi_1813 (alias)
	SCZO_1816 = cond(rsi_1788 - rdx_1808)
	C_1817 = SCZO_1816 (alias)
	SZO_1818 = SCZO_1816 (alias)
	Z_1819 = SCZO_1816 (alias)
	CZ_1820 = SCZO_1816 (alias)
	S_1821 = SCZO_1816 (alias)
	CZP_1822 = SCZO_1816 (alias)
	branch Test(ULE,CZ_1820) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r11d r13 r15 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C6E0:
	rcx_1830 = (uint64) (0x00000000 - C_1817)
	ecx_1831 = (word32) rcx_1830 (alias)
	rcx_1832 = (uint64) ~ecx_1831
	ecx_1833 = (word32) rcx_1832 (alias)
	rcx_1834 = (uint64) (ecx_1833 + 0x00000003)
	ecx_1835 = (word32) rcx_1834 (alias)
	cl_1836 = (byte) rcx_1834 (alias)
	SCZO_1837 = cond(ecx_1835)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C125:
	rcx_1823 = 0x0000000000000000
	SZO_1824 = cond(rdx_1808 & rdx_1808)
	Z_1825 = SZO_1824 (alias)
	C_1826 = false
	cl_1827 = Test(NE,Z_1825)
	rcx_1828 = DPB(rcx_1823, cl_1827, 0) (alias)
	ecx_1829 = DPB(ecx_80, cl_1827, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BE43:
	rdx_1736 = 0x0000000000000000
	rax_1737 = rbx_75
	rdx_rax_1738 = SEQ(rdx_1736, rax_1737) (alias)
	v27_1739 = rdx_rax_1738
	rdx_1740 = (uint64) (v27_1739 % qwLocA8_44)
	rax_1741 = (uint64) (v27_1739 /u qwLocA8_44)
	eax_1742 = (word32) rax_1741 (alias)
	rdx_rax_1743 = SEQ(rdx_1740, rax_1741) (alias)
	edx_eax_1744 = rax_1741 (alias)
	ah_1745 = SLICE(rax_1741, byte, 8) (alias)
	ax_1746 = (word16) rax_1741 (alias)
	al_1747 = (byte) rax_1741 (alias)
	SZO_1748 = cond(rdx_1740 & rdx_1740)
	Z_1749 = SZO_1748 (alias)
	C_1750 = false
	rcx_1751 = rax_1741
	ecx_1752 = (word32) rcx_1751 (alias)
	cl_1753 = (byte) rcx_1751 (alias)
	branch Test(EQ,Z_1749) l000000000040C2F0
// DataOut: bx fs r10 r11 r11d r12 r12d r13 r15 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C2F0:
	r10_1754 = rax_1741
	rdx_1755 = 0x0000000000000000
	r10_1756 = r10_1754 *s r12_72
	r10d_1757 = (word32) r10_1756 (alias)
	r10b_1758 = (byte) r10_1756 (alias)
	rax_1759 = r10_1756
	rdx_rax_1760 = SEQ(rdx_1755, rax_1759) (alias)
	v71_1761 = rdx_rax_1760
	rdx_1762 = (uint64) (v71_1761 % rcx_1751)
	rax_1763 = (uint64) (v71_1761 /u rcx_1751)
	SCZO_1764 = cond(rax_1763 - r12_72)
	Z_1765 = SCZO_1764 (alias)
	branch Test(NE,Z_1765) l000000000040BE59
// DataOut: bx fs r10 r10b r10d r11 r11d r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C308:
	rcx_1766 = 0x0000000000000000
	ecx_1767 = (word32) rcx_1766 (alias)
	cl_1768 = (byte) rcx_1766 (alias)
	rdi_1769 = 0x0000000000000000
	edi_1770 = (word32) rdi_1769 (alias)
	dil_1771 = (byte) rdi_1769 (alias)
	SZO_1772 = cond(edi_1770)
	C_1773 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C12D:
	r10b_1289 = PHI(r10b_1800, r10b_1800, r10b_1758)
	r10d_1290 = PHI(r10d_1799, r10d_1799, r10d_1757)
	dil_1291 = PHI(dil_1815, dil_1815, dil_1771)
	sil_1292 = PHI(sil_1789, sil_1789, sil_100)
	CZP_1293 = PHI(CZP_1822, CZP_1822, CZP_124)
	esi_1294 = PHI(esi_1790, esi_1790, esi_92)
	edi_1295 = PHI(edi_1814, edi_1814, edi_1770)
	r10_1296 = PHI(r10_1798, r10_1798, r10_1756)
	S_1297 = PHI(S_1821, S_1821, S_123)
	CZ_1298 = PHI(CZ_1820, CZ_1820, CZ_143)
	rsi_1299 = PHI(rsi_1788, rsi_1788, rsi_70)
	ecx_1300 = PHI(ecx_1829, ecx_1835, ecx_1767)
	rcx_1301 = PHI(rcx_1828, rcx_1834, rcx_1766)
	cl_1302 = PHI(cl_1827, cl_1836, cl_1768)
	rdi_1303 = PHI(rdi_1813, rdi_1813, rdi_1769)
	rax_1304 = PHI(rax_1806, rax_1806, rax_1763)
	eax_1305 = PHI(eax_1807, eax_1807, eax_1742)
	ah_1306 = PHI(ah_96, ah_96, ah_1745)
	ax_1307 = PHI(ax_97, ax_97, ax_1746)
	al_1308 = PHI(al_102, al_102, al_1747)
	rdx_1309 = PHI(rdx_1808, rdx_1808, rdx_1762)
	edx_1310 = PHI(edx_1809, edx_1809, edx_65)
	rdx_rax_1311 = PHI(rdx_rax_1810, rdx_rax_1810, rdx_rax_1760)
	edx_eax_1312 = PHI(edx_eax_1811, edx_eax_1811, edx_eax_1744)
	dl_1313 = PHI(dl_1812, dl_1812, dl_99)
	SCZO_1314 = PHI(SCZO_1816, SCZO_1837, SCZO_1764)
	r9_1315 = (uint64) dwLocB0_42
	r9d_1316 = (word32) r9_1315 (alias)
	r8_1317 = qwLocB8_144
	rbx_1318 = 0x00000000FFFFFFFF
	ebx_1319 = (word32) rbx_1318 (alias)
	r9_1320 = (uint64) (r9d_1316 & 0x00000010)
	r9d_1321 = (word32) r9_1320 (alias)
	SZO_1322 = cond(r9d_1321)
	Z_1323 = SZO_1322 (alias)
	C_1324 = false
	branch Test(EQ,Z_1323) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C146:
	rsi_1511 = (uint64) dwLocAC_60
	sil_1512 = (byte) rsi_1511 (alias)
	esi_1513 = (word32) rsi_1511 (alias)
	SCZO_1514 = cond(r10_1296 - rsi_1511)
	C_1515 = SCZO_1514 (alias)
	branch Test(ULT,C_1515) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C710:
	r8_1731 = qwLocB8_144
	rbx_1732 = 0x0000000000000000
	ebx_1733 = (word32) rbx_1732 (alias)
	SZO_1734 = cond(ebx_1733)
	C_1735 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C153:
	rbx_1516 = 0x0000000000000000
	ebx_1517 = (word32) rbx_1516 (alias)
	SZO_1518 = cond(ebx_1517)
	C_1519 = false
	r12_1520 = (uint64) dwLocAC_60
	r12d_1521 = (word32) r12_1520 (alias)
	r12b_1522 = (byte) r12_1520 (alias)
// DataOut: ebx ecx edi fs r10 r11 r11d r12d r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C17D:
	r10_1523 = PHI(r10_1296, r10_1542)
	ebx_1524 = PHI(ebx_1517, ebx_1576)
	ecx_1525 = PHI(ecx_1300, ecx_1569)
	rdi_1526 = PHI(rdi_1303, rdi_1561)
	SZO_1527 = PHI(SZO_1518, SZO_1572)
	Z_1528 = PHI(Z_1323, Z_1584)
	C_1529 = PHI(C_1519, C_1574)
	edx_1530 = PHI(edx_1310, edx_1551)
	rbx_1531 = PHI(rbx_1516, rbx_1575)
	rax_1532 = r10_1523
	rdx_1533 = 0x0000000000000000
	rdx_rax_1534 = SEQ(rdx_1533, rax_1532) (alias)
	v47_1535 = rdx_rax_1534
	rdx_1536 = (uint64) (v47_1535 % rsi_1511)
	rax_1537 = (uint64) (v47_1535 /u rsi_1511)
	r8_1538 = rax_1537
	eax_1539 = rdx_1536 + rdx_1536 * 0x0000000000000004
	rax_1540 = DPB(rax_1537, eax_1539, 0) (alias)
	rdx_1541 = 0x0000000000000000
	r10_1542 = r8_1538
	r10d_1543 = (word32) r10_1542 (alias)
	r10b_1544 = (byte) r10_1542 (alias)
	eax_1545 = rdi_1526 + rax_1540 * 0x0000000000000002
	edx_eax_1546 = SEQ(edx_1530, eax_1545) (alias)
	rdi_1547 = (uint64) ecx_1525
	edi_1548 = (word32) rdi_1547 (alias)
	rdi_1549 = (uint64) (edi_1548 >> 0x00000001)
	v49_1550 = edx_eax_1546
	edx_1551 = (uint32) (v49_1550 % r12d_1521)
	rdx_1552 = DPB(rdx_1541, edx_1551, 0) (alias)
	eax_1553 = (uint32) (v49_1550 /u r12d_1521)
	rax_1554 = DPB(rax_1540, eax_1553, 0) (alias)
	rdx_rax_1555 = DPB(rdx_rax_1534, eax_1553, 0) (alias)
	edx_eax_1556 = SEQ(edx_1551, eax_1553) (alias)
	ah_1557 = SLICE(eax_1553, byte, 8) (alias)
	ax_1558 = (word16) eax_1553 (alias)
	al_1559 = (byte) eax_1553 (alias)
	r14d_1560 = rdi_1549 + rdx_1552 * 0x0000000000000002
	rdi_1561 = (uint64) eax_1553
	edi_1562 = (word32) rdi_1561 (alias)
	dil_1563 = (byte) rdi_1561 (alias)
	rcx_1564 = (uint64) (ecx_1525 + r14d_1560)
	ecx_1565 = (word32) rcx_1564 (alias)
	cl_1566 = (byte) rcx_1564 (alias)
	SCZO_1567 = cond(r12d_1521 - r14d_1560)
	CZ_1568 = SCZO_1567 (alias)
	branch Test(UGT,CZ_1568) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C160:
	SZO_1724 = cond(ecx_1565 & ecx_1565)
	Z_1725 = SZO_1724 (alias)
	C_1726 = false
	cl_1727 = Test(NE,Z_1725)
	ecx_1728 = (word32) cl_1727
	rcx_1729 = DPB(rcx_1564, ecx_1728, 0) (alias)
	cl_1730 = (byte) ecx_1728 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C1A8:
	SCZO_1714 = cond(r12d_1521 - ecx_1565)
	C_1715 = SCZO_1714 (alias)
	rcx_1716 = (uint64) (0x00000000 - C_1715)
	ecx_1717 = (word32) rcx_1716 (alias)
	rcx_1718 = (uint64) ~ecx_1717
	ecx_1719 = (word32) rcx_1718 (alias)
	rcx_1720 = (uint64) (ecx_1719 + 0x00000003)
	ecx_1721 = (word32) rcx_1720 (alias)
	cl_1722 = (byte) rcx_1720 (alias)
	SCZO_1723 = cond(ecx_1721)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C168:
	ecx_1569 = PHI(ecx_1721, ecx_1728)
	rcx_1570 = PHI(rcx_1720, rcx_1729)
	cl_1571 = PHI(cl_1722, cl_1730)
	SZO_1572 = PHI(SZO_1527, SZO_1724)
	Z_1573 = PHI(Z_1528, Z_1725)
	C_1574 = PHI(C_1715, C_1726)
	rbx_1575 = (uint64) (ebx_1524 + 0x00000001)
	ebx_1576 = (word32) rbx_1575 (alias)
	SCZO_1577 = cond(rsi_1511 - r8_1538)
	CZ_1578 = SCZO_1577 (alias)
	branch Test(UGT,CZ_1578) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C49F:
	SCZO_1585 = cond(r8_1538 - 0x0000000000000009)
	CZ_1586 = SCZO_1585 (alias)
	branch Test(UGT,CZ_1586) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C4A9:
	SCZO_1587 = cond(dwLoc98_36 - 0x00000001)
	Z_1588 = SCZO_1587 (alias)
	branch Test(EQ,Z_1588) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C7B0:
	rdx_1701 = (uint64) eax_1553
	edx_1702 = (word32) rdx_1701 (alias)
	rdx_1703 = (uint64) (edx_1702 & 0x00000001)
	edx_1704 = (word32) rdx_1703 (alias)
	rdx_1705 = (uint64) (edx_1704 + ecx_1569)
	edx_1706 = (word32) rdx_1705 (alias)
	SCZO_1707 = cond(edx_1706 - 0x00000002)
	SZO_1708 = SCZO_1707 (alias)
	dl_1709 = Test(GT,SZO_1708)
	edx_1710 = DPB(edx_1706, dl_1709, 0) (alias)
	rdx_1711 = DPB(rdx_1705, dl_1709, 0) (alias)
	rdx_rax_1712 = DPB(rdx_rax_1555, dl_1709, 64) (alias)
	edx_eax_1713 = DPB(edx_eax_1556, dl_1709, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C4B4:
	r12_1685 = (uint64) dwLoc98_36
	r12d_1686 = (word32) r12_1685 (alias)
	SZO_1687 = cond(ecx_1569 & ecx_1569)
	dl_1688 = Test(GT,SZO_1687)
	edx_1689 = DPB(edx_1551, dl_1688, 0) (alias)
	SZO_1690 = cond(r12d_1686 & r12d_1686)
	Z_1691 = SZO_1690 (alias)
	sil_1692 = Test(EQ,Z_1691)
	esi_1693 = DPB(esi_1513, sil_1692, 0) (alias)
	rdx_1694 = (uint64) (edx_1689 & esi_1693)
	edx_1695 = (word32) rdx_1694 (alias)
	rdx_rax_1696 = SEQ(rdx_1694, rax_1554) (alias)
	edx_eax_1697 = rdx_1694 (alias)
	dl_1698 = (byte) rdx_1694 (alias)
	SZO_1699 = cond(edx_1695)
	C_1700 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C4C7:
	sil_1589 = PHI(sil_1692, sil_1512)
	esi_1590 = PHI(esi_1693, esi_1513)
	rdx_1591 = PHI(rdx_1694, rdx_1711)
	edx_1592 = PHI(edx_1695, edx_1710)
	rdx_rax_1593 = PHI(rdx_rax_1696, rdx_rax_1712)
	edx_eax_1594 = PHI(edx_eax_1697, edx_eax_1713)
	dl_1595 = PHI(dl_1698, dl_1709)
	SCZO_1596 = PHI(SCZO_1587, SCZO_1707)
	r12_1597 = PHI(r12_1685, r12_1520)
	r12d_1598 = PHI(r12d_1686, r12d_1521)
	SZO_1599 = cond(dl_1595 & dl_1595)
	Z_1600 = SZO_1599 (alias)
	C_1601 = false
	branch Test(EQ,Z_1600) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C788:
	SZO_1682 = cond(eax_1553 & eax_1553)
	Z_1683 = SZO_1682 (alias)
	C_1684 = false
	branch Test(NE,Z_1683) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C4CF:
	edi_1658 = rax_1554 + 0x0000000000000001
	rdi_1659 = DPB(rdi_1561, edi_1658, 0) (alias)
	dil_1660 = (byte) edi_1658 (alias)
	SCZO_1661 = cond(edi_1658 - 0x0000000A)
	Z_1662 = SCZO_1661 (alias)
	branch Test(EQ,Z_1662) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C7CE:
	r10_1663 = r8_1538 + 0x0000000000000001
	r10d_1664 = (word32) r10_1663 (alias)
	r10b_1665 = (byte) r10_1663 (alias)
	SCZO_1666 = cond(r10_1663 - 0x000000000000000A)
	Z_1667 = SCZO_1666 (alias)
	branch Test(NE,Z_1667) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C7FF:
	rcx_1677 = 0x0000000000000000
	ecx_1678 = (word32) rcx_1677 (alias)
	cl_1679 = (byte) rcx_1677 (alias)
	SZO_1680 = cond(0x00000000)
	C_1681 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C790:
	r10b_1634 = PHI(r10b_1665, r10b_1544)
	r10d_1635 = PHI(r10d_1664, r10d_1543)
	dil_1636 = PHI(dil_1660, dil_1563)
	edi_1637 = PHI(edi_1658, edi_1562)
	r10_1638 = PHI(r10_1663, r10_1542)
	ecx_1639 = PHI(ecx_1678, ecx_1569)
	rcx_1640 = PHI(rcx_1677, rcx_1570)
	cl_1641 = PHI(cl_1679, cl_1571)
	rdi_1642 = PHI(rdi_1659, rdi_1561)
	SCZO_1643 = PHI(SCZO_1666, SCZO_1596)
	SZO_1644 = cond(bLocB0 & 0x08)
	Z_1645 = SZO_1644 (alias)
	C_1646 = false
	branch Test(NE,Z_1645) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C7C2:
	r8_1652 = qwLocB8_144
	rdi_1653 = 0x0000000000000000
	edi_1654 = (word32) rdi_1653 (alias)
	dil_1655 = (byte) rdi_1653 (alias)
	SZO_1656 = cond(0x00000000)
	C_1657 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C797:
	rdi_1647 = 0x0000000000000000
	edi_1648 = (word32) rdi_1647 (alias)
	dil_1649 = (byte) rdi_1647 (alias)
	SZO_1650 = cond(0x00000000)
	C_1651 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C7D8:
	r8_1668 = qwLocB8_144
	rcx_1669 = 0x0000000000000000
	ecx_1670 = (word32) rcx_1669 (alias)
	cl_1671 = (byte) rcx_1669 (alias)
	rdi_1672 = 0x0000000000000000
	edi_1673 = (word32) rdi_1672 (alias)
	dil_1674 = (byte) rdi_1672 (alias)
	SZO_1675 = cond(0x00000000)
	C_1676 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C4DB:
	edi_1602 = PHI(edi_1658, edi_1562, edi_1648)
	r10_1603 = PHI(r10_1542, r10_1542, r10_1638)
	Z_1604 = PHI(Z_1662, Z_1683, Z_1645)
	SCZO_1605 = PHI(SCZO_1661, SCZO_1596, SCZO_1643)
	rax_1606 = qwLocA0_39
	rdi_1607 = (uint64) (edi_1602 + 0x00000030)
	dil_1608 = (byte) rdi_1607 (alias)
	rdx_1609 = r11_138
	rsi_1610 = r15_130
	dwLoc74_1611 = r9d_1321
	qwLoc90_1612 = r10_1603
	qwLoc80_1613 = r11_138
	r8_1614 = r8_1538 + 0x0000000000000287
	Mem1615[rax_1606 + 0x0000000000000287:byte] = dil_1608
	r8_1616 = r8_1614 - r11_138
	rdi_1617 = r8_1616
	rax_1618 = memcpy(rdi_1617, rsi_1610, rdx_1609)
	r11_1619 = qwLoc80_1613
	r10_1620 = qwLoc90_1612
	r10d_1621 = (word32) r10_1620 (alias)
	r10b_1622 = (byte) r10_1620 (alias)
	r8_1623 = rax_1618
	r9_1624 = (uint64) dwLoc74_1611
	r9d_1625 = (word32) r9_1624 (alias)
	rcx_1626 = 0x0000000000000000
	ecx_1627 = (word32) rcx_1626 (alias)
	cl_1628 = (byte) rcx_1626 (alias)
	rdi_1629 = 0x0000000000000000
	edi_1630 = (word32) rdi_1629 (alias)
	dil_1631 = (byte) rdi_1629 (alias)
	SZO_1632 = cond(0x00000000)
	C_1633 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C174:
	SCZO_1583 = cond(ebx_1576 - 0x00000008)
	Z_1584 = SCZO_1583 (alias)
	branch Test(EQ,Z_1584) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C768:
	CZ_1579 = PHI(CZ_1578, CZ_1586)
	Z_1580 = PHI(Z_1584, Z_1573)
	SCZO_1581 = PHI(SCZO_1583, SCZO_1585)
	r8_1582 = qwLocB8_144
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C530:
	dwLoc74_1325 = PHI(dwLoc74, dwLoc74, dwLoc74_1611, dwLoc74, dwLoc74, dwLoc74)
	qwLoc90_1326 = PHI(qwLoc90, qwLoc90, qwLoc90_1612, qwLoc90, qwLoc90, qwLoc90)
	qwLoc80_1327 = PHI(qwLoc80_132, qwLoc80_132, qwLoc80_1613, qwLoc80_132, qwLoc80_132, qwLoc80_132)
	r10b_1328 = PHI(r10b_1289, r10b_1544, r10b_1622, r10b_1665, r10b_1634, r10b_1289)
	r10d_1329 = PHI(r10d_1290, r10d_1543, r10d_1621, r10d_1664, r10d_1635, r10d_1290)
	dil_1330 = PHI(dil_1291, dil_1563, dil_1631, dil_1674, dil_1655, dil_1291)
	sil_1331 = PHI(sil_1512, sil_1512, sil_1589, sil_1589, sil_1589, sil_1292)
	esi_1332 = PHI(esi_1513, esi_1513, esi_1590, esi_1590, esi_1590, esi_1294)
	edi_1333 = PHI(edi_1295, edi_1562, edi_1630, edi_1673, edi_1654, edi_1295)
	r10_1334 = PHI(r10_1296, r10_1542, r10_1620, r10_1663, r10_1638, r10_1296)
	r11_1335 = PHI(r11_138, r11_138, r11_1619, r11_138, r11_138, r11_138)
	r8_1336 = PHI(r8_1731, r8_1582, r8_1623, r8_1668, r8_1652, r8_1317)
	r9_1337 = PHI(r9_1320, r9_1320, r9_1624, r9_1320, r9_1320, r9_1320)
	r9d_1338 = PHI(r9d_1321, r9d_1321, r9d_1625, r9d_1321, r9d_1321, r9d_1321)
	r14d_1339 = PHI(r14d_95, r14d_1560, r14d_1560, r14d_1560, r14d_1560, r14d_95)
	CZ_1340 = PHI(CZ_1298, CZ_1579, CZ_1586, CZ_1586, CZ_1586, CZ_1298)
	ebx_1341 = PHI(ebx_1733, ebx_1576, ebx_1576, ebx_1576, ebx_1576, ebx_1319)
	rsi_1342 = PHI(rsi_1511, rsi_1511, rsi_1610, rsi_1511, rsi_1511, rsi_1299)
	ecx_1343 = PHI(ecx_1300, ecx_1569, ecx_1627, ecx_1670, ecx_1639, ecx_1300)
	rcx_1344 = PHI(rcx_1301, rcx_1570, rcx_1626, rcx_1669, rcx_1640, rcx_1301)
	cl_1345 = PHI(cl_1302, cl_1571, cl_1628, cl_1671, cl_1641, cl_1302)
	rdi_1346 = PHI(rdi_1303, rdi_1561, rdi_1629, rdi_1672, rdi_1653, rdi_1303)
	SZO_1347 = PHI(SZO_1734, SZO_1572, SZO_1632, SZO_1675, SZO_1656, SZO_1322)
	C_1348 = PHI(C_1735, C_1574, C_1633, C_1676, C_1657, C_1324)
	rax_1349 = PHI(rax_1304, rax_1554, rax_1618, rax_1554, rax_1554, rax_1304)
	eax_1350 = PHI(eax_1305, eax_1553, eax_1553, eax_1553, eax_1553, eax_1305)
	ah_1351 = PHI(ah_1306, ah_1557, ah_1557, ah_1557, ah_1557, ah_1306)
	ax_1352 = PHI(ax_1307, ax_1558, ax_1558, ax_1558, ax_1558, ax_1307)
	al_1353 = PHI(al_1308, al_1559, al_1559, al_1559, al_1559, al_1308)
	rdx_1354 = PHI(rdx_1309, rdx_1552, rdx_1609, rdx_1591, rdx_1591, rdx_1309)
	edx_1355 = PHI(edx_1310, edx_1551, edx_1592, edx_1592, edx_1592, edx_1310)
	rdx_rax_1356 = PHI(rdx_rax_1311, rdx_rax_1555, rdx_rax_1593, rdx_rax_1593, rdx_rax_1593, rdx_rax_1311)
	edx_eax_1357 = PHI(edx_eax_1312, edx_eax_1556, edx_eax_1594, edx_eax_1594, edx_eax_1594, edx_eax_1312)
	dl_1358 = PHI(dl_1313, dl_1313, dl_1595, dl_1595, dl_1595, dl_1313)
	rbx_1359 = PHI(rbx_1732, rbx_1575, rbx_1575, rbx_1575, rbx_1575, rbx_1318)
	r12_1360 = PHI(r12_72, r12_1520, r12_1597, r12_1597, r12_1597, r12_72)
	r12d_1361 = PHI(r12d_93, r12d_1521, r12d_1598, r12d_1598, r12d_1598, r12d_93)
	r12b_1362 = PHI(r12b_106, r12b_1522, r12b_1522, r12b_1522, r12b_1522, r12b_106)
	SCZO_1363 = cond(dwLoc98_36 - 0x00000001)
	Z_1364 = SCZO_1363 (alias)
	branch Test(EQ,Z_1364) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C6F0:
	rax_1492 = r10_1334
	eax_1493 = (word32) rax_1492 (alias)
	rcx_1494 = (int64) ecx_1343
	rax_1495 = (uint64) (eax_1493 & 0x00000001)
	rax_1496 = rax_1495 + rcx_1494
	SCZO_1497 = cond(rax_1496)
	Z_1498 = SCZO_1497 (alias)
	al_1499 = Test(NE,Z_1498)
	eax_1500 = (word32) al_1499
	rdi_1501 = (uint64) (edi_1333 + eax_1500)
	edi_1502 = (word32) rdi_1501 (alias)
	SCZO_1503 = cond(edi_1502 - 0x00000005)
	SZO_1504 = SCZO_1503 (alias)
	al_1505 = Test(GT,SZO_1504)
	eax_1506 = DPB(eax_1500, al_1505, 0) (alias)
	rax_1507 = DPB(rax_1496, al_1505, 0) (alias)
	rdx_rax_1508 = DPB(rdx_rax_1356, al_1505, 0) (alias)
	edx_eax_1509 = DPB(edx_eax_1357, al_1505, 0) (alias)
	ax_1510 = DPB(ax_1352, al_1505, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C53B:
	rsi_1471 = (uint64) dwLoc98_36
	esi_1472 = (word32) rsi_1471 (alias)
	rax_1473 = 0x0000000000000000
	eax_1474 = (word32) rax_1473 (alias)
	rdx_rax_1475 = SEQ(rdx_1354, rax_1473) (alias)
	edx_eax_1476 = rax_1473 (alias)
	ax_1477 = (word16) rax_1473 (alias)
	al_1478 = (byte) rax_1473 (alias)
	SZO_1479 = cond(esi_1472 & esi_1472)
	Z_1480 = SZO_1479 (alias)
	C_1481 = false
	branch Test(NE,Z_1480) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C545:
	rcx_1482 = (uint64) (ecx_1343 + edi_1333)
	ecx_1483 = (word32) rcx_1482 (alias)
	SZO_1484 = cond(ecx_1483 & ecx_1483)
	C_1485 = false
	al_1486 = Test(GT,SZO_1484)
	eax_1487 = DPB(eax_1474, al_1486, 0) (alias)
	rax_1488 = DPB(rax_1473, al_1486, 0) (alias)
	rdx_rax_1489 = DPB(rdx_rax_1475, al_1486, 0) (alias)
	edx_eax_1490 = DPB(edx_eax_1476, al_1486, 0) (alias)
	ax_1491 = DPB(ax_1477, al_1486, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C54C:
	esi_1365 = PHI(esi_1472, esi_1472, esi_1332)
	edi_1366 = PHI(edi_1333, edi_1333, edi_1502)
	rsi_1367 = PHI(rsi_1471, rsi_1471, rsi_1342)
	ecx_1368 = PHI(ecx_1343, ecx_1483, ecx_1343)
	rcx_1369 = PHI(rcx_1344, rcx_1482, rcx_1494)
	rdi_1370 = PHI(rdi_1346, rdi_1346, rdi_1501)
	rax_1371 = PHI(rax_1473, rax_1488, rax_1507)
	eax_1372 = PHI(eax_1474, eax_1487, eax_1506)
	ax_1373 = PHI(ax_1477, ax_1491, ax_1510)
	al_1374 = PHI(al_1478, al_1486, al_1505)
	rdx_rax_1375 = PHI(rdx_rax_1475, rdx_rax_1489, rdx_rax_1508)
	edx_eax_1376 = PHI(edx_eax_1476, edx_eax_1490, edx_eax_1509)
	SCZO_1377 = PHI(SCZO_1363, SCZO_1363, SCZO_1503)
	SZO_1378 = cond(al_1374 & al_1374)
	Z_1379 = SZO_1378 (alias)
	C_1380 = false
	branch Test(EQ,Z_1379) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C550:
	r10_1433 = r10_1334 + 0x0000000000000001
	r10d_1434 = (word32) r10_1433 (alias)
	r10b_1435 = (byte) r10_1433 (alias)
	SZO_1436 = cond(r9d_1338 & r9d_1338)
	Z_1437 = SZO_1436 (alias)
	C_1438 = false
	branch Test(EQ,Z_1437) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C559:
	rax_1439 = (uint64) dwLocAC_60
	eax_1440 = (word32) rax_1439 (alias)
	rdx_rax_1441 = SEQ(rdx_1354, rax_1439) (alias)
	edx_eax_1442 = rax_1439 (alias)
	ah_1443 = SLICE(rax_1439, byte, 8) (alias)
	ax_1444 = (word16) rax_1439 (alias)
	al_1445 = (byte) rax_1439 (alias)
	SCZO_1446 = cond(rax_1439 - r10_1433)
	Z_1447 = SCZO_1446 (alias)
	branch Test(NE,Z_1447) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C562:
	SCZO_1448 = cond(ebx_1341 - 0x00000008)
	Z_1449 = SCZO_1448 (alias)
	branch Test(EQ,Z_1449) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C567:
	rbx_1450 = (uint64) (ebx_1341 + 0x00000001)
	ebx_1451 = (word32) rbx_1450 (alias)
	SZO_1452 = cond(bLocB0 & 0x08)
	Z_1453 = SZO_1452 (alias)
	C_1454 = false
	r10_1455 = 0x0000000000000001
	r10d_1456 = (word32) r10_1455 (alias)
	r10b_1457 = (byte) r10_1455 (alias)
	branch Test(NE,Z_1453) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C577:
	rax_1458 = rax_1439 - 0x0000000000000001
	Mem1459[rax_1458 - 0x0000000000000001:byte] = 0x30
	rdx_1460 = r11_1335
	rsi_1461 = r15_130
	qwLoc98_1462 = 0x0000000000000001
	rax_1463 = rax_1458 - r11_1335
	SCZO_1464 = cond(rax_1463)
	rdi_1465 = rax_1463
	rax_1466 = memcpy(rdi_1465, rsi_1461, rdx_1460)
	r10_1467 = 0x0000000000000001
	r10d_1468 = (word32) r10_1467 (alias)
	r10b_1469 = (byte) r10_1467 (alias)
	r8_1470 = rax_1466
// DataOut: ebx fs r10 r10b r11 r11d r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:0x0000000000000001 r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C5A0:
	qwLoc98_1381 = PHI(qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98_1462)
	r10b_1382 = PHI(r10b_1328, r10b_1435, r10b_1435, r10b_1435, r10b_1457, r10b_1469)
	r10d_1383 = PHI(r10d_1329, r10d_1434, r10d_1434, r10d_1434, r10d_1456, r10d_1468)
	r10_1384 = PHI(r10_1334, r10_1433, r10_1433, r10_1433, r10_1455, r10_1467)
	r8_1385 = PHI(r8_1336, r8_1336, r8_1336, r8_1336, r8_1336, r8_1470)
	ebx_1386 = PHI(ebx_1341, ebx_1341, ebx_1341, ebx_1341, ebx_1451, ebx_1451)
	rsi_1387 = PHI(rsi_1367, rsi_1367, rsi_1367, rsi_1367, rsi_1367, rsi_1461)
	rdi_1388 = PHI(rdi_1370, rdi_1370, rdi_1370, rdi_1370, rdi_1370, rdi_1465)
	SZO_1389 = PHI(SZO_1378, SZO_1436, SZO_1436, SZO_1436, SZO_1452, SZO_1452)
	Z_1390 = PHI(Z_1379, Z_1437, Z_1447, Z_1449, Z_1453, Z_1453)
	C_1391 = PHI(C_1380, C_1438, C_1438, C_1438, C_1454, C_1454)
	rax_1392 = PHI(rax_1371, rax_1371, rax_1439, rax_1439, rax_1439, rax_1466)
	eax_1393 = PHI(eax_1372, eax_1372, eax_1440, eax_1440, eax_1440, eax_1440)
	ah_1394 = PHI(ah_1351, ah_1351, ah_1443, ah_1443, ah_1443, ah_1443)
	ax_1395 = PHI(ax_1373, ax_1373, ax_1444, ax_1444, ax_1444, ax_1444)
	al_1396 = PHI(al_1374, al_1374, al_1445, al_1445, al_1445, al_1445)
	rdx_1397 = PHI(rdx_1354, rdx_1354, rdx_1354, rdx_1354, rdx_1354, rdx_1460)
	rdx_rax_1398 = PHI(rdx_rax_1375, rdx_rax_1375, rdx_rax_1441, rdx_rax_1441, rdx_rax_1441, rdx_rax_1441)
	edx_eax_1399 = PHI(edx_eax_1376, edx_eax_1376, edx_eax_1442, edx_eax_1442, edx_eax_1442, edx_eax_1442)
	SCZO_1400 = PHI(SCZO_1377, SCZO_1377, SCZO_1446, SCZO_1448, SCZO_1448, SCZO_1464)
	rbx_1401 = PHI(rbx_1359, rbx_1359, rbx_1359, rbx_1359, rbx_1450, rbx_1450)
	r12_1402 = r8_1385
	r12d_1403 = (word32) r12_1402 (alias)
	r12b_1404 = (byte) r12_1402 (alias)
	rcx_1405 = 0x00000000CCCCCCCD
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C5B0:
	r10_1406 = PHI(r10_1384, r10_1425)
	r12_1407 = PHI(r12_1402, r12_1409)
	rax_1408 = r10_1406
	r12_1409 = r12_1407 - 0x0000000000000001
	r12d_1410 = (word32) r12_1409 (alias)
	r12b_1411 = (byte) r12_1409 (alias)
	rdx_rax_1412 = 0x00000000CCCCCCCD *u rax_1408
	rdx_1413 = SLICE(rdx_rax_1412, word64, 64) (alias)
	rdx_1414 = rdx_1413 >>u 0x0000000000000003
	rax_1415 = rdx_1414 + rdx_1414 * 0x0000000000000004
	rax_1416 = rax_1415 + rax_1415
	r10_1417 = r10_1406 - rax_1416
	r10d_1418 = (word32) r10_1417 (alias)
	r10_1419 = (uint64) (r10d_1418 + 0x00000030)
	r10b_1420 = (byte) r10_1419 (alias)
	SZO_1421 = cond(rdx_1414 & rdx_1414)
	Z_1422 = SZO_1421 (alias)
	C_1423 = false
	Mem1424[r12_1409:byte] = r10b_1420
	r10_1425 = rdx_1414
	r10d_1426 = (word32) r10_1425 (alias)
	r10b_1427 = (byte) r10_1425 (alias)
	branch Test(NE,Z_1422) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C5D8:
// DataOut: ebx fs r10 r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BE59:
	r10b_638 = PHI(r10b_105, r10b_105, r10b_105, r10b_1758)
	r10d_639 = PHI(r10d_104, r10d_104, r10d_104, r10d_1757)
	sil_640 = PHI(sil_100, sil_100, sil_1789, sil_100)
	esi_641 = PHI(esi_92, esi_92, esi_1790, esi_92)
	r10_642 = PHI(r10_87, r10_87, r10_87, r10_1756)
	rsi_643 = PHI(rsi_70, rsi_70, rsi_1788, rsi_70)
	ecx_644 = PHI(ecx_1752, ecx_80, ecx_80, ecx_1752)
	rcx_645 = PHI(rcx_1751, rcx_76, rcx_76, rcx_1751)
	cl_646 = PHI(cl_1753, cl_89, cl_89, cl_1753)
	Z_647 = PHI(Z_1749, Z_1775, Z_1786, Z_1765)
	rax_648 = PHI(rax_1741, rax_140, rax_1784, rax_1763)
	eax_649 = PHI(eax_1742, eax_133, eax_133, eax_1742)
	ah_650 = PHI(ah_1745, ah_96, ah_96, ah_1745)
	ax_651 = PHI(ax_1746, ax_97, ax_97, ax_1746)
	al_652 = PHI(al_1747, al_102, al_102, al_1747)
	rdx_653 = PHI(rdx_1740, rdx_117, rdx_1783, rdx_1762)
	rdx_rax_654 = PHI(rdx_rax_1743, rdx_rax, rdx_rax_1781, rdx_rax_1760)
	edx_eax_655 = PHI(edx_eax_1744, edx_eax, edx_eax, edx_eax_1744)
	SCZO_656 = PHI(SCZO_142, SCZO_142, SCZO_142, SCZO_1764)
	qwLoc68_657 = r12_72
	SZO_658 = cond(r12_72 & r12_72)
	S_659 = SZO_658 (alias)
	C_660 = false
	rLoc1_661 = (real64) qwLoc68_657
	branch (r12_72 & r12_72) < 0x0000000000000000 l000000000040C5F0
// DataOut: bx fs r10 r11 r11d r13 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C5F0:
	rLoc1_1283 = rLoc1_661 + Mem0[0x0000000000415F08:real32]
	qwLoc68_1284 = rbx_75
	SZO_1285 = cond(rbx_75 & rbx_75)
	S_1286 = SZO_1285 (alias)
	C_1287 = false
	rLoc2_1288 = (real64) qwLoc68_1284
	branch Test(NS,S_1286) l000000000040BE7D
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BE6B:
	qwLoc68_1278 = rbx_75
	SZO_1279 = cond(rbx_75 & rbx_75)
	S_1280 = SZO_1279 (alias)
	C_1281 = false
	rLoc2_1282 = (real64) qwLoc68_1278
	branch Test(SG,S_1280) l000000000040C608
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C608:
	rLoc2_1271 = PHI(rLoc2_1282, rLoc2_1288)
	qwLoc68_1272 = PHI(qwLoc68_1278, qwLoc68_1284)
	rLoc1_1273 = PHI(rLoc1_661, rLoc1_1283)
	S_1274 = PHI(S_1280, S_1286)
	SZO_1275 = PHI(SZO_1279, SZO_1285)
	C_1276 = PHI(C_1281, C_1287)
	rLoc2_1277 = rLoc2_1271 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BE7D:
	rLoc2_662 = PHI(rLoc2_1282, rLoc2_1277, rLoc2_1288)
	rLoc1_663 = PHI(rLoc1_661, rLoc1_1273, rLoc1_1283)
	rax_664 = qwLocA8_44
	qwLoc68_665 = rax_664
	SZO_666 = cond(rax_664 & rax_664)
	S_667 = SZO_666 (alias)
	C_668 = false
	rLoc3_669 = (real64) qwLoc68_665
	branch (rax_664 & rax_664) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C5E0:
	rLoc3_1270 = rLoc3_669 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BE94:
	rLoc3_670 = PHI(rLoc3_669, rLoc3_1270)
	SZO_671 = cond(bLocB0 & 0x10)
	Z_672 = SZO_671 (alias)
	C_673 = false
	rLoc2_674 = rLoc2_662 / rLoc3_670
	rLoc1_675 = rLoc1_663 * rLoc2_674
	branch (bLocB0 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C1B8:
	SCZO_1107 = cond(dwLoc98_36 - 0x00000001)
	Z_1108 = SCZO_1107 (alias)
	branch Test(EQ,Z_1108) l000000000040C1CD
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C1BF:
	rLoc2_1149 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1150 = cond(rLoc2_1149 - rLoc1_675)
	CZ_1151 = CZP_1150 (alias)
	branch Test(UGT,CZ_1151) l000000000040C408
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C408:
	rLoc2_1152 = (real64) Mem0[0x0000000000415F0C:real32]
	v69_1153 = rLoc2_1152
	rLoc2_1154 = rLoc1_675
	rLoc1_1155 = v69_1153
	CZP_1156 = cond(rLoc2_1154 - rLoc1_1155)
	C_1157 = CZP_1156 (alias)
	branch Test(UGE,C_1157) l000000000040C6A0
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C6A0:
	wLoc6A_1248 = __fstcw()
	eax_1249 = (word32) wLoc6A_1248
	ah_1250 = SLICE(eax_1249, byte, 8) (alias)
	rLoc2_1251 = rLoc2_1154 - rLoc1_1155
	v70_1252 = rLoc2_1251
	rLoc2_1253 = rLoc1_1155
	rLoc1_1254 = v70_1252
	rdx_1255 = 0x0000000000000000
	ah_1256 = ah_1250 | 0x0C
	ax_1257 = DPB(ax_651, ah_1256, 8) (alias)
	wLoc6C_1258 = ax_1257
	__fldcw(wLoc6C_1258)
	qwLoc68_1259 = (int64) rLoc2_1253
	__fldcw(wLoc6A_1248)
	rax_1260 = qwLoc68_1259
	rax_1261 = rax_1260 ^ 0x0000000000000000
	eax_1262 = (word32) rax_1261 (alias)
	rdx_rax_1263 = SEQ(rdx_1255, rax_1261) (alias)
	edx_eax_1264 = rax_1261 (alias)
	ah_1265 = SLICE(rax_1261, byte, 8) (alias)
	ax_1266 = (word16) rax_1261 (alias)
	al_1267 = (byte) rax_1261 (alias)
	SZO_1268 = cond(rax_1261)
	C_1269 = false
// DataOut: ax fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C418:
	rLoc1_1230 = rLoc2_1154
	wLoc6A_1231 = __fstcw()
	eax_1232 = (word32) wLoc6A_1231
	ah_1233 = SLICE(eax_1232, byte, 8) (alias)
	ah_1234 = ah_1233 | 0x0C
	ax_1235 = DPB(ax_651, ah_1234, 8) (alias)
	SZO_1236 = cond(ah_1234)
	C_1237 = false
	wLoc6C_1238 = ax_1235
	rLoc2_1239 = rLoc2_1154
	__fldcw(wLoc6C_1238)
	qwLoc68_1240 = (int64) rLoc2_1239
	__fldcw(wLoc6A_1231)
	rax_1241 = qwLoc68_1240
	eax_1242 = (word32) rax_1241 (alias)
	rdx_rax_1243 = SEQ(rdx_653, rax_1241) (alias)
	edx_eax_1244 = rax_1241 (alias)
	ah_1245 = SLICE(rax_1241, byte, 8) (alias)
	ax_1246 = (word16) rax_1241 (alias)
	al_1247 = (byte) rax_1241 (alias)
// DataOut: ax fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C43E:
	wLoc6A_1158 = PHI(wLoc6A_1231, wLoc6A_1248)
	wLoc6C_1159 = PHI(wLoc6C_1238, wLoc6C_1258)
	rLoc2_1160 = PHI(rLoc2_1239, rLoc2_1253)
	qwLoc68_1161 = PHI(qwLoc68_1240, qwLoc68_1259)
	rLoc1_1162 = PHI(rLoc1_1230, rLoc1_1254)
	rax_1163 = PHI(rax_1241, rax_1261)
	eax_1164 = PHI(eax_1242, eax_1262)
	ah_1165 = PHI(ah_1245, ah_1265)
	ax_1166 = PHI(ax_1246, ax_1266)
	al_1167 = PHI(al_1247, al_1267)
	rsi_1168 = (uint64) dwLoc98_36
	esi_1169 = (word32) rsi_1168 (alias)
	rdx_1170 = 0x0000000000000000
	edx_1171 = (word32) rdx_1170 (alias)
	rdx_rax_1172 = SEQ(rdx_1170, rax_1163) (alias)
	edx_eax_1173 = rdx_1170 (alias)
	dl_1174 = (byte) rdx_1170 (alias)
	SZO_1175 = cond(esi_1169 & esi_1169)
	Z_1176 = SZO_1175 (alias)
	C_1177 = false
	branch Test(NE,Z_1176) l000000000040C470
// DataOut: ax fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C470:
	rLoc1_1229 = rLoc1_1162
// DataOut: fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C448:
	qwLoc68_1197 = rax_1163
	SZO_1198 = cond(rax_1163 & rax_1163)
	S_1199 = SZO_1198 (alias)
	C_1200 = false
	rLoc2_1201 = (real64) qwLoc68_1197
	branch Test(SG,S_1199) l000000000040C772
// DataOut: fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C772:
	rLoc2_1228 = rLoc2_1201 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C45A:
	rLoc2_1202 = PHI(rLoc2_1201, rLoc2_1228)
	rcx_1203 = 0x0000000000000000
	ecx_1204 = (word32) rcx_1203 (alias)
	SZO_1205 = cond(ecx_1204)
	rdx_1206 = 0x0000000000000001
	edx_1207 = (word32) rdx_1206 (alias)
	rdx_rax_1208 = SEQ(rdx_1206, rax_1163) (alias)
	edx_eax_1209 = rdx_1206 (alias)
	dl_1210 = (byte) rdx_1206 (alias)
	CZP_1211 = cond(rLoc2_1202 - rLoc1_1162)
	Z_1212 = CZP_1211 (alias)
	P_1213 = CZP_1211 (alias)
	rLoc1_1214 = rLoc1_1162
	cl_1215 = Test(PE,P_1213)
	rcx_1216 = DPB(rcx_1203, cl_1215, 0) (alias)
	ecx_1217 = DPB(ecx_1204, cl_1215, 0) (alias)
	branch Test(NE,Z_1212) l000000000040C46C
// DataOut: fs r10 r11 r11d r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C468_1:
	rdx_1223 = rcx_1216
	edx_1224 = (word32) rdx_1223 (alias)
	rdx_rax_1225 = SEQ(rdx_1223, rax_1163) (alias)
	edx_eax_1226 = rdx_1223 (alias)
	dl_1227 = (byte) rdx_1223 (alias)
// DataOut: fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C46C:
	rdx_1218 = PHI(rdx_1206, rdx_1223)
	edx_1219 = PHI(edx_1207, edx_1224)
	rdx_rax_1220 = PHI(rdx_rax_1208, rdx_rax_1225)
	edx_eax_1221 = PHI(edx_eax_1209, edx_eax_1226)
	dl_1222 = PHI(dl_1210, dl_1227)
// DataOut: fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C472:
	rLoc2_1178 = PHI(rLoc2_1202, rLoc2_1160)
	P_1179 = PHI(P_1213, P_98)
	CZP_1180 = PHI(CZP_1211, CZP_1156)
	ecx_1181 = PHI(ecx_1217, ecx_644)
	rcx_1182 = PHI(rcx_1216, rcx_645)
	cl_1183 = PHI(cl_1215, cl_646)
	Z_1184 = PHI(Z_1212, Z_1176)
	rdx_1185 = PHI(rdx_1218, rdx_1170)
	edx_1186 = PHI(edx_1219, edx_1171)
	rdx_rax_1187 = PHI(rdx_rax_1220, rdx_rax_1172)
	edx_eax_1188 = PHI(edx_eax_1221, edx_eax_1173)
	dl_1189 = PHI(dl_1222, dl_1174)
	rax_1190 = rax_1163 + rdx_1185
	qwLoc68_1191 = rax_1190
	SZO_1192 = cond(rax_1190 & rax_1190)
	S_1193 = SZO_1192 (alias)
	C_1194 = false
	rLoc1_1195 = (real64) qwLoc68_1191
	branch Test(NS,S_1193) l000000000040C1CD
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C487:
	rLoc1_1196 = rLoc1_1195 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C1CD:
	wLoc6A_1109 = PHI(wLoc6A, wLoc6A, wLoc6A_1158, wLoc6A_1158)
	wLoc6C_1110 = PHI(wLoc6C, wLoc6C, wLoc6C_1159, wLoc6C_1159)
	rLoc2_1111 = PHI(rLoc2_674, rLoc2_1149, rLoc2_1178, rLoc2_1178)
	qwLoc68_1112 = PHI(qwLoc68_665, qwLoc68_665, qwLoc68_1191, qwLoc68_1191)
	rLoc1_1113 = PHI(rLoc1_675, rLoc1_675, rLoc1_1195, rLoc1_1196)
	P_1114 = PHI(P_98, P_98, P_1179, P_1179)
	CZP_1115 = PHI(CZP_124, CZP_1150, CZP_1180, CZP_1180)
	esi_1116 = PHI(esi_641, esi_641, esi_1169, esi_1169)
	S_1117 = PHI(S_667, S_667, S_1193, S_1193)
	CZ_1118 = PHI(CZ_143, CZ_1151, CZ_1151, CZ_1151)
	ecx_1119 = PHI(ecx_644, ecx_644, ecx_1181, ecx_1181)
	cl_1120 = PHI(cl_646, cl_646, cl_1183, cl_1183)
	Z_1121 = PHI(Z_1108, Z_1108, Z_1184, Z_1184)
	ah_1122 = PHI(ah_650, ah_650, ah_1165, ah_1165)
	ax_1123 = PHI(ax_651, ax_651, ax_1166, ax_1166)
	al_1124 = PHI(al_652, al_652, al_1167, al_1167)
	edx_1125 = PHI(edx_65, edx_65, edx_1186, edx_1186)
	rdx_rax_1126 = PHI(rdx_rax_654, rdx_rax_654, rdx_rax_1187, rdx_rax_1187)
	edx_eax_1127 = PHI(edx_eax_655, edx_eax_655, edx_eax_1188, edx_eax_1188)
	dl_1128 = PHI(dl_99, dl_99, dl_1189, dl_1189)
	rLocD0_1129 = (real80) rLoc1_1113
	rbx_1130 = qwLocA0_39
	rcx_1131 = 0x0000000000415F18
	rdx_1132 = 0xFFFFFFFFFFFFFFFF
	rsi_1133 = 0x0000000000000001
	rax_1134 = 0x0000000000000000
	r14_1135 = 0x0000000000000000
	r14d_1136 = (word32) r14_1135 (alias)
	SZO_1137 = cond(r14d_1136)
	C_1138 = false
	rdi_1139 = rbx_1130
	eax_1140 = __sprintf_chk(rdi_1139, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_1141 = rbx_1130
	rbx_1142 = 0x00000000FFFFFFFF
	ebx_1143 = (word32) rbx_1142 (alias)
	eax_1144 = strlen(rdi_1141)
	rax_1145 = DPB(rax_1134, eax_1144, 0) (alias)
	r15_1146 = rax_1145
	r15d_1147 = (word32) r15_1146 (alias)
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BEA3:
	rLoc2_726 = (real64) dwLocAC_60
	rbx_727 = 0x0000000000000000
	ebx_728 = (word32) rbx_727 (alias)
	SZO_729 = cond(ebx_728)
	C_730 = false
	rLoc3_731 = rLoc3_670
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BEB4:
	rLoc4_733 = PHI(rLoc4, rLoc4_744)
	rLoc3_734 = PHI(rLoc3_731, rLoc3_1103)
	rLoc1_735 = PHI(rLoc1_675, rLoc1_1104)
	ebx_736 = PHI(ebx_728, ebx_740)
	Z_737 = PHI(Z_672, Z_1098)
	rLoc4_738 = rLoc4_733
	rbx_739 = (uint64) (ebx_736 + 0x00000001)
	ebx_740 = (word32) rbx_739 (alias)
	SCZO_741 = cond(ebx_740)
	rLoc4_742 = rLoc4_738 * rLoc2_726
	v45_743 = rLoc4_742
	rLoc4_744 = rLoc1_735
	rLoc1_745 = v45_743
	CZP_746 = cond(rLoc4_744 - rLoc1_745)
	C_747 = CZP_746 (alias)
	branch rLoc4_744 <u rLoc1_745 l000000000040BED0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BED0:
	rLoc2_1105 = rLoc4_744
	rLoc1_1106 = rLoc3_734
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BEC1:
	SCZO_1097 = cond(ebx_740 - 0x00000008)
	Z_1098 = SCZO_1097 (alias)
	branch Test(NE,Z_1098) l000000000040BEB0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BEB0:
	rLoc3_1101 = rLoc4_744
	v55_1102 = rLoc3_1101
	rLoc3_1103 = rLoc1_745
	rLoc1_1104 = v55_1102
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BEC6:
	rLoc2_1099 = rLoc4_744
	rLoc1_1100 = rLoc3_734
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BED4:
	rLoc2_748 = PHI(rLoc2_1099, rLoc2_1105)
	rLoc1_749 = PHI(rLoc1_1100, rLoc1_1106)
	rLoc1_750 = rLoc2_748 / rLoc1_749
	SCZO_751 = cond(dwLoc98_36 - 0x00000001)
	Z_752 = SCZO_751 (alias)
	rLoc2_753 = rLoc2_748
	branch dwLoc98_36 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF70:
	v66_1094 = rLoc2_753
	rLoc2_1095 = rLoc1_750
	rLoc1_1096 = v66_1094
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BEE3:
	rLoc2_971 = rLoc2_753
	rLoc2_972 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_973 = cond(rLoc2_972 - rLoc1_750)
	CZ_974 = CZP_973 (alias)
	branch Test(ULE,CZ_974) l000000000040C498
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C498:
	rLoc2_1091 = rLoc2_972
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BEF3:
	rLoc2_975 = (real64) Mem0[0x0000000000415F0C:real32]
	v51_976 = rLoc2_975
	rLoc2_977 = rLoc1_750
	rLoc1_978 = v51_976
	CZP_979 = cond(rLoc2_977 - rLoc1_978)
	C_980 = CZP_979 (alias)
	branch Test(UGE,C_980) l000000000040C660
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C660:
	wLoc6A_1069 = __fstcw()
	eax_1070 = (word32) wLoc6A_1069
	ah_1071 = SLICE(eax_1070, byte, 8) (alias)
	rLoc2_1072 = rLoc2_977 - rLoc1_978
	v60_1073 = rLoc2_1072
	rLoc2_1074 = rLoc1_978
	rLoc1_1075 = v60_1073
	rdx_1076 = 0x0000000000000000
	ah_1077 = ah_1071 | 0x0C
	ax_1078 = DPB(ax_651, ah_1077, 8) (alias)
	wLoc6C_1079 = ax_1078
	__fldcw(wLoc6C_1079)
	qwLoc68_1080 = (int64) rLoc2_1074
	__fldcw(wLoc6A_1069)
	rax_1081 = qwLoc68_1080
	rax_1082 = rax_1081 ^ 0x0000000000000000
	eax_1083 = (word32) rax_1082 (alias)
	rdx_rax_1084 = SEQ(rdx_1076, rax_1082) (alias)
	edx_eax_1085 = rax_1082 (alias)
	ah_1086 = SLICE(rax_1082, byte, 8) (alias)
	ax_1087 = (word16) rax_1082 (alias)
	al_1088 = (byte) rax_1082 (alias)
	SZO_1089 = cond(rax_1082)
	C_1090 = false
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF03:
	rLoc1_1051 = rLoc2_977
	wLoc6A_1052 = __fstcw()
	eax_1053 = (word32) wLoc6A_1052
	ah_1054 = SLICE(eax_1053, byte, 8) (alias)
	ah_1055 = ah_1054 | 0x0C
	ax_1056 = DPB(ax_651, ah_1055, 8) (alias)
	SZO_1057 = cond(ah_1055)
	C_1058 = false
	wLoc6C_1059 = ax_1056
	rLoc2_1060 = rLoc2_977
	__fldcw(wLoc6C_1059)
	qwLoc68_1061 = (int64) rLoc2_1060
	__fldcw(wLoc6A_1052)
	rax_1062 = qwLoc68_1061
	eax_1063 = (word32) rax_1062 (alias)
	rdx_rax_1064 = SEQ(rdx_653, rax_1062) (alias)
	edx_eax_1065 = rax_1062 (alias)
	ah_1066 = SLICE(rax_1062, byte, 8) (alias)
	ax_1067 = (word16) rax_1062 (alias)
	al_1068 = (byte) rax_1062 (alias)
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF29:
	wLoc6A_981 = PHI(wLoc6A_1052, wLoc6A_1069)
	wLoc6C_982 = PHI(wLoc6C_1059, wLoc6C_1079)
	rLoc2_983 = PHI(rLoc2_1060, rLoc2_1074)
	qwLoc68_984 = PHI(qwLoc68_1061, qwLoc68_1080)
	rLoc1_985 = PHI(rLoc1_1051, rLoc1_1075)
	rax_986 = PHI(rax_1062, rax_1082)
	eax_987 = PHI(eax_1063, eax_1083)
	ah_988 = PHI(ah_1066, ah_1086)
	ax_989 = PHI(ax_1067, ax_1087)
	al_990 = PHI(al_1068, al_1088)
	rcx_991 = (uint64) dwLoc98_36
	ecx_992 = (word32) rcx_991 (alias)
	rdx_993 = 0x0000000000000000
	edx_994 = (word32) rdx_993 (alias)
	rdx_rax_995 = SEQ(rdx_993, rax_986) (alias)
	edx_eax_996 = rdx_993 (alias)
	dl_997 = (byte) rdx_993 (alias)
	SZO_998 = cond(ecx_992 & ecx_992)
	Z_999 = SZO_998 (alias)
	C_1000 = false
	branch Test(NE,Z_999) l000000000040BF55
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF33:
	qwLoc68_1025 = rax_986
	SZO_1026 = cond(rax_986 & rax_986)
	S_1027 = SZO_1026 (alias)
	C_1028 = false
	rLoc2_1029 = (real64) qwLoc68_1025
	branch Test(SG,S_1027) l000000000040C77D
// DataOut: ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C77D:
	rLoc2_1050 = rLoc2_1029 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF45:
	rLoc2_1030 = PHI(rLoc2_1029, rLoc2_1050)
	rcx_1031 = 0x0000000000000000
	ecx_1032 = (word32) rcx_1031 (alias)
	SZO_1033 = cond(ecx_1032)
	rdx_1034 = 0x0000000000000001
	edx_1035 = (word32) rdx_1034 (alias)
	rdx_rax_1036 = SEQ(rdx_1034, rax_986) (alias)
	edx_eax_1037 = rdx_1034 (alias)
	dl_1038 = (byte) rdx_1034 (alias)
	CZP_1039 = cond(rLoc2_1030 - rLoc1_985)
	Z_1040 = CZP_1039 (alias)
	P_1041 = CZP_1039 (alias)
	cl_1042 = Test(PE,P_1041)
	rcx_1043 = DPB(rcx_1031, cl_1042, 0) (alias)
	ecx_1044 = DPB(ecx_1032, cl_1042, 0) (alias)
	branch Test(NE,Z_1040) l000000000040BF55
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF51_1:
	rdx_1045 = rcx_1043
	edx_1046 = (word32) rdx_1045 (alias)
	rdx_rax_1047 = SEQ(rdx_1045, rax_986) (alias)
	edx_eax_1048 = rdx_1045 (alias)
	dl_1049 = (byte) rdx_1045 (alias)
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> cl:Test(PE,P) r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF55:
	P_1001 = PHI(P_1041, P_1041, P_98)
	CZP_1002 = PHI(CZP_1039, CZP_1039, CZP_979)
	ecx_1003 = PHI(ecx_1044, ecx_1044, ecx_992)
	rcx_1004 = PHI(rcx_1043, rcx_1043, rcx_991)
	cl_1005 = PHI(cl_1042, cl_1042, cl_646)
	Z_1006 = PHI(Z_1040, Z_1040, Z_999)
	rdx_1007 = PHI(rdx_1034, rdx_1045, rdx_993)
	edx_1008 = PHI(edx_1035, edx_1046, edx_994)
	rdx_rax_1009 = PHI(rdx_rax_1036, rdx_rax_1047, rdx_rax_995)
	edx_eax_1010 = PHI(edx_eax_1037, edx_eax_1048, edx_eax_996)
	dl_1011 = PHI(dl_1038, dl_1049, dl_997)
	rax_1012 = rax_986 + rdx_1007
	qwLoc68_1013 = rax_1012
	SZO_1014 = cond(rax_1012 & rax_1012)
	S_1015 = SZO_1014 (alias)
	C_1016 = false
	rLoc2_1017 = (real64) qwLoc68_1013
	branch Test(SG,S_1015) l000000000040C758
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C758:
	rLoc2_1021 = rLoc2_1017 + Mem0[0x0000000000415F08:real32]
	v62_1022 = rLoc2_1021
	rLoc2_1023 = rLoc1_985
	rLoc1_1024 = v62_1022
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF6A:
	v59_1018 = rLoc2_1017
	rLoc2_1019 = rLoc1_985
	rLoc1_1020 = v59_1018
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BF72:
	wLoc6A_754 = PHI(wLoc6A_981, wLoc6A_981, wLoc6A, wLoc6A)
	wLoc6C_755 = PHI(wLoc6C_982, wLoc6C_982, wLoc6C, wLoc6C)
	rLoc2_756 = PHI(rLoc2_1019, rLoc2_1023, rLoc2_1091, rLoc2_1095)
	qwLoc68_757 = PHI(qwLoc68_1013, qwLoc68_1013, qwLoc68_665, qwLoc68_665)
	rLoc1_758 = PHI(rLoc1_1020, rLoc1_1024, rLoc1_750, rLoc1_1096)
	P_759 = PHI(P_1001, P_1001, P_98, P_98)
	CZP_760 = PHI(CZP_1002, CZP_1002, CZP_973, CZP_746)
	S_761 = PHI(S_1015, S_1015, S_667, S_667)
	ecx_762 = PHI(ecx_1003, ecx_1003, ecx_644, ecx_644)
	cl_763 = PHI(cl_1005, cl_1005, cl_646, cl_646)
	C_764 = PHI(C_1016, C_1016, C_747, C_747)
	ah_765 = PHI(ah_988, ah_988, ah_650, ah_650)
	ax_766 = PHI(ax_989, ax_989, ax_651, ax_651)
	rdx_rax_767 = PHI(rdx_rax_1009, rdx_rax_1009, rdx_rax_654, rdx_rax_654)
	edx_eax_768 = PHI(edx_eax_1010, edx_eax_1010, edx_eax_655, edx_eax_655)
	dl_769 = PHI(dl_1011, dl_1011, dl_99, dl_99)
	r14_770 = qwLocA0_39
	rdx_771 = 0xFFFFFFFFFFFFFFFF
	rcx_772 = 0x0000000000415F1E
	rsi_773 = 0x0000000000000001
	rax_774 = 0x0000000000000000
	qwLoc80_775 = r11_138
	rdi_776 = r14_770
	rLoc90_777 = (real80) rLoc2_756
	rLocD0_778 = (real80) rLoc1_758
	eax_779 = __sprintf_chk(rdi_776, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F1E)
	rdi_780 = r14_770
	eax_781 = strlen(rdi_780)
	rax_782 = DPB(rax_774, eax_781, 0) (alias)
	r11_783 = qwLoc80_775
	rdx_784 = (uint64) dwLoc78_52
	edx_785 = (word32) rdx_784 (alias)
	r15_786 = rax_782
	r15d_787 = (word32) r15_786 (alias)
	rax_788 = 0x0000000000000000
	rLoc1_789 = (real64) rLoc90_777
	SZO_790 = cond(edx_785 & edx_785)
	Z_791 = SZO_790 (alias)
	r14_792 = r11_783 + 0x0000000000000001
	r14d_793 = (word32) r14_792 (alias)
	al_794 = (edx_785 & edx_785) == 0x00000000
	rax_795 = DPB(rax_788, al_794, 0) (alias)
	rax_796 = r14_792 + 0x0000000000000001 + rax_795
	SCZO_797 = cond(r15_786 - rax_796)
	CZ_798 = SCZO_797 (alias)
	branch r15_786 >u rax_796 l000000000040BFF0
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BFCB:
	SZO_963 = cond(bLocB0 & 0x08)
	Z_964 = SZO_963 (alias)
	C_965 = false
	branch Test(EQ,Z_964) l000000000040C208
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C208:
	rLoc1_970 = rLoc1_789
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BFD6:
	rax_966 = qwLocA0_39
	SCZO_967 = cond(Mem0[rax_966 - 0x0000000000000001 + r15_786:byte] - 0x30)
	Z_968 = SCZO_967 (alias)
	branch Test(NE,Z_968) l000000000040C210
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C210:
	rLoc1_969 = rLoc1_789
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BFE7:
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040BFF0:
	SZO_799 = PHI(SZO_790, SZO_963)
	C_800 = PHI(C_764, C_965)
	rax_801 = PHI(rax_796, rax_966)
	SCZO_802 = cond(dwLoc98_36 - 0x00000001)
	Z_803 = SCZO_802 (alias)
	rLoc1_804 = rLoc1_789 * Mem0[0x0000000000415F84:real32]
	branch dwLoc98_36 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C001:
	rLoc2_842 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_843 = cond(rLoc2_842 - rLoc1_804)
	CZ_844 = CZP_843 (alias)
	branch rLoc2_842 <=u rLoc1_804 l000000000040C0A0
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C00F:
	rLoc2_845 = (real64) Mem0[0x0000000000415F0C:real32]
	v63_846 = rLoc2_845
	rLoc2_847 = rLoc1_804
	rLoc1_848 = v63_846
	CZP_849 = cond(rLoc2_847 - rLoc1_848)
	C_850 = CZP_849 (alias)
	branch rLoc2_847 >=u rLoc1_848 l000000000040C720
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C720:
	wLoc6A_941 = __fstcw()
	eax_942 = (word32) wLoc6A_941
	ah_943 = SLICE(eax_942, byte, 8) (alias)
	rLoc2_944 = rLoc2_847 - rLoc1_848
	v64_945 = rLoc2_944
	rLoc2_946 = rLoc1_848
	rLoc1_947 = v64_945
	rdx_948 = 0x0000000000000000
	ah_949 = ah_943 | 0x0C
	ax_950 = DPB(ax_766, ah_949, 8) (alias)
	wLoc6C_951 = ax_950
	__fldcw(wLoc6C_951)
	qwLoc68_952 = (int64) rLoc2_946
	__fldcw(wLoc6A_941)
	rax_953 = qwLoc68_952
	rax_954 = rax_953 ^ 0x0000000000000000
	eax_955 = (word32) rax_954 (alias)
	rdx_rax_956 = SEQ(rdx_948, rax_954) (alias)
	edx_eax_957 = rax_954 (alias)
	ah_958 = SLICE(rax_954, byte, 8) (alias)
	ax_959 = (word16) rax_954 (alias)
	al_960 = (byte) rax_954 (alias)
	SZO_961 = cond(rax_954)
	C_962 = false
// DataOut: ax eax ebx fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C01F:
	rLoc1_923 = rLoc2_847
	wLoc6A_924 = __fstcw()
	eax_925 = (word32) wLoc6A_924
	ah_926 = SLICE(eax_925, byte, 8) (alias)
	ah_927 = ah_926 | 0x0C
	ax_928 = DPB(ax_766, ah_927, 8) (alias)
	SZO_929 = cond(ah_927)
	C_930 = false
	wLoc6C_931 = ax_928
	rLoc2_932 = rLoc2_847
	__fldcw(wLoc6C_931)
	qwLoc68_933 = (int64) rLoc2_932
	__fldcw(wLoc6A_924)
	rax_934 = qwLoc68_933
	eax_935 = (word32) rax_934 (alias)
	rdx_rax_936 = SEQ(rdx_784, rax_934) (alias)
	edx_eax_937 = rax_934 (alias)
	ah_938 = SLICE(rax_934, byte, 8) (alias)
	ax_939 = (word16) rax_934 (alias)
	al_940 = (byte) rax_934 (alias)
// DataOut: ax eax ebx fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C045:
	wLoc6A_851 = PHI(wLoc6A_924, wLoc6A_941)
	wLoc6C_852 = PHI(wLoc6C_931, wLoc6C_951)
	rLoc2_853 = PHI(rLoc2_932, rLoc2_946)
	qwLoc68_854 = PHI(qwLoc68_933, qwLoc68_952)
	rLoc1_855 = PHI(rLoc1_923, rLoc1_947)
	rax_856 = PHI(rax_934, rax_954)
	eax_857 = PHI(eax_935, eax_955)
	ah_858 = PHI(ah_938, ah_958)
	ax_859 = PHI(ax_939, ax_959)
	al_860 = PHI(al_940, al_960)
	r14_861 = (uint64) dwLoc98_36
	r14d_862 = (word32) r14_861 (alias)
	rdx_863 = 0x0000000000000000
	edx_864 = (word32) rdx_863 (alias)
	rdx_rax_865 = SEQ(rdx_863, rax_856) (alias)
	edx_eax_866 = rdx_863 (alias)
	dl_867 = (byte) rdx_863 (alias)
	SZO_868 = cond(r14d_862 & r14d_862)
	Z_869 = SZO_868 (alias)
	C_870 = false
	branch (r14d_862 & r14d_862) != 0x00000000 l000000000040C080
// DataOut: ax eax ebx fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C080:
	rLoc1_922 = rLoc1_855
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C051:
	qwLoc68_890 = rax_856
	SZO_891 = cond(rax_856 & rax_856)
	S_892 = SZO_891 (alias)
	C_893 = false
	rLoc2_894 = (real64) qwLoc68_890
	branch (rax_856 & rax_856) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C79E:
	rLoc2_921 = rLoc2_894 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C063:
	rLoc2_895 = PHI(rLoc2_894, rLoc2_921)
	rcx_896 = 0x0000000000000000
	ecx_897 = (word32) rcx_896 (alias)
	SZO_898 = cond(ecx_897)
	rdx_899 = 0x0000000000000001
	edx_900 = (word32) rdx_899 (alias)
	rdx_rax_901 = SEQ(rdx_899, rax_856) (alias)
	edx_eax_902 = rdx_899 (alias)
	dl_903 = (byte) rdx_899 (alias)
	CZP_904 = cond(rLoc2_895 - rLoc1_855)
	Z_905 = CZP_904 (alias)
	P_906 = CZP_904 (alias)
	rLoc1_907 = rLoc1_855
	cl_908 = Test(PE,P_906)
	rcx_909 = DPB(rcx_896, cl_908, 0) (alias)
	ecx_910 = DPB(ecx_897, cl_908, 0) (alias)
	branch rLoc2_895 != rLoc1_855 l000000000040C075
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C071_1:
	rdx_916 = rcx_909
	edx_917 = (word32) rdx_916 (alias)
	rdx_rax_918 = SEQ(rdx_916, rax_856) (alias)
	edx_eax_919 = rdx_916 (alias)
	dl_920 = (byte) rdx_916 (alias)
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C075:
	rdx_911 = PHI(rdx_899, rdx_916)
	edx_912 = PHI(edx_900, edx_917)
	rdx_rax_913 = PHI(rdx_rax_901, rdx_rax_918)
	edx_eax_914 = PHI(edx_eax_902, edx_eax_919)
	dl_915 = PHI(dl_903, dl_920)
// DataOut: ebx fs r10 r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C082:
	rLoc2_871 = PHI(rLoc2_895, rLoc2_853)
	P_872 = PHI(P_906, P_759)
	CZP_873 = PHI(CZP_904, CZP_849)
	ecx_874 = PHI(ecx_910, ecx_762)
	rcx_875 = PHI(rcx_909, rcx_772)
	cl_876 = PHI(cl_908, cl_763)
	Z_877 = PHI(Z_905, Z_869)
	rdx_878 = PHI(rdx_911, rdx_863)
	edx_879 = PHI(edx_912, edx_864)
	rdx_rax_880 = PHI(rdx_rax_913, rdx_rax_865)
	edx_eax_881 = PHI(edx_eax_914, edx_eax_866)
	dl_882 = PHI(dl_915, dl_867)
	rax_883 = rax_856 + rdx_878
	qwLoc68_884 = rax_883
	SZO_885 = cond(rax_883 & rax_883)
	S_886 = SZO_885 (alias)
	C_887 = false
	rLoc1_888 = (real64) qwLoc68_884
	branch (rax_883 & rax_883) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C093:
	rLoc1_889 = rLoc1_888 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C0A0:
	wLoc6A_805 = PHI(wLoc6A_754, wLoc6A_754, wLoc6A_851, wLoc6A_851)
	wLoc6C_806 = PHI(wLoc6C_755, wLoc6C_755, wLoc6C_852, wLoc6C_852)
	rLoc2_807 = PHI(rLoc2_756, rLoc2_842, rLoc2_871, rLoc2_871)
	qwLoc68_808 = PHI(qwLoc68_757, qwLoc68_757, qwLoc68_884, qwLoc68_884)
	rLoc1_809 = PHI(rLoc1_804, rLoc1_804, rLoc1_888, rLoc1_889)
	P_810 = PHI(P_759, P_759, P_872, P_872)
	CZP_811 = PHI(CZP_760, CZP_843, CZP_873, CZP_873)
	S_812 = PHI(S_761, S_761, S_886, S_886)
	CZ_813 = PHI(CZ_798, CZ_844, CZ_844, CZ_844)
	ecx_814 = PHI(ecx_762, ecx_762, ecx_874, ecx_874)
	cl_815 = PHI(cl_763, cl_763, cl_876, cl_876)
	Z_816 = PHI(Z_803, Z_803, Z_877, Z_877)
	ah_817 = PHI(ah_765, ah_765, ah_858, ah_858)
	ax_818 = PHI(ax_766, ax_766, ax_859, ax_859)
	al_819 = PHI(al_794, al_794, al_860, al_860)
	edx_820 = PHI(edx_785, edx_785, edx_879, edx_879)
	rdx_rax_821 = PHI(rdx_rax_767, rdx_rax_767, rdx_rax_880, rdx_rax_880)
	edx_eax_822 = PHI(edx_eax_768, edx_eax_768, edx_eax_881, edx_eax_881)
	dl_823 = PHI(dl_769, dl_769, dl_882, dl_882)
	rLoc1_824 = rLoc1_809 / Mem0[0x0000000000415F84:real32]
	r14_825 = qwLocA0_39
	rcx_826 = 0x0000000000415F18
	rdx_827 = 0xFFFFFFFFFFFFFFFF
	rsi_828 = 0x0000000000000001
	rax_829 = 0x0000000000000000
	rdi_830 = r14_825
	rLocD0_831 = (real80) rLoc1_824
	eax_832 = __sprintf_chk(rdi_830, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_833 = r14_825
	r14_834 = 0x0000000000000000
	r14d_835 = (word32) r14_834 (alias)
	SZO_836 = cond(r14d_835)
	C_837 = false
	eax_838 = strlen(rdi_833)
	rax_839 = DPB(rax_829, eax_838, 0) (alias)
	r15_840 = rax_839
	r15d_841 = (word32) r15_840 (alias)
// DataOut: ebx fs r10 r11 r11d r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C218:
	rLoc4_676 = PHI(rLoc4_744, rLoc4_744, rLoc4_744, rLoc4)
	rLoc3_677 = PHI(rLoc3_734, rLoc3_734, rLoc3_734, rLoc3_670)
	qwLoc80_678 = PHI(qwLoc80_775, qwLoc80_775, qwLoc80_775, qwLoc80_132)
	rLoc90_679 = PHI(rLoc90_777, rLoc90_777, rLoc90_777, rLoc90)
	wLoc6A_680 = PHI(wLoc6A_754, wLoc6A_754, wLoc6A_805, wLoc6A_1109)
	wLoc6C_681 = PHI(wLoc6C_755, wLoc6C_755, wLoc6C_806, wLoc6C_1110)
	rLoc2_682 = PHI(rLoc2_756, rLoc2_756, rLoc2_807, rLoc2_1111)
	qwLoc68_683 = PHI(qwLoc68_757, qwLoc68_757, qwLoc68_808, qwLoc68_1112)
	rLoc1_684 = PHI(rLoc1_969, rLoc1_970, rLoc1_824, rLoc1_1113)
	rLocD0_685 = PHI(rLocD0_778, rLocD0_778, rLocD0_831, rLocD0_1129)
	P_686 = PHI(P_759, P_759, P_810, P_1114)
	CZP_687 = PHI(CZP_760, CZP_760, CZP_811, CZP_1115)
	esi_688 = PHI(esi_641, esi_641, esi_641, esi_1116)
	S_689 = PHI(S_761, S_761, S_812, S_1117)
	r11_690 = PHI(r11_783, r11_783, r11_783, r11_138)
	r14d_691 = PHI(r14d_793, r14d_793, r14d_835, r14d_1136)
	CZ_692 = PHI(CZ_798, CZ_798, CZ_813, CZ_1118)
	ebx_693 = PHI(ebx_740, ebx_740, ebx_740, ebx_1143)
	ecx_694 = PHI(ecx_762, ecx_762, ecx_814, ecx_1119)
	rcx_695 = PHI(rcx_772, rcx_772, rcx_826, rcx_1131)
	cl_696 = PHI(cl_763, cl_763, cl_815, cl_1120)
	SZO_697 = PHI(SZO_963, SZO_963, SZO_836, SZO_1137)
	Z_698 = PHI(Z_968, Z_964, Z_816, Z_1121)
	C_699 = PHI(C_965, C_965, C_837, C_1138)
	eax_700 = PHI(eax_781, eax_781, eax_838, eax_1144)
	ah_701 = PHI(ah_765, ah_765, ah_817, ah_1122)
	ax_702 = PHI(ax_766, ax_766, ax_818, ax_1123)
	al_703 = PHI(al_794, al_794, al_819, al_1124)
	edx_704 = PHI(edx_785, edx_785, edx_820, edx_1125)
	rdx_rax_705 = PHI(rdx_rax_767, rdx_rax_767, rdx_rax_821, rdx_rax_1126)
	edx_eax_706 = PHI(edx_eax_768, edx_eax_768, edx_eax_822, edx_eax_1127)
	dl_707 = PHI(dl_769, dl_769, dl_823, dl_1128)
	rbx_708 = PHI(rbx_739, rbx_739, rbx_739, rbx_1142)
	r14_709 = PHI(r14_792, r14_792, r14_834, r14_1135)
	r15_710 = PHI(r15_786, r15_786, r15_840, r15_1146)
	r15d_711 = PHI(r15d_787, r15d_787, r15d_841, r15d_1147)
	r12_712 = qwLocB8_144
	rsi_713 = qwLocA0_39
	rdx_714 = r15_710
	r12_715 = r12_712 - r15_710
	r12d_716 = (word32) r12_715 (alias)
	r12b_717 = (byte) r12_715 (alias)
	r15_718 = r15_710 - r14_709
	SCZO_719 = cond(r15_718)
	rdi_720 = r12_715
	rax_721 = memmove(rdi_720, rsi_713, rdx_714)
	r8_722 = r12_715 + r15_718
// DataOut: ebx fs r10 r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C237:
	dwLoc74_145 = PHI(dwLoc74, dwLoc74_1325)
	qwLoc90_146 = PHI(qwLoc90, qwLoc90_1326)
	rLoc4_147 = PHI(rLoc4_676, rLoc4)
	rLoc3_148 = PHI(rLoc3_677, rLoc3)
	qwLoc80_149 = PHI(qwLoc80_678, qwLoc80_1327)
	rLoc90_150 = PHI(rLoc90_679, rLoc90)
	wLoc6A_151 = PHI(wLoc6A_680, wLoc6A)
	wLoc6C_152 = PHI(wLoc6C_681, wLoc6C)
	rLoc2_153 = PHI(rLoc2_682, rLoc2)
	qwLoc68_154 = PHI(qwLoc68_683, qwLoc68)
	rLoc1_155 = PHI(rLoc1_684, rLoc1)
	rLocD0_156 = PHI(rLocD0_685, rLocD0)
	qwLoc98_157 = PHI(qwLoc98, qwLoc98_1381)
	r10b_158 = PHI(r10b_638, r10b_1427)
	r10d_159 = PHI(r10d_639, r10d_1426)
	dil_160 = PHI(dil_127, dil_1330)
	sil_161 = PHI(sil_640, sil_1331)
	P_162 = PHI(P_686, P_98)
	CZP_163 = PHI(CZP_687, CZP_1293)
	esi_164 = PHI(esi_688, esi_1365)
	edi_165 = PHI(edi_126, edi_1366)
	r10_166 = PHI(r10_642, r10_1425)
	S_167 = PHI(S_689, S_1297)
	r11_168 = PHI(r11_690, r11_1335)
	r8_169 = PHI(r8_722, r8_1385)
	r9_170 = PHI(r9_91, r9_1337)
	r9d_171 = PHI(r9d_90, r9d_1338)
	r14d_172 = PHI(r14d_691, r14d_1339)
	CZ_173 = PHI(CZ_692, CZ_1340)
	ebx_174 = PHI(ebx_693, ebx_1386)
	rsi_175 = PHI(rsi_713, rsi_1387)
	ecx_176 = PHI(ecx_694, ecx_1368)
	rcx_177 = PHI(rcx_695, rcx_1405)
	cl_178 = PHI(cl_696, cl_1345)
	rdi_179 = PHI(rdi_720, rdi_1388)
	rax_180 = PHI(rax_721, rax_1416)
	eax_181 = PHI(eax_700, eax_1393)
	ah_182 = PHI(ah_701, ah_1394)
	ax_183 = PHI(ax_702, ax_1395)
	al_184 = PHI(al_703, al_1396)
	rdx_185 = PHI(rdx_714, rdx_1414)
	edx_186 = PHI(edx_704, edx_1355)
	rdx_rax_187 = PHI(rdx_rax_705, rdx_rax_1412)
	edx_eax_188 = PHI(edx_eax_706, edx_eax_1399)
	dl_189 = PHI(dl_707, dl_1358)
	SCZO_190 = PHI(SCZO_719, SCZO_1400)
	rbx_191 = PHI(rbx_708, rbx_1401)
	r12_192 = PHI(r12_715, r12_1409)
	r12d_193 = PHI(r12d_716, r12d_1410)
	r12b_194 = PHI(r12b_717, r12b_1411)
	r14_195 = PHI(r14_709, r14_69)
	r15_196 = PHI(r15_718, r15_130)
	r15d_197 = PHI(r15d_711, r15d_131)
	SZO_199 = cond(bLocB0 & 0x04)
	Z_200 = SZO_199 (alias)
	C_201 = false
	branch (bLocB0 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r10 r11 r11d r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C318:
	r8_498 = r8_169 - r12_192
	SCZO_499 = cond(r8_498)
	rdi_500 = r13_139
	r15_501 = 0xFFFFFFFFFFFFFFFF
	r15d_502 = (word32) r15_501 (alias)
	r14_503 = r8_498
	r14d_504 = (word32) r14_503 (alias)
	eax_505 = strlen(rdi_500)
	rax_506 = DPB(rax_180, eax_505, 0) (alias)
	rdi_507 = fp - 0x0000000000000060
	rsi_508 = r12_192
	rcx_509 = 0x0000000000000029
	rdx_510 = r14_503
	qwLoc98_511 = rax_506
	call __memcpy_chk (retsize: 8; depth: 216)
		uses: ah_182,al_184,ax_183,bLocB0,C_201,cl_178,CZ_173,CZP_163,dil_160,dl_189,dwLoc04_4,dwLoc08_12,dwLoc0C_18,dwLoc10_21,dwLoc14_28,dwLoc18_31,dwLoc74_145,dwLoc78_52,dwLoc98_36,dwLocAC_60,dwLocB0_42,eax_505,ebx_174,ecx_176,edi_165,edx_186,esi_164,fs_79,P_162,qwLoc08,qwLoc10,qwLoc18,qwLoc28_48,qwLoc68_154,qwLoc80_149,qwLoc90_146,qwLoc98_511,qwLocA0_39,qwLocA8_44,qwLocB8_144,r10_166,r10b_158,r10d_159,r11_168,r12_192,r12b_194,r12d_193,r13_139,r14_503,r14d_504,r15_501,r15d_502,r8_498,r9_170,r9d_171,rax_506,rbp_113,rbx_191,rcx_509,rdi_507,rdx_510,rLoc90_150,rLocD0_156,rsi_508,rsp_62,S_167,SCZO_499,sil_161,SZO_199,wLoc6A_151,wLoc6C_152,Z_200
		defs: ah_546,al_552,ax_547,C_518,cl_539,CZ_533,CZP_544,dil_551,dl_549,eax_514,ebx_536,ecx_530,edi_538,edx_515,esi_542,fs_529,P_548,r10_537,r10b_555,r10d_554,r11_531,r12_522,r12b_556,r12d_543,r13_521,r14_519,r14d_545,r15_513,r15d_553,r8_528,r9_541,r9d_540,rax_516,rbp_524,rbx_525,rcx_526,rdi_523,rdx_532,rsi_520,rsp_512,S_535,SCZO_527,sil_550,SZO_517,Z_534
	r9_557 = r12_522 + r14_519
	r9d_558 = (word32) r9_557 (alias)
	r12_559 = r13_521
	r12d_560 = (word32) r12_559 (alias)
	r12b_561 = (byte) r12_559 (alias)
	r13_562 = qwLoc98_511
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C36C:
	r9_563 = PHI(r9_557, r9_624)
	r9d_564 = PHI(r9d_558, r9d_625)
	r14d_565 = PHI(r14d_545, r14d_598)
	CZ_566 = PHI(CZ_533, CZ_593)
	rsi_567 = PHI(rsi_520, rsi_621)
	rdi_568 = PHI(rdi_523, rdi_622)
	rax_569 = PHI(rax_516, rax_623)
	eax_570 = PHI(eax_514, eax_604)
	ah_571 = PHI(ah_546, ah_607)
	ax_572 = PHI(ax_547, ax_608)
	al_573 = PHI(al_552, al_609)
	rdx_574 = PHI(rdx_532, rdx_620)
	rdx_rax_575 = PHI(rdx_rax_187, rdx_rax_605)
	SCZO_576 = PHI(SCZO_527, SCZO_619)
	rbp_577 = PHI(rbp_524, rbp_589)
	r14_578 = PHI(r14_519, r14_597)
	r15_579 = PHI(r15_513, r15_595)
	r15d_580 = PHI(r15d_553, r15d_596)
	edx_581 = (word32) Mem0[rbp_577 + 0x0000000000000000:byte]
	rdx_582 = DPB(rdx_574, edx_581, 0) (alias)
	rdx_rax_583 = DPB(rdx_rax_575, edx_581, 64) (alias)
	edx_eax_584 = SEQ(edx_581, eax_570) (alias)
	dl_585 = (byte) edx_581 (alias)
	SZO_586 = cond(dl_585 & dl_585)
	Z_587 = SZO_586 (alias)
	C_588 = false
	branch (dl_585 & dl_585) == 0x00 l000000000040C383
// DataOut: dl ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C374:
	SCZO_628 = cond(dl_585 - 0x7E)
	CZ_629 = SCZO_628 (alias)
	r15d_630 = (word32) dl_585
	r15_631 = DPB(r15_579, r15d_630, 0) (alias)
	branch dl_585 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C37B_1:
	r15_636 = r14_578
	r15d_637 = (word32) r15_636 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C37F:
	r15_632 = PHI(r15_631, r15_636)
	r15d_633 = PHI(r15d_630, r15d_637)
	rbp_634 = rbp_577 + 0x0000000000000001
	SCZO_635 = cond(rbp_634)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C383:
	rbp_589 = PHI(rbp_577, rbp_634)
	r15_590 = PHI(r15_579, r15_632)
	r15d_591 = PHI(r15d_580, r15d_633)
	SCZO_592 = cond(r15_590 - r14_578)
	CZ_593 = SCZO_592 (alias)
	rax_594 = fp - 0x0000000000000060
	branch r15_590 <=u r14_578 l000000000040C38F
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C38B_1:
	r15_626 = r14_578
	r15d_627 = (word32) r15_626 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C38F:
	r15_595 = PHI(r15_590, r15_626)
	r15d_596 = PHI(r15d_591, r15d_627)
	r14_597 = r14_578 - r15_595
	r14d_598 = (word32) r14_597 (alias)
	r9_599 = r9_563 - r15_595
	rdx_600 = r15_595
	rsi_601 = fp - 0x0000000000000060 + r14_597
	rdi_602 = r9_599
	rax_603 = memcpy(rdi_602, rsi_601, rdx_600)
	eax_604 = (word32) rax_603 (alias)
	rdx_rax_605 = SEQ(rdx_600, rax_603) (alias)
	edx_eax_606 = rax_603 (alias)
	ah_607 = SLICE(rax_603, byte, 8) (alias)
	ax_608 = (word16) rax_603 (alias)
	al_609 = (byte) rax_603 (alias)
	SZO_610 = cond(r14_597 & r14_597)
	Z_611 = SZO_610 (alias)
	C_612 = false
	r9_613 = rax_603
	r9d_614 = (word32) r9_613 (alias)
	branch (r14_597 & r14_597) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C358:
	r9_618 = r9_613 - r13_562
	SCZO_619 = cond(r9_618)
	rdx_620 = r13_562
	rsi_621 = r12_559
	rdi_622 = r9_618
	rax_623 = memcpy(rdi_622, rsi_621, rdx_620)
	r9_624 = rax_623
	r9d_625 = (word32) r9_624 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C3AC:
	r12_615 = rax_603
	r12d_616 = (word32) r12_615 (alias)
	r12b_617 = (byte) r12_615 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C242:
	qwLoc98_202 = PHI(qwLoc98_511, qwLoc98_157)
	r10b_203 = PHI(r10b_555, r10b_158)
	r10d_204 = PHI(r10d_554, r10d_159)
	dil_205 = PHI(dil_551, dil_160)
	sil_206 = PHI(sil_550, sil_161)
	P_207 = PHI(P_548, P_162)
	CZP_208 = PHI(CZP_544, CZP_163)
	esi_209 = PHI(esi_542, esi_164)
	edi_210 = PHI(edi_538, edi_165)
	r10_211 = PHI(r10_537, r10_166)
	S_212 = PHI(S_535, S_167)
	r11_213 = PHI(r11_531, r11_168)
	fs_214 = PHI(fs_529, fs_79)
	r8_215 = PHI(r8_528, r8_169)
	r9_216 = PHI(r9_613, r9_170)
	r9d_217 = PHI(r9d_614, r9d_171)
	r14d_218 = PHI(r14d_598, r14d_172)
	CZ_219 = PHI(CZ_593, CZ_173)
	ebx_220 = PHI(ebx_536, ebx_174)
	rsi_221 = PHI(rsi_601, rsi_175)
	ecx_222 = PHI(ecx_530, ecx_176)
	rcx_223 = PHI(rcx_526, rcx_177)
	cl_224 = PHI(cl_539, cl_178)
	rdi_225 = PHI(rdi_602, rdi_179)
	rax_226 = PHI(rax_603, rax_180)
	eax_227 = PHI(eax_604, eax_181)
	ah_228 = PHI(ah_607, ah_182)
	ax_229 = PHI(ax_608, ax_183)
	al_230 = PHI(al_609, al_184)
	rdx_231 = PHI(rdx_600, rdx_185)
	edx_232 = PHI(edx_581, edx_186)
	rdx_rax_233 = PHI(rdx_rax_605, rdx_rax_187)
	edx_eax_234 = PHI(edx_eax_606, edx_eax_188)
	dl_235 = PHI(dl_585, dl_189)
	SCZO_236 = PHI(SCZO_592, SCZO_190)
	rbx_237 = PHI(rbx_525, rbx_191)
	rbp_238 = PHI(rbp_589, rbp_113)
	r12_239 = PHI(r12_615, r12_192)
	r12d_240 = PHI(r12d_616, r12d_193)
	r12b_241 = PHI(r12b_617, r12b_194)
	r13_242 = PHI(r13_562, r13_139)
	r14_243 = PHI(r14_597, r14_195)
	r15_244 = PHI(r15_595, r15_196)
	r15d_245 = PHI(r15d_596, r15d_197)
	rsp_246 = PHI(rsp_512, rsp_62)
	SZO_247 = cond(bLocB0 & 0x80)
	Z_248 = SZO_247 (alias)
	C_249 = false
	branch (bLocB0 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C249:
	SCZO_390 = cond(ebx_220 - 0xFFFFFFFF)
	Z_391 = SCZO_390 (alias)
	branch ebx_220 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C618:
	rdx_459 = qwLocA8_44
	edx_460 = (word32) rdx_459 (alias)
	rdx_rax_461 = SEQ(rdx_459, rax_226) (alias)
	edx_eax_462 = rdx_459 (alias)
	dl_463 = (byte) rdx_459 (alias)
	SCZO_464 = cond(rdx_459 - 0x0000000000000001)
	CZ_465 = SCZO_464 (alias)
	branch rdx_459 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00AC(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C7A9:
	rbx_494 = 0x0000000000000000
	ebx_495 = (word32) rbx_494 (alias)
	SZO_496 = cond(ebx_495)
	C_497 = false
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C627:
	r14_466 = (uint64) dwLocAC_60
	r14d_467 = (word32) r14_466 (alias)
	rbx_468 = 0x0000000000000001
	ebx_469 = (word32) rbx_468 (alias)
	rax_470 = 0x0000000000000001
	eax_471 = (word32) rax_470 (alias)
	rdx_rax_472 = SEQ(rdx_459, rax_470) (alias)
	edx_eax_473 = rax_470 (alias)
	ah_474 = SLICE(rax_470, byte, 8) (alias)
	ax_475 = (word16) rax_470 (alias)
	al_476 = (byte) rax_470 (alias)
// DataOut: ebx fs r10 r11 r11d r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C640:
	ebx_477 = PHI(ebx_469, ebx_491)
	Z_478 = PHI(Z_391, Z_493)
	rax_479 = PHI(rax_470, rax_481)
	rbx_480 = PHI(rbx_468, rbx_490)
	rax_481 = rax_479 *s r14_466
	eax_482 = (word32) rax_481 (alias)
	rdx_rax_483 = SEQ(rdx_459, rax_481) (alias)
	edx_eax_484 = rax_481 (alias)
	ah_485 = SLICE(rax_481, byte, 8) (alias)
	ax_486 = (word16) rax_481 (alias)
	al_487 = (byte) rax_481 (alias)
	SCZO_488 = cond(rdx_459 - rax_481)
	CZ_489 = SCZO_488 (alias)
	branch rdx_459 <=u rax_481 l000000000040C252
// DataOut: ebx fs r10 r11 r11d r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C64D:
	rbx_490 = (uint64) (ebx_477 + 0x00000001)
	ebx_491 = (word32) rbx_490 (alias)
	SCZO_492 = cond(ebx_491 - 0x00000008)
	Z_493 = SCZO_492 (alias)
	branch ebx_491 != 0x00000008 l000000000040C640
// DataOut: ebx fs r10 r11 r11d r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C655:
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C252:
	r14d_392 = PHI(r14d_218, r14d_467, r14d_467, r14d_218)
	CZ_393 = PHI(CZ_219, CZ_489, CZ_489, CZ_465)
	ebx_394 = PHI(ebx_220, ebx_477, ebx_491, ebx_495)
	rdx_395 = PHI(rdx_231, rdx_459, rdx_459, rdx_459)
	edx_396 = PHI(edx_232, edx_460, edx_460, edx_460)
	dl_397 = PHI(dl_235, dl_463, dl_463, dl_463)
	SCZO_398 = PHI(SCZO_390, SCZO_488, SCZO_492, SCZO_464)
	rbx_399 = PHI(rbx_237, rbx_480, rbx_490, rbx_494)
	r14_400 = PHI(r14_243, r14_466, r14_466, r14_243)
	rax_401 = (uint64) dwLocB0_42
	eax_402 = (word32) rax_401 (alias)
	rcx_403 = (uint64) ebx_394
	ecx_404 = (word32) rcx_403 (alias)
	rax_405 = (uint64) (eax_402 & 0x00000100)
	eax_406 = (word32) rax_405 (alias)
	rdx_rax_407 = SEQ(rdx_395, rax_405) (alias)
	edx_eax_408 = rax_405 (alias)
	ah_409 = SLICE(rax_405, byte, 8) (alias)
	ax_410 = (word16) rax_405 (alias)
	al_411 = (byte) rax_405 (alias)
	rcx_412 = (uint64) (ecx_404 | eax_406)
	ecx_413 = (word32) rcx_412 (alias)
	SZO_414 = cond(ecx_413)
	Z_415 = SZO_414 (alias)
	C_416 = false
	branch ecx_413 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(0) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C261:
	SZO_417 = cond(bLocB0 & 0x40)
	Z_418 = SZO_417 (alias)
	C_419 = false
	branch (bLocB0 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C3E8:
	rcx_455 = qwLocA0_39
	rsi_456 = rcx_455 + 0x0000000000000289
	Mem457[rcx_455 + 0x0000000000000288:byte] = 0x20
	qwLocB8_458 = rsi_456
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C26C:
	rsi_420 = PHI(rsi_221, rsi_456)
	rcx_421 = PHI(rcx_412, rcx_455)
	qwLocB8_422 = PHI(qwLocB8_144, qwLocB8_458)
	SZO_423 = cond(ebx_394 & ebx_394)
	Z_424 = SZO_423 (alias)
	C_425 = false
	branch (ebx_394 & ebx_394) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C274:
	rcx_426 = qwLocB8_422
	rdx_427 = rcx_426 + 0x0000000000000001
	edx_428 = (word32) rdx_427 (alias)
	rdx_rax_429 = SEQ(rdx_427, rax_405) (alias)
	edx_eax_430 = rdx_427 (alias)
	dl_431 = (byte) rdx_427 (alias)
	rcx_432 = (uint64) dwLoc78_52
	ecx_433 = (word32) rcx_432 (alias)
	SZO_434 = cond(ecx_433 & ecx_433)
	Z_435 = SZO_434 (alias)
	C_436 = false
	branch (ecx_433 & ecx_433) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C3D0:
	SCZO_450 = cond(ebx_394 - 0x00000001)
	Z_451 = SCZO_450 (alias)
	rcx_452 = 0x000000000000006B
	ecx_453 = (word32) rcx_452 (alias)
	cl_454 = (byte) rcx_452 (alias)
	branch ebx_394 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C289:
	Z_444 = PHI(Z_435, Z_451)
	SCZO_445 = PHI(SCZO_398, SCZO_450)
	rcx_446 = (int64) ebx_394
	ecx_447 = (word32) Mem0[rcx_446 + 0x0000000000415F78:byte]
	rcx_448 = DPB(rcx_446, ecx_447, 0) (alias)
	cl_449 = (byte) ecx_447 (alias)
// DataOut: cl eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C293:
	ecx_437 = PHI(ecx_447, ecx_453)
	rcx_438 = PHI(rcx_448, rcx_452)
	cl_439 = PHI(cl_449, cl_454)
	Z_440 = PHI(Z_444, Z_451)
	SCZO_441 = PHI(SCZO_445, SCZO_450)
	rdi_442 = qwLocB8_422
	Mem443[rdi_442:byte] = cl_439
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Stack +0000(64) Stack +0010(64)

l000000000040C29A:
	r14d_335 = PHI(r14d_392, r14d_250)
	CZ_336 = PHI(CZ_393, CZ_251)
	ebx_337 = PHI(ebx_394, ebx_252)
	rsi_338 = PHI(rsi_420, rsi_253)
	ecx_339 = PHI(ecx_437, ecx_254)
	rcx_340 = PHI(rcx_438, rcx_255)
	cl_341 = PHI(cl_439, cl_256)
	qwLocB8_342 = PHI(qwLocB8_422, qwLocB8_257)
	rdi_343 = PHI(rdi_442, rdi_258)
	rax_344 = PHI(rax_405, rax_262)
	eax_345 = PHI(eax_406, eax_263)
	ah_346 = PHI(ah_409, ah_264)
	ax_347 = PHI(ax_410, ax_265)
	al_348 = PHI(al_411, al_266)
	rdx_349 = PHI(rdx_427, rdx_270)
	edx_350 = PHI(edx_428, edx_271)
	rdx_rax_351 = PHI(rdx_rax_429, rdx_rax_272)
	edx_eax_352 = PHI(edx_eax_430, edx_eax_273)
	dl_353 = PHI(dl_431, dl_274)
	SCZO_354 = PHI(SCZO_441, SCZO_267)
	rbx_355 = PHI(rbx_399, rbx_268)
	r14_356 = PHI(r14_400, r14_269)
	SZO_357 = cond(eax_345 & eax_345)
	Z_358 = SZO_357 (alias)
	C_359 = false
	branch (eax_345 & eax_345) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Stack +0000(64) Stack +0010(64)

l000000000040C7F5:
	qwLocB8_389 = rdx_349
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C2A2:
	rax_360 = (uint64) dwLoc78_52
	eax_361 = (word32) rax_360 (alias)
	rdx_rax_362 = SEQ(rdx_349, rax_360) (alias)
	edx_eax_363 = rax_360 (alias)
	SZO_364 = cond(eax_361 & eax_361)
	Z_365 = SZO_364 (alias)
	C_366 = false
	branch (eax_361 & eax_361) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Stack +0000(64) Stack +0010(64)

l000000000040C3B8:
	SZO_379 = cond(ebx_337 & ebx_337)
	Z_380 = SZO_379 (alias)
	C_381 = false
	branch (ebx_337 & ebx_337) == 0x00000000 l000000000040C2AE
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Stack +0000(64) Stack +0010(64)

l000000000040C3C0:
	Mem382[rdx_349:byte] = 0x69
	rdx_383 = rdx_349 + 0x0000000000000001
	edx_384 = (word32) rdx_383 (alias)
	rdx_rax_385 = SEQ(rdx_383, rax_360) (alias)
	edx_eax_386 = rdx_383 (alias)
	dl_387 = (byte) rdx_383 (alias)
	SCZO_388 = cond(rdx_383)
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Stack +0000(64) Stack +0010(64)

l000000000040C2AE:
	SZO_367 = PHI(SZO_364, SZO_379, SZO_379)
	Z_368 = PHI(Z_365, Z_380, Z_380)
	C_369 = PHI(C_366, C_381, C_381)
	rdx_370 = PHI(rdx_349, rdx_349, rdx_383)
	edx_371 = PHI(edx_350, edx_350, edx_384)
	rdx_rax_372 = PHI(rdx_rax_362, rdx_rax_362, rdx_rax_385)
	edx_eax_373 = PHI(edx_eax_363, edx_eax_363, edx_eax_386)
	dl_374 = PHI(dl_353, dl_353, dl_387)
	SCZO_375 = PHI(SCZO_354, SCZO_354, SCZO_388)
	rax_376 = rdx_370 + 0x0000000000000001
	Mem377[rdx_370:byte] = 0x42
	qwLocB8_378 = rax_376
// DataOut: ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C2BA:
	r14d_275 = PHI(r14d_218, r14d_392, r14d_335, r14d_335)
	CZ_276 = PHI(CZ_219, CZ_393, CZ_336, CZ_336)
	ebx_277 = PHI(ebx_220, ebx_394, ebx_337, ebx_337)
	rsi_278 = PHI(rsi_221, rsi_221, rsi_338, rsi_338)
	ecx_279 = PHI(ecx_222, ecx_413, ecx_339, ecx_339)
	rcx_280 = PHI(rcx_223, rcx_412, rcx_340, rcx_340)
	cl_281 = PHI(cl_224, cl_224, cl_341, cl_341)
	qwLocB8_282 = PHI(qwLocB8_144, qwLocB8_144, qwLocB8_378, qwLocB8_389)
	rdx_283 = PHI(rdx_231, rdx_395, rdx_370, rdx_349)
	edx_284 = PHI(edx_232, edx_396, edx_371, edx_350)
	dl_285 = PHI(dl_235, dl_397, dl_374, dl_353)
	SCZO_286 = PHI(SCZO_236, SCZO_398, SCZO_375, SCZO_354)
	rbx_287 = PHI(rbx_237, rbx_399, rbx_355, rbx_355)
	r14_288 = PHI(r14_243, r14_400, r14_356, r14_356)
	rax_289 = qwLocB8_282
	rdi_290 = qwLoc28_48
	rdi_291 = rdi_290 ^ Mem0[fs_214:0x00000028:word64]
	SZO_292 = cond(rdi_291)
	Z_293 = SZO_292 (alias)
	C_294 = false
	Mem295[rax_289:byte] = 0x00
	rax_296 = r12_239
	eax_297 = (word32) rax_296 (alias)
	rdx_rax_298 = SEQ(rdx_283, rax_296) (alias)
	edx_eax_299 = rax_296 (alias)
	ah_300 = SLICE(rax_296, byte, 8) (alias)
	ax_301 = (word16) rax_296 (alias)
	al_302 = (byte) rax_296 (alias)
	branch rdi_291 != 0x0000000000000000 l000000000040C7E6
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Local -00B8(64) Stack +0000(64) Stack +0010(64)

l000000000040C7EB:
	r14d_250 = PHI(r14d_392, r14d_275)
	CZ_251 = PHI(CZ_393, CZ_276)
	ebx_252 = PHI(ebx_394, ebx_277)
	rsi_253 = PHI(rsi_420, rsi_278)
	ecx_254 = PHI(ecx_413, ecx_279)
	rcx_255 = PHI(rcx_421, rcx_280)
	cl_256 = PHI(cl_224, cl_281)
	qwLocB8_257 = PHI(qwLocB8_422, qwLocB8_282)
	rdi_258 = PHI(rdi_225, rdi_291)
	SZO_259 = PHI(SZO_423, SZO_292)
	Z_260 = PHI(Z_424, Z_293)
	C_261 = PHI(C_425, C_294)
	rax_262 = PHI(rax_405, rax_296)
	eax_263 = PHI(eax_406, eax_297)
	ah_264 = PHI(ah_409, ah_300)
	ax_265 = PHI(ax_410, ax_301)
	al_266 = PHI(al_411, al_302)
	SCZO_267 = PHI(SCZO_398, SCZO_286)
	rbx_268 = PHI(rbx_399, rbx_287)
	r14_269 = PHI(r14_400, r14_288)
	rdx_270 = qwLocB8_257
	edx_271 = (word32) rdx_270 (alias)
	rdx_rax_272 = SEQ(rdx_270, rax_262) (alias)
	edx_eax_273 = rdx_270 (alias)
	dl_274 = (byte) rdx_270 (alias)
// DataOut: eax ebx fs r10 r11 r11d r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(8) Local -0010(64) Local -0028(64) Local -0078(32) Stack +0000(64) Stack +0010(64)

l000000000040C2DC:
	rsp_303 = fp - 0x0000000000000018
	SCZO_304 = cond(fp - 0x0000000000000018)
	rbx_306 = qwLoc18
	rsp_307 = fp - 0x0000000000000010
	rbp_309 = qwLoc10
	rsp_310 = fp - 0x0000000000000008
	r12_312 = qwLoc08
	r12d_313 = (word32) r12_312 (alias)
	r12b_314 = (byte) r12_312 (alias)
	rsp_315 = fp
	r13_317 = qwArg00
	rsp_318 = fp + 0x0000000000000008
	r14_320 = qwArg08
	rsp_321 = fp + 0x0000000000000010
	r15_323 = qwArg10
	r15d_324 = (word32) r15_323 (alias)
	rsp_325 = fp + 0x0000000000000018
	return rax_296
// DataOut: bpl fs r10 r11 r11d r12b r13 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040BD70_exit:
	use rsp_325 (=> rspOut)
	use rbp_309 (=> rbpOut)
	use r8_215 (=> r8Out)
	use r9_216 (=> r9Out)
	use r10_211 (=> r10Out)
	use r11_213 (=> r11Out)
	use r12b_314 (=> r12bOut)
	use r13_317 (=> r13Out)
	use r15_323 (=> r15Out)
// DataOut: bpl r10 r11 r11d r12b r13 r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000018 rax:<invalid> r14:<invalid> r12:r14 rbx:rbx rcx:<invalid> r15:<invalid> r13:SLICE(r15, word64, 32) rdi:<invalid> eax:<invalid> rbp:r12 r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040C810(word64 rdx, word64 rdi, word64 r8, word64 r12, word64 r13, ptr64 & r9Out, ptr64 & r13bOut, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r12 r13 r8 rdi rdx
// LiveOut: r13b r14 r14b r15 r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C810_entry:
	*r9Out = r9
	*r14Out = r14
	*r15Out = r15
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word64 rbp_105
	word64 rdx_146
	word64 r12_106 = rdx
	word64 rbx_116 = rdi
	word64 rsp_107 = fp - 0x0000000000000028
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040C910:
	word64 rax_246 = getenv(0x00000000004138E4)
	rbx_116 = rax_246
	branch rax_246 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:rdi -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040C926:
	word64 rax_252 = getenv(0x0000000000415F24)
	rbx_116 = rax_252
	branch rax_252 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040C93C:
	word64 rdx_266 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem270[rdx:word64] = rdx_266 + 512
	rbp_105 = 0x0000000000000000
	ebp = 0x00000000 (alias)
	rdx_146 = rdx_266 + 512
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C82C:
	branch Mem0[rbx_116:byte] == 0x27 l000000000040C8A0
// DataOut: fs r10 r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040C8A0:
	rbx_116 = rbx_116 + 0x0000000000000001
// DataOut: fs r10 r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040C833:
	word64 rbp_132
	word64 r14_134
	word64 r15_135
	word64 rax_136 = fn0000000000409E50(0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_116, qwLoc30, qwLoc28, qwLoc20, out rsp_107, out rbp_132, out r12_106, out r14_134, out r15_135)
	byte al_139 = (byte) rax_136
	branch (word32) rax_136 < 0x00000000 l000000000040C8B0
// DataOut: al ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040C8B0:
	word64 r9_173
	word64 r14_175
	word64 r15_176
	branch fn0000000000411360(0x00000000, rsp_107 + 0x0000000000000008, rbx_116, 0x0000000000415F3E, qwLoc08, qwArg00, qwArg08, out rsp_107, out rbp_105, out r8, out r9_173, out r12_106, out r14_175, out r15_176) != 0x00000000 l000000000040C968
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C968:
	Mem239[rbp_105:word32] = 0x00000000
	rdx_146 = Mem239[r12_106:word64]
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_116:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C8DA:
	word64 rdx_200 = Mem0[rsp_107 + 0x0000000000000008:word64]
	branch rbx_116 != rdx_200 l000000000040C8F9
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C8F9:
	rbx_116 = rbx_116 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_116:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C8F0:
	branch rbx_116 == rdx_200 l000000000040C980
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C8E4:
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C980:
	branch Mem0[rdx_200 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C998:
	rbp_105 = (uint64) (ebp | 0x00000180)
	ebp = (word32) rbp_105 (alias)
	branch Mem0[rdx_200 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C9A8:
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C986:
	ebp = DPB(ebp, 0x84, 0) (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C98A:
	rbp_105 = (uint64) (ebp | 0x00000020)
	ebp = (word32) rbp_105 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C907:
	rdx_146 = Mem0[r12_106:word64]
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C84E:
	Mem145[r12_106:word64] = 0x0000000000000001
	rbp_105 = (uint64) (ebp | Mem145[DPB(rax_136, (int16) al_139, 0) * 0x0000000000000004 + 0x00415F50:word32])
	rdx_146 = 0x0000000000000001
	ebp = (word32) rbp_105 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C864:
	Mem108[rbp_105:word32] = ebp
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> r8:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C86A:
	branch rdx_146 != 0x0000000000000000 l000000000040C894
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C86F:
	Mem83[r12_106:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	r8 = r8 + 512
// DataOut: fs r10 r11 r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040C894:
	byte r13b_67
	*r13bOut = (byte) Mem0[rsp_107 + 0x0000000000000030:word64]
	return r8
// DataOut: fs r10 r11 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

fn000000000040C810_exit:
// DataOut: r13b r14 r14b r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r8 rsi
// LiveOut: ebp esp r12 r12b r12d rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C9B0_entry:
// DataOut: edi fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_15 = Mem0[0x000000000061B1F8:word64]
	branch rbx_15 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C9D1:
	branch Mem0[rbx_15:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040C9C8:
	rbx_15 = Mem0[rbx_15 + 0x0000000000000008:word64]
	branch rbx_15 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040C9C2:
// DataOut: ebp fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040C9F0:
	word64 r12_49 = 0x0000000000416919
	word64 rax_51 = getpwuid((uint64) ebp_10)
	word64 rdi_55 = 0x0000000000000011
	branch rax_51 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CA07:
	r12_49 = Mem0[r8:word64]
	rdi_55 = DPB(rax_51, strlen(r12_49), 0) + 0x0000000000000011
// DataOut: ebp fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CA16:
	word64 rax_65 = fn0000000000410C40(rsi, rdi_55, out rsp_11)
	Mem67[rax_65:word32] = ebp_10
	strcpy(rax_65 + 0x0000000000000010, r12_49)
	word64 rax_71 = Mem67[0x000000000061B1F8:word64]
	Mem72[0x000000000061B1F8:word64] = rax_65
	Mem73[rax_65 + 0x0000000000000008:word64] = rax_71
	rbx_15 = rax_65
// DataOut: fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040C9D5:
	word64 rsp_32 = rsp_11 + 0x0000000000000008
	word64 rax_26 = 0x0000000000000000
	word64 rdx_30 = rbx_15 + 0x0000000000000010
	word64 rbp_33
	*rbpOut = Mem0[rsp_32:word64]
	word64 r12_36
	*r12Out = Mem0[rsp_32 + 0x0000000000000008:word64]
	word64 rsp_38
	*rspOut = rsp_32 + 0x0000000000000010
	branch Mem0[rbx_15 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp esp fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040C9E3_1:
	rax_26 = rdx_30
// DataOut: ebp esp fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> r12:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040C9E7:
	return rax_26
// DataOut: ebp esp fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> r12:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040C9B0_exit:
// DataOut: ebp esp r12 r12b r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> r12:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040CB40(word64 rax, word64 rsi, word32 edi, word64 r8, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r8 rax rsi
// LiveOut: r12 r12b r12d rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CB40_entry:
// DataOut: edi fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word64 rbx_102
	word64 rbp_9 = (uint64) edi
	word32 ebp_10 = (word32) rbp_9
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_15 = Mem0[0x000000000061B1E8:word64]
	rbx_102 = rbx_15
	branch rbx_15 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CB61:
	branch Mem0[rbx_102:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CB58:
	rbx_102 = Mem0[rbx_102 + 0x0000000000000008:word64]
	branch rbx_102 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CB52:
// DataOut: ebp fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CB80:
	word64 rsp_56
	word64 rbp_58
	word32 ebp_59
	word32 edi_60
	word64 rbx_61
	byte SZO_62
	byte C_63
	byte Z_64
	byte SCZO_65
	word32 eax_66
	word64 rax_67
	word64 rdx_68
	word64 rdi_69
	word32 r12d_70
	word64 r8_71
	word64 rsi_72
	word64 r12_57
	call getgrgid (retsize: 8; depth: 20)
		uses: C_18,dwLoc04_4,dwLoc08_7,dwLoc0C_13,eax,ebp_10,edi,r12_48,r12d_49,r8,rax,rbp_9,rbx_15,rdi_47,rdx,rsi,rsp_11,SCZO,SZO_16,Z_17
		defs: C_63,eax_66,ebp_59,edi_60,r12_57,r12d_70,r8_71,rax_67,rbp_58,rbx_61,rdi_69,rdx_68,rsi_72,rsp_56,SCZO_65,SZO_62,Z_64
	word64 rdi_76 = 0x0000000000000011
	branch rax_67 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CB97:
	r12_57 = Mem0[r8_71:word64]
	rdi_76 = DPB(rax_67, strlen(r12_57), 0) + 0x0000000000000011
// DataOut: ebp fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CBA6:
	word64 rax_84 = fn0000000000410C40(rsi_72, rdi_76, out rsp_11)
	Mem86[rax_84:word32] = ebp_59
	strcpy(rax_84 + 0x0000000000000010, r12_57)
	word64 rax_90 = Mem86[0x000000000061B1E8:word64]
	Mem91[0x000000000061B1E8:word64] = rax_84
	Mem92[rax_84 + 0x0000000000000008:word64] = rax_90
	rbx_102 = rax_84
// DataOut: fs r10 r11 r11d r13d r14 r14d r15 r15d r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CB65:
	word64 rsp_33 = rsp_11 + 0x0000000000000008
	word64 rax_27 = 0x0000000000000000
	word64 rdx_31 = rbx_102 + 0x0000000000000010
	word64 rbp_34
	*rbpOut = Mem0[rsp_33:word64]
	word64 r12_37
	*r12Out = Mem0[rsp_33 + 0x0000000000000008:word64]
	word64 rsp_39
	*rspOut = rsp_33 + 0x0000000000000010
	branch Mem0[rbx_102 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CB73_1:
	rax_27 = rdx_31
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> r12:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040CB77:
	return rax_27
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> r12:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040CB40_exit:
// DataOut: r12 r12b r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> r12:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040CCD0(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_25 = rsi + 0x0000000000000014
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CD30:
	word64 rdx_67 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem78[rcx_25:byte] = (byte) (uint64) (rdx_67 * 0x0000000000000005 * 0x0000000000000002 + 0x0000000000000030 - edi)
	rdi = rdx_67
	edi = (word32) rdx_67 (alias)
	branch rdx_67 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem82[rcx_25 - 0x0000000000000001:byte] = 0x2D
	return rcx_25 - 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CCF0:
	word64 rdx_34 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem44[rcx_25:byte] = (byte) (uint64) ((word32) (rdi - (rdx_34 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_34
	branch rdx_34 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r11d r12 r13 r14 r15 r15b rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_25
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:0x0000000066666667 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r10 r11 r11d r12 r12b r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 rsi_5
	*rsiOut = 0x00000000CCCCCCCD
// DataOut: dil fs r10 r11 r11d r12 r12b r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rdi *u 0x00000000CCCCCCCD
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r10 r11 r11d r12 r12b r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: fs r10 r11 r11d r12 r12b r12d r13 r13d r14 r14d r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



word64 fn000000000040CDC0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12dOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rcx rdi rdx rsi
// LiveOut: r12d r13 r14 r15 rbp rsi rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64) Stack +0008(64) Stack +0010(64)
fn000000000040CDC0_entry:
	*rsiOut = rsi
// DataOut: ebx fs r10 r11 r12 r14d r8 r8d r9 r9b r9d rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CDC0:
	word64 r15_423
	word64 qwLoc40_114
	word64 rbp_127
	word64 rax_373
	word64 rcx_121
	word32 eax_296
	word32 ecx_290
	word64 r12_129
	word64 rbx_26 = (uint64) r9d
	word32 eax_36 = strlen(rdi)
	word64 rax_38 = DPB(rax, eax_36, 0)
	word64 r13_12 = rsi
	word64 r12_17 = rcx
	word32 ebx_125 = (word32) rbx_26
	byte bl_126 = (byte) rbx_26
	word64 qwLoc48_113 = rdi
	word64 r14_132 = rax_38
	word64 rbp_45 = rax_38
	branch (bl_126 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CF60:
	word64 rsp_555
	word64 r15_556
	word64 rsi_559
	word64 rcx_561
	word64 rbx_563
	word32 r9d_565
	byte SCZO_566
	word64 rdi_567
	word64 rdx_568
	word32 r8d_569
	word32 eax_570
	byte SZO_572
	byte C_573
	word64 rax_574
	byte Z_575
	word32 ebp_576
	byte CZ_577
	word32 ecx_578
	word32 r12d_579
	word32 edx_580
	word32 edi_581
	word32 r15d_582
	word16 ax_583
	byte al_584
	call __ctype_get_mb_cur_max (retsize: 8; depth: 88)
		uses: al_40,ax_39,bl_28,bLoc21,C_43,CZ,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_21,dwLoc18_24,dwLoc28_35,eax_36,ebp_46,ebx_27,ecx,edi,edx,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_33,qwLoc40,qwLoc48_31,r12_17,r12d_18,r13_12,r14_44,r15,r15d,r8d,r9d,rax_38,rbp_45,rbx_26,rcx,rdi,rdx,rsi,rsp_29,SCZO,SZO_41,Z_42
		defs: al_584,ax_583,bl_571,C_573,CZ_577,eax_570,ebp_576,ebx_564,ecx_578,edi_581,edx_580,r12_560,r12d_579,r13_558,r14_557,r15_556,r15d_582,r8d_569,r9d_565,rax_574,rbp_562,rbx_563,rcx_561,rdi_567,rdx_568,rsi_559,rsp_555,SCZO_566,SZO_572,Z_575
	branch rax_574 <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CF6F:
	word64 rsp_593
	word64 r15_594
	word64 rsi_597
	word64 rcx_599
	word64 rbp_600
	word64 rbx_601
	word32 r9d_603
	byte SCZO_604
	word64 rdi_605
	word64 rdx_606
	word32 r8d_607
	word32 eax_608
	byte SZO_610
	byte C_611
	word64 rax_612
	byte Z_613
	word32 ebp_614
	byte CZ_615
	word32 ecx_616
	word32 r12d_617
	word32 edx_618
	word32 edi_619
	word32 r15d_620
	word16 ax_621
	byte al_622
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_584,ax_583,bl_571,bLoc21,C_592,CZ_586,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_21,dwLoc18_24,dwLoc28_35,eax_570,ebp_576,ebx_564,ecx_578,edi_590,edx_580,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_33,qwLoc40,qwLoc48_31,r12_560,r12d_579,r13_558,r14_557,r15_556,r15d_582,r8d_569,r9d_565,rax_574,rbp_562,rbx_563,rcx_561,rdi_589,rdx_588,rsi_587,rsp_555,SCZO_585,SZO_591,Z_575
		defs: al_622,ax_621,bl_609,C_611,CZ_615,eax_608,ebp_614,ebx_602,ecx_616,edi_619,edx_618,r12_598,r12d_617,r13_596,r14_595,r15_594,r15d_620,r8d_607,r9d_603,rax_612,rbp_600,rbx_601,rcx_599,rdi_605,rdx_606,rsi_597,rsp_593,SCZO_604,SZO_610,Z_613
	branch rax_612 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CFA8:
	word64 r15_651 = (rax_612 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_655 = malloc(r15_651)
	qwLoc40_114 = rax_655
	branch rax_655 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D160:
	branch (bl_126 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D169:
	r15_423 = r14_132
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CFCF:
	word64 rsp_666
	word64 r15_667
	word64 rsi_670
	word64 rcx_672
	word64 rbx_674
	word32 r9d_676
	byte SCZO_677
	word64 rdi_678
	word64 rdx_679
	word32 r8d_680
	word32 eax_681
	byte SZO_683
	byte C_684
	word64 rax_685
	byte Z_686
	word32 ebp_687
	byte CZ_688
	word32 ecx_689
	word32 r12d_690
	word32 edx_691
	word32 edi_692
	word32 r15d_693
	word16 ax_694
	byte al_695
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_658,ax_657,bl_609,bLoc21,C_661,CZ_615,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_21,dwLoc18_24,dwLoc28_35,eax_656,ebp_614,ebx_602,ecx_616,edi_619,edx_618,qwLoc08,qwLoc10,qwLoc18,qwLoc30_653,qwLoc38_33,qwLoc40_662,qwLoc48_31,r12_598,r12d_617,r13_596,r14_595,r15_651,r15d_652,r8d_607,r9d_603,rax_655,rbp_600,rbx_601,rcx_599,rdi_665,rdx_663,rsi_664,rsp_593,SCZO_623,SZO_659,Z_660
		defs: al_695,ax_694,bl_682,C_684,CZ_688,eax_681,ebp_687,ebx_675,ecx_689,edi_692,edx_691,r12_671,r12d_690,r13_669,r14_668,r15_667,r15d_693,r8d_680,r9d_676,rax_685,rbp_673,rbx_674,rcx_672,rdi_678,rdx_679,rsi_670,rsp_666,SCZO_677,SZO_683,Z_686
	branch rax_685 == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CFEC:
	word64 rsi_714
	word64 qwLoc30_712
	Mem703[rax_655 - 0x0000000000000004 + r15_667:word32] = 0x00000000
	word64 rdi_704 = (uint64) Mem703[rax_655:word32]
	word32 edi_705 = (word32) rdi_704
	branch edi_705 == 0x00000000 l000000000040D106
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D106:
	r15_423 = (int64) wcswidth(rax_655, rax_612 + 0x0000000000000001)
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D004:
	byte bLoc21_866 = 0x00
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D010:
	word64 rsp_868
	word64 r15_869
	word64 rsi_872
	word64 rcx_874
	word64 rbx_876
	word32 r9d_878
	byte SCZO_879
	word64 rdi_880
	word64 rdx_881
	word32 r8d_882
	word32 eax_883
	byte SZO_885
	byte C_886
	word64 rax_887
	byte Z_888
	word32 ebp_889
	byte CZ_890
	word32 ecx_891
	word32 r12d_892
	word32 edx_893
	word32 edi_894
	word32 r15d_895
	word16 ax_896
	byte al_897
	call iswprint (retsize: 8; depth: 88)
		uses: al_702,ax_701,bl_682,bLoc21_867,C_708,CZ_688,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_21,dwLoc18_24,dwLoc28_35,eax_700,ebp_687,ebx_675,ecx_689,edi_705,edx_691,qwLoc08,qwLoc10,qwLoc18,qwLoc30_653,qwLoc38_33,qwLoc40_662,qwLoc48_31,r12_671,r12d_690,r13_669,r14_668,r15_864,r15d_865,r8d_680,r9d_676,rax_699,rbp_673,rbx_674,rcx_672,rdi_704,rdx_679,rsi_670,rsp_666,SCZO_677,SZO_706,Z_707
		defs: al_897,ax_896,bl_884,C_886,CZ_890,eax_883,ebp_889,ebx_877,ecx_891,edi_894,edx_893,r12_873,r12d_892,r13_871,r14_870,r15_869,r15d_895,r8d_882,r9d_878,rax_887,rbp_875,rbx_876,rcx_874,rdi_880,rdx_881,rsi_872,rsp_868,SCZO_879,SZO_885,Z_888
	branch eax_883 != 0x00000000 l000000000040D025
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D019:
	Mem924[rdi_880:word32] = 0x0000FFFD
	bLoc21_866 = 0x01
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D025:
	branch (word32) (uint64) Mem703[rdi_880:word32] != 0x00000000 l000000000040D010
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D030:
	r15_423 = (int64) wcswidth(rax_655, rax_612 + 0x0000000000000001)
	branch bLoc21_866 == 0x00 l000000000040D118
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D118:
	rsi_714 = rax_612 + 0x0000000000000001
	*rsiOut = rsi_714
	rax_373 = Mem703[r12_17:word64]
	branch r15_423 <=u rax_373 l000000000040CF28
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CF28:
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D125:
	qwLoc30_712 = rbp_45 + 0x0000000000000001
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D04D:
	*rsiOut = rax_655
	qwLoc30_712 = DPB(rax_887, wcstombs(0x0000000000000000, rax_655, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D064:
	word64 rax_735 = malloc(qwLoc30_712)
	rbp_127 = rax_735
	branch rax_735 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D138:
	branch (bl_126 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D141:
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D07A:
	word64 rdi_747 = (uint64) Mem703[rax_655:word32]
	word64 rax_741 = Mem703[r12_17:word64]
	word64 rax_743 = rax_655
	branch (word32) rdi_747 == 0x00000000 l000000000040D173
// DataOut: bl ebx fs r10 r11 r12 r13 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D173:
	r15_423 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D092:
	r15_423 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D0BA:
	word32 eax_783 = wcwidth(rdi_747)
	byte al_786 = (byte) eax_783
	branch eax_783 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D0A0:
	rax_743 = DPB(rax_743, (int16) al_786, 0) + r15_423
	branch rax_741 <u rax_743 l000000000040D0E0
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D0C4:
	Mem803[rsi_714:word32] = 0x0000FFFD
	rax_743 = r15_423 + 0x0000000000000001
	branch rax_741 >=u rax_743 l000000000040D0AC
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D0AC:
	rdi_747 = (uint64) Mem703[rsi_714:word32]
	r15_423 = rax_743
	branch (word32) rdi_747 == 0x00000000 l000000000040D0E0
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D0DA:
// DataOut: bl ebx fs r10 r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D0E0:
	Mem765[rax_655:word32] = 0x00000000
	word64 rsi_763
	*rsiOut = rax_655
	qwLoc48_113 = rax_735
	r14_132 = DPB(rax_743, wcstombs(rax_735, rax_655, qwLoc30_712), 0)
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CF83:
	branch (bl_126 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D14D:
	r15_423 = r14_132
	qwLoc40_114 = 0x0000000000000000
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CF8C:
	qwLoc40_114 = 0x0000000000000000
	rbp_127 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CDFA:
	qwLoc40_114 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE03:
	r15_423 = rbp_45
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE08:
	rax_373 = Mem0[r12_17:word64]
	branch r15_423 <=u rax_373 l000000000040CF2A
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CF2A:
	branch r15_423 >=u rax_373 l000000000040D180
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D180:
	rax_373 = r15_423
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CF33:
	Mem432[r12_17:word64] = r15_423
	word64 rax_428 = rax_373 - r15_423
	rcx_121 = rax_428
	ecx_290 = (word32) rax_428 (alias)
	eax_296 = (word32) (uint64) r8d (alias)
	branch eax_296 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx fs r10 r11 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE15:
	r14_132 = rax_373
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE1A:
	Mem386[r12_17:word64] = rax_373
	ecx_290 = 0x00000000
	rcx_121 = 0x0000000000000000
	eax_296 = (word32) (uint64) r8d (alias)
	branch eax_296 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx fs r10 r11 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CF4C:
	r12_129 = rcx_121
	rcx_121 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE2A:
	r12_129 = 0x0000000000000000
	branch eax_296 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE32:
	r12_129 = rcx_121 >>u 0x0000000000000001
	rcx_121 = (uint64) (ecx_290 & 0x00000001) + r12_129
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE3E:
	branch (bl_126 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE43_1:
	rcx_121 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_125 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE4A_1:
	r12_129 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(64) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE5A:
	word64 rdx_181 = rcx_121 - 0x0000000000000001
	word64 rbx_183 = r13_12 - 0x0000000000000001 + rdx
	branch rcx_121 == 0x0000000000000000 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE6D:
	branch r13_12 >=u rbx_183 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE72:
	word64 rax_257 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE89:
	Mem271[rbp_127 - 0x0000000000000001:byte] = 0x20
	r13_12 = r13_12 + 0x0000000000000001
	branch rdx_181 != rax_257 l000000000040CE80
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE80:
	rax_257 = rax_257 + 0x0000000000000001
	branch r13_12 == rbx_183 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Local -0048(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CE97:
	Mem196[rbp_127:byte] = 0x00
	word64 rdx_197 = rbx_183 - r13_12
	branch rdx_197 <=u r14_132 l000000000040CEB6
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(64) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CEB2_1:
	rdx_197 = r14_132
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0038(64) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CEB6:
	word64 rax_205 = mempcpy(r13_12, qwLoc48_113, rdx_197)
	word64 rdx_212 = rax_205
	word64 rsi_214 = r12_129 - 0x0000000000000001
	*rsiOut = rsi_214
	branch r12_129 == 0x0000000000000000 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CECD:
	branch rbx_183 <=u rax_205 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CED2:
	word64 rax_231 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CEE9:
	rdx_212 = rdx_212 + 0x0000000000000001
	Mem246[rdx_212 - 0x0000000000000001:byte] = 0x20
	branch rsi_214 != rax_231 l000000000040CEE0
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CEE0:
	rax_231 = rax_231 + 0x0000000000000001
	branch rdx_212 == rbx_183 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CEF6:
	Mem228[rdx_212:byte] = 0x00
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CEF9:
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0010(64) Local -0018(32) Local -0040(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040CEFF:
	free(qwLoc40_114)
	free(rbp_127)
	word64 rbp_86
	*rbpOut = qwLoc10
	word32 r12d_91
	*r12dOut = (word32) qwLoc08
	word64 r13_94
	*r13Out = qwArg00
	word64 r14_97
	*r14Out = qwArg08
	word64 r15_100
	*r15Out = qwArg10
	return fp + 0x0000000000000018
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040CDC0_exit:
// DataOut: r12d r13 r14 r15 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000018 r13:SLICE(r15, word64, 32) r12:r14 rbx:rbx eax:<invalid> r14:<invalid> rbp:r12 rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax ebp ebx edi r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64) Stack +0008(64) Stack +0010(64)
fn000000000040D240_entry:
// DataOut: ebx edi edx fs r10 r11 r11d r12 r14 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D240:
	word64 rax_192
	word64 rsp_37
	word64 r15_38
	word32 edx_39
	word64 r14_40
	word64 rsi_43
	word64 r12_44
	word64 rbx_46
	byte SCZO_47
	word64 rax_49
	word32 eax_50
	byte SZO_51
	byte C_52
	byte CZ_53
	word32 r15d_54
	word32 r12d_55
	word32 r14d_56
	byte al_57
	byte SO_58
	word64 rdx_59
	word64 rcx_60
	byte Z_61
	byte S_62
	word32 esi_63
	byte dh_64
	word32 ebx_65
	word32 edi_66
	selector fs_170
	word64 rdi_171
	word64 rbp_263
	word64 r13_266
	call __ctype_get_mb_cur_max (retsize: 8; depth: 72)
		uses: al_34,C_36,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_19,dwLoc14_22,dwLoc18_26,eax_33,edx,fs,qwLoc28_31,r12,r13_16,r14,r15_6,r15d_7,rax_32,rbp_23,rbx,rdi,rsi,rsp_27,SZO_35
		defs: al_57,C_52,CZ_53,dh_64,eax_50,ebx_65,edi_66,edx_39,esi_63,fs_48,r12_44,r12d_55,r13_41,r14_40,r14d_56,r15_38,r15d_54,rax_49,rbp_45,rbx_46,rcx_60,rdi_42,rdx_59,rsi_43,rsp_37,S_62,SCZO_47,SO_58,SZO_51,Z_61
	word64 rax_30 = Mem0[fs:0x00000028:word64]
	branch false l000000000040D370
// DataOut: edi fs r10 r11 r11d r13 r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D370:
	branch rbp_263 >=u r13_266 l000000000040D406
// DataOut: edi fs r10 r11 r11d r13 r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D379:
	word64 rsp_562
	word64 r15_563
	word32 edx_564
	word64 r14_565
	word64 r13_566
	word64 rsi_568
	word64 r12_569
	word64 rbx_571
	byte SCZO_572
	word64 rax_574
	word32 eax_575
	byte SZO_576
	byte C_577
	byte CZ_578
	word32 r15d_579
	word32 r12d_580
	word32 r14d_581
	byte al_582
	byte SO_583
	word64 rcx_585
	byte Z_586
	byte S_587
	word32 esi_588
	byte dh_589
	word32 ebx_590
	word32 edi_591
	word64 rbp_570
	word64 rdx_584
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: al_57,C_561,CZ_68,dh_64,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_19,dwLoc14_22,dwLoc18_26,dwLoc34,eax_50,ebx_65,edi_66,edx_39,esi_63,fs_48,qwLoc08,qwLoc10,qwLoc18,qwLoc28_31,qwLoc30,qwLoc48,r12_44,r12d_55,r13_41,r14_40,r14d_56,r15_38,r15d_54,rax_49,rbp_45,rbx_46,rcx_60,rdi_42,rdx_59,rsi_43,rsp_37,S_62,SCZO_560,SO_58,SZO_51,Z_61
		defs: al_582,C_577,CZ_578,dh_589,eax_575,ebx_590,edi_591,edx_564,esi_588,fs_573,r12_569,r12d_580,r13_566,r14_565,r14d_581,r15_563,r15d_579,rax_574,rbp_570,rbx_571,rcx_585,rdi_567,rdx_584,rsi_568,rsp_562,S_587,SCZO_572,SO_583,SZO_576,Z_586
	word64 rcx_594 = Mem0[rax_574:word64]
	rax_192 = 0x0000000000000000
	word32 eax_596 = 0x00000000
	word32 esi_599 = (word32) (uint64) ((word32) (uint64) r15d_579 & 0x00000002)
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D398:
	rbp_570 = rbp_570 + 0x0000000000000001
	word32 edx_611 = (word32) Mem0[rcx_594 + DPB(rdx_584, (word32) Mem0[rbp_570 - 0x0000000000000001:byte], 0) * 0x0000000000000002:word16]
	rdx_584 = DPB(rdx_584, edx_611, 0) (alias)
	branch (SLICE(edx_611, byte, 8) & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edi edx esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D3A9:
	branch esi_599 != 0x00000000 l000000000040D369
// DataOut: eax edi edx esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D3AD:
	rdx_584 = (uint64) (edx_611 & 0x00000002)
	branch (word32) rdx_584 != 0x00000000 l000000000040D393
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D3B2:
	branch eax_596 != 0x7FFFFFFF l000000000040D390
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D390:
	rax_192 = (uint64) (eax_596 + 0x00000001)
	eax_596 = (word32) rax_192 (alias)
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D393:
	branch rbp_570 == r13_566 l000000000040D3C5
// DataOut: eax edi esi fs r10 r11 r11d r13 r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D3B9:
// DataOut: edi fs r10 r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D277:
	branch rbp_263 >=u r13_266 l000000000040D406
// DataOut: edi fs r10 r11 r11d r13 r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D406:
	rax_192 = 0x0000000000000000
// DataOut: eax edi fs r10 r11 r11d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D280:
	word32 r12d_238 = 0x00000000
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2AC:
	word32 eax_272 = (word32) Mem0[rbp_263:byte]
	byte al_274 = (byte) eax_272
	branch al_274 <= 0x3F l000000000040D290
// DataOut: al eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D290:
	branch al_274 >= 0x25 l000000000040D29B
// DataOut: al eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D294:
	branch (byte) (uint64) (eax_272 - 0x00000020) >u 0x03 l000000000040D2C3
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2B4:
	branch al_274 < 0x41 l000000000040D2C3
// DataOut: al eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2B8:
	branch al_274 <= 0x5F l000000000040D29B
// DataOut: al eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2BC:
	branch (byte) (uint64) (eax_272 - 0x00000061) <=u 0x1D l000000000040D29B
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2C3:
// DataOut: fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2F4:
	word64 rsp_389
	word64 r15_390
	word32 edx_391
	word64 r14_392
	word64 rsi_395
	word64 r12_396
	word64 rbx_398
	byte SCZO_399
	word64 rax_401
	word32 eax_402
	byte SZO_403
	byte C_404
	byte CZ_405
	word32 r15d_406
	word32 r14d_408
	byte al_409
	byte SO_410
	word64 rdx_411
	word64 rcx_412
	byte Z_413
	byte S_414
	word32 esi_415
	byte dh_416
	word32 ebx_417
	word32 edi_418
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_377,C_257,CZ_373,dh_246,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_19,dwLoc14_22,dwLoc18_26,eax_376,ebx_262,edi_385,edx_253,esi_255,fs_251,qwLoc08,qwLoc10,qwLoc18,qwLoc28_31,qwLoc30_379,qwLoc48,r12_264,r12d_265,r13_381,r14_267,r14d_268,r15_269,r15d_270,rax_375,rbp_380,rbx_261,rcx_383,rdi_384,rdx_386,rsi_388,rsp_271,S_247,SCZO_387,SO_372,SZO_374,Z_256
		defs: al_409,C_404,CZ_405,dh_416,eax_402,ebx_417,edi_418,edx_391,esi_415,fs_400,r12_396,r12d_407,r13_393,r14_392,r14d_408,r15_390,r15d_406,rax_401,rbp_397,rbx_398,rcx_412,rdi_394,rdx_411,rsi_395,rsp_389,S_414,SCZO_399,SO_410,SZO_403,Z_413
	branch rax_401 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D360:
	branch r15d_406 == 0x00000000 l000000000040D29B
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D29B:
	rbp_263 = rbp_263 + 0x0000000000000001
	r12d_238 = (word32) (uint64) (r12d_238 + 0x00000001) (alias)
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D315:
	branch rax_401 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D3E8:
	branch r15d_406 != 0x00000000 l000000000040D369
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D3F1:
	rbp_263 = r13_266
	r12d_238 = (word32) (uint64) (r12d_238 + 0x00000001) (alias)
	branch r13_266 >u r13_266 l000000000040D2AC
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D31F:
	rdi_171 = (uint64) dwLoc34
	*rdiOut = rdi_171
	branch rax_401 != 0x0000000000000000 l000000000040D32F
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D32B_1:
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D32F:
	word32 eax_434 = wcwidth(rdi_171)
	branch eax_434 >= 0x00000000 l000000000040D2D0
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2D0:
	branch eax_434 > (word32) ((uint64) (0x7FFFFFFF - r12d_238)) l000000000040D3C0
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2E0:
// DataOut: eax fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D338:
	branch r14d_408 != 0x00000000 l000000000040D369
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D369:
	rax_192 = 0x00000000FFFFFFFF
// DataOut: eax edi fs r10 r11 r11d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D33D:
	word64 rsp_484
	word64 r15_485
	word32 edx_486
	word64 r14_487
	word64 r13_488
	word64 rsi_490
	word64 r12_491
	word64 rbp_492
	word64 rbx_493
	byte SCZO_494
	word64 rax_496
	word32 eax_497
	byte SZO_498
	byte C_499
	byte CZ_500
	word32 r15d_501
	word32 r12d_502
	word32 r14d_503
	byte al_504
	byte SO_505
	word64 rdx_506
	word64 rcx_507
	byte Z_508
	byte S_509
	word32 esi_510
	byte dh_511
	word32 ebx_512
	word32 edi_513
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_436,C_481,CZ_405,dh_416,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_19,dwLoc14_22,dwLoc18_26,dwLoc34,eax_434,ebx_433,edi_483,edx_391,esi_415,fs_400,qwLoc08,qwLoc10,qwLoc18,qwLoc28_31,qwLoc30_379,qwLoc48,r12_396,r12d_407,r13_393,r14_392,r14d_408,r15_390,r15d_406,rax_435,rbp_397,rbx_432,rcx_412,rdi_482,rdx_411,rsi_395,rsp_389,S_438,SCZO_423,SO_410,SZO_479,Z_480
		defs: al_504,C_499,CZ_500,dh_511,eax_497,ebx_512,edi_513,edx_486,esi_510,fs_495,r12_491,r12d_502,r13_488,r14_487,r14d_503,r15_485,r15d_501,rax_496,rbp_492,rbx_493,rcx_507,rdi_489,rdx_506,rsi_490,rsp_484,S_509,SCZO_494,SO_505,SZO_498,Z_508
	branch eax_497 != 0x00000000 l000000000040D2E3
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D34A:
	branch r12d_502 == 0x7FFFFFFF l000000000040D3C0
// DataOut: eax edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D3C0:
	rax_192 = 0x000000007FFFFFFF
// DataOut: eax edi fs r10 r11 r11d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D353:
// DataOut: eax fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2E3:
	word64 rsp_446
	word64 r15_447
	word32 edx_448
	word64 r14_449
	word64 rsi_452
	word64 r12_453
	word64 rbx_455
	byte SCZO_456
	word64 rax_458
	word32 eax_459
	byte SZO_460
	byte C_461
	byte CZ_462
	word32 r15d_463
	word32 r14d_465
	byte al_466
	byte SO_467
	word64 rdx_468
	word64 rcx_469
	byte Z_470
	byte S_471
	word32 esi_472
	byte dh_473
	word32 ebx_474
	word32 edi_475
	call mbsinit (retsize: 8; depth: 72)
		uses: al_436,C_439,CZ_405,dh_416,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_19,dwLoc14_22,dwLoc18_26,dwLoc34,eax_434,ebx_433,edi_443,edx_391,esi_415,fs_400,qwLoc08,qwLoc10,qwLoc18,qwLoc28_31,qwLoc30_379,qwLoc48,r12_396,r12d_407,r13_393,r14_392,r14d_408,r15_390,r15d_406,rax_435,rbp_444,rbx_440,rcx_412,rdi_442,rdx_411,rsi_395,rsp_389,S_438,SCZO_445,SO_410,SZO_437,Z_429
		defs: al_466,C_461,CZ_462,dh_473,eax_459,ebx_474,edi_475,edx_448,esi_472,fs_457,r12_453,r12d_464,r13_450,r14_449,r14d_465,r15_447,r15d_463,rax_458,rbp_454,rbx_455,rcx_469,rdi_451,rdx_468,rsi_452,rsp_446,S_471,SCZO_456,SO_467,SZO_460,Z_470
	branch eax_459 != 0x00000000 l000000000040D2A3
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D2A3:
	branch r13_266 <=u rbp_263 l000000000040D401
// DataOut: edi fs r10 r11 r11d r12d r13 r14d r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Local -0034(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D401:
	rax_192 = (uint64) r12d_238
// DataOut: eax edi fs r10 r11 r11d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Local -0028(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D3C5:
	word64 rsi_96 = rax_30 ^ Mem0[fs_170:0x00000028:word64]
	*rsiOut = rsi_96
	word32 esi_97 = (word32) rsi_96
	branch rsi_96 != 0x0000000000000000 l000000000040D40A
// DataOut: eax edi esi fs r10 r11 r11d r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0018(32) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D40A:
	__stack_chk_fail()
// DataOut: esi fs r10 r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l000000000040D40A_thunk_fn000000000040D420:
	word32 ebx_152
	word64 rsp_153
	word64 rbp_154
	word64 rsi_155
	word32 edi_156
	word64 r12_157
	word64 r13_158
	word64 r14_159
	word64 r15_160
	return fn000000000040D420(esi_97, rdi_171, fs_170, qwLoc48, out ebx_152, out rsp_153, out rbp_154, out rsi_155, out edi_156, out r12_157, out r13_158, out r14_159, out r15_160)
// DataOut: eax ebp ebx edi fs r10 r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D3D5:
	word32 ebx_131
	*ebxOut = (word32) qwLoc18
	word64 rbp_134
	*rbpOut = qwLoc10
	word64 r12_137
	*r12Out = qwLoc08
	word64 r13_141
	*r13Out = qwArg00
	word64 r14_144
	*r14Out = qwArg08
	word64 r15_148
	*r15Out = qwArg10
	word64 rsp_150
	*rspOut = fp + 0x0000000000000018
	return rax_192
// DataOut: eax ebp ebx edi fs r10 r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040D240_exit:
// DataOut: eax ebp ebx edi r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> r12:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040D420(word32 esi, word64 rdi, selector fs, word64 qwArg00, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rdi
// LiveOut: eax ebp ebx edi r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040D420_entry:
// DataOut: esi fs r10 r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = (uint64) esi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	qwLoc08 = DPB(qwLoc08, dwLoc08, 0) (alias)
	rbx = rdi
	rsp = fp - 0x0000000000000010
	eax = strlen(rdi)
	rax = DPB(rax, eax, 0) (alias)
	rsp = fp - 0x0000000000000008
	SCZO = cond(fp - 0x0000000000000008)
	rdi = rbx
	edi = (word32) rdi (alias)
	rdx = (uint64) ebp
	edx = (word32) rdx (alias)
	dh = SLICE(rdx, byte, 8) (alias)
	rbx = qwLoc08
	rsp = fp
	rbp = qwArg00
	rsp = fp + 0x0000000000000008
	rsi = rax
	esi = (word32) rsi (alias)
// DataOut: edx fs r10 r11 r11d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43B_thunk_fn000000000040D240:
	rax = fn000000000040D240(edx, rsi, rdi, fs, qwArg00, qwArg08, qwArg10, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax ebp ebx edi fs r10 r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx eax:<invalid> rdi:rdi rdx:(uint64) ebp rsi:rax -8(fp):rbx -4(fp):rbp

fn000000000040D420_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use edi (=> ediOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax ebp ebx edi r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r15:<invalid> r13:<invalid> rax:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r14, word64 r15, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r14 r15 r8 rdi rsi
// LiveOut: eax r12 r12b r13 r13d r14 r15 rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64) Stack +0008(64) Stack +0010(64)
fn000000000040D450_entry:
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = r15
	rsp = fp - 0x0000000000000008
	dwLoc08 = r14
	rsp = fp - 0x000000000000000C
	dwLoc0C = r13
	rsp = fp - 0x0000000000000010
	dwLoc10 = r12
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000050
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc50 = rsi
	qwLoc38 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(64) Local -0008(64) Local -0050(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D490:
	rsi = qwLoc50
	rdx = qwLoc38
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc48 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc28 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r14, r15, qwLoc58, qwLoc50, qwLoc48, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: fs r10 r11 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: fs r10 r11 r12 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r14, r15, qwLoc08, qwArg00, qwArg08, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r14, r15, qwLoc08, qwArg00, qwArg08, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D547:
	v24 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v24
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: fs r10 r11 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: fs r10 r11 r12 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	r15 = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdi = rbx + r15 * 0x0000000000000008
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = rcx + rax * 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = memcpy(rdi, rsi, rdx)
	return eax
// DataOut: eax fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D5C3:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax fs r10 r11 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4; depth: 84)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax fs r10 r11 r12 r13 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Stack +0000(64) Stack +0008(64) Stack +0010(64)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000018
	SCZO = cond(fp - 0x0000000000000018)
	rbx = qwLoc18
	rsp = fp - 0x0000000000000010
	rbp = qwLoc10
	rsp = fp - 0x0000000000000008
	r12 = qwLoc08
	rsp = fp
	r13 = qwArg00
	rsp = fp + 0x0000000000000008
	r14 = qwArg08
	rsp = fp + 0x0000000000000010
	r15 = qwArg10
	rsp = fp + 0x0000000000000018
	return eax
// DataOut: eax fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	r15d = (word32) r15 (alias)
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040D450_exit:
	use rsp (=> rspOut)
	use rsi (=> rsiOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r12b r13 r13d r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r14, word64 r15, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r14 r15 r8 rdi rsi
// LiveOut: r12 r12b r13 r13d r14 r15 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
// DataOut: edi fs r10 r11 r14 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsp_16
	word64 rsi_17
	word64 r12_18
	word64 r13_19
	word64 r14_20
	word64 r15_21
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r14, r15, qwArg00, qwArg08, qwArg10, out rsp_16, out rsi_17, out r12_18, out r13_19, out r14_20, out r15_21)
	return rsi_17
// DataOut: fs r10 r11 r12 r12b r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut: r12 r12b r13 r13d r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid>



word64 fn000000000040D6A0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D6A0_entry:
// DataOut: ebx fs r10 r11 r15 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_120 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: fs r10 r11 r15 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32)

l000000000040D713:
	fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64])
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6B8:
	word64 rcx_50 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_51 = cond(rcx_50 - 0x0000000000000006)
	byte C_111 = SCZO_51
	byte Z_144 = SCZO_51
	byte CZ_100 = SCZO_51
	branch rcx_50 <= 0x0000000000000006 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6C8:
	word64 rsi_146 = rax_11 - 0x0000000000000006
	word64 rdi_149 = 0x0000000000415FD8
	word64 rcx_151 = 0x0000000000000007
// DataOut: fs r10 r11 r15 r9 rax rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D6:
	branch rcx_151 == 0x0000000000000000 l000000000040D6D8
// DataOut: fs r10 r11 r15 r9 rax rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D6_1:
	byte SCZO_141 = cond(Mem0[rsi_159:byte] - Mem0[rdi_160:byte])
	C_111 = SCZO_141 (alias)
	Z_144 = SCZO_141 (alias)
	CZ_100 = SCZO_141 (alias)
	rsi_146 = rsi_159 + 0x0000000000000001
	rdi_149 = rdi_160 + 0x0000000000000001
	rcx_151 = rcx_151 - 0x0000000000000001
	word64 rsi_159 = rsi_146
	word64 rdi_160 = rdi_149
	branch Mem0[rsi_159:byte] != Mem0[rdi_160:byte] l000000000040D6D6
// DataOut: fs r10 r11 r15 r9 rax rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D8:
	branch Z_144 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6DA:
	word64 rcx_105 = 0x0000000000000003
	word64 rsi_101 = rax_11 + 0x0000000000000001
	word64 rdi_103 = 0x0000000000415FE0
// DataOut: fs r10 r11 r15 r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E7:
	branch rcx_105 == 0x0000000000000000 l000000000040D6E9
// DataOut: fs r10 r11 r15 r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E7_2:
	byte SCZO_128 = cond(Mem0[rsi_161:byte] - Mem0[rdi_162:byte])
	C_111 = SCZO_128 (alias)
	CZ_100 = SCZO_128 (alias)
	rsi_101 = rsi_161 + 0x0000000000000001
	rdi_103 = rdi_162 + 0x0000000000000001
	rcx_105 = rcx_105 - 0x0000000000000001
	word64 rsi_161 = rsi_101
	word64 rdi_162 = rdi_103
	branch Mem0[rsi_161:byte] != Mem0[rdi_162:byte] l000000000040D6E7
// DataOut: fs r10 r11 r15 r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E9:
	rbx_120 = rax_11 + 0x0000000000000001
	branch CZ_100 != C_111 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6F8:
	Mem126[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_120 = rax_11 + 0x0000000000000004
// DataOut: fs r10 r11 r15 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_120
	Mem43[0x000000000061A648:word64] = rbx_120
	return fp + 0x0000000000000004
// DataOut: ebx fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx

fn000000000040D6A0_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r11 r14 r15 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_16 = 0x0000000000000007
	word64 rdi_15 = fp - 0x0000000000000048
// DataOut: ebx esi fs r11 r14 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_16 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r11 r14 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r11 r14 r15 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

l000000000040D759:
	Mem26[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem29[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem32[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem35[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem38[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem41[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem44[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem18[rdi_15:word64] = 0x0000000000000000
	rdi_15 = rdi_15 + 0x0000000000000008
	rcx_16 = rcx_16 - 0x0000000000000001
// DataOut: ebx esi fs r11 r14 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, word64 r13, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r10Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r13 r15 r8 rdi
// LiveOut: ebx esp r10 r13 r15 rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D7B0_entry:
	*r10Out = r10
	*r15Out = r15
// DataOut: esi fs r10 r13 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 rax_23 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word64 rsp_22 = fp - 0x0000000000000018
	word64 rbx_107 = rax_23
	branch rax_23 == rdi l000000000040D7E8
// DataOut: fs r10 r13 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D7E8:
	word64 rbp_64
	word64 r10_65
	word32 r12d_66
	word64 r15_67
	word64 rax_68 = fn0000000000411900(rdi, rdi, r8, r13, r15, fs, out rsp_22, out rbp_64, out r10_65, out r12d_66, out r15_67)
	byte dl_73 = (byte) (uint64) ((word32) Mem0[rax_68:byte] & 0xFFFFFFDF)
	branch dl_73 != 0x55 l000000000040D850
// DataOut: dl fs r10 r12d r15 r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D850:
	branch dl_73 != 0x47 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_68 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D861:
	branch Mem0[rax_68 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D867:
	branch Mem0[rax_68 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D86D:
	branch Mem0[rax_68 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D873:
	branch Mem0[rax_68 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D879:
	branch Mem0[rax_68 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D87F:
	branch Mem0[rax_68 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D885:
	rbx_107 = 0x0000000000415FED
	branch Mem0[rbp_64:byte] == 0x60 l000000000040D89B
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D897_1:
	rbx_107 = 0x0000000000415FE8
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D89B:
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_68 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_68 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D810:
	branch Mem0[rax_68 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D816:
	branch Mem0[rax_68 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D81C:
	branch Mem0[rax_68 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D838:
	rbx_107 = 0x0000000000415FEB
	branch r12d_66 == 0x00000007 l000000000040D84A
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D846_1:
	rbx_107 = 0x0000000000416DEA
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D84A:
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D822:
	rbx_107 = 0x0000000000415FE4
	branch Mem0[rax_23:byte] != 0x60 l000000000040D833
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D82F_1:
	rbx_107 = 0x0000000000415FF1
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D833:
// DataOut: fs r10 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000040D7D7:
	word64 rsp_42 = rsp_22 + 0x0000000000000008
	word32 ebx_48
	*ebxOut = (word32) Mem0[rsp_42:word64]
	word64 r13_54
	*r13Out = Mem0[rsp_42 + 0x0000000000000018:word64]
	word64 rsp_55
	*rspOut = rsp_42 + 0x0000000000000020
	return rbx_107
// DataOut: ebx esp fs r10 r13 r15 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

fn000000000040D7B0_exit:
// DataOut: ebx esp r10 r13 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word32 r9d, word64 r14, word64 r15, selector fs, word64 qwArg20, word64 qwArg28, word64 qwArg30, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r14 r15 r8 r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp edi esp r10 r11 r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdi rdx
fn000000000040D8A0_entry:
// DataOut: edi fs r10 r14 r15 r8 r8d r9b rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D8A0:
	word64 rcx_56
	word64 r14_57
	word32 r14d_58
	word32 r8d_59
	word64 rdx_61
	word64 r12_62
	word64 rbp_63
	word64 rbx_64
	word32 ebx_65
	word32 r9d_66
	byte SCZO_67
	word64 rax_68
	word64 rdi_69
	word32 eax_72
	byte SZO_73
	byte C_74
	byte al_75
	byte CZ_76
	word64 r11_77
	byte Z_78
	word32 edi_79
	word32 esi_80
	word64 r9_81
	word32 ebp_82
	word64 r8_83
	byte cl_84
	word32 r11d_86
	word32 r12d_87
	byte r12b_88
	word32 edx_89
	byte dl_90
	byte r11b_91
	word16 dx_92
	word64 r10_93
	byte dil_94
	byte sil_95
	selector fs_1001
	word64 rsi_1019
	word64 r13_1321
	word64 r15_1033
	word64 rsp_1034
	word32 ecx_1044
	call __ctype_get_mb_cur_max (retsize: 8; depth: 232)
		uses: C_53,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_23,dwLoc18_26,dwLoc50_38,dwLocAC_37,eax_51,ebx_29,fs,qwLoc28_49,qwLoc70_42,qwLoc78_45,qwLoc88_39,qwLocB8_34,qwLocC0_36,r12,r13_17,r14_11,r14d_12,r15_6,r8d,r9d,rax_50,rbp,rbx_28,rcx,rdi,rdx,rsi,rsp_30,SZO_52
		defs: al_75,C_74,cl_84,CZ_76,dil_94,dl_90,dx_92,eax_72,ebp_82,ebx_65,ecx_85,edi_79,edx_89,esi_80,fs_71,r10_93,r11_77,r11b_91,r11d_86,r12_62,r12b_88,r12d_87,r13_60,r14_57,r14d_58,r15_55,r8_83,r8d_59,r9_81,r9d_66,rax_68,rbp_63,rbx_64,rcx_56,rdi_69,rdx_61,rsi_70,rsp_54,SCZO_67,sil_95,SZO_73,Z_78
	byte al_102 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) ebx_65 >>u 0x00000001) & 0x00000001)
	branch r14d_58 >u 0x00000008 l000000000040E280
// DataOut: edi esp fs r10 r13 r14d r15 r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64) Local -00C0(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040D92D:
	word64 rbx_1024
	word64 r14_155
	word64 rax_109 = (uint64) r14d_58
	word64 r11_110 = rsi
	switch (r14d_58) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: edi esp fs r10 r11 r13 r15 r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64)

l000000000040DFE0:
	branch r14d_58 == 0x00000008 l000000000040E012
// DataOut: esp fs r10 r11 r13 r15 r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32)

l000000000040DFE2:
	word32 ebx_1966
	word64 rsp_1967
	word64 r10_1968
	word64 r13_1969
	word64 r15_1970
	word64 rax_1971 = fn000000000040D7B0((word32) (uint64) (word32) (uint64) r8d, 0x0000000000415FF5, r8_83, r13_1321, r15_1033, fs_1001, out ebx_1966, out rsp_1967, out r10_1968, out r13_1969, out r15_1970)
	Mem1975[rsp_1967 + 0x0000000000000070:word64] = rax_1971
	rsi_1019 = (uint64) ebx_1966
	word32 ebx_1976
	word64 r10_1978
	rax_109 = fn000000000040D7B0((word32) rsi_1019, 0x0000000000416DEA, r8_83, r13_1969, r15_1970, fs_1001, out ebx_1976, out rsp_1034, out r10_1978, out r13_1321, out r15_1033)
	r11_110 = Mem1975[rsp_1034 + 0x0000000000000020:word64]
	Mem1985[rsp_1034 + 0x0000000000000068:word64] = rax_109
// DataOut: esp fs r10 r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E012:
	rbx_1024 = 0x0000000000000000
	branch Mem0[rsp_1034 + 0x0000000000000033:byte] != 0x00 l000000000040E044
// DataOut: esp fs r10 r11 r13 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E01B:
	word64 rdx_1929 = Mem0[rsp_1034 + 0x0000000000000070:word64]
	word32 eax_1933 = (word32) Mem0[rdx_1929:byte]
	rax_109 = DPB(rax_109, eax_1933, 0) (alias)
	byte al_1935 = (byte) eax_1933
	branch al_1935 == 0x00 l000000000040E044
// DataOut: al esp fs r10 r11 r13 r15 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E027:
	word64 rcx_1939 = Mem0[rsp_1034 + 0x0000000000000028:word64]
	ecx_1044 = (word32) rcx_1939 (alias)
// DataOut: al esp fs r10 r11 r13 r15 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E030:
	branch rbx_1024 >=u r11_110 l000000000040E038
// DataOut: al esp fs r10 r11 r13 r15 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E035:
	Mem1959[rcx_1939 + rbx_1024:byte] = al_1935
// DataOut: esp fs r10 r11 r13 r15 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E038:
	rbx_1024 = rbx_1024 + 0x0000000000000001
	word32 eax_1953 = (word32) Mem0[rdx_1929 + rbx_1024:byte]
	rax_109 = DPB(rax_109, eax_1953, 0) (alias)
	al_1935 = (byte) eax_1953 (alias)
	branch al_1935 != 0x00 l000000000040E030
// DataOut: al esp fs r10 r11 r13 r15 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E044:
	word64 rbp_1915 = Mem0[rsp_1034 + 0x0000000000000068:word64]
	Mem1916[rsp_1034 + 0x0000000000000038:word64] = r11_110
	word64 rax_1921 = DPB(rax_109, strlen(rbp_1915), 0)
	Mem1922[rsp_1034 + 0x0000000000000060:word64] = rbp_1915
	Mem1925[rsp_1034 + 0x0000000000000020:byte] = 0x01
	word32 edi_1918
	*ediOut = (word32) rbp_1915
	r14_155 = rax_1921
	r11_110 = Mem1925[rsp_1034 + 0x0000000000000038:word64]
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF90:
	r14_155 = 0x0000000000000000
	rbx_1024 = 0x0000000000000000
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DFB0:
	r14_155 = 0x0000000000000001
	rbx_1024 = 0x0000000000000000
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF50:
	branch al_102 != 0x00 l000000000040E428
// DataOut: edi esp fs r10 r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: edi esp fs r10 r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2B3:
	r14_155 = 0x0000000000000001
	rbx_1024 = 0x0000000000000001
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF64:
	Mem1858[rdi:byte] = 0x22
	r14_155 = 0x0000000000000001
	rbx_1024 = 0x0000000000000001
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF10:
	branch al_102 != 0x00 l000000000040E408
// DataOut: edi esp fs r10 r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E408:
	r14_155 = 0x0000000000000001
	rbx_1024 = 0x0000000000000000
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: edi esp fs r10 r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2D1:
	r14_155 = 0x0000000000000001
	rbx_1024 = 0x0000000000000001
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF24:
	Mem1829[rdi:byte] = 0x27
	r14_155 = 0x0000000000000001
	rbx_1024 = 0x0000000000000001
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E070:
	r14_155 = 0x0000000000000001
	rbx_1024 = 0x0000000000000000
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D940:
	r14_155 = 0x0000000000000000
	rbx_1024 = 0x0000000000000000
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D960:
	Mem208[rsp_1034 + 0x0000000000000038:byte] = (byte) (uint64) ((word32) Mem0[rsp_1034 + 0x0000000000000033:byte] ^ 0x00000001)
	word64 rax_1018 = (uint64) ((word32) Mem208[rsp_1034 + 0x0000000000000020:byte] ^ 0x00000001)
	Mem215[rsp_1034 + 0x0000000000000095:byte] = (byte) rax_1018
	word64 r9_1010
	*r9Out = r14_155
	word64 rbp_1025 = 0x0000000000000000
	word64 r14_1031 = r11_110
	word64 r8_1009
	*r8Out = r13_1321
// DataOut: edi esp fs r10 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D986:
	word64 rax_284
	byte al_1780 = rbp_1025 != r15_1033
	word64 rax_1708 = DPB(rax_1018, al_1780, 0)
	branch r15_1033 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al edi esp fs r10 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D996:
// DataOut: al edi esp fs r10 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A0:
	branch al_1780 == 0x00 l000000000040DB86
// DataOut: edi esp fs r10 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A8:
	byte r11b_1005
	word64 r13_1713
	word32 r11d_1715
	byte cl_584 = r9_1010 != 0x0000000000000000
	ecx_1044 = DPB(ecx_1044, cl_584, 0) (alias)
	branch r9_1010 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx edi esp fs r10 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9B4:
	branch Mem215[rsp_1034 + 0x0000000000000020:byte] == 0x00 l000000000040E0A0
// DataOut: ecx edi esp fs r10 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9BF:
	rax_1708 = rbp_1025 + r9_1010
	branch r15_1033 <u rax_1708 l000000000040E0A0
// DataOut: ecx edi esp fs r10 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0A0:
	r13_1713 = r8_1009 + rbp_1025
	r11d_1715 = 0x00000000 (alias)
	r11b_1005 = 0x00 (alias)
// DataOut: edi esp fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9CD:
	rsi_1019 = Mem215[rsp_1034 + 0x0000000000000060:word64]
	Mem1729[rsp_1034 + 0x0000000000000050:word32] = ecx_1044
	Mem1730[rsp_1034 + 0x0000000000000048:word64] = r8_1009
	r13_1713 = r8_1009 + rbp_1025
	Mem1734[rsp_1034 + 0x0000000000000040:word64] = r9_1010
	word32 eax_1735 = memcmp(r13_1713, rsi_1019, r9_1010)
	word32 edi_1732
	*ediOut = (word32) r13_1713
	rax_1708 = DPB(rax_1708, eax_1735, 0) (alias)
	*r9Out = Mem1734[rsp_1034 + 0x0000000000000040:word64]
	r8_1009 = Mem1734[rsp_1034 + 0x0000000000000048:word64]
	*r8Out = r8_1009
	branch eax_1735 != 0x00000000 l000000000040E0B0
// DataOut: edi esp fs r10 r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0B0:
	r11d_1715 = 0x00000000 (alias)
	r11b_1005 = 0x00 (alias)
// DataOut: edi esp fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA05:
	branch Mem1734[rsp_1034 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: edi esp fs r10 r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA10:
	r11d_1715 = 0x00000001 (alias)
	r11b_1005 = 0x01 (alias)
// DataOut: edi esp fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA20:
	word32 r12d_1028 = (word32) Mem215[r13_1713:byte]
	byte r12b_1029 = (byte) r12d_1028
	branch r12b_1029 >u 0x7E l000000000040DE18
// DataOut: edi esp fs r10 r11b r11d r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE18:
	byte dl_1167
	word32 esi_1003
	byte dl_1015
	branch Mem215[rsp_1034 + 0x0000000000000078:word64] != 0x0000000000000001 l000000000040E0C0
// DataOut: edi esp fs r10 r11b r11d r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0C0:
	Mem1266[rsp_1034 + 0x00000000000000B0:word64] = 0x0000000000000000
	branch r15_1033 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: esp fs r10 r11b r11d r12b r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E285:
	Mem1695[rsp_1034 + 0x0000000000000050:word64] = r9_1010
	Mem1696[rsp_1034 + 0x0000000000000048:word32] = r11d_1715
	Mem1697[rsp_1034 + 0x0000000000000040:word64] = r8_1009
	word64 rax_1699 = DPB(rax_1708, strlen(r8_1009), 0)
	r9_1010 = Mem1697[rsp_1034 + 0x0000000000000050:word64]
	r15_1033 = rax_1699
	r11b_1005 = (byte) (uint64) Mem1697[rsp_1034 + 0x0000000000000048:word32] (alias)
// DataOut: esp fs r10 r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0D6:
	Mem1281[rsp_1034 + 0x0000000000000080:word64] = rbx_1024
	Mem1282[rsp_1034 + 0x0000000000000096:byte] = r12b_1029
	Mem1283[rsp_1034 + 0x0000000000000098:word64] = r13_1713
	Mem1286[rsp_1034 + 0x0000000000000048:word64] = rbp_1025
	Mem1287[rsp_1034 + 0x0000000000000088:word64] = r9_1010
	Mem1291[rsp_1034 + 0x0000000000000097:byte] = r11b_1005
	Mem1292[rsp_1034 + 0x0000000000000050:word64] = r14_1031
	Mem1294[rsp_1034 + 0x0000000000000040:word64] = r15_1033
// DataOut: esp fs r10 r12d r13 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E11D:
	word64 r15_1316
	word64 rcx_1317
	word32 r14d_1319
	word32 r8d_1320
	word64 rdx_1322
	word64 r12_1323
	word64 rbp_1324
	word64 rbx_1325
	word32 ebx_1326
	word32 r9d_1327
	byte SCZO_1328
	word64 rax_1329
	word32 eax_1333
	byte SZO_1334
	byte C_1335
	byte al_1336
	byte CZ_1337
	word64 r11_1338
	byte Z_1339
	word32 edi_1340
	word64 r9_1342
	word32 ebp_1343
	word64 r8_1344
	byte cl_1345
	word32 r11d_1347
	word32 r12d_1348
	byte r12b_1349
	word32 edx_1350
	byte dl_1351
	byte r11b_1352
	word16 dx_1353
	word64 r10_1354
	byte dil_1355
	byte sil_1356
	word64 rdi_1330
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_1300,bLocAD_164,bLocC0_165,C_1280,cl_584,CZ_653,dil_1305,dl_1311,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_23,dwLoc18_26,dwLoc50_38,dwLocAC_163,dx_1312,eax_1299,ebp_572,ebx_1285,ecx_586,edi_1304,edx_1310,esi_545,fs_543,qwLoc28_49,qwLoc68_96,qwLoc70_42,qwLoc78_45,qwLoc80_166,qwLoc88_39,qwLocB8_34,qwLocC0_162,r10_555,r11_1274,r11b_1268,r11d_1267,r12_1288,r12b_1290,r12d_1289,r13_1296,r14_1306,r14d_1307,r15_1308,r8_1272,r8d_1269,r9_1273,r9d_1271,rax_1298,rbp_571,rbx_1295,rcx_1302,rdi_1303,rdx_1309,rsi_1314,rsp_1297,SCZO_1313,sil_544,SZO_1279,Z_1265
		defs: al_1336,C_1335,cl_1345,CZ_1337,dil_1355,dl_1351,dx_1353,eax_1333,ebp_1343,ebx_1326,ecx_1346,edi_1340,edx_1350,esi_1341,fs_1332,r10_1354,r11_1338,r11b_1352,r11d_1347,r12_1323,r12b_1349,r12d_1348,r13_1321,r14_1318,r14d_1319,r15_1316,r8_1344,r8d_1320,r9_1342,r9d_1327,rax_1329,rbp_1324,rbx_1325,rcx_1317,rdi_1330,rdx_1322,rsi_1331,rsp_1315,SCZO_1328,sil_1356,SZO_1334,Z_1339
	branch rax_1329 == 0x0000000000000000 l000000000040E30E
// DataOut: eax edi esp fs r10 r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E30E:
	r12d_1028 = (word32) Mem1294[rsp_1034 + 0x0000000000000096:byte]
	rax_1018 = rbx_1325
	rbp_1025 = Mem1294[rsp_1034 + 0x0000000000000048:word64]
	*r9Out = Mem1294[rsp_1034 + 0x0000000000000088:word64]
	r11b_1005 = (byte) (word32) Mem1294[rsp_1034 + 0x0000000000000097:byte] (alias)
	*r8Out = r13_1321
	rbx_1024 = Mem1294[rsp_1034 + 0x0000000000000080:word64]
	r12b_1029 = (byte) r12d_1028 (alias)
	dl_1167 = (byte) (uint64) ((word32) (uint64) r12d_1348 ^ 0x00000001) (alias)
	r14_1031 = Mem1294[rsp_1034 + 0x0000000000000050:word64]
	r15_1033 = Mem1294[rsp_1034 + 0x0000000000000040:word64]
// DataOut: dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E157:
	branch rax_1329 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: eax edi esp fs r10 r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E350:
	r12d_1028 = (word32) Mem1294[rsp_1034 + 0x0000000000000096:byte]
	rax_1018 = rbx_1325
	rbp_1025 = Mem1294[rsp_1034 + 0x0000000000000048:word64]
	*r9Out = Mem1294[rsp_1034 + 0x0000000000000088:word64]
	r12b_1029 = (byte) r12d_1028 (alias)
	r11b_1005 = (byte) (word32) Mem1294[rsp_1034 + 0x0000000000000097:byte] (alias)
	*r8Out = r13_1321
	rbx_1024 = Mem1294[rsp_1034 + 0x0000000000000080:word64]
	r14_1031 = Mem1294[rsp_1034 + 0x0000000000000050:word64]
	dl_1167 = 0x01 (alias)
	r15_1033 = Mem1294[rsp_1034 + 0x0000000000000040:word64]
// DataOut: dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E161:
	branch rax_1329 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: eax edi esp fs r10 r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E391:
	r12d_1028 = (word32) Mem1294[rsp_1034 + 0x0000000000000096:byte]
	word64 r10_1595
	*r10Out = r15_1316
	r15_1033 = Mem1294[rsp_1034 + 0x0000000000000040:word64]
	rsi_1019 = r14_1031
	rax_1018 = rbx_1325
	*r8Out = r13_1321
	rbp_1025 = Mem1294[rsp_1034 + 0x0000000000000048:word64]
	*r9Out = Mem1294[rsp_1034 + 0x0000000000000088:word64]
	r12b_1029 = (byte) r12d_1028 (alias)
	r11b_1005 = (byte) (word32) Mem1294[rsp_1034 + 0x0000000000000097:byte] (alias)
	rbx_1024 = Mem1294[rsp_1034 + 0x0000000000000080:word64]
	r14_1031 = Mem1294[rsp_1034 + 0x0000000000000050:word64]
	word64 r13_1619 = Mem1294[rsp_1034 + 0x0000000000000098:word64]
	branch r15_1033 <=u r14_1031 l000000000040E3FE
// DataOut: edi esp fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3DB:
	branch Mem1294[rdx_1322:byte] != 0x00 l000000000040E3F0
// DataOut: edi esp fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3F0:
	rax_1018 = rax_1018 + 0x0000000000000001
	branch r15_1033 >u rbp_1025 + rax_1018 l000000000040E3E8
// DataOut: edi esp fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E8:
	branch Mem1294[r13_1619 + rax_1018:byte] == 0x00 l000000000040E3FE
// DataOut: edi esp fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E1:
// DataOut: edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3FE:
	dl_1167 = 0x01 (alias)
// DataOut: dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E16B:
	branch Mem1294[rsp_1034 + 0x0000000000000033:byte] == 0x00 l000000000040E1BF
// DataOut: eax esp fs r10 r12d r13 r14 r15 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E172:
	branch Mem1294[rsp_1034 + 0x0000000000000034:word32] != 0x00000002 l000000000040E1BF
// DataOut: eax esp fs r10 r12d r13 r14 r15 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E179:
	branch rax_1329 == 0x0000000000000001 l000000000040E1BF
// DataOut: eax esp fs r10 r12d r13 r14 r15 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E17F:
	word64 rdx_1551 = 0x0000000000000001
// DataOut: eax esp fs r10 r12d r13 r14 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E190:
	rdi_1330 = DPB(rdi_1330, (word32) Mem1294[r15_1316 + rdx_1551:byte], 0) (alias)
	ecx_1044 = rdi_1330 - 0x000000000000005B
	byte cl_1571 = (byte) (rdi_1330 - 0x000000000000005B)
	branch cl_1571 >u 0x21 l000000000040E1B6
// DataOut: cl eax esp fs r10 r12d r13 r14 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E19D:
	rdi_1330 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1571 & 0x000000000000002B) != 0x0000000000000000 l000000000040E260
// DataOut: eax esp fs r10 r12d r13 r14 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E260:
	r11_110 = Mem1294[rsp_1034 + 0x0000000000000050:word64]
	r15_1033 = Mem1294[rsp_1034 + 0x0000000000000040:word64]
// DataOut: fs r11 r13 r14 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:0x000000000000002B edi:0x0000002B ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1B6:
	rdx_1551 = rdx_1551 + 0x0000000000000001
	branch rdx_1551 != rax_1329 l000000000040E190
// DataOut: eax esp fs r10 r12d r13 r14 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1BF:
	word64 rsp_1417
	word64 r15_1418
	word64 rcx_1419
	word64 r14_1420
	word32 r14d_1421
	word32 r8d_1422
	word64 r13_1423
	word64 rdx_1424
	word64 r12_1425
	word64 rbp_1426
	word64 rbx_1427
	word32 ebx_1428
	word32 r9d_1429
	byte SCZO_1430
	word64 rax_1431
	word64 rdi_1432
	word64 rsi_1433
	selector fs_1434
	word32 eax_1435
	byte SZO_1436
	byte C_1437
	byte al_1438
	byte CZ_1439
	word64 r11_1440
	byte Z_1441
	word32 edi_1442
	word32 esi_1443
	word64 r9_1444
	word32 ebp_1445
	word64 r8_1446
	byte cl_1447
	word32 ecx_1448
	word32 r11d_1449
	word32 r12d_1450
	byte r12b_1451
	word32 edx_1452
	byte dl_1453
	byte r11b_1454
	word16 dx_1455
	word64 r10_1456
	byte dil_1457
	byte sil_1458
	call iswprint (retsize: 8; depth: 8)
		uses: al_1336,bLocAD_164,bLocC0_165,C_1359,cl_1345,CZ_1337,dil_1355,dl_1351,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_23,dwLoc18_26,dwLoc50_38,dwLocAC_163,dx_1353,eax_1333,ebp_1361,ebx_1326,ecx_1346,edi_1340,edx_1350,esi_1341,fs_1332,qwLoc28_49,qwLoc68_96,qwLoc70_42,qwLoc78_45,qwLoc80_166,qwLoc88_39,qwLocB8_34,qwLocC0_162,r10_1354,r11_1338,r11b_1352,r11d_1347,r12_1323,r12b_1349,r12d_1348,r13_1321,r14_1318,r14d_1319,r15_1316,r8_1344,r8d_1320,r9_1342,r9d_1327,rax_1329,rbp_1360,rbx_1325,rcx_1317,rdi_1416,rdx_1322,rsi_1331,rsp_1315,SCZO_1414,sil_1356,SZO_1357,Z_1415
		defs: al_1438,C_1437,cl_1447,CZ_1439,dil_1457,dl_1453,dx_1455,eax_1435,ebp_1445,ebx_1428,ecx_1448,edi_1442,edx_1452,esi_1443,fs_1434,r10_1456,r11_1440,r11b_1454,r11d_1449,r12_1425,r12b_1451,r12d_1450,r13_1423,r14_1420,r14d_1421,r15_1418,r8_1446,r8d_1422,r9_1444,r9d_1429,rax_1431,rbp_1426,rbx_1427,rcx_1419,rdi_1432,rdx_1424,rsi_1433,rsp_1417,SCZO_1430,sil_1458,SZO_1436,Z_1441
	branch eax_1435 != 0x00000000 l000000000040E1DE
// DataOut: edi esp fs r10 r12d r13 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DA_1:
// DataOut: edi esp fs r10 r12d r13 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 r11:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DE:
	word64 r15_1470
	word64 rcx_1471
	word64 r14_1472
	word32 r14d_1473
	word32 r8d_1474
	word64 r13_1475
	word64 rdx_1476
	word64 r12_1477
	word64 rbp_1478
	word64 rbx_1479
	word32 ebx_1480
	word32 r9d_1481
	byte SCZO_1482
	word64 rax_1483
	word64 rdi_1484
	word64 rsi_1485
	word32 eax_1487
	byte SZO_1488
	byte C_1489
	byte al_1490
	byte CZ_1491
	word64 r11_1492
	byte Z_1493
	word32 edi_1494
	word32 esi_1495
	word64 r9_1496
	word32 ebp_1497
	word64 r8_1498
	byte cl_1499
	word32 r11d_1501
	word32 r12d_1502
	byte r12b_1503
	word32 edx_1504
	byte dl_1505
	byte r11b_1506
	word16 dx_1507
	word64 r10_1508
	byte dil_1509
	byte sil_1510
	call mbsinit (retsize: 8; depth: 8)
		uses: al_1438,bLocAD_164,bLocC0_165,C_1464,cl_1447,CZ_1439,dil_1461,dl_1453,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_23,dwLoc18_26,dwLoc50_38,dwLocAC_163,dx_1455,eax_1435,ebp_1445,ebx_1467,ecx_1448,edi_1460,edx_1452,esi_1443,fs_1434,qwLoc28_49,qwLoc68_96,qwLoc70_42,qwLoc78_45,qwLoc80_166,qwLoc88_39,qwLocB8_34,qwLocC0_162,r10_1456,r11_1440,r11b_1454,r11d_1449,r12_1425,r12b_1451,r12d_1450,r13_1423,r14_1420,r14d_1421,r15_1418,r8_1446,r8d_1422,r9_1444,r9d_1429,rax_1465,rbp_1426,rbx_1466,rcx_1419,rdi_1459,rdx_1424,rsi_1433,rsp_1417,SCZO_1468,sil_1458,SZO_1462,Z_1463
		defs: al_1490,C_1489,cl_1499,CZ_1491,dil_1509,dl_1505,dx_1507,eax_1487,ebp_1497,ebx_1480,ecx_1500,edi_1494,edx_1504,esi_1495,fs_1486,r10_1508,r11_1492,r11b_1506,r11d_1501,r12_1477,r12b_1503,r12d_1502,r13_1475,r14_1472,r14d_1473,r15_1470,r8_1498,r8d_1474,r9_1496,r9d_1481,rax_1483,rbp_1478,rbx_1479,rcx_1471,rdi_1484,rdx_1476,rsi_1485,rsp_1469,SCZO_1482,sil_1510,SZO_1488,Z_1493
	branch 0x00000000 == 0x00000000 l000000000040E11D
// DataOut: edi esp fs r10 r12d r13 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 r11:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1EE:
	rsi_1019 = (uint64) r12d_1502
	r12d_1028 = (word32) Mem1294[rsp_1034 + 0x0000000000000096:byte]
	esi_1003 = (word32) rsi_1019 (alias)
	r11b_1005 = (byte) (word32) Mem1294[rsp_1034 + 0x0000000000000097:byte] (alias)
	r12b_1029 = (byte) r12d_1028 (alias)
	rax_1018 = rbx_1479
	rbp_1025 = Mem1294[rsp_1034 + 0x0000000000000048:word64]
	*r9Out = Mem1294[rsp_1034 + 0x0000000000000088:word64]
	rbx_1024 = Mem1294[rsp_1034 + 0x0000000000000080:word64]
	r14_1031 = Mem1294[rsp_1034 + 0x0000000000000050:word64]
	r15_1033 = Mem1294[rsp_1034 + 0x0000000000000040:word64]
	*r8Out = r13_1475
	dl_1167 = (byte) (uint64) ((word32) (uint64) esi_1003 ^ 0x00000001) (alias)
// DataOut: dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E22D:
	branch rax_1018 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E237:
	dl_1015 = dl_1167 & Mem1294[rsp_1034 + 0x0000000000000020:byte]
// DataOut: dl esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE24:
	Mem1194[rsp_1034 + 0x0000000000000050:word64] = r8_1009
	Mem1195[rsp_1034 + 0x0000000000000048:word64] = r9_1010
	Mem1196[rsp_1034 + 0x0000000000000040:word32] = r11d_1715
	word64 rcx_1199
	word32 r14d_1201
	word32 r8d_1202
	word64 r13_1203
	word64 rdx_1204
	word64 r12_1205
	word32 ebx_1208
	word32 r9d_1209
	byte SCZO_1210
	word64 rax_1211
	word64 rdi_1212
	word32 eax_1215
	byte SZO_1216
	byte C_1217
	byte al_1218
	byte CZ_1219
	word64 r11_1220
	byte Z_1221
	word32 edi_1222
	word64 r9_1224
	word32 ebp_1225
	word64 r8_1226
	byte cl_1227
	word32 r11d_1229
	word32 edx_1232
	byte dl_1233
	byte r11b_1234
	word16 dx_1235
	word64 r10_1236
	byte dil_1237
	byte sil_1238
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_643,bLocAD_164,bLocC0_165,C_647,cl_584,CZ_653,dil_633,dl_561,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_23,dwLoc18_26,dwLoc50_38,dwLocAC_163,dx_562,eax_642,ebp_572,ebx_568,ecx_586,edi_635,edx_560,esi_545,fs_543,qwLoc28_49,qwLoc68_96,qwLoc70_42,qwLoc78_45,qwLoc80_166,qwLoc88_39,qwLocB8_34,qwLocC0_162,r10_555,r11_638,r11b_630,r11d_629,r12_650,r12b_651,r12d_649,r13_648,r14_577,r14d_578,r15_579,r8_636,r8d_631,r9_637,r9d_634,rax_641,rbp_571,rbx_570,rcx_639,rdi_632,rdx_640,rsi_644,rsp_580,SCZO_999,sil_544,SZO_646,Z_1000
		defs: al_1218,C_1217,cl_1227,CZ_1219,dil_1237,dl_1233,dx_1235,eax_1215,ebp_1225,ebx_1208,ecx_1228,edi_1222,edx_1232,esi_1223,fs_1214,r10_1236,r11_1220,r11b_1234,r11d_1229,r12_1205,r12b_1231,r12d_1230,r13_1203,r14_1200,r14d_1201,r15_1198,r8_1226,r8d_1202,r9_1224,r9d_1209,rax_1211,rbp_1206,rbx_1207,rcx_1199,rdi_1212,rdx_1204,rsi_1213,rsp_1197,SCZO_1210,sil_1238,SZO_1216,Z_1221
	word32 edx_1249 = (word32) Mem1196[Mem1196[rax_1211:word64] + DPB(rdx_1204, (word32) r12b_1029, 0) * 0x0000000000000002:word16]
	r11b_1005 = (byte) (uint64) Mem1196[rsp_1034 + 0x0000000000000040:word32] (alias)
	*r9Out = Mem1196[rsp_1034 + 0x0000000000000048:word64]
	*r8Out = Mem1196[rsp_1034 + 0x0000000000000050:word64]
	rax_1018 = 0x0000000000000001
	dl_1167 = (byte) (uint64) ((word32) (uint64) (DPB(edx_1249, (word16) edx_1249 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001) (alias)
// DataOut: dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE61:
	dl_1015 = dl_1167 & Mem215[rsp_1034 + 0x0000000000000020:byte]
	branch dl_1015 == 0x00 l000000000040DAF8
// DataOut: dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE6B:
	word32 edi_1039 = (word32) Mem215[rsp_1034 + 0x0000000000000033:byte]
	*ediOut = edi_1039
	word64 rcx_1042 = Mem215[rsp_1034 + 0x0000000000000028:word64]
	rax_1018 = rax_1018 + rbp_1025
	byte dil_1041 = (byte) edi_1039
	ecx_1044 = (word32) rcx_1042 (alias)
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF0:
	branch dl_1015 != 0x00 l000000000040DE80
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE80:
	branch dil_1041 != 0x00 l000000000040DC40
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE89:
	branch rbx_1024 >=u r14_1031 l000000000040DE92
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE8E:
	Mem1147[rcx_1042 + rbx_1024:byte] = 0x5C
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE92:
	branch r14_1031 <=u rbx_1024 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE9B:
	word64 rsi_1142 = (uint64) (DPB(esi_1003, (byte) (uint64) r12d_1028 >>u 0x06, 0) + 0x00000030)
	Mem1146[rcx_1042 + 0x0000000000000001 + rbx_1024:byte] = (byte) rsi_1142
	esi_1003 = (word32) rsi_1142 (alias)
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEAA:
	rsi_1019 = rbx_1024 + 0x0000000000000002
	branch r14_1031 <=u rsi_1019 l000000000040DEC5
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEB3:
	rsi_1019 = (uint64) ((word32) (uint64) (DPB(esi_1003, (byte) (uint64) r12d_1028 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem1137[rcx_1042 + 0x0000000000000002 + rbx_1024:byte] = (byte) rsi_1019
	esi_1003 = (word32) rsi_1019 (alias)
// DataOut: dil dl edi esp fs r10 r11b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEC5:
	rbx_1024 = rbx_1024 + 0x0000000000000003
	r12b_1029 = (byte) (uint64) ((word32) (uint64) (r12d_1028 & 0x00000007) + 0x00000030) (alias)
// DataOut: dil dl edi esp fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF4:
	branch r11b_1005 == 0x00 l000000000040DED1
// DataOut: dil dl edi esp fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF9:
	branch rbx_1024 >=u r14_1031 l000000000040DF02
// DataOut: dil dl edi esp fs r10 r12b r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEFE:
	Mem1102[rcx_1042 + rbx_1024:byte] = 0x5C
// DataOut: dil dl edi esp fs r10 r12b r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF02:
	rbx_1024 = rbx_1024 + 0x0000000000000001
	r11b_1005 = 0x00 (alias)
// DataOut: dil dl edi esp fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DED1:
	rbp_1025 = rbp_1025 + 0x0000000000000001
	branch rax_1018 <=u rbp_1025 l000000000040DB54
// DataOut: dil dl edi esp fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEDE:
	branch rbx_1024 >=u r14_1031 l000000000040DEE7
// DataOut: dil dl edi esp fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE3:
	Mem1089[rcx_1042 + rbx_1024:byte] = r12b_1029
// DataOut: dil dl edi esp fs r10 r11b r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE7:
	r12d_1028 = (word32) Mem215[r8_1009 + rbp_1025:byte]
	r12b_1029 = (byte) r12d_1028 (alias)
	rbx_1024 = rbx_1024 + 0x0000000000000001
// DataOut: dil dl edi esp fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA2F:
	rax_1018 = DPB(rax_1708, (word32) r12b_1029, 0) (alias)
	switch (rax_1018) { l000000000040DD20 }
// DataOut: edi esp fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD20:
	branch Mem215[rsp_1034 + 0x0000000000000020:byte] == 0x00 l000000000040E240
// DataOut: edi esp fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E240:
	branch (Mem215[rsp_1034 + 0x0000000000000090:byte] & 0x01) == 0x00 l000000000040DAF8
// DataOut: edi esp fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAF8:
	branch Mem215[rsp_1034 + 0x0000000000000038:byte] == 0x00 l000000000040DB09
// DataOut: edi esp fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAFF:
	branch Mem215[rsp_1034 + 0x0000000000000095:byte] != 0x00 l000000000040DB2E
// DataOut: edi esp fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E24E:
	rbp_1025 = rbp_1025 + 0x0000000000000001
// DataOut: edi esp fs r10 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD2B:
	branch Mem215[rsp_1034 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD36:
	branch rbx_1024 >=u r14_1031 l000000000040DD44
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD3B:
	Mem992[Mem215[rsp_1034 + 0x0000000000000028:word64] + rbx_1024:byte] = 0x5C
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD44:
	rax_1018 = rbx_1024 + 0x0000000000000001
	branch r15_1033 <=u rbp_1025 + 0x0000000000000001 l000000000040DD80
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD51:
	rsi_1019 = DPB(rsi_1019, (word32) Mem215[r8_1009 + 0x0000000000000001 + rbp_1025:byte], 0) (alias)
	branch (byte) (rsi_1019 - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD5F:
	branch r14_1031 >u rax_1018 l000000000040E300
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E300:
	rsi_1019 = Mem215[rsp_1034 + 0x0000000000000028:word64]
	Mem990[rsi_1019 + rax_1018:byte] = 0x30
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD68:
	branch r14_1031 <=u rbx_1024 + 0x0000000000000002 l000000000040DD7B
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD71:
	Mem988[Mem215[rsp_1034 + 0x0000000000000028:word64] + 0x0000000000000002 + rbx_1024:byte] = 0x30
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD7B:
	rax_1018 = rbx_1024 + 0x0000000000000003
// DataOut: esp fs r10 r11b r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD80:
	rbx_1024 = rax_1018
	r12d_1028 = 0x00000030 (alias)
	r12b_1029 = 0x30 (alias)
// DataOut: esp fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB09:
	word64 rdi_879 = Mem215[rsp_1034 + 0x0000000000000058:word64]
	word32 edi_880
	*ediOut = (word32) rdi_879
	branch rdi_879 == 0x0000000000000000 l000000000040DB2E
// DataOut: edi esp fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB13:
	ecx_1044 = (word32) (uint64) r12d_1028 (alias)
	word64 rdx_885 = (uint64) r12d_1028
	rax_1018 = (uint64) (0x00000001 << (byte) ((uint64) (ecx_1044 & 0x0000001F)))
	branch (Mem215[rdi_879 + DPB(rdx_885, (word32) ((byte) rdx_885 >>u 0x05), 0) * 0x0000000000000004:word32] & (word32) rax_1018) != 0x00000000 l000000000040DB33
// DataOut: edi esp fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB2E:
	branch r11b_1005 == 0x00 l000000000040DB50
// DataOut: edi esp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB33:
	branch Mem215[rsp_1034 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: edi esp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC40:
	r11_110 = r14_1031
	r13_1321 = r8_1009
// DataOut: fs r11 r13 r14 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB3E:
	branch rbx_1024 >=u r14_1031 l000000000040DB4C
// DataOut: edi esp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB43:
	rax_1018 = Mem215[rsp_1034 + 0x0000000000000028:word64]
	Mem800[rax_1018 + rbx_1024:byte] = 0x5C
// DataOut: edi esp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB4C:
	rbx_1024 = rbx_1024 + 0x0000000000000001
// DataOut: edi esp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB50:
	rbp_1025 = rbp_1025 + 0x0000000000000001
// DataOut: edi esp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB54:
	branch rbx_1024 >=u r14_1031 l000000000040DB62
// DataOut: edi esp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB59:
	rax_1018 = Mem215[rsp_1034 + 0x0000000000000028:word64]
	Mem707[rax_1018 + rbx_1024:byte] = r12b_1029
// DataOut: edi esp fs r10 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB62:
	al_1780 = rbp_1025 != r15_1033
	rbx_1024 = rbx_1024 + 0x0000000000000001
	rax_1708 = DPB(rax_1018, al_1780, 0) (alias)
	branch r15_1033 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al edi esp fs r10 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB76:
	byte al_537 = Mem215[r8_1009 + rbp_1025:byte] != 0x00
	rax_1708 = DPB(rax_1708, al_537, 0) (alias)
	branch al_537 != 0x00 l000000000040D9A8
// DataOut: edi esp fs r10 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB86:
	r11_110 = r14_1031
	*r11Out = r11_110
	r13_1321 = r8_1009
	branch rbx_1024 != 0x0000000000000000 l000000000040DBA3
// DataOut: edi esp fs r10 r11 r11d r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB91:
	branch Mem215[rsp_1034 + 0x0000000000000034:word32] != 0x00000002 l000000000040DBA3
// DataOut: edi esp fs r10 r11 r11d r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB98:
	branch Mem215[rsp_1034 + 0x0000000000000033:byte] != 0x00 l000000000040DC46
// DataOut: edi esp fs r10 r11 r11d r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC46:
	word64 rax_358 = Mem215[rsp_1034 + 0x0000000000000068:word64]
	word32 r9d_360 = (word32) (uint64) Mem215[rsp_1034 + 0x0000000000000090:word32]
	word64 r8_362 = (uint64) Mem215[rsp_1034 + 0x0000000000000034:word32]
	word64 rdi_364 = Mem215[rsp_1034 + 0x0000000000000028:word64]
	Mem368[rsp_1034:word64] = 0x0000000000000000
	Mem370[rsp_1034 + 0x0000000000000010:word64] = rax_358
	Mem376[rsp_1034 + 0x0000000000000008:word64] = Mem370[rsp_1034 + 0x0000000000000070:word64]
	word64 rbp_379
	word32 edi_380
	word64 r8_381
	word64 r9_382
	word64 r10_383
	word64 r12_385
	word64 r14_387
	rax_284 = fn000000000040D8A0(r15_1033, r13_1321, r11_110, rdi_364, r8_362, (word32) (uint64) (r9d_360 & 0xFFFFFFFD), r14_1031, r15_1033, fs_1001, qwArg18, qwArg20, qwArg28, out rsp_1034, out rbp_379, out edi_380, out r8_381, out r9_382, out r10_383, out r11_110, out r12_385, out r13_1321, out r14_387, out r15_1033)
// DataOut: edi esp fs r10 r11 r11d r13 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBA3:
	branch Mem215[rsp_1034 + 0x0000000000000033:byte] != 0x00 l000000000040DBE4
// DataOut: edi esp fs r10 r11 r11d r13 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBAA:
	branch Mem215[rsp_1034 + 0x0000000000000060:word64] == 0x0000000000000000 l000000000040DBE4
// DataOut: edi esp fs r10 r11 r11d r13 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBB2:
	word64 rdx_457 = Mem215[rsp_1034 + 0x0000000000000060:word64]
	byte al_463 = (byte) (word32) Mem215[rdx_457:byte]
	branch al_463 == 0x00 l000000000040DBE4
// DataOut: al edi esp fs r10 r11 r11d r13 r15 r8 r9 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBBE:
	word64 rcx_467 = Mem215[rsp_1034 + 0x0000000000000028:word64]
	ecx_1044 = (word32) rcx_467 (alias)
	word64 rdx_470 = rdx_457 - rbx_1024
// DataOut: al edi esp fs r10 r11 r11d r13 r15 r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD0:
	branch r14_1031 <=u rbx_1024 l000000000040DBD8
// DataOut: al edi esp fs r10 r11 r11d r13 r15 r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD5:
	Mem493[rcx_467 + rbx_1024:byte] = al_463
// DataOut: edi esp fs r10 r11 r11d r13 r15 r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD8:
	rbx_1024 = rbx_1024 + 0x0000000000000001
	al_463 = (byte) (word32) Mem215[rdx_470 + rbx_1024:byte] (alias)
	branch al_463 != 0x00 l000000000040DBD0
// DataOut: al edi esp fs r10 r11 r11d r13 r15 r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBE4:
	rax_284 = rbx_1024
	branch rbx_1024 >=u r14_1031 l000000000040DC86
// DataOut: edi esp fs r10 r11 r11d r13 r15 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBF0:
	Mem454[Mem215[rsp_1034 + 0x0000000000000028:word64] + rbx_1024:byte] = 0x00
// DataOut: edi esp fs r10 r11 r11d r13 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC86:
	rsi_1019 = Mem215[rsp_1034 + 0x00000000000000B8:word64] ^ Mem215[fs_1001:0x00000028:word64]
	branch rsi_1019 != 0x0000000000000000 l000000000040E423
// DataOut: edi esp fs r10 r11 r11d r13 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E423:
	__stack_chk_fail()
// DataOut: edi esp fs r10 r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E428:
	Mem154[rsp_1034 + 0x0000000000000020:byte] = 0x01
	Mem157[rsp_1034 + 0x0000000000000060:word64] = 0x0000000000415FEB
	r14_155 = 0x0000000000000001
	rbx_1024 = 0x0000000000000000
// DataOut: edi esp fs r10 r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC9D:
	word64 rsp_305 = rsp_1034 + 200
	word64 rbp_309
	*rbpOut = Mem215[rsp_305 + 0x0000000000000008:word64]
	word64 r12_312
	*r12Out = Mem215[rsp_305 + 0x0000000000000010:word64]
	word64 r13_316
	*r13Out = Mem215[rsp_305 + 0x0000000000000018:word64]
	word64 r14_318
	*r14Out = Mem215[rsp_305 + 0x0000000000000020:word64]
	word64 r15_321
	*r15Out = Mem215[rsp_305 + 0x0000000000000028:word64]
	word64 rsp_322
	*rspOut = rsp_305 + 0x0000000000000030
	return rax_284
// DataOut: ebp edi esp fs r10 r11 r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040D8A0_exit:
// DataOut: ebp edi esp r10 r11 r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040E450(word64 rcx, word64 rdx, word32 edi, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r14 r15 rcx rdx
// LiveOut: bpl ebx r10 r11 r12 r12b r13 r13d r14 r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E450_entry:
// DataOut: edi fs r11 r14 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E450:
	word64 r15_6 = (int64) edi
	__errno_location()
	word32 r15d_7 = (word32) r15_6
	word64 rsp_200 = fp - 0x0000000000000060
	word64 r12_199 = Mem0[0x000000000061A5D8:word64]
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040E48C:
	branch r15d_7 <u Mem0[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E495:
	word64 r14_189 = (uint64) (rdi + 0x0000000000000001)
	branch r12_199 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5E0:
	word64 r8_226
	word64 rax_227 = fn0000000000410C90(rdx, r14_189 << 0x0000000000000004, r12_199, out rsp_200, out r8_226)
	Mem229[0x000000000061A5D8:word64] = rax_227
	r12_199 = rax_227
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4B0:
	word64 r8_216
	word64 rax_217 = fn0000000000410C90(rdx, r14_189 << 0x0000000000000004, 0x0000000000000000, out rsp_200, out r8_216)
	word64 rsi_218 = Mem0[0x000000000061A5E0:word64]
	word64 rdi_219 = Mem0[0x000000000061A5E8:word64]
	Mem221[0x000000000061A5D8:word64] = rax_217
	Mem222[rax_217:word64] = rsi_218
	Mem223[rax_217 + 0x0000000000000008:word64] = rdi_219
	r12_199 = rax_217
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4D6:
	word64 rdi_201 = (uint64) Mem0[0x000000000061A5F0:word32]
	memset((rdi_201 << 0x0000000000000004) + r12_199, 0x0000000000000000, r14_189 - rdi_201 << 0x0000000000000004)
	Mem210[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4FA:
	word64 r12_53 = r12_199 + (r15_6 << 0x0000000000000004)
	word32 ebp_52 = (word32) (uint64) Mem0[rcx + 0x0000000000000004:word32]
	word64 r8_55 = (uint64) Mem0[r11:word32]
	word64 r11_58 = Mem0[r12_53:word64]
	word64 r14_59 = Mem0[r12_53 + 0x0000000000000008:word64]
	Mem60[rsp_200 + 0x0000000000000010:word64] = Mem0[rcx + 0x0000000000000030:word64]
	word64 rax_61 = Mem60[rcx + 0x0000000000000028:word64]
	word64 rcx_66 = Mem60[rsp_200 + 0x0000000000000028:word64]
	word64 rdx_67 = Mem60[rsp_200 + 0x0000000000000020:word64]
	Mem71[rsp_200:word64] = r11 + 0x0000000000000008
	Mem74[rsp_200 + 0x0000000000000008:word64] = rax_61
	Mem75[rsp_200 + 0x0000000000000038:word64] = r11_58
	word32 ebp_63 = (word32) (uint64) (ebp_52 | 0x00000001)
	word32 edi_82
	word64 r8_83
	word64 r9_84
	word64 r10_85
	word64 r11_86
	word64 r12_87
	word64 r13_88
	word64 r15_90
	word64 rbp_108
	word64 r14_109
	word64 rsp_110
	word64 rax_91 = fn000000000040D8A0(rcx_66, rdx_67, r11_58, r14_59, r8_55, (word32) (uint64) ebp_63, r14_59, r11 + 0x0000000000000008, fs, qwArg18, qwArg20, qwArg28, out rsp_110, out rbp_108, out edi_82, out r8_83, out r9_84, out r10_85, out r11_86, out r12_87, out r13_88, out r14_109, out r15_90)
	word64 r11_93 = Mem75[rsp_110 + 0x0000000000000038:word64]
	*r11Out = r11_93
	branch r11_93 >u rax_91 l000000000040E5BF
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E554:
	Mem148[r12_87:word64] = rax_91 + 0x0000000000000001
	word64 rsi_144 = rax_91 + 0x0000000000000001
	branch r14_109 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E565:
	Mem183[rsp_110 + 0x0000000000000038:word64] = rax_91 + 0x0000000000000001
	free(r14_109)
	rsi_144 = Mem183[rsp_110 + 0x0000000000000038:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E577:
	Mem152[rsp_110 + 0x0000000000000038:word64] = rsi_144
	word64 rsp_153
	word64 rax_154 = fn0000000000410C40(rsi_144, rsi_144, out rsp_153)
	Mem155[r12_87 + 0x0000000000000008:word64] = rax_154
	word64 r8_158 = (uint64) Mem155[r11_93:word32]
	word64 rcx_159 = Mem155[rsp_153 + 0x0000000000000028:word64]
	word64 rdx_162 = Mem155[rsp_153 + 0x0000000000000020:word64]
	word64 rsi_163 = Mem155[rsp_153 + 0x0000000000000038:word64]
	Mem166[rsp_153 + 0x0000000000000010:word64] = Mem155[rcx + 0x0000000000000030:word64]
	word64 rax_167 = Mem166[rcx + 0x0000000000000028:word64]
	Mem168[rsp_153:word64] = r15_90
	Mem169[rsp_153 + 0x0000000000000008:word64] = rax_167
	word32 edi_172
	word64 r8_173
	word64 r9_174
	word64 r10_175
	word64 r11_176
	word64 r12_177
	word64 r13_178
	word64 r15_180
	fn000000000040D8A0(rcx_159, rdx_162, rsi_163, rax_154, r8_158, (word32) (uint64) ebp_63, rax_154, r15_90, fs, qwArg18, qwArg20, qwArg28, out rsp_110, out rbp_108, out edi_172, out r8_173, out r9_174, out r10_175, out r11_176, out r12_177, out r13_178, out r14_109, out r15_180)
// DataOut: fs r10 r11 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040E5BF:
	Mem113[rbp_108:word32] = (word32) (uint64) Mem75[rsp_110 + 0x0000000000000034:word32]
	word64 rsp_114 = rsp_110 + 0x0000000000000048
	word32 ebx_119
	*ebxOut = (word32) Mem113[rsp_114:word64]
	word64 rbp_121
	*rbpOut = Mem113[rsp_114 + 0x0000000000000008:word64]
	word64 r12_124
	*r12Out = Mem113[rsp_114 + 0x0000000000000010:word64]
	word64 r13_126
	*r13Out = Mem113[rsp_114 + 0x0000000000000018:word64]
	word64 r14_128
	*r14Out = Mem113[rsp_114 + 0x0000000000000020:word64]
	word64 r15_130
	*r15Out = Mem113[rsp_114 + 0x0000000000000028:word64]
	word64 rsp_132
	*rspOut = rsp_114 + 0x0000000000000030
	return r14_109
// DataOut: bpl ebx fs r10 r11 r12 r12b r13 r13d r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040E450_exit:
// DataOut: bpl ebx r10 r11 r12 r12b r13 r13d r14 r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word64 fn000000000040E600(word64 rdi, word64 r8, word64 r11, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut: ebx r12 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E600_entry:
// DataOut: fs r10 r11 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word32 r12d_17 = (word32) (uint64) Mem0[r8:word32]
	word64 rdi_21 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: fs r10 r11 r12d r13b r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E61A_1:
	rdi_21 = rdi
// DataOut: fs r10 r11 r12d r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l000000000040E61E:
	word64 rsp_27
	word64 rbp_28
	word64 rdi_29
	word64 rax_30 = fn0000000000410E00(0x0000000000000038, rdi_21, out rsp_27, out rbp_28, out rdi_29)
	Mem31[r11:word32] = r12d_17
	word32 ebx_34
	*ebxOut = (word32) Mem31[rsp_27:word64]
	word64 rbp_36
	*rbpOut = Mem31[rsp_27 + 0x0000000000000008:word64]
	word64 r12_38
	*r12Out = Mem31[rsp_27 + 0x0000000000000010:word64]
	word64 rsp_40
	*rspOut = rsp_27 + 0x0000000000000018
	return rax_30
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040E600_exit:
// DataOut: ebx r12 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word32 fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: fs r10 r11 r13 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: fs r10 r11 r13 r13b r14 r15 r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
	rax_12 = rdi
// DataOut: fs r10 r11 r13 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return (word32) (uint64) Mem0[rax_12:word32]
// DataOut: eax fs r10 r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: ebx esi fs r10 r11 r15 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: ebx esi fs r10 r11 r15 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: ebx esi fs r10 r11 r15 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut: ebx fs r10 r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: ebx edx esi fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl ebx edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl ebx edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_25 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem42[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_25) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_25)
	return rsi_20
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11 r8 rcx rdi rdx rsi
// LiveOut: ebp edi r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdi rdx rsi
fn000000000040E6F0_entry:
// DataOut: ebp ebx fs r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E712_1:
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E716:
	__errno_location()
	word32 r12d_41 = (word32) (uint64) Mem0[r8:word32]
	word64 rsp_62
	word64 rbp_63
	word32 edi_64
	word64 r8_65
	word64 r9_66
	word64 r10_67
	word64 r11_68
	word64 r12_69
	word64 r13_70
	word64 r14_71
	word64 r15_72
	word64 rax_73 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (uint64) Mem0[r11:word32], (word32) (uint64) Mem0[r11 + 0x0000000000000004:word32], rdx, rcx, fs, rdi, qwLoc20, qwLoc18, out rsp_62, out rbp_63, out edi_64, out r8_65, out r9_66, out r10_67, out r11_68, out r12_69, out r13_70, out r14_71, out r15_72)
	Mem75[r13_70:word32] = r12d_41
	word64 rbp_80
	*rbpOut = Mem75[rsp_62 + 0x0000000000000030:word64]
	word64 r12_83
	*r12Out = Mem75[rsp_62 + 0x0000000000000038:word64]
	word64 r13_86
	*r13Out = Mem75[rsp_62 + 0x0000000000000040:word64]
	word64 r14_88
	*r14Out = Mem75[rsp_62 + 0x0000000000000048:word64]
	word64 r15_90
	*r15Out = Mem75[rsp_62 + 0x0000000000000050:word64]
	word64 rsp_91
	*rspOut = rsp_62 + 0x0000000000000058
	return rax_73
// DataOut: ebp edi fs r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040E6F0_exit:
// DataOut: ebp edi r10 r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):rdi -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word32 fn000000000040E930(word64 r11, word64 r14, word64 r15, selector fs, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14 r15
// LiveOut: ebx r10 r11 r15 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
// DataOut: fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: edi fs r11 r14 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E93F_thunk_fn000000000040E450:
	word32 ebx_15
	word64 rsp_16
	word64 rbp_17
	word64 r8_18
	word64 r9_19
	word64 r10_20
	word64 r11_21
	word64 r12_22
	word64 r13_23
	word64 r14_24
	word64 r15_25
	fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r14, r15, fs, out ebx_15, out rsp_16, out rbp_17, out r8_18, out r9_19, out r10_20, out r11_21, out r12_22, out r13_23, out r14_24, out r15_25)
	return ebx_15
// DataOut: ebx fs r10 r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040E930_exit:
// DataOut: ebx r10 r11 r15 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040E970(word32 esi, word32 edi, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r14 r15
// LiveOut: r10 r11 r15 r9 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E970_entry:
// DataOut: edi esi fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000050)
	word32 ebx_26
	word64 rsp_27
	word64 rbp_28
	word64 r8_29
	word64 r9_30
	word64 r10_31
	word64 r11_32
	word64 r12_33
	word64 r13_34
	word64 r14_35
	word64 r15_36
	fn000000000040E450(fp - 0x0000000000000050, 0xFFFFFFFFFFFFFFFF, (word32) (uint64) (word32) (uint64) edi, r11, r14, r15, fs, out ebx_26, out rsp_27, out rbp_28, out r8_29, out r9_30, out r10_31, out r11_32, out r12_33, out r13_34, out r14_35, out r15_36)
	return rsp_27 + 0x0000000000000060
// DataOut: fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r10 r11 r15 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040EAB0(word64 r11, word64 r14, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12bOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14 r15
// LiveOut: bpl r10 r11 r12b r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040EAB0_entry:
	*r12bOut = r12b
// DataOut: fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_34 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32]
	byte cl_18 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem53[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_34 >>u cl_18) ^ 0x00000001) & 0x00000001) << cl_18) ^ r9d_34)
	word32 ebx_58
	word64 rsp_59
	word64 rbp_60
	word64 r8_61
	word64 r9_62
	word64 r10_63
	word64 r11_64
	word64 r12_65
	word64 r13_66
	word64 r14_67
	word64 r15_68
	fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r14, r15, fs, out ebx_58, out rsp_59, out rbp_60, out r8_61, out r9_62, out r10_63, out r11_64, out r12_65, out r13_66, out r14_67, out r15_68)
	word64 rsp_71
	*rspOut = rsp_59 + 0x0000000000000050
	return rbx
// DataOut: bpl fs r10 r11 r12b r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: bpl r10 r11 r12b r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r11:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word32 edi, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r14 r15
// LiveOut: r11 r14 r15
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: edi fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: edi fs r11 r14 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word32 ebx_10
	word64 rsp_11
	word64 rbp_12
	word64 r8_13
	word64 r9_14
	word64 r10_15
	word64 r11_16
	word64 r12_17
	word64 r13_18
	word64 r14_19
	word64 r15_20
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, edi, r11, r14, r15, fs, out ebx_10, out rsp_11, out rbp_12, out r8_13, out r9_14, out r10_15, out r11_16, out r12_17, out r13_18, out r14_19, out r15_20)
	return r11_16
// DataOut: fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 r14 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 r11, word64 r14, word64 r15, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14 r15
// LiveOut: ebx r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
	*rbxOut = rbx
// DataOut: fs r11 r14 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: edi fs r11 r14 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC21_thunk_fn000000000040E450:
	word32 ebx_15
	word64 rsp_16
	word64 rbp_17
	word64 r8_18
	word64 r9_19
	word64 r10_20
	word64 r11_21
	word64 r12_22
	word64 r13_23
	word64 r14_24
	word64 r15_25
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r14, r15, fs, out ebx_15, out rsp_16, out rbp_17, out r8_18, out r9_19, out r10_20, out r11_21, out r12_22, out r13_23, out r14_24, out r15_25)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040EC10_exit:
// DataOut: ebx r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040EC30(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC30_entry:
// DataOut: fs r11 r11d r12d r13 r14 r15b r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC30:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: fs r11 r11d r13 r14 r15b r9d rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32) Stack +0004(64)

l000000000040EC40:
	word64 rsp_53
	word64 r12_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 rsi_62
	word32 ecx_63
	word64 rax_64
	word32 edx_65
	byte dl_67
	byte SCZO_68
	word32 ebp_69
	word64 rcx_66
	word64 rbx_60
	call __ctype_tolower_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc04,qwLoc0C,r12_51,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_67,ebp_69,ecx_63,edx_65,r12_54,rax_64,rbp_58,rbx_60,rcx_66,rdi_59,rdx_55,rsi_62,rsp_53,SCZO_68,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r15b r9d rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(32) Stack +0004(64)

l000000000040EC50:
	rcx_66 = DPB(rcx_66, (word32) Mem0[r12_54 + rbx_60:byte], 0) (alias)
	Mem78[rbp_13 + rbx_60:byte] = (byte) (uint64) Mem0[Mem0[rax_64:word64] + rcx_66 * 0x0000000000000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: fs r11 r11d r12 r13 r14 r15b r9d rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(32) Stack +0004(64)

l000000000040EC69:
	word32 ebp_43
	*ebpOut = (word32) qwLoc04
	word64 r12_46
	*r12Out = qwArg04
	word64 rsp_47
	*rspOut = fp + 0x000000000000000C
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040EC30_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x000000000000000C rbp:r12 rbx:rbx rax:rdi r12:<invalid> ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040EC80(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC80_entry:
// DataOut: fs r11 r11d r12d r13 r14 r15b r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC80:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r11d r13 r14 r15b r9d rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32) Stack +0004(64)

l000000000040EC90:
	word64 rsp_53
	word64 r12_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 rsi_62
	word32 ecx_63
	word64 rax_64
	word32 edx_65
	byte dl_67
	byte SCZO_68
	word32 ebp_69
	word64 rcx_66
	word64 rbx_60
	call __ctype_toupper_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc04,qwLoc0C,r12_51,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_67,ebp_69,ecx_63,edx_65,r12_54,rax_64,rbp_58,rbx_60,rcx_66,rdi_59,rdx_55,rsi_62,rsp_53,SCZO_68,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r15b r9d rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(32) Stack +0004(64)

l000000000040ECA0:
	rcx_66 = DPB(rcx_66, (word32) Mem0[r12_54 + rbx_60:byte], 0) (alias)
	Mem78[rbp_13 + rbx_60:byte] = (byte) (uint64) Mem0[Mem0[rax_64:word64] + rcx_66 * 0x0000000000000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r11d r12 r13 r14 r15b r9d rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12
// LocalsOut: fp(64) Local -0004(32) Stack +0004(64)

l000000000040ECB9:
	word32 ebp_43
	*ebpOut = (word32) qwLoc04
	word64 r12_46
	*r12Out = qwArg04
	word64 rsp_47
	*rspOut = fp + 0x000000000000000C
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn000000000040EC80_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x000000000000000C rbp:r12 rbx:rbx rax:rdi r12:<invalid> ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word32 ebp, word64 rsi, word32 r9d, word32 r11d, word64 r14, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r14dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl cl ebp fs r11d r14 r15 r15b r9d rax rcx rdx rsi
// LiveOut: r11 r11d r14d r15 r15b r15d r8 rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040ECD0_entry:
	*r8Out = r8
	*rdiOut = rdi
	*r11Out = r11
// DataOut: bpl cl ebp fs r11 r11d r14 r15 r15b r8 r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_1047 = Mem0[rax + 0x0000000000000030:word64]
	word64 r10_455 = rdx
	word64 r12_1030 = rsi
	word64 rbx_1001 = rcx
	word64 rsp_100 = fp - 0x00000000000004F0
	word32 esi_35 = (word32) (uint64) Mem0[rax_1047 + 0x0000000000000008:word32]
	branch esi_35 <= 0x0000000C l000000000040EEE0
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0) Local -04B0(32)

l000000000040EEE0:
	rax_1047 = 0x000000000000000C
	branch (word32) (uint64) esi_35 == 0x00000000 l000000000040EEEE
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEB_1:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEE:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED26:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED2B:
	word64 r14_1039
	word64 rax_111
	word32 eax_51 = (word32) Mem0[rcx:byte]
	word64 rax_218 = DPB(rax_1047, eax_51, 0)
	byte al_310 = (byte) eax_51
	word64 r13_1031 = 0x0000000000000000
	branch al_310 == 0x00 l000000000040F053
// DataOut: al bpl cl ebp fs r10 r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED39:
	r14_1039 = rdx
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED85:
	branch al_310 != 0x25 l000000000040ED50
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED50:
	branch r14_1039 - r13_1031 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED60:
	branch r12_1030 == 0x0000000000000000 l000000000040ED6D
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED65:
	Mem1035[r12_1030:byte] = al_310
	r12_1030 = r12_1030 + 0x0000000000000001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED6D:
	r13_1031 = r13_1031 + 0x0000000000000001
	word64 r8_1034
	*r8Out = rbx_1001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED89:
	r9d = (word32) Mem0[rsp_100 + 0x000000000000000F:byte]
	byte r9b_1018 = (byte) r9d
	word64 r11_1022
	*r11Out = 0x0000000000000000
	r11d = 0x00000000 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED94:
	rbx_1001 = rbx_1001 + 0x0000000000000001
	word32 edi_650 = (word32) Mem0[rbx_1001:byte]
	byte dil_1003 = (byte) edi_650
	rdi = DPB(rdi, edi_650, 0) (alias)
	*rdiOut = rdi
	byte SZO_1007 = cond(dil_1003 - 0x30)
	branch dil_1003 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA1:
	branch SZO_1007 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDD0:
	branch dil_1003 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE70:
	branch dil_1003 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE7A:
	r11d = (int32) dil_1003
	*r11Out = DPB(r11_1022, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDDA:
	r9d = 0x00000001 (alias)
	r9b_1018 = 0x01 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA3:
	branch dil_1003 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDE8:
	branch dil_1003 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDEE:
	word64 rdx_687 = (uint64) ((int32) dil_1003 - 0x00000030)
	word32 ebp_686 = 0xFFFFFFFF
	branch (word32) rdx_687 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDFF:
	word64 rbp_948 = 0x0000000000000000
	ebp_686 = 0x00000000 (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ebp:0xFFFFFFFF -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE28:
	branch ebp_686 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE08:
	word32 edx_986 = (int32) Mem0[rbx_1001:byte]
	word64 rdx_987 = DPB(rdx_687, edx_986, 0)
	byte dl_988 = (byte) edx_986
	branch ebp_686 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE88:
	branch dl_988 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE8D:
	rbp_948 = 0x000000007FFFFFFF
	ebp_686 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_948 * 0x0000000000000005, 0) (alias)
	ebp_686 = rdx_987 - 0x0000000000000030 + rcx * 0x0000000000000002
	rbp_948 = DPB(rbp_948, ebp_686, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE30:
	rbp_948 = 0x000000007FFFFFFF
	ebp_686 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE15:
	rbx_1001 = rbx_1001 + 0x0000000000000001
	word32 edi_976 = (word32) Mem0[rbx_1001:byte]
	dil_1003 = (byte) edi_976 (alias)
	rdx_687 = (uint64) ((int32) dil_1003 - 0x00000030)
	rdi = DPB(rdi, edi_976, 0) (alias)
	*rdiOut = rdi
	branch (word32) rdx_687 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE40:
	branch dil_1003 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE4A:
	branch dil_1003 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEC8:
	rbx_1001 = rbx_1001 + 0x0000000000000001
	word32 edi_942 = (word32) Mem0[rbx_1001:byte]
	dil_1003 = (byte) edi_942 (alias)
	*rdiOut = DPB(rdi, edi_942, 0)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE52:
	word64 r8_720
	branch dil_1003 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FF4D:
	r8_720 = rbx_1001
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b r9d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE60:
	switch (DPB(rdx_687, (word32) dil_1003, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FEFB:
	word32 edi_933 = (word32) Mem0[rbx_1001 - 0x0000000000000001:byte]
	r8_720 = r11_1022 - 0x0000000000000001
	dil_1003 = (byte) edi_933 (alias)
	*rdiOut = DPB(rdi, edi_933, 0)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b r9d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:(word32) dil rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F39F:
	word64 r15_730
	branch dil_1003 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r8 r9b r9d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0B2:
	word64 rax_906 = r8_720 - 0x0000000000000001
	word32 ecx_912 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r9b r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0C1:
	r15_730 = rax_906
	rax_906 = rax_906 - 0x0000000000000001
	ecx_912 = (word32) (uint64) (ecx_912 + 0x00000001) (alias)
	branch Mem0[rax_906 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r15 r15b r9b r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D1:
	rcx = (int64) ecx_912
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F3A9:
	r15_730 = r8_720
	rcx = 0x0000000000000001
	cl = 0x01 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D7:
	word64 r8_726 = r8_720
	*r8Out = r8_726
	word64 rax_735 = 0x0000000000000000
	byte al_737 = 0x00
	branch ebp_686 < 0x00000000 l000000000040F0E1
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rcx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0DE_1:
	rax_735 = (uint64) ebp_686 (alias)
	al_737 = (byte) ebp_686 (alias)
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rcx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E1:
	rax_218 = DPB(rax_735, (int16) al_737, 0) (alias)
	rbx_1001 = rax_218
	branch rcx <u rax_218 l000000000040F0ED
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E9_1:
	rbx_1001 = rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0ED:
	branch rbx_1001 >=u r14_1039 - r13_1031 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0F9:
	branch r12_1030 == 0x0000000000000000 l000000000040F16E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0FE:
	branch rax_218 <=u rcx l000000000040F144
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F103:
	Mem855[rsp_100 + 0x0000000000000030:word64] = rcx
	Mem856[rsp_100 + 0x0000000000000028:word32] = r9d
	Mem861[rsp_100 + 0x0000000000000018:word64] = r8_720
	word64 rbp_857 = (int64) ebp_686 - rcx
	branch r11d == 0x00000030 l000000000040F1C1
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1C1:
	rax_218 = memset(r12_1030, 0x0000000000000030, rbp_857)
	word64 r9_889 = (uint64) Mem861[rsp_100 + 0x0000000000000028:word32]
	r12_1030 = r12_1030 + rbp_857
	r8_726 = Mem861[rsp_100 + 0x0000000000000018:word64]
	r9d = (word32) r9_889 (alias)
	r9b_1018 = (byte) r9_889 (alias)
	rcx = Mem861[rsp_100 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F125:
	rax_218 = memset(r12_1030, 0x0000000000000020, rbp_857)
	word64 r9_876 = (uint64) Mem861[rsp_100 + 0x0000000000000028:word32]
	r12_1030 = r12_1030 + rbp_857
	rcx = Mem861[rsp_100 + 0x0000000000000030:word64]
	r9d = (word32) r9_876 (alias)
	r9b_1018 = (byte) r9_876 (alias)
	r8_726 = Mem861[rsp_100 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r15b r8 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F144:
	Mem812[rsp_100 + 0x0000000000000028:word64] = r8_726
	Mem816[rsp_100 + 0x0000000000000018:word64] = rcx
	*rdiOut = r12_1030
	branch r9b_1018 == 0x00 l000000000040F180
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F180:
	rax_218 = memcpy(r12_1030, r15_730, rcx)
	rcx = Mem816[rsp_100 + 0x0000000000000018:word64]
	word64 r8_850
	*r8Out = Mem816[rsp_100 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F15C:
	word32 ebp_836
	rax_218 = fn000000000040EC80(rax_218, rcx, r15_730, r12_1030, qwLoc04, out rsp_100, out ebp_836, out r12_1030)
	rcx = Mem816[rsp_100 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
	word64 r8_845
	*r8Out = Mem816[rsp_100 + 0x0000000000000028:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16B:
	r12_1030 = r12_1030 + rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16E:
	r13_1031 = r13_1031 + rbx_1001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED74:
	word32 eax_584 = (word32) Mem0[rax_218 + 0x0000000000000001:byte]
	rax_218 = DPB(rax_218, eax_584, 0) (alias)
	al_310 = (byte) eax_584 (alias)
	rbx_1001 = rax_218 + 0x0000000000000001
	branch al_310 == 0x00 l000000000040F050
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F050:
	r10_455 = r14_1039
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F053:
	branch r12_1030 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F05C:
	branch r10_455 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F191:
	rax_111 = r13_1031
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F065:
	Mem504[r12_1030:byte] = 0x00
	rax_111 = r13_1031
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE9A:
	word64 rsi_154 = Mem0[rsp_100 + 0x00000000000004C8:word64] ^ Mem0[fs:0x00000028:word64]
	word32 esi_155 = (word32) rsi_154
	branch rsi_154 != 0x0000000000000000 l00000000004105EA
// DataOut: bpl cl ebp esi fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004105EA:
	__stack_chk_fail()
	Mem183[rsp_100 + 0x0000000000000018:word32] = 0x00000000
// DataOut: bpl cl ebp esi fs r11d r12 r13 r14 r15b r9d rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F25D:
	Mem184[rsp_100 + 0x00000000000000B2:byte] = cl
	byte dil_186 = (byte) (uint64) esi_155
	word64 rax_189 = rsp_100 + 0x00000000000000B3
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r15b r8 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF37:
	Mem196[rax_189:byte] = dil_186
	Mem201[rax_189 + 0x0000000000000001:byte] = 0x00
	Mem203[rsp_100 + 0x0000000000000038:word32] = r9d
	Mem204[rsp_100 + 0x0000000000000030:word32] = r11d
	Mem205[rsp_100 + 0x0000000000000028:word64] = rbx_1001
	word64 r15_207
	word64 r10_208
	word64 rdx_209
	word64 rsi_213
	word64 rbp_214
	word64 rbx_215
	byte SCZO_217
	word32 esi_220
	byte SZO_221
	byte C_222
	word64 r8_223
	word32 r9d_224
	byte dil_225
	word32 eax_226
	word32 r13d_227
	byte al_228
	byte Z_229
	word32 r11d_230
	word64 r11_231
	word32 edi_232
	word32 edx_233
	word32 ebp_234
	byte CZ_235
	word64 r9_236
	byte S_239
	word32 ecx_240
	word16 ax_241
	byte dl_242
	byte r15b_243
	byte r9b_244
	word32 r14d_245
	call strftime (retsize: 8; depth: 8)
		uses: al_191,ax_192,bLoc04E1_41,C_158,cl_194,CZ_149,dil_199,dl_125,dwLoc04_4,dwLoc04AC_39,dwLoc04B0_46,dwLoc08_9,dwLoc0C_12,dwLoc10_15,dwLoc14_20,dwLoc18_23,eax_190,ebp_135,ecx_195,edi_200,edx_124,esi_155,fs_118,qwLoc04A8_42,qwLoc04D0_117,qwLoc04E0_37,qwLoc28_32,r10_119,r11_152,r11d_151,r12_136,r13_137,r13d_133,r14_138,r14d_139,r15_140,r15b_141,r8_188,r9_120,r9b_122,r9d_121,rax_189,rbp_134,rbx_143,rcx_193,rdi_198,rdx_197,rsi_202,rsp_142,S_150,SCZO_148,SZO_156,Z_157
		defs: al_228,ax_241,C_222,cl_237,CZ_235,dil_225,dl_242,eax_226,ebp_234,ecx_240,edi_232,edx_233,esi_220,fs_219,r10_208,r11_231,r11d_230,r12_212,r13_211,r13d_227,r14_210,r14d_245,r15_207,r15b_243,r8_223,r9_236,r9b_244,r9d_224,rax_218,rbp_214,rbx_215,rcx_216,rdi_238,rdx_209,rsi_213,rsp_206,S_239,SCZO_217,SZO_221,Z_229
	word64 r11_250 = (uint64) Mem205[rsp_100 + 0x0000000000000030:word32]
	*r11Out = r11_250
	word64 r9_252 = (uint64) Mem205[rsp_100 + 0x0000000000000038:word32]
	word64 r8_249 = Mem205[rsp_100 + 0x0000000000000028:word64]
	*r8Out = r8_249
	r11d = (word32) r11_250 (alias)
	r9d = (word32) r9_252 (alias)
	byte r9b_254 = (byte) r9_252
	branch rax_218 == 0x0000000000000000 l000000000040ED74
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> r14:rdx rdx:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF84:
	rbx_1001 = rax_218 - 0x0000000000000001
	word64 rax_256 = 0x0000000000000000
	byte al_258 = 0x00
	branch ebp_234 < 0x00000000 l000000000040EF8F
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8C_1:
	rax_256 = (uint64) ebp_234 (alias)
	al_258 = (byte) ebp_234 (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8F:
	word16 ax_269 = (int16) al_258
	word64 rax_271 = DPB(rax_256, ax_269, 0)
	rcx = rax_218 - 0x0000000000000001
	cl = (byte) (rax_218 - 0x0000000000000001) (alias)
	branch rax_271 <u rax_218 - 0x0000000000000001 l000000000040EF9E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9A_1:
	rcx = rax_271
	cl = (byte) ax_269 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9E:
	branch rcx >=u r14_1039 - r13_1031 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE98:
	rax_111 = 0x0000000000000000
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFAA:
	branch r12_1030 == 0x0000000000000000 l000000000040F03A
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB3:
	branch rax_218 - 0x0000000000000001 >=u rax_271 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB8:
	rax_271 = (uint64) Mem205[rsp_100 + 0x0000000000000018:word32]
	branch (word32) rax_271 != 0x00000000 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFC0:
	Mem406[rsp_100 + 0x0000000000000030:word64] = rcx
	Mem407[rsp_100 + 0x0000000000000028:word32] = r9d
	Mem412[rsp_100 + 0x0000000000000018:word64] = r8_249
	word64 rbp_408 = (int64) ebp_234 - (rax_218 - 0x0000000000000001)
	branch r11d == 0x00000030 l0000000000410239
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000410239:
	rax_271 = memset(r12_1030, 0x0000000000000030, rbp_408)
	word64 r9_440 = (uint64) Mem412[rsp_100 + 0x0000000000000028:word32]
	r12_1030 = r12_1030 + rbp_408
	r8_249 = Mem412[rsp_100 + 0x0000000000000018:word64]
	r9d = (word32) r9_440 (alias)
	r9b_254 = (byte) r9_440 (alias)
	rcx = Mem412[rsp_100 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFE2:
	rax_271 = memset(r12_1030, 0x0000000000000020, rbp_408)
	word64 r9_427 = (uint64) Mem412[rsp_100 + 0x0000000000000028:word32]
	r12_1030 = r12_1030 + rbp_408
	rcx = Mem412[rsp_100 + 0x0000000000000030:word64]
	r9d = (word32) r9_427 (alias)
	r9b_254 = (byte) r9_427 (alias)
	r8_249 = Mem412[rsp_100 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r8 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F001:
	Mem338[rsp_100 + 0x0000000000000028:word64] = rcx
	Mem339[rsp_100 + 0x0000000000000018:word64] = r8_249
	word64 rsi_343 = Mem339[rsp_100 + 0x0000000000000020:word64]
	*rdiOut = r12_1030
	branch r15b_243 != 0x00 l000000000040F1AD
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9b r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1AD:
	word32 ebp_388
	rax_271 = fn000000000040EC30(rax_271, rax_218 - 0x0000000000000001, rsi_343, r12_1030, qwLoc04, out rsp_100, out ebp_388, out r12_1030)
	rcx = Mem339[rsp_100 + 0x0000000000000028:word64]
	word64 r8_394
	*r8Out = Mem339[rsp_100 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F01F:
	branch r9b_254 == 0x00 l000000000040F199
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15b r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F199:
	rax_271 = memcpy(r12_1030, rsi_343, rax_218 - 0x0000000000000001)
	rcx = Mem339[rsp_100 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
	word64 r8_386
	*r8Out = Mem339[rsp_100 + 0x0000000000000018:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F028:
	word32 ebp_369
	rax_271 = fn000000000040EC80(rax_271, rax_218 - 0x0000000000000001, rsi_343, r12_1030, qwLoc04, out rsp_100, out ebp_369, out r12_1030)
	rcx = Mem339[rsp_100 + 0x0000000000000028:word64]
	word64 r8_375
	*r8Out = Mem339[rsp_100 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F037:
	r12_1030 = r12_1030 + (rax_218 - 0x0000000000000001)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F03A:
	word32 eax_308 = (word32) Mem205[rax_271 + 0x0000000000000001:byte]
	rax_218 = DPB(rax_271, eax_308, 0) (alias)
	al_310 = (byte) eax_308 (alias)
	r13_1031 = r13_1031 + rcx
	rbx_1001 = rax_218 + 0x0000000000000001
	branch al_310 != 0x00 l000000000040ED85
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F04E:
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r15b r8 r9d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEB1:
	word64 rsp_159 = rsp_100 + 1240
	word64 rbp_163
	*rbpOut = Mem0[rsp_159 + 0x0000000000000008:word64]
	word32 r14d_171
	*r14dOut = (word32) Mem0[rsp_159 + 0x0000000000000020:word64]
	word64 r15_173
	*r15Out = Mem0[rsp_159 + 0x0000000000000028:word64]
	word64 rsp_175
	*rspOut = rsp_159 + 0x0000000000000030
	return rax_111
// DataOut: fs r11 r11d r14d r15 r15b r15d r8 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn000000000040ECD0_exit:
// DataOut: r11 r11d r14d r15 r15b r15d r8 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000040EDA9:
	rbx_1001 = rbx_1001 + 0x0000000000000001
	word32 edi_1002 = (word32) Mem0[rbx_1001:byte]
	dil_1003 = (byte) edi_1002 (alias)
	rdi = DPB(rdi, edi_1002, 0) (alias)
	*rdiOut = rdi
	SZO_1007 = cond(dil_1003 - 0x30) (alias)
	branch dil_1003 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r9b r9d rbx rdi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:0x0001 rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDC0:
	r11d = (int32) dil_1003
	*r11Out = DPB(r11_1022, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: Local -0004(0) Local -0008(0)



word64 fn0000000000410600(word64 rax, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r8d, word32 r11d, word64 r14, word64 r15, selector fs, ptr64 & rbpOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r14dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl ebp fs r11d r14 r15 r15b r8d rax rdi rdx rsi
// LiveOut: r11 r11d r14d r15 r15b r15d r8 rax rbp rdi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: bpl ebp fs r11d r14 r15 r15b r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 rsp_27
	word64 rbp_28
	word64 rdi_29
	word64 r8_30
	word64 r11_31
	word32 r14d_32
	word64 r15_33
	return fn000000000040ECD0(rax, rdx, rsi, ebp, rdi, (word32) (uint64) r8d, r11d, r14, r15, fs, out rsp_27, out rbp_28, out rdi_29, out r8_30, out r11_31, out r14d_32, out r15_33)
// DataOut: fs r11 r11d r14d r15 r15b r15d r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: r11 r11d r14d r15 r15b r15d r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rbx:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11, word64 qwArg00, word64 qwArg08, word64 qwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410A30:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168CC)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000410650:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168C0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	__fprintf_chk(rdi, 0x0000000000000001, 0x0000000000416BA0)
	word64 rax_48 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word32 eax_51 = fputs_unlocked(rax_48, rdi)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:<invalid> eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000410A50:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l00000000004107A1:
	__fprintf_chk(rdi, 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005))
	return fp + 0x0000000000000018
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004106BE:
	word64 rsp_107
	word64 r15_108
	word64 r14_109
	word64 r13_110
	word64 r12_111
	word64 r9_112
	word64 rbp_113
	word64 rdi_114
	word64 rbx_115
	word64 r8_116
	byte SCZO_117
	word64 rsi_118
	byte SZO_119
	byte C_120
	byte Z_121
	word64 rcx_122
	word64 rdx_123
	word32 edx_124
	word32 esi_125
	word32 eax_126
	word64 rax_127
	word32 edi_128
	word32 r8d_129
	byte CZ_130
	word64 r10_131
	word64 r11_132
	call Mem0[0x00416B48:word32] (retsize: 4; depth: 116)
		uses: C_31,CZ_53,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_18,dwLoc18_23,eax_51,edi,edx,esi,qwLoc28,qwLoc30,qwLoc38,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,r10,r11,r12_15,r13,r14,r15,r8_38,r8d,r9_33,rax_48,rbp_20,rbx_25,rcx_39,rdi_50,rdx_46,rsi_49,rsp_26,SCZO_52,SZO_32,Z_29
		defs: C_120,CZ_130,eax_126,edi_128,edx_124,esi_125,r10_131,r11_132,r12_111,r13_110,r14_109,r15_108,r8_116,r8d_129,r9_112,rax_127,rbp_113,rbx_115,rcx_122,rdi_114,rdx_123,rsi_118,rsp_107,SCZO_117,SZO_119,Z_121
	return rsp_107
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:SLICE(r15, word64, 32) r15:<invalid> r14:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_13 = 0x0000000000000000
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_18 = (word32) (uint64) Mem0[rax:word32]
	branch eax_18 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 rax_61 = (uint64) (eax_18 + 0x00000008)
	Mem63[rax_61:word32] = (word32) rax_61
	rax = Mem63[rdx:word64]
	Mem69[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem52[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem52[rdx:word64]
	Mem58[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_13 = r9_13 + 0x0000000000000001
	branch r9_13 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_13, r11, qwLoc60, qwLoc58, qwLoc50)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid>



void fn0000000000410B30(byte al, word64 rdx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al r11 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410B30_entry:
// DataOut: al r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B30:
	branch al == 0x00 l0000000000410B7C
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B7C:
	fn0000000000410AC0(fp - 0x00000000000000B8, rdx, rsi, rdi, fp - 0x00000000000000D0, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9

fn0000000000410B30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -208(fp):0x00000020 -204(fp):0x00000030 -200(fp):fp + 0x0000000000000008 -192(fp):fp - 0x00000000000000B8 -152(fp):r8 -144(fp):r9

l0000000000410B45:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9



word64 fn0000000000410C40(word64 rsi, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esp rax rdi rdx rsp sp spl
// Preserved: rbx
fn0000000000410C40_entry:
// DataOut: ebp fs r10 r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp fs r10 r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp fs r10 r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_34 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_34 <u rdi l0000000000410C7A
// DataOut: eax ebp fs r10 r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem40[fp - 0x0000000000000008:word32] = rax_34
	fn0000000000410E50()
// DataOut: ebp fs r10 r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp fs r10 r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	word64 rsp_23
	*rspOut = fp + 0x0000000000000004
	return rax_13
// DataOut: ebp fs r10 r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al r8 rax rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	word64 rsp_218
	*rspOut = fp + 0x0000000000000004
	return 0x0000000000000000
// DataOut: al ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -4(fp):rbx

l0000000000410C99:
	word64 rax_60 = realloc(rdi, rsi)
	branch rax_60 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_84 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_84 <u rsi l0000000000410CED
// DataOut: eax ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem93[fp - 0x0000000000000008:word32] = rax_84
	fn0000000000410E50()
	word64 r8_97
	*r8Out = rdx
	word64 rcx_111 = Mem93[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_111 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_199 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_111 = (uint64) (rax_199 == 0x0000000000000000) + rax_199
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	rdx = (uint64) (0xFFFFFFFFAAAAAAAA % rdx)
	word64 rax_123 = (uint64) (0xFFFFFFFFAAAAAAAA /u rdx)
	branch rcx_111 >=u rax_123 l0000000000410D5C
// DataOut: eax ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem136[fp - 0x000000000000000C:word32] = rax_123
	fn0000000000410E50()
	word64 rax_140 = Mem136[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: eax ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_140 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_140 = 0x0000000000000080
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem183[rsi:word64] = rax_140
	rsi = rax_140
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_140 >u 0x00000000AAAAAAA9 l0000000000410DB7
// DataOut: eax ebp ebx fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem157[fp - 0x0000000000000010:word32] = rax_140
	fn0000000000410E50()
	Mem159[fp - 0x0000000000000014:word32] = rsi
	word64 rsp_170
	*rspOut = rsp_161 + 0x0000000000000008
	word64 rsp_161
	return memset(fn0000000000410C40(rsi, rdi, out rsp_161), 0x0000000000000000, rdi)
// DataOut: al ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -4(fp):rbx
// Terminates process

l0000000000410D87:
	rdx = rax_140 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_150 = rax_140 + rdx
	Mem153[rsi:word64] = rax_150
	rsi = rax_150
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_111 = rcx_111 + (rcx_111 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem112[rsi:word64] = rcx_111
	rsi = rcx_111 *s rdx
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	word64 rsp_71
	*rspOut = fp + 0x0000000000000004
	return rax_60
// DataOut: al ebp fs r10 r11 r12d r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -4(fp):rbx

fn0000000000410C90_exit:
// DataOut: al r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:rdx cl:<invalid> -4(fp):rbx



word64 fn0000000000410E00(word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: bpl eax ebp rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410E00_entry:
// DataOut: fs r10 r11 r12 r12b r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	word64 rsp_15
	word64 rax_16 = fn0000000000410C40(rsi, rsi, out rsp_15)
	word64 rbp_24
	*rbpOut = Mem0[rsp_15 + 0x0000000000000010:word64]
	word64 rsp_25
	*rspOut = rsp_15 + 0x0000000000000018
	word64 rdi_26
	*rdiOut = rax_16
	return memcpy(rax_16, rdi, rsi)
// DataOut: bpl eax ebp fs r10 r11 r12 r12b r12d r13 r13b r13d r14 r14d r15 r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410E00_exit:
// DataOut: bpl eax ebp rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:rsi rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000410E30(word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: bpl eax ebp rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E30_entry:
// DataOut: fs r10 r11 r12 r12b r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_11 = DPB(rax, strlen(rdi), 0)
	word64 rsi_13
	*rsiOut = rax_11 + 0x0000000000000001
// DataOut: fs r10 r11 r12 r12b r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E41_thunk_fn0000000000410E00:
	word64 rsp_16
	word64 rbp_17
	word64 rdi_18
	return fn0000000000410E00(rax_11 + 0x0000000000000001, rdi, out rsp_16, out rbp_17, out rdi_18)
// DataOut: bpl eax ebp fs r10 r11 r12 r12b r12d r13 r13b r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx eax:<invalid> rdi:rdi rsi:rax + 0x0000000000000001 -4(fp):rbx

fn0000000000410E30_exit:
// DataOut: bpl eax ebp rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	word64 rsp_16
	byte SCZO_17
	word32 edx_18
	word64 rdx_19
	word32 esi_20
	word64 rsi_21
	word32 edi_22
	word64 rdi_23
	byte SZO_24
	byte C_25
	word64 rax_26
	word64 rcx_27
	word32 eax_28
	call error (retsize: 8; depth: 16)
		uses: C_15,eax_13,rax_12,rcx_9,rdi_8,rdx_10,rsi_11,rsp_2,SZO_14
		defs: C_25,eax_28,edi_22,edx_18,esi_20,rax_26,rcx_27,rdi_23,rdx_19,rsi_21,rsp_16,SCZO_17,SZO_24
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



word32 fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r9Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebx r14 r15 r9 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
// Stack args: Stack +0008(64) Stack +0010(64)
fn0000000000410E90_entry:
// DataOut: ebx edx fs r10 r11 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64) Stack +0008(64) Stack +0010(64)

l0000000000410E90:
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: fs r10 r11 r14d r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32) Local -0028(64) Stack +0008(64) Stack +0010(64)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000410EAA:
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: fs r10 r11 r12 r14d r15 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Local -0028(64) Stack +0008(64) Stack +0010(64)

l0000000000410EBE_1:
// DataOut: fs r10 r11 r12 r14d r15 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Local -0028(64) Stack +0008(64) Stack +0010(64)

l0000000000410EC2:
	word64 rsp_43
	word64 r15_44
	word64 r14_45
	word32 r14d_46
	word32 edx_47
	word64 r13_48
	word64 r12_49
	word64 rbp_50
	word64 rbx_51
	byte SCZO_52
	byte CZ_53
	word64 rax_54
	word64 rdi_55
	word64 rsi_56
	byte SZO_57
	byte C_58
	word64 rcx_59
	word64 r8_60
	byte Z_61
	word32 ecx_62
	word64 rdx_63
	word32 esi_64
	word32 edi_65
	word32 ebx_66
	word32 r9d_67
	word32 eax_70
	word32 ebp_71
	byte dl_72
	byte al_73
	byte S_74
	word32 r8d_75
	byte cl_76
	word64 r9_69
	byte bl_68
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_42,C_34,CZ_25,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_19,dwLoc18_22,ebp_29,ebx_40,edx,r12_38,r13_36,r14_9,r14d_10,r15_31,r8,rax_26,rbp_28,rbx_41,rcx,rdi,rsi,rsp_23,SCZO_24,SZO_32,Z_33
		defs: al_73,bl_68,C_58,cl_76,CZ_53,dl_72,eax_70,ebp_71,ebx_66,ecx_62,edi_65,edx_47,esi_64,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_69,r9d_67,rax_54,rbp_50,rbx_51,rcx_59,rdi_55,rdx_63,rsi_56,rsp_43,S_74,SCZO_52,SZO_57,Z_61
	word64 rax_81 = rbp_50
// DataOut: bl fs r10 r11 r12 r14d r15 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410EDF:
	r9_69 = DPB(r9_69, (word32) bl_68, 0) (alias)
	*r9Out = r9_69
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_69 * 0x0000000000000002:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl fs r10 r11 r12 r14d r15 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410ED8:
	rax_81 = rax_81 + 0x0000000000000001
	bl_68 = (byte) (word32) Mem0[rax_81:byte] (alias)
// DataOut: bl fs r10 r11 r12 r14d r15 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410EEB:
	word32 eax_161
	branch bl_68 != 0x2D l0000000000410F08
// DataOut: fs r10 r11 r12 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F08:
	word64 rbp_251
	word32 ebp_249
	word32 edx_301
	word64 rax_212 = __errno_location()
	Mem214[rax_212:word32] = 0x00000000
	word64 rax_220 = DPB(rax_212, strtoul(rbp_50, r15_44, (uint64) r14d_46), 0)
	word64 r14_221 = Mem214[r15_44:word64]
	word64 rbx_223 = rax_220
	branch r14_221 == rbp_50 l0000000000410FE7
// DataOut: fs r10 r11 r12 r14 r15 r9 rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FE7:
	branch r12_49 == 0x0000000000000000 l0000000000410EF0
// DataOut: fs r10 r11 r12 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FF0:
	word32 edx_936 = (word32) Mem214[rbp_50:byte]
	byte dl_939 = (byte) edx_936
	branch dl_939 == 0x00 l0000000000410EF0
// DataOut: dl edx fs r10 r11 r12 r14 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FFC:
	rbp_251 = 0x0000000000000000
	ebp_249 = 0x00000000 (alias)
	rbx_223 = 0x0000000000000001
	edx_301 = (word32) (uint64) edx_936 (alias)
	branch strchr(r12_49, DPB(r15_44, (int32) dl_939, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041101F:
// DataOut: fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F3A:
	word32 eax_895 = (word32) (uint64) Mem214[rax_212:word32]
	branch eax_895 != 0x00000000 l0000000000410F68
// DataOut: eax fs r10 r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F68:
	rbp_251 = 0x0000000000000001
	ebp_249 = 0x00000001 (alias)
	branch eax_895 != 0x00000022 l0000000000410EF0
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F76:
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F40:
	rbp_251 = 0x0000000000000000
	ebp_249 = 0x00000000 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F42:
	branch r12_49 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F47:
	word32 edx_906 = (word32) Mem214[r15_44:byte]
	byte dl_909 = (byte) edx_906
	branch dl_909 != 0x00 l0000000000410F78
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F78:
	edx_301 = (word32) (uint64) edx_906 (alias)
	branch strchr(r12_49, DPB(r15_44, (int32) dl_909, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F94:
	word32 eax_327
	word32 ecx_322
	word64 rsi_310 = 0x0000000000000030
	word32 edx_319 = (word32) (uint64) edx_301
	branch strchr(r12_49, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FAE:
	byte al_865 = (byte) (word32) Mem214[0x0000000000000031:byte]
	branch al_865 == 0x44 l0000000000411262
// DataOut: al dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FBB:
	branch al_865 == 0x69 l000000000041124A
// DataOut: al dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041124A:
	word64 rcx_889 = (uint64) (Mem214[0x0000000000000032:byte] == 0x42)
	eax_327 = 0x00000400 (alias)
	ecx_322 = rcx_889 + 0x0000000000000001 + rcx_889
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FC3:
	branch al_865 == 0x42 l0000000000411262
// DataOut: dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411262:
	ecx_322 = 0x00000002 (alias)
	eax_327 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FCB:
	ecx_322 = 0x00000001 (alias)
	eax_327 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FD5:
	word64 rdx_329 = (uint64) (edx_319 - 0x00000042)
	byte dl_332 = (byte) rdx_329
	branch dl_332 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410FDD:
	word32 edx_347
	word64 rdi_516
	switch (DPB(rdx_329, (word32) dl_332, 0)) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411054:
	branch rbx_223 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041105D:
	rbx_223 = rbx_223 * 0x0000000000000002
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411036:
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411064:
	branch rbx_223 >u 0x00000000FFFFFFFF l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411077:
	rbx_223 = rbx_223 << 0x0000000000000009
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:0xFFFFFFFF rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041107F:
	word64 rdi_763 = (int64) eax_327
	word64 rax_770 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_763)
	word32 esi_774 = 0x00000007
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004110A6:
	word32 r8d_797
	branch rax_770 >=u rbx_223 l0000000000411097
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411097:
	rbx_223 = rbx_223 *s rdi_763
	r8d_797 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004110AB:
	rbx_223 = 0xFFFFFFFFFFFFFFFF
	r8d_797 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041109E:
	rsi_310 = (uint64) (esi_774 - 0x00000001)
	edx_347 = (word32) (uint64) (edx_347 | r8d_797) (alias)
	esi_774 = (word32) rsi_310 (alias)
	branch esi_774 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004110BA:
	word64 rdi_703 = (int64) eax_327
	word64 rax_710 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_703)
	word32 esi_714 = 0x00000008
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004110E5:
	word32 r8d_737
	branch rax_710 >=u rbx_223 l00000000004110D2
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004110D2:
	rbx_223 = rbx_223 *s rdi_703
	r8d_737 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004110EA:
	rbx_223 = 0xFFFFFFFFFFFFFFFF
	r8d_737 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004110D9:
	rsi_310 = (uint64) (esi_714 - 0x00000001)
	edx_347 = (word32) (uint64) (edx_347 | r8d_737) (alias)
	esi_714 = (word32) rsi_310 (alias)
	branch esi_714 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004110F9:
	rsi_310 = (int64) eax_327
	word64 rax_650 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_310)
	word32 edi_654 = 0x00000004
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041110F:
	word32 r8d_677
	branch rax_650 <u rbx_223 l0000000000411271
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411271:
	rbx_223 = 0xFFFFFFFFFFFFFFFF
	r8d_677 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411118:
	rbx_223 = rbx_223 *s rsi_310
	r8d_677 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041111F:
	edx_347 = (word32) (uint64) (edx_347 | r8d_677) (alias)
	edi_654 = (word32) (uint64) (edi_654 - 0x00000001) (alias)
	branch edi_654 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411127:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041112C:
	rsi_310 = (int64) eax_327
	word64 rax_590 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_310)
	word32 edi_594 = 0x00000005
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411157:
	word32 r8d_617
	branch rax_590 >=u rbx_223 l0000000000411144
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411144:
	rbx_223 = rbx_223 *s rsi_310
	r8d_617 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041115C:
	rbx_223 = 0xFFFFFFFFFFFFFFFF
	r8d_617 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041114B:
	edx_347 = (word32) (uint64) (edx_347 | r8d_617) (alias)
	edi_594 = (word32) (uint64) (edi_594 - 0x00000001) (alias)
	branch edi_594 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041116B:
	rdi_516 = (int64) eax_327
	rsi_310 = 0xFFFFFFFFFFFFFFFF
	word64 rax_563 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_516)
	branch rbx_223 >u rax_563 l00000000004112A3
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411186:
	rbx_223 = rbx_223 *s rdi_516
	branch rax_563 <u rbx_223 l00000000004112A3
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004112A3:
	edx_347 = 0x00000001 (alias)
	rbx_223 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041119E:
	rdi_516 = (int64) eax_327
	rsi_310 = 0xFFFFFFFFFFFFFFFF
	branch rbx_223 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_516) l0000000000411193
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411193:
	rsi_310 = 0xFFFFFFFFFFFFFFFF
	rbx_223 = rbx_223 *s rdi_516
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004111B5:
	rbx_223 = 0xFFFFFFFFFFFFFFFF
	edx_347 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041121B:
	rsi_310 = (int64) eax_327
	word64 rax_463 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_310)
	word32 edi_467 = 0x00000003
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411231:
	word32 r8d_490
	branch rax_463 <u rbx_223 l0000000000411294
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411294:
	rbx_223 = 0xFFFFFFFFFFFFFFFF
	r8d_490 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411236:
	rbx_223 = rbx_223 *s rsi_310
	r8d_490 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041123D:
	edx_347 = (word32) (uint64) (edx_347 | r8d_490) (alias)
	edi_467 = (word32) (uint64) (edi_467 - 0x00000001) (alias)
	branch edi_467 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411245:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004111C2:
	word64 rdi_396 = (int64) eax_327
	word64 rax_403 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_396)
	word32 esi_407 = 0x00000006
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004111ED:
	word32 r8d_430
	branch rax_403 >=u rbx_223 l00000000004111DA
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004111DA:
	rbx_223 = rbx_223 *s rdi_396
	r8d_430 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004111F2:
	rbx_223 = 0xFFFFFFFFFFFFFFFF
	r8d_430 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l00000000004111E1:
	rsi_310 = (uint64) (esi_407 - 0x00000001)
	edx_347 = (word32) (uint64) (edx_347 | r8d_430) (alias)
	esi_407 = (word32) rsi_310 (alias)
	branch esi_407 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411028:
	Mem294[rbp_251:word64] = rbx_223
	eax_161 = (word32) (uint64) ((word32) (uint64) ebp_249 | 0x00000002) (alias)
// DataOut: eax fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411201:
	branch rbx_223 >u 0x00000000FFFFFFFF l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411283:
	rbx_223 = 0xFFFFFFFFFFFFFFFF
	edx_347 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411210:
	rbx_223 = rbx_223 << 0x000000000000000A
	edx_347 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:0xFFFFFFFF rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000411038:
	rbp_251 = (uint64) (ebp_249 | edx_347)
	Mem364[r15_44:word64] = r14_221 + (int64) ecx_322
	ebp_249 = (word32) rbp_251 (alias)
	word32 eax_362 = (word32) (uint64) ((word32) (uint64) ebp_249 | 0x00000002)
	branch Mem364[rsi_310:byte] == 0x00 l000000000041104F
// DataOut: eax ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041104C_1:
	ebp_249 = eax_362
	rbp_251 = DPB(rbp_251, eax_362, 0) (alias)
// DataOut: ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l000000000041104F:
// DataOut: ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410F4F:
	Mem252[rbp_251:word64] = rbx_223
	word32 ebx_260
	*ebxOut = (word32) qwLoc18
	return (word32) (uint64) ebp_249
// DataOut: eax ebx fs r10 r11 r14 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000410EF0:
	eax_161 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0018(32) Stack +0008(64) Stack +0010(64)

l0000000000410EF5:
	word32 ebx_167
	*ebxOut = (word32) qwLoc18
	return eax_161
// DataOut: eax ebx fs r10 r11 r14 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000410E90_exit:
// DataOut: eax ebx r14 r15 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000018 r14:<invalid> rax:<invalid> rbp:r12 r15:<invalid> r13:SLICE(r15, word64, 32) r12:r14 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rbx:rbx rsi:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004112D0:
	word64 rsi_130
	word64 r10_6 = (int64) esi
	word32 r10d_7 = (word32) r10_6
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000041133B:
	rsi_130 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: fp(64)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:0x0000000000416DD1 -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: fp(64)

l0000000000411334:
	rsi_130 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: fp(64)

l00000000004112F0:
	rsi_130 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: fp(64)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13
// LocalsOut: fp(64)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000041130C:
	dcgettext(0x0000000000000000, rsi_130, 0x0000000000000005)
	word64 rsp_84
	word64 r13_85
	word64 r10_86
	word32 esi_87
	word64 r12_88
	word64 r8_89
	word64 rbp_90
	word64 rbx_91
	byte SCZO_92
	word32 edi_93
	word32 ebp_94
	byte CZ_95
	byte C_96
	word64 rdi_97
	word64 rsi_98
	byte Z_99
	word32 r10d_100
	byte SZO_101
	byte S_102
	word32 ebx_103
	word64 rcx_104
	word32 edx_105
	word64 rdx_106
	word64 rax_107
	word64 r9_108
	word32 eax_109
	byte dl_110
	call error (retsize: 8; depth: 48)
		uses: bLoc27_65,bLoc28_64,C_80,CZ_22,dl,dwLoc04_4,dwLoc08_10,dwLoc0C_15,dwLoc10_18,eax_78,ebp_25,ebx,edi_58,edx,esi_60,r10_6,r10d_7,r12_12,r13_67,r8_73,r9_71,rax_77,rbp_24,rbx_66,rcx_74,rdi_76,rdx_72,rsi_75,rsp_19,S_62,SCZO_59,SZO_79,Z_55
		defs: C_96,CZ_95,dl_110,eax_109,ebp_94,ebx_103,edi_93,edx_105,esi_87,r10_86,r10d_100,r12_88,r13_85,r8_89,r9_108,rax_107,rbp_90,rbx_91,rcx_104,rdi_97,rdx_106,rsi_98,rsp_84,S_102,SCZO_92,SZO_101,Z_99
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r13:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):r12 -4(fp):r13



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, word64 qwArg00, word64 qwArg08, word64 qwArg10, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r12 r14 r14b r15 r8 r9 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0008(8) Stack +0010(64)
fn0000000000411360_entry:
// DataOut: edx fs r10 r11 r12 r14 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64) Stack +0008(8) Stack +0010(64)

l0000000000411360:
	branch edx >u 0x00000024 l0000000000411788
// DataOut: fs r10 r11 r14d r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0028(64) Stack +0008(8) Stack +0010(64)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000041137A:
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: fs r10 r11 r12 r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0028(64) Stack +0008(8) Stack +0010(64)

l000000000041138E_1:
// DataOut: fs r10 r11 r12 r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Local -0028(64) Stack +0008(8) Stack +0010(64)

l0000000000411392:
	word64 rsp_43
	word64 r15_44
	word64 r14_45
	word32 r14d_46
	word32 edx_47
	word64 r13_48
	word64 r12_49
	word64 rbp_50
	word64 rbx_51
	byte SCZO_52
	byte CZ_53
	word64 rax_54
	word64 rdi_55
	word64 rsi_56
	byte SZO_57
	byte C_58
	word64 rcx_59
	word64 r8_60
	byte Z_61
	word32 ecx_62
	word64 rdx_63
	word32 esi_64
	word32 edi_65
	word32 ebx_66
	word32 r9d_67
	word32 eax_70
	word32 ebp_71
	byte dl_72
	byte al_73
	byte S_74
	word32 r8d_75
	byte cl_76
	word64 r9_69
	byte bl_1027
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_42,C_34,CZ_25,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_19,dwLoc18_22,ebp_29,ebx_40,edx,r12_38,r13_36,r14_9,r14d_10,r15_31,r8,rax_26,rbp_28,rbx_41,rcx,rdi,rsi,rsp_23,SCZO_24,SZO_32,Z_33
		defs: al_73,bl_68,C_58,cl_76,CZ_53,dl_72,eax_70,ebp_71,ebx_66,ecx_62,edi_65,edx_47,esi_64,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_69,r9d_67,rax_54,rbp_50,rbx_51,rcx_59,rdi_55,rdx_63,rsi_56,rsp_43,S_74,SCZO_52,SZO_57,Z_61
	word64 rax_1020 = rbp_50
// DataOut: bl fs r10 r11 r12 r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004113AF:
	word32 r9d_94 = (word32) bl_1027
	r9_69 = DPB(r9_69, r9d_94, 0) (alias)
	*r9Out = r9_69
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_69 * 0x0000000000000002:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl fs r10 r11 r12 r14d r15 r8 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004113A8:
	rax_1020 = rax_1020 + 0x0000000000000001
	bl_1027 = (byte) (word32) Mem0[rax_1020:byte] (alias)
// DataOut: bl fs r10 r11 r12 r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004113BB:
	word32 eax_172
	branch bl_1027 != 0x2D l00000000004113D8
// DataOut: fs r10 r11 r12 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004113D8:
	word32 ebp_1008
	word64 rbp_1007
	word32 edx_1017
	word64 rax_233 = __errno_location()
	Mem242[rax_233:word32] = 0x00000000
	word64 rsp_247
	word64 r15_248
	word64 r14_249
	word32 r14d_250
	word32 edx_251
	word64 r13_252
	word64 r12_253
	word64 rbp_254
	word64 rbx_255
	byte SCZO_256
	byte CZ_257
	word64 rax_258
	word64 rdi_259
	word64 rsi_260
	byte SZO_261
	byte C_262
	word64 rcx_263
	word64 r8_264
	byte Z_265
	word32 ecx_266
	word64 rdx_267
	word32 esi_268
	word32 edi_269
	word32 ebx_270
	word32 r9d_271
	byte bl_272
	word64 r9_273
	word32 eax_274
	word32 ebp_275
	byte dl_276
	byte al_277
	byte S_278
	word32 r8d_279
	byte cl_280
	call __strtoul_internal (retsize: 8; depth: 72)
		uses: al_235,bl_87,C_239,cl_76,CZ_53,dl_80,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_19,dwLoc18_22,dwLoc38,eax_234,ebp_71,ebx_86,ecx_237,edi_65,edx_79,esi_244,qwLoc08,qwLoc10,qwLoc18,qwLoc28,qwLoc38_246,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_95,r9d_94,rax_233,rbp_50,rbx_93,rcx_236,rdi_245,rdx_240,rsi_243,rsp_43,S_74,SCZO_99,SZO_238,Z_100
		defs: al_277,bl_272,C_262,cl_280,CZ_257,dl_276,eax_274,ebp_275,ebx_270,ecx_266,edi_269,edx_251,esi_268,r12_253,r13_252,r14_249,r14d_250,r15_248,r8_264,r8d_279,r9_273,r9d_271,rax_258,rbp_254,rbx_255,rcx_263,rdi_259,rdx_267,rsi_260,rsp_247,S_278,SCZO_256,SZO_261,Z_265
	word64 r14_281 = Mem242[r15_248:word64]
	word64 rbx_1009 = rax_258
	word64 r8_286 = rax_233
	*r8Out = r8_286
	branch r14_281 == rbp_254 l00000000004114BF
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004114BF:
	branch r12_253 == 0x0000000000000000 l00000000004113C0
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004114C8:
	word32 edx_996 = (word32) Mem242[rbp_254:byte]
	byte dl_999 = (byte) edx_996
	branch dl_999 == 0x00 l00000000004113C0
// DataOut: dl edx fs r10 r11 r12 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004114D4:
	rbp_1007 = 0x0000000000000000
	ebp_1008 = 0x00000000 (alias)
	rbx_1009 = 0x0000000000000001
	edx_1017 = (word32) (uint64) edx_996 (alias)
	branch strchr(r12_253, DPB(rsi_260, (int32) dl_999, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004114F7:
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041140C:
	word32 eax_955 = (word32) (uint64) Mem242[rax_258:word32]
	branch eax_955 != 0x00000000 l0000000000411440
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411440:
	rbp_1007 = 0x0000000000000001
	ebp_1008 = 0x00000001 (alias)
	branch eax_955 != 0x00000022 l00000000004113C0
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041144E:
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411413:
	rbp_1007 = 0x0000000000000000
	ebp_1008 = 0x00000000 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411415:
	branch r12_253 == 0x0000000000000000 l0000000000411422
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041141A:
	word32 edx_966 = (word32) Mem242[rsi_260:byte]
	byte dl_969 = (byte) edx_966
	branch dl_969 != 0x00 l0000000000411450
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411450:
	edx_1017 = (word32) (uint64) edx_966 (alias)
	branch strchr(r12_253, DPB(rsi_260, (int32) dl_969, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041146C:
	word32 eax_387
	word32 ecx_382
	word64 rsi_370 = 0x0000000000000030
	word32 edx_379 = (word32) (uint64) edx_1017
	branch strchr(r12_253, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411486:
	byte al_925 = (byte) (word32) Mem242[0x0000000000000031:byte]
	branch al_925 == 0x44 l000000000041173A
// DataOut: al dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411493:
	branch al_925 == 0x69 l0000000000411722
// DataOut: al dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411722:
	word64 rcx_949 = (uint64) (Mem242[0x0000000000000032:byte] == 0x42)
	eax_387 = 0x00000400 (alias)
	ecx_382 = rcx_949 + 0x0000000000000001 + rcx_949
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041149B:
	branch al_925 == 0x42 l000000000041173A
// DataOut: dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041173A:
	ecx_382 = 0x00000002 (alias)
	eax_387 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004114A3:
	ecx_382 = 0x00000001 (alias)
	eax_387 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004114AD:
	word64 rdx_389 = (uint64) (edx_379 - 0x00000042)
	byte dl_392 = (byte) rdx_389
	branch dl_392 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004114B5:
	word32 edx_409
	word64 rdi_576
	switch (DPB(rdx_389, (word32) dl_392, 0)) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041152C:
	branch rbx_1009 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411535:
	rbx_1009 = rbx_1009 * 0x0000000000000002
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041150E:
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041153C:
	branch rbx_1009 >u 0x00000000FFFFFFFF l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041154F:
	rbx_1009 = rbx_1009 << 0x0000000000000009
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411557:
	word64 rdi_823 = (int64) eax_387
	word64 rax_830 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_823)
	word32 esi_834 = 0x00000007
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041157E:
	word32 r8d_857
	branch rax_830 >=u rbx_1009 l000000000041156F
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041156F:
	rbx_1009 = rbx_1009 *s rdi_823
	word64 r8_879
	*r8Out = 0x0000000000000000
	r8d_857 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411583:
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
	word64 r8_874
	*r8Out = 0x0000000000000001
	r8d_857 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411576:
	rsi_370 = (uint64) (esi_834 - 0x00000001)
	edx_409 = (word32) (uint64) (edx_409 | r8d_857) (alias)
	esi_834 = (word32) rsi_370 (alias)
	branch esi_834 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411592:
	word64 rdi_763 = (int64) eax_387
	word64 rax_770 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_763)
	word32 esi_774 = 0x00000008
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115BD:
	word32 r8d_797
	branch rax_770 >=u rbx_1009 l00000000004115AA
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115AA:
	rbx_1009 = rbx_1009 *s rdi_763
	word64 r8_819
	*r8Out = 0x0000000000000000
	r8d_797 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115C2:
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
	word64 r8_814
	*r8Out = 0x0000000000000001
	r8d_797 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115B1:
	rsi_370 = (uint64) (esi_774 - 0x00000001)
	edx_409 = (word32) (uint64) (edx_409 | r8d_797) (alias)
	esi_774 = (word32) rsi_370 (alias)
	branch esi_774 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115D1:
	rsi_370 = (int64) eax_387
	word64 rax_710 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_370)
	word32 edi_714 = 0x00000004
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115E7:
	word32 r8d_737
	branch rax_710 <u rbx_1009 l0000000000411749
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411749:
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
	word64 r8_761
	*r8Out = 0x0000000000000001
	r8d_737 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115F0:
	rbx_1009 = rbx_1009 *s rsi_370
	word64 r8_754
	*r8Out = 0x0000000000000000
	r8d_737 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115F7:
	edx_409 = (word32) (uint64) (edx_409 | r8d_737) (alias)
	edi_714 = (word32) (uint64) (edi_714 - 0x00000001) (alias)
	branch edi_714 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004115FF:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411604:
	rsi_370 = (int64) eax_387
	word64 rax_650 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_370)
	word32 edi_654 = 0x00000005
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041162F:
	word32 r8d_677
	branch rax_650 >=u rbx_1009 l000000000041161C
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041161C:
	rbx_1009 = rbx_1009 *s rsi_370
	word64 r8_699
	*r8Out = 0x0000000000000000
	r8d_677 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411634:
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
	word64 r8_694
	*r8Out = 0x0000000000000001
	r8d_677 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411623:
	edx_409 = (word32) (uint64) (edx_409 | r8d_677) (alias)
	edi_654 = (word32) (uint64) (edi_654 - 0x00000001) (alias)
	branch edi_654 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411643:
	rdi_576 = (int64) eax_387
	rsi_370 = 0xFFFFFFFFFFFFFFFF
	word64 rax_623 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_576)
	branch rbx_1009 >u rax_623 l000000000041177B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041165E:
	rbx_1009 = rbx_1009 *s rdi_576
	branch rax_623 <u rbx_1009 l000000000041177B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041177B:
	edx_409 = 0x00000001 (alias)
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411676:
	rdi_576 = (int64) eax_387
	rsi_370 = 0xFFFFFFFFFFFFFFFF
	branch rbx_1009 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_576) l000000000041166B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041166B:
	rsi_370 = 0xFFFFFFFFFFFFFFFF
	rbx_1009 = rbx_1009 *s rdi_576
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041168D:
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
	edx_409 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004116F3:
	rsi_370 = (int64) eax_387
	word64 rax_523 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_370)
	word32 edi_527 = 0x00000003
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411709:
	word32 r8d_550
	branch rax_523 <u rbx_1009 l000000000041176C
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041176C:
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
	word64 r8_574
	*r8Out = 0x0000000000000001
	r8d_550 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041170E:
	rbx_1009 = rbx_1009 *s rsi_370
	word64 r8_567
	*r8Out = 0x0000000000000000
	r8d_550 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411715:
	edx_409 = (word32) (uint64) (edx_409 | r8d_550) (alias)
	edi_527 = (word32) (uint64) (edi_527 - 0x00000001) (alias)
	branch edi_527 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041171D:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041169A:
	word64 rdi_456 = (int64) eax_387
	word64 rax_463 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_456)
	word32 esi_467 = 0x00000006
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004116C5:
	word32 r8d_490
	branch rax_463 >=u rbx_1009 l00000000004116B2
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004116B2:
	rbx_1009 = rbx_1009 *s rdi_456
	word64 r8_512
	*r8Out = 0x0000000000000000
	r8d_490 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004116CA:
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
	word64 r8_507
	*r8Out = 0x0000000000000001
	r8d_490 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004116B9:
	rsi_370 = (uint64) (esi_467 - 0x00000001)
	edx_409 = (word32) (uint64) (edx_409 | r8d_490) (alias)
	esi_467 = (word32) rsi_370 (alias)
	branch esi_467 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411500:
	Mem354[rbp_1007:word64] = rbx_1009
	eax_172 = (word32) (uint64) ((word32) (uint64) ebp_1008 | 0x00000002) (alias)
// DataOut: eax fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004116D9:
	branch rbx_1009 >u 0x00000000FFFFFFFF l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l000000000041175B:
	rbx_1009 = 0xFFFFFFFFFFFFFFFF
	edx_409 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004116E8:
	rbx_1009 = rbx_1009 << 0x000000000000000A
	edx_409 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411510:
	rbp_1007 = (uint64) (ebp_1008 | edx_409)
	Mem424[r15_248:word64] = r14_281 + (int64) ecx_382
	ebp_1008 = (word32) rbp_1007 (alias)
	word32 eax_422 = (word32) (uint64) ((word32) (uint64) ebp_1008 | 0x00000002)
	branch Mem424[rsi_370:byte] == 0x00 l0000000000411527
// DataOut: eax ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411524_1:
	ebp_1008 = eax_422
	rbp_1007 = DPB(rbp_1007, eax_422, 0) (alias)
// DataOut: ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411527:
// DataOut: ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l0000000000411422:
	Mem313[rbp_1007:word64] = rbx_1009
	return (word32) (uint64) ebp_1008
// DataOut: eax ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004113C0:
	eax_172 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -0008(64) Local -0010(64) Stack +0008(8) Stack +0010(64)

l00000000004113C5:
	return eax_172
// DataOut: eax ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000411360_exit:
// DataOut: eax ebp r12 r14 r14b r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000018 r14:<invalid> rax:<invalid> rbp:r12 r15:<invalid> r13:SLICE(r15, word64, 32) r12:r14 ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:rbx rcx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004117B0_entry:
// DataOut: edi fs r10 r11 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem78[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117B8:
	word64 rax_24 = (uint64) edi
	byte Z_22 = cond(edi - 0x0000000A)
	eax_16 = (word32) rax_24 (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117C8:
	word64 rdx_31 = Mem0[rsi:word64]
	word64 rdi_32 = 0x00000000004137B1
	word64 rcx_34 = 0x000000000000000A
	word64 rsi_35 = rdx_31
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi

l00000000004117D8:
	branch rcx_34 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117D8_1:
	Z_22 = cond(Mem0[rsi_82:byte] - Mem0[rdi_81:byte]) (alias)
	rsi_35 = rsi_82 + 0x0000000000000001
	rdi_32 = rdi_81 + 0x0000000000000001
	rcx_34 = rcx_34 - 0x0000000000000001
	word64 rdi_81 = rdi_32
	word64 rsi_82 = rsi_35
	branch Mem0[rsi_82:byte] != Mem0[rdi_81:byte] l00000000004117D8
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DA:
	branch Z_22 l00000000004117BF
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DC:
	word64 rsp_53
	byte SCZO_54
	word32 edi_55
	byte SZO_56
	byte C_57
	byte Z_58
	word64 rax_59
	word64 rsi_60
	word64 rdx_61
	word64 rdi_62
	word64 rcx_63
	word32 eax_64
	call freecon (retsize: 8; depth: 8)
		uses: C_48,eax_25,edi_50,rax_24,rcx_44,rdi_52,rdx_31,rsi_46,rsp_2,SCZO_51,SZO_49,Z_47
		defs: C_57,eax_64,edi_55,rax_59,rcx_63,rdi_62,rdx_61,rsi_60,rsp_53,SCZO_54,SZO_56,Z_58
	Mem66[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117BF:
	return eax_16
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:v3 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411820_entry:
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	word64 rdi_14
	byte SCZO_15
	byte SZO_16
	byte C_17
	byte Z_18
	word64 rax_19
	word64 rdx_20
	word32 ecx_21
	word64 rcx_22
	call getfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: C_17,eax_13,ecx_21,edi_12,rax_19,rbx_10,rcx_22,rdi_14,rdx_20,rsi_11,rsp_9,SCZO_15,SZO_16,Z_18
	word32 edi_25 = (word32) (uint64) eax_13
// DataOut: edi fs r10 r11 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182E_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, edi_25)
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi rdi:(uint64) eax -4(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



word32 fn0000000000411840(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411840_entry:
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	word64 rdi_14
	call lgetfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: eax_13,edi_12,rbx_10,rdi_14,rsi_11,rsp_9
	word32 edi_17 = (word32) (uint64) eax_13
// DataOut: edi fs r10 r11 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, edi_17)
// DataOut: eax fs r10 r11 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi rdi:(uint64) eax -4(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



void fn0000000000411880(word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411880_entry:
// DataOut: r13 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rsp_13
	word64 r12_14
	word64 rbp_15
	word64 rdi_16
	word64 rbx_17
	word32 ebx_18
	word64 rax_19
	byte SZO_20
	byte C_21
	word32 eax_22
	byte dl_23
	byte Z_24
	byte SCZO_25
	byte bl_26
	word64 r8_27
	word64 r13_28
	word64 rsi_29
	call __fpending (retsize: 8; depth: 20)
		uses: dwLoc04_4,dwLoc08_7,dwLoc0C_12,r12,rbp_9,rbx,rdi,rsp_10
		defs: bl_26,C_21,dl_23,eax_22,ebx_18,r12_14,r13_28,r8_27,rax_19,rbp_15,rbx_17,rdi_16,rsi_29,rsp_13,SCZO_25,SZO_20,Z_24
	word32 ebx_35
	word64 rsp_36
	word64 rbp_37
	word64 rsi_38
	word64 r12_39
	word32 eax_40 = fn0000000000411D30(rbp_15, r8_27, r13_28, out ebx_35, out rsp_36, out rbp_37, out rsi_38, out r12_39)
	branch (word32) (uint64) (ebx_35 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004118C0:
	branch eax_40 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l00000000004118C9:
	Mem106[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l00000000004118A6:
	branch eax_40 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l00000000004118AA:
	branch r12_39 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word64 fn0000000000411900(word64 rbp, word64 rsi, word64 r8, word64 r13, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r10Out, ptr64 & r12dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r13 r15 r8 rbp rsi
// LiveOut: r10 r12d r15 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411900_entry:
// DataOut: fs r10 r13 r15 r8 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = r15
	rdi = 0x000000000000000E
	rsp = fp - 0x0000000000000008
	dwLoc08 = r14
	rsp = fp - 0x000000000000000C
	dwLoc0C = r13
	rsp = fp - 0x0000000000000010
	dwLoc10 = r12
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rsp = fp - 0x00000000000000C0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	SZO = cond(eax)
	C = false
	call nl_langinfo (retsize: 8; depth: 200)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(0x0000000000000000)
	C = false
	rbx = 0x0000000000000000
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411940_1:
	rbx = 0x0000000000416919
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411949:
// DataOut: fs r10 r14 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411C52:
	rdi = rax
	eax = strlen(rdi)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l00000000004119EF:
	rax = 0x0000000000000007
	r12 = 0x0000000000000008
	r15 = 0x0000000000416FF3
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	r13 = 0x0000000000000001
	dwLocB8 = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r10 r12 r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(32)

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	dwLocB8 = 0x00000000
// DataOut: fs r10 r12 r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> r13:0x0000000000000001 -184(fp):0x00000001 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(32)

l0000000000411A19:
	r13 = r13 + r12
	rdi = rbp + 0x000000000000000E
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: fs r10 r12 r13 r14 r15 r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> -184(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(32)

l0000000000411CF2:
	r14 = 0x0000000000416919
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:rbp + 0x000000000000000E rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -184(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) dwLocB8
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:rbp + 0x000000000000000E rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -184(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -184(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411A4D:
	r13 = r13 + rbp
	rax = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[rbp + 0x0000000000000000:word64] = 0x0000000072616863
	rax = 0x0000000000000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	eax = open(rdi, 0x0000000000020000)
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r10 r12d r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -184(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: fs r10 r12d r13 r14 r15 r8 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000020000 -184(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64)

l0000000000411C20:
	rdi = (uint64) r12d
	eax = close(rdi)
// DataOut: fs r10 r13 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -184(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411AA2:
	r12 = fp - 0x00000000000000A0
	qwLocB8 = 0x0000000000000000
// DataOut: fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -184(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: eax fs r10 r13 r14 r15 r8 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: eax fs r10 r13 r14 r15 r8 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8; depth: 200)
// DataOut: eax fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411ADF:
	rsi = r15
	eax = ungetc(rdi, rsi)
	rcx = fp - 0x0000000000000060
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = fp - 0x00000000000000A0
	rsi = 0x0000000000417012
	rdi = r15
	call fscanf (retsize: 8; depth: 200)
	SCZO = cond(0xFFFFFFFF)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: fs r10 r13 r14 r15 r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B07:
	rdx = fp - 0x00000000000000A0
// DataOut: fs r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B21:
	rcx = (uint64) eax
	r10 = fp - 0x0000000000000060
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000060 al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r14 r15 r8 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000060 al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B37_1:
	rdx = rcx
// DataOut: al fs r10 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000060 al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - (fp - 0x00000000000000A0)
	SCZO = cond(rdx)
// DataOut: fs r10 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000060 al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B44:
	rcx = (uint64) Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B66_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r14 r15 r8 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B6D_1:
	r10 = rcx
// DataOut: al fs r10 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = fp - 0x0000000000000060
	r10 = r10 - 0x03 - C
	r10 = r10 - (fp - 0x0000000000000060)
	SCZO = cond(qwLocB8 - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r14 r15 r8 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(64)

l0000000000411CBC:
	rax = rax + qwLocB8
	SCZO = cond(rax)
	rdi = r14
	qwLocA8 = r10
	qwLocB0 = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	qwLocB8 = rcx
	rax = realloc(rdi, rsi)
	r10 = qwLocA8
	r13 = rax
	rdx = qwLocB0
// DataOut: fs r10 r13 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(64)

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	qwLocA8 = rdx
	qwLocB0 = r10
	qwLocB8 = rcx
	rax = malloc(rdi)
	r10 = qwLocB0
	rdx = qwLocA8
	r13 = rax
// DataOut: fs r10 r13 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(64)

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: fs r10 r13 r14 r15 r8 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(64)

l0000000000411BC1:
	r14 = qwLocB8
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = fp - 0x00000000000000A0
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, fp - 0x00000000000000A0)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = fp - 0x0000000000000060
	r14 = r13
	rax = strcpy(rdi, fp - 0x0000000000000060)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: eax fs r10 r13 r14 r15 r8 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8; depth: 200)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: edi fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)

l0000000000411C9C:
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: fs r10 r13 r14 r15 r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411C28:
	r14 = 0x0000000000416919
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> rbp:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl fs r10 r13 r14 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411973:
	rsi = r14
	rdi = rbx
	eax = strcmp(rdi, rsi)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411950:
	rdi = r14
	eax = strlen(rdi)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	eax = strlen(rdi)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000041198F:
	rdi = r14
	eax = strlen(rdi)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r10 r13 r14 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r10 r13 r14 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs r10 r13 r14 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:0xFC -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004119A8:
	rcx = Mem0[rsp + 0x0000000000000098:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: fs r10 r13 r14 r15 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:0xFC -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411CFD:
	__stack_chk_fail()
// DataOut: fs r10 r13 r14 r15 r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411D02:
	rdi = r14
	r14 = 0x0000000000416919
	free(rdi)
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l00000000004119C2:
	rsp = rsp + 168
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r10 r12d r15 r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

fn0000000000411900_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r10 (=> r10Out)
	use r12d (=> r12dOut)
	use r15 (=> r15Out)
// DataOut: r10 r12d r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> r15:<invalid> rsi:<invalid> eax:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15

l0000000000411C14:
// DataOut: edi fs r10 r13 r14 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000A0 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):r12 -12(fp):r13 -8(fp):r14 -4(fp):r15
// LocalsOut: fp(64) Local -00B8(0)



word32 fn0000000000411D30(word64 rdi, word64 r8, word64 r13, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut: eax ebx r12 rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411D30_entry:
	*rsiOut = rsi
// DataOut: fs r10 r13 r14 r15 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word64 rsp_125 = fp - 0x000000000000000C
	word32 eax_14 = fileno(rdi)
	word64 rdi_126 = rdi
	branch eax_14 < 0x00000000 l0000000000411D9F
// DataOut: eax fs r10 r13 r14 r15 r8 rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411D43:
	word64 rsp_83
	word64 r12_84
	word64 rbp_85
	word64 rdi_87
	byte SZO_89
	byte C_90
	byte S_91
	byte Z_92
	word64 rax_93
	word32 r12d_94
	word32 esi_97
	word64 rsi_98
	word32 edx_99
	word64 rdx_100
	word32 edi_101
	byte SCZO_102
	word32 ebx_103
	word64 r13_131
	word64 r8_132
	word32 eax_137
	word64 rbx_120
	call __freading (retsize: 8; depth: 20)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_14,ebx_13,edi_21,edx,esi,r12,r12d,r13,r8,rax_16,rbp,rbx_12,rdi_20,rdx,rsi,rsp_8,S_18,SCZO,SZO_17,Z
		defs: C_90,eax_88,ebx_103,edi_101,edx_99,esi_97,r12_84,r12d_94,r13_96,r8_95,rax_93,rbp_85,rbx_86,rdi_87,rdx_100,rsi_98,rsp_83,S_91,SCZO_102,SZO_89,Z_92
	branch eax_137 != 0x00000000 l0000000000411D80
// DataOut: eax fs r10 r13 r14 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000411D80:
	word32 eax_174 = fileno(rbx_120)
	word64 r12_183
	word64 rbp_184
	word64 rdi_186
	byte SZO_188
	byte C_189
	byte S_190
	byte Z_191
	word64 rax_192
	word32 r12d_193
	word32 esi_196
	word64 rsi_197
	word32 edx_198
	word64 rdx_199
	word32 edi_200
	byte SCZO_201
	word32 ebx_202
	call lseek (retsize: 8; depth: 20)
		uses: C_179,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_174,ebx_103,edi_101,edx_99,esi_177,r12_84,r12d_94,r13_96,r8_95,rax_175,rbp_85,rbx_86,rdi_181,rdx_180,rsi_176,rsp_83,S_91,SCZO_102,SZO_178,Z_105
		defs: C_189,eax_187,ebx_202,edi_200,edx_198,esi_196,r12_183,r12d_193,r13_195,r8_194,rax_192,rbp_184,rbx_185,rdi_186,rdx_199,rsi_197,rsp_182,S_190,SCZO_201,SZO_188,Z_191
	branch rax_192 != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: eax fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000411D4C:
	word64 rsi_145
	branch fn0000000000411DB0(eax_137, rbx_120, out rsp_125, out rsi_145) == 0x00000000 l0000000000411D9C
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000411D9C:
	rdi_126 = rbx_120
// DataOut: fs r10 r13 r14 r15 r8 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000411D9F:
	word64 rsp_74 = rsp_125 + 0x0000000000000008
	word32 ebx_73
	*ebxOut = (word32) Mem0[rsp_125:word64]
	word64 rbp_75
	*rbpOut = Mem0[rsp_74:word64]
	word64 r12_77
	*r12Out = Mem0[rsp_74 + 0x0000000000000008:word64]
	word64 rsp_79
	*rspOut = rsp_74 + 0x0000000000000010
	return fclose(rdi_126)
// DataOut: eax ebx fs r10 r12 r13 r14 r15 r8 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000411D58:
	__errno_location()
	word32 r12d_152 = (word32) (uint64) Mem0[r8_132:word32]
	word32 eax_155 = fclose(rbx_120)
	branch r12d_152 == 0x00000000 l0000000000411D79
// DataOut: eax fs r10 r12d r13 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000411D70:
	Mem170[r13_131:word32] = r12d_152
	eax_155 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r13 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

l0000000000411D79:
	word32 ebx_163
	*ebxOut = (word32) Mem0[rsp_125:word64]
	word64 rbp_165
	*rbpOut = Mem0[rsp_125 + 0x0000000000000008:word64]
	word64 r12_167
	*r12Out = Mem0[rsp_125 + 0x0000000000000010:word64]
	word64 rsp_169
	*rspOut = rsp_125 + 0x0000000000000018
	return eax_155
// DataOut: eax ebx fs r10 r12 r13 r14 r15 r8 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12

fn0000000000411D30_exit:
// DataOut: eax ebx r12 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rbp:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):r12



word32 fn0000000000411DB0(word32 eax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: eax rsi rsp
// Trashed: SCZO ah al ax bh bl bx dh dl dx eax ebx edx esi esp rax rbx rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411DB0_entry:
	*rsiOut = rsi
// DataOut: eax fs r10 r13 r14 r15 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	word64 rbx_34 = rdi
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: eax fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB9:
	word64 rsp_41
	word64 rdi_42
	byte SZO_43
	byte C_44
	byte Z_46
	word32 eax_47
	word32 edx_48
	word64 rdx_49
	word32 esi_50
	word64 rsi_51
	call __freading (retsize: 8; depth: 12)
		uses: C_5,dwLoc04_8,eax,edx,esi,qwLoc04,rbx_9,rdi,rdx,rsi,rsp_6,SZO_3,Z_4
		defs: C_44,eax_47,edx_48,esi_50,rbx_45,rdi_42,rdx_49,rsi_51,rsp_41,SZO_43,Z_46
	branch eax_47 != 0x00000000 l0000000000411DD0
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD0:
	branch (Mem0[rbx_34:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: fs r10 r13 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD8:
	word64 rsi_66
	word64 rsp_70
	*rspOut = fn0000000000411DF0(0x00000001, rbx_34, out rsi_66) + 0x0000000000000008
	return fflush(rbx_34)
// DataOut: eax fs r10 r13 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000411DC2:
	word64 rsp_38
	*rspOut = fp + 0x0000000000000004
	return fflush(rbx_34)
// DataOut: eax fs r10 r13 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:rdi eax:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn0000000000411DF0(word32 edx, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi
// LiveOut: rsi rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi esp rax rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DF0_entry:
// DataOut: edx fs r10 r13 r14 r15 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	word64 rax_9 = Mem0[rdi + 0x0000000000000008:word64]
	branch Mem0[rdi + 0x0000000000000010:word64] == rax_9 l0000000000411E10
// DataOut: edx fs r10 r13 r14 r15 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	branch Mem0[rdi + 0x0000000000000028:word64] != Mem0[rdi + 0x0000000000000020:word64] l0000000000411E02
// DataOut: edx fs r10 r13 r14 r15 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: edx fs r10 r13 r14 r15 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word32 eax_63 = fileno(rdi)
	word64 rsp_68
	word64 rbx_69
	word64 rdi_70
	byte SCZO_71
	word64 rax_72
	byte Z_73
	word32 edx_74
	word64 rsi_75
	word32 eax_76
	word64 rdx_77
	word32 edi_78
	byte SZO_79
	byte C_80
	call lseek (retsize: 8; depth: 28)
		uses: C,dwLoc04_4,dwLoc08_61,eax_63,edi,edx,qwLoc04,qwLoc14_62,rax_64,rbx_6,rdi_67,rdx_65,rsi_66,rsp_7,SCZO_59,SZO,Z_60
		defs: C_80,eax_76,edi_78,edx_74,rax_72,rbx_69,rdi_70,rdx_77,rsi_75,rsp_68,SCZO_71,SZO_79,Z_73
	branch rax_72 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: fs r10 r13 r14 r15 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem91[rbx_69:word32] = Mem0[rbx_69:word32] & 0xFFFFFFEF
	Mem93[rbx_69 + 0x0000000000000090:word64] = rax_72
// DataOut: fs r10 r13 r14 r15 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	return fp + 0x0000000000000004
// DataOut: fs r10 r13 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx

l0000000000411E02:
	word64 rsp_43
	word64 rbx_44
	word64 rdi_45
	byte SCZO_46
	word64 rax_47
	byte Z_48
	word32 edx_49
	word64 rsi_50
	word32 eax_51
	word64 rdx_52
	word32 edi_53
	byte SZO_54
	byte C_55
	call fseeko (retsize: 8;)
		uses: C,dwLoc04_4,dwLoc08,eax,edi,edx,qwLoc04,qwLoc14,rax_9,rbx_32,rdi_30,rdx,rsi,rsp_33,SCZO_29,SZO,Z_11
		defs: C_55,eax_51,edi_53,edx_49,rax_47,rbx_44,rdi_45,rdx_52,rsi_50,rsp_43,SCZO_46,SZO_54,Z_48
	return rsp_43
// DataOut: fs r10 r13 r14 r15 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx

fn0000000000411DF0_exit:
// DataOut: rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx



void fn0000000000411EE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut: ebx fs r10 r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: ebx fs r10 r11 r15 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
// DataOut: ebx fs r10 r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
// DataOut: ebx fs r10 r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
	word64 rsp_10
	word64 rax_11
	byte SZO_12
	byte C_13
	byte Z_14
	word64 rdx_15
	word32 esi_16
	word64 rsi_17
	word32 edx_18
	call __cxa_atexit (retsize: 8; depth: 8)
		uses: C_9,esi_7,rax_2,rsi_6,rsp_1,SZO_8,Z_4
		defs: C_13,edx_18,esi_16,rax_11,rdx_15,rsi_17,rsp_10,SZO_12,Z_14
	return
// DataOut: ebx fs r10 r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



