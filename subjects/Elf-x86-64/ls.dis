// fn0000000000402168
// Return size: 8
void fn0000000000402168()
fn0000000000402168_entry:
	// succ:  l0000000000402168
l0000000000402168:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000619FF8:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040217D
	// succ:  l0000000000402178 l000000000040217D
l0000000000402178:
	call __gmon_start__ (retsize: 8;)
	// succ:  l000000000040217D
l000000000040217D:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000402168_exit
fn0000000000402168_exit:


// fn00000000004022EC
// Return size: 0
void fn00000000004022EC()
fn00000000004022EC_entry:
	// succ:  l00000000004022EC
l00000000004022EC:
	rsp = fp
	al = Mem0[0x217DCA25FFFFFFFE:byte]
	v6 = Mem0[rax + 0x0000000000000015:byte] + ch
	Mem0[rax + 0x0000000000000015:byte] = v6
	SCZO = cond(v6)
	v8 = Mem0[rax:byte] + al
	Mem0[rax:byte] = v8
	SCZO = cond(v8)
	cl = cl + ch
	SCZO = cond(cl)
fn00000000004022EC_exit:


// fn0000000000404616
// Return size: 0
void fn0000000000404616()
fn0000000000404616_entry:
	goto l0000000000404616
	// succ:  l0000000000404616
l0000000000402985:
	abort()
l0000000000403301:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	r12d = Mem0[0x000000000061A620:word64]
	branch Test(NE,Z) l0000000000403AC5
	// succ:  l0000000000403315 l0000000000403AC5
l0000000000403315:
	SCZO = cond(Mem0[0x000000000061B110:word32] - 0x00000001)
	branch Test(EQ,Z) l0000000000403A39
	// succ:  l0000000000403322 l0000000000403A39
l0000000000403322:
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	branch Test(NE,Z) l00000000004039EF
	// succ:  l000000000040332F l00000000004039EF
l000000000040332F:
	eax = Mem0[0x000000000061B148:word32]
	SCZO = cond(eax - 0x00000004)
	branch Test(EQ,Z) l000000000040377A
	// succ:  l000000000040333E l000000000040377A
l000000000040333E:
	SCZO = cond(eax - 0x00000002)
	branch Test(EQ,Z) l000000000040377A
	// succ:  l0000000000403347 l000000000040377A
l0000000000403347:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000000)
	branch Test(EQ,Z) l000000000040377A
	// succ:  l0000000000403354 l000000000040377A
l0000000000403354:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(NE,Z) l000000000040377A
	// succ:  l0000000000403361 l000000000040377A
l0000000000403361:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(NE,Z) l000000000040377A
	// succ:  l000000000040336E l000000000040377A
l000000000040336E:
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	Mem0[0x000000000061B0C1:byte] = 0x00
	eax = 0x00000001
	branch Test(NE,Z) l00000000004033A0
	// succ:  l0000000000403383 l00000000004033A0
l0000000000403383:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(NE,Z) l00000000004033A0
	// succ:  l000000000040338C l00000000004033A0
l000000000040338C:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000000)
	branch Test(NE,Z) l00000000004033A0
	// succ:  l0000000000403395 l00000000004033A0
l0000000000403395:
	SCZO = cond(Mem0[0x000000000061B10C:byte] - 0x00)
	branch Test(NE,Z) l00000000004033A0
	// succ:  l000000000040339E l00000000004033A0
l000000000040339E:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00000000004033A0
l00000000004033A0:
	Mem0[0x000000000061B0C0:byte] = al
	v27 = Mem0[0x000000000061B0C0:byte] & 0x01
	Mem0[0x000000000061B0C0:byte] = v27
	SZO = cond(Mem0[0x000000000061B0C0:byte])
	C = false
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(EQ,Z) l00000000004033E8
	// succ:  l00000000004033B6 l00000000004033E8
l00000000004033B6:
	eax = 0x004021F0
	ecx = 0x00402640
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = 0x0061AFC0
	call _obstack_begin (retsize: 8;)
	eax = 0x004021F0
	ecx = 0x00402640
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = 0x0061AF60
	call _obstack_begin (retsize: 8;)
	// succ:  l00000000004033E8
l00000000004033E8:
	r13d = ebx
	edi = 0x00004B00
	Mem0[0x000000000061B1B8:word64] = 0x0000000000000064
	r13d = r13d - r12d
	SCZO = cond(r13d)
	call fn0000000000410C40 (retsize: 8;)
	Mem0[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem0[0x000000000061B1C0:word64] = rax
	call fn0000000000404DD0 (retsize: 8;)
	SZO = cond(r13d & r13d)
	C = false
	branch Test(LE,SZO) l00000000004042A0
	// succ:  l0000000000403423 l00000000004042A0
l0000000000403423:
	rax = (int64) r12d
	rbp = rbp + 0x0000000000000000 + rax * 0x0000000000000008
	// succ:  l000000000040342B
l000000000040342B:
	rdi = Mem0[rbp + 0x0000000000000000:word64]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	r12d = r12d + 0x0000000000000001
	SCZO = cond(r12d)
	ecx = 0x00416919
	edx = 0x00000001
	rbp = rbp + 0x0000000000000008
	SCZO = cond(rbp)
	call fn0000000000407EA0 (retsize: 8;)
	SCZO = cond(ebx - r12d)
	branch Test(GT,SZO) l000000000040342B
	// succ:  l000000000040344D l000000000040342B
l000000000040344D:
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - 0x0000000000000000)
	branch Test(NE,Z) l0000000000404200
	// succ:  l000000000040345B l0000000000404200
l000000000040345B:
	rax = Mem0[0x000000000061B190:word64]
	r13d = r13d - 0x0000000000000001
	SCZO = cond(r13d)
	Mem0[rsp + 0x0000000000000018:word64] = rax
	branch Test(GT,SZO) l00000000004034D2
	// succ:  l000000000040346D l00000000004034D2
l000000000040346D:
	goto l0000000000404385
	// succ:  l0000000000404385
l0000000000403478:
	edx = 0x00000005
	esi = 0x00415CE8
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	edi = (word32) Mem0[rsp + 0x000000000000002F:byte]
	rdx = r14
	rsi = rax
	call fn0000000000405810 (retsize: 8;)
	rdi = r13
	call closedir (retsize: 8;)
	// succ:  l00000000004034A1
l00000000004034A1:
	rbx = Mem0[rsp + 0x0000000000000018:word64]
	rdi = Mem0[rbx:word64]
	free(rdi)
	rdi = Mem0[rbx + 0x0000000000000008:word64]
	free(rdi)
	rdi = rbx
	free(rdi)
	Mem0[0x000000000061B0D0:byte] = 0x01
	// succ:  l00000000004034C6
l00000000004034C6:
	rax = Mem0[0x000000000061B190:word64]
	Mem0[rsp + 0x0000000000000018:word64] = rax
	// succ:  l00000000004034D2
l00000000004034D2:
	SCZO = cond(Mem0[rsp + 0x0000000000000018:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l00000000004040B5
	// succ:  l00000000004034DE l00000000004040B5
l00000000004034DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	SCZO = cond(Mem0[0x000000000061B1C8:word64] - 0x0000000000000000)
	rax = Mem0[rcx + 0x0000000000000018:word64]
	Mem0[0x000000000061B190:word64] = rax
	branch Test(EQ,Z) l0000000000403FB5
	// succ:  l00000000004034FC l0000000000403FB5
l00000000004034FC:
	r14 = Mem0[r9:word64]
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l0000000000403FC2
	// succ:  l0000000000403508 l0000000000403FC2
l0000000000403508:
	rax = Mem0[rsp + 0x0000000000000018:word64]
	ecx = (word32) Mem0[rax + 0x0000000000000010:byte]
	rbx = Mem0[rax + 0x0000000000000008:word64]
	Mem0[rsp + 0x000000000000002F:byte] = cl
	rax = __errno_location()
	rdi = r14
	Mem0[rax:word32] = 0x00000000
	r12 = rax
	call opendir (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	branch Test(EQ,Z) l0000000000404195
	// succ:  l000000000040353B l0000000000404195
l000000000040353B:
	SCZO = cond(Mem0[0x000000000061B1C8:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l00000000004035FF
	// succ:  l0000000000403549 l00000000004035FF
l0000000000403549:
	rdi = rax
	call dirfd (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	branch Test(SG,S) l0000000000403E95
	// succ:  l000000000040355E l0000000000403E95
l000000000040355E:
	esi = eax
	edi = 0x00000001
	call __fxstat (retsize: 8;)
	eax = eax >>u 0x0000001F
	SCZO = cond(eax)
	// succ:  l000000000040356D
l000000000040356D:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000403478
	// succ:  l0000000000403575 l0000000000403478
l0000000000403575:
	rcx = Mem0[rsp + 0x0000000000000048:word64]
	rdx = Mem0[rsp + 0x0000000000000040:word64]
	edi = 0x00000010
	Mem0[rsp + 0x0000000000000010:word64] = rcx
	Mem0[rsp + 0x0000000000000008:word64] = rdx
	call fn0000000000410C40 (retsize: 8;)
	rcx = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000008:word64]
	rsi = rax
	rdi = Mem0[0x000000000061B1C8:word64]
	rbp = rax
	Mem0[rax:word64] = rcx
	Mem0[rax + 0x0000000000000008:word64] = rdx
	call fn000000000040BB50 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004043BB
	// succ:  l00000000004035BF l00000000004043BB
l00000000004035BF:
	SCZO = cond(rbp - rax)
	branch Test(NE,Z) l0000000000403EE2
	// succ:  l00000000004035C8 l0000000000403EE2
l00000000004035C8:
	rax = Mem0[0x000000000061AF18:word64]
	rdx = Mem0[0x000000000061AF20:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	SCZO = cond(rdx - 0x000000000000000F)
	branch Test(LE,SZO) l0000000000404064
	// succ:  l00000000004035E3 l0000000000404064
l00000000004035E3:
	rdx = rax + 0x0000000000000010
	Mem0[0x000000000061AF18:word64] = rdx
	rdx = Mem0[rsp + 0x0000000000000040:word64]
	Mem0[rax + 0x0000000000000008:word64] = rdx
	rdx = Mem0[rsp + 0x0000000000000048:word64]
	Mem0[rax:word64] = rdx
	// succ:  l00000000004035FF
l00000000004035FF:
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	branch Test(NE,Z) l0000000000403615
	// succ:  l0000000000403608 l0000000000403615
l0000000000403608:
	SCZO = cond(Mem0[0x000000000061B0D0:byte] - 0x00)
	branch Test(EQ,Z) l00000000004036D6
	// succ:  l0000000000403615 l00000000004036D6
l0000000000403615:
	SCZO = cond(Mem0[0x000000000061A3C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000403646
	// succ:  l000000000040361E l0000000000403646
l000000000040361E:
	rdi = Mem0[0x000000000061A610:word64]
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l00000000004045E4
	// succ:  l0000000000403633 l00000000004045E4
l0000000000403633:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
	// succ:  l000000000040363E
l000000000040363E:
	v38 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v38
	SCZO = cond(v38)
	// succ:  l0000000000403646
l0000000000403646:
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	Mem0[0x000000000061A3C0:byte] = 0x00
	branch Test(NE,Z) l0000000000403F2E
	// succ:  l000000000040365A l0000000000403F2E
l000000000040365A:
	SZO = cond(rbx & rbx)
	C = false
	rdx = Mem0[0x000000000061B0E0:word64]
	rdi = Mem0[0x000000000061A610:word64]
	branch Test(NE,Z) l000000000040366F
	// succ:  l000000000040366B_1 l000000000040366F
l000000000040366B_1:
	rbx = r14
	// succ:  l000000000040366F
l000000000040366F:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	rsi = rbx
	call fn00000000004052D0 (retsize: 8;)
	v40 = Mem0[0x000000000061B018:word64] + rax
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(EQ,Z) l00000000004036B3
	// succ:  l0000000000403689 l00000000004036B3
l0000000000403689:
	rax = Mem0[0x000000000061AF78:word64]
	rdx = rax + 0x0000000000000008
	SCZO = cond(Mem0[0x000000000061AF80:word64] - rdx)
	branch Test(ULT,C) l000000000040409A
	// succ:  l00000000004036A1 l000000000040409A
l00000000004036A1:
	rdx = Mem0[0x000000000061B018:word64]
	Mem0[rax:word64] = rdx
	v41 = Mem0[0x000000000061AF78:word64] + 0x0000000000000008
	Mem0[0x000000000061AF78:word64] = v41
	SCZO = cond(v41)
	// succ:  l00000000004036B3
l00000000004036B3:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000002
	esi = 0x00000001
	edi = 0x0041393B
	call fwrite_unlocked (retsize: 8;)
	v48 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v48
	SCZO = cond(v48)
	// succ:  l00000000004036D6
l00000000004036D6:
	call fn0000000000404DD0 (retsize: 8;)
	eax = (word32) Mem0[rsp + 0x000000000000002F:byte]
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[rsp + 0x0000000000000010:word32] = eax
	// succ:  l00000000004036F0
l00000000004036F0:
	Mem0[r12:word32] = 0x00000000
	rdi = r13
	call readdir (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000403CC0
	// succ:  l000000000040370C l0000000000403CC0
l000000000040370C:
	rbx = rax + 0x0000000000000013
	eax = Mem0[0x000000000061B108:word32]
	SCZO = cond(eax - 0x00000002)
	branch Test(EQ,Z) l0000000000403C78
	// succ:  l000000000040371F l0000000000403C78
l000000000040371F:
	SCZO = cond(Mem0[rbp + 0x0000000000000013:byte] - 0x2E)
	branch Test(EQ,Z) l0000000000403C58
	// succ:  l0000000000403729 l0000000000403C58
l0000000000403729:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000403C78
	// succ:  l0000000000403731 l0000000000403C78
l0000000000403731:
	r15 = Mem0[0x000000000061B0F8:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(NE,Z) l0000000000403755
	// succ:  l000000000040373D l0000000000403755
l000000000040373D:
	goto l0000000000403C78
	// succ:  l0000000000403C78
l0000000000403748:
	r15 = Mem0[r15 + 0x0000000000000008:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(EQ,Z) l0000000000403C78
	// succ:  l0000000000403755 l0000000000403C78
l0000000000403755:
	rdi = Mem0[rdi:word64]
	edx = 0x00000004
	rsi = rbx
	rax = DPB(rax, fnmatch(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000403748
	rdi = Mem0[rdi:word64]
	edx = 0x00000004
	rsi = rbx
	rax = DPB(rax, fnmatch(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000403748
	// succ:  l0000000000403769 l0000000000403748
l0000000000403769:
l0000000000403770:
	call fn0000000000406490 (retsize: 8;)
	goto l00000000004036F0
	// succ:  l00000000004036F0
l000000000040377A:
	Mem0[0x000000000061B0C1:byte] = 0x01
	goto l000000000040339E
	// succ:  l000000000040339E
l00000000004038A8:
	rdi = Mem0[0x000000000061A3D0:word64]
	esi = 0x00413766
	rax = strstr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000404484
	// succ:  l00000000004038C2 l0000000000404484
l00000000004038C2:
	Mem0[0x000000000061A748:word64] = 0x0000000000000005
	// succ:  l00000000004038CD
l00000000004038CD:
	r14 = Mem0[0x000000000061A748:word64]
	ebp = 0x0061A760
	Mem0[0x000000000061A748:word64] = 0x0000000000000000
	esp = 0x0002000E
	// succ:  l00000000004038EB
l00000000004038EB:
	edi = r12d
	Mem0[rsp + 0x0000000000000040:word64] = r14
	call nl_langinfo (retsize: 8;)
	rcx = Mem0[rsp + 0x0000000000000020:word64]
	r9d = r9d ^ r9d
	SZO = cond(r9d)
	C = false
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	edx = 0x000000A1
	rsi = r13
	rdi = rax
	call fn000000000040CDC0 (retsize: 8;)
	SCZO = cond(r8 - 0x00000000000000A0)
	branch Test(UGT,CZ) l0000000000404356
	// succ:  l000000000040391F l0000000000404356
l000000000040391F:
	rax = Mem0[rsp + 0x0000000000000040:word64]
	SCZO = cond(Mem0[0x000000000061A748:word64] - rax)
	branch Test(ULT,C) l0000000000403933
	// succ:  l000000000040392B_1 l0000000000403933
l000000000040392B_1:
	rax = Mem0[0x000000000061A748:word64]
	// succ:  l0000000000403933
l0000000000403933:
	r12d = r12d + 0x0000000000000001
	SCZO = cond(r12d)
	r13 = r13 + 161
	SCZO = cond(r13)
	SCZO = cond(r12d - 0x000000000002001A)
	Mem0[0x000000000061A748:word64] = rax
	branch Test(NE,Z) l00000000004038EB
	// succ:  l000000000040394E l00000000004038EB
l000000000040394E:
	SCZO = cond(rax - r14)
	branch Test(ULT,C) l00000000004038CD
	// succ:  l0000000000403957 l00000000004038CD
l0000000000403957:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000403301
	// succ:  l0000000000403960 l0000000000403301
l0000000000403960:
	goto l0000000000404361
	// succ:  l0000000000404361
l00000000004039EF:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	eax = 0x004049D0
	ecx = 0x00404990
	edx = 0x00404980
	edi = 0x0000001E
	call fn000000000040B400 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[0x000000000061B1C8:word64] = rax
	branch Test(EQ,Z) l00000000004043BB
	// succ:  l0000000000403A1B l00000000004043BB
l0000000000403A1B:
	eax = 0x004021F0
	ecx = 0x00402640
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = 0x0061AF00
	call _obstack_begin (retsize: 8;)
	goto l000000000040332F
	// succ:  l000000000040332F
l0000000000403A39:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	eax = 0x00000002
	branch Test(NE,Z) l0000000000403A5F
	// succ:  l0000000000403A47 l0000000000403A5F
l0000000000403A47:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000403A5F
	// succ:  l0000000000403A50 l0000000000403A5F
l0000000000403A50:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFFE
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000004
	SCZO = cond(eax)
	// succ:  l0000000000403A5F
l0000000000403A5F:
	Mem0[0x000000000061B110:word32] = eax
	goto l0000000000403322
	// succ:  l0000000000403322
l0000000000403AC5:
	edi = 0x0041397F
	rax = getenv(rdi)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + 0x0000000000000038:word64] = rax
	branch Test(EQ,Z) l0000000000403AE2
	// succ:  l0000000000403AD9 l0000000000403AE2
l0000000000403AD9:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l00000000004044FA
	// succ:  l0000000000403AE2 l00000000004044FA
l0000000000403AE2:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000403315
	// succ:  l0000000000403AEF l0000000000403315
l0000000000403AEF:
	edi = 0x0000000D
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000403B2B
	// succ:  l0000000000403AFD l0000000000403B2B
l0000000000403AFD:
	edi = 0x0000000E
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000403B14
	// succ:  l0000000000403B0B l0000000000403B14
l0000000000403B0B:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000403B2B
	// succ:  l0000000000403B14 l0000000000403B2B
l0000000000403B14:
	edi = 0x0000000C
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000403B32
	// succ:  l0000000000403B22 l0000000000403B32
l0000000000403B22:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000000)
	branch Test(NE,Z) l0000000000403B32
	// succ:  l0000000000403B2B l0000000000403B32
l0000000000403B2B:
	Mem0[0x000000000061B115:byte] = 0x01
	// succ:  l0000000000403B32
l0000000000403B32:
	edi = 0x00000001
	call tcgetpgrp (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000403315
	// succ:  l0000000000403B44 l0000000000403315
l0000000000403B44:
	edi = 0x0061B040
	r13d = r13d ^ r13d
	SZO = cond(r13d)
	C = false
	call sigemptyset (retsize: 8;)
	// succ:  l0000000000403B51
l0000000000403B51:
	r14d = Mem0[r13 + 0x0000000000412CC0:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = r14d
	call sigaction (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x0000000000000040:word64] - 0x0000000000000001)
	branch Test(EQ,Z) l0000000000403B7C
	// succ:  l0000000000403B6F l0000000000403B7C
l0000000000403B6F:
	esi = r14d
	edi = 0x0061B040
	call sigaddset (retsize: 8;)
	// succ:  l0000000000403B7C
l0000000000403B7C:
	r13 = r13 + 0x0000000000000004
	SCZO = cond(r13)
	SCZO = cond(r13 - 0x0000000000000030)
	branch Test(NE,Z) l0000000000403B51
	// succ:  l0000000000403B86 l0000000000403B51
l0000000000403B86:
	rdi = rsp + 0x0000000000000048
	esi = 0x0061B040
	ecx = 0x00000020
	// succ:  l0000000000403B95
l0000000000403B95:
	branch rcx == 0x0000000000000000 l0000000000403B97
	// succ:  l0000000000403B95_1 l0000000000403B97
l0000000000403B95_1:
	v53 = Mem0[rsi:word32]
	Mem0[rdi:word32] = v53
	rsi = rsi + 0x0000000000000004
	rdi = rdi + 0x0000000000000004
	rcx = rcx - 0x0000000000000001
	goto l0000000000403B95
	// succ:  l0000000000403B95
l0000000000403B97:
	Mem0[rsp + 0x00000000000000C8:word32] = 0x10000000
	r13b = r13b ^ r13b
	SZO = cond(r13b)
	C = false
	esi = 0x004049B0
	// succ:  l0000000000403BAB
l0000000000403BAB:
	r15d = Mem0[r13 + 0x0000000000412CC0:word64]
	edi = 0x0061B040
	esi = r15d
	call sigismember (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000403BE4
	// succ:  l0000000000403BC3 l0000000000403BE4
l0000000000403BC3:
	rsi = Mem0[rsp + 0x0000000000000020:word64]
	SCZO = cond(r15d - 0x0000000000000014)
	eax = 0x004057F0
	branch Test(EQ,Z) l0000000000403BD5
	// succ:  l0000000000403BD1_1 l0000000000403BD5
l0000000000403BD1_1:
	rax = r14
	// succ:  l0000000000403BD5
l0000000000403BD5:
	edi = r15d
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x0000000000000040:word64] = rax
	call sigaction (retsize: 8;)
	// succ:  l0000000000403BE4
l0000000000403BE4:
	r13 = r13 + 0x0000000000000004
	SCZO = cond(r13)
	SCZO = cond(r13 - 0x0000000000000030)
	branch Test(NE,Z) l0000000000403BAB
	// succ:  l0000000000403BEE l0000000000403BAB
l0000000000403BEE:
	goto l0000000000403315
	// succ:  l0000000000403315
l0000000000403C58:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000403770
	// succ:  l0000000000403C60 l0000000000403770
l0000000000403C60:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbp + 0x0000000000000014:byte] - 0x2E)
	al = Test(EQ,Z)
	SCZO = cond(Mem0[rbp + 0x0000000000000014 + rax:byte] - 0x00)
	branch Test(EQ,Z) l0000000000403770
	// succ:  l0000000000403C74 l0000000000403770
l0000000000403C74:
l0000000000403C78:
	r15 = Mem0[0x000000000061B100:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(NE,Z) l0000000000403C9D
	// succ:  l0000000000403C84 l0000000000403C9D
l0000000000403C84:
	goto l0000000000403E20
	// succ:  l0000000000403E20
l0000000000403C90:
	r15 = Mem0[r15 + 0x0000000000000008:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(EQ,Z) l0000000000403E20
	// succ:  l0000000000403C9D l0000000000403E20
l0000000000403C9D:
	rdi = Mem0[rdi:word64]
	edx = 0x00000004
	rsi = rbx
	rax = DPB(rax, fnmatch(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000403C90
	rdi = Mem0[rdi:word64]
	edx = 0x00000004
	rsi = rbx
	rax = DPB(rax, fnmatch(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000403C90
	// succ:  l0000000000403CB1 l0000000000403C90
l0000000000403CB1:
	goto l0000000000403770
	// succ:  l0000000000403770
l0000000000403CC0:
	edx = Mem0[r12:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000403CF3
	// succ:  l0000000000403CC8 l0000000000403CF3
l0000000000403CC8:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x004139B1
	rax = dcgettext(rdi, rsi, rdx)
	edi = Mem0[rsp + 0x0000000000000010:word32]
	rdx = r14
	rsi = rax
	call fn0000000000405810 (retsize: 8;)
	SCZO = cond(Mem0[r12:word32] - 0x0000004B)
	branch Test(EQ,Z) l0000000000403770
	// succ:  l0000000000403CF3 l0000000000403770
l0000000000403CF3:
	rdi = r13
	call closedir (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000403EBC
	// succ:  l0000000000403D03 l0000000000403EBC
l0000000000403D03:
	call fn0000000000404E80 (retsize: 8;)
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	branch Test(NE,Z) l0000000000403EAA
	// succ:  l0000000000403D15 l0000000000403EAA
l0000000000403D15:
	eax = Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000403D2C
	// succ:  l0000000000403D1F l0000000000403D2C
l0000000000403D1F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000403E00
	// succ:  l0000000000403D2C l0000000000403E00
l0000000000403D2C:
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l0000000000403F8D
	// succ:  l0000000000403D39 l0000000000403F8D
l0000000000403D39:
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x004139DB
	rax = dcgettext(rdi, rsi, rdx)
	rsi = Mem0[0x000000000061A610:word64]
	rbx = rax
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rdi = rbx
	rax = strlen(rdi)
	rdi = Mem0[0x000000000061A610:word64]
	v42 = Mem0[0x000000000061B018:word64] + rax
	Mem0[0x000000000061B018:word64] = v42
	SCZO = cond(v42)
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l00000000004044EB
	// succ:  l0000000000403D80 l00000000004044EB
l0000000000403D80:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x20
	// succ:  l0000000000403D8B
l0000000000403D8B:
	r8 = Mem0[0x000000000061B138:word64]
	edx = Mem0[0x000000000061B140:word32]
	rsi = rsp + 0x00000000000000E0
	rdi = Mem0[rsp + 0x0000000000000008:word64]
	ecx = 0x00000200
	v43 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v43
	SCZO = cond(v43)
	call fn000000000040BD70 (retsize: 8;)
	rsi = Mem0[0x000000000061A610:word64]
	rbx = rax
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rdi = rbx
	rax = strlen(rdi)
	rdi = Mem0[0x000000000061A610:word64]
	v44 = Mem0[0x000000000061B018:word64] + rax
	Mem0[0x000000000061B018:word64] = v44
	SCZO = cond(v44)
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l00000000004044DC
	// succ:  l0000000000403DED l00000000004044DC
l0000000000403DED:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
	// succ:  l0000000000403DF8
l0000000000403DF8:
	v45 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v45
	SCZO = cond(v45)
	// succ:  l0000000000403E00
l0000000000403E00:
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l00000000004034A1
	// succ:  l0000000000403E0E l00000000004034A1
l0000000000403E0E:
	call fn00000000004079F0 (retsize: 8;)
	goto l00000000004034A1
	// succ:  l00000000004034A1
l0000000000403E20:
	eax = (word32) Mem0[rbp + 0x0000000000000012:byte]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	eax = eax - 0x00000001
	SCZO = cond(eax)
	SCZO = cond(al - 0x0D)
	branch Test(UGT,CZ) l0000000000403E37
	// succ:  l0000000000403E2D l0000000000403E37
l0000000000403E2D:
	eax = (word32) al
	esi = Mem0[0x00412C00 + rax * 0x00000004:word32]
	// succ:  l0000000000403E37
l0000000000403E37:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rcx = r14
	rdi = rbx
	call fn0000000000407EA0 (retsize: 8;)
	v46 = Mem0[rsp + 0x0000000000000008:word64] + rax
	Mem0[rsp + 0x0000000000000008:word64] = v46
	SCZO = cond(v46)
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000001)
	branch Test(NE,Z) l0000000000403770
	// succ:  l0000000000403E56 l0000000000403770
l0000000000403E56:
	SCZO = cond(Mem0[0x000000000061B148:word32] - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000403770
	// succ:  l0000000000403E63 l0000000000403770
l0000000000403E63:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(NE,Z) l0000000000403770
	// succ:  l0000000000403E70 l0000000000403770
l0000000000403E70:
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	branch Test(NE,Z) l0000000000403770
	// succ:  l0000000000403E7D l0000000000403770
l0000000000403E7D:
	call fn0000000000404E80 (retsize: 8;)
	call fn00000000004079F0 (retsize: 8;)
	call fn0000000000404DD0 (retsize: 8;)
	goto l0000000000403770
	// succ:  l0000000000403770
l0000000000403E95:
	rsi = r14
	edi = 0x00000001
	call __xstat (retsize: 8;)
	eax = eax >>u 0x0000001F
	SCZO = cond(eax)
	goto l000000000040356D
	// succ:  l000000000040356D
l0000000000403EAA:
	esi = (word32) Mem0[rsp + 0x000000000000002F:byte]
	rdi = r14
	call fn0000000000405090 (retsize: 8;)
	goto l0000000000403D15
	// succ:  l0000000000403D15
l0000000000403EBC:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x004139C6
	rax = dcgettext(rdi, rsi, rdx)
	edi = (word32) Mem0[rsp + 0x000000000000002F:byte]
	rdx = r14
	rsi = rax
	call fn0000000000405810 (retsize: 8;)
	goto l0000000000403D03
	// succ:  l0000000000403D03
l0000000000403EE2:
	rdi = rbp
	free(rdi)
	rdi = r14
	call fn000000000040EAB0 (retsize: 8;)
	edx = 0x00000005
	rbx = rax
	esi = 0x00415D10
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	rcx = rbx
	rdx = rax
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call error (retsize: 8;)
	rdi = r13
	call closedir (retsize: 8;)
	Mem0[0x000000000061B030:word32] = 0x00000002
	goto l00000000004034A1
	// succ:  l00000000004034A1
l0000000000403F2E:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000002
	esi = 0x00000001
	edi = 0x00413771
	call fwrite_unlocked (retsize: 8;)
	v49 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v49
	SCZO = cond(v49)
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(EQ,Z) l000000000040365A
	// succ:  l0000000000403F5E l000000000040365A
l0000000000403F5E:
	rax = Mem0[0x000000000061AF78:word64]
	rdx = rax + 0x0000000000000008
	SCZO = cond(Mem0[0x000000000061AF80:word64] - rdx)
	branch Test(ULT,C) l000000000040407F
	// succ:  l0000000000403F76 l000000000040407F
l0000000000403F76:
	rdx = Mem0[0x000000000061B018:word64]
	Mem0[rax:word64] = rdx
	v50 = Mem0[0x000000000061AF78:word64] + 0x0000000000000008
	Mem0[0x000000000061AF78:word64] = v50
	SCZO = cond(v50)
	goto l000000000040365A
	// succ:  l000000000040365A
l0000000000403F8D:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000002
	esi = 0x00000001
	edi = 0x00413771
	call fwrite_unlocked (retsize: 8;)
	v47 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v47
	SCZO = cond(v47)
	goto l0000000000403D39
	// succ:  l0000000000403D39
l0000000000403FB5:
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r14 = Mem0[r8:word64]
	goto l0000000000403508
	// succ:  l0000000000403508
l0000000000403FC2:
	rax = Mem0[0x000000000061AF18:word64]
	rdx = rax
	rdx = rdx - Mem0[0x000000000061AF10:word64]
	SCZO = cond(rdx)
	SCZO = cond(edx - 0x0000000F)
	branch Test(ULE,CZ) l00000000004044C3
	// succ:  l0000000000403FDC l00000000004044C3
l0000000000403FDC:
	rdx = Mem0[0x000000000061AF20:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	SCZO = cond(rdx - 0xFFFFFFFFFFFFFFF0)
	branch Test(GE,SO) l0000000000404002
	// succ:  l0000000000403FEC l0000000000404002
l0000000000403FEC:
	esi = 0xFFFFFFF0
	edi = 0x0061AF00
	call _obstack_newchunk (retsize: 8;)
	rax = Mem0[0x000000000061AF18:word64]
	// succ:  l0000000000404002
l0000000000404002:
	rdx = rax - 0x0000000000000010
	rsi = Mem0[rsp + 0x0000000000000020:word64]
	rdi = Mem0[0x000000000061B1C8:word64]
	Mem0[0x000000000061AF18:word64] = rdx
	rdx = Mem0[rax - 0x0000000000000010:word64]
	rax = Mem0[rax - 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000040:word64] = rdx
	Mem0[rsp + 0x0000000000000048:word64] = rax
	call fn000000000040BB90 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000404287
	// succ:  l0000000000404039 l0000000000404287
l0000000000404039:
	rdi = rax
	free(rdi)
	rbx = Mem0[rsp + 0x0000000000000018:word64]
	rdi = Mem0[rbx:word64]
	free(rdi)
	rdi = Mem0[rbx + 0x0000000000000008:word64]
	free(rdi)
	rdi = rbx
	free(rdi)
	goto l00000000004034C6
	// succ:  l00000000004034C6
l0000000000404064:
	esi = 0x00000010
	edi = 0x0061AF00
	call _obstack_newchunk (retsize: 8;)
	rax = Mem0[0x000000000061AF18:word64]
	goto l00000000004035E3
	// succ:  l00000000004035E3
l000000000040407F:
	esi = 0x00000008
	edi = 0x0061AF60
	call _obstack_newchunk (retsize: 8;)
	rax = Mem0[0x000000000061AF78:word64]
	goto l0000000000403F76
	// succ:  l0000000000403F76
l000000000040409A:
	esi = 0x00000008
	edi = 0x0061AF60
	call _obstack_newchunk (retsize: 8;)
	rax = Mem0[0x000000000061AF78:word64]
	goto l00000000004036A1
	// succ:  l00000000004036A1
l00000000004040B5:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000404152
	// succ:  l00000000004040C2 l0000000000404152
l00000000004040C2:
	SCZO = cond(Mem0[0x000000000061B128:byte] - 0x00)
	branch Test(EQ,Z) l00000000004040ED
	// succ:  l00000000004040CB l00000000004040ED
l00000000004040CB:
	SCZO = cond(Mem0[0x000000000061A3E0:word64] - 0x0000000000000002)
	branch Test(EQ,Z) l00000000004042CB
	// succ:  l00000000004040D9 l00000000004042CB
l00000000004040D9:
	edi = 0x0061A3E0
	call fn0000000000406440 (retsize: 8;)
	edi = 0x0061A3F0
	call fn0000000000406440 (retsize: 8;)
	// succ:  l00000000004040ED
l00000000004040ED:
	rdi = Mem0[0x000000000061A610:word64]
	ebx = 0x00412CC0
	call fflush_unlocked (retsize: 8;)
	goto l000000000040410D
	// succ:  l000000000040410D
l0000000000404100:
	rbx = rbx + 0x0000000000000004
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0x0000000000412CF0)
	branch Test(EQ,Z) l000000000040412A
	// succ:  l000000000040410D l000000000040412A
l000000000040410D:
	ebp = Mem0[rbx:word32]
	edi = 0x0061B040
	esi = ebp
	call sigismember (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000404100
	ebp = Mem0[rbx:word32]
	edi = 0x0061B040
	esi = ebp
	call sigismember (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000404100
	// succ:  l000000000040411F l0000000000404100
l000000000040411F:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = ebp
	rax = signal(rdi, rsi)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = ebp
	rax = signal(rdi, rsi)
	goto l0000000000404100
	// succ:  l0000000000404100
l000000000040412A:
	ebx = Mem0[0x000000000061B034:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l0000000000404143
	// succ:  l0000000000404134 l0000000000404143
l0000000000404134:
	edi = 0x00000013
	call raise (retsize: 8;)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	branch Test(NE,Z) l0000000000404134
	// succ:  l0000000000404143 l0000000000404134
l0000000000404143:
	edi = Mem0[0x000000000061B038:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000404152
	// succ:  l000000000040414D l0000000000404152
l000000000040414D:
	call raise (retsize: 8;)
	// succ:  l0000000000404152
l0000000000404152:
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l000000000040430C
	// succ:  l000000000040415F l000000000040430C
l000000000040415F:
	rbx = Mem0[0x000000000061B1C8:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004041F5
	// succ:  l000000000040416F l00000000004041F5
l000000000040416F:
	rdi = rbx
	call fn000000000040AFB0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004041ED
	// succ:  l000000000040417C l00000000004041ED
l000000000040417C:
	ecx = 0x00412CA7
	edx = 0x000005DC
	esi = 0x00413736
	edi = 0x00415D68
	__assert_fail(rdi, rsi, rdx, rcx)
	// succ:  l0000000000404195
l0000000000404195:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x00413998
	rax = dcgettext(rdi, rsi, rdx)
	edi = (word32) Mem0[rsp + 0x000000000000002F:byte]
	rdx = r14
	rsi = rax
	call fn0000000000405810 (retsize: 8;)
	goto l00000000004034A1
	// succ:  l00000000004034A1
l00000000004041ED:
	rdi = rbx
	call fn000000000040B640 (retsize: 8;)
	// succ:  l00000000004041F5
l00000000004041F5:
	edi = Mem0[0x000000000061B030:word32]
	exit(rdi)
l0000000000404200:
	call fn0000000000404E80 (retsize: 8;)
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000404454
	// succ:  l0000000000404212 l0000000000404454
l0000000000404212:
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l000000000040345B
	// succ:  l0000000000404220 l000000000040345B
l0000000000404220:
	call fn00000000004079F0 (retsize: 8;)
	SCZO = cond(Mem0[0x000000000061B190:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l00000000004044B5
	// succ:  l0000000000404233 l00000000004044B5
l0000000000404233:
	rdi = Mem0[0x000000000061A610:word64]
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l00000000004044A3
	// succ:  l0000000000404248 l00000000004044A3
l0000000000404248:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
	// succ:  l0000000000404253
l0000000000404253:
	rax = Mem0[0x000000000061B190:word64]
	v51 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v51
	SCZO = cond(v51)
	Mem0[rsp + 0x0000000000000018:word64] = rax
	goto l00000000004034D2
	// succ:  l00000000004034D2
l0000000000404287:
	ecx = 0x00412CA7
	edx = 0x0000059D
	esi = 0x00413736
	edi = 0x00413992
	__assert_fail(rdi, rsi, rdx, rcx)
	// succ:  l00000000004042A0
l00000000004042A0:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004043A5
	// succ:  l00000000004042AD l00000000004043A5
l00000000004042AD:
	ecx = 0x00416919
	edx = 0x00000001
	esi = 0x00000003
	edi = 0x00413990
	call fn0000000000407EA0 (retsize: 8;)
	goto l000000000040344D
	// succ:  l000000000040344D
l00000000004042CB:
	rdi = Mem0[0x000000000061A3E8:word64]
	edx = 0x00000002
	esi = 0x004139E1
	rax = DPB(rax, memcmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004040D9
	// succ:  l00000000004042E9 l00000000004040D9
l00000000004042E9:
	SCZO = cond(Mem0[0x000000000061A3F0:word64] - 0x0000000000000001)
	branch Test(NE,Z) l00000000004040D9
	// succ:  l00000000004042F7 l00000000004040D9
l00000000004042F7:
	rax = Mem0[0x000000000061A3F8:word64]
	SCZO = cond(Mem0[rax:byte] - 0x6D)
	branch Test(NE,Z) l00000000004040D9
	// succ:  l0000000000404307 l00000000004040D9
l0000000000404307:
	goto l00000000004040ED
	// succ:  l00000000004040ED
l000000000040430C:
	esi = 0x0061AFC0
	edi = 0x004139E4
	call fn0000000000405630 (retsize: 8;)
	esi = 0x0061AF60
	edi = 0x004139EE
	call fn0000000000405630 (retsize: 8;)
	rdi = Mem0[0x000000000061B0E8:word64]
	call fn000000000040E630 (retsize: 8;)
	eax = eax
	esi = 0x00415D40
	edi = 0x00000001
	rdx = Mem0[0x00416480 + rax * 0x0000000000000008:word64]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	goto l000000000040415F
	// succ:  l000000000040415F
l0000000000404356:
	Mem0[0x000000000061A748:word64] = 0x0000000000000000
	// succ:  l0000000000404361
l0000000000404361:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x00415C30
	rax = dcgettext(rdi, rsi, rdx)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdx = rax
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call error (retsize: 8;)
	goto l0000000000403301
	// succ:  l0000000000403301
l0000000000404385:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004034D2
	// succ:  l000000000040438E l00000000004034D2
l000000000040438E:
	SCZO = cond(Mem0[rax + 0x0000000000000018:word64] - 0x0000000000000000)
	branch Test(NE,Z) l00000000004034D2
	// succ:  l0000000000404399 l00000000004034D2
l0000000000404399:
	Mem0[0x000000000061B0D0:byte] = 0x00
	goto l00000000004034D2
	// succ:  l00000000004034D2
l00000000004043A5:
	edx = 0x00000001
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = 0x00413990
	call fn0000000000404D20 (retsize: 8;)
	goto l000000000040344D
	// succ:  l000000000040344D
l00000000004043BB:
	call fn0000000000410E50 (retsize: 8;)
	r8 = Mem0[0x000000000061A640:word64]
	esi = Mem0[rsp + 0x0000000000000038:word32]
	ecx = 0x00413080
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edi = eax
	call fn00000000004112D0 (retsize: 8;)
	r12 = r12 + 0x0000000000000001
	SCZO = cond(r12)
	esi = 0x0000000A
	rdi = r12
	rax = strchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	r14 = rax
	branch Test(EQ,Z) l000000000040444F
	// succ:  l00000000004043F2 l000000000040444F
l00000000004043F2:
	r13 = r8 + 0x0000000000000001
	esi = 0x0000000A
	rdi = r13
	rax = strchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000404438
	// succ:  l0000000000404408 l0000000000404438
l0000000000404408:
	rdi = r12
	call fn000000000040EC10 (retsize: 8;)
	edx = 0x00000005
	r15 = rax
	esi = 0x00413900
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	rcx = r15
	rdx = rax
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = 0x00000002
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call error (retsize: 8;)
	// succ:  l0000000000404438
l0000000000404438:
	Mem0[rsi:byte] = 0x00
	// succ:  l000000000040443C
l000000000040443C:
	Mem0[0x000000000061A3D0:word64] = r12
	Mem0[0x000000000061A3D8:word64] = r13
	goto l00000000004038A8
	// succ:  l00000000004038A8
l000000000040444F:
	r13 = r12
	goto l000000000040443C
	// succ:  l000000000040443C
l0000000000404454:
	esi = 0x00000001
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	call fn0000000000405090 (retsize: 8;)
	goto l0000000000404212
	// succ:  l0000000000404212
l0000000000404484:
	rdi = Mem0[0x000000000061A3D8:word64]
	esi = 0x00413766
	rax = strstr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004038C2
	// succ:  l000000000040449E l00000000004038C2
l000000000040449E:
	goto l0000000000403301
	// succ:  l0000000000403301
l00000000004044A3:
	esi = 0x0000000A
	call __overflow (retsize: 8;)
	goto l0000000000404253
	// succ:  l0000000000404253
l00000000004044B5:
	Mem0[rsp + 0x0000000000000018:word64] = 0x0000000000000000
	goto l00000000004034D2
	// succ:  l00000000004034D2
l00000000004044C3:
	ecx = 0x00412C38
	edx = 0x000003D5
	esi = 0x00413736
	edi = 0x00415C58
	__assert_fail(rdi, rsi, rdx, rcx)
	// succ:  l00000000004044DC
l00000000004044DC:
	esi = 0x0000000A
	call __overflow (retsize: 8;)
	goto l0000000000403DF8
	// succ:  l0000000000403DF8
l00000000004044EB:
	esi = 0x00000020
	call __overflow (retsize: 8;)
	goto l0000000000403D8B
	// succ:  l0000000000403D8B
l00000000004044FA:
	rdi = rax
	Mem0[rsp + 0x0000000000000030:word16] = 0x3F3F
	Mem0[rsp + 0x0000000000000032:byte] = 0x00
	r13d = r13d ^ r13d
	SZO = cond(r13d)
	C = false
	call fn0000000000410E30 (retsize: 8;)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	Mem0[0x000000000061B118:word64] = rax
	Mem0[rsp + 0x0000000000000040:word64] = rax
	// succ:  l000000000040451F
l000000000040451F:
	SCZO = cond(edx - 0x00000005)
	branch Test(UGT,CZ) l0000000000402985
	// succ:  l0000000000404528 l0000000000402985
l0000000000404528:
	eax = edx
	switch (rax) { l0000000000404703 }
	goto l0000000000404703
	// succ:  l0000000000404703
l00000000004045E4:
	esi = 0x0000000A
	call __overflow (retsize: 8;)
	goto l000000000040363E
	// succ:  l000000000040363E
l0000000000404616:
	rsp = fp
	al = al + Mem0[rax:byte]
	SCZO = cond(al)
	v6 = Mem0[rax:byte] + al
	Mem0[rax:byte] = v6
	SCZO = cond(v6)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	rsi = Mem0[0x000000000061A3D8:word64]
	edx = 0x00000002
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	Mem0[0x000000000061A3D0:word64] = rax
	rax = dcgettext(rdi, rsi, rdx)
	Mem0[0x000000000061A3D8:word64] = rax
	goto l00000000004038A8
	// succ:  l00000000004038A8
l0000000000404703:
	rax = Mem0[rsp + 0x0000000000000038:word64]
	ecx = (word32) Mem0[rax:byte]
	SCZO = cond(cl - 0x2A)
	branch Test(EQ,Z) l00000000004047D4
	// succ:  l0000000000404714 l00000000004047D4
l0000000000404714:
	SCZO = cond(cl - 0x3A)
	branch Test(EQ,Z) l00000000004047C6
	// succ:  l000000000040471D l00000000004047C6
l000000000040471D:
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040478E
	// succ:  l0000000000404721 l000000000040478E
l0000000000404721:
	rdx = rax + 0x0000000000000001
	Mem0[rsp + 0x0000000000000038:word64] = rdx
	eax = (word32) Mem0[rax:byte]
	edx = 0x00000001
	Mem0[rsp + 0x0000000000000030:byte] = al
	goto l0000000000404528
	// succ:  l0000000000404528
l000000000040478E:
	SCZO = cond(Mem0[0x000000000061A450:word64] - 0x0000000000000006)
	branch Test(NE,Z) l0000000000403AE2
	// succ:  l000000000040479C l0000000000403AE2
l000000000040479C:
	rdi = Mem0[0x000000000061A458:word64]
	edx = 0x00000006
	esi = 0x00413989
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000403AE2
	// succ:  l00000000004047BA l0000000000403AE2
l00000000004047BA:
	Mem0[0x000000000061B198:byte] = 0x01
	goto l0000000000403AE2
	// succ:  l0000000000403AE2
l00000000004047C6:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rsp + 0x0000000000000038:word64] = rax
	goto l000000000040451F
	// succ:  l000000000040451F
l00000000004047D4:
	edi = 0x00000028
	call fn0000000000410C40 (retsize: 8;)
	r13 = rax
	rax = Mem0[0x000000000061B120:word64]
	rdi = Mem0[rsp + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000038
	edx = 0x00000001
	rcx = r13
	v56 = Mem0[rsp + 0x0000000000000038:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000038:word64] = v56
	SCZO = cond(v56)
	Mem0[0x000000000061B120:word64] = r13
	Mem0[rbp + 0x0000000000000020:word64] = rax
	rax = Mem0[rsp + 0x0000000000000040:word64]
	Mem0[rbp + 0x0000000000000008:word64] = rax
	call fn00000000004049E0 (retsize: 8;)
	SCZO = cond(al - 0x01)
	edx = edx - edx - C
	SCZO = cond(edx)
	edx = edx & 0x00000002
	SZO = cond(edx)
	C = false
	edx = edx + 0x00000003
	SCZO = cond(edx)
	goto l000000000040451F
	// succ:  l000000000040451F
fn0000000000404616_exit:


// fn0000000000404890
// Return size: 0
void fn0000000000404890()
fn0000000000404890_entry:
	// succ:  l0000000000404890
l0000000000404890:
	rsp = fp
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	r9 = rdx
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = rsp
	__align(rsp)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rax
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r8 = 0x0000000000411ED0
	rcx = 0x0000000000411E60
	rdi = 0x00000000004028C0
	rax = DPB(rax, __libc_start_main(rdi, rsi, rdx, rcx, r8, r9, Mem0[rsp:(ptr void)]), 0, 32)
	__hlt()
fn0000000000404890_exit:


// fn00000000004048C0
// Return size: 8
void fn00000000004048C0()
fn00000000004048C0_entry:
	// succ:  l00000000004048C0
l00000000004048C0:
	rsp = fp
	eax = 0x0061A5FF
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r8 = r8 - 6399480
	SCZO = cond(r8)
	SCZO = cond(rax - 0x000000000000000E)
	rbp = rsp
	branch Test(UGT,CZ) l00000000004048D7
	// succ:  l00000000004048D5 l00000000004048D7
l00000000004048D5:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000000004048C0_exit
l00000000004048D7:
	eax = 0x00000000
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004048D5
	// succ:  l00000000004048E1 l00000000004048D5
l00000000004048E1:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	edi = 0x0061A5F8
	call eax (retsize: 4;)
	return
	// succ:  fn00000000004048C0_exit
fn00000000004048C0_exit:


// fn00000000004049E0
// Return size: 8
void fn00000000004049E0()
fn00000000004049E0_entry:
	// succ:  l00000000004049E0
l00000000004049E0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r8 = Mem0[r14:word64]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	r9 = Mem0[r15:word64]
	r10d = r10d ^ r10d
	SZO = cond(r10d)
	C = false
	r11d = r11d ^ r11d
	SZO = cond(r11d)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = 0x0000000000000000
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rcx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = 0x00000001
	// succ:  l0000000000404A06
l0000000000404A06:
	SCZO = cond(eax - 0x00000002)
	branch Test(EQ,Z) l0000000000404A59
	// succ:  l0000000000404A0B l0000000000404A59
l0000000000404A0B:
	branch Test(ULE,CZ) l0000000000404B20
	// succ:  l0000000000404A11 l0000000000404B20
l0000000000404A11:
	SCZO = cond(eax - 0x00000003)
	branch Test(EQ,Z) l0000000000404AE0
	// succ:  l0000000000404A1A l0000000000404AE0
l0000000000404A1A:
	SCZO = cond(eax - 0x00000004)
	branch Test(NE,Z) l0000000000404A70
	// succ:  l0000000000404A22 l0000000000404A70
l0000000000404A22:
	eax = (word32) Mem0[rax:byte]
	ecx = rax - 0x0000000000000040
	SCZO = cond(cl - 0x3E)
	branch Test(ULE,CZ) l0000000000404AA0
	// succ:  l0000000000404A2E l0000000000404AA0
l0000000000404A2E:
	SCZO = cond(al - 0x3F)
	branch Test(EQ,Z) l0000000000404CB0
	// succ:  l0000000000404A36 l0000000000404CB0
l0000000000404A36:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0000000000404A38
l0000000000404A38:
	Mem0[r15:word64] = r9
	Mem0[r14:word64] = r8
	Mem0[r13 + 0x0000000000000000:word64] = r10
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000000004049E0_exit
l0000000000404A50:
	r11d = rax - 0x0000000000000030 + r11 * 0x00000008
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	// succ:  l0000000000404A59
l0000000000404A59:
	eax = (word32) Mem0[rax:byte]
	ecx = rax - 0x0000000000000030
	SCZO = cond(cl - 0x07)
	branch Test(ULE,CZ) l0000000000404A50
	// succ:  l0000000000404A65 l0000000000404A50
l0000000000404A65:
	Mem0[r9:byte] = r11b
	r10 = r10 + 0x0000000000000001
	SCZO = cond(r10)
	r9 = r9 + 0x0000000000000001
	SCZO = cond(r9)
	// succ:  l0000000000404A70
l0000000000404A70:
	eax = (word32) Mem0[rax:byte]
	SCZO = cond(al - 0x3D)
	branch Test(EQ,Z) l0000000000404ABA
	// succ:  l0000000000404A78 l0000000000404ABA
l0000000000404A78:
	branch Test(LE,SZO) l0000000000404B40
	// succ:  l0000000000404A7E l0000000000404B40
l0000000000404A7E:
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l0000000000404CA0
	// succ:  l0000000000404A86 l0000000000404CA0
l0000000000404A86:
	SCZO = cond(al - 0x5E)
	branch Test(NE,Z) l0000000000404B60
	// succ:  l0000000000404A8E l0000000000404B60
l0000000000404A8E:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	eax = (word32) Mem0[rax:byte]
	ecx = rax - 0x0000000000000040
	SCZO = cond(cl - 0x3E)
	branch Test(UGT,CZ) l0000000000404A2E
	// succ:  l0000000000404A9E l0000000000404A2E
l0000000000404A9E:
l0000000000404AA0:
	eax = eax & 0x0000001F
	SZO = cond(eax)
	C = false
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	r10 = r10 + 0x0000000000000001
	SCZO = cond(r10)
	Mem0[rcx:byte] = al
	eax = (word32) Mem0[rax:byte]
	r9 = r9 + 0x0000000000000001
	SCZO = cond(r9)
	SCZO = cond(al - 0x3D)
	branch Test(NE,Z) l0000000000404A78
	// succ:  l0000000000404ABA l0000000000404A78
l0000000000404ABA:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000404B60
	// succ:  l0000000000404AC2 l0000000000404B60
l0000000000404AC2:
	eax = 0x00000001
	goto l0000000000404A38
	// succ:  l0000000000404A38
l0000000000404AD0:
	r11d = r11d << 0x0000000000000004
	SCZO = cond(r11d)
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	r11d = rax - 0x0000000000000057 + r11
l0000000000404AE0:
	eax = (word32) Mem0[rax:byte]
	ecx = rax - 0x0000000000000030
	SCZO = cond(cl - 0x36)
	branch Test(UGT,CZ) l0000000000404A65
	// succ:  l0000000000404AF0 l0000000000404A65
l0000000000404AF0:
	r14 = rbx
	r14 = r14 << cl
	SCZO = cond(r14)
	SZO = cond(r14d & 0x007E0000)
	C = false
	branch Test(NE,Z) l0000000000404B78
	// succ:  l0000000000404AFF l0000000000404B78
l0000000000404AFF:
	SZO = cond(r14 & r12)
	C = false
	branch Test(NE,Z) l0000000000404AD0
	// succ:  l0000000000404B04 l0000000000404AD0
l0000000000404B04:
	SZO = cond(r14d & 0x000003FF)
	C = false
	branch Test(EQ,Z) l0000000000404A65
	// succ:  l0000000000404B11 l0000000000404A65
l0000000000404B11:
	r11d = r11d << 0x0000000000000004
	SCZO = cond(r11d)
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	r11d = rax - 0x0000000000000030 + r11
	goto l0000000000404AE0
	// succ:  l0000000000404AE0
l0000000000404B20:
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000404A70
	// succ:  l0000000000404B29 l0000000000404A70
l0000000000404B29:
	eax = (word32) Mem0[rax:byte]
	SCZO = cond(al - 0x78)
	branch Test(UGT,CZ) l0000000000404C90
	eax = (word32) Mem0[rax:byte]
	SCZO = cond(al - 0x78)
	branch Test(UGT,CZ) l0000000000404C90
	// succ:  l0000000000404B35 l0000000000404C90
l0000000000404B35:
	ecx = (word32) al
	switch (rcx) { l0000000000404BF0 }
	ecx = (word32) al
	switch (rcx) { l0000000000404BF0 l0000000000404BF0 l0000000000404C90 }
	// succ:  l0000000000404BF0 l0000000000404BF0 l0000000000404C90
l0000000000404B40:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000404B48
	// succ:  l0000000000404B44 l0000000000404B48
l0000000000404B44:
	SCZO = cond(al - 0x3A)
	branch Test(NE,Z) l0000000000404B60
	// succ:  l0000000000404B48 l0000000000404B60
l0000000000404B48:
	eax = 0x00000005
	// succ:  l0000000000404B4D
l0000000000404B4D:
	SCZO = cond(eax - 0x00000006)
	al = Test(NE,Z)
	goto l0000000000404A38
	// succ:  l0000000000404A38
l0000000000404B60:
	Mem0[rcx:byte] = al
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	r10 = r10 + 0x0000000000000001
	SCZO = cond(r10)
	r9 = r9 + 0x0000000000000001
	SCZO = cond(r9)
	goto l0000000000404A70
	// succ:  l0000000000404A70
l0000000000404B78:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	r11d = r11d << 0x0000000000000004
	SCZO = cond(r11d)
	r11d = rax - 0x0000000000000037 + r11
	eax = (word32) Mem0[rax:byte]
	ecx = rax - 0x0000000000000030
	SCZO = cond(cl - 0x36)
	branch Test(UGT,CZ) l0000000000404A65
	// succ:  l0000000000404B95 l0000000000404A65
l0000000000404B95:
	goto l0000000000404AF0
	// succ:  l0000000000404AF0
l0000000000404BB0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	SCZO = cond(eax - 0x00000004)
	branch Test(ULE,CZ) l0000000000404A06
	// succ:  l0000000000404BBD l0000000000404A06
l0000000000404BBD:
	goto l0000000000404B4D
	// succ:  l0000000000404B4D
l0000000000404BD0:
	Mem0[r9:byte] = r11b
	r10 = r10 + 0x0000000000000001
	SCZO = cond(r10)
	r9 = r9 + 0x0000000000000001
	SCZO = cond(r9)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l0000000000404BB0
	// succ:  l0000000000404BB0
l0000000000404BF0:
	eax = 0x00000006
	goto l0000000000404BB0
	// succ:  l0000000000404BB0
l0000000000404C90:
	r11d = eax
	goto l0000000000404BD0
	// succ:  l0000000000404BD0
l0000000000404CA0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	goto l0000000000404B29
	// succ:  l0000000000404B29
l0000000000404CB0:
	Mem0[rcx:byte] = 0x7F
	r10 = r10 + 0x0000000000000001
	SCZO = cond(r10)
	r9 = r9 + 0x0000000000000001
	SCZO = cond(r9)
	goto l0000000000404A70
	// succ:  l0000000000404A70
fn00000000004049E0_exit:


// fn0000000000404CD0
// Return size: 8
void fn0000000000404CD0()
fn0000000000404CD0_entry:
	// succ:  l0000000000404CD0
l0000000000404CD0:
	rsp = fp
	edi = edi
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rdi = rdi << 0x0000000000000004
	SCZO = cond(rdi)
	rdx = Mem0[rdi + 0x000000000061A3E0:word64]
	rsi = Mem0[rdi + 0x000000000061A3E8:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000404CFC
	// succ:  l0000000000404CEB l0000000000404CFC
l0000000000404CEB:
	SCZO = cond(rdx - 0x0000000000000001)
	branch Test(EQ,Z) l0000000000404D10
	// succ:  l0000000000404CF1 l0000000000404D10
l0000000000404CF1:
	SCZO = cond(rdx - 0x0000000000000002)
	eax = 0x00000001
	branch Test(EQ,Z) l0000000000404D00
	// succ:  l0000000000404CFC l0000000000404D00
l0000000000404CFC:
	return
	// succ:  fn0000000000404CD0_exit
l0000000000404D00:
	edi = 0x00413733
	ecx = 0x00000002
	// succ:  l0000000000404D0A
l0000000000404D0A:
	branch rcx == 0x0000000000000000 l0000000000404D0C
	// succ:  l0000000000404D0A_1 l0000000000404D0C
l0000000000404D0A_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l0000000000404D0A
	// succ:  l0000000000404D0C l0000000000404D0A
l0000000000404D0C:
	al = Test(NE,Z)
	return
	// succ:  fn0000000000404CD0_exit
l0000000000404D10:
	SCZO = cond(Mem0[rsi:byte] - 0x30)
	al = Test(NE,Z)
	return
	// succ:  fn0000000000404CD0_exit
fn0000000000404CD0_exit:


// fn0000000000404D20
// Return size: 8
void fn0000000000404D20()
fn0000000000404D20_entry:
	// succ:  l0000000000404D20
l0000000000404D20:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13d = edx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	edi = 0x00000020
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	call fn0000000000410C40 (retsize: 8;)
	rbx = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000404D4F
	// succ:  l0000000000404D47 l0000000000404D4F
l0000000000404D47:
	rdi = r12
	call fn0000000000410E30 (retsize: 8;)
	// succ:  l0000000000404D4F
l0000000000404D4F:
	Mem0[rbx + 0x0000000000000008:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000404D62
	// succ:  l0000000000404D5A l0000000000404D62
l0000000000404D5A:
	rdi = rbp
	call fn0000000000410E30 (retsize: 8;)
	// succ:  l0000000000404D62
l0000000000404D62:
	Mem0[rbx:word64] = rax
	rax = Mem0[0x000000000061B190:word64]
	Mem0[r11 + 0x0000000000000010:byte] = r13b
	Mem0[0x000000000061B190:word64] = rbx
	Mem0[rbx + 0x0000000000000018:word64] = rax
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000404D20_exit
fn0000000000404D20_exit:


// fn0000000000404D90
// Return size: 8
void fn0000000000404D90()
fn0000000000404D90_entry:
	goto l0000000000404D90
	// succ:  l0000000000404D90
l00000000004027D0:
	call Mem0[0x000000000061A330:word32] (retsize: 4;)
	return
	// succ:  fn0000000000404D90_exit
l0000000000404D90:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rdi = Mem0[rdi:word64]
	free(rdi)
	rdi = Mem0[rbx + 0x0000000000000008:word64]
	free(rdi)
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	SCZO = cond(rdi - 0x000000000061A56A)
	branch Test(EQ,Z) l0000000000404DC0
	// succ:  l0000000000404DB5 l0000000000404DC0
l0000000000404DB5:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l00000000004027D0
	// succ:  l00000000004027D0
l0000000000404DC0:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000404D90_exit
fn0000000000404D90_exit:


// fn0000000000404DD0
// Return size: 8
void fn0000000000404DD0()
fn0000000000404DD0_entry:
	// succ:  l0000000000404DD0
l0000000000404DD0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000404DFD
	// succ:  l0000000000404DDD l0000000000404DFD
l0000000000404DDD:
	// succ:  l0000000000404DE0
l0000000000404DE0:
	rax = Mem0[0x000000000061B1A8:word64]
	rdi = Mem0[rax + rbx * 0x0000000000000008:word64]
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	call fn0000000000404D90 (retsize: 8;)
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - rbx)
	branch Test(UGT,CZ) l0000000000404DE0
	// succ:  l0000000000404DFD l0000000000404DE0
l0000000000404DFD:
	Mem0[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem0[0x000000000061B17C:byte] = 0x00
	Mem0[0x000000000061B178:word32] = 0x00000000
	Mem0[0x000000000061B174:word32] = 0x00000000
	Mem0[0x000000000061B170:word32] = 0x00000000
	Mem0[0x000000000061B168:word32] = 0x00000000
	Mem0[0x000000000061B164:word32] = 0x00000000
	Mem0[0x000000000061B160:word32] = 0x00000000
	Mem0[0x000000000061B16C:word32] = 0x00000000
	Mem0[0x000000000061B15C:word32] = 0x00000000
	Mem0[0x000000000061B158:word32] = 0x00000000
	Mem0[0x000000000061B154:word32] = 0x00000000
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000404DD0_exit
fn0000000000404DD0_exit:


// fn0000000000404E80
// Return size: 8
void fn0000000000404E80()
fn0000000000404E80_entry:
	goto l0000000000404E80
	// succ:  l0000000000404E80
l0000000000402550_in_fn0000000000404E80:
	call Mem0[0x000000000061A1F0:word32] (retsize: 4;)
	return
	// succ:  fn0000000000404E80_exit
l0000000000404E80:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[0x000000000061B1B0:word64]
	rax = rbx
	rbp = rbx
	rax = rax >>u 0x0000000000000001
	SCZO = cond(rax)
	rax = rax + rbx
	SCZO = cond(rax)
	SCZO = cond(rax - Mem0[0x000000000061B1A0:word64])
	branch Test(UGT,CZ) l0000000000404F98
	// succ:  l0000000000404EA6 l0000000000404F98
l0000000000404EA6:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000404ED3
	// succ:  l0000000000404EAB l0000000000404ED3
l0000000000404EAB:
	rax = Mem0[0x000000000061B1A8:word64]
	rdx = Mem0[0x000000000061B1C0:word64]
	rcx = rax + rbp * 0x0000000000000008
	// succ:  l0000000000404EC0
l0000000000404EC0:
	Mem0[rax:word64] = rdx
	rax = rax + 0x0000000000000008
	SCZO = cond(rax)
	rdx = rdx + 192
	SCZO = cond(rdx)
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000404EC0
	// succ:  l0000000000404ED3 l0000000000404EC0
l0000000000404ED3:
	SCZO = cond(Mem0[0x000000000061B148:word32] - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000404F8C
	// succ:  l0000000000404EE0 l0000000000404F8C
l0000000000404EE0:
	edi = 0x0061A680
	call _setjmp (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000404F40
	// succ:  l0000000000404EEE l0000000000404F40
l0000000000404EEE:
	r8d = Mem0[0x000000000061B148:word64]
	SCZO = cond(r8d - 0x0000000000000003)
	branch Test(EQ,Z) l0000000000404FDF
	// succ:  l0000000000404EFF l0000000000404FDF
l0000000000404EFF:
	rsi = Mem0[0x000000000061B1B0:word64]
	rdi = Mem0[0x000000000061B1A8:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000404F33
	// succ:  l0000000000404F12 l0000000000404F33
l0000000000404F12:
	rdx = Mem0[0x000000000061B1C0:word64]
	rcx = rdi + rsi * 0x0000000000000008
	rax = rdi
	// succ:  l0000000000404F20
l0000000000404F20:
	Mem0[rax:word64] = rdx
	rax = rax + 0x0000000000000008
	SCZO = cond(rax)
	rdx = rdx + 192
	SCZO = cond(rdx)
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000404F20
	// succ:  l0000000000404F33 l0000000000404F20
l0000000000404F33:
	ecx = r8d
	eax = 0x00000001
	goto l0000000000404F54
	// succ:  l0000000000404F54
l0000000000404F40:
	ecx = Mem0[0x000000000061B148:word32]
	rsi = Mem0[0x000000000061B1B0:word64]
	rdi = Mem0[0x000000000061B1A8:word64]
	// succ:  l0000000000404F54
l0000000000404F54:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(ecx - 0x00000004)
	branch Test(NE,Z) l0000000000404F60
	// succ:  l0000000000404F59_1 l0000000000404F60
l0000000000404F59_1:
	edx = Mem0[0x000000000061B14C:word32]
	// succ:  l0000000000404F60
l0000000000404F60:
	ax = (int16) al
	r8d = (word64) Mem0[0x000000000061B10C:byte]
	edx = edx + ecx
	SCZO = cond(edx)
	rdx = rax + rdx * 0x0000000000000002
	eax = (word32) Mem0[0x000000000061B147:byte]
	rax = rax + rdx * 0x0000000000000002
	rax = r8 + rax * 0x0000000000000002
	rdx = Mem0[0x00412D00 + rax * 0x0000000000000008:word64]
	call fn000000000040D690 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000404F8C
l0000000000404F8C:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000404E80_exit
l0000000000404F98:
	rdi = Mem0[0x000000000061B1A8:word64]
	free(rdi)
	r8 = 0x00000000AAAAAAAA
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l0000000000404FF8
	// succ:  l0000000000404FB3 l0000000000404FF8
l0000000000404FB3:
	rdi = rbx + rbx * 0x0000000000000002
	rdi = rdi << 0x0000000000000003
	SCZO = cond(rdi)
	call fn0000000000410C40 (retsize: 8;)
	rbp = Mem0[0x000000000061B1B0:word64]
	Mem0[0x000000000061B1A8:word64] = rax
	rax = rbp + 0x0000000000000000 + rbp * 0x0000000000000002
	Mem0[0x000000000061B1A0:word64] = rax
	goto l0000000000404EA6
	// succ:  l0000000000404EA6
l0000000000404FDF:
	ecx = 0x00412C95
	edx = 0x00000DDB
	esi = 0x00413736
	edi = 0x0041373F
	__assert_fail(rdi, rsi, rdx, rcx)
	// succ:  l0000000000404FF8
l0000000000404FF8:
	call fn0000000000410E50 (retsize: 8;)
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
	goto l0000000000402550_in_fn0000000000404E80
	// succ:  l0000000000402550_in_fn0000000000404E80
fn0000000000404E80_exit:


// fn0000000000405020
// Return size: 0
void fn0000000000405020()
fn0000000000405020_entry:
	goto l0000000000405020
	// succ:  l0000000000405020
l0000000000402690:
	call Mem0[0x000000000061A290:word32] (retsize: 4;)
	return
	// succ:  fn0000000000405020_exit
l0000000000405020:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l0000000000402690
	// succ:  l0000000000402690
fn0000000000405020_exit:


// fn0000000000405090
// Return size: 8
void fn0000000000405090()
fn0000000000405090_entry:
	// succ:  l0000000000405090
l0000000000405090:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14d = (word64) sil
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l00000000004050C0
	// succ:  l00000000004050AA l00000000004050C0
l00000000004050AA:
	SCZO = cond(Mem0[0x000000000061B1C8:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l00000000004050C0
	// succ:  l00000000004050B4 l00000000004050C0
l00000000004050B4:
	rsi = rdi
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	call fn0000000000404D20 (retsize: 8;)
	// succ:  l00000000004050C0
l00000000004050C0:
	rbx = Mem0[0x000000000061B1B0:word64]
	r12 = 0xFFFFFFF8 + rbx * 0x0000000000000008
	goto l0000000000405108
	// succ:  l0000000000405108
l00000000004050D8:
	SCZO = cond(Mem0[rdi:byte] - 0x2F)
	branch Test(NE,Z) l0000000000405160
	// succ:  l00000000004050E2 l0000000000405160
l00000000004050E2:
	rsi = Mem0[rbp + 0x0000000000000008:word64]
	edx = r14d
	rdi = r15
	call fn0000000000404D20 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x00000000000000A0:word32] - 0x00000009)
	branch Test(EQ,Z) l0000000000405194
	// succ:  l00000000004050FE l0000000000405194
l00000000004050FE:
l0000000000405100:
	rbx = rbx - 0x0000000000000001
	SCZO = cond(rbx)
	r12 = r12 - 0x0000000000000008
	SCZO = cond(r12)
	// succ:  l0000000000405108
l0000000000405108:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004051A8
	// succ:  l0000000000405111 l00000000004051A8
l0000000000405111:
	rax = Mem0[0x000000000061B1A8:word64]
	rbp = Mem0[rax:word64]
	eax = Mem0[rbp + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	branch Test(EQ,Z) l000000000040512C
	// succ:  l0000000000405127 l000000000040512C
l0000000000405127:
	SCZO = cond(eax - 0x00000003)
	branch Test(NE,Z) l0000000000405100
	// succ:  l000000000040512C l0000000000405100
l000000000040512C:
	SZO = cond(r13 & r13)
	C = false
	r15 = Mem0[r13 + 0x0000000000000000:word64]
	branch Test(EQ,Z) l00000000004050E2
	// succ:  l0000000000405135 l00000000004050E2
l0000000000405135:
	rdi = r15
	call fn000000000040A390 (retsize: 8;)
	SCZO = cond(Mem0[rax:byte] - 0x2E)
	branch Test(NE,Z) l00000000004050D8
	// succ:  l0000000000405142 l00000000004050D8
l0000000000405142:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[rax + 0x0000000000000001:byte] - 0x2E)
	dl = Test(EQ,Z)
	eax = (word32) Mem0[rax + 0x0000000000000001 + rdx:byte]
	SCZO = cond(al - 0x2F)
	branch Test(EQ,Z) l0000000000405100
	// succ:  l0000000000405154 l0000000000405100
l0000000000405154:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000405100
	// succ:  l0000000000405158 l0000000000405100
l0000000000405158:
	goto l00000000004050D8
	// succ:  l00000000004050D8
l0000000000405160:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rsi = r15
	rdi = r13
	call fn000000000040A610 (retsize: 8;)
	rsi = Mem0[rbp + 0x0000000000000008:word64]
	r15 = rax
	rdi = rax
	edx = r14d
	call fn0000000000404D20 (retsize: 8;)
	rdi = r15
	free(rdi)
	SCZO = cond(Mem0[rbp + 0x00000000000000A0:word32] - 0x00000009)
	branch Test(NE,Z) l0000000000405100
	// succ:  l0000000000405194 l0000000000405100
l0000000000405194:
	rdi = rbp
	call fn0000000000404D90 (retsize: 8;)
	rdi = rbp
	call fn0000000000404D90 (retsize: 8;)
	goto l0000000000405100
	// succ:  l0000000000405100
l00000000004051A8:
	rdi = Mem0[0x000000000061B1B0:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l00000000004051F7
	// succ:  l00000000004051B4 l00000000004051F7
l00000000004051B4:
	rsi = Mem0[0x000000000061B1A8:word64]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00000000004051C0
l00000000004051C0:
	rcx = Mem0[rsi + rax * 0x0000000000000008:word64]
	SCZO = cond(Mem0[rcx + 0x00000000000000A0:word32] - 0x00000009)
	Mem0[rsi + rdx * 0x0000000000000008:word64] = rcx
	cl = Test(NE,Z)
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	ecx = (word32) cl
	rdx = rdx + rcx
	SCZO = cond(rdx)
	SCZO = cond(rax - rdi)
	branch Test(NE,Z) l00000000004051C0
	// succ:  l00000000004051E1 l00000000004051C0
l00000000004051E1:
	Mem0[0x000000000061B1B0:word64] = rdx
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405090_exit
l00000000004051F7:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l00000000004051E1
	// succ:  l00000000004051E1
fn0000000000405090_exit:


// fn0000000000405200
// Return size: 8
void fn0000000000405200()
fn0000000000405200_entry:
	// succ:  l0000000000405200
l0000000000405200:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	SCZO = cond(rdi - rsi)
	branch Test(ULT,C) l000000000040526B
	// succ:  l0000000000405211 l000000000040526B
l0000000000405211:
	goto l000000000040529C
	// succ:  l000000000040529C
l0000000000405220:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rbp
	rsi = rbx + 0x0000000000000001
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rdi = rax
	rax = rsi
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	SCZO = cond(rdi - rax)
	branch Test(ULE,CZ) l00000000004052A8
	// succ:  l000000000040523C l00000000004052A8
l000000000040523C:
	rdi = Mem0[0x000000000061A610:word64]
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l00000000004052B9
	// succ:  l000000000040524D l00000000004052B9
l000000000040524D:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x09
	// succ:  l0000000000405258
l0000000000405258:
	rax = rbx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rbx = rbx + rcx
	SCZO = cond(rbx)
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	rbx = rbx - rdx
	SCZO = cond(rbx)
	// succ:  l0000000000405266
l0000000000405266:
	SCZO = cond(rbp - rbx)
	branch Test(ULE,CZ) l000000000040529C
	// succ:  l000000000040526B l000000000040529C
l000000000040526B:
	rcx = Mem0[0x000000000061B0D8:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000405220
	rcx = Mem0[0x000000000061B0D8:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000405220
	// succ:  l0000000000405277 l0000000000405220
l0000000000405277:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	// succ:  l000000000040527B
l000000000040527B:
	rdi = Mem0[0x000000000061A610:word64]
	rdx = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rdx - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l00000000004052AD
	rdi = Mem0[0x000000000061A610:word64]
	rdx = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rdx - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l00000000004052AD
	// succ:  l000000000040528C l00000000004052AD
l000000000040528C:
	rax = rdx + 0x0000000000000001
	SCZO = cond(rbp - rbx)
	Mem0[rdi + 0x0000000000000028:word64] = rax
	Mem0[rdx:byte] = 0x20
	branch Test(UGT,CZ) l000000000040526B
	rax = rdx + 0x0000000000000001
	SCZO = cond(rbp - rbx)
	Mem0[rdi + 0x0000000000000028:word64] = rax
	Mem0[rdx:byte] = 0x20
	branch Test(UGT,CZ) l000000000040526B
	// succ:  l000000000040529C l000000000040526B
l000000000040529C:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405200_exit fn0000000000405200_exit
l00000000004052A8:
	rbx = rsi
	goto l000000000040527B
	// succ:  l000000000040527B
l00000000004052AD:
	esi = 0x00000020
	call __overflow (retsize: 8;)
	goto l0000000000405266
	// succ:  l0000000000405266
l00000000004052B9:
	esi = 0x00000009
	call __overflow (retsize: 8;)
	rcx = Mem0[0x000000000061B0D8:word64]
	goto l0000000000405258
	// succ:  l0000000000405258
fn0000000000405200_exit:


// fn00000000004052D0
// Return size: 8
void fn00000000004052D0()
fn00000000004052D0_entry:
	// succ:  l00000000004052D0
l00000000004052D0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r8 = rdx
	rbp = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rdx
	rdx = rsi
	esi = 0x00002000
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 8280
	SCZO = cond(rsp)
	Mem0[rbp + 0x00000000FFFFDF88:word64] = rdi
	rdi = rbp + 0x00000000FFFFDFC0
	Mem0[rbp + 0x00000000FFFFDF90:word64] = rcx
	rcx = 0xFFFFFFFFFFFFFFFF
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rbp - 0x0000000000000038:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call fn000000000040E6F0 (retsize: 8;)
	rbx = rax
	rax = rbp + 0x00000000FFFFDFC0
	SCZO = cond(rbx - 0x0000000000001FFF)
	Mem0[rbp + 0x00000000FFFFDF98:word64] = rax
	branch Test(UGT,CZ) l0000000000405590
	// succ:  l0000000000405343 l0000000000405590
l0000000000405343:
	SCZO = cond(Mem0[0x000000000061B0F0:byte] - 0x00)
	branch Test(NE,Z) l0000000000405412
	// succ:  l0000000000405350 l0000000000405412
l0000000000405350:
	SCZO = cond(Mem0[rbp + 0x00000000FFFFDF90:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000405379
	// succ:  l000000000040535A l0000000000405379
l000000000040535A:
	call __ctype_get_mb_cur_max (retsize: 8;)
	SCZO = cond(rax - 0x0000000000000001)
	branch Test(ULE,CZ) l00000000004053CD
	// succ:  l0000000000405365 l00000000004053CD
l0000000000405365:
	rdi = Mem0[rbp + 0x00000000FFFFDF98:word64]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rsi = rbx
	call fn000000000040D240 (retsize: 8;)
	rsp = rsp + 0x0000000000000008
	r12 = (int64) eax
	// succ:  l0000000000405379
l0000000000405379:
	rcx = Mem0[rbp + 0x00000000FFFFDF88:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000405399
	// succ:  l0000000000405385 l0000000000405399
l0000000000405385:
	rdi = Mem0[rbp + 0x00000000FFFFDF98:word64]
	rdx = rbx
	esi = 0x00000001
	call fwrite_unlocked (retsize: 8;)
	// succ:  l0000000000405399
l0000000000405399:
	rax = Mem0[rbp + 0x00000000FFFFDF90:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004053A8
	// succ:  l00000000004053A5 l00000000004053A8
l00000000004053A5:
	Mem0[r8:word64] = r12
	// succ:  l00000000004053A8
l00000000004053A8:
	rax = rbx
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	branch Test(NE,Z) l000000000040561C
	// succ:  l00000000004053BE l000000000040561C
l00000000004053BE:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000000004052D0_exit
l00000000004053CD:
	r14 = Mem0[r13 + 0x00000000FFFFDF98:word64]
	r13 = r14 + rbx
	SCZO = cond(r14 - r13)
	branch Test(UGE,C) l000000000040560A
	// succ:  l00000000004053E1 l000000000040560A
l00000000004053E1:
	call __ctype_b_loc (retsize: 8;)
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	rcx = Mem0[rax:word64]
	rax = r14
	// succ:  l00000000004053F0
l00000000004053F0:
	edx = (word32) Mem0[rax:byte]
	edx = (word32) Mem0[rcx + rdx * 0x0002:word16]
	dx = dx & 0x4000
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - 0x0001)
	r12 = r12 - 0xFF - C
	SCZO = cond(r12)
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	SCZO = cond(rax - r13)
	branch Test(NE,Z) l00000000004053F0
	// succ:  l000000000040540D l00000000004053F0
l000000000040540D:
	goto l0000000000405379
	// succ:  l0000000000405379
l0000000000405412:
	call __ctype_get_mb_cur_max (retsize: 8;)
	SCZO = cond(rax - 0x0000000000000001)
	branch Test(ULE,CZ) l00000000004055D1
	// succ:  l0000000000405421 l00000000004055D1
l0000000000405421:
	r15 = Mem0[r13 + 0x00000000FFFFDF98:word64]
	r13 = r15 + rbx
	SCZO = cond(r15 - r13)
	branch Test(UGE,C) l0000000000405612
	// succ:  l0000000000405435 l0000000000405612
l0000000000405435:
	rbx = r15
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	// succ:  l0000000000405440
l0000000000405440:
	eax = (word32) Mem0[rdi:byte]
	SCZO = cond(al - 0x3F)
	branch Test(GT,SZO) l0000000000405520
	// succ:  l000000000040544C l0000000000405520
l000000000040544C:
	SCZO = cond(al - 0x25)
	branch Test(GE,SO) l0000000000405538
	// succ:  l0000000000405454 l0000000000405538
l0000000000405454:
	edx = rax - 0x0000000000000020
	SCZO = cond(dl - 0x03)
	branch Test(ULE,CZ) l0000000000405538
	// succ:  l0000000000405460 l0000000000405538
l0000000000405460:
	Mem0[rbp + 0x00000000FFFFDFB0:word64] = 0x0000000000000000
	// succ:  l0000000000405470
l0000000000405470:
	rdx = r13
	rcx = rbp + 0x00000000FFFFDFB0
	rdi = rbp + 0x00000000FFFFDFAC
	rdx = rdx - r15
	SCZO = cond(rdx)
	rsi = r15
	call mbrtowc (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF)
	r14 = rax
	branch Test(EQ,Z) l0000000000405551
	// succ:  l0000000000405499 l0000000000405551
l0000000000405499:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFE)
	branch Test(EQ,Z) l000000000040556B
	// succ:  l00000000004054A3 l000000000040556B
l00000000004054A3:
	edi = Mem0[rbp + 0x00000000FFFFDFAC:word32]
	SZO = cond(rax & rax)
	C = false
	eax = 0x00000001
	branch Test(NE,Z) l00000000004054B5
	// succ:  l00000000004054B1_1 l00000000004054B5
l00000000004054B1_1:
	r14 = rax
	// succ:  l00000000004054B5
l00000000004054B5:
	call wcwidth (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000405510
	// succ:  l00000000004054BE l0000000000405510
l00000000004054BE:
	rsi = r15 + r14
	rdx = rbx
	// succ:  l00000000004054C8
l00000000004054C8:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
	ecx = (word32) Mem0[rdi - 0x0000000000000001:byte]
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	SCZO = cond(r15 - rsi)
	Mem0[rdx - 0x0000000000000001:byte] = cl
	branch Test(NE,Z) l00000000004054C8
	// succ:  l00000000004054DD l00000000004054C8
l00000000004054DD:
	ax = (int16) al
	rbx = rbx + r14
	SCZO = cond(rbx)
	r12 = r12 + rax
	SCZO = cond(r12)
	// succ:  l00000000004054E5
l00000000004054E5:
	rdi = rbp + 0x00000000FFFFDFB0
	call mbsinit (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000405470
	// succ:  l00000000004054F9 l0000000000405470
l00000000004054F9:
	SCZO = cond(r15 - r13)
	branch Test(ULT,C) l0000000000405440
	// succ:  l0000000000405502 l0000000000405440
l0000000000405502:
	rbx = rbx - Mem0[rbp + 0x00000000FFFFDF98:word64]
	SCZO = cond(rbx)
	goto l0000000000405379
	// succ:  l0000000000405379
l0000000000405510:
	Mem0[rbx:byte] = 0x3F
	r15 = r15 + r14
	SCZO = cond(r15)
	r12 = r12 + 0x0000000000000001
	SCZO = cond(r12)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	goto l00000000004054E5
	// succ:  l00000000004054E5
l0000000000405520:
	SCZO = cond(al - 0x41)
	branch Test(LT,SO) l0000000000405460
	// succ:  l0000000000405528 l0000000000405460
l0000000000405528:
	SCZO = cond(al - 0x5F)
	branch Test(LE,SZO) l0000000000405538
	// succ:  l000000000040552C l0000000000405538
l000000000040552C:
	edx = rax - 0x0000000000000061
	SCZO = cond(dl - 0x1D)
	branch Test(UGT,CZ) l0000000000405460
	// succ:  l0000000000405538 l0000000000405460
l0000000000405538:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
	Mem0[rbx:byte] = al
	r12 = r12 + 0x0000000000000001
	SCZO = cond(r12)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(r15 - r13)
	branch Test(ULT,C) l0000000000405440
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
	Mem0[rbx:byte] = al
	r12 = r12 + 0x0000000000000001
	SCZO = cond(r12)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(r15 - r13)
	branch Test(ULT,C) l0000000000405440
	// succ:  l000000000040554F l0000000000405440
l000000000040554F:
	goto l0000000000405502
	// succ:  l0000000000405502
l0000000000405551:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
	Mem0[rbx:byte] = 0x3F
	r12 = r12 + 0x0000000000000001
	SCZO = cond(r12)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(r15 - r13)
	branch Test(ULT,C) l0000000000405440
	// succ:  l0000000000405569 l0000000000405440
l0000000000405569:
	goto l0000000000405502
	// succ:  l0000000000405502
l000000000040556B:
	r15 = r13
	Mem0[rbx:byte] = 0x3F
	r12 = r12 + 0x0000000000000001
	SCZO = cond(r12)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(r15 - r13)
	branch Test(ULT,C) l0000000000405440
	// succ:  l0000000000405582 l0000000000405440
l0000000000405582:
	goto l0000000000405502
	// succ:  l0000000000405502
l0000000000405590:
	rax = rbx + 0x000000000000001F
	rsi = rbx + 0x0000000000000001
	r8 = r13
	rcx = 0xFFFFFFFFFFFFFFFF
	rdx = r14
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SZO = cond(rax)
	C = false
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = rsp + 0x000000000000000F
	Mem0[rbp + 0x00000000FFFFDF98:word64] = rax
	v23 = Mem0[rbp + 0x00000000FFFFDF98:word64] & 0xFFFFFFFFFFFFFFF0
	Mem0[rbp + 0x00000000FFFFDF98:word64] = v23
	SZO = cond(Mem0[rbp + 0x00000000FFFFDF98:word64])
	C = false
	rdi = Mem0[rbp + 0x00000000FFFFDF98:word64]
	call fn000000000040E6F0 (retsize: 8;)
	goto l0000000000405343
	// succ:  l0000000000405343
l00000000004055D1:
	r14 = Mem0[r13 + 0x00000000FFFFDF98:word64]
	r12 = r14 + rbx
	SCZO = cond(r14 - r12)
	branch Test(UGE,C) l0000000000405602
	// succ:  l00000000004055E1 l0000000000405602
l00000000004055E1:
	call __ctype_b_loc (retsize: 8;)
	rdx = r14
	// succ:  l00000000004055E9
l00000000004055E9:
	esi = (word32) Mem0[rdx:byte]
	rcx = Mem0[rax:word64]
	SZO = cond(Mem0[rcx + 0x0000000000000001 + rsi * 0x02:byte] & 0x40)
	C = false
	branch Test(NE,Z) l00000000004055F9
	// succ:  l00000000004055F6 l00000000004055F9
l00000000004055F6:
	Mem0[rdx:byte] = 0x3F
	// succ:  l00000000004055F9
l00000000004055F9:
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	SCZO = cond(rdx - r12)
	branch Test(NE,Z) l00000000004055E9
	// succ:  l0000000000405602 l00000000004055E9
l0000000000405602:
	r12 = rbx
	r12 = rbx
	goto l0000000000405379
	// succ:  l0000000000405379
l000000000040560A:
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	goto l0000000000405379
	// succ:  l0000000000405379
l0000000000405612:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	goto l0000000000405379
	// succ:  l0000000000405379
l000000000040561C:
	__stack_chk_fail()
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rax = Mem0[rsi + 0x0000000000000018:word64]
	rbp = Mem0[rsi + 0x0000000000000010:word64]
	r12 = rax
	r12 = r12 - rbp
	SCZO = cond(r12)
	r12d = r12d >>u 0x0000000000000003
	SCZO = cond(r12d)
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l00000000004056DB
	// succ:  l0000000000405649_thunk_fn000000000040564F l0000000000405649_thunk_fn000000000040564F
l0000000000405649_thunk_fn000000000040564F:
	call fn000000000040564F (retsize: 0;)
	return
	// succ:  fn00000000004052D0_exit
l0000000000405649_thunk_fn000000000040564F:
	call fn000000000040564F (retsize: 0;)
	return
	// succ:  fn00000000004052D0_exit
fn00000000004052D0_exit:


// fn0000000000405630
// Return size: 0
void fn0000000000405630()
fn0000000000405630_entry:
	// succ:  l0000000000405630
l0000000000405630:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rax = Mem0[rsi + 0x0000000000000018:word64]
	rbp = Mem0[rsi + 0x0000000000000010:word64]
	r12 = rax
	r12 = r12 - rbp
	SCZO = cond(r12)
	r12d = r12d >>u 0x0000000000000003
	SCZO = cond(r12d)
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l00000000004056DB_in_fn0000000000405630
	// succ:  l0000000000405649_thunk_fn000000000040564F l00000000004056DB_in_fn0000000000405630
l0000000000405649_thunk_fn000000000040564F:
	call fn000000000040564F (retsize: 0;)
	return
	// succ:  fn0000000000405630_exit l0000000000405649_thunk_fn000000000040564F
l0000000000405649_thunk_fn000000000040564F:
	call fn000000000040564F (retsize: 0;)
	return
	// succ:  fn0000000000405630_exit
l00000000004056DB_in_fn0000000000405630:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405630_exit
fn0000000000405630_exit:


// fn000000000040564F
// Return size: 0
void fn000000000040564F()
fn000000000040564F_entry:
	goto l000000000040564F
	// succ:  l000000000040564F
l0000000000402400_in_fn00000000004052D0:
	call Mem0[0x000000000061A148:word32] (retsize: 4;)
	return
	// succ:  fn000000000040564F_exit
l000000000040564F:
	SCZO = cond(rax - rbp)
	branch Test(EQ,Z) l00000000004056E6
	// succ:  l0000000000405658 l00000000004056E6
l0000000000405658:
	rcx = (int64) Mem0[rsi + 0x0000000000000030:word32]
	edx = ecx
	rax = rax + rcx
	SCZO = cond(rax)
	rcx = Mem0[rsi + 0x0000000000000020:word64]
	edx = ~edx
	rdx = (int64) edx
	rdx = rdx & rax
	SZO = cond(rdx)
	C = false
	rax = Mem0[rsi + 0x0000000000000008:word64]
	rbx = rcx
	Mem0[rsi + 0x0000000000000018:word64] = rdx
	rbx = rbx - rax
	SCZO = cond(rbx)
	rdx = rdx - rax
	SCZO = cond(rdx)
	SCZO = cond(rdx - rbx)
	branch Test(GT,SZO) l00000000004056E0
	// succ:  l0000000000405683 l00000000004056E0
l0000000000405683:
	rax = Mem0[rsi + 0x0000000000000018:word64]
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	Mem0[rsi + 0x0000000000000010:word64] = rax
	rsi = Mem0[0x000000000061A610:word64]
	call fputs_unlocked (retsize: 8;)
	// succ:  l00000000004056A0
l00000000004056A0:
	rdx = Mem0[rbp + 0x0000000000000000 + rbx * 0x0000000000000008:word64]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = 0x00413759
	edi = 0x00000001
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	SCZO = cond(r12 - rbx)
	branch Test(UGT,CZ) l00000000004056A0
	// succ:  l00000000004056BF l00000000004056A0
l00000000004056BF:
	rdi = Mem0[0x000000000061A610:word64]
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l00000000004056EF
	// succ:  l00000000004056D0 l00000000004056EF
l00000000004056D0:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
	// succ:  l00000000004056DB
l00000000004056DB:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040564F_exit
l00000000004056E0:
	Mem0[rsi + 0x0000000000000018:word64] = rcx
	goto l0000000000405683
	// succ:  l0000000000405683
l00000000004056E6:
	v22 = Mem0[rsi + 0x0000000000000050:byte] | 0x02
	Mem0[rsi + 0x0000000000000050:byte] = v22
	SZO = cond(Mem0[rsi + 0x0000000000000050:byte])
	C = false
	goto l0000000000405658
	// succ:  l0000000000405658
l00000000004056EF:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	esi = 0x0000000A
	goto l0000000000402400_in_fn00000000004052D0
	// succ:  l0000000000402400_in_fn00000000004052D0
fn000000000040564F_exit:


// fn0000000000405700
// Return size: 8
void fn0000000000405700()
fn0000000000405700_entry:
	// succ:  l0000000000405700
l0000000000405700:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = edx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000405780
	// succ:  l0000000000405710 l0000000000405780
l0000000000405710:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	call fn000000000040D420 (retsize: 8;)
	rsi = Mem0[0x000000000061A610:word64]
	ebx = ebx - eax
	SCZO = cond(ebx)
	eax = 0x00000000
	branch Test(NS,S) l0000000000405728
	// succ:  l0000000000405725_1 l0000000000405728
l0000000000405725_1:
	ebx = eax
	// succ:  l0000000000405728
l0000000000405728:
	rdi = rbp
	call fputs_unlocked (retsize: 8;)
	rdi = rbp
	rbp = (int64) ebx
	rax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(rbp)
	// succ:  l0000000000405740
l0000000000405740:
	rdi = Mem0[0x000000000061A610:word64]
	rcx = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rcx - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l0000000000405799
	// succ:  l0000000000405751 l0000000000405799
l0000000000405751:
	rdx = rcx + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rcx:byte] = 0x20
	// succ:  l000000000040575C
l000000000040575C:
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	SCZO = cond(ebx - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000405740
	// succ:  l0000000000405764 l0000000000405740
l0000000000405764:
	rax = Mem0[0x000000000061B018:word64]
	rax = rbp + 0x0000000000000001 + rax
	Mem0[0x000000000061B018:word64] = rax
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405700_exit
l0000000000405780:
	rcx = rsi
	edi = 0x00000001
	esi = 0x0041375E
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rbp = (int64) ebx
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	goto l0000000000405764
	// succ:  l0000000000405764
l0000000000405799:
	esi = 0x00000020
	call __overflow (retsize: 8;)
	goto l000000000040575C
	// succ:  l000000000040575C
fn0000000000405700_exit:


// fn00000000004057B0
// Return size: 8
void fn00000000004057B0()
fn00000000004057B0_entry:
	// succ:  l00000000004057B0
l00000000004057B0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	eax = 0x00413764
	ebx = edi
	rsp = rsp - 0x0000000000000010
	SCZO = cond(rsp)
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004057CB
	// succ:  l00000000004057C0 l00000000004057CB
l00000000004057C0:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l00000000004057E0
	// succ:  l00000000004057CB l00000000004057E0
l00000000004057CB:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	edx = esi
	rsi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = rax
	// succ:  l00000000004057D8_thunk_fn0000000000405700
l00000000004057D8_thunk_fn0000000000405700:
	call fn0000000000405700 (retsize: 8;)
	return
	// succ:  fn00000000004057B0_exit
l00000000004057E0:
	Mem0[rsp + 0x000000000000000C:word32] = esi
	call fn000000000040C9B0 (retsize: 8;)
	esi = Mem0[rsp + 0x000000000000000C:word32]
	goto l00000000004057CB
	// succ:  l00000000004057CB
fn00000000004057B0_exit:


// fn0000000000405810
// Return size: 8
void fn0000000000405810()
fn0000000000405810_entry:
	// succ:  l0000000000405810
l0000000000405810:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12d = edi
	rdi = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rsi
	call fn000000000040EAB0 (retsize: 8;)
	rbp = rax
	rax = __errno_location()
	esi = Mem0[rax:word32]
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rcx = rbp
	rdx = rbx
	call error (retsize: 8;)
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l0000000000405850
	// succ:  l0000000000405840 l0000000000405850
l0000000000405840:
	Mem0[0x000000000061B030:word32] = 0x00000002
	// succ:  l000000000040584A
l000000000040584A:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405810_exit
l0000000000405850:
	eax = Mem0[0x000000000061B030:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040584A
	// succ:  l000000000040585A l000000000040584A
l000000000040585A:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	Mem0[0x000000000061B030:word32] = 0x00000001
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405810_exit
fn0000000000405810_exit:


// fn0000000000405C20
// Return size: 8
void fn0000000000405C20()
fn0000000000405C20_entry:
	// succ:  l0000000000405C20
l0000000000405C20:
	rsp = fp
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l0000000000405C40
	// succ:  l0000000000405C25 l0000000000405C40
l0000000000405C25:
	eax = esi
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00008000)
	branch Test(NE,Z) l0000000000405CA0
	// succ:  l0000000000405C33 l0000000000405CA0
l0000000000405C33:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000405CB0
	// succ:  l0000000000405C3E l0000000000405CB0
l0000000000405C3E:
	return
	// succ:  fn0000000000405C20_exit
l0000000000405C40:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(edx - 0x00000005)
	branch Test(EQ,Z) l0000000000405C3E
	// succ:  l0000000000405C47 l0000000000405C3E
l0000000000405C47:
	SCZO = cond(edx - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(edx - 0x00000003)
	al = Test(EQ,Z)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	// succ:  l0000000000405C55
l0000000000405C55:
	SZO = cond(cl & cl)
	C = false
	eax = 0x0000002F
	branch Test(NE,Z) l0000000000405C3E
	// succ:  l0000000000405C5E l0000000000405C3E
l0000000000405C5E:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(EQ,Z) l0000000000405CF0
	// succ:  l0000000000405C6B l0000000000405CF0
l0000000000405C6B:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l0000000000405CC0
	// succ:  l0000000000405C70 l0000000000405CC0
l0000000000405C70:
	esi = esi & 0x0000F000
	SZO = cond(esi)
	C = false
	eax = 0x00000040
	SCZO = cond(esi - 0x0000A000)
	branch Test(EQ,Z) l0000000000405C3E
	// succ:  l0000000000405C83 l0000000000405C3E
l0000000000405C83:
	SCZO = cond(esi - 0x00001000)
	eax = 0x0000007C
	branch Test(EQ,Z) l0000000000405C3E
	// succ:  l0000000000405C90 l0000000000405C3E
l0000000000405C90:
	SCZO = cond(esi - 0x0000C000)
	al = Test(EQ,Z)
	goto l0000000000405CE2
	// succ:  l0000000000405CE2
l0000000000405CA0:
	SCZO = cond(eax - 0x00004000)
	cl = Test(EQ,Z)
	goto l0000000000405C55
	// succ:  l0000000000405C55
l0000000000405CB0:
	esi = esi & 0x00000049
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = ~eax
	eax = eax & 0x0000002A
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000405C20_exit
l0000000000405CC0:
	SCZO = cond(edx - 0x00000006)
	eax = 0x00000040
	branch Test(EQ,Z) l0000000000405C3E
	// succ:  l0000000000405CCE l0000000000405C3E
l0000000000405CCE:
	SCZO = cond(edx - 0x00000001)
	eax = 0x0000007C
	branch Test(EQ,Z) l0000000000405C3E
	// succ:  l0000000000405CDC l0000000000405C3E
l0000000000405CDC:
	SCZO = cond(edx - 0x00000007)
	al = Test(EQ,Z)
	// succ:  l0000000000405CE2
l0000000000405CE2:
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	eax = eax & 0x0000003D
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000405C20_exit
l0000000000405CF0:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000405C20_exit
fn0000000000405C20_exit:


// fn0000000000405D00
// Return size: 8
void fn0000000000405D00()
fn0000000000405D00_entry:
	// succ:  l0000000000405D00
l0000000000405D00:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	edi = (word32) dil
	call fn0000000000405C20 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	ebx = eax
	branch Test(EQ,Z) l0000000000405D33
	// succ:  l0000000000405D10 l0000000000405D33
l0000000000405D10:
	rdi = Mem0[0x000000000061A610:word64]
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l0000000000405D3A
	// succ:  l0000000000405D21 l0000000000405D3A
l0000000000405D21:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = bl
	// succ:  l0000000000405D2B
l0000000000405D2B:
	v17 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v17
	SCZO = cond(v17)
	// succ:  l0000000000405D33
l0000000000405D33:
	SZO = cond(bl & bl)
	C = false
	al = Test(NE,Z)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405D00_exit
l0000000000405D3A:
	esi = (word32) bl
	call __overflow (retsize: 8;)
	goto l0000000000405D2B
	// succ:  l0000000000405D2B
fn0000000000405D00_exit:


// fn0000000000405D50
// Return size: 8
void fn0000000000405D50()
fn0000000000405D50_entry:
	goto l0000000000405D50
	// succ:  l0000000000405D50
l0000000000000000_thunk_fn0000000000405EF3:
	call fn0000000000405EF3 (retsize: 0;)
	return
	// succ:  fn0000000000405D50_exit
l0000000000405D50:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	rsp = rsp - 696
	SCZO = cond(rsp)
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x00000000000002A8:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	branch Test(EQ,Z) l0000000000405D92
	// succ:  l0000000000405D7A l0000000000405D92
l0000000000405D7A:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000004)
	branch Test(EQ,Z) l0000000000405EA0
	// succ:  l0000000000405D87 l0000000000405EA0
l0000000000405D87:
	rbx = (int64) Mem0[0x000000000061B178:word32]
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	// succ:  l0000000000405D92
l0000000000405D92:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000405DB6
	// succ:  l0000000000405D9B l0000000000405DB6
l0000000000405D9B:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000004)
	branch Test(EQ,Z) l0000000000405E58
	// succ:  l0000000000405DA8 l0000000000405E58
l0000000000405DA8:
	rax = (int64) Mem0[0x000000000061B174:word32]
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	// succ:  l0000000000405DB3
l0000000000405DB3:
	rbx = rbx + rax
	SCZO = cond(rbx)
	// succ:  l0000000000405DB6
l0000000000405DB6:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000405DD6
	// succ:  l0000000000405DBF l0000000000405DD6
l0000000000405DBF:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000004)
	branch Test(EQ,Z) l0000000000405E40
	// succ:  l0000000000405DC8 l0000000000405E40
l0000000000405DC8:
	rax = (int64) Mem0[0x000000000061B16C:word32]
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	// succ:  l0000000000405DD3
l0000000000405DD3:
	rbx = rbx + rax
	SCZO = cond(rbx)
	// succ:  l0000000000405DD6
l0000000000405DD6:
	rdx = Mem0[0x000000000061B0E8:word64]
	rsi = Mem0[rbp + 0x0000000000000000:word64]
	rcx = rsp + 0x0000000000000008
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	call fn00000000004052D0 (retsize: 8;)
	eax = Mem0[0x000000000061B12C:word32]
	rbx = rbx + Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rbx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000405E1C
	// succ:  l0000000000405DFC l0000000000405E1C
l0000000000405DFC:
	edi = (word32) Mem0[rbp + 0x00000000000000B0:byte]
	edx = Mem0[rbp + 0x00000000000000A0:word32]
	esi = Mem0[rbp + 0x0000000000000028:word32]
	call fn0000000000405C20 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	al = Test(NE,Z)
	eax = (word32) al
	rbx = rbx + rax
	SCZO = cond(rbx)
	// succ:  l0000000000405E1C
l0000000000405E1C:
	rdx = Mem0[rsp + 0x00000000000002A8:word64]
	rdx = rdx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rdx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000405EBF
	// succ:  l0000000000405E36 l0000000000405EBF
l0000000000405E36:
	rsp = rsp + 696
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405D50_exit
l0000000000405E40:
	rdi = Mem0[rbp + 0x00000000000000A8:word64]
	rax = strlen(rdi)
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	goto l0000000000405DD3
	// succ:  l0000000000405DD3
l0000000000405E58:
	SCZO = cond(Mem0[rbp + 0x00000000000000B0:byte] - 0x00)
	eax = 0x00000002
	branch Test(EQ,Z) l0000000000405DB3
	// succ:  l0000000000405E6A l0000000000405DB3
l0000000000405E6A:
	rdi = Mem0[rbp + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = rsp + 0x0000000000000010
	edx = Mem0[0x000000000061B140:word32]
	ecx = 0x00000200
	call fn000000000040BD70 (retsize: 8;)
	rdi = rax
	rax = strlen(rdi)
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	goto l0000000000405DB3
	// succ:  l0000000000405DB3
l0000000000405EA0:
	rdi = Mem0[rdi + 0x0000000000000018:word64]
	rsi = rsp + 0x0000000000000010
	call fn000000000040CD70 (retsize: 8;)
	rdi = rax
	rax = strlen(rdi)
	rbx = rax + 0x0000000000000001
	goto l0000000000405D92
	// succ:  l0000000000405D92
l0000000000405EBF:
	__stack_chk_fail()
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rdx = Mem0[0x000000000061B1B0:word64]
	rax = Mem0[0x000000000061B020:word64]
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	SCZO = cond(rax - rdx)
	r12d = edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdx
	branch Test(UGT,CZ) l0000000000405EF3
	// succ:  l0000000000405EEF_1 l0000000000405EEF_thunk_fn0000000000405EF3
l0000000000405EEF_1:
	rbx = rax
	goto l0000000000000000_thunk_fn0000000000405EF3
	// succ:  l0000000000000000_thunk_fn0000000000405EF3
l0000000000405EEF_thunk_fn0000000000405EF3:
	call fn0000000000405EF3 (retsize: 0;)
	return
	// succ:  fn0000000000405D50_exit
fn0000000000405D50_exit:


// fn0000000000405ED0
// Return size: 0
void fn0000000000405ED0()
fn0000000000405ED0_entry:
	// succ:  l0000000000405ED0
l0000000000405ED0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rdx = Mem0[0x000000000061B1B0:word64]
	rax = Mem0[0x000000000061B020:word64]
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	SCZO = cond(rax - rdx)
	r12d = edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdx
	branch Test(UGT,CZ) l0000000000405EEF_thunk_fn0000000000405EF3
	// succ:  l0000000000405EEF_1 l0000000000405EEF_thunk_fn0000000000405EF3
l0000000000405EEF_1:
	rbx = rax
	// succ:  l0000000000405EEF_thunk_fn0000000000405EF3
l0000000000405EEF_thunk_fn0000000000405EF3:
	call fn0000000000405EF3 (retsize: 0;)
	return
	// succ:  fn0000000000405ED0_exit l0000000000405EEF_thunk_fn0000000000405EF3
l0000000000405EEF_thunk_fn0000000000405EF3:
	call fn0000000000405EF3 (retsize: 0;)
	return
	// succ:  fn0000000000405ED0_exit
fn0000000000405ED0_exit:


// fn0000000000405EF3
// Return size: 0
void fn0000000000405EF3()
fn0000000000405EF3_entry:
	// succ:  l0000000000405EF3
l0000000000405EF3:
	SCZO = cond(rbx - Mem0[0x000000000061A660:word64])
	branch Test(ULE,CZ) l00000000004060C8
	// succ:  l0000000000405F00 l00000000004060C8
l0000000000405F00:
	rdx = rax
	rdi = Mem0[0x000000000061B028:word64]
	rdx = rdx >>u 0x0000000000000001
	SCZO = cond(rdx)
	SCZO = cond(rbx - rdx)
	branch Test(ULT,C) l0000000000406170
	// succ:  l0000000000405F16 l0000000000406170
l0000000000405F16:
	r10 = 0x00000000AAAAAAAA
	SCZO = cond(rax - rdx)
	branch Test(UGT,CZ) l000000000040619D
	// succ:  l0000000000405F29 l000000000040619D
l0000000000405F29:
	rsi = rax + rax * 0x0000000000000002
	rsi = rsi << 0x0000000000000003
	SCZO = cond(rsi)
	call fn0000000000410C90 (retsize: 8;)
	rbp = Mem0[0x000000000061B020:word64]
	Mem0[0x000000000061B028:word64] = rax
	// succ:  l0000000000405F44
l0000000000405F44:
	rax = Mem0[0x000000000061A660:word64]
	rdi = rbp
	rsi = rbp + 0x0000000000000001 + rax
	rdi = rdi - rax
	SCZO = cond(rdi)
	rcx = rsi
	rcx = rcx *s rdi
	SCZO = cond(rcx)
	SCZO = cond(rbp - rsi)
	branch Test(UGT,CZ) l000000000040619D
	// succ:  l0000000000405F66 l000000000040619D
l0000000000405F66:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rcx
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	SCZO = cond(rsi - rax)
	branch Test(NE,Z) l000000000040619D
	// succ:  l0000000000405F77 l000000000040619D
l0000000000405F77:
	rcx = rcx >>u 0x0000000000000001
	SCZO = cond(rcx)
	r8 = 0x00000000FFFFFFFF
	SCZO = cond(rcx - rax)
	branch Test(UGT,CZ) l000000000040619D
	// succ:  l0000000000405F8D l000000000040619D
l0000000000405F8D:
	rdi = 0x00000000 + rcx * 0x0000000000000008
	call fn0000000000410C40 (retsize: 8;)
	rcx = Mem0[0x000000000061A660:word64]
	SCZO = cond(rbp - rcx)
	branch Test(ULE,CZ) l0000000000405FE4
	// succ:  l0000000000405FA6 l0000000000405FE4
l0000000000405FA6:
	rsi = Mem0[0x000000000061B028:word64]
	rdx = rcx + rcx * 0x0000000000000002
	rdi = rbp + 0x0000000000000000 + rbp * 0x0000000000000002
	rcx = 0x00000008 + rcx * 0x0000000000000008
	rdx = rsi + rdx * 0x0000000000000008
	rsi = rsi + rdi * 0x0000000000000008
	// succ:  l0000000000405FD0
l0000000000405FD0:
	Mem0[rdx + 0x0000000000000010:word64] = rax
	rdx = rdx + 0x0000000000000018
	SCZO = cond(rdx)
	rax = rax + rcx
	SCZO = cond(rax)
	rcx = rcx + 0x0000000000000008
	SCZO = cond(rcx)
	SCZO = cond(rdx - rsi)
	branch Test(NE,Z) l0000000000405FD0
	// succ:  l0000000000405FE4 l0000000000405FD0
l0000000000405FE4:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	Mem0[0x000000000061A660:word64] = rbp
	r8 = Mem0[0x000000000061B1B0:word64]
	rsi = Mem0[0x000000000061B028:word64]
	branch Test(NE,Z) l00000000004060E0
	// succ:  l0000000000406004 l00000000004060E0
l0000000000406004:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000040612D
	// succ:  l000000000040600F l000000000040612D
l000000000040600F:
	// succ:  l0000000000406010
l0000000000406010:
	rax = Mem0[0x000000000061B1A8:word64]
	rdi = Mem0[rax + rbp * 0x0000000000000008:word64]
	call fn0000000000405D50 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	r11 = rax
	r14 = Mem0[0x000000000061B1B0:word64]
	branch Test(EQ,Z) l0000000000406120
	// succ:  l0000000000406033 l0000000000406120
l0000000000406033:
	r13 = Mem0[0x000000000061B0C8:word64]
	rsi = Mem0[0x000000000061B028:word64]
	ecx = 0x00000001
	rdi = rsi - 0x0000000000000001
	goto l00000000004060A7
	// succ:  l00000000004060A7
l0000000000406050:
	rax = rdi + rcx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	r8 = rax
	rax = rbp
	rdx = rdx_rax % r8
	rax = rdx_rax /u r8
	SCZO = cond(rax)
	r8 = rcx
	r10 = rax
	// succ:  l000000000040606A
l000000000040606A:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(r9 - r10)
	al = Test(NE,Z)
	rdx = r11 + rax * 0x0000000000000002
	rax = Mem0[rsi + 0x0000000000000010:word64]
	rax = rax + r10 * 0x0000000000000008
	r9 = Mem0[r8:word64]
	SCZO = cond(rdx - r9)
	branch Test(ULE,CZ) l000000000040609A
	// succ:  l0000000000406086 l000000000040609A
l0000000000406086:
	r10 = rdx
	r10 = r10 - r9
	SCZO = cond(r10)
	v27 = Mem0[r14 + 0x0000000000000008:word64] + r10
	Mem0[r14 + 0x0000000000000008:word64] = v27
	SCZO = cond(v27)
	Mem0[rax:word64] = rdx
	SCZO = cond(Mem0[r14 + 0x0000000000000008:word64] - r13)
	Mem0[rsi:byte] = Test(ULT,C)
	// succ:  l000000000040609A
l000000000040609A:
	rsi = rsi + 0x0000000000000018
	SCZO = cond(rsi)
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l0000000000406120
	// succ:  l00000000004060A7 l0000000000406120
l00000000004060A7:
	SCZO = cond(Mem0[rsi:byte] - 0x00)
	r9 = r9 - 0x0000000000000001
	r8 = rcx
	branch Test(EQ,Z) l000000000040609A
	SCZO = cond(Mem0[rsi:byte] - 0x00)
	r9 = r9 - 0x0000000000000001
	r8 = rcx
	branch Test(EQ,Z) l000000000040609A
	// succ:  l00000000004060B3 l000000000040609A
l00000000004060B3:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(NE,Z) l0000000000406050
	SZO = cond(r12b & r12b)
	C = false
	branch Test(NE,Z) l0000000000406050
	// succ:  l00000000004060B8 l0000000000406050
l00000000004060B8:
	rax = rbp
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	r8 = rcx
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	r10 = rdx
	rax = rbp
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	r8 = rcx
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	r10 = rdx
	goto l000000000040606A
	// succ:  l000000000040606A
l00000000004060C8:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	r8 = rdx
	rsi = Mem0[0x000000000061B028:word64]
	branch Test(EQ,Z) l0000000000406004
	// succ:  l00000000004060DD l0000000000406004
l00000000004060DD:
l00000000004060E0:
	rdi = rax + 0x0000000000000001
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[rsi:byte] = 0x01
	rdx = rdi + rdi * 0x0000000000000002
	Mem0[rsi + 0x0000000000000008:word64] = rdx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	// succ:  l00000000004060F8
l00000000004060F8:
	Mem0[rcx + rdx * 0x0000000000000008:word64] = 0x0000000000000003
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	SCZO = cond(rdx - rax)
	branch Test(ULE,CZ) l00000000004060F8
	// succ:  l0000000000406109 l00000000004060F8
l0000000000406109:
	rsi = rsi + 0x0000000000000018
	SCZO = cond(rsi)
	SCZO = cond(rdi - rbx)
	branch Test(EQ,Z) l0000000000406004
	// succ:  l0000000000406116 l0000000000406004
l0000000000406116:
	rax = rdi
	goto l00000000004060E0
	// succ:  l00000000004060E0
l0000000000406120:
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	SCZO = cond(rbp - r14)
	branch Test(ULT,C) l0000000000406010
	// succ:  l000000000040612D l0000000000406010
l000000000040612D:
	SCZO = cond(rbx - 0x0000000000000001)
	branch Test(ULE,CZ) l0000000000406164
	// succ:  l0000000000406133 l0000000000406164
l0000000000406133:
	rdx = Mem0[0x000000000061B028:word64]
	rax = rbx + rbx * 0x0000000000000002
	rax = rax << 0x0000000000000003
	SCZO = cond(rax)
	SCZO = cond(Mem0[rdx - 0x0000000000000018 + rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000406164
	// succ:  l0000000000406149 l0000000000406164
l0000000000406149:
	rax = rax + rdx
	SCZO = cond(rax)
	goto l000000000040615A
	// succ:  l000000000040615A
l0000000000406150:
	rax = rax - 0x0000000000000018
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax - 0x0000000000000018:byte] - 0x00)
	branch Test(NE,Z) l0000000000406164
	// succ:  l000000000040615A l0000000000406164
l000000000040615A:
	rbx = rbx - 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0x0000000000000001)
	branch Test(NE,Z) l0000000000406150
	rbx = rbx - 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0x0000000000000001)
	branch Test(NE,Z) l0000000000406150
	// succ:  l0000000000406164 l0000000000406150
l0000000000406164:
	rax = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	rax = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000405EF3_exit fn0000000000405EF3_exit
l0000000000406170:
	r8 = 0x0000000055555555
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l000000000040619D
	// succ:  l000000000040617F l000000000040619D
l000000000040617F:
	rbp = rbx + rbx
	rsi = rbp + 0x0000000000000000 + rbx
	rsi = rsi << 0x0000000000000004
	SCZO = cond(rsi)
	call fn0000000000410C90 (retsize: 8;)
	Mem0[0x000000000061B028:word64] = rax
	goto l0000000000405F44
	// succ:  l0000000000405F44
l000000000040619D:
	call fn0000000000410E50 (retsize: 8;)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	ebp = edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x0000000000000018:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406248
	// succ:  l00000000004061CF_thunk_fn0000000000406248 l00000000004061CF_thunk_fn0000000000406248
l00000000004061CF_thunk_fn0000000000406248:
	call fn0000000000406248 (retsize: 0;)
	return
	// succ:  fn0000000000405EF3_exit
l00000000004061CF_thunk_fn0000000000406248:
	call fn0000000000406248 (retsize: 0;)
	return
	// succ:  fn0000000000405EF3_exit
fn0000000000405EF3_exit:


// fn00000000004061B0
// Return size: 0
void fn00000000004061B0()
fn00000000004061B0_entry:
	// succ:  l00000000004061B0
l00000000004061B0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	ebp = edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x0000000000000018:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l00000000004061CF_thunk_fn0000000000406248
	// succ:  l00000000004061CF_thunk_fn00000000004061D1 l00000000004061CF_thunk_fn0000000000406248
l00000000004061CF_thunk_fn00000000004061D1:
	call fn00000000004061D1 (retsize: 0;)
	return
	// succ:  fn00000000004061B0_exit l00000000004061CF_thunk_fn00000000004061D1
l00000000004061CF_thunk_fn00000000004061D1:
	call fn00000000004061D1 (retsize: 0;)
	return
	// succ:  fn00000000004061B0_exit
l00000000004061CF_thunk_fn0000000000406248:
	call fn0000000000406248 (retsize: 0;)
	return
	// succ:  fn00000000004061B0_exit
fn00000000004061B0_exit:


// fn00000000004061D1
// Return size: 0
void fn00000000004061D1()
fn00000000004061D1_entry:
	call fn0000000000406248 (retsize: 0;)
	return
	// succ:  l00000000004061D1 fn00000000004061D1_exit
l00000000004061D1:
	r8d = ebp
	ecx = 0x0041375A
	edx = 0x00000015
	esi = 0x00000001
	rdi = rsp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0, 32)
	rbx = rsp
	rax = rsp
	// succ:  l00000000004061F3
l00000000004061F3:
	ecx = Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	SCZO = cond(rax)
	edx = rcx + 0x00000000FEFEFEFF
	ecx = ~ecx
	edx = edx & ecx
	SZO = cond(edx)
	C = false
	edx = edx & 0x80808080
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
	// succ:  l000000000040620B l00000000004061F3
l000000000040620B:
	ecx = edx
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
	// succ:  l0000000000406216_1 l0000000000406219
l0000000000406216_1:
	edx = ecx
	// succ:  l0000000000406219
l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
	// succ:  l000000000040621D_2 l0000000000406221
l000000000040621D_2:
	rax = rcx
	// succ:  l0000000000406221
l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	SCZO = cond(rax)
	edx = eax
	edx = edx - ebx
	SCZO = cond(edx)
	// succ:  l000000000040622B
l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	eax = edx
	branch Test(NE,Z) l0000000000406269
	// succ:  l000000000040623D l0000000000406269
l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000000004061D1_exit
l0000000000406269:
	__stack_chk_fail()
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	r8d = Mem0[r14 + 0x00000000000000A0:word64]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x0000000000000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x0000000000000003)
	sil = Test(EQ,Z)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
	// succ:  l00000000004062A1 l00000000004062C8
l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
	// succ:  l00000000004062A5 l00000000004062B8
l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	eax = 0x00000001
	branch Test(EQ,Z) l00000000004062B8
	// succ:  l00000000004062AE l00000000004062B8
l00000000004062AE:
	return
	// succ:  fn00000000004061D1_exit
l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
	goto l000000000040A7D0
	// succ:  l000000000040A7D0
l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
	// succ:  l00000000004062CC l00000000004062A1
l00000000004062CC:
	eax = 0xFFFFFFFF
	return
	// succ:  fn00000000004061D1_exit
l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	SCZO = cond(rsp)
	rax = DPB(rax, strcmp(rdi, rsi), 0, 32)
	r13d = eax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
	// succ:  l000000000040A7F1 l000000000040A838
l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
	// succ:  l000000000040A7FC l000000000040AAE7
l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
	// succ:  l000000000040A806 l000000000040A838
l000000000040A806:
	eax = (word32) dl
	esi = 0x0000002E
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
	// succ:  l000000000040A812 l000000000040A81D
l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A838
	// succ:  l000000000040A81D l000000000040A838
l000000000040A81D:
	eax = (word32) cl
	edi = 0x0000002E
	edi = edi - eax
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
	// succ:  l000000000040A829 l000000000040A848
l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	eax = 0x00000001
	branch Test(NE,Z) l000000000040A848
	// succ:  l000000000040A834 l000000000040A848
l000000000040A834:
l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000000004061D1_exit
l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
	// succ:  l000000000040A84C l000000000040A85D
l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
	// succ:  l000000000040A852 l000000000040A85D
l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A838
	// succ:  l000000000040A85D l000000000040A838
l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
	// succ:  l000000000040A865 l000000000040A9A0
l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
	// succ:  l000000000040A86E l000000000040AAC0
l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
	// succ:  l000000000040A877 l000000000040A9B4
l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	call fn000000000040A730 (retsize: 8;)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	call fn000000000040A730 (retsize: 8;)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
	// succ:  l000000000040A89B_1 l000000000040A8A0
l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
	// succ:  l000000000040A8A0
l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	SCZO = cond(r10)
	r12 = r12 - rbx
	SCZO = cond(r12)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
	// succ:  l000000000040A8B2 l000000000040AAF1
l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
	// succ:  l000000000040A8BB l000000000040AA8B
l000000000040A8BB:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	ebx = 0xFFFFFFFF
	// succ:  l000000000040A8C6
l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
	// succ:  l000000000040A8CF l000000000040A971
l000000000040A8CF:
	goto l000000000040AB07
	// succ:  l000000000040AB07
l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int64) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
	// succ:  l000000000040A8E7 l000000000040A9D4
l000000000040A8E7:
	eax = (int32) r9b
	eax = eax - 0x00000030
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
	// succ:  l000000000040A8F7 l000000000040A9D4
l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
	// succ:  l000000000040A900 l000000000040AB18
l000000000040A900:
	edx = (word32) Mem0[rbx + r8:byte]
	// succ:  l000000000040A905
l000000000040A905:
	esi = (word32) dl
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
	// succ:  l000000000040A912 l000000000040A925
l000000000040A912:
	eax = esi
	eax = eax & 0xFFFFFFDF
	SZO = cond(eax)
	C = false
	eax = eax - 0x00000041
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
	// succ:  l000000000040A923 l000000000040AA68
l000000000040A923:
	eax = esi
	// succ:  l000000000040A925
l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
	// succ:  l000000000040A92E l000000000040AB1F
l000000000040A92E:
	r9d = (word64) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	// succ:  l000000000040A934
l000000000040A934:
	esi = (word32) r9b
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
	// succ:  l000000000040A942 l000000000040A961
l000000000040A942:
	edx = esi
	edi = esi
	edx = edx & 0xFFFFFFDF
	SZO = cond(edx)
	C = false
	edx = edx - 0x00000041
	SCZO = cond(edx)
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
	// succ:  l000000000040A951 l000000000040A961
l000000000040A951:
	esi = esi + 0x00000100
	SCZO = cond(esi)
	SCZO = cond(r9b - 0x7E)
	edi = esi
	branch Test(NE,Z) l000000000040A961
	// succ:  l000000000040A95D_1 l000000000040A961
l000000000040A95D_1:
	edi = r11d
	// succ:  l000000000040A961
l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
	// succ:  l000000000040A969 l000000000040AA80
l000000000040A969:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	// succ:  l000000000040A971
l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
	// succ:  l000000000040A97A l000000000040A8D8
l000000000040A97A:
	esi = (word32) Mem0[rbx + r8:byte]
	eax = (int32) sil
	eax = eax - 0x00000030
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
	// succ:  l000000000040A98F l000000000040A8D8
l000000000040A98F:
	edx = esi
	goto l000000000040A905
	// succ:  l000000000040A905
l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
	// succ:  l000000000040A9AA l000000000040A865
l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
	// succ:  l000000000040A9B4 l000000000040A865
l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	eax = 0x00000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	eax = 0x00000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn00000000004061D1_exit fn00000000004061D1_exit
l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	// succ:  l000000000040A9D4
l000000000040A9D4:
	edx = (word32) Mem0[rbx + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
	// succ:  l000000000040A9DE l000000000040A9D0
l000000000040A9DE:
	goto l000000000040A9EA
	// succ:  l000000000040A9EA
l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int64) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	// succ:  l000000000040A9EA
l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
	// succ:  l000000000040A9F0 l000000000040A9E0
l000000000040A9F0:
	eax = (int32) dl
	eax = eax - 0x00000030
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
	// succ:  l000000000040AA03 l000000000040AADB
l000000000040AA03:
	eax = eax - 0x00000030
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
	// succ:  l000000000040AA0B l000000000040A9B4
l000000000040AA0B:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040AA22
	// succ:  l000000000040AA22
l000000000040AA10:
	r9d = (int64) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	esi = esi - 0x00000030
	SCZO = cond(esi)
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
	// succ:  l000000000040AA22 l000000000040A9B4
l000000000040AA22:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
	// succ:  l000000000040AA26 l000000000040AA2C
l000000000040AA26:
	eax = (int32) dl
	eax = eax - r9d
	SCZO = cond(eax)
	eax = (int32) dl
	eax = eax - r9d
	SCZO = cond(eax)
	// succ:  l000000000040AA2C
l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	edx = (word32) Mem0[rbx + r8:byte]
	esi = (int32) dl
	esi = esi - 0x00000030
	SCZO = cond(esi)
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
	// succ:  l000000000040AA44 l000000000040AA10
l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	edx = edx - 0x00000030
	SCZO = cond(edx)
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
	// succ:  l000000000040AA55 l000000000040AAE7
l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
	// succ:  l000000000040AA5D l000000000040A8C6
l000000000040AA5D:
	goto l000000000040A838
	// succ:  l000000000040A838
l000000000040AA68:
	esi = esi + 0x00000100
	SCZO = cond(esi)
	SCZO = cond(dl - 0x7E)
	eax = esi
	branch Test(NE,Z) l000000000040AA77
	// succ:  l000000000040AA73_1 l000000000040AA77
l000000000040AA73_1:
	eax = r11d
	// succ:  l000000000040AA77
l000000000040AA77:
	goto l000000000040A925
	// succ:  l000000000040A925
l000000000040AA80:
	eax = eax - edi
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
	// succ:  l000000000040AA82_1 l000000000040AA86
l000000000040AA82_1:
	eax = r13d
	// succ:  l000000000040AA86
l000000000040AA86:
	goto l000000000040A838
	// succ:  l000000000040A838
l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
	// succ:  l000000000040AAA4 l000000000040A8BB
l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	SCZO = cond(r12)
	r10 = r10 - rbp
	SCZO = cond(r10)
	goto l000000000040A8BB
	// succ:  l000000000040A8BB
l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	SCZO = cond(cl - 0x2E)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A877
	// succ:  l000000000040AAD6 l000000000040A877
l000000000040AAD6:
	goto l000000000040A838
	// succ:  l000000000040A838
l000000000040AADB:
	eax = eax - 0x00000030
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
	// succ:  l000000000040AAE7 l000000000040A8C6
l000000000040AAE7:
	eax = 0xFFFFFFFF
	eax = 0xFFFFFFFF
	goto l000000000040A838
	// succ:  l000000000040A838
l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SCZO = cond(r10)
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
	// succ:  l000000000040AB02 l000000000040A8BB
l000000000040AB02:
	goto l000000000040A8B2
	// succ:  l000000000040A8B2
l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
	// succ:  l000000000040AB10 l000000000040A971
l000000000040AB10:
	eax = r13d
	goto l000000000040A838
	// succ:  l000000000040A838
l000000000040AB18:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040A934
	// succ:  l000000000040A934
l000000000040AB1F:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	goto l000000000040A961
	// succ:  l000000000040A961
fn00000000004061D1_exit:


// fn0000000000406248
// Return size: 0
void fn0000000000406248()
fn0000000000406248_entry:
	// succ:  l0000000000406248
l0000000000406248:
	call fn000000000040C9B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l00000000004061D1
	goto l0000000000406259
	// succ:  l0000000000406259 l0000000000406253_thunk_fn00000000004061D1
l0000000000406253_thunk_fn00000000004061D1:
	call fn00000000004061D1 (retsize: 0;)
	return
	// succ:  fn0000000000406248_exit
l0000000000406259:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	call fn000000000040D420 (retsize: 8;)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
	// succ:  l0000000000406264_1 l0000000000406267
l0000000000406264_1:
	edx = eax
	// succ:  l0000000000406267
l0000000000406267:
	call fn00000000004061D1 (retsize: 0;)
	return
	// succ:  l000000000040622B fn0000000000406248_exit
fn0000000000406248_exit:


// fn0000000000406400
// Return size: 0
void fn0000000000406400()
fn0000000000406400_entry:
	// succ:  l0000000000406400
l0000000000406400:
	rsp = fp
	SCZO = cond(Mem0[0x000000000061A408:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000406418
	// succ:  l000000000040640A l0000000000406418
l000000000040640A:
	edi = 0x0061A400
	// succ:  l000000000040640F_thunk_fn0000000000406440
l000000000040640F_thunk_fn0000000000406440:
	call fn0000000000406440 (retsize: 0;)
	return
	// succ:  fn0000000000406400_exit
l0000000000406418:
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	edi = 0x0061A3E0
	call fn0000000000406440 (retsize: 8;)
	edi = 0x0061A410
	call fn0000000000406440 (retsize: 8;)
	edi = 0x0061A3F0
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	// succ:  l0000000000406439_thunk_fn0000000000406440
l0000000000406439_thunk_fn0000000000406440:
	call fn0000000000406440 (retsize: 0;)
	return
	// succ:  fn0000000000406400_exit
fn0000000000406400_exit:


// fn0000000000406440
// Return size: 0
void fn0000000000406440()
fn0000000000406440_entry:
	goto l0000000000406440
	// succ:  l0000000000406440
l00000000004026C0:
	call Mem0[0x000000000061A2A8:word32] (retsize: 4;)
	return
	// succ:  fn0000000000406440_exit
l0000000000406440:
	rsp = fp
	rsp = rsp - 0x0000000000000018
	SCZO = cond(rsp)
	SCZO = cond(Mem0[0x000000000061B128:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406470
	// succ:  l000000000040644D l0000000000406470
l000000000040644D:
	rsi = Mem0[rdi:word64]
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000001
	rdi = Mem0[rdi + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000018
	SCZO = cond(rsp)
	goto l00000000004026C0
	// succ:  l00000000004026C0
l0000000000406470:
	Mem0[rsp + 0x0000000000000008:word64] = rdi
	Mem0[0x000000000061B128:byte] = 0x01
	call fn0000000000406400 (retsize: 8;)
	rdi = Mem0[rsp + 0x0000000000000008:word64]
	goto l000000000040644D
	// succ:  l000000000040644D
fn0000000000406440_exit:


// fn0000000000406490
// Return size: 8
void fn0000000000406490()
fn0000000000406490_entry:
	// succ:  l0000000000406490
l0000000000406490:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp + 0xFFFFFFFFFFFFFF80
	SCZO = cond(rsp)
	goto l00000000004064EF
	// succ:  l00000000004064EF
l00000000004064A0:
	rdi = Mem0[0x000000000061A610:word64]
	call fflush_unlocked (retsize: 8;)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rdx = rsp
	esi = 0x0061B040
	call sigprocmask (retsize: 8;)
	ebx = Mem0[0x000000000061B038:word32]
	eax = Mem0[0x000000000061B034:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000406528
	// succ:  l00000000004064CB l0000000000406528
l00000000004064CB:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ebx = 0x00000013
	Mem0[0x000000000061B034:word32] = eax
	// succ:  l00000000004064D9
l00000000004064D9:
	edi = ebx
	call raise (retsize: 8;)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rsi = rsp
	edi = 0x00000002
	call sigprocmask (retsize: 8;)
	// succ:  l00000000004064EF
l00000000004064EF:
	eax = Mem0[0x000000000061B038:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000406503
	// succ:  l00000000004064F9 l0000000000406503
l00000000004064F9:
	eax = Mem0[0x000000000061B034:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000406538
	// succ:  l0000000000406503 l0000000000406538
l0000000000406503:
	SCZO = cond(Mem0[0x000000000061B128:byte] - 0x00)
	branch Test(EQ,Z) l00000000004064A0
	// succ:  l000000000040650C l00000000004064A0
l000000000040650C:
	edi = 0x0061A3E0
	call fn0000000000406440 (retsize: 8;)
	edi = 0x0061A3F0
	call fn0000000000406440 (retsize: 8;)
	goto l00000000004064A0
	// succ:  l00000000004064A0
l0000000000406528:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = ebx
	rax = signal(rdi, rsi)
	goto l00000000004064D9
	// succ:  l00000000004064D9
l0000000000406538:
	rsp = rsp - 0xFFFFFFFFFFFFFF80
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000406490_exit
fn0000000000406490_exit:


// fn0000000000406540
// Return size: 8
void fn0000000000406540()
fn0000000000406540_entry:
	// succ:  l0000000000406540
l0000000000406540:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rcx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	SZO = cond(sil & sil)
	C = false
	rdx = Mem0[rdi:word64]
	r12 = Mem0[r15 + 0x0000000000000008:word64]
	branch Test(EQ,Z) l00000000004069BD
	// succ:  l0000000000406567 l00000000004069BD
l0000000000406567:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(NE,Z) l0000000000406580
	// succ:  l0000000000406570 l0000000000406580
l0000000000406570:
	r14d = r14d ^ r14d
	SZO = cond(r14d)
	C = false
	goto l00000000004066FF
	// succ:  l00000000004066FF
l0000000000406580:
	r14d = (word64) Mem0[r13 + 0x00000000000000B1:byte]
	r15d = Mem0[r13 + 0x00000000000000A4:word64]
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l00000000004065B0
	// succ:  l0000000000406594 l00000000004065B0
l0000000000406594:
	edi = 0x0000000C
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	edx = 0x0000000C
	branch Test(NE,Z) l00000000004066B0
	// succ:  l00000000004065AB l00000000004066B0
l00000000004065AB:
l00000000004065B0:
	SCZO = cond(Mem0[rbp + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000406628
	// succ:  l00000000004065B9 l0000000000406628
l00000000004065B9:
	eax = Mem0[rbp + 0x00000000000000A0:word32]
	edx = Mem0[0x00412C60 + rax * 0x00000004:word32]
	SCZO = cond(edx - 0x00000005)
	branch Test(NE,Z) l0000000000406680
	// succ:  l00000000004065CF l0000000000406680
l00000000004065CF:
	rdi = r12
	rax = strlen(rdi)
	rbp = Mem0[0x000000000061B120:word64]
	r14 = rax
	r15 = r12 + rax
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000406619
	// succ:  l00000000004065EA l0000000000406619
l00000000004065EA:
	// succ:  l00000000004065F0
l00000000004065F0:
	rdx = Mem0[rbp + 0x0000000000000000:word64]
	SCZO = cond(r14 - rdx)
	branch Test(ULT,C) l0000000000406610
	// succ:  l00000000004065F9 l0000000000406610
l00000000004065F9:
	rsi = Mem0[rbp + 0x0000000000000008:word64]
	rdi = r15
	rdi = rdi - rdx
	SCZO = cond(rdi)
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004068A0
	// succ:  l0000000000406610 l00000000004068A0
l0000000000406610:
	rbp = Mem0[rbp + 0x0000000000000020:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(NE,Z) l00000000004065F0
	// succ:  l0000000000406619 l00000000004065F0
l0000000000406619:
	edx = 0x00000005
	goto l00000000004066B0
	// succ:  l00000000004066B0
l0000000000406628:
	eax = r15d
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000406868
	// succ:  l000000000040663B l0000000000406868
l000000000040663B:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l00000000004068E0
	// succ:  l0000000000406646 l00000000004068E0
l0000000000406646:
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000406859
	// succ:  l0000000000406651 l0000000000406859
l0000000000406651:
	SCZO = cond(eax - 0x00001000)
	edx = 0x00000008
	branch Test(EQ,Z) l00000000004066B0
	// succ:  l000000000040665D l00000000004066B0
l000000000040665D:
	SCZO = cond(eax - 0x0000C000)
	dl = 0x09
	branch Test(EQ,Z) l00000000004066B0
	// succ:  l0000000000406666 l00000000004066B0
l0000000000406666:
	SCZO = cond(eax - 0x00006000)
	dl = 0x0A
	branch Test(EQ,Z) l00000000004066B0
	// succ:  l000000000040666F l00000000004066B0
l000000000040666F:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(eax - 0x00002000)
	dl = Test(NE,Z)
	edx = rdx + 0x000000000000000B + rdx
	goto l00000000004066B0
	// succ:  l00000000004066B0
l0000000000406680:
	SCZO = cond(edx - 0x00000007)
	al = Test(EQ,Z)
	r14d = r14d & eax
	SZO = cond(r14d)
	C = false
	// succ:  l0000000000406689
l0000000000406689:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l00000000004066B0
	// succ:  l000000000040668E l00000000004066B0
l000000000040668E:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	edx = 0x0000000D
	branch Test(NE,Z) l00000000004066B0
	// succ:  l000000000040669C l00000000004066B0
l000000000040669C:
	edi = 0x0000000D
	call fn0000000000404CD0 (retsize: 8;)
	SCZO = cond(al - 0x01)
	edx = edx - edx - C
	SCZO = cond(edx)
	edx = edx & 0xFFFFFFFA
	SZO = cond(edx)
	C = false
	edx = edx + 0x0000000D
	SCZO = cond(edx)
	// succ:  l00000000004066B0
l00000000004066B0:
	ebp = edx
	rbp = rbp << 0x0000000000000004
	SCZO = cond(rbp)
	rbp = rbp + 6398944
	SCZO = cond(rbp)
	// succ:  l00000000004066C0
l00000000004066C0:
	SCZO = cond(Mem0[rbp + 0x0000000000000008:word64] - 0x0000000000000000)
	edi = 0x00000004
	branch Test(EQ,Z) l0000000000406890
	// succ:  l00000000004066D0 l0000000000406890
l00000000004066D0:
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000406840
	// succ:  l00000000004066DD l0000000000406840
l00000000004066DD:
	edi = 0x0061A3E0
	esi = 0x00000001
	call fn0000000000406440 (retsize: 8;)
	rdi = rbp
	call fn0000000000406440 (retsize: 8;)
	edi = 0x0061A3F0
	call fn0000000000406440 (retsize: 8;)
	// succ:  l00000000004066FF
l00000000004066FF:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004067D8
	// succ:  l0000000000406708 l00000000004067D8
l0000000000406708:
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406732
	// succ:  l0000000000406711 l0000000000406732
l0000000000406711:
	rax = Mem0[rbx + 0x0000000000000018:word64]
	rdx = rax + 0x0000000000000008
	SCZO = cond(Mem0[rbx + 0x0000000000000020:word64] - rdx)
	branch Test(ULT,C) l0000000000406820
	// succ:  l0000000000406723 l0000000000406820
l0000000000406723:
	rdx = Mem0[0x000000000061B018:word64]
	Mem0[rax:word64] = rdx
	v19 = Mem0[rbx + 0x0000000000000018:word64] + 0x0000000000000008
	Mem0[rbx + 0x0000000000000018:word64] = v19
	SCZO = cond(v19)
	// succ:  l0000000000406732
l0000000000406732:
	rdx = Mem0[0x000000000061B0E8:word64]
	rdi = Mem0[0x000000000061A610:word64]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	rsi = r12
	call fn00000000004052D0 (retsize: 8;)
	rdx = rax
	rdx = rdx + Mem0[0x000000000061B018:word64]
	SCZO = cond(rdx)
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	rbp = rax
	Mem0[0x000000000061B018:word64] = rdx
	branch Test(EQ,Z) l0000000000406781
	// succ:  l0000000000406767 l0000000000406781
l0000000000406767:
	rax = Mem0[rbx + 0x0000000000000018:word64]
	rcx = rax + 0x0000000000000008
	SCZO = cond(Mem0[rbx + 0x0000000000000020:word64] - rcx)
	branch Test(ULT,C) l0000000000406800
	// succ:  l0000000000406779 l0000000000406800
l0000000000406779:
	Mem0[rax:word64] = rdx
	v34 = Mem0[rbx + 0x0000000000000018:word64] + 0x0000000000000008
	Mem0[rbx + 0x0000000000000018:word64] = v34
	SCZO = cond(v34)
	// succ:  l0000000000406781
l0000000000406781:
	call fn0000000000406490 (retsize: 8;)
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l00000000004067A0
	// succ:  l000000000040678B l00000000004067A0
l000000000040678B:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rax = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000406540_exit
l00000000004067A0:
	call fn0000000000406400 (retsize: 8;)
	rcx = Mem0[0x000000000061B0C8:word64]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = r13
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rsi = rax
	rax = rbp - 0x0000000000000001 + r13
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l000000000040678B
	// succ:  l00000000004067C6 l000000000040678B
l00000000004067C6:
	edi = 0x0061A550
	call fn0000000000406440 (retsize: 8;)
	goto l000000000040678B
	// succ:  l000000000040678B
l00000000004067D8:
	rdx = Mem0[0x000000000061B0E8:word64]
	rdi = Mem0[0x000000000061A610:word64]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	rsi = r12
	call fn00000000004052D0 (retsize: 8;)
	rbp = rax
	v23 = Mem0[0x000000000061B018:word64] + rax
	Mem0[0x000000000061B018:word64] = v23
	SCZO = cond(v23)
	goto l0000000000406781
	// succ:  l0000000000406781
l0000000000406800:
	esi = 0x00000008
	rdi = rbx
	call _obstack_newchunk (retsize: 8;)
	rax = Mem0[rbx + 0x0000000000000018:word64]
	rdx = Mem0[0x000000000061B018:word64]
	goto l0000000000406779
	// succ:  l0000000000406779
l0000000000406820:
	esi = 0x00000008
	rdi = rbx
	call _obstack_newchunk (retsize: 8;)
	rax = Mem0[rbx + 0x0000000000000018:word64]
	goto l0000000000406723
	// succ:  l0000000000406723
l0000000000406840:
	edi = 0x0061A3E0
	call fn0000000000406440 (retsize: 8;)
	edi = 0x0061A3F0
	call fn0000000000406440 (retsize: 8;)
	goto l00000000004066DD
	// succ:  l00000000004066DD
l0000000000406859:
	edx = 0x00000007
	goto l0000000000406689
	// succ:  l0000000000406689
l0000000000406868:
	SZO = cond(r15d & 0x00000800)
	C = false
	branch Test(EQ,Z) l00000000004068B8
	// succ:  l0000000000406871 l00000000004068B8
l0000000000406871:
	edi = 0x00000010
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004068B8
	// succ:  l000000000040687F l00000000004068B8
l000000000040687F:
	edx = 0x00000010
	goto l00000000004066B0
	// succ:  l00000000004066B0
l0000000000406890:
	call fn0000000000404CD0 (retsize: 8;)
	r14d = eax
	goto l00000000004066FF
	// succ:  l00000000004066FF
l00000000004068A0:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000406619
	// succ:  l00000000004068A9 l0000000000406619
l00000000004068A9:
	rbp = rbp + 0x0000000000000010
	SCZO = cond(rbp)
	goto l00000000004066C0
	// succ:  l00000000004066C0
l00000000004068B8:
	SZO = cond(r15d & 0x00000400)
	C = false
	branch Test(EQ,Z) l000000000040693B
	// succ:  l00000000004068C1 l000000000040693B
l00000000004068C1:
	edi = 0x00000011
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040693B
	// succ:  l00000000004068CF l000000000040693B
l00000000004068CF:
	edx = 0x00000011
	goto l00000000004066B0
	// succ:  l00000000004066B0
l00000000004068E0:
	eax = r15d
	eax = eax & 0x00000202
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000202)
	branch Test(EQ,Z) l00000000004069A1
	// succ:  l00000000004068F3 l00000000004069A1
l00000000004068F3:
	SZO = cond(r15b & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000406910
	// succ:  l00000000004068F9 l0000000000406910
l00000000004068F9:
	edi = 0x00000013
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	edx = 0x00000013
	branch Test(NE,Z) l00000000004066B0
	// succ:  l0000000000406910 l00000000004066B0
l0000000000406910:
	r15d = r15d & 0x00000200
	SZO = cond(r15d)
	C = false
	edx = 0x00000006
	branch Test(EQ,Z) l00000000004066B0
	// succ:  l0000000000406922 l00000000004066B0
l0000000000406922:
	edi = 0x00000012
	call fn0000000000404CD0 (retsize: 8;)
	SCZO = cond(al - 0x01)
	edx = edx - edx - C
	SCZO = cond(edx)
	edx = edx & 0xFFFFFFF4
	SZO = cond(edx)
	C = false
	edx = edx + 0x00000012
	SCZO = cond(edx)
	goto l00000000004066B0
	// succ:  l00000000004066B0
l000000000040693B:
	edi = 0x00000015
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040695C
	// succ:  l0000000000406949 l000000000040695C
l0000000000406949:
	SCZO = cond(Mem0[rbp + 0x00000000000000B8:byte] - 0x00)
	branch Test(EQ,Z) l000000000040695C
	// succ:  l0000000000406952 l000000000040695C
l0000000000406952:
	edx = 0x00000015
	goto l00000000004066B0
	// succ:  l00000000004066B0
l000000000040695C:
	r15d = r15d & 0x0000000000000049
	SZO = cond(r15d)
	C = false
	branch Test(EQ,Z) l000000000040697A
	// succ:  l0000000000406962 l000000000040697A
l0000000000406962:
	edi = 0x0000000E
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040697A
	// succ:  l0000000000406970 l000000000040697A
l0000000000406970:
	edx = 0x0000000E
	goto l00000000004066B0
	// succ:  l00000000004066B0
l000000000040697A:
	SCZO = cond(Mem0[rbp + 0x0000000000000020:word64] - 0x0000000000000001)
	branch Test(ULE,CZ) l00000000004065CF
	// succ:  l0000000000406985 l00000000004065CF
l0000000000406985:
	edi = 0x00000016
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004065CF
	// succ:  l0000000000406997 l00000000004065CF
l0000000000406997:
	edx = 0x00000016
	goto l00000000004066B0
	// succ:  l00000000004066B0
l00000000004069A1:
	edi = 0x00000014
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	edx = 0x00000014
	branch Test(NE,Z) l00000000004066B0
	// succ:  l00000000004069B8 l00000000004066B0
l00000000004069B8:
	goto l00000000004068F3
	// succ:  l00000000004068F3
l00000000004069BD:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(NE,Z) l00000000004069D8
	// succ:  l00000000004069C6 l00000000004069D8
l00000000004069C6:
	r12 = rdx
	r14d = r14d ^ r14d
	SZO = cond(r14d)
	C = false
	goto l00000000004066FF
	// succ:  l00000000004066FF
l00000000004069D8:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406A08
	// succ:  l00000000004069E1 l0000000000406A08
l00000000004069E1:
	SCZO = cond(Mem0[rbp + 0x00000000000000B1:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406A20
	// succ:  l00000000004069EA l0000000000406A20
l00000000004069EA:
	r15d = Mem0[r13 + 0x00000000000000A4:word64]
	esi = 0x00000001
	// succ:  l00000000004069F7
l00000000004069F7:
	r14d = r14d ^ 0x0000000000000001
	SZO = cond(r14d)
	C = false
	r12 = rdx
	goto l00000000004065B0
	// succ:  l00000000004065B0
l0000000000406A08:
	r14d = (word64) Mem0[r13 + 0x00000000000000B1:byte]
	// succ:  l0000000000406A10
l0000000000406A10:
	r15d = Mem0[r13 + 0x0000000000000028:word64]
	goto l00000000004069F7
	// succ:  l00000000004069F7
l0000000000406A20:
	r14d = r14d ^ r14d
	SZO = cond(r14d)
	C = false
	goto l0000000000406A10
	// succ:  l0000000000406A10
fn0000000000406540_exit:


// fn0000000000406A30
// Return size: 8
void fn0000000000406A30()
fn0000000000406A30_entry:
	// succ:  l0000000000406A30
l0000000000406A30:
	rsp = fp
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406A4F
	// succ:  l0000000000406A39 l0000000000406A4F
l0000000000406A39:
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	edi = 0x00000004
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000406A58
	// succ:  l0000000000406A4B l0000000000406A58
l0000000000406A4B:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	// succ:  l0000000000406A4F
l0000000000406A4F:
	return
	// succ:  fn0000000000406A30_exit
l0000000000406A58:
	edi = 0x0061A3E0
	call fn0000000000406440 (retsize: 8;)
	edi = 0x0061A420
	call fn0000000000406440 (retsize: 8;)
	edi = 0x0061A3F0
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	// succ:  l0000000000406A75_thunk_fn0000000000406440
l0000000000406A75_thunk_fn0000000000406440:
	call fn0000000000406440 (retsize: 0;)
	return
	// succ:  fn0000000000406A30_exit
fn0000000000406A30_exit:


// fn0000000000406A80
// Return size: 8
void fn0000000000406A80()
fn0000000000406A80_entry:
	// succ:  l0000000000406A80
l0000000000406A80:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13d = ecx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rsi
	rsp = rsp - 272
	SCZO = cond(rsp)
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x0000000000000108:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x000000000061A748:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000406ADB
	// succ:  l0000000000406AB8 l0000000000406ADB
l0000000000406AB8:
	esi = 0x00413766
	rdi = rbx
	rax = strstr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	r14 = rax
	branch Test(EQ,Z) l0000000000406ADB
	// succ:  l0000000000406ACD l0000000000406ADB
l0000000000406ACD:
	rdi = rbx
	rax = strlen(rdi)
	SCZO = cond(rax - 0x0000000000000065)
	branch Test(ULE,CZ) l0000000000406B20
	// succ:  l0000000000406ADB l0000000000406B20
l0000000000406ADB:
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	rcx = rbp
	r9d = r13d
	rdx = rbx
	esi = 0x000003E9
	rdi = r12
	call fn0000000000410600 (retsize: 8;)
	rcx = Mem0[rsp + 0x0000000000000108:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	branch Test(NE,Z) l0000000000406B66
	// succ:  l0000000000406B07 l0000000000406B66
l0000000000406B07:
	rsp = rsp + 272
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000406A80_exit
l0000000000406B20:
	rdx = r14
	rsi = rbx
	ecx = 0x00000105
	rdx = rdx - rbx
	SCZO = cond(rdx)
	rdi = rsp
	rbx = rsp
	call __mempcpy_chk (retsize: 8;)
	rcx = (int64) Mem0[rbp + 0x0000000000000010:word32]
	rdi = rax
	rdx = rcx + rcx * 0x0000000000000004
	rdx = rdx << 0x0000000000000005
	SCZO = cond(rdx)
	rsi = rcx + 0x000000000061A760 + rdx
	call stpcpy (retsize: 8;)
	rsi = rsi + 0x0000000000000002
	rdi = rax
	rax = strcpy(rdi, rsi)
	goto l0000000000406ADB
	// succ:  l0000000000406ADB
l0000000000406B66:
	__stack_chk_fail()
fn0000000000406A80_exit:


// fn0000000000406B70
// Return size: 8
void fn0000000000406B70()
fn0000000000406B70_entry:
	goto l0000000000406B70
	// succ:  l0000000000406B70
l0000000000402550:
	call Mem0[0x000000000061A1F0:word32] (retsize: 4;)
	return
	// succ:  fn0000000000406B70_exit
l0000000000406B70:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 4792
	SCZO = cond(rsp)
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x00000000000012A8:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406E00
	// succ:  l0000000000406BA4 l0000000000406E00
l0000000000406BA4:
	r13 = rsp + 0x0000000000000040
	rdi = rdi + 0x0000000000000010
	rsi = r13
	call fn000000000040A600 (retsize: 8;)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
	// succ:  l0000000000406BC2 l0000000000406E41
l0000000000406BC2:
	Mem0[rsp + 0x000000000000004A:byte] = 0x00
	// succ:  l0000000000406BC7
l0000000000406BC7:
	eax = Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
	// succ:  l0000000000406BD6 l0000000000406E70
l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
	// succ:  l0000000000406BDC l0000000000407040
l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
	// succ:  l0000000000406BE5 l0000000000406E90
l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	Mem0[rsp + 0x0000000000000038:word64] = rax
	Mem0[rsp + 0x0000000000000030:word64] = rdx
	// succ:  l0000000000406BF7
l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = rsp + 0x0000000000000460
	rbp = r12
	branch Test(NE,Z) l0000000000407060
	// succ:  l0000000000406C0F l0000000000407060
l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
	// succ:  l0000000000406C18 l0000000000406C8F
l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	esi = 0x00413764
	branch Test(NE,Z) l0000000000407288
	// succ:  l0000000000406C2B l0000000000407288
l0000000000406C2B:
	r15d = Mem0[0x000000000061B174:word64]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdi = r14
	call fn000000000040D420 (retsize: 8;)
	r15d = r15d - eax
	SCZO = cond(r15d)
	SZO = cond(r15d & r15d)
	C = false
	eax = r15d
	branch Test(LE,SZO) l0000000000406F50
	// succ:  l0000000000406C4B l0000000000406F50
l0000000000406C4B:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edx = eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
	// succ:  l0000000000406C60
l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
	// succ:  l0000000000406C6D l0000000000406C60
l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
	// succ:  l0000000000406C74
l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(r14)
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
	// succ:  l0000000000406C8C l0000000000406F50
l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
	// succ:  l0000000000406C8F
l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	eax = 0x00413764
	branch Test(NE,Z) l0000000000407120
	// succ:  l0000000000406CA1 l0000000000407120
l0000000000406CA1:
	r9d = Mem0[0x000000000061B170:word64]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	ecx = 0x00413769
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0, 32)
	rdi = rbp
	rax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(rbp)
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
	// succ:  l0000000000406CE2 l00000000004070F0
l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
	// succ:  l0000000000406CEB l0000000000406D08
l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
	// succ:  l0000000000406CF4 l0000000000406D08
l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
	// succ:  l0000000000406D01 l0000000000407148
l0000000000406D01:
l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	SCZO = cond(rbp)
	call fputs_unlocked (retsize: 8;)
	v31 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v31
	SCZO = cond(v31)
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
	// succ:  l0000000000406D2E l0000000000407248
l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
	// succ:  l0000000000406D3B l0000000000407210
l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
	// succ:  l0000000000406D48 l00000000004071D0
l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
	// succ:  l0000000000406D58 l00000000004071F5
l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
	// succ:  l0000000000406D65 l0000000000406F60
l0000000000406D65:
	eax = Mem0[rbx + 0x0000000000000028:word32]
	eax = eax & 0x0000B000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
	eax = Mem0[rbx + 0x0000000000000028:word32]
	eax = eax & 0x0000B000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
	// succ:  l0000000000406D78 l00000000004072B0
l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	edx = Mem0[0x000000000061B134:word32]
	ecx = 0x00000001
	call fn000000000040BD70 (retsize: 8;)
	r14 = rax
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	edx = Mem0[0x000000000061B134:word32]
	ecx = 0x00000001
	call fn000000000040BD70 (retsize: 8;)
	r14 = rax
	// succ:  l0000000000406D9B
l0000000000406D9B:
	r13d = Mem0[0x000000000061B154:word64]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdi = r14
	call fn000000000040D420 (retsize: 8;)
	r13d = r13d - eax
	SCZO = cond(r13d)
	SZO = cond(r13d & r13d)
	C = false
	eax = r13d
	branch Test(LE,SZO) l0000000000406DDC
	r13d = Mem0[0x000000000061B154:word64]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdi = r14
	call fn000000000040D420 (retsize: 8;)
	r13d = r13d - eax
	SCZO = cond(r13d)
	SZO = cond(r13d & r13d)
	C = false
	eax = r13d
	branch Test(LE,SZO) l0000000000406DDC
	// succ:  l0000000000406DB7 l0000000000406DDC
l0000000000406DB7:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edx = eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edx = eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
	// succ:  l0000000000406DC8
l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
	// succ:  l0000000000406DD5 l0000000000406DC8
l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
	// succ:  l0000000000406DDC
l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(r14)
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
	// succ:  l0000000000406DF5 l0000000000406E98
l0000000000406DF5:
	rbp = r13
	goto l0000000000406DDC
	// succ:  l0000000000406DDC
l0000000000406E00:
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = rsp + 0x0000000000000040
	ecx = 0x00003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	Mem0[rsp + 0x0000000000000040:byte] = al
	r8 = 0x000000003F3F3F3F
	Mem0[rsp + 0x0000000000000041:word64] = rax
	Mem0[rbp + 0x0000000000000009:word16] = cx
	Mem0[rsp + 0x000000000000004B:byte] = 0x00
	branch Test(EQ,Z) l0000000000406BC2
	// succ:  l0000000000406E41 l0000000000406BC2
l0000000000406E41:
	eax = Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
	// succ:  l0000000000406E50 l0000000000407138
l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
	// succ:  l0000000000406E59 l0000000000406BC7
l0000000000406E59:
	eax = Mem0[0x000000000061B14C:word32]
	Mem0[rsp + 0x000000000000004A:byte] = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
	// succ:  l0000000000406E6D l0000000000406BD6
l0000000000406E6D:
l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	Mem0[rsp + 0x0000000000000038:word64] = rax
	Mem0[rsp + 0x0000000000000030:word64] = rdx
	goto l0000000000406BF7
	// succ:  l0000000000406BF7
l0000000000406E90:
	abort()
l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
	// succ:  l0000000000406E9C
l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
	// succ:  l0000000000406EB8 l0000000000406F80
l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
	// succ:  l0000000000406EC1 l0000000000407364
l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
	// succ:  l0000000000406EE2 l0000000000407380
l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
	// succ:  l0000000000406EE4 l0000000000406EEC
l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
	// succ:  l0000000000406EEC l0000000000407380
l0000000000406EEC:
	r8 = rdi
	// succ:  l0000000000406EEF
l0000000000406EEF:
	rdi = rdx + 0x00000000FF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
	// succ:  l0000000000406EFF l0000000000407268
l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	edi = 0x00000001
	branch Test(GT,SZO) l0000000000406F20
	// succ:  l0000000000406F09 l0000000000406F20
l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
	// succ:  l0000000000406F0E l0000000000406F20
l0000000000406F0E:
	edi = ecx
	edi = edi - r8d
	SCZO = cond(edi)
	edi = edi >>u 0x0000001F
	SCZO = cond(edi)
l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	call fn0000000000406A80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
	// succ:  l0000000000406F3B l0000000000406F6B
l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
	goto l0000000000406FBC
	// succ:  l0000000000406FBC
l0000000000406F50:
	rdx = rbp
	goto l0000000000406C74
	// succ:  l0000000000406C74
l0000000000406F60:
	esi = 0x00413764
	goto l0000000000406D9B
	// succ:  l0000000000406D9B
l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
	// succ:  l0000000000406F72 l0000000000406F3B
l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
	// succ:  l0000000000406F7F l0000000000407364
l0000000000406F7F:
l0000000000406F80:
	ecx = 0x00413764
	// succ:  l0000000000406F86
l0000000000406F86:
	r8d = Mem0[0x000000000061A3C4:word64]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
	// succ:  l0000000000406F96 l00000000004073B1
l0000000000406F96:
	rdi = r13
	ecx = 0x00413779
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0, 32)
	rdi = r13
	rax = strlen(rdi)
	r13 = r13 + rax
	SCZO = cond(r13)
	// succ:  l0000000000406FBC
l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	SCZO = cond(r13)
	rdi = r12
	call fputs_unlocked (retsize: 8;)
	edx = 0x0061AFC0
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rcx = r13
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	call fn0000000000406540 (retsize: 8;)
	edx = Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
	// succ:  l0000000000406FF9 l0000000000407160
l0000000000406FF9:
	eax = Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
	// succ:  l0000000000407003 l0000000000407012
l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	esi = Mem0[rbx + 0x0000000000000028:word32]
	call fn0000000000405D00 (retsize: 8;)
	// succ:  l0000000000407012
l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
	// succ:  l0000000000407029 l000000000040745A
l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000406B70_exit
l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	Mem0[rsp + 0x0000000000000038:word64] = rax
	Mem0[rsp + 0x0000000000000030:word64] = rdx
	goto l0000000000406BF7
	// succ:  l0000000000406BF7
l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	ecx = 0x00413764
	branch Test(EQ,Z) l0000000000407085
	// succ:  l000000000040706F l0000000000407085
l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
	// succ:  l0000000000407078 l0000000000407085
l0000000000407078:
	rsi = rsp + 0x0000000000000070
	call fn000000000040CD70 (retsize: 8;)
	r9 = rax
	// succ:  l0000000000407085
l0000000000407085:
	r12 = rsp + 0x0000000000000460
	r8d = Mem0[0x000000000061B178:word64]
	edx = 0x00000E3B
	ecx = 0x00413779
	esi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rdi = r12
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0, 32)
	rdx = r12
	// succ:  l00000000004070B0
l00000000004070B0:
	ecx = Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	SCZO = cond(rdx)
	eax = rcx + 0x00000000FEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	SZO = cond(eax)
	C = false
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
	// succ:  l00000000004070C7 l00000000004070B0
l00000000004070C7:
	ecx = eax
	rbp = rdx + 0x0000000000000002
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
	// succ:  l00000000004070D5_1 l00000000004070D8
l00000000004070D5_1:
	eax = ecx
	// succ:  l00000000004070D8
l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
	// succ:  l00000000004070D8_2 l00000000004070DC
l00000000004070D8_2:
	rbp = rdx
	// succ:  l00000000004070DC
l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
	goto l0000000000406C0F
	// succ:  l0000000000406C0F
l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000002
	esi = 0x00000001
	edi = 0x00413771
	call fwrite_unlocked (retsize: 8;)
	v33 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(v33)
	goto l0000000000406CE2
	// succ:  l0000000000406CE2
l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	call fn000000000040CD70 (retsize: 8;)
	goto l0000000000406CA1
	// succ:  l0000000000406CA1
l0000000000407138:
	Mem0[rsp + 0x000000000000004A:byte] = 0x2E
	goto l0000000000406BC7
	// succ:  l0000000000406BC7
l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
	// succ:  l0000000000407155 l0000000000406D58
l0000000000407155:
	goto l0000000000406D08
	// succ:  l0000000000406D08
l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
	// succ:  l000000000040716B l0000000000407012
l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000004
	esi = 0x00000001
	edi = 0x0041377E
	call fwrite_unlocked (retsize: 8;)
	rcx = r13 + 0x0000000000000004 + rbp
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	esi = 0x00000001
	rdi = rbx
	v44 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v44
	SCZO = cond(v44)
	call fn0000000000406540 (retsize: 8;)
	edx = Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
	// succ:  l00000000004071B0 l0000000000407012
l00000000004071B0:
	esi = Mem0[rbx + 0x00000000000000A4:word32]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edi = 0x00000001
	call fn0000000000405D00 (retsize: 8;)
	goto l0000000000407012
	// succ:  l0000000000407012
l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	edi = Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	esi = Mem0[0x000000000061B160:word32]
	call fn00000000004057B0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
	// succ:  l00000000004071F5 l0000000000406D58
l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	edx = Mem0[0x000000000061B16C:word32]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	call fn0000000000405700 (retsize: 8;)
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	edx = Mem0[0x000000000061B16C:word32]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	call fn0000000000405700 (retsize: 8;)
	goto l0000000000406D58
	// succ:  l0000000000406D58
l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	eax = Mem0[rbx + 0x0000000000000030:word32]
	edi = 0x00413764
	edx = Mem0[0x000000000061B164:word32]
	esi = eax
	branch Test(EQ,Z) l0000000000407238
	// succ:  l0000000000407229 l0000000000407238
l0000000000407229:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
	// succ:  l0000000000407238 l0000000000407415
l0000000000407238:
	call fn0000000000405700 (retsize: 8;)
	goto l0000000000406D3B
	// succ:  l0000000000406D3B
l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	edi = Mem0[rbx + 0x000000000000002C:word32]
	esi = Mem0[0x000000000061B168:word32]
	call fn00000000004057B0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000406D2E
	// succ:  l0000000000406D2E
l0000000000407268:
	edi = 0x00000000
	branch Test(GT,SZO) l0000000000406F20
	// succ:  l0000000000407273 l0000000000406F20
l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
	// succ:  l000000000040727C l0000000000406F20
l000000000040727C:
	goto l0000000000406EFF
	// succ:  l0000000000406EFF
l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = rsp + 0x0000000000000070
	edx = Mem0[0x000000000061B140:word32]
	ecx = 0x00000200
	call fn000000000040BD70 (retsize: 8;)
	r14 = rax
	goto l0000000000406C2B
	// succ:  l0000000000406C2B
l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	ebp = 0xFFFFFFFE
	r13d = r13d - Mem0[0x000000000061B15C:word32]
	SCZO = cond(r13d)
	r13d = r13d - Mem0[0x000000000061B158:word32]
	SCZO = cond(r13d)
	rdi = rax
	eax = (word32) al
	r13d = r13d + Mem0[0x000000000061B154:word32]
	SCZO = cond(r13d)
	rdi = rdi >>u 0x000000000000000C
	SCZO = cond(rdi)
	dil = dil & 0x00
	SZO = cond(dil)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	call fn000000000040CD70 (retsize: 8;)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14d = Mem0[0x000000000061B158:word64]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	SCZO = cond(rdx)
	eax = edx
	rdi = rdi >>u 0x0000000000000020
	SCZO = cond(rdi)
	eax = eax & 0x00000FFF
	SZO = cond(eax)
	C = false
	edi = edi & 0xFFFFF000
	SZO = cond(edi)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	call fn000000000040CD70 (retsize: 8;)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
	// succ:  l0000000000407324_1 l0000000000407328
l0000000000407324_1:
	r8d = r13d
	// succ:  l0000000000407328
l0000000000407328:
	r8d = r8d + Mem0[0x000000000061B15C:word32]
	SCZO = cond(r8d)
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	ecx = 0x00413774
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	rdi = rbp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0, 32)
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = rbp + 0x0000000000000001 + rax
	goto l0000000000406E9C
	// succ:  l0000000000406E9C
l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	call fn000000000040CCD0 (retsize: 8;)
	r9 = rax
	goto l0000000000406F86
	// succ:  l0000000000406F86
l0000000000407380:
	edi = 0x0061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	call fn000000000040AB30 (retsize: 8;)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
	goto l0000000000406EEF
	// succ:  l0000000000406EEF
l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
	// succ:  l00000000004073D3 l0000000000407403
l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	rdx = rax
	call fn0000000000406A80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r8d = Mem0[0x000000000061A3C4:word64]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
	// succ:  l00000000004073FA l0000000000407436
l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
	// succ:  l0000000000407403 l0000000000406F96
l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	goto l0000000000406F96
	// succ:  l0000000000406F96
l0000000000407415:
	edi = eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	call fn000000000040CB40 (retsize: 8;)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	edx = Mem0[rsp + 0x0000000000000010:word32]
	goto l0000000000407238
	// succ:  l0000000000407238
l0000000000407436:
	rdi = rsp + 0x0000000000000070
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	call fn000000000040D240 (retsize: 8;)
	rsp = rsp + 0x0000000000000008
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8d = eax
	goto l00000000004073FA
	// succ:  l00000000004073FA
l000000000040745A:
	__stack_chk_fail()
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	r8d = Mem0[r14 + 0x00000000000000A0:word64]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x0000000000000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x0000000000000003)
	r8b = Test(EQ,Z)
	eax = eax | r8d
	SZO = cond(eax)
	C = false
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
	// succ:  l000000000040748F l00000000004074B0
l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
	// succ:  l0000000000407493 l00000000004074C0
l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
	// succ:  l00000000004074A3 l00000000004074B8
l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
	// succ:  l00000000004074A5 l00000000004074C4
l00000000004074A5:
	rsi = rdx
	rdi = rax
	goto l0000000000402550
	// succ:  l0000000000402550
l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
	// succ:  l00000000004074B4 l000000000040748F
l00000000004074B4:
l00000000004074B8:
	eax = 0xFFFFFFFF
	return
	// succ:  fn0000000000406B70_exit
l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
	// succ:  l00000000004074C4 l0000000000407493
l00000000004074C4:
	eax = 0x00000001
	return
	eax = 0x00000001
	return
	// succ:  fn0000000000406B70_exit fn0000000000406B70_exit
fn0000000000406B70_exit:


// fn0000000000407870
// Return size: 8
void fn0000000000407870()
fn0000000000407870_entry:
	// succ:  l0000000000407870
l0000000000407870:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 680
	SCZO = cond(rsp)
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x0000000000000298:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call fn0000000000406A30 (retsize: 8;)
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	branch Test(NE,Z) l0000000000407970
	// succ:  l00000000004078A4 l0000000000407970
l00000000004078A4:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004078E0
	// succ:  l00000000004078AD l00000000004078E0
l00000000004078AD:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	ecx = 0x00413764
	branch Test(NE,Z) l00000000004079C0
	// succ:  l00000000004078BF l00000000004079C0
l00000000004078BF:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000004)
	esi = 0x00413779
	branch Test(EQ,Z) l00000000004078D4
	// succ:  l00000000004078CD_1 l00000000004078D4
l00000000004078CD_1:
	edx = Mem0[0x000000000061B174:word32]
	// succ:  l00000000004078D4
l00000000004078D4:
	edi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	// succ:  l00000000004078E0
l00000000004078E0:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407911
	// succ:  l00000000004078E9 l0000000000407911
l00000000004078E9:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000004)
	rcx = Mem0[rbx + 0x00000000000000A8:word64]
	branch Test(EQ,Z) l0000000000407900
	// succ:  l00000000004078F9_1 l0000000000407900
l00000000004078F9_1:
	edx = Mem0[0x000000000061B16C:word32]
	// succ:  l0000000000407900
l0000000000407900:
	esi = 0x00413779
	edi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	// succ:  l0000000000407911
l0000000000407911:
	rcx = rbp
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdi = rbx
	call fn0000000000406540 (retsize: 8;)
	rbp = rax
	eax = Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407948
	// succ:  l000000000040792D l0000000000407948
l000000000040792D:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	edx = Mem0[rbx + 0x00000000000000A0:word32]
	esi = Mem0[rbx + 0x0000000000000028:word32]
	call fn0000000000405D00 (retsize: 8;)
	eax = (word32) al
	rbp = rbp + rax
	SCZO = cond(rbp)
	// succ:  l0000000000407948
l0000000000407948:
	rsi = Mem0[rsp + 0x0000000000000298:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = rbp
	branch Test(NE,Z) l00000000004079E6
	// succ:  l0000000000407962 l00000000004079E6
l0000000000407962:
	rsp = rsp + 680
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000407870_exit
l0000000000407970:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	ecx = 0x00413764
	branch Test(EQ,Z) l0000000000407992
	// succ:  l000000000040797E l0000000000407992
l000000000040797E:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407992
	// succ:  l0000000000407987 l0000000000407992
l0000000000407987:
	rsi = rsp
	call fn000000000040CD70 (retsize: 8;)
	rcx = rax
	// succ:  l0000000000407992
l0000000000407992:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000004)
	esi = 0x00413779
	branch Test(EQ,Z) l00000000004079A7
	// succ:  l00000000004079A0_1 l00000000004079A7
l00000000004079A0_1:
	edx = Mem0[0x000000000061B178:word32]
	// succ:  l00000000004079A7
l00000000004079A7:
	edi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	goto l00000000004078A4
	// succ:  l00000000004078A4
l00000000004079C0:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	ecx = 0x00000200
	edx = Mem0[0x000000000061B140:word32]
	rsi = rsp
	call fn000000000040BD70 (retsize: 8;)
	rcx = rax
	goto l00000000004078BF
	// succ:  l00000000004078BF
l00000000004079E6:
	__stack_chk_fail()
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000004)
	branch Test(UGT,CZ) l0000000000407A46
	// succ:  l00000000004079F7_thunk_fn00000000004079F9 l00000000004079F7_thunk_fn00000000004079F9
l00000000004079F7_thunk_fn00000000004079F9:
	call fn00000000004079F9 (retsize: 0;)
	return
	// succ:  fn0000000000407870_exit
l00000000004079F7_thunk_fn00000000004079F9:
	call fn00000000004079F9 (retsize: 0;)
	return
	// succ:  fn0000000000407870_exit
fn0000000000407870_exit:


// fn00000000004079F0
// Return size: 0
void fn00000000004079F0()
fn00000000004079F0_entry:
	// succ:  l00000000004079F0
l00000000004079F0:
	rsp = fp
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000004)
	branch Test(UGT,CZ) l0000000000407A46_in_fn00000000004079F0
	// succ:  l00000000004079F7_thunk_fn00000000004079F9 l0000000000407A46_in_fn00000000004079F0
l00000000004079F7_thunk_fn00000000004079F9:
	call fn00000000004079F9 (retsize: 0;)
	return
	// succ:  fn00000000004079F0_exit l00000000004079F7_thunk_fn00000000004079F9
l00000000004079F7_thunk_fn00000000004079F9:
	call fn00000000004079F9 (retsize: 0;)
	return
	// succ:  fn00000000004079F0_exit
l0000000000407A46_in_fn00000000004079F0:
	return
	// succ:  fn00000000004079F0_exit
fn00000000004079F0_exit:


// fn00000000004079F9
// Return size: 0
void fn00000000004079F9()
fn00000000004079F9_entry:
	// succ:  l00000000004079F9
l00000000004079F9:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000038
	SCZO = cond(rsp)
	eax = Mem0[0x000000000061B150:word32]
	switch (rax) { l0000000000407C01 }
	goto l0000000000407C01
	// succ:  l0000000000407C01
l0000000000407A38:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	// succ:  l0000000000407A46
l0000000000407A46:
	return
	// succ:  fn00000000004079F9_exit
l0000000000407C01:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407A38
	// succ:  l0000000000407C11 l0000000000407A38
l0000000000407C11:
	// succ:  l0000000000407C18
l0000000000407C18:
	call fn0000000000406A30 (retsize: 8;)
	rax = Mem0[0x000000000061B1A8:word64]
	rdi = Mem0[rax + rbx * 0x0000000000000008:word64]
	call fn0000000000406B70 (retsize: 8;)
	rdi = Mem0[0x000000000061A610:word64]
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l0000000000407E6F
	// succ:  l0000000000407C42 l0000000000407E6F
l0000000000407C42:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
	// succ:  l0000000000407C4D
l0000000000407C4D:
	v15 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v15
	SCZO = cond(v15)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - rbx)
	branch Test(UGT,CZ) l0000000000407C18
	// succ:  l0000000000407C62 l0000000000407C18
l0000000000407C62:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l0000000000407A46
	// succ:  l0000000000407A46
l0000000000407E6F:
	esi = 0x0000000A
	call __overflow (retsize: 8;)
	goto l0000000000407C4D
	// succ:  l0000000000407C4D
fn00000000004079F9_exit:


// fn0000000000407EA0
// Return size: 8
void fn0000000000407EA0()
fn0000000000407EA0_entry:
	// succ:  l0000000000407EA0
l0000000000407EA0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13d = esi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 888
	SCZO = cond(rsp)
	Mem0[rbp + 0x00000000FFFFFC7C:word32] = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rbp - 0x0000000000000038:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rcx = Mem0[0x000000000061B1B0:word64]
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	r9 = Mem0[0x000000000061B1C0:word64]
	branch Test(EQ,Z) l0000000000408400
	// succ:  l0000000000407EED l0000000000408400
l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	esi = 0x000000C0
	rcx = rcx << 0x0000000000000006
	SCZO = cond(rcx)
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
	// succ:  l0000000000407F0B l0000000000408A18
l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
	// succ:  l0000000000407F15 l00000000004089E0
l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
	// succ:  l0000000000407F1F l0000000000408A00
l0000000000407F1F:
	ecx = esi
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ecx = ecx >>u 0x00000003
	SCZO = cond(ecx)
	SZO = cond(sil & 0x04)
	C = false
	// succ:  l0000000000407F2A
l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
	// succ:  l0000000000407F2A_1 l0000000000407F2D
l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
	goto l0000000000407F2A
	// succ:  l0000000000407F2A
l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
	// succ:  l0000000000407F33 l0000000000408360
l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
	// succ:  l0000000000407F3D l0000000000408340
l0000000000407F3D:
	esi = esi & 0x00000001
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
	// succ:  l0000000000407F46 l0000000000408338
l0000000000407F46:
	SCZO = cond(Mem0[rbp + 0x00000000FFFFFC7C:byte] - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
	// succ:  l0000000000407F62 l0000000000408220
l0000000000407F62:
	ecx = Mem0[0x000000000061B110:word32]
	// succ:  l0000000000407F68
l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
	// succ:  l0000000000407F74 l0000000000407F81
l0000000000407F74:
	r15d = (word64) Mem0[r10:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
	// succ:  l0000000000407F81 l0000000000408670
l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
	// succ:  l0000000000407F86 l0000000000407FFD
l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
	// succ:  l0000000000407F8B l0000000000407FF0
l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
	// succ:  l0000000000407F92 l0000000000407FFD
l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	edi = 0x00000001
	rdx = r15
	call __xstat (retsize: 8;)
	edx = eax
	esi = 0x00000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
	// succ:  l0000000000407FB1 l0000000000408019
l0000000000407FB1:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x00413783
	rax = dcgettext(rdi, rsi, rdx)
	r15d = Mem0[r13 + 0x00000000FFFFFC7C:word64]
	rdx = r12
	rsi = rax
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	call fn0000000000405810 (retsize: 8;)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
	// succ:  l0000000000407FE4 l00000000004081F4
l0000000000407FE4:
	goto l00000000004081E1
	// succ:  l00000000004081E1
l0000000000407FF0:
	SCZO = cond(Mem0[rbp + 0x00000000FFFFFC7C:byte] - 0x00)
	branch Test(NE,Z) l00000000004088B0
	// succ:  l0000000000407FFD l00000000004088B0
l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
	// succ:  l0000000000408001
l0000000000408001:
	rdx = r15
	rsi = r12
	edi = 0x00000001
	call __lxstat (retsize: 8;)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edx = eax
	// succ:  l0000000000408015
l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
	// succ:  l0000000000408019 l0000000000407FB1
l0000000000408019:
	SCZO = cond(r13d - 0x0000000000000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
	SCZO = cond(r13d - 0x0000000000000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
	// succ:  l000000000040802B l0000000000408380
l000000000040802B:
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
	// succ:  l000000000040803F l0000000000408380
l000000000040803F:
	ecx = Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
	ecx = Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
	// succ:  l0000000000408049 l0000000000408056
l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
	// succ:  l0000000000408056 l00000000004080EF
l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	Mem0[rbp + 0x00000000FFFFFC70:word32] = edx
	branch Test(EQ,Z) l0000000000408C52
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	Mem0[rbp + 0x00000000FFFFFC70:word32] = edx
	branch Test(EQ,Z) l0000000000408C52
	// succ:  l000000000040806D l0000000000408C52
l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
	// succ:  l0000000000408080 l0000000000408458
l0000000000408080:
	call fn0000000000411820 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	branch Test(SG,S) l000000000040846B
	call fn0000000000411820 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	branch Test(SG,S) l000000000040846B
	// succ:  l0000000000408093 l000000000040846B
l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	esi = 0x004137B1
	ecx = 0x0000000A
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	esi = 0x004137B1
	ecx = 0x0000000A
	// succ:  l00000000004080A4
l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
	// succ:  l00000000004080A4_1 l00000000004080A6
l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
	// succ:  l00000000004080A6 l00000000004080A4
l00000000004080A6:
	r13b = Test(NE,Z)
	// succ:  l00000000004080AA
l00000000004080AA:
	eax = Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
	// succ:  l00000000004080B8 l0000000000408830
l00000000004080B8:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	// succ:  l00000000004080BA
l00000000004080BA:
	esi = ecx
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
	// succ:  l00000000004080C3 l00000000004080D9
l00000000004080C3:
	ecx = ecx ^ 0x00000001
	SZO = cond(ecx)
	C = false
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	eax = r13d
	branch Test(EQ,Z) l00000000004080D0
	// succ:  l00000000004080CC_2 l00000000004080D0
l00000000004080CC_2:
	esi = r13d
	// succ:  l00000000004080D0
l00000000004080D0:
	eax = eax << 0x0000001F
	SCZO = cond(eax)
	eax = eax >> 0x0000001F
	SCZO = cond(eax)
	eax = eax + 0x00000002
	SCZO = cond(eax)
	// succ:  l00000000004080D9
l00000000004080D9:
	v45 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v45
	SZO = cond(Mem0[0x000000000061B17C:byte])
	C = false
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
	// succ:  l00000000004080EF l00000000004084BF
l00000000004080EF:
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
	// succ:  l0000000000408103 l0000000000408500
l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
	// succ:  l000000000040810E l0000000000408978
l000000000040810E:
	r13d = Mem0[0x000000000061B150:word64]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
	// succ:  l0000000000408120
l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
	// succ:  l0000000000408129 l0000000000408132
l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
	// succ:  l0000000000408132 l00000000004081A8
l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	edx = Mem0[0x000000000061B140:word32]
	r15 = r13 + 0x00000000FFFFFD30
	ecx = 0x00000200
	rdi = r12
	rsi = r15
	call fn000000000040BD70 (retsize: 8;)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdi = rax
	call fn000000000040D420 (retsize: 8;)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
	// succ:  l0000000000408168 l000000000040816E
l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
	// succ:  l000000000040816E
l000000000040816E:
	r13d = Mem0[0x000000000061B150:word64]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
	// succ:  l000000000040817A l00000000004081A8
l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
	// succ:  l0000000000408187 l0000000000408B10
l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
	// succ:  l0000000000408194 l0000000000408A90
l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
	// succ:  l00000000004081A1 l0000000000408A70
l00000000004081A1:
	r13d = Mem0[0x000000000061B150:word64]
	// succ:  l00000000004081A8
l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
	// succ:  l00000000004081B1 l00000000004081C9
l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
	// succ:  l00000000004081C9 l0000000000408730
l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
	// succ:  l00000000004081D2 l000000000040873F
l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
	// succ:  l00000000004081E1 l0000000000408640
l00000000004081E1:
	rdi = rbx
	call fn0000000000410E30 (retsize: 8;)
	v42 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v42
	SCZO = cond(v42)
	Mem0[rsi:word64] = rax
	rdi = rbx
	call fn0000000000410E30 (retsize: 8;)
	v46 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v46
	SCZO = cond(v46)
	Mem0[rsi:word64] = rax
	// succ:  l00000000004081F4
l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
	// succ:  l000000000040820A l0000000000408C76
l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000407EA0_exit
l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
	// succ:  l000000000040822D l0000000000407F62
l000000000040822D:
	SCZO = cond(r13d - 0x0000000000000003)
	branch Test(EQ,Z) l0000000000408910
	// succ:  l0000000000408237 l0000000000408910
l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
	// succ:  l0000000000408246 l0000000000408818
l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
	// succ:  l000000000040824F l0000000000408255
l000000000040824F:
	SCZO = cond(r13d - 0x0000000000000006)
	branch Test(NE,Z) l0000000000408280
	// succ:  l0000000000408255 l0000000000408280
l0000000000408255:
	ecx = Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
	// succ:  l0000000000408264 l0000000000408BD0
l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
	// succ:  l0000000000408271 l0000000000407F68
l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
	// succ:  l000000000040827E l0000000000407F68
l000000000040827E:
l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
	// succ:  l0000000000408288 l0000000000407F62
l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
	// succ:  l0000000000408295 l0000000000408825
l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
	// succ:  l000000000040829E l0000000000407F62
l000000000040829E:
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	SCZO = cond(r13d - 0x0000000000000005)
	branch Test(NE,Z) l00000000004081E1
	// succ:  l00000000004082AB l00000000004081E1
l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
	// succ:  l00000000004082B8 l0000000000407F62
l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
	// succ:  l00000000004082C5 l00000000004081E1
l00000000004082C5:
	edi = 0x0000000E
	Mem0[rbp + 0x00000000FFFFFC70:word64] = rdx
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	branch Test(NE,Z) l0000000000407F62
	// succ:  l00000000004082E5 l0000000000407F62
l00000000004082E5:
	edi = 0x00000010
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	branch Test(NE,Z) l0000000000407F62
	// succ:  l00000000004082FE l0000000000407F62
l00000000004082FE:
	edi = 0x00000011
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	branch Test(NE,Z) l0000000000407F62
	// succ:  l0000000000408317 l0000000000407F62
l0000000000408317:
	edi = 0x00000015
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	branch Test(NE,Z) l0000000000407F62
	// succ:  l0000000000408330 l0000000000407F62
l0000000000408330:
	goto l00000000004081E1
	// succ:  l00000000004081E1
l0000000000408338:
	Mem0[rdi:byte] = 0x00
	goto l0000000000407F46
	// succ:  l0000000000407F46
l0000000000408340:
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	rdi = rdi + 0x0000000000000002
	SCZO = cond(rdi)
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	esi = esi & 0x00000001
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
	// succ:  l0000000000408355 l0000000000407F46
l0000000000408355:
	goto l0000000000408338
	// succ:  l0000000000408338
l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
	// succ:  l0000000000408374 l0000000000407F3D
l0000000000408374:
	goto l0000000000408340
	// succ:  l0000000000408340
l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
	// succ:  l000000000040838D l000000000040803F
l000000000040838D:
	edi = 0x00000015
	Mem0[rbp + 0x00000000FFFFFC78:word32] = esi
	Mem0[rbp + 0x00000000FFFFFC70:word32] = edx
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	esi = Mem0[rbp + 0x00000000FFFFFC78:word32]
	branch Test(EQ,Z) l000000000040803F
	// succ:  l00000000004083B7 l000000000040803F
l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
	// succ:  l00000000004083C8 l0000000000408C1F
l00000000004083C8:
	Mem0[rbp + 0x00000000FFFFFC78:word32] = esi
	Mem0[rbp + 0x00000000FFFFFC70:word32] = edx
	rax = __errno_location()
	esi = Mem0[rbp + 0x00000000FFFFFC78:word32]
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
	// succ:  l00000000004083F2
l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
	goto l000000000040803F
	// succ:  l000000000040803F
l0000000000408400:
	r8 = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - rax)
	branch Test(UGT,CZ) l0000000000408C7B
	// succ:  l000000000040841A l0000000000408C7B
l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	Mem0[rbp + 0x00000000FFFFFC70:word64] = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	call fn0000000000410C90 (retsize: 8;)
	v27 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v27
	SCZO = cond(v27)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	goto l0000000000407EED
	// succ:  l0000000000407EED
l0000000000408458:
	call fn0000000000411840 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	branch Test(NS,S) l0000000000408093
	// succ:  l000000000040846B l0000000000408093
l000000000040846B:
	Mem0[rbp + 0x00000000FFFFFC70:word32] = edx
	rax = __errno_location()
	eax = Mem0[rax:word32]
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
	Mem0[rbp + 0x00000000FFFFFC70:word32] = edx
	rax = __errno_location()
	eax = Mem0[rax:word32]
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
	// succ:  l0000000000408483 l000000000040848C
l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
	// succ:  l000000000040848C l00000000004089C0
l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
	// succ:  l0000000000408497
l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
	// succ:  l00000000004084AB l00000000004089D0
l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
	// succ:  l00000000004084B4 l00000000004089D0
l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
	// succ:  l00000000004084BF
l00000000004084BF:
	rdi = r12
	call fn000000000040EAB0 (retsize: 8;)
	r13 = rax
	rax = __errno_location()
	esi = Mem0[rax:word32]
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rcx = r13
	edx = 0x00415E54
	call error (retsize: 8;)
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
	// succ:  l00000000004084F6 l0000000000408103
l00000000004084F6:
l0000000000408500:
	r13d = Mem0[0x000000000061B150:word64]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
	// succ:  l000000000040850C l0000000000408519
l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
	// succ:  l0000000000408519 l000000000040862A
l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	call fn0000000000409D20 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
	// succ:  l0000000000408535 l0000000000408BDA
l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
	// succ:  l0000000000408540 l0000000000408C0F
l0000000000408540:
	rdi = r12
	call fn000000000040A2B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
	// succ:  l0000000000408557 l0000000000408B98
l0000000000408557:
	rax = strlen(rdi)
	rdi = r15 + 0x0000000000000002 + rax
	call fn0000000000410C40 (retsize: 8;)
	rcx = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp + 0x00000000FFFFFC70:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	call stpncpy (retsize: 8;)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	r13 = rcx
	// succ:  l00000000004085A1
l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
	// succ:  l00000000004085A6 l0000000000408607
l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
	// succ:  l00000000004085B3 l0000000000408B80
l00000000004085B3:
	rdx = rbp + 0x00000000FFFFFC80
	rsi = r13
	edi = 0x00000001
	call __xstat (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
	// succ:  l00000000004085CB l0000000000408607
l00000000004085CB:
	SCZO = cond(Mem0[rbp + 0x00000000FFFFFC7C:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	eax = Mem0[rbp + 0x00000000FFFFFC98:word32]
	branch Test(EQ,Z) l0000000000408600
	// succ:  l00000000004085E2 l0000000000408600
l00000000004085E2:
	edx = Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
	// succ:  l00000000004085EC l0000000000408600
l00000000004085EC:
	edx = eax
	edx = edx & 0x0000F000
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
	// succ:  l00000000004085FC l0000000000408607
l00000000004085FC:
l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
	// succ:  l0000000000408607
l0000000000408607:
	rdi = r13
	free(rdi)
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
	// succ:  l0000000000408623 l0000000000408103
l0000000000408623:
	r13d = Mem0[0x000000000061B150:word64]
	// succ:  l000000000040862A
l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
	goto l0000000000408120
	// succ:  l0000000000408120
l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp + 0x00000000FFFFFD30
	call fn000000000040CD70 (retsize: 8;)
	rdi = rax
	rax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
	// succ:  l0000000000408664 l00000000004081E1
l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
	goto l00000000004081E1
	// succ:  l00000000004081E1
l0000000000408670:
	rdi = rbx
	Mem0[rbp + 0x00000000FFFFFC6C:word32] = ecx
	Mem0[rbp + 0x00000000FFFFFC78:word32] = esi
	Mem0[rbp + 0x00000000FFFFFC70:word64] = rdx
	rax = strlen(rdi)
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	r12 = rax
	rdi = rdx
	rax = strlen(rdi)
	rax = r12 + 0x0000000000000020 + rax
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	esi = Mem0[rbp + 0x00000000FFFFFC78:word32]
	ecx = Mem0[rbp + 0x00000000FFFFFC6C:word32]
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SZO = cond(rax)
	C = false
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SZO = cond(rax)
	C = false
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
	// succ:  l00000000004086D2 l0000000000408B30
l00000000004086D2:
	rsi = rdx
	// succ:  l00000000004086D8
l00000000004086D8:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	rsi = rsi + 0x0000000000000001
	SCZO = cond(rsi)
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word64) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
	// succ:  l00000000004086ED l00000000004086D8
l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
	// succ:  l00000000004086F5 l0000000000408702
l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
	// succ:  l00000000004086FB l0000000000408702
l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
	// succ:  l0000000000408702
l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
	// succ:  l0000000000408705
l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
	// succ:  l000000000040870A l0000000000408724
l000000000040870A:
	rdx = rbx
	// succ:  l0000000000408710
l0000000000408710:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
	// succ:  l0000000000408724 l0000000000408710
l0000000000408724:
	Mem0[rax:byte] = 0x00
	goto l0000000000407F81
	// succ:  l0000000000407F81
l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
	// succ:  l000000000040873F l00000000004081D2
l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp + 0x00000000FFFFFD10
	call fn000000000040CD70 (retsize: 8;)
	rdi = rax
	rax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp + 0x00000000FFFFFD10
	call fn000000000040CD70 (retsize: 8;)
	rdi = rax
	rax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
	// succ:  l000000000040875F l0000000000408765
l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
	Mem0[0x000000000061B170:word32] = eax
	// succ:  l0000000000408765
l0000000000408765:
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000B000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
	// succ:  l0000000000408779 l0000000000408A30
l0000000000408779:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	r15 = r13 + 0x00000000FFFFFD30
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	SCZO = cond(rax)
	rdi = rdi >>u 0x0000000000000020
	SCZO = cond(rdi)
	eax = eax & 0x00000FFF
	SZO = cond(eax)
	C = false
	edi = edi & 0xFFFFF000
	SZO = cond(edi)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	call fn000000000040CD70 (retsize: 8;)
	rdi = rax
	rax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
	// succ:  l00000000004087B4 l00000000004087BA
l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
	// succ:  l00000000004087BA
l00000000004087BA:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	SCZO = cond(rdi)
	dil = dil & 0x00
	SZO = cond(dil)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	call fn000000000040CD70 (retsize: 8;)
	rdi = rax
	rax = strlen(rdi)
	edx = Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
	// succ:  l00000000004087E8 l00000000004087F0
l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	edx = eax
	// succ:  l00000000004087F0
l00000000004087F0:
	eax = Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
	// succ:  l0000000000408806 l00000000004081D2
l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
	goto l00000000004081D2
	// succ:  l00000000004081D2
l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
	// succ:  l0000000000408825 l0000000000408246
l0000000000408825:
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	goto l00000000004081E1
	// succ:  l00000000004081E1
l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
	// succ:  l0000000000408841 l0000000000408B40
l0000000000408841:
	Mem0[rbp + 0x00000000FFFFFC78:word32] = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	Mem0[rbp + 0x00000000FFFFFC70:word64] = rax
	call fn0000000000409CC0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	ecx = 0x00000001
	r8 = Mem0[r13 + 0x00000000FFFFFC70:word64]
	edx = Mem0[rbp + 0x00000000FFFFFC78:word32]
	branch Test(GT,SZO) l00000000004080BA
	// succ:  l000000000040887E l00000000004080BA
l000000000040887E:
	edx = Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
	// succ:  l000000000040888A l0000000000408C3B
l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
	// succ:  l0000000000408893 l0000000000408C3B
l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
	// succ:  l000000000040889C l0000000000408C3B
l000000000040889C:
	eax = eax >>u 0x0000001F
	SCZO = cond(eax)
	edx = eax
	goto l00000000004080B8
	// succ:  l00000000004080B8
l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	edi = 0x00000001
	Mem0[rbp + 0x00000000FFFFFC70:word32] = ecx
	rdx = r15
	call __xstat (retsize: 8;)
	ecx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	edx = eax
	esi = 0x00000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
	// succ:  l00000000004088E0 l0000000000408015
l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
	// succ:  l00000000004088E8 l0000000000408B5E
l00000000004088E8:
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
	// succ:  l00000000004088F9
l00000000004088F9:
	SZO = cond(al & al)
	C = false
	esi = 0x00000001
	branch Test(EQ,Z) l0000000000408015
	// succ:  l0000000000408906 l0000000000408015
l0000000000408906:
	goto l0000000000408001
	// succ:  l0000000000408001
l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
	// succ:  l000000000040891D l0000000000408237
l000000000040891D:
	edi = 0x00000013
	Mem0[rbp + 0x00000000FFFFFC70:word64] = rdx
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	branch Test(NE,Z) l0000000000407F62
	// succ:  l000000000040893D l0000000000407F62
l000000000040893D:
	edi = 0x00000012
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	branch Test(NE,Z) l0000000000407F62
	// succ:  l0000000000408956 l0000000000407F62
l0000000000408956:
	edi = 0x00000014
	call fn0000000000404CD0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	rdx = Mem0[rbp + 0x00000000FFFFFC70:word64]
	branch Test(NE,Z) l0000000000407F62
	// succ:  l000000000040896F l0000000000407F62
l000000000040896F:
	goto l0000000000408237
	// succ:  l0000000000408237
l0000000000408978:
	SCZO = cond(Mem0[rbp + 0x00000000FFFFFC7C:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
	// succ:  l0000000000408981 l00000000004089A8
l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
	// succ:  l000000000040898A l00000000004089A8
l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13d = Mem0[0x000000000061B150:word64]
	goto l0000000000408120
	// succ:  l0000000000408120
l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13d = Mem0[0x000000000061B150:word64]
	goto l0000000000408120
	// succ:  l0000000000408120
l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
	// succ:  l00000000004089C9 l0000000000408497
l00000000004089C9:
	goto l000000000040848C
	// succ:  l000000000040848C
l00000000004089D0:
	r13d = r13d ^ r13d
	SZO = cond(r13d)
	C = false
	goto l00000000004080AA
	// succ:  l00000000004080AA
l00000000004089E0:
	r9d = r9d ^ r9d
	SZO = cond(r9d)
	C = false
	rdi = rdi + 0x0000000000000002
	SCZO = cond(rdi)
	esi = esi - 0x00000002
	SCZO = cond(esi)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
	// succ:  l00000000004089F9 l0000000000407F1F
l00000000004089F9:
l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	esi = esi - 0x00000004
	SCZO = cond(esi)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
	goto l0000000000407F1F
	// succ:  l0000000000407F1F
l0000000000408A18:
	Mem0[rsi:byte] = 0x00
	rdi = rsi + 0x0000000000000001
	sil = 0xBF
	goto l0000000000407F0B
	// succ:  l0000000000407F0B
l0000000000408A30:
	rdi = Mem0[rsi + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp + 0x00000000FFFFFD30
	edx = Mem0[0x000000000061B134:word32]
	ecx = 0x00000001
	call fn000000000040BD70 (retsize: 8;)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdi = rax
	call fn000000000040D420 (retsize: 8;)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
	// succ:  l0000000000408A68 l00000000004081D2
l0000000000408A68:
	goto l0000000000408806
	// succ:  l0000000000408806
l0000000000408A70:
	edi = Mem0[rsi + 0x000000000000002C:word32]
	call fn00000000004061B0 (retsize: 8;)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
	// succ:  l0000000000408A85 l00000000004081A1
l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
	goto l00000000004081A1
	// succ:  l00000000004081A1
l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13d = Mem0[r14 + 0x0000000000000030:word64]
	branch Test(EQ,Z) l0000000000408BA8
	// succ:  l0000000000408AA1 l0000000000408BA8
l0000000000408AA1:
	edx = 0x00000015
	r8d = r13d
	ecx = 0x0041375A
	esi = 0x00000001
	rdi = r15
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0, 32)
	rdx = r15
	// succ:  l0000000000408AC0
l0000000000408AC0:
	ecx = Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	SCZO = cond(rdx)
	eax = rcx + 0x00000000FEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	SZO = cond(eax)
	C = false
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
	// succ:  l0000000000408AD7 l0000000000408AC0
l0000000000408AD7:
	ecx = eax
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
	// succ:  l0000000000408AE1_1 l0000000000408AE4
l0000000000408AE1_1:
	eax = ecx
	// succ:  l0000000000408AE4
l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
	// succ:  l0000000000408AE8_2 l0000000000408AEC
l0000000000408AE8_2:
	rdx = rcx
	// succ:  l0000000000408AEC
l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	SCZO = cond(rdx)
	edx = edx - r15d
	SCZO = cond(edx)
	// succ:  l0000000000408AF5
l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
	// succ:  l0000000000408B01 l0000000000408194
l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
	goto l0000000000408194
	// succ:  l0000000000408194
l0000000000408B10:
	edi = Mem0[rsi + 0x000000000000002C:word32]
	call fn00000000004061B0 (retsize: 8;)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
	// succ:  l0000000000408B25 l0000000000408187
l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
	goto l0000000000408187
	// succ:  l0000000000408187
l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
	// succ:  l0000000000408B3A l0000000000408705
l0000000000408B3A:
	goto l00000000004086D2
	// succ:  l00000000004086D2
l0000000000408B40:
	Mem0[rbp + 0x00000000FFFFFC70:word32] = edx
	rax = __errno_location()
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	goto l00000000004080BA
	// succ:  l00000000004080BA
l0000000000408B5E:
	Mem0[rbp + 0x00000000FFFFFC70:word32] = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	al = Test(EQ,Z)
	goto l00000000004088F9
	// succ:  l00000000004088F9
l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
	// succ:  l0000000000408B8D l0000000000408607
l0000000000408B8D:
	goto l00000000004085B3
	// succ:  l00000000004085B3
l0000000000408B98:
	call fn0000000000410E30 (retsize: 8;)
	r13 = rax
	goto l00000000004085A1
	// succ:  l00000000004085A1
l0000000000408BA8:
	edi = r13d
	call fn000000000040CB40 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
	// succ:  l0000000000408BBC l0000000000408AA1
l0000000000408BBC:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	call fn000000000040D420 (retsize: 8;)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
	// succ:  l0000000000408BC7_1 l0000000000408BCA
l0000000000408BC7_1:
	edx = eax
	// succ:  l0000000000408BCA
l0000000000408BCA:
	goto l0000000000408AF5
	// succ:  l0000000000408AF5
l0000000000408BD0:
	ecx = 0x00000005
	goto l0000000000407F68
	// succ:  l0000000000407F68
l0000000000408BDA:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x00413794
	rax = dcgettext(rdi, rsi, rdx)
	edi = (word32) Mem0[rbp + 0x00000000FFFFFC7C:byte]
	rdx = r12
	rsi = rax
	call fn0000000000405810 (retsize: 8;)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
	// succ:  l0000000000408C0A l0000000000408535
l0000000000408C0A:
	goto l0000000000408607
	// succ:  l0000000000408607
l0000000000408C0F:
	rdi = r13
	call fn0000000000410E30 (retsize: 8;)
	r13 = rax
	goto l00000000004085A1
	// succ:  l00000000004085A1
l0000000000408C1F:
	rax = __errno_location()
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	Mem0[rax:word32] = 0x0000005F
	esi = Mem0[rbp + 0x00000000FFFFFC78:word32]
	goto l00000000004083F2
	// succ:  l00000000004083F2
l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	eax = eax >>u 0x0000001F
	SCZO = cond(eax)
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	edx = eax
	goto l00000000004080BA
	// succ:  l00000000004080BA
l0000000000408C52:
	rax = __errno_location()
	r13d = r13d ^ r13d
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	edx = Mem0[rbp + 0x00000000FFFFFC70:word32]
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	goto l00000000004080AA
	// succ:  l00000000004080AA
l0000000000408C76:
	__stack_chk_fail()
	// succ:  l0000000000408C7B
l0000000000408C7B:
	call fn0000000000410E50 (retsize: 8;)
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	r8d = Mem0[r14 + 0x00000000000000A0:word64]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x0000000000000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x0000000000000003)
	r8b = Test(EQ,Z)
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
	// succ:  l0000000000408CAF l0000000000408CE8
l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
	// succ:  l0000000000408CB3 l0000000000408CC0
l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	eax = 0x00000001
	branch Test(EQ,Z) l0000000000408CC0
	// succ:  l0000000000408CBC l0000000000408CC0
l0000000000408CBC:
	return
	// succ:  fn0000000000407EA0_exit
l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
	// succ:  l0000000000408CD2 l0000000000408CF0
l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
	// succ:  l0000000000408CD4 l0000000000408D00
l0000000000408CD4:
	edx = edx - eax
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
	// succ:  l0000000000408CD8 l0000000000408D06
l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
	// succ:  l0000000000408CDE_thunk_fn0000000000405020
l0000000000408CDE_thunk_fn0000000000405020:
	call fn0000000000405020 (retsize: 0;)
	return
	// succ:  fn0000000000407EA0_exit
l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
	// succ:  l0000000000408CEC l0000000000408CAF
l0000000000408CEC:
l0000000000408CF0:
	eax = 0xFFFFFFFF
	return
	// succ:  fn0000000000407EA0_exit
l0000000000408D00:
	eax = 0x00000001
	return
	// succ:  fn0000000000407EA0_exit
l0000000000408D06:
	eax = edx
	return
	// succ:  fn0000000000407EA0_exit
fn0000000000407EA0_exit:


// fn0000000000409750
// Return size: 0
void fn0000000000409750()
fn0000000000409750_entry:
	// succ:  l0000000000409750
l0000000000409750:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	edx = 0x00000005
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = edi
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	SZO = cond(edi & edi)
	C = false
	rbp = Mem0[0x000000000061B200:word64]
	branch Test(EQ,Z) l0000000000409794
	// succ:  l0000000000409768 l0000000000409794
l0000000000409768:
	esi = 0x00413D60
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	rdi = Mem0[0x000000000061A650:word64]
	rdx = rax
	rcx = rbp
	esi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __fprintf_chk(rdi, rsi, rdx), 0, 32)
	// succ:  l000000000040978D
l000000000040978D:
	edi = ebx
	exit(rdi)
l0000000000409794:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00413D88
	rax = dcgettext(rdi, rsi, rdx)
	rdx = rbp
	rsi = rax
	edi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00413DB0
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00413E40
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00413E90
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00413FA0
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x004141E8
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414398
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414540
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414580
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414670
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414780
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414928
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414AC0
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414C28
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414DA0
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00414F58
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00415020
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x004151F0
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x004153F0
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00415480
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x004155E8
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00415748
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00415778
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x004157B0
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00415850
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00415970
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	rdi = Mem0[0x000000000061B200:word64]
	call fn000000000040A390 (retsize: 8;)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rbp = rax
	edx = 0x00000005
	esi = 0x004137BB
	rax = dcgettext(rdi, rsi, rdx)
	ecx = 0x004137D2
	rdx = rbp
	rsi = rax
	edi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x004137E8
	rax = dcgettext(rdi, rsi, rdx)
	ecx = 0x00415A08
	rsi = rax
	edx = 0x004137FC
	edi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	rbp = Mem0[0x000000000061A610:word64]
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esi = 0x00415A30
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = 0x00000005
	call setlocale (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000409BC8
	// succ:  l0000000000409BB2 l0000000000409BC8
l0000000000409BB2:
	edx = 0x00000003
	esi = 0x0041380A
	rdi = rax
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000409BFF
	// succ:  l0000000000409BC8 l0000000000409BFF
l0000000000409BC8:
	rdi = Mem0[0x000000000061B200:word64]
	call fn000000000040A390 (retsize: 8;)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rbp = rax
	edx = 0x00000005
	esi = 0x00415AB8
	rax = dcgettext(rdi, rsi, rdx)
	rdx = rbp
	rsi = rax
	edi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	goto l000000000040978D
	// succ:  l000000000040978D
l0000000000409BFF:
	rdi = Mem0[0x000000000061B200:word64]
	call fn000000000040A390 (retsize: 8;)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rbp = rax
	edx = 0x00000005
	esi = 0x00415A70
	rax = dcgettext(rdi, rsi, rdx)
	rdx = rbp
	rsi = rax
	edi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __printf_chk(rdi, rsi), 0, 32)
	goto l0000000000409BC8
	// succ:  l0000000000409BC8
fn0000000000409750_exit:


// fn0000000000409CC0
// Return size: 8
void fn0000000000409CC0()
fn0000000000409CC0_entry:
	// succ:  l0000000000409CC0
l0000000000409CC0:
	rsp = fp
	eax = Mem0[rsi + 0x0000000000000018:word32]
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000409D10
	// succ:  l0000000000409CCF l0000000000409D10
l0000000000409CCF:
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	call acl_extended_file (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000409CE8
	// succ:  l0000000000409CDC l0000000000409CE8
l0000000000409CDC:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000409CC0_exit
l0000000000409CE8:
	rax = __errno_location()
	eax = Mem0[rax:word32]
	SCZO = cond(eax - 0x0000005F)
	branch Test(EQ,Z) l0000000000409D18
	// succ:  l0000000000409CF4 l0000000000409D18
l0000000000409CF4:
	SCZO = cond(eax - 0x00000026)
	branch Test(EQ,Z) l0000000000409D18
	// succ:  l0000000000409CF9 l0000000000409D18
l0000000000409CF9:
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l0000000000409D18
	// succ:  l0000000000409CFE l0000000000409D18
l0000000000409CFE:
	SCZO = cond(eax - 0x00000010)
	al = Test(NE,Z)
	eax = (word32) al
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	goto l0000000000409CDC
	// succ:  l0000000000409CDC
l0000000000409D10:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000409CC0_exit
l0000000000409D18:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000409CC0_exit
fn0000000000409CC0_exit:


// fn0000000000409D20
// Return size: 8
void fn0000000000409D20()
fn0000000000409D20_entry:
	// succ:  l0000000000409D20
l0000000000409D20:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rax = rsi + 0x0000000000000001
	r15 = 0x00000000FFFFFFFE
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = 0x00000000FFFFFFFF
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = 0x00000401
	rsp = rsp - 0x0000000000000018
	SCZO = cond(rsp)
	SCZO = cond(rsi - 0x0000000000000400)
	branch Test(UGT,CZ) l0000000000409D59
	// succ:  l0000000000409D55_1 l0000000000409D59
l0000000000409D55_1:
	rbx = rax
	// succ:  l0000000000409D59
l0000000000409D59:
	// succ:  l0000000000409D60
l0000000000409D60:
	rdi = rbx
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000409DAB
	// succ:  l0000000000409D70 l0000000000409DAB
l0000000000409D70:
	rdx = rbx
	rsi = rax
	rdi = r13
	call readlink (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(SG,S) l0000000000409DD8
	// succ:  l0000000000409D86 l0000000000409DD8
l0000000000409D86:
	SCZO = cond(rbx - r12)
	branch Test(UGT,CZ) l0000000000409E08
	// succ:  l0000000000409D8B l0000000000409E08
l0000000000409D8B:
	rdi = rbp
	free(rdi)
	SCZO = cond(rbx - r14)
	branch Test(UGT,CZ) l0000000000409DC0
	// succ:  l0000000000409D98 l0000000000409DC0
l0000000000409D98:
	rbx = rbx + rbx
	SCZO = cond(rbx)
	rdi = rbx
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(NE,Z) l0000000000409D70
	// succ:  l0000000000409DAB l0000000000409D70
l0000000000409DAB:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0000000000409DAD
l0000000000409DAD:
	rsp = rsp + 0x0000000000000018
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000409D20_exit
l0000000000409DC0:
	SCZO = cond(rbx - r15)
	branch Test(UGT,CZ) l0000000000409E20
	// succ:  l0000000000409DC5 l0000000000409E20
l0000000000409DC5:
	r11 = 0x00000000FFFFFFFF
	goto l0000000000409D60
	// succ:  l0000000000409D60
l0000000000409DD8:
	rax = __errno_location()
	edx = Mem0[rax:word32]
	SCZO = cond(edx - 0x00000022)
	branch Test(EQ,Z) l0000000000409D86
	// succ:  l0000000000409DE4 l0000000000409D86
l0000000000409DE4:
	rdi = rbp
	Mem0[rsp + 0x000000000000000C:word32] = edx
	Mem0[rsp:word64] = rax
	free(rdi)
	rax = Mem0[rsp:word64]
	edx = Mem0[rsp + 0x000000000000000C:word32]
	Mem0[rax:word32] = edx
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l0000000000409DAD
	// succ:  l0000000000409DAD
l0000000000409E08:
	Mem0[rbp + 0x0000000000000000:byte] = 0x00
	rsp = rsp + 0x0000000000000018
	SCZO = cond(rsp)
	rax = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000409D20_exit
l0000000000409E20:
	rax = __errno_location()
	Mem0[rax:word32] = 0x0000000C
	rsp = rsp + 0x0000000000000018
	SCZO = cond(rsp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000409D20_exit
fn0000000000409D20_exit:


// fn0000000000409E50
// Return size: 8
void fn0000000000409E50()
fn0000000000409E50_entry:
	// succ:  l0000000000409E50
l0000000000409E50:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rcx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	Mem0[rsp:word64] = rdi
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	rax = strlen(rdi)
	r14 = Mem0[r15:word64]
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l0000000000409F72
	// succ:  l0000000000409E81 l0000000000409F72
l0000000000409E81:
	r13 = rax
	Mem0[rsp + 0x0000000000000017:byte] = 0x00
	Mem0[rsp + 0x0000000000000008:word64] = 0xFFFFFFFFFFFFFFFF
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	goto l0000000000409EE8
	// succ:  l0000000000409EE8
l0000000000409EA0:
	rax = Mem0[rsp + 0x0000000000000018:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000409F50
	// succ:  l0000000000409EAE l0000000000409F50
l0000000000409EAE:
	rdi = Mem0[rsp + 0x0000000000000008:word64]
	rdx = r12
	rsi = rbp
	rdi = rdi *s r12
	SCZO = cond(rdi)
	rdi = rdi + rax
	SCZO = cond(rdi)
	rax = DPB(rax, memcmp(rdi, rsi, rdx), 0, 32)
	ecx = (word32) Mem0[rsp + 0x0000000000000017:byte]
	SZO = cond(eax & eax)
	C = false
	eax = 0x00000001
	branch Test(EQ,Z) l0000000000409ED4
	// succ:  l0000000000409ED1_1 l0000000000409ED4
l0000000000409ED1_1:
	ecx = eax
	// succ:  l0000000000409ED4
l0000000000409ED4:
	Mem0[rsp + 0x0000000000000017:byte] = cl
	// succ:  l0000000000409ED8
l0000000000409ED8:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	rbp = rbp + r12
	SCZO = cond(rbp)
	r14 = Mem0[r15 + rbx * 0x0000000000000008:word64]
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l0000000000409F28
	// succ:  l0000000000409EE8 l0000000000409F28
l0000000000409EE8:
	rsi = Mem0[rsp:word64]
	rdx = r13
	rdi = r14
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000409ED8
	rsi = Mem0[rsp:word64]
	rdx = r13
	rdi = r14
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000409ED8
	// succ:  l0000000000409EFB l0000000000409ED8
l0000000000409EFB:
	rdi = r14
	rax = strlen(rdi)
	SCZO = cond(rax - r13)
	branch Test(EQ,Z) l0000000000409F60
	rdi = r14
	rax = strlen(rdi)
	SCZO = cond(rax - r13)
	branch Test(EQ,Z) l0000000000409F60
	// succ:  l0000000000409F08 l0000000000409F60
l0000000000409F08:
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l0000000000409EA0
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l0000000000409EA0
	// succ:  l0000000000409F10 l0000000000409EA0
l0000000000409F10:
	Mem0[rsp + 0x0000000000000008:word64] = rbx
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	rbp = rbp + r12
	SCZO = cond(rbp)
	r14 = Mem0[r15 + rbx * 0x0000000000000008:word64]
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l0000000000409EE8
	Mem0[rsp + 0x0000000000000008:word64] = rbx
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	rbp = rbp + r12
	SCZO = cond(rbp)
	r14 = Mem0[r15 + rbx * 0x0000000000000008:word64]
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l0000000000409EE8
	// succ:  l0000000000409F25 l0000000000409EE8
l0000000000409F25:
	// succ:  l0000000000409F28
l0000000000409F28:
	SCZO = cond(Mem0[rsp + 0x0000000000000017:byte] - 0x00)
	rax = 0xFFFFFFFFFFFFFFFE
	branch Test(NE,Z) l0000000000409F3B
	// succ:  l0000000000409F36 l0000000000409F3B
l0000000000409F36:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	// succ:  l0000000000409F3B
l0000000000409F3B:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000409E50_exit
l0000000000409F50:
	Mem0[rsp + 0x0000000000000017:byte] = 0x01
	goto l0000000000409ED8
	// succ:  l0000000000409ED8
l0000000000409F60:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rax = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000409E50_exit
l0000000000409F72:
	Mem0[rsp + 0x0000000000000008:word64] = 0xFFFFFFFFFFFFFFFF
	goto l0000000000409F36
	// succ:  l0000000000409F36
fn0000000000409E50_exit:


// fn0000000000409F80
// Return size: 0
void fn0000000000409F80()
fn0000000000409F80_entry:
	goto l0000000000409F80
	// succ:  l0000000000409F80
l0000000000402770:
	call Mem0[0x000000000061A300:word32] (retsize: 4;)
	return
	// succ:  fn0000000000409F80_exit
l0000000000409F80:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	SCZO = cond(rdx - 0xFFFFFFFFFFFFFFFF)
	edx = 0x00000005
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rsi
	branch Test(EQ,Z) l0000000000409FE0
	// succ:  l0000000000409F95 l0000000000409FE0
l0000000000409F95:
	esi = 0x00415E18
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	r12 = rax
	// succ:  l0000000000409FA4
l0000000000409FA4:
	rsi = rbp
	edi = 0x00000001
	call fn000000000040EBF0 (retsize: 8;)
	rdx = rbx
	esi = 0x00000006
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rbp = rax
	call fn000000000040E970 (retsize: 8;)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r8 = rbp
	rdx = r12
	rcx = rax
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l0000000000402770
	// succ:  l0000000000402770
l0000000000409FE0:
	esi = 0x00415DFD
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	r12 = rax
	goto l0000000000409FA4
	// succ:  l0000000000409FA4
fn0000000000409F80_exit:


// fn000000000040A000
// Return size: 8
void fn000000000040A000()
fn000000000040A000_entry:
	goto l000000000040A000
	// succ:  l000000000040A000
l0000000000402400:
	call Mem0[0x000000000061A148:word32] (retsize: 4;)
	return
	// succ:  fn000000000040A000_exit
l000000000040A000:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15 = rdi
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14d = r14d ^ r14d
	SZO = cond(r14d)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rdx
	edx = 0x00000005
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	esi = 0x00415E35
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[0x000000000061A650:word64]
	rax = dcgettext(rdi, rsi, rdx)
	rdi = rax
	rsi = rbx
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	call fputs_unlocked (retsize: 8;)
	r12 = Mem0[r15:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(NE,Z) l000000000040A086
	// succ:  l000000000040A047 l000000000040A086
l000000000040A047:
	goto l000000000040A0D0
	// succ:  l000000000040A0D0
l000000000040A050:
	rdi = r12
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	r14 = rbp
	call fn000000000040EC10 (retsize: 8;)
	rdi = Mem0[0x000000000061A650:word64]
	rcx = rax
	edx = 0x00415E4A
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = 0x00000001
	rbp = rbp + r13
	SCZO = cond(rbp)
	rax = DPB(rax, __fprintf_chk(rdi, rsi, rdx), 0, 32)
	r12 = Mem0[r15 + rbx * 0x0000000000000008:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000040A0D0
	// succ:  l000000000040A086 l000000000040A0D0
l000000000040A086:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000040A050
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000040A050
	// succ:  l000000000040A08B l000000000040A050
l000000000040A08B:
	rdx = r13
	rsi = rbp
	rdi = r14
	rax = DPB(rax, memcmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040A050
	rdx = r13
	rsi = rbp
	rdi = r14
	rax = DPB(rax, memcmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040A050
	// succ:  l000000000040A09D l000000000040A050
l000000000040A09D:
	rdi = r12
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	rbp = rbp + r13
	SCZO = cond(rbp)
	call fn000000000040EC10 (retsize: 8;)
	rdi = Mem0[0x000000000061A650:word64]
	rcx = rax
	edx = 0x00415E52
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = 0x00000001
	rax = DPB(rax, __fprintf_chk(rdi, rsi, rdx), 0, 32)
	r12 = Mem0[r15 + rbx * 0x0000000000000008:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(NE,Z) l000000000040A086
	rdi = r12
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	rbp = rbp + r13
	SCZO = cond(rbp)
	call fn000000000040EC10 (retsize: 8;)
	rdi = Mem0[0x000000000061A650:word64]
	rcx = rax
	edx = 0x00415E52
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = 0x00000001
	rax = DPB(rax, __fprintf_chk(rdi, rsi, rdx), 0, 32)
	r12 = Mem0[r15 + rbx * 0x0000000000000008:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(NE,Z) l000000000040A086
	// succ:  l000000000040A0D0 l000000000040A086
l000000000040A0D0:
	rdi = Mem0[0x000000000061A650:word64]
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l000000000040A0FB
	rdi = Mem0[0x000000000061A650:word64]
	rax = Mem0[rdi + 0x0000000000000028:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	branch Test(UGE,C) l000000000040A0FB
	// succ:  l000000000040A0E1 l000000000040A0FB
l000000000040A0E1:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040A000_exit fn000000000040A000_exit
l000000000040A0FB:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	esi = 0x0000000A
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l0000000000402400
	// succ:  l0000000000402400
fn000000000040A000_exit:


// fn000000000040A120
// Return size: 8
void fn000000000040A120()
fn000000000040A120_entry:
	// succ:  l000000000040A120
l000000000040A120:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15 = r8
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = r9
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rsi
	rdi = r12
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rcx
	rcx = r8
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdx
	rdx = rbp
	rsi = rbx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	call fn0000000000409E50 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l000000000040A165
	// succ:  l000000000040A156 l000000000040A165
l000000000040A156:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040A120_exit
l000000000040A165:
	rdx = rax
	rsi = r12
	rdi = r14
	call fn0000000000409F80 (retsize: 8;)
	rdx = r15
	rsi = rbp
	rdi = rbx
	call fn000000000040A000 (retsize: 8;)
	call r13d (retsize: 8;)
	rax = 0xFFFFFFFFFFFFFFFF
	goto l000000000040A156
	// succ:  l000000000040A156
fn000000000040A120_exit:


// fn000000000040A2B0
// Return size: 8
void fn000000000040A2B0()
fn000000000040A2B0_entry:
	// succ:  l000000000040A2B0
l000000000040A2B0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rdi:byte] - 0x2F)
	bpl = Test(EQ,Z)
	call fn000000000040A390 (retsize: 8;)
	rcx = rax
	rcx = rcx - rbx
	SCZO = cond(rcx)
	SCZO = cond(rcx - rbp)
	branch Test(ULE,CZ) l000000000040A2FD
	// succ:  l000000000040A2D2 l000000000040A2FD
l000000000040A2D2:
	SCZO = cond(Mem0[rax - 0x0000000000000001:byte] - 0x2F)
	rdx = rcx - 0x0000000000000001
	branch Test(EQ,Z) l000000000040A2EE
	// succ:  l000000000040A2DC l000000000040A2EE
l000000000040A2DC:
	goto l000000000040A2FD
	// succ:  l000000000040A2FD
l000000000040A2E0:
	SCZO = cond(Mem0[rbx - 0x0000000000000001 + rdx:byte] - 0x2F)
	rax = rdx - 0x0000000000000001
	branch Test(NE,Z) l000000000040A2F3
	// succ:  l000000000040A2EB l000000000040A2F3
l000000000040A2EB:
	rdx = rax
	// succ:  l000000000040A2EE
l000000000040A2EE:
	SCZO = cond(rbp - rdx)
	branch Test(ULT,C) l000000000040A2E0
	// succ:  l000000000040A2F3 l000000000040A2E0
l000000000040A2F3:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rax = rdx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rax = rdx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040A2B0_exit fn000000000040A2B0_exit
l000000000040A2FD:
	rdx = rcx
	goto l000000000040A2F3
	// succ:  l000000000040A2F3
fn000000000040A2B0_exit:


// fn000000000040A390
// Return size: 8
void fn000000000040A390()
fn000000000040A390_entry:
	// succ:  l000000000040A390
l000000000040A390:
	rsp = fp
	edx = (word32) Mem0[rdi:byte]
	rax = rdi
	SCZO = cond(dl - 0x2F)
	branch Test(NE,Z) l000000000040A3AC
	// succ:  l000000000040A39B l000000000040A3AC
l000000000040A39B:
	// succ:  l000000000040A3A0
l000000000040A3A0:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	edx = (word32) Mem0[rax:byte]
	SCZO = cond(dl - 0x2F)
	branch Test(EQ,Z) l000000000040A3A0
	// succ:  l000000000040A3AC l000000000040A3A0
l000000000040A3AC:
	ecx = edx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdx = rax
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A3F7
	// succ:  l000000000040A3B7 l000000000040A3F7
l000000000040A3B7:
	// succ:  l000000000040A3C0
l000000000040A3C0:
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	ecx = (word32) Mem0[rdx:byte]
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A3E5
	// succ:  l000000000040A3CB l000000000040A3E5
l000000000040A3CB:
	SCZO = cond(cl - 0x2F)
	branch Test(EQ,Z) l000000000040A3F0
	// succ:  l000000000040A3D0 l000000000040A3F0
l000000000040A3D0:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l000000000040A3C0
	// succ:  l000000000040A3D5 l000000000040A3C0
l000000000040A3D5:
	rax = rdx
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	ecx = (word32) Mem0[rdx:byte]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040A3CB
	// succ:  l000000000040A3E5 l000000000040A3CB
l000000000040A3E5:
	return
	// succ:  fn000000000040A390_exit
l000000000040A3F0:
	esi = 0x00000001
	goto l000000000040A3C0
	// succ:  l000000000040A3C0
l000000000040A3F7:
	return
	// succ:  fn000000000040A390_exit
fn000000000040A390_exit:


// fn000000000040A400
// Return size: 8
void fn000000000040A400()
fn000000000040A400_entry:
	// succ:  l000000000040A400
l000000000040A400:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rax = strlen(rdi)
	SCZO = cond(rax - 0x0000000000000001)
	branch Test(ULE,CZ) l000000000040A41A
	// succ:  l000000000040A40F l000000000040A41A
l000000000040A40F:
	SCZO = cond(Mem0[rbx - 0x0000000000000001 + rax:byte] - 0x2F)
	rdx = rax - 0x0000000000000001
	branch Test(EQ,Z) l000000000040A420
	// succ:  l000000000040A41A l000000000040A420
l000000000040A41A:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040A400_exit
l000000000040A420:
	SCZO = cond(rdx - 0x0000000000000001)
	rax = rdx
	branch Test(NE,Z) l000000000040A40F
	// succ:  l000000000040A429 l000000000040A40F
l000000000040A429:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040A400_exit
fn000000000040A400_exit:


// fn000000000040A600
// Return size: 8
void fn000000000040A600()
fn000000000040A600_entry:
	goto l000000000040A600
	// succ:  l000000000040A600
l000000000040A430:
	eax = edi
	eax = eax & 0x0000F000
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l000000000040A5B0
	// succ:  l000000000040A442 l000000000040A5B0
l000000000040A442:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l000000000040A5C0
	// succ:  l000000000040A44D l000000000040A5C0
l000000000040A44D:
	SCZO = cond(eax - 0x00006000)
	branch Test(EQ,Z) l000000000040A5D0
	// succ:  l000000000040A458 l000000000040A5D0
l000000000040A458:
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l000000000040A5A0
	// succ:  l000000000040A463 l000000000040A5A0
l000000000040A463:
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l000000000040A5E0
	// succ:  l000000000040A46E l000000000040A5E0
l000000000040A46E:
	SCZO = cond(eax - 0x00001000)
	branch Test(EQ,Z) l000000000040A5F0
	// succ:  l000000000040A479 l000000000040A5F0
l000000000040A479:
	SCZO = cond(eax - 0x0000C000)
	edx = 0x00000073
	eax = 0x0000003F
	branch Test(EQ,Z) l000000000040A48B
	// succ:  l000000000040A488_1 l000000000040A48B
l000000000040A488_1:
	edx = eax
	// succ:  l000000000040A48B
l000000000040A48B:
	eax = edi
	Mem0[rsi:byte] = dl
	eax = eax & 0x00000100
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFBB
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000072
	SCZO = cond(eax)
	Mem0[rsi + 0x0000000000000001:byte] = al
	eax = edi
	eax = eax & 0x00000080
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFB6
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000077
	SCZO = cond(eax)
	Mem0[rsi + 0x0000000000000002:byte] = al
	eax = edi
	eax = eax & 0x00000040
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	SZO = cond(edi & 0x00000800)
	C = false
	branch Test(EQ,Z) l000000000040A590
	// succ:  l000000000040A4CD l000000000040A590
l000000000040A4CD:
	eax = eax & 0xFFFFFFE0
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000073
	SCZO = cond(eax)
	// succ:  l000000000040A4D3
l000000000040A4D3:
	Mem0[rsi + 0x0000000000000003:byte] = al
	eax = edi
	eax = eax & 0x00000020
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFBB
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000072
	SCZO = cond(eax)
	Mem0[rsi + 0x0000000000000004:byte] = al
	eax = edi
	eax = eax & 0x00000010
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFB6
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000077
	SCZO = cond(eax)
	Mem0[rsi + 0x0000000000000005:byte] = al
	eax = edi
	eax = eax & 0x00000008
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	SZO = cond(edi & 0x00000400)
	C = false
	branch Test(EQ,Z) l000000000040A580
	// succ:  l000000000040A50E l000000000040A580
l000000000040A50E:
	eax = eax & 0xFFFFFFE0
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000073
	SCZO = cond(eax)
	// succ:  l000000000040A514
l000000000040A514:
	Mem0[rsi + 0x0000000000000006:byte] = al
	eax = edi
	eax = eax & 0x00000004
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFBB
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000072
	SCZO = cond(eax)
	Mem0[rsi + 0x0000000000000007:byte] = al
	eax = edi
	eax = eax & 0x00000002
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFB6
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000077
	SCZO = cond(eax)
	SZO = cond(edi & 0x00000200)
	C = false
	Mem0[rsi + 0x0000000000000008:byte] = al
	branch Test(EQ,Z) l000000000040A560
	// succ:  l000000000040A545 l000000000040A560
l000000000040A545:
	edi = edi & 0x00000001
	SZO = cond(edi)
	C = false
	Mem0[rsi + 0x000000000000000A:byte] = 0x20
	Mem0[rsi + 0x000000000000000B:byte] = 0x00
	SCZO = cond(edi - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFE0
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000074
	SCZO = cond(eax)
	Mem0[rsi + 0x0000000000000009:byte] = al
	return
	// succ:  fn000000000040A600_exit
l000000000040A560:
	edi = edi & 0x00000001
	SZO = cond(edi)
	C = false
	Mem0[rsi + 0x000000000000000A:byte] = 0x20
	Mem0[rsi + 0x000000000000000B:byte] = 0x00
	SCZO = cond(edi - 0x00000001)
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFB5
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000078
	SCZO = cond(eax)
	Mem0[rsi + 0x0000000000000009:byte] = al
	return
	// succ:  fn000000000040A600_exit
l000000000040A580:
	eax = eax & 0xFFFFFFB5
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000078
	SCZO = cond(eax)
	goto l000000000040A514
	// succ:  l000000000040A514
l000000000040A590:
	eax = eax & 0xFFFFFFB5
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000078
	SCZO = cond(eax)
	goto l000000000040A4D3
	// succ:  l000000000040A4D3
l000000000040A5A0:
	edx = 0x00000063
	goto l000000000040A48B
	// succ:  l000000000040A48B
l000000000040A5B0:
	edx = 0x0000002D
	goto l000000000040A48B
	// succ:  l000000000040A48B
l000000000040A5C0:
	edx = 0x00000064
	goto l000000000040A48B
	// succ:  l000000000040A48B
l000000000040A5D0:
	edx = 0x00000062
	goto l000000000040A48B
	// succ:  l000000000040A48B
l000000000040A5E0:
	edx = 0x0000006C
	goto l000000000040A48B
	// succ:  l000000000040A48B
l000000000040A5F0:
	edx = 0x00000070
	goto l000000000040A48B
	// succ:  l000000000040A48B
l000000000040A600:
	rsp = fp
	edi = Mem0[rdi + 0x0000000000000018:word32]
	goto l000000000040A430
	// succ:  l000000000040A430
fn000000000040A600_exit:


// fn000000000040A610
// Return size: 8
void fn000000000040A610()
fn000000000040A610_entry:
	// succ:  l000000000040A610
l000000000040A610:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	call fn000000000040A630 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040A623
	// succ:  l000000000040A61E l000000000040A623
l000000000040A61E:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040A610_exit
l000000000040A623:
	call fn0000000000410E50 (retsize: 8;)
fn000000000040A610_exit:


// fn000000000040A630
// Return size: 8
void fn000000000040A630()
fn000000000040A630_entry:
	// succ:  l000000000040A630
l000000000040A630:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15 = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14d = r14d ^ r14d
	SZO = cond(r14d)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000018
	SCZO = cond(rsp)
	call fn000000000040A390 (retsize: 8;)
	rbx = rax
	rdi = rax
	call fn000000000040A400 (retsize: 8;)
	rdx = rbx
	rdx = rdx - r12
	SCZO = cond(rdx)
	SZO = cond(rax & rax)
	C = false
	rsi = rdx + rax
	Mem0[rsp:word64] = rsi
	branch Test(EQ,Z) l000000000040A679
	// succ:  l000000000040A66D l000000000040A679
l000000000040A66D:
	r14d = r14d ^ r14d
	SZO = cond(r14d)
	C = false
	SCZO = cond(Mem0[rbx - 0x0000000000000001 + rax:byte] - 0x2F)
	r14b = Test(NE,Z)
	// succ:  l000000000040A679
l000000000040A679:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	rbx = rbp
	branch Test(EQ,Z) l000000000040A700
	// succ:  l000000000040A682 l000000000040A700
l000000000040A682:
	rdi = rbx
	rax = strlen(rdi)
	rcx = Mem0[rsp:word64]
	Mem0[rsp + 0x0000000000000008:word64] = rax
	rdi = rcx + 0x0000000000000001 + r14
	rdi = rdi + rax
	SCZO = cond(rdi)
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	branch Test(EQ,Z) l000000000040A720
	// succ:  l000000000040A6A8 l000000000040A720
l000000000040A6A8:
	rdx = Mem0[rsp:word64]
	rdi = rax
	rsi = r12
	call mempcpy (retsize: 8;)
	SZO = cond(r15 & r15)
	C = false
	Mem0[rax:byte] = 0x2F
	rdi = rax + r14
	branch Test(EQ,Z) l000000000040A6D5
	// succ:  l000000000040A6C3 l000000000040A6D5
l000000000040A6C3:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	rcx = rdi
	al = Test(EQ,Z)
	rcx = rcx - rax
	SCZO = cond(rcx)
	Mem0[rdi:word64] = rcx
	// succ:  l000000000040A6D5
l000000000040A6D5:
	rdx = Mem0[rsp + 0x0000000000000008:word64]
	rsi = rbx
	call mempcpy (retsize: 8;)
	Mem0[rax:byte] = 0x00
	rax = r13
	// succ:  l000000000040A6E8
l000000000040A6E8:
	rsp = rsp + 0x0000000000000018
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040A630_exit
l000000000040A700:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(Mem0[rbx:byte] - 0x2F)
	branch Test(NE,Z) l000000000040A682
	// succ:  l000000000040A70D l000000000040A682
l000000000040A70D:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(Mem0[rbx:byte] - 0x2F)
	branch Test(NE,Z) l000000000040A682
	// succ:  l000000000040A71A l000000000040A682
l000000000040A71A:
	goto l000000000040A700
	// succ:  l000000000040A700
l000000000040A720:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040A6E8
	// succ:  l000000000040A6E8
fn000000000040A630_exit:


// fn000000000040A730
// Return size: 8
void fn000000000040A730()
fn000000000040A730_entry:
	// succ:  l000000000040A730
l000000000040A730:
	rsp = fp
	rdx = Mem0[rdi:word64]
	ecx = (word32) Mem0[rdx:byte]
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A7CD
	// succ:  l000000000040A73E l000000000040A7CD
l000000000040A73E:
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	r10d = r10d ^ r10d
	SZO = cond(r10d)
	C = false
	goto l000000000040A776
	// succ:  l000000000040A776
l000000000040A750:
	esi = (int32) cl
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	esi = esi & 0xFFFFFFDF
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000041
	SCZO = cond(esi)
	SCZO = cond(esi - 0x00000019)
	branch Test(ULE,CZ) l000000000040A768
	// succ:  l000000000040A761 l000000000040A768
l000000000040A761:
	SCZO = cond(cl - 0x7E)
	branch Test(EQ,Z) l000000000040A768
	// succ:  l000000000040A764_1 l000000000040A768
l000000000040A764_1:
	rax = r10
	// succ:  l000000000040A768
l000000000040A768:
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	Mem0[rdi:word64] = rdx
	ecx = (word32) Mem0[rdx:byte]
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A7B0
	// succ:  l000000000040A776 l000000000040A7B0
l000000000040A776:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l000000000040A750
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l000000000040A750
	// succ:  l000000000040A77B l000000000040A750
l000000000040A77B:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A7B8
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A7B8
	// succ:  l000000000040A780 l000000000040A7B8
l000000000040A780:
	esi = (int32) cl
	r9d = r14 - 0x0000000000000030
	SCZO = cond(r9d - 0x0000000000000009)
	branch Test(ULE,CZ) l000000000040A768
	esi = (int32) cl
	r9d = r14 - 0x0000000000000030
	SCZO = cond(r9d - 0x0000000000000009)
	branch Test(ULE,CZ) l000000000040A768
	// succ:  l000000000040A78D l000000000040A768
l000000000040A78D:
	esi = esi & 0xFFFFFFDF
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000041
	SCZO = cond(esi)
	SCZO = cond(esi - 0x00000019)
	branch Test(UGT,CZ) l000000000040A761
	esi = esi & 0xFFFFFFDF
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000041
	SCZO = cond(esi)
	SCZO = cond(esi - 0x00000019)
	branch Test(UGT,CZ) l000000000040A761
	// succ:  l000000000040A798 l000000000040A761
l000000000040A798:
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	Mem0[rdi:word64] = rdx
	ecx = (word32) Mem0[rdx:byte]
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040A776
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	Mem0[rdi:word64] = rdx
	ecx = (word32) Mem0[rdx:byte]
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040A776
	// succ:  l000000000040A7A6 l000000000040A776
l000000000040A7A6:
	// succ:  l000000000040A7B0
l000000000040A7B0:
	return
	// succ:  fn000000000040A730_exit
l000000000040A7B8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040A7C8
	// succ:  l000000000040A7BD l000000000040A7C8
l000000000040A7BD:
	eax = 0x00000001
	goto l000000000040A768
	// succ:  l000000000040A768
l000000000040A7C8:
	rax = rdx
	goto l000000000040A7BD
	// succ:  l000000000040A7BD
l000000000040A7CD:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000040A730_exit
fn000000000040A730_exit:


// fn000000000040AB30
// Return size: 8
void fn000000000040AB30()
fn000000000040AB30_entry:
	// succ:  l000000000040AB30
l000000000040AB30:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsi = rdi
	rbx = rdi
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rsp = rsp - 0x0000000000000010
	SCZO = cond(rsp)
	rax = DPB(rax, clock_gettime(rdi, rsi), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040AB67
	// succ:  l000000000040AB46 l000000000040AB67
l000000000040AB46:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdi = rsp
	call gettimeofday (retsize: 8;)
	rax = Mem0[rsp:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax *s 1000
	SCZO = cond(rax)
	Mem0[rbx + 0x0000000000000008:word64] = rax
	// succ:  l000000000040AB67
l000000000040AB67:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040AB30_exit
fn000000000040AB30_exit:


// fn000000000040AB70
// Return size: 8
void fn000000000040AB70()
fn000000000040AB70_entry:
	// succ:  l000000000040AB70
l000000000040AB70:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	call setlocale (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040ABB0
	// succ:  l000000000040AB80 l000000000040ABB0
l000000000040AB80:
	SCZO = cond(Mem0[rax:byte] - 0x43)
	branch Test(NE,Z) l000000000040AB98
	// succ:  l000000000040AB85 l000000000040AB98
l000000000040AB85:
	SCZO = cond(Mem0[rax + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l000000000040AB98
	// succ:  l000000000040AB8B l000000000040AB98
l000000000040AB8B:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040AB70_exit
l000000000040AB98:
	rsi = rax
	edi = 0x00415E6A
	ecx = 0x00000006
	// succ:  l000000000040ABA5
l000000000040ABA5:
	branch rcx == 0x0000000000000000 l000000000040ABA7
	// succ:  l000000000040ABA5_1 l000000000040ABA7
l000000000040ABA5_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l000000000040ABA5
	// succ:  l000000000040ABA7 l000000000040ABA5
l000000000040ABA7:
	al = Test(NE,Z)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040AB70_exit
l000000000040ABB0:
	eax = 0x00000001
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040AB70_exit
fn000000000040AB70_exit:


// fn000000000040ABC0
// Return size: 8
void fn000000000040ABC0()
fn000000000040ABC0_entry:
	// succ:  l000000000040ABC0
l000000000040ABC0:
	rsp = fp
	SCZO = cond(rdi - 0x0000000000000009)
	branch Test(UGT,CZ) l000000000040AC4F
	// succ:  l000000000040ABCA l000000000040AC4F
l000000000040ABCA:
	edi = 0x0000000B
	// succ:  l000000000040ABCF
l000000000040ABCF:
	r9 = 0x00000000AAAAAAAB
	// succ:  l000000000040ABE0
l000000000040ABE0:
	SCZO = cond(rdi - 0x0000000000000009)
	branch Test(ULE,CZ) l000000000040AC48
	// succ:  l000000000040ABE6 l000000000040AC48
l000000000040ABE6:
	rax = rdi
	rdx_rax = r9 *u rax
	SCZO = cond(rdx_rax)
	rdx = rdx >>u 0x0000000000000001
	SCZO = cond(rdx)
	rax = rdx + rdx * 0x0000000000000002
	SCZO = cond(rdi - rax)
	branch Test(EQ,Z) l000000000040AC3A
	// succ:  l000000000040ABF8 l000000000040AC3A
l000000000040ABF8:
	eax = 0x00000010
	esi = 0x00000009
	ecx = 0x00000003
	goto l000000000040AC21
	// succ:  l000000000040AC21
l000000000040AC10:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rdi
	r8 = r8 + 0x0000000000000008
	SCZO = cond(r8)
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000040AC3A
	// succ:  l000000000040AC21 l000000000040AC3A
l000000000040AC21:
	rsi = rsi + r8
	SCZO = cond(rsi)
	rcx = rcx + 0x0000000000000002
	SCZO = cond(rcx)
	SCZO = cond(rsi - rdi)
	branch Test(ULT,C) l000000000040AC10
	rsi = rsi + r8
	SCZO = cond(rsi)
	rcx = rcx + 0x0000000000000002
	SCZO = cond(rcx)
	SCZO = cond(rsi - rdi)
	branch Test(ULT,C) l000000000040AC10
	// succ:  l000000000040AC2D l000000000040AC10
l000000000040AC2D:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rdi
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l000000000040AC44
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rdi
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l000000000040AC44
	// succ:  l000000000040AC3A l000000000040AC44
l000000000040AC3A:
	rdi = rdi + 0x0000000000000002
	SCZO = cond(rdi)
	SCZO = cond(rdi - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l000000000040ABE0
	rdi = rdi + 0x0000000000000002
	SCZO = cond(rdi)
	SCZO = cond(rdi - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l000000000040ABE0
	// succ:  l000000000040AC44 l000000000040ABE0
l000000000040AC44:
	rax = rdi
	return
	rax = rdi
	return
	// succ:  fn000000000040ABC0_exit fn000000000040ABC0_exit
l000000000040AC48:
	ecx = 0x00000003
	goto l000000000040AC2D
	// succ:  l000000000040AC2D
l000000000040AC4F:
	rdi = rdi | 0x0000000000000001
	SZO = cond(rdi)
	C = false
	SCZO = cond(rdi - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l000000000040ABCF
	// succ:  l000000000040AC5D l000000000040ABCF
l000000000040AC5D:
	goto l000000000040AC44
	// succ:  l000000000040AC44
fn000000000040ABC0_exit:


// fn000000000040AC80
// Return size: 8
void fn000000000040AC80()
fn000000000040AC80_entry:
	// succ:  l000000000040AC80
l000000000040AC80:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rdi = rsi
	rsi = Mem0[rbx + 0x0000000000000010:word64]
	call Mem0[rbx + 0x0000000000000030:word32] (retsize: 4;)
	SCZO = cond(rax - Mem0[rbx + 0x0000000000000010:word64])
	branch Test(UGE,C) l000000000040AC9D
	// succ:  l000000000040AC94 l000000000040AC9D
l000000000040AC94:
	rax = rax << 0x0000000000000004
	SCZO = cond(rax)
	rax = rax + Mem0[rbx:word64]
	SCZO = cond(rax)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040AC80_exit
l000000000040AC9D:
	abort()
fn000000000040AC80_exit:


// fn000000000040ACB0
// Return size: 8
void fn000000000040ACB0()
fn000000000040ACB0_entry:
	// succ:  l000000000040ACB0
l000000000040ACB0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13d = ecx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	call fn000000000040AC80 (retsize: 8;)
	Mem0[rsi:word64] = rax
	rsi = Mem0[rax:word64]
	rbx = rax
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000040AD4F
	// succ:  l000000000040ACD7 l000000000040AD4F
l000000000040ACD7:
	SCZO = cond(r12 - rsi)
	branch Test(EQ,Z) l000000000040ACE9
	// succ:  l000000000040ACDC l000000000040ACE9
l000000000040ACDC:
	rdi = r12
	call Mem0[rbp + 0x0000000000000038:word32] (retsize: 4;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040AD46
	// succ:  l000000000040ACE6 l000000000040AD46
l000000000040ACE6:
	rsi = Mem0[rbx:word64]
	// succ:  l000000000040ACE9
l000000000040ACE9:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(EQ,Z) l000000000040AD1C
	// succ:  l000000000040ACEE l000000000040AD1C
l000000000040ACEE:
	rax = Mem0[rbx + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AD98
	// succ:  l000000000040ACFB l000000000040AD98
l000000000040ACFB:
	r9 = Mem0[r8:word64]
	r10 = Mem0[r8 + 0x0000000000000008:word64]
	Mem0[r11:word64] = r9
	Mem0[r11 + 0x0000000000000008:word64] = r10
	Mem0[rax:word64] = 0x0000000000000000
	rcx = Mem0[rbp + 0x0000000000000048:word64]
	Mem0[rax + 0x0000000000000008:word64] = rcx
	Mem0[rbp + 0x0000000000000048:word64] = rax
	// succ:  l000000000040AD1C
l000000000040AD1C:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = rsi
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040ACB0_exit
l000000000040AD30:
	rsi = Mem0[rax:word64]
	SCZO = cond(rsi - r12)
	branch Test(EQ,Z) l000000000040AD67
	// succ:  l000000000040AD38 l000000000040AD67
l000000000040AD38:
	rdi = r12
	call Mem0[rbp + 0x0000000000000038:word32] (retsize: 4;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040AD60
	// succ:  l000000000040AD42 l000000000040AD60
l000000000040AD42:
	rbx = Mem0[rbx + 0x0000000000000008:word64]
	// succ:  l000000000040AD46
l000000000040AD46:
	rax = Mem0[rbx + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000040AD30
	// succ:  l000000000040AD4F l000000000040AD30
l000000000040AD4F:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = rsi
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = rsi
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040ACB0_exit fn000000000040ACB0_exit
l000000000040AD60:
	rax = Mem0[rbx + 0x0000000000000008:word64]
	rsi = Mem0[rax:word64]
	// succ:  l000000000040AD67
l000000000040AD67:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(EQ,Z) l000000000040AD1C
	// succ:  l000000000040AD6C l000000000040AD1C
l000000000040AD6C:
	rcx = Mem0[rax + 0x0000000000000008:word64]
	Mem0[rbx + 0x0000000000000008:word64] = rcx
	Mem0[rax:word64] = 0x0000000000000000
	rcx = Mem0[rbp + 0x0000000000000048:word64]
	Mem0[rax + 0x0000000000000008:word64] = rcx
	Mem0[rbp + 0x0000000000000048:word64] = rax
	rax = rsi
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040ACB0_exit
l000000000040AD98:
	Mem0[rbx:word64] = 0x0000000000000000
	goto l000000000040AD1C
	// succ:  l000000000040AD1C
fn000000000040ACB0_exit:


// fn000000000040ADB0
// Return size: 8
void fn000000000040ADB0()
fn000000000040ADB0_entry:
	// succ:  l000000000040ADB0
l000000000040ADB0:
	rsp = fp
	rax = Mem0[rdi:word64]
	SCZO = cond(r8 - 0x0000000000415EE0)
	branch Test(EQ,Z) l000000000040AE30
	// succ:  l000000000040ADBB l000000000040AE30
l000000000040ADBB:
l000000000040AE30:
	eax = 0x00000001
	return
	// succ:  fn000000000040ADB0_exit
fn000000000040ADB0_exit:


// fn000000000040AE40
// Return size: 8
void fn000000000040AE40()
fn000000000040AE40_entry:
	// succ:  l000000000040AE40
l000000000040AE40:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15d = edx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	r13 = Mem0[r14:word64]
	SCZO = cond(r13 - Mem0[r14 + 0x0000000000000008:word64])
	branch Test(UGE,C) l000000000040AEEF
	// succ:  l000000000040AE64 l000000000040AEEF
l000000000040AE64:
	// succ:  l000000000040AE68
l000000000040AE68:
	rbp = Mem0[rbp + 0x0000000000000000:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000040AEE1
	// succ:  l000000000040AE71 l000000000040AEE1
l000000000040AE71:
	rbx = Mem0[rbp + 0x0000000000000008:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000040AE94
	// succ:  l000000000040AE7A l000000000040AE94
l000000000040AE7A:
	goto l000000000040AED4
	// succ:  l000000000040AED4
l000000000040AE80:
	rcx = Mem0[rax + 0x0000000000000008:word64]
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rbx + 0x0000000000000008:word64] = rcx
	Mem0[rax + 0x0000000000000008:word64] = rbx
	branch Test(EQ,Z) l000000000040AED0
	// succ:  l000000000040AE91 l000000000040AED0
l000000000040AE91:
	rbx = rdx
	// succ:  l000000000040AE94
l000000000040AE94:
	rbp = Mem0[rbx:word64]
	rdi = r12
	rsi = rbp
	call fn000000000040AC80 (retsize: 8;)
	SCZO = cond(Mem0[rax:word64] - 0x0000000000000000)
	rdx = Mem0[rbx + 0x0000000000000008:word64]
	branch Test(NE,Z) l000000000040AE80
	// succ:  l000000000040AEAC l000000000040AE80
l000000000040AEAC:
	Mem0[rax:word64] = rbp
	v21 = Mem0[r12 + 0x0000000000000018:word64] + 0x0000000000000001
	Mem0[r12 + 0x0000000000000018:word64] = v21
	SCZO = cond(v21)
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rbx:word64] = 0x0000000000000000
	rax = Mem0[r12 + 0x0000000000000048:word64]
	Mem0[rbx + 0x0000000000000008:word64] = rax
	Mem0[r12 + 0x0000000000000048:word64] = rbx
	branch Test(NE,Z) l000000000040AE91
	// succ:  l000000000040AECF l000000000040AE91
l000000000040AECF:
	// succ:  l000000000040AED0
l000000000040AED0:
	rbp = Mem0[rbp + 0x0000000000000000:word64]
	// succ:  l000000000040AED4
l000000000040AED4:
	SZO = cond(r15b & r15b)
	C = false
	Mem0[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch Test(EQ,Z) l000000000040AF08
	// succ:  l000000000040AEE1 l000000000040AF08
l000000000040AEE1:
	r13 = r13 + 0x0000000000000010
	SCZO = cond(r13)
	SCZO = cond(Mem0[r14 + 0x0000000000000008:word64] - r13)
	branch Test(UGT,CZ) l000000000040AE68
	// succ:  l000000000040AEEF l000000000040AE68
l000000000040AEEF:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	eax = 0x00000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	eax = 0x00000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040AE40_exit fn000000000040AE40_exit
l000000000040AF08:
	rsi = rbp
	rdi = r12
	call fn000000000040AC80 (retsize: 8;)
	SCZO = cond(Mem0[rax:word64] - 0x0000000000000000)
	rbx = rax
	branch Test(EQ,Z) l000000000040AF5B
	// succ:  l000000000040AF1C l000000000040AF5B
l000000000040AF1C:
	rax = Mem0[r12 + 0x0000000000000048:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AF66
	// succ:  l000000000040AF26 l000000000040AF66
l000000000040AF26:
	rdx = Mem0[rax + 0x0000000000000008:word64]
	Mem0[r12 + 0x0000000000000048:word64] = rdx
	// succ:  l000000000040AF2F
l000000000040AF2F:
	rdx = Mem0[rbx + 0x0000000000000008:word64]
	Mem0[rax:word64] = rbp
	Mem0[rax + 0x0000000000000008:word64] = rdx
	Mem0[rbx + 0x0000000000000008:word64] = rax
	// succ:  l000000000040AF3E
l000000000040AF3E:
	Mem0[rbp + 0x0000000000000000:word64] = 0x0000000000000000
	v22 = Mem0[rsi + 0x0000000000000018:word64] - 0x0000000000000001
	Mem0[rsi + 0x0000000000000018:word64] = v22
	SCZO = cond(v22)
	r13 = r13 + 0x0000000000000010
	SCZO = cond(r13)
	SCZO = cond(Mem0[r14 + 0x0000000000000008:word64] - r13)
	branch Test(UGT,CZ) l000000000040AE68
	// succ:  l000000000040AF59 l000000000040AE68
l000000000040AF59:
	goto l000000000040AEEF
	// succ:  l000000000040AEEF
l000000000040AF5B:
	Mem0[rax:word64] = rbp
	v25 = Mem0[r12 + 0x0000000000000018:word64] + 0x0000000000000001
	Mem0[r12 + 0x0000000000000018:word64] = v25
	SCZO = cond(v25)
	goto l000000000040AF3E
	// succ:  l000000000040AF3E
l000000000040AF66:
	edi = 0x00000010
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000040AF2F
	// succ:  l000000000040AF75 l000000000040AF2F
l000000000040AF75:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040AE40_exit
fn000000000040AE40_exit:


// fn000000000040AFB0
// Return size: 8
void fn000000000040AFB0()
fn000000000040AFB0_entry:
	// succ:  l000000000040AFB0
l000000000040AFB0:
	rsp = fp
	rax = Mem0[rdi + 0x0000000000000020:word64]
	return
	// succ:  fn000000000040AFB0_exit
fn000000000040AFB0_exit:


// fn000000000040B400
// Return size: 8
void fn000000000040B400()
fn000000000040B400_entry:
	// succ:  l000000000040B400
l000000000040B400:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	eax = 0x0040AC60
	r15 = rdi
	edi = 0x00000050
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = r8
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rcx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l000000000040B42E
	// succ:  l000000000040B42A_1 l000000000040B42E
l000000000040B42A_1:
	r13 = rax
	// succ:  l000000000040B42E
l000000000040B42E:
	SZO = cond(rcx & rcx)
	C = false
	eax = 0x0040AC70
	branch Test(NE,Z) l000000000040B43A
	// succ:  l000000000040B436_2 l000000000040B43A
l000000000040B436_2:
	r12 = rax
	// succ:  l000000000040B43A
l000000000040B43A:
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000040B598
	// succ:  l000000000040B44B l000000000040B598
l000000000040B44B:
	SZO = cond(rbp & rbp)
	C = false
	eax = 0x00415EE0
	rdi = rbx + 0x0000000000000028
	branch Test(NE,Z) l000000000040B45B
	// succ:  l000000000040B457_3 l000000000040B45B
l000000000040B457_3:
	rbp = rax
	// succ:  l000000000040B45B
l000000000040B45B:
	Mem0[rbx + 0x0000000000000028:word64] = rbp
	call fn000000000040ADB0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040B548
	// succ:  l000000000040B46C l000000000040B548
l000000000040B46C:
	SCZO = cond(Mem0[rbp + 0x0000000000000010:byte] - 0x00)
l000000000040B52A:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040B400_exit
l000000000040B548:
	rdi = rbx
	free(rdi)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040B400_exit
l000000000040B598:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040B52A
	// succ:  l000000000040B52A
fn000000000040B400_exit:


// fn000000000040B640
// Return size: 0
void fn000000000040B640()
fn000000000040B640_entry:
	goto l000000000040B640
	// succ:  l000000000040B640
l00000000004021F0:
	call Mem0[0x000000000061A040:word32] (retsize: 4;)
	return
	// succ:  fn000000000040B640_exit
l000000000040B640:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	SCZO = cond(Mem0[rdi + 0x0000000000000040:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l000000000040B655
	// succ:  l000000000040B64E l000000000040B655
l000000000040B64E:
	SCZO = cond(Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000000)
	branch Test(NE,Z) l000000000040B6C6
	// succ:  l000000000040B655 l000000000040B6C6
l000000000040B655:
	rax = Mem0[rbp + 0x0000000000000008:word64]
	// succ:  l000000000040B659
l000000000040B659:
	r12 = Mem0[r13 + 0x0000000000000000:word64]
	SCZO = cond(r12 - rax)
	branch Test(UGE,C) l000000000040B693
	// succ:  l000000000040B662 l000000000040B693
l000000000040B662:
	// succ:  l000000000040B668
l000000000040B668:
	rdi = Mem0[r12 + 0x0000000000000008:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000040B67B
	// succ:  l000000000040B672 l000000000040B67B
l000000000040B672:
	goto l000000000040B689
	// succ:  l000000000040B689
l000000000040B678:
	rdi = rbx
	// succ:  l000000000040B67B
l000000000040B67B:
	rbx = Mem0[rdi + 0x0000000000000008:word64]
	free(rdi)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000040B678
	// succ:  l000000000040B689 l000000000040B678
l000000000040B689:
	r12 = r12 + 0x0000000000000010
	SCZO = cond(r12)
	SCZO = cond(Mem0[r13 + 0x0000000000000008:word64] - r12)
	branch Test(UGT,CZ) l000000000040B668
	r12 = r12 + 0x0000000000000010
	SCZO = cond(r12)
	SCZO = cond(Mem0[r13 + 0x0000000000000008:word64] - r12)
	branch Test(UGT,CZ) l000000000040B668
	// succ:  l000000000040B693 l000000000040B668
l000000000040B693:
	rdi = Mem0[rbp + 0x0000000000000048:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000040B6A3
	rdi = Mem0[rbp + 0x0000000000000048:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000040B6A3
	rdi = Mem0[rbp + 0x0000000000000048:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000040B6A3
	// succ:  l000000000040B69C l000000000040B6A3
l000000000040B69C:
	goto l000000000040B6B1
	// succ:  l000000000040B6B1
l000000000040B6A0:
	rdi = rbx
	// succ:  l000000000040B6A3
l000000000040B6A3:
	rbx = Mem0[rdi + 0x0000000000000008:word64]
	free(rdi)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000040B6A0
	// succ:  l000000000040B6B1 l000000000040B6A0
l000000000040B6B1:
	rdi = Mem0[rbp + 0x0000000000000000:word64]
	free(rdi)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rbp + 0x0000000000000000:word64]
	free(rdi)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l00000000004021F0
	// succ:  l00000000004021F0
l000000000040B6C6:
	r12 = Mem0[r15:word64]
	SCZO = cond(r12 - Mem0[r15 + 0x0000000000000008:word64])
	branch Test(UGE,C) l000000000040B693
	// succ:  l000000000040B6CF l000000000040B693
l000000000040B6CF:
	// succ:  l000000000040B6D0
l000000000040B6D0:
	rdi = Mem0[r12:word64]
	rbx = r12
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000040B6E3
	// succ:  l000000000040B6DC l000000000040B6E3
l000000000040B6DC:
	goto l000000000040B6EF
	// succ:  l000000000040B6EF
l000000000040B6E0:
	rdi = Mem0[rbx:word64]
	// succ:  l000000000040B6E3
l000000000040B6E3:
	call Mem0[rbp + 0x0000000000000040:word32] (retsize: 4;)
	rbx = Mem0[rbx + 0x0000000000000008:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000040B6E0
	// succ:  l000000000040B6EF l000000000040B6E0
l000000000040B6EF:
	rax = Mem0[rbp + 0x0000000000000008:word64]
	r12 = r12 + 0x0000000000000010
	SCZO = cond(r12)
	SCZO = cond(rax - r12)
	branch Test(UGT,CZ) l000000000040B6D0
	rax = Mem0[rbp + 0x0000000000000008:word64]
	r12 = r12 + 0x0000000000000010
	SCZO = cond(r12)
	SCZO = cond(rax - r12)
	branch Test(UGT,CZ) l000000000040B6D0
	// succ:  l000000000040B6FC l000000000040B6D0
l000000000040B6FC:
	goto l000000000040B659
	// succ:  l000000000040B659
fn000000000040B640_exit:


// fn000000000040B8F0
// Return size: 8
void fn000000000040B8F0()
fn000000000040B8F0_entry:
	// succ:  l000000000040B8F0
l000000000040B8F0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000010
	SCZO = cond(rsp)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000040BA67
	// succ:  l000000000040B904 l000000000040BA67
l000000000040B904:
	r12 = rdx
	rdx = rsp + 0x0000000000000008
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	rbx = rdi
	call fn000000000040ACB0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040B938
	// succ:  l000000000040B91B l000000000040B938
l000000000040B91B:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000040B9B8
	// succ:  l000000000040B924 l000000000040B9B8
l000000000040B924:
	Mem0[r12:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040B8F0_exit
l000000000040B938:
	rax = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l000000000040BA70
	// succ:  l000000000040B945 l000000000040BA70
l000000000040B945:
	branch rcx == 0x0000000000000000 l000000000040B949
	// succ:  l000000000040B945_1 l000000000040B949
l000000000040B945_1:
	branch rcx == 0x0000000000000000 l000000000040B949
	goto l000000000040B949
	// succ:  l000000000040B949 l000000000040B945_1
l000000000040B945_1:
	// succ:  l000000000040B949
l000000000040B949:
	v18 = (Mem0[rax - 0x0000000000000075:byte] & 0x01 << 0x43) != 0x00
	Mem0[rax - 0x0000000000000075:byte] = __ror(Mem0[rax - 0x0000000000000075:byte], 0x43)
	C = v18
	v20 = Mem0[rax - 0x0000000000000075:byte] + cl + C
	Mem0[rax - 0x0000000000000075:byte] = v20
	SCZO = cond(v20)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	v21 = Mem0[rax - 0x000000000000007B:byte] - cl
	Mem0[rax - 0x000000000000007B:byte] = v21
	SCZO = cond(v21)
	v22 = (Mem0[rdi:byte] & 0x01 << 0x88) != 0x00
	Mem0[rdi:byte] = __ror(Mem0[rdi:byte], 0x88)
	C = v22
	eax = eax ^ 0xF3000001
	SZO = cond(eax)
	C = false
l000000000040B9B8:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040B8F0_exit
l000000000040BA67:
	abort()
l000000000040BA70:
	rdx = rax
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	rdx = rdx >>u 0x0000000000000001
	SCZO = cond(rdx)
	rdx = rdx | rax
	SZO = cond(rdx)
	C = false
	branch rcx == 0x0000000000000000 l000000000040BA80
	// succ:  l000000000040BA7C_1 l000000000040BA80
l000000000040BA7C_1:
	// succ:  l000000000040BA80
l000000000040BA80:
	return
	// succ:  fn000000000040B8F0_exit
fn000000000040B8F0_exit:


// fn000000000040BB50
// Return size: 8
void fn000000000040BB50()
fn000000000040BB50_entry:
	// succ:  l000000000040BB50
l000000000040BB50:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rsi
	rsp = rsp - 0x0000000000000010
	SCZO = cond(rsp)
	rdx = rsp + 0x0000000000000008
	call fn000000000040B8F0 (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l000000000040BB80
	// succ:  l000000000040BB67 l000000000040BB80
l000000000040BB67:
	SZO = cond(eax & eax)
	C = false
	rax = rbx
	branch Test(NE,Z) l000000000040BB72
	// succ:  l000000000040BB6C_1 l000000000040BB72
l000000000040BB6C_1:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	// succ:  l000000000040BB72
l000000000040BB72:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040BB50_exit
l000000000040BB80:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040BB72
	// succ:  l000000000040BB72
fn000000000040BB50_exit:


// fn000000000040BB90
// Return size: 8
void fn000000000040BB90()
fn000000000040BB90_entry:
	// succ:  l000000000040BB90
l000000000040BB90:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	ecx = 0x00000001
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	SCZO = cond(rsp)
	rdx = rsp + 0x0000000000000008
	call fn000000000040ACB0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l000000000040BD08
	// succ:  l000000000040BBB6 l000000000040BD08
l000000000040BBB6:
	rdx = Mem0[rsp + 0x0000000000000008:word64]
	v13 = Mem0[rbx + 0x0000000000000020:word64] - 0x0000000000000001
	Mem0[rbx + 0x0000000000000020:word64] = v13
	SCZO = cond(v13)
	SCZO = cond(Mem0[rdx:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l000000000040BBD0
	// succ:  l000000000040BBC6 l000000000040BBD0
l000000000040BBC6:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040BB90_exit
l000000000040BBD0:
	rax = Mem0[rbx + 0x0000000000000018:word64]
	rax = rax - 0x0000000000000001
	SCZO = cond(rax)
	SZO = cond(rax & rax)
	C = false
	Mem0[rbx + 0x0000000000000018:word64] = rax
	branch Test(SG,S) l000000000040BCE8
	// succ:  l000000000040BBE5 l000000000040BCE8
l000000000040BBE5:
	branch rcx == 0x0000000000000000 l000000000040BBE9
	// succ:  l000000000040BBE5_1 l000000000040BBE9
l000000000040BBE5_1:
	branch rcx == 0x0000000000000000 l000000000040BBE9
	goto l000000000040BBE9
	// succ:  l000000000040BBE9 l000000000040BBE5_1
l000000000040BBE5_1:
	// succ:  l000000000040BBE9
l000000000040BBE9:
	v17 = (Mem0[rax - 0x0000000000000075:byte] & 0x01 << 0x43) != 0x00
	Mem0[rax - 0x0000000000000075:byte] = __ror(Mem0[rax - 0x0000000000000075:byte], 0x43)
	C = v17
	v19 = Mem0[rax - 0x0000000000000075:byte] + cl + C
	Mem0[rax - 0x0000000000000075:byte] = v19
	SCZO = cond(v19)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	v20 = Mem0[rax - 0x000000000000007B:byte] - cl
	Mem0[rax - 0x000000000000007B:byte] = v20
	SCZO = cond(v20)
	v21 = (Mem0[rdi:byte] & 0x01 << 0x88) != 0x00
	Mem0[rdi:byte] = __ror(Mem0[rdi:byte], 0x88)
	C = v21
	__syscall(0x00)
	v23 = Mem0[rax:byte] + al
	Mem0[rax:byte] = v23
	SCZO = cond(v23)
	branch rcx == 0x0000000000000000 l000000000040BBFF
	// succ:  l000000000040BBFB_1 l000000000040BBFF
l000000000040BBFB_1:
	// succ:  l000000000040BBFF
l000000000040BBFF:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = ebp
	ebp = rsp
	rsp = rsp - 0x0000000000001157
	cl = cl | Mem0[rdi:byte]
	SZO = cond(cl)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = ebp
	ebp = rsp
	rsp = rsp - 0x0000000000001097
	esp = esp + 0x00000010
	SCZO = cond(esp)
	rax = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040BB90_exit
l000000000040BCE8:
	rdx = rax
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	rdx = rdx >>u 0x0000000000000001
	SCZO = cond(rdx)
	rdx = rdx | rax
	SZO = cond(rdx)
	C = false
	branch rcx == 0x0000000000000000 l000000000040BCF8
	// succ:  l000000000040BCF4_1 l000000000040BCF8
l000000000040BCF4_1:
	// succ:  l000000000040BCF8
l000000000040BCF8:
	return
	// succ:  fn000000000040BB90_exit
l000000000040BD08:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040BBC6
	// succ:  l000000000040BBC6
fn000000000040BB90_exit:


// fn000000000040BD70
// Return size: 8
void fn000000000040BD70()
fn000000000040BD70_entry:
	// succ:  l000000000040BD70
l000000000040BD70:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	eax = edx
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rcx
	rsp = rsp - 184
	SCZO = cond(rsp)
	Mem0[rsp + 0x0000000000000038:word32] = eax
	eax = edx
	Mem0[rsp + 0x0000000000000030:word64] = rsi
	eax = eax & 0x00000020
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x0000000000000020:word32] = edx
	Mem0[rsp + 0x0000000000000028:word64] = r8
	rcx = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x00000000000000A8:word64] = rcx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(eax - 0x00000001)
	Mem0[rsp + 0x0000000000000058:word32] = eax
	eax = eax - eax - C
	SCZO = cond(eax)
	Mem0[rsp + 0x0000000000000024:word32] = eax
	v18 = Mem0[rsp + 0x0000000000000024:word32] & 0xFFFFFFE8
	Mem0[rsp + 0x0000000000000024:word32] = v18
	SZO = cond(Mem0[rsp + 0x0000000000000024:word32])
	C = false
	v19 = Mem0[rsp + 0x0000000000000024:word32] + 0x00000400
	Mem0[rsp + 0x0000000000000024:word32] = v19
	SCZO = cond(v19)
	call localeconv (retsize: 8;)
	r15 = Mem0[r8:word64]
	r13 = rax
	rdi = r15
	rax = strlen(rdi)
	rbp = Mem0[rbp + 0x0000000000000010:word64]
	r11 = rax
	r13 = Mem0[r13 + 0x0000000000000008:word64]
	rax = rax - 0x0000000000000001
	edx = 0x00000001
	SCZO = cond(rax - 0x0000000000000010)
	rdi = r13
	eax = 0x00413990
	branch Test(ULT,C) l000000000040BE0A
	// succ:  l000000000040BE06_1 l000000000040BE0A
l000000000040BE06_1:
	r11 = rdx
	// succ:  l000000000040BE0A
l000000000040BE0A:
	branch Test(ULT,C) l000000000040BE0E
	// succ:  l000000000040BE0A_2 l000000000040BE0E
l000000000040BE0A_2:
	r15 = rax
	// succ:  l000000000040BE0E
l000000000040BE0E:
	Mem0[rsp + 0x0000000000000050:word64] = r11
	rax = strlen(rdi)
	SCZO = cond(rax - 0x0000000000000011)
	eax = 0x00416919
	r11 = Mem0[rsp + 0x0000000000000050:word64]
	branch Test(ULT,C) l000000000040BE2A
	// succ:  l000000000040BE26_3 l000000000040BE2A
l000000000040BE26_3:
	r13 = rax
	// succ:  l000000000040BE2A
l000000000040BE2A:
	rax = r14
	r8 = r8 + 648
	SCZO = cond(r8)
	SCZO = cond(Mem0[rsp + 0x0000000000000028:word64] - rbx)
	Mem0[rsp + 0x0000000000000018:word64] = rax
	branch Test(UGT,CZ) l000000000040C0E0
	// succ:  l000000000040BE43 l000000000040C0E0
l000000000040BE43:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rbx
	rdx = rdx_rax % Mem0[rsp + 0x0000000000000028:word64]
	rax = rdx_rax /u Mem0[rsp + 0x0000000000000028:word64]
	SCZO = cond(rax)
	SZO = cond(rdx & rdx)
	C = false
	rcx = rax
	branch Test(EQ,Z) l000000000040C2F0
	// succ:  l000000000040BE59 l000000000040C2F0
l000000000040BE59:
	Mem0[rsp + 0x0000000000000068:word64] = r12
	SZO = cond(r12 & r12)
	C = false
	rLoc1 = (real64) Mem0[rsp + 0x0000000000000068:int64]
	branch Test(SG,S) l000000000040C5F0
	// succ:  l000000000040BE6B l000000000040C5F0
l000000000040BE6B:
	Mem0[rsp + 0x0000000000000068:word64] = rbx
	SZO = cond(rbx & rbx)
	C = false
	rLoc2 = (real64) Mem0[rsp + 0x0000000000000068:int64]
	branch Test(SG,S) l000000000040C608
	// succ:  l000000000040BE7D l000000000040C608
l000000000040BE7D:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rsp + 0x0000000000000068:word64] = rax
	SZO = cond(rax & rax)
	C = false
	rLoc3 = (real64) Mem0[rsp + 0x0000000000000068:int64]
	branch Test(SG,S) l000000000040C5E0
	// succ:  l000000000040BE94 l000000000040C5E0
l000000000040BE94:
	SZO = cond(Mem0[rsp + 0x0000000000000020:byte] & 0x10)
	C = false
	rLoc2 = rLoc2 / rLoc3
	rLoc1 = rLoc1 * rLoc2
	branch Test(EQ,Z) l000000000040C1B8
	// succ:  l000000000040BEA3 l000000000040C1B8
l000000000040BEA3:
	rLoc2 = (real64) Mem0[rsp + 0x0000000000000024:int32]
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	rLoc3 = rLoc3
	// succ:  l000000000040BEB4
l000000000040BEB4:
	rLoc4 = rLoc4
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	rLoc4 = rLoc4 * rLoc2
	v40 = rLoc4
	rLoc4 = rLoc1
	rLoc1 = v40
l000000000040C0E0:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000040BE59
	// succ:  l000000000040C0E9 l000000000040BE59
l000000000040C0E9:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rdx = rdx_rax % rbx
	rax = rdx_rax /u rbx
	SCZO = cond(rax)
	SZO = cond(rdx & rdx)
	C = false
	rsi = rax
	branch Test(NE,Z) l000000000040BE59
	// succ:  l000000000040C0FF l000000000040BE59
l000000000040C0FF:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = r12
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	rdi = rdx + rdx * 0x0000000000000004
	r10 = rax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rdi + rdi
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	rdx = rdx + rdx
	SCZO = cond(rdx)
	edi = eax
	SCZO = cond(rsi - rdx)
	branch Test(ULE,CZ) l000000000040C6E0
	// succ:  l000000000040C125 l000000000040C6E0
l000000000040C125:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	cl = Test(NE,Z)
	// succ:  l000000000040C12D
l000000000040C12D:
	r9d = Mem0[rsp + 0x0000000000000020:word64]
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	ebx = 0xFFFFFFFF
	r9d = r9d & 0x0000000000000010
	SZO = cond(r9d)
	C = false
	branch Test(EQ,Z) l000000000040C530
	// succ:  l000000000040C146 l000000000040C530
l000000000040C146:
	esi = Mem0[rsp + 0x0000000000000024:word32]
	SCZO = cond(r10 - rsi)
	branch Test(ULT,C) l000000000040C710
	// succ:  l000000000040C153 l000000000040C710
l000000000040C153:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	r12d = Mem0[rsp + 0x0000000000000024:word64]
	goto l000000000040C17D
	// succ:  l000000000040C17D
l000000000040C160:
	SZO = cond(ecx & ecx)
	C = false
	cl = Test(NE,Z)
	ecx = (word32) cl
	// succ:  l000000000040C168
l000000000040C168:
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	SCZO = cond(rsi - r8)
	branch Test(UGT,CZ) l000000000040C49F
	// succ:  l000000000040C174 l000000000040C49F
l000000000040C174:
	SCZO = cond(ebx - 0x00000008)
	branch Test(EQ,Z) l000000000040C768
	// succ:  l000000000040C17D l000000000040C768
l000000000040C17D:
	rax = r10
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	r8 = rax
	eax = rdx + rdx * 0x00000004
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	r10 = r8
	eax = rdi + rax * 0x00000002
	edi = ecx
	edi = edi >> 0x00000001
	SCZO = cond(edi)
	edx = edx_eax % r12d
	eax = edx_eax /u r12d
	SCZO = cond(eax)
	r14d = rdi + rdx * 0x00000002
	edi = eax
	ecx = ecx + r14d
	SCZO = cond(ecx)
	SCZO = cond(r12d - r14d)
	branch Test(UGT,CZ) l000000000040C160
	rax = r10
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	r8 = rax
	eax = rdx + rdx * 0x00000004
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	r10 = r8
	eax = rdi + rax * 0x00000002
	edi = ecx
	edi = edi >> 0x00000001
	SCZO = cond(edi)
	edx = edx_eax % r12d
	eax = edx_eax /u r12d
	SCZO = cond(eax)
	r14d = rdi + rdx * 0x00000002
	edi = eax
	ecx = ecx + r14d
	SCZO = cond(ecx)
	SCZO = cond(r12d - r14d)
	branch Test(UGT,CZ) l000000000040C160
	// succ:  l000000000040C1A8 l000000000040C160
l000000000040C1A8:
	SCZO = cond(r12d - ecx)
	ecx = ecx - ecx - C
	SCZO = cond(ecx)
	ecx = ~ecx
	ecx = ecx + 0x00000003
	SCZO = cond(ecx)
	SCZO = cond(r12d - ecx)
	ecx = ecx - ecx - C
	SCZO = cond(ecx)
	ecx = ~ecx
	ecx = ecx + 0x00000003
	SCZO = cond(ecx)
	goto l000000000040C168
	// succ:  l000000000040C168
l000000000040C1B8:
	SCZO = cond(Mem0[rsp + 0x0000000000000038:word32] - 0x00000001)
	branch Test(EQ,Z) l000000000040C1CD
	// succ:  l000000000040C1BF l000000000040C1CD
l000000000040C1BF:
	rLoc2 = Mem0[0x0000000000415F90:real80]
l000000000040C1CD:
	Mem0[rsp:real80] = rLoc1
	rbx = Mem0[rsp + 0x0000000000000030:word64]
	ecx = 0x00415F18
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	r14d = r14d ^ r14d
	SZO = cond(r14d)
	C = false
	rdi = rbx
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0, 32)
	rdi = rbx
	ebx = 0xFFFFFFFF
	rax = strlen(rdi)
	r15 = rax
	// succ:  l000000000040C218
l000000000040C218:
	r12 = Mem0[rsp + 0x0000000000000018:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdx = r15
	r12 = r12 - r15
	SCZO = cond(r12)
	r15 = r15 - r14
	SCZO = cond(r15)
	rdi = r12
	call memmove (retsize: 8;)
	r8 = r12 + r15
	// succ:  l000000000040C237
l000000000040C237:
	SZO = cond(Mem0[rsp + 0x0000000000000020:byte] & 0x04)
	C = false
	branch Test(NE,Z) l000000000040C318
	// succ:  l000000000040C242 l000000000040C318
l000000000040C242:
	SZO = cond(Mem0[rsp + 0x0000000000000020:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l000000000040C2BA
	// succ:  l000000000040C249 l000000000040C2BA
l000000000040C249:
	SCZO = cond(ebx - 0xFFFFFFFF)
	branch Test(EQ,Z) l000000000040C618
	// succ:  l000000000040C252 l000000000040C618
l000000000040C252:
	eax = Mem0[rsp + 0x0000000000000020:word32]
	ecx = ebx
	eax = eax & 0x00000100
	SZO = cond(eax)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	branch Test(EQ,Z) l000000000040C2BA
	// succ:  l000000000040C261 l000000000040C2BA
l000000000040C261:
	SZO = cond(Mem0[rsp + 0x0000000000000020:byte] & 0x40)
	C = false
	branch Test(NE,Z) l000000000040C3E8
	// succ:  l000000000040C26C l000000000040C3E8
l000000000040C26C:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l000000000040C7EB
	// succ:  l000000000040C274 l000000000040C7EB
l000000000040C274:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	rdx = rcx + 0x0000000000000001
	ecx = Mem0[rsp + 0x0000000000000058:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l000000000040C3D0
	// succ:  l000000000040C289 l000000000040C3D0
l000000000040C289:
	rcx = (int64) ebx
	ecx = (word32) Mem0[rcx + 0x0000000000415F78:byte]
	// succ:  l000000000040C293
l000000000040C293:
	rdi = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[rdi:byte] = cl
	// succ:  l000000000040C29A
l000000000040C29A:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040C7F5
	// succ:  l000000000040C2A2 l000000000040C7F5
l000000000040C2A2:
	eax = Mem0[rsp + 0x0000000000000058:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040C3B8
	// succ:  l000000000040C2AE l000000000040C3B8
l000000000040C2AE:
	rax = rdx + 0x0000000000000001
	Mem0[rdx:byte] = 0x42
	Mem0[rsp + 0x0000000000000018:word64] = rax
	// succ:  l000000000040C2BA
l000000000040C2BA:
	rax = Mem0[rsp + 0x0000000000000018:word64]
	rdi = Mem0[rsp + 0x00000000000000A8:word64]
	rdi = rdi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rdi)
	C = false
	Mem0[rax:byte] = 0x00
	rax = r12
	branch Test(NE,Z) l000000000040C7E6
	// succ:  l000000000040C2DC l000000000040C7E6
l000000000040C2DC:
	rsp = rsp + 184
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040BD70_exit
l000000000040C2F0:
	r10 = rax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	r10 = r10 *s r12
	SCZO = cond(r10)
	rax = r10
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	SCZO = cond(rax - r12)
	branch Test(NE,Z) l000000000040BE59
	// succ:  l000000000040C308 l000000000040BE59
l000000000040C308:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	goto l000000000040C12D
	// succ:  l000000000040C12D
l000000000040C318:
	r8 = r8 - r12
	SCZO = cond(r8)
	rdi = r13
	r15 = 0xFFFFFFFFFFFFFFFF
	r14 = r8
	rax = strlen(rdi)
	rdi = rsp + 0x0000000000000070
	rsi = r12
	ecx = 0x00000029
	rdx = r14
	Mem0[rsp + 0x0000000000000038:word64] = rax
	call __memcpy_chk (retsize: 8;)
	r9 = r12 + r14
	r12 = r13
	r13 = Mem0[rsp + 0x0000000000000038:word64]
	goto l000000000040C36C
	// succ:  l000000000040C36C
l000000000040C358:
	r9 = r9 - r13
	SCZO = cond(r9)
	rdx = r13
	rsi = r12
	rdi = r9
	rax = memcpy(rdi, rsi, rdx)
	r9 = rax
	// succ:  l000000000040C36C
l000000000040C36C:
	edx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040C383
	// succ:  l000000000040C374 l000000000040C383
l000000000040C374:
	SCZO = cond(dl - 0x7E)
	r15d = (word64) dl
	branch Test(ULE,CZ) l000000000040C37F
	// succ:  l000000000040C37B_1 l000000000040C37F
l000000000040C37B_1:
	r15 = r14
	// succ:  l000000000040C37F
l000000000040C37F:
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	// succ:  l000000000040C383
l000000000040C383:
	SCZO = cond(r15 - r14)
	rax = rsp + 0x0000000000000070
	branch Test(ULE,CZ) l000000000040C38F
	// succ:  l000000000040C38B_1 l000000000040C38F
l000000000040C38B_1:
	r15 = r14
	// succ:  l000000000040C38F
l000000000040C38F:
	r14 = r14 - r15
	SCZO = cond(r14)
	r9 = r9 - r15
	SCZO = cond(r9)
	rdx = r15
	rsi = rax + r14
	rdi = r9
	rax = memcpy(rdi, rsi, rdx)
	SZO = cond(r14 & r14)
	C = false
	r9 = rax
	branch Test(NE,Z) l000000000040C358
	// succ:  l000000000040C3AC l000000000040C358
l000000000040C3AC:
	r12 = rax
	goto l000000000040C242
	// succ:  l000000000040C242
l000000000040C3B8:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l000000000040C2AE
	// succ:  l000000000040C3C0 l000000000040C2AE
l000000000040C3C0:
	Mem0[rdx:byte] = 0x69
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	goto l000000000040C2AE
	// succ:  l000000000040C2AE
l000000000040C3D0:
	SCZO = cond(ebx - 0x00000001)
	ecx = 0x0000006B
	branch Test(NE,Z) l000000000040C289
	// succ:  l000000000040C3DE l000000000040C289
l000000000040C3DE:
	goto l000000000040C293
	// succ:  l000000000040C293
l000000000040C3E8:
	rcx = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rcx + 0x0000000000000289
	Mem0[rcx + 0x0000000000000288:byte] = 0x20
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	goto l000000000040C26C
	// succ:  l000000000040C26C
l000000000040C49F:
	SCZO = cond(r8 - 0x0000000000000009)
	branch Test(UGT,CZ) l000000000040C768
	// succ:  l000000000040C4A9 l000000000040C768
l000000000040C4A9:
	SCZO = cond(Mem0[rsp + 0x0000000000000038:word32] - 0x00000001)
	branch Test(EQ,Z) l000000000040C7B0
	// succ:  l000000000040C4B4 l000000000040C7B0
l000000000040C4B4:
	r12d = Mem0[rsp + 0x0000000000000038:word64]
	SZO = cond(ecx & ecx)
	C = false
	dl = Test(GT,SZO)
	SZO = cond(r12d & r12d)
	C = false
	sil = Test(EQ,Z)
	edx = edx & esi
	SZO = cond(edx)
	C = false
	// succ:  l000000000040C4C7
l000000000040C4C7:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040C788
	// succ:  l000000000040C4CF l000000000040C788
l000000000040C4CF:
	edi = rax + 0x0000000000000001
	SCZO = cond(edi - 0x0000000A)
	branch Test(EQ,Z) l000000000040C7CE
	// succ:  l000000000040C4DB l000000000040C7CE
l000000000040C4DB:
	rax = Mem0[rsp + 0x0000000000000030:word64]
	edi = edi + 0x00000030
	SCZO = cond(edi)
	rdx = r11
	rsi = r15
	Mem0[rsp + 0x000000000000005C:word32] = r9d
	Mem0[rsp + 0x0000000000000040:word64] = r10
	Mem0[rsp + 0x0000000000000050:word64] = r11
	r8 = r8 + 0x0000000000000287
	Mem0[rax + 0x0000000000000287:byte] = dil
	r8 = r8 - r11
	SCZO = cond(r8)
	rdi = r8
	rax = memcpy(rdi, rsi, rdx)
	r11 = Mem0[rsp + 0x0000000000000050:word64]
	r10 = Mem0[rsp + 0x0000000000000040:word64]
	r8 = rax
	r9d = Mem0[rsp + 0x000000000000005C:word64]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
l000000000040C530:
	SCZO = cond(Mem0[rsp + 0x0000000000000038:word32] - 0x00000001)
	branch Test(EQ,Z) l000000000040C6F0
	// succ:  l000000000040C53B l000000000040C6F0
l000000000040C53B:
	esi = Mem0[rsp + 0x0000000000000038:word32]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040C54C
	// succ:  l000000000040C545 l000000000040C54C
l000000000040C545:
	ecx = ecx + edi
	SCZO = cond(ecx)
	SZO = cond(ecx & ecx)
	C = false
	al = Test(GT,SZO)
	// succ:  l000000000040C54C
l000000000040C54C:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040C5A0
	// succ:  l000000000040C550 l000000000040C5A0
l000000000040C550:
	r10 = r10 + 0x0000000000000001
	SCZO = cond(r10)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(EQ,Z) l000000000040C5A0
	// succ:  l000000000040C559 l000000000040C5A0
l000000000040C559:
	eax = Mem0[rsp + 0x0000000000000024:word32]
	SCZO = cond(rax - r10)
	branch Test(NE,Z) l000000000040C5A0
	// succ:  l000000000040C562 l000000000040C5A0
l000000000040C562:
	SCZO = cond(ebx - 0x00000008)
	branch Test(EQ,Z) l000000000040C5A0
	// succ:  l000000000040C567 l000000000040C5A0
l000000000040C567:
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	SZO = cond(Mem0[rsp + 0x0000000000000020:byte] & 0x08)
	C = false
	edx = 0x00000001
	branch Test(NE,Z) l000000000040C5A0
	// succ:  l000000000040C577 l000000000040C5A0
l000000000040C577:
	rax = rax - 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = 0x30
	rdx = r11
	rsi = r15
	Mem0[rsp + 0x0000000000000038:word64] = r10
	rax = rax - r11
	SCZO = cond(rax)
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	r10 = Mem0[rsp + 0x0000000000000038:word64]
	r8 = rax
l000000000040C5A0:
	r12 = r8
	r9 = 0x00000000CCCCCCCD
	// succ:  l000000000040C5B0
l000000000040C5B0:
	rax = r10
	r12 = r12 - 0x0000000000000001
	SCZO = cond(r12)
	rdx_rax = rcx *u rax
	SCZO = cond(rdx_rax)
	rdx = rdx >>u 0x0000000000000003
	SCZO = cond(rdx)
	rax = rdx + rdx * 0x0000000000000004
	rax = rax + rax
	SCZO = cond(rax)
	r10 = r10 - rax
	SCZO = cond(r10)
	r10d = r10d + 0x0000000000000030
	SCZO = cond(r10d)
	SZO = cond(rdx & rdx)
	C = false
	Mem0[r12:byte] = r10b
	r10 = rdx
	branch Test(NE,Z) l000000000040C5B0
	// succ:  l000000000040C5D8 l000000000040C5B0
l000000000040C5D8:
	goto l000000000040C237
	// succ:  l000000000040C237
l000000000040C5E0:
	rLoc3 = rLoc3 + Mem0[0x0000000000415F08:real32]
	goto l000000000040BE94
	// succ:  l000000000040BE94
l000000000040C5F0:
	rLoc1 = rLoc1 + Mem0[0x0000000000415F08:real32]
	Mem0[rsp + 0x0000000000000068:word64] = rbx
	SZO = cond(rbx & rbx)
	C = false
	rLoc2 = (real64) Mem0[rsp + 0x0000000000000068:int64]
	branch Test(NS,S) l000000000040BE7D
	// succ:  l000000000040C608 l000000000040BE7D
l000000000040C608:
	rLoc2 = rLoc2 + Mem0[0x0000000000415F08:real32]
	goto l000000000040BE7D
	// succ:  l000000000040BE7D
l000000000040C618:
	rdx = Mem0[rsp + 0x0000000000000028:word64]
	SCZO = cond(rdx - 0x0000000000000001)
	branch Test(ULE,CZ) l000000000040C7A9
	// succ:  l000000000040C627 l000000000040C7A9
l000000000040C627:
	r14d = Mem0[rsp + 0x0000000000000024:word64]
	ebx = 0x00000001
	eax = 0x00000001
	// succ:  l000000000040C640
l000000000040C640:
	rax = rax *s r14
	SCZO = cond(rax)
	SCZO = cond(rdx - rax)
	branch Test(ULE,CZ) l000000000040C252
	// succ:  l000000000040C64D l000000000040C252
l000000000040C64D:
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	SCZO = cond(ebx - 0x00000008)
	branch Test(NE,Z) l000000000040C640
	// succ:  l000000000040C655 l000000000040C640
l000000000040C655:
	goto l000000000040C252
	// succ:  l000000000040C252
l000000000040C6E0:
	ecx = ecx - ecx - C
	SCZO = cond(ecx)
	ecx = ~ecx
	ecx = ecx + 0x00000003
	SCZO = cond(ecx)
	goto l000000000040C12D
	// succ:  l000000000040C12D
l000000000040C6F0:
	rax = r10
	rcx = (int64) ecx
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	rax = rax + rcx
	SCZO = cond(rax)
	al = Test(NE,Z)
	eax = (word32) al
	edi = edi + eax
	SCZO = cond(edi)
	SCZO = cond(edi - 0x00000005)
	al = Test(GT,SZO)
	goto l000000000040C54C
	// succ:  l000000000040C54C
l000000000040C710:
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	goto l000000000040C530
	// succ:  l000000000040C530
l000000000040C768:
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	goto l000000000040C530
	// succ:  l000000000040C530
l000000000040C788:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040C4DB
	// succ:  l000000000040C790 l000000000040C4DB
l000000000040C790:
	SZO = cond(Mem0[rsp + 0x0000000000000020:byte] & 0x08)
	C = false
	branch Test(NE,Z) l000000000040C7C2
	SZO = cond(Mem0[rsp + 0x0000000000000020:byte] & 0x08)
	C = false
	branch Test(NE,Z) l000000000040C7C2
	// succ:  l000000000040C797 l000000000040C7C2
l000000000040C797:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	goto l000000000040C4DB
	// succ:  l000000000040C4DB
l000000000040C7A9:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	goto l000000000040C252
	// succ:  l000000000040C252
l000000000040C7B0:
	edx = eax
	edx = edx & 0x00000001
	SZO = cond(edx)
	C = false
	edx = edx + ecx
	SCZO = cond(edx)
	SCZO = cond(edx - 0x00000002)
	dl = Test(GT,SZO)
	goto l000000000040C4C7
	// succ:  l000000000040C4C7
l000000000040C7C2:
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	goto l000000000040C530
	// succ:  l000000000040C530
l000000000040C7CE:
	r10 = r8 + 0x0000000000000001
	SCZO = cond(r10 - 0x000000000000000A)
	branch Test(NE,Z) l000000000040C7FF
	// succ:  l000000000040C7D8 l000000000040C7FF
l000000000040C7D8:
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	goto l000000000040C530
	// succ:  l000000000040C530
l000000000040C7E6:
	__stack_chk_fail()
	// succ:  l000000000040C7EB
l000000000040C7EB:
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	goto l000000000040C29A
	// succ:  l000000000040C29A
l000000000040C7F5:
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	goto l000000000040C2BA
	// succ:  l000000000040C2BA
l000000000040C7FF:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	goto l000000000040C790
	// succ:  l000000000040C790
fn000000000040BD70_exit:


// fn000000000040C810
// Return size: 8
void fn000000000040C810()
fn000000000040C810_entry:
	// succ:  l000000000040C810
l000000000040C810:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000018
	SCZO = cond(rsp)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040C910
	// succ:  l000000000040C82C l000000000040C910
l000000000040C82C:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(Mem0[rbx:byte] - 0x27)
	branch Test(EQ,Z) l000000000040C8A0
	// succ:  l000000000040C833 l000000000040C8A0
l000000000040C833:
	ecx = 0x00000004
	edx = 0x00415F50
	esi = 0x00415F60
	rdi = rbx
	call fn0000000000409E50 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l000000000040C8B0
	// succ:  l000000000040C84E l000000000040C8B0
l000000000040C84E:
	ax = (int16) al
	Mem0[r12:word64] = 0x0000000000000001
	edx = 0x00000001
	ebp = ebp | Mem0[0x00415F50 + rax * 0x00000004:word32]
	SZO = cond(ebp)
	C = false
	// succ:  l000000000040C864
l000000000040C864:
	Mem0[rbp + 0x0000000000000000:word32] = ebp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l000000000040C86A
l000000000040C86A:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l000000000040C894
	// succ:  l000000000040C86F l000000000040C894
l000000000040C86F:
	edi = 0x00415F2E
	rax = getenv(rdi)
	SCZO = cond(rax - 0x0000000000000001)
	rax = rax - rax - C
	SCZO = cond(rax)
	eax = eax & 0x00000200
	SZO = cond(eax)
	C = false
	r8 = r8 + 512
	SCZO = cond(r8)
	Mem0[r12:word64] = rax
	eax = 0x00000004
	// succ:  l000000000040C894
l000000000040C894:
	rsp = rsp + 0x0000000000000018
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040C810_exit
l000000000040C8A0:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	bpl = 0x04
	goto l000000000040C833
	// succ:  l000000000040C833
l000000000040C8B0:
	rsi = rsp + 0x0000000000000008
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	eax = 0x00415F3E
	rcx = r12
	rdi = rbx
	call fn0000000000411360 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040C968
	// succ:  l000000000040C8D0 l000000000040C968
l000000000040C8D0:
	eax = (word32) Mem0[rbx:byte]
	eax = eax - 0x00000030
	SCZO = cond(eax)
	SCZO = cond(al - 0x09)
	branch Test(ULE,CZ) l000000000040C907
	// succ:  l000000000040C8DA l000000000040C907
l000000000040C8DA:
	rdx = Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rbx - rdx)
	branch Test(NE,Z) l000000000040C8F9
	// succ:  l000000000040C8E4 l000000000040C8F9
l000000000040C8E4:
	goto l000000000040C980
	// succ:  l000000000040C980
l000000000040C8F0:
	SCZO = cond(rbx - rdx)
	branch Test(EQ,Z) l000000000040C980
	// succ:  l000000000040C8F9 l000000000040C980
l000000000040C8F9:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	eax = (word32) Mem0[rbx:byte]
	eax = eax - 0x00000030
	SCZO = cond(eax)
	SCZO = cond(al - 0x09)
	branch Test(UGT,CZ) l000000000040C8F0
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	eax = (word32) Mem0[rbx:byte]
	eax = eax - 0x00000030
	SCZO = cond(eax)
	SCZO = cond(al - 0x09)
	branch Test(UGT,CZ) l000000000040C8F0
	// succ:  l000000000040C907 l000000000040C8F0
l000000000040C907:
	rdx = Mem0[r12:word64]
	rdx = Mem0[r12:word64]
	rdx = Mem0[r12:word64]
	goto l000000000040C864
	// succ:  l000000000040C864
l000000000040C910:
	edi = 0x004138E4
	rax = getenv(rdi)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(NE,Z) l000000000040C82C
	// succ:  l000000000040C926 l000000000040C82C
l000000000040C926:
	edi = 0x00415F24
	rax = getenv(rdi)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(NE,Z) l000000000040C82C
	// succ:  l000000000040C93C l000000000040C82C
l000000000040C93C:
	edi = 0x00415F2E
	rax = getenv(rdi)
	SCZO = cond(rax - 0x0000000000000001)
	rdx = rdx - rdx - C
	SCZO = cond(rdx)
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	edx = edx & 0x00000200
	SZO = cond(edx)
	C = false
	rdx = rdx + 512
	SCZO = cond(rdx)
	Mem0[r12:word64] = rdx
	goto l000000000040C864
	// succ:  l000000000040C864
l000000000040C968:
	Mem0[rbp + 0x0000000000000000:word32] = 0x00000000
	rdx = Mem0[r12:word64]
	goto l000000000040C86A
	// succ:  l000000000040C86A
l000000000040C980:
	SCZO = cond(Mem0[rdx - 0x0000000000000001:byte] - 0x42)
	branch Test(EQ,Z) l000000000040C998
	// succ:  l000000000040C986 l000000000040C998
l000000000040C986:
	bpl = bpl | 0x80
	SZO = cond(bpl)
	C = false
	// succ:  l000000000040C98A
l000000000040C98A:
	ebp = ebp | 0x00000020
	SZO = cond(ebp)
	C = false
	goto l000000000040C907
	// succ:  l000000000040C907
l000000000040C998:
	ebp = ebp | 0x00000180
	SZO = cond(ebp)
	C = false
	SCZO = cond(Mem0[rdx - 0x0000000000000002:byte] - 0x69)
	branch Test(NE,Z) l000000000040C907
	// succ:  l000000000040C9A8 l000000000040C907
l000000000040C9A8:
	goto l000000000040C98A
	// succ:  l000000000040C98A
fn000000000040C810_exit:


// fn000000000040C9B0
// Return size: 8
void fn000000000040C9B0()
fn000000000040C9B0_entry:
	// succ:  l000000000040C9B0
l000000000040C9B0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	ebp = edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = Mem0[0x000000000061B1F8:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000040C9D1
	// succ:  l000000000040C9C2 l000000000040C9D1
l000000000040C9C2:
	goto l000000000040C9F0
	// succ:  l000000000040C9F0
l000000000040C9C8:
	rbx = Mem0[rbx + 0x0000000000000008:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000040C9F0
	// succ:  l000000000040C9D1 l000000000040C9F0
l000000000040C9D1:
	SCZO = cond(Mem0[rbx:word32] - ebp)
	branch Test(NE,Z) l000000000040C9C8
	SCZO = cond(Mem0[rbx:word32] - ebp)
	branch Test(NE,Z) l000000000040C9C8
	// succ:  l000000000040C9D5 l000000000040C9C8
l000000000040C9D5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x0000000000000010:byte] - 0x00)
	rdx = rbx + 0x0000000000000010
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	branch Test(EQ,Z) l000000000040C9E7
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x0000000000000010:byte] - 0x00)
	rdx = rbx + 0x0000000000000010
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	branch Test(EQ,Z) l000000000040C9E7
	// succ:  l000000000040C9E3_1 l000000000040C9E7 l000000000040C9E3_1
l000000000040C9E3_1:
	rax = rdx
	goto l000000000040C9E7
	// succ:  l000000000040C9E7
l000000000040C9E3_1:
	rax = rdx
	// succ:  l000000000040C9E7
l000000000040C9E7:
	return
	return
	// succ:  fn000000000040C9B0_exit fn000000000040C9B0_exit
l000000000040C9F0:
	edi = ebp
	esp = 0x00416919
	rax = getpwuid(rdi)
	SZO = cond(rax & rax)
	C = false
	edi = 0x00000011
	branch Test(EQ,Z) l000000000040CA16
	// succ:  l000000000040CA07 l000000000040CA16
l000000000040CA07:
	r12 = Mem0[r8:word64]
	rdi = r12
	rax = strlen(rdi)
	rdi = rax + 0x0000000000000011
	// succ:  l000000000040CA16
l000000000040CA16:
	call fn0000000000410C40 (retsize: 8;)
	rdi = rax + 0x0000000000000010
	Mem0[rax:word32] = ebp
	rsi = r12
	rbx = rax
	rax = strcpy(rdi, rsi)
	rax = Mem0[0x000000000061B1F8:word64]
	Mem0[0x000000000061B1F8:word64] = rbx
	Mem0[rbx + 0x0000000000000008:word64] = rax
	goto l000000000040C9D5
	// succ:  l000000000040C9D5
fn000000000040C9B0_exit:


// fn000000000040CB40
// Return size: 8
void fn000000000040CB40()
fn000000000040CB40_entry:
	// succ:  l000000000040CB40
l000000000040CB40:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	ebp = edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = Mem0[0x000000000061B1E8:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000040CB61
	// succ:  l000000000040CB52 l000000000040CB61
l000000000040CB52:
	goto l000000000040CB80
	// succ:  l000000000040CB80
l000000000040CB58:
	rbx = Mem0[rbx + 0x0000000000000008:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000040CB80
	// succ:  l000000000040CB61 l000000000040CB80
l000000000040CB61:
	SCZO = cond(Mem0[rbx:word32] - ebp)
	branch Test(NE,Z) l000000000040CB58
	SCZO = cond(Mem0[rbx:word32] - ebp)
	branch Test(NE,Z) l000000000040CB58
	// succ:  l000000000040CB65 l000000000040CB58
l000000000040CB65:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x0000000000000010:byte] - 0x00)
	rdx = rbx + 0x0000000000000010
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	branch Test(EQ,Z) l000000000040CB77
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x0000000000000010:byte] - 0x00)
	rdx = rbx + 0x0000000000000010
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	branch Test(EQ,Z) l000000000040CB77
	// succ:  l000000000040CB73_1 l000000000040CB77 l000000000040CB73_1
l000000000040CB73_1:
	rax = rdx
	goto l000000000040CB77
	// succ:  l000000000040CB77
l000000000040CB73_1:
	rax = rdx
	// succ:  l000000000040CB77
l000000000040CB77:
	return
	return
	// succ:  fn000000000040CB40_exit fn000000000040CB40_exit
l000000000040CB80:
	edi = ebp
	esp = 0x00416919
	call getgrgid (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	edi = 0x00000011
	branch Test(EQ,Z) l000000000040CBA6
	// succ:  l000000000040CB97 l000000000040CBA6
l000000000040CB97:
	r12 = Mem0[r8:word64]
	rdi = r12
	rax = strlen(rdi)
	rdi = rax + 0x0000000000000011
	// succ:  l000000000040CBA6
l000000000040CBA6:
	call fn0000000000410C40 (retsize: 8;)
	rdi = rax + 0x0000000000000010
	Mem0[rax:word32] = ebp
	rsi = r12
	rbx = rax
	rax = strcpy(rdi, rsi)
	rax = Mem0[0x000000000061B1E8:word64]
	Mem0[0x000000000061B1E8:word64] = rbx
	Mem0[rbx + 0x0000000000000008:word64] = rax
	goto l000000000040CB65
	// succ:  l000000000040CB65
fn000000000040CB40_exit:


// fn000000000040CCD0
// Return size: 8
void fn000000000040CCD0()
fn000000000040CCD0_entry:
	// succ:  l000000000040CCD0
l000000000040CCD0:
	rsp = fp
	SZO = cond(rdi & rdi)
	C = false
	rcx = rsi + 0x0000000000000014
	Mem0[rsi + 0x0000000000000014:byte] = 0x00
	r14 = 0x0000000066666667
	branch Test(SG,S) l000000000040CD28
	// succ:  l000000000040CCE7 l000000000040CD28
l000000000040CCE7:
	// succ:  l000000000040CCF0
l000000000040CCF0:
	rax = rdi
	rcx = rcx - 0x0000000000000001
	SCZO = cond(rcx)
	rdx_rax = rsi *s rax
	SCZO = cond(rdx_rax)
	rax = rdi
	rax = rax >> 0x000000000000003F
	SCZO = cond(rax)
	rdx = rdx >> 0x0000000000000002
	SCZO = cond(rdx)
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx + rdx * 0x0000000000000004
	rax = rax + rax
	SCZO = cond(rax)
	rdi = rdi - rax
	SCZO = cond(rdi)
	edi = edi + 0x00000030
	SCZO = cond(edi)
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx:byte] = dil
	rdi = rdx
	branch Test(NE,Z) l000000000040CCF0
	// succ:  l000000000040CD20 l000000000040CCF0
l000000000040CD20:
	rax = rcx
	return
	// succ:  fn000000000040CCD0_exit
l000000000040CD28:
	r8 = rsi
	esi = 0x00000030
	// succ:  l000000000040CD30
l000000000040CD30:
	rax = rdi
	rcx = rcx - 0x0000000000000001
	SCZO = cond(rcx)
	rdx_rax = r8 *s rax
	SCZO = cond(rdx_rax)
	rax = rdi
	rax = rax >> 0x000000000000003F
	SCZO = cond(rax)
	rdx = rdx >> 0x0000000000000002
	SCZO = cond(rdx)
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx + rdx * 0x0000000000000004
	eax = rsi + rax * 0x00000002
	eax = eax - edi
	SCZO = cond(eax)
	SZO = cond(rdx & rdx)
	C = false
	rdi = rdx
	Mem0[rcx:byte] = al
	branch Test(NE,Z) l000000000040CD30
	// succ:  l000000000040CD5B l000000000040CD30
l000000000040CD5B:
	rax = rcx
	rcx = rcx - 0x0000000000000001
	SCZO = cond(rcx)
	Mem0[rax - 0x0000000000000001:byte] = 0x2D
	rax = rcx
	return
	// succ:  fn000000000040CCD0_exit
fn000000000040CCD0_exit:


// fn000000000040CD70
// Return size: 8
void fn000000000040CD70()
fn000000000040CD70_entry:
	// succ:  l000000000040CD70
l000000000040CD70:
	rsp = fp
	rcx = rsi + 0x0000000000000014
	Mem0[rsi + 0x0000000000000014:byte] = 0x00
	r14 = 0x00000000CCCCCCCD
	// succ:  l000000000040CD88
l000000000040CD88:
	rax = rdi
	rcx = rcx - 0x0000000000000001
	SCZO = cond(rcx)
	rdx_rax = rsi *u rax
	SCZO = cond(rdx_rax)
	rdx = rdx >>u 0x0000000000000003
	SCZO = cond(rdx)
	rax = rdx + rdx * 0x0000000000000004
	rax = rax + rax
	SCZO = cond(rax)
	rdi = rdi - rax
	SCZO = cond(rdi)
	edi = edi + 0x00000030
	SCZO = cond(edi)
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx:byte] = dil
	rdi = rdx
	branch Test(NE,Z) l000000000040CD88
	// succ:  l000000000040CDAE l000000000040CD88
l000000000040CDAE:
	rax = rcx
	return
	// succ:  fn000000000040CD70_exit
fn000000000040CD70_exit:


// fn000000000040CDC0
// Return size: 8
void fn000000000040CDC0()
fn000000000040CDC0_entry:
	// succ:  l000000000040CDC0
l000000000040CDC0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rcx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = r9d
	rsp = rsp - 0x0000000000000038
	SCZO = cond(rsp)
	Mem0[rsp + 0x0000000000000008:word64] = rdi
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	Mem0[rsp + 0x0000000000000028:word32] = r8d
	rax = strlen(rdi)
	SZO = cond(bl & 0x02)
	C = false
	r14 = rax
	rbp = rax
	branch Test(EQ,Z) l000000000040CF60
	// succ:  l000000000040CDFA l000000000040CF60
l000000000040CDFA:
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	// succ:  l000000000040CE03
l000000000040CE03:
	r15 = rbp
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	// succ:  l000000000040CE08
l000000000040CE08:
	rax = Mem0[r12:word64]
	SCZO = cond(r15 - rax)
	branch Test(ULE,CZ) l000000000040CF2A
	// succ:  l000000000040CE15 l000000000040CF2A
l000000000040CE15:
	r14 = rax
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	// succ:  l000000000040CE1A
l000000000040CE1A:
	Mem0[r12:word64] = rax
	eax = Mem0[rsp + 0x0000000000000028:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040CF4C
	// succ:  l000000000040CE2A l000000000040CF4C
l000000000040CE2A:
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l000000000040CE3E
	// succ:  l000000000040CE32 l000000000040CE3E
l000000000040CE32:
	r12 = rcx
	ecx = ecx & 0x00000001
	SZO = cond(ecx)
	C = false
	r12 = r12 >>u 0x0000000000000001
	SCZO = cond(r12)
	rcx = rcx + r12
	SCZO = cond(rcx)
	// succ:  l000000000040CE3E
l000000000040CE3E:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(bl & 0x04)
	C = false
	branch Test(EQ,Z) l000000000040CE47
	// succ:  l000000000040CE43_1 l000000000040CE47
l000000000040CE43_1:
	rcx = rax
	// succ:  l000000000040CE47
l000000000040CE47:
	ebx = ebx & 0x00000008
	SZO = cond(ebx)
	C = false
	branch Test(EQ,Z) l000000000040CE4E
	// succ:  l000000000040CE4A_2 l000000000040CE4E
l000000000040CE4A_2:
	r12 = rax
	// succ:  l000000000040CE4E
l000000000040CE4E:
	SCZO = cond(Mem0[rsp + 0x0000000000000018:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l000000000040CEF9
	// succ:  l000000000040CE5A l000000000040CEF9
l000000000040CE5A:
	rax = Mem0[rsp + 0x0000000000000018:word64]
	SZO = cond(rcx & rcx)
	C = false
	rdx = rcx - 0x0000000000000001
	rbx = r13 - 0x0000000000000001 + rax
	branch Test(EQ,Z) l000000000040CE97
	// succ:  l000000000040CE6D l000000000040CE97
l000000000040CE6D:
	SCZO = cond(r13 - rbx)
	branch Test(UGE,C) l000000000040CE97
	// succ:  l000000000040CE72 l000000000040CE97
l000000000040CE72:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040CE89
	// succ:  l000000000040CE89
l000000000040CE80:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	SCZO = cond(r13 - rbx)
	branch Test(EQ,Z) l000000000040CE97
	// succ:  l000000000040CE89 l000000000040CE97
l000000000040CE89:
	r13 = r13 + 0x0000000000000001
	SCZO = cond(r13)
	SCZO = cond(rdx - rax)
	Mem0[rbp - 0x0000000000000001:byte] = 0x20
	branch Test(NE,Z) l000000000040CE80
	r13 = r13 + 0x0000000000000001
	SCZO = cond(r13)
	SCZO = cond(rdx - rax)
	Mem0[rbp - 0x0000000000000001:byte] = 0x20
	branch Test(NE,Z) l000000000040CE80
	// succ:  l000000000040CE97 l000000000040CE80
l000000000040CE97:
	rdx = rbx
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rbp + 0x0000000000000000:byte] = 0x00
	rdx = rdx - r13
	SCZO = cond(rdx)
	rdi = r13
	Mem0[rsp + 0x0000000000000018:word64] = rcx
	SCZO = cond(rdx - r14)
	branch Test(ULE,CZ) l000000000040CEB6
	rdx = rbx
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rbp + 0x0000000000000000:byte] = 0x00
	rdx = rdx - r13
	SCZO = cond(rdx)
	rdi = r13
	Mem0[rsp + 0x0000000000000018:word64] = rcx
	SCZO = cond(rdx - r14)
	branch Test(ULE,CZ) l000000000040CEB6
	// succ:  l000000000040CEB2_1 l000000000040CEB6 l000000000040CEB2_1
l000000000040CEB2_1:
	rdx = r14
	goto l000000000040CEB6
	// succ:  l000000000040CEB6
l000000000040CEB2_1:
	rdx = r14
	// succ:  l000000000040CEB6
l000000000040CEB6:
	call mempcpy (retsize: 8;)
	SZO = cond(r12 & r12)
	C = false
	rdx = rax
	rsi = r12 - 0x0000000000000001
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	branch Test(EQ,Z) l000000000040CEF6
	call mempcpy (retsize: 8;)
	SZO = cond(r12 & r12)
	C = false
	rdx = rax
	rsi = r12 - 0x0000000000000001
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	branch Test(EQ,Z) l000000000040CEF6
	// succ:  l000000000040CECD l000000000040CEF6
l000000000040CECD:
	SCZO = cond(rbx - rax)
	branch Test(ULE,CZ) l000000000040CEF6
	SCZO = cond(rbx - rax)
	branch Test(ULE,CZ) l000000000040CEF6
	// succ:  l000000000040CED2 l000000000040CEF6
l000000000040CED2:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040CEE9
	// succ:  l000000000040CEE9
l000000000040CEE0:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	SCZO = cond(rdx - rbx)
	branch Test(EQ,Z) l000000000040CEF6
	// succ:  l000000000040CEE9 l000000000040CEF6
l000000000040CEE9:
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	SCZO = cond(rsi - rax)
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	branch Test(NE,Z) l000000000040CEE0
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	SCZO = cond(rsi - rax)
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	branch Test(NE,Z) l000000000040CEE0
	// succ:  l000000000040CEF6 l000000000040CEE0
l000000000040CEF6:
	Mem0[rdx:byte] = 0x00
	Mem0[rdx:byte] = 0x00
	// succ:  l000000000040CEF9
l000000000040CEF9:
	rcx = rcx + r14
	SCZO = cond(rcx)
	r12 = r12 + rcx
	SCZO = cond(r12)
	// succ:  l000000000040CEFF
l000000000040CEFF:
	rdi = Mem0[rsp + 0x0000000000000010:word64]
	free(rdi)
	rdi = rbp
	free(rdi)
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rax = r12
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040CDC0_exit
l000000000040CF28:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	// succ:  l000000000040CF2A
l000000000040CF2A:
	SCZO = cond(r15 - rax)
	branch Test(UGE,C) l000000000040D180
	// succ:  l000000000040CF33 l000000000040D180
l000000000040CF33:
	rax = rax - r15
	SCZO = cond(rax)
	rcx = rax
	rax = r15
	Mem0[r12:word64] = rax
	eax = Mem0[rsp + 0x0000000000000028:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040CE2A
	// succ:  l000000000040CF4C l000000000040CE2A
l000000000040CF4C:
	r12 = rcx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	r12 = rcx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	goto l000000000040CE3E
	// succ:  l000000000040CE3E
l000000000040CF60:
	call __ctype_get_mb_cur_max (retsize: 8;)
	SCZO = cond(rax - 0x0000000000000001)
	branch Test(ULE,CZ) l000000000040CDFA
	// succ:  l000000000040CF6F l000000000040CDFA
l000000000040CF6F:
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	call mbstowcs (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l000000000040CFA8
	// succ:  l000000000040CF83 l000000000040CFA8
l000000000040CF83:
	SZO = cond(bl & 0x01)
	C = false
	branch Test(NE,Z) l000000000040D14D
	// succ:  l000000000040CF8C l000000000040D14D
l000000000040CF8C:
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	r12 = 0xFFFFFFFFFFFFFFFF
	goto l000000000040CEFF
	// succ:  l000000000040CEFF
l000000000040CFA8:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	r15 = 0x00000000 + rax * 0x0000000000000004
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r15
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + 0x0000000000000010:word64] = rax
	branch Test(EQ,Z) l000000000040D160
	// succ:  l000000000040CFCF l000000000040D160
l000000000040CFCF:
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rdi = Mem0[rsp + 0x0000000000000010:word64]
	call mbstowcs (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040CE03
	// succ:  l000000000040CFEC l000000000040CE03
l000000000040CFEC:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[rax - 0x0000000000000004 + r15:word32] = 0x00000000
	edi = Mem0[rax:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040D106
	// succ:  l000000000040D004 l000000000040D106
l000000000040D004:
	r15 = rax
	Mem0[rsp + 0x000000000000002F:byte] = 0x00
	// succ:  l000000000040D010
l000000000040D010:
	call iswprint (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040D025
	// succ:  l000000000040D019 l000000000040D025
l000000000040D019:
	Mem0[rdi:word32] = 0x0000FFFD
	Mem0[rsp + 0x000000000000002F:byte] = 0x01
	// succ:  l000000000040D025
l000000000040D025:
	r15 = r15 + 0x0000000000000004
	SCZO = cond(r15)
	edi = Mem0[rdi:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l000000000040D010
	// succ:  l000000000040D030 l000000000040D010
l000000000040D030:
	rsi = Mem0[rsp + 0x0000000000000020:word64]
	rdi = Mem0[rsp + 0x0000000000000010:word64]
	call wcswidth (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x000000000000002F:byte] - 0x00)
	r15 = (int64) eax
	branch Test(EQ,Z) l000000000040D118
	// succ:  l000000000040D04D l000000000040D118
l000000000040D04D:
	rsi = Mem0[rsp + 0x0000000000000010:word64]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	call wcstombs (retsize: 8;)
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	// succ:  l000000000040D064
l000000000040D064:
	rdi = Mem0[rsp + 0x0000000000000020:word64]
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l000000000040D138
	// succ:  l000000000040D07A l000000000040D138
l000000000040D07A:
	rax = Mem0[r12:word64]
	Mem0[rsp + 0x0000000000000008:word64] = rax
	rax = Mem0[rsp + 0x0000000000000010:word64]
	edi = Mem0[rax:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040D173
	// succ:  l000000000040D092 l000000000040D173
l000000000040D092:
	r14 = rax
	r15d = r15d ^ r15d
	SZO = cond(r15d)
	C = false
	goto l000000000040D0BA
	// succ:  l000000000040D0BA
l000000000040D0A0:
	ax = (int16) al
	rax = rax + r15
	SCZO = cond(rax)
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(ULT,C) l000000000040D0E0
	// succ:  l000000000040D0AC l000000000040D0E0
l000000000040D0AC:
	r14 = r14 + 0x0000000000000004
	SCZO = cond(r14)
	edi = Mem0[rsi:word32]
	r15 = rax
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040D0E0
	r14 = r14 + 0x0000000000000004
	SCZO = cond(r14)
	edi = Mem0[rsi:word32]
	r15 = rax
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040D0E0
	// succ:  l000000000040D0BA l000000000040D0E0
l000000000040D0BA:
	call wcwidth (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l000000000040D0A0
	call wcwidth (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l000000000040D0A0
	call wcwidth (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l000000000040D0A0
	// succ:  l000000000040D0C4 l000000000040D0A0
l000000000040D0C4:
	eax = 0x00000001
	Mem0[rsi:word32] = 0x0000FFFD
	rax = rax + r15
	SCZO = cond(rax)
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(UGE,C) l000000000040D0AC
	eax = 0x00000001
	Mem0[rsi:word32] = 0x0000FFFD
	rax = rax + r15
	SCZO = cond(rax)
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(UGE,C) l000000000040D0AC
	eax = 0x00000001
	Mem0[rsi:word32] = 0x0000FFFD
	rax = rax + r15
	SCZO = cond(rax)
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(UGE,C) l000000000040D0AC
	// succ:  l000000000040D0DA l000000000040D0AC
l000000000040D0DA:
	// succ:  l000000000040D0E0
l000000000040D0E0:
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rsi = Mem0[rsp + 0x0000000000000010:word64]
	rdi = rbp
	Mem0[rsi:word32] = 0x00000000
	call wcstombs (retsize: 8;)
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	r14 = rax
	goto l000000000040CE08
	// succ:  l000000000040CE08
l000000000040D106:
	rsi = Mem0[rsp + 0x0000000000000020:word64]
	rdi = Mem0[rsp + 0x0000000000000010:word64]
	call wcswidth (retsize: 8;)
	r15 = (int64) eax
	// succ:  l000000000040D118
l000000000040D118:
	rax = Mem0[r12:word64]
	SCZO = cond(r15 - rax)
	branch Test(ULE,CZ) l000000000040CF28
	// succ:  l000000000040D125 l000000000040CF28
l000000000040D125:
	rax = rbp + 0x0000000000000001
	Mem0[rsp + 0x0000000000000020:word64] = rax
	goto l000000000040D064
	// succ:  l000000000040D064
l000000000040D138:
	SZO = cond(bl & 0x01)
	C = false
	branch Test(NE,Z) l000000000040CE08
	// succ:  l000000000040D141 l000000000040CE08
l000000000040D141:
	r12 = 0xFFFFFFFFFFFFFFFF
	goto l000000000040CEFF
	// succ:  l000000000040CEFF
l000000000040D14D:
	r15 = r14
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	goto l000000000040CE08
	// succ:  l000000000040CE08
l000000000040D160:
	SZO = cond(bl & 0x01)
	C = false
	branch Test(EQ,Z) l000000000040CF8C
	// succ:  l000000000040D169 l000000000040CF8C
l000000000040D169:
	r15 = r14
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	goto l000000000040CE08
	// succ:  l000000000040CE08
l000000000040D173:
	r14 = Mem0[rsp + 0x0000000000000010:word64]
	r15d = r15d ^ r15d
	SZO = cond(r15d)
	C = false
	goto l000000000040D0E0
	// succ:  l000000000040D0E0
l000000000040D180:
	rax = r15
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	goto l000000000040CE1A
	// succ:  l000000000040CE1A
fn000000000040CDC0_exit:


// fn000000000040D240
// Return size: 0
void fn000000000040D240()
fn000000000040D240_entry:
	// succ:  l000000000040D240
l000000000040D240:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15d = edx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rdi + rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x0000000000000018:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call __ctype_get_mb_cur_max (retsize: 8;)
	SCZO = cond(rax - 0x0000000000000001)
	branch Test(ULE,CZ) l000000000040D370
	// succ:  l000000000040D277 l000000000040D370
l000000000040D277:
	SCZO = cond(rbp - r13)
	branch Test(UGE,C) l000000000040D406
	// succ:  l000000000040D280 l000000000040D406
l000000000040D280:
	r14d = r15d
	r12d = r12d ^ r12d
	SZO = cond(r12d)
	C = false
	r15d = r15d & 0x0000000000000001
	SZO = cond(r15d)
	C = false
	r14d = r14d & 0x0000000000000002
	SZO = cond(r14d)
	C = false
	goto l000000000040D2AC
	// succ:  l000000000040D2AC
l000000000040D290:
	SCZO = cond(al - 0x25)
	branch Test(GE,SO) l000000000040D29B
	// succ:  l000000000040D294 l000000000040D29B
l000000000040D294:
	eax = eax - 0x00000020
	SCZO = cond(eax)
	SCZO = cond(al - 0x03)
	branch Test(UGT,CZ) l000000000040D2C3
	// succ:  l000000000040D29B l000000000040D2C3
l000000000040D29B:
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	r12d = r12d + 0x0000000000000001
	SCZO = cond(r12d)
	// succ:  l000000000040D2A3
l000000000040D2A3:
	SCZO = cond(r13 - rbp)
	branch Test(ULE,CZ) l000000000040D401
	// succ:  l000000000040D2AC l000000000040D401
l000000000040D2AC:
	eax = (word32) Mem0[rbp + 0x0000000000000000:byte]
	SCZO = cond(al - 0x3F)
	branch Test(LE,SZO) l000000000040D290
	eax = (word32) Mem0[rbp + 0x0000000000000000:byte]
	SCZO = cond(al - 0x3F)
	branch Test(LE,SZO) l000000000040D290
	// succ:  l000000000040D2B4 l000000000040D290
l000000000040D2B4:
	SCZO = cond(al - 0x41)
	branch Test(LT,SO) l000000000040D2C3
	SCZO = cond(al - 0x41)
	branch Test(LT,SO) l000000000040D2C3
	// succ:  l000000000040D2B8 l000000000040D2C3
l000000000040D2B8:
	SCZO = cond(al - 0x5F)
	branch Test(LE,SZO) l000000000040D29B
	SCZO = cond(al - 0x5F)
	branch Test(LE,SZO) l000000000040D29B
	// succ:  l000000000040D2BC l000000000040D29B
l000000000040D2BC:
	eax = eax - 0x00000061
	SCZO = cond(eax)
	SCZO = cond(al - 0x1D)
	branch Test(ULE,CZ) l000000000040D29B
	eax = eax - 0x00000061
	SCZO = cond(eax)
	SCZO = cond(al - 0x1D)
	branch Test(ULE,CZ) l000000000040D29B
	// succ:  l000000000040D2C3 l000000000040D29B
l000000000040D2C3:
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	goto l000000000040D2F4
	// succ:  l000000000040D2F4
l000000000040D2D0:
	edx = 0x7FFFFFFF
	edx = edx - r12d
	SCZO = cond(edx)
	SCZO = cond(eax - edx)
	branch Test(GT,SZO) l000000000040D3C0
	// succ:  l000000000040D2E0 l000000000040D3C0
l000000000040D2E0:
	r12d = r12d + eax
	SCZO = cond(r12d)
	// succ:  l000000000040D2E3
l000000000040D2E3:
	rdi = rsp + 0x0000000000000010
	rbp = rbp + rbx
	SCZO = cond(rbp)
	call mbsinit (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040D2A3
	// succ:  l000000000040D2F4 l000000000040D2A3
l000000000040D2F4:
	rdx = r13
	rcx = rsp + 0x0000000000000010
	rdi = rsp + 0x000000000000000C
	rdx = rdx - rbp
	SCZO = cond(rdx)
	rsi = rbp
	call mbrtowc (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF)
	rbx = rax
	branch Test(EQ,Z) l000000000040D360
	rdx = r13
	rcx = rsp + 0x0000000000000010
	rdi = rsp + 0x000000000000000C
	rdx = rdx - rbp
	SCZO = cond(rdx)
	rsi = rbp
	call mbrtowc (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF)
	rbx = rax
	branch Test(EQ,Z) l000000000040D360
	// succ:  l000000000040D315 l000000000040D360
l000000000040D315:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFE)
	branch Test(EQ,Z) l000000000040D3E8
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFE)
	branch Test(EQ,Z) l000000000040D3E8
	// succ:  l000000000040D31F l000000000040D3E8
l000000000040D31F:
	edi = Mem0[rsp + 0x000000000000000C:word32]
	SZO = cond(rax & rax)
	C = false
	eax = 0x00000001
	branch Test(NE,Z) l000000000040D32F
	edi = Mem0[rsp + 0x000000000000000C:word32]
	SZO = cond(rax & rax)
	C = false
	eax = 0x00000001
	branch Test(NE,Z) l000000000040D32F
	// succ:  l000000000040D32B_1 l000000000040D32F l000000000040D32B_1
l000000000040D32B_1:
	rbx = rax
	goto l000000000040D32F
	// succ:  l000000000040D32F
l000000000040D32B_1:
	rbx = rax
	// succ:  l000000000040D32F
l000000000040D32F:
	call wcwidth (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l000000000040D2D0
	call wcwidth (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l000000000040D2D0
	// succ:  l000000000040D338 l000000000040D2D0
l000000000040D338:
	SZO = cond(r14d & r14d)
	C = false
	branch Test(NE,Z) l000000000040D369
	SZO = cond(r14d & r14d)
	C = false
	branch Test(NE,Z) l000000000040D369
	// succ:  l000000000040D33D l000000000040D369
l000000000040D33D:
	edi = Mem0[rsp + 0x000000000000000C:word32]
	call iswcntrl (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040D2E3
	edi = Mem0[rsp + 0x000000000000000C:word32]
	call iswcntrl (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040D2E3
	// succ:  l000000000040D34A l000000000040D2E3
l000000000040D34A:
	SCZO = cond(r12d - 0x000000007FFFFFFF)
	branch Test(EQ,Z) l000000000040D3C0
	SCZO = cond(r12d - 0x000000007FFFFFFF)
	branch Test(EQ,Z) l000000000040D3C0
	// succ:  l000000000040D353 l000000000040D3C0
l000000000040D353:
	r12d = r12d + 0x0000000000000001
	SCZO = cond(r12d)
	r12d = r12d + 0x0000000000000001
	SCZO = cond(r12d)
	goto l000000000040D2E3
	// succ:  l000000000040D2E3
l000000000040D360:
	SZO = cond(r15d & r15d)
	C = false
	branch Test(EQ,Z) l000000000040D29B
	// succ:  l000000000040D369 l000000000040D29B
l000000000040D369:
	eax = 0xFFFFFFFF
	goto l000000000040D3C5
	// succ:  l000000000040D3C5
l000000000040D370:
	SCZO = cond(rbp - r13)
	branch Test(UGE,C) l000000000040D406
	// succ:  l000000000040D379 l000000000040D406
l000000000040D379:
	call __ctype_b_loc (retsize: 8;)
	esi = r15d
	rcx = Mem0[rax:word64]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = esi & 0x00000002
	SZO = cond(esi)
	C = false
	goto l000000000040D398
	// succ:  l000000000040D398
l000000000040D390:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	// succ:  l000000000040D393
l000000000040D393:
	SCZO = cond(rbp - r13)
	branch Test(EQ,Z) l000000000040D3C5
	// succ:  l000000000040D398 l000000000040D3C5
l000000000040D398:
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	edx = (word32) Mem0[rbp - 0x0000000000000001:byte]
	edx = (word32) Mem0[rcx + rdx * 0x0002:word16]
	SZO = cond(dh & 0x40)
	C = false
	branch Test(NE,Z) l000000000040D3B2
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	edx = (word32) Mem0[rbp - 0x0000000000000001:byte]
	edx = (word32) Mem0[rcx + rdx * 0x0002:word16]
	SZO = cond(dh & 0x40)
	C = false
	branch Test(NE,Z) l000000000040D3B2
	// succ:  l000000000040D3A9 l000000000040D3B2
l000000000040D3A9:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040D369
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040D369
	// succ:  l000000000040D3AD l000000000040D369
l000000000040D3AD:
	edx = edx & 0x00000002
	SZO = cond(edx)
	C = false
	branch Test(NE,Z) l000000000040D393
	edx = edx & 0x00000002
	SZO = cond(edx)
	C = false
	branch Test(NE,Z) l000000000040D393
	// succ:  l000000000040D3B2 l000000000040D393
l000000000040D3B2:
	SCZO = cond(eax - 0x7FFFFFFF)
	branch Test(NE,Z) l000000000040D390
	SCZO = cond(eax - 0x7FFFFFFF)
	branch Test(NE,Z) l000000000040D390
	// succ:  l000000000040D3B9 l000000000040D390
l000000000040D3B9:
	// succ:  l000000000040D3C0
l000000000040D3C0:
	eax = 0x7FFFFFFF
	// succ:  l000000000040D3C5
l000000000040D3C5:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	branch Test(NE,Z) l000000000040D40A
	// succ:  l000000000040D3D5 l000000000040D40A
l000000000040D3D5:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040D240_exit
l000000000040D3E8:
	SZO = cond(r15d & r15d)
	C = false
	branch Test(NE,Z) l000000000040D369
	// succ:  l000000000040D3F1 l000000000040D369
l000000000040D3F1:
	rbp = r13
	r12d = r12d + 0x0000000000000001
	SCZO = cond(r12d)
	SCZO = cond(r13 - rbp)
	branch Test(UGT,CZ) l000000000040D2AC
	// succ:  l000000000040D401 l000000000040D2AC
l000000000040D401:
	eax = r12d
	eax = r12d
	goto l000000000040D3C5
	// succ:  l000000000040D3C5
l000000000040D406:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l000000000040D3C5
	// succ:  l000000000040D3C5
l000000000040D40A:
	__stack_chk_fail()
fn000000000040D240_exit:


// fn000000000040D420
// Return size: 8
void fn000000000040D420()
fn000000000040D420_entry:
	// succ:  l000000000040D420
l000000000040D420:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	ebp = esi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rax = strlen(rdi)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	edx = ebp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rax
	// succ:  l000000000040D43B_thunk_fn000000000040D240
l000000000040D43B_thunk_fn000000000040D240:
	call fn000000000040D240 (retsize: 0;)
	return
	// succ:  fn000000000040D420_exit
fn000000000040D420_exit:


// fn000000000040D450
// Return size: 8
void fn000000000040D450()
fn000000000040D450_entry:
	goto l000000000040D450
	// succ:  l000000000040D450
l00000000004025C0_in_fn000000000040D450:
	call Mem0[0x000000000061A228:word32] (retsize: 4;)
	return
	// succ:  fn000000000040D450_exit
l000000000040D450:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rcx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000038
	SCZO = cond(rsp)
	SCZO = cond(rsi - 0x0000000000000002)
	Mem0[rsp:word64] = rsi
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	branch Test(UGT,CZ) l000000000040D490
	// succ:  l000000000040D473 l000000000040D490
l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
	// succ:  l000000000040D479 l000000000040D660
l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040D450_exit
l000000000040D490:
	rsi = Mem0[rsp:word64]
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	rax = rsi
	rax = rax >>u 0x0000000000000001
	SCZO = cond(rax)
	r15 = rax
	Mem0[rsp + 0x0000000000000008:word64] = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	Mem0[rsp + 0x0000000000000028:word64] = rax
	call fn000000000040D450 (retsize: 8;)
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
	// succ:  l000000000040D4C5 l000000000040D570
l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	SCZO = cond(rax)
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	call fn000000000040D450 (retsize: 8;)
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	call fn000000000040D450 (retsize: 8;)
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	goto l000000000040D53B
	// succ:  l000000000040D53B
l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(r14)
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
	// succ:  l000000000040D533 l000000000040D634
l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
	// succ:  l000000000040D537
l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
	// succ:  l000000000040D53B
l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
	// succ:  l000000000040D547 l000000000040D520
l000000000040D547:
	v24 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v24
	SCZO = cond(v24)
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
	// succ:  l000000000040D561 l000000000040D625
l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
	goto l000000000040D537
	// succ:  l000000000040D537
l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
	// succ:  l000000000040D57B
l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	edi = 0x00000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
	goto l000000000040D5B7
	// succ:  l000000000040D5B7
l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(r14)
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
	// succ:  l000000000040D5AF l000000000040D5F0
l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
	// succ:  l000000000040D5B3
l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
	// succ:  l000000000040D5B7
l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
	// succ:  l000000000040D5C3 l000000000040D5A0
l000000000040D5C3:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	SCZO = cond(v25)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
	// succ:  l000000000040D5DE l000000000040D479
l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
	goto l000000000040D5B3
	// succ:  l000000000040D5B3
l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdi = rbx + r15 * 0x0000000000000008
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = rcx + rax * 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l00000000004025C0_in_fn000000000040D450
	// succ:  l00000000004025C0_in_fn000000000040D450
l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
	// succ:  l000000000040D634
l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	SCZO = cond(rdx)
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
	goto l000000000040D57B
	// succ:  l000000000040D57B
l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
	// succ:  l000000000040D677 l000000000040D479
l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040D450_exit
fn000000000040D450_exit:


// fn000000000040D690
// Return size: 8
void fn000000000040D690()
fn000000000040D690_entry:
	// succ:  l000000000040D690
l000000000040D690:
	rsp = fp
	rax = rdi + rsi * 0x0000000000000008
	rcx = rdx
	rdx = rax
	// succ:  l000000000040D69A_thunk_fn000000000040D450
l000000000040D69A_thunk_fn000000000040D450:
	call fn000000000040D450 (retsize: 8;)
	return
	// succ:  fn000000000040D690_exit
fn000000000040D690_exit:


// fn000000000040D6A0
// Return size: 8
void fn000000000040D6A0()
fn000000000040D6A0_entry:
	// succ:  l000000000040D6A0
l000000000040D6A0:
	rsp = fp
	SZO = cond(rdi & rdi)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	branch Test(EQ,Z) l000000000040D713
	// succ:  l000000000040D6A9 l000000000040D713
l000000000040D6A9:
	esi = 0x0000002F
	rax = strrchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040D703
	// succ:  l000000000040D6B8 l000000000040D703
l000000000040D6B8:
	rdx = rax + 0x0000000000000001
	rcx = rdx
	rcx = rcx - rbx
	SCZO = cond(rcx)
	SCZO = cond(rcx - 0x0000000000000006)
	branch Test(LE,SZO) l000000000040D703
	// succ:  l000000000040D6C8 l000000000040D703
l000000000040D6C8:
	rsi = rax - 0x0000000000000006
	edi = 0x00415FD8
	ecx = 0x00000007
	// succ:  l000000000040D6D6
l000000000040D6D6:
	branch rcx == 0x0000000000000000 l000000000040D6D8
	// succ:  l000000000040D6D6_1 l000000000040D6D8
l000000000040D6D6_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l000000000040D6D6
	// succ:  l000000000040D6D8 l000000000040D6D6
l000000000040D6D8:
	branch Test(NE,Z) l000000000040D703
	// succ:  l000000000040D6DA l000000000040D703
l000000000040D6DA:
	ecx = 0x00000003
	rsi = rdx
	edi = 0x00415FE0
	// succ:  l000000000040D6E7
l000000000040D6E7:
	branch rcx == 0x0000000000000000 l000000000040D6E9
	// succ:  l000000000040D6E7_2 l000000000040D6E9
l000000000040D6E7_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l000000000040D6E7
	// succ:  l000000000040D6E9 l000000000040D6E7
l000000000040D6E9:
	rbx = rdx
	sil = Test(UGT,CZ)
	cl = Test(ULT,C)
	SCZO = cond(sil - cl)
	branch Test(NE,Z) l000000000040D703
	// succ:  l000000000040D6F8 l000000000040D703
l000000000040D6F8:
	rbx = rax + 0x0000000000000004
	Mem0[0x000000000061A600:word64] = rbx
	// succ:  l000000000040D703
l000000000040D703:
	Mem0[0x000000000061B200:word64] = rbx
	Mem0[0x000000000061A648:word64] = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040D6A0_exit
l000000000040D713:
	rcx = Mem0[0x000000000061A650:word64]
	edx = 0x00000037
	esi = 0x00000001
	edi = 0x00415FA0
	rax = fwrite(rdi, rsi, rdx, rcx)
	abort()
fn000000000040D6A0_exit:


// fn000000000040D740
// Return size: 8
void fn000000000040D740()
fn000000000040D740_entry:
	// succ:  l000000000040D740
l000000000040D740:
	rsp = fp
	rsp = rsp - 0x0000000000000048
	SCZO = cond(rsp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rdx = rdi
	ecx = 0x00000007
	rdi = rsp
	SCZO = cond(esi - 0x00000008)
	// succ:  l000000000040D754
l000000000040D754:
	branch rcx == 0x0000000000000000 l000000000040D757
	// succ:  l000000000040D754_1 l000000000040D757
l000000000040D754_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
	goto l000000000040D754
	// succ:  l000000000040D754
l000000000040D757:
	branch Test(EQ,Z) l000000000040D7A1
	// succ:  l000000000040D759 l000000000040D7A1
l000000000040D759:
	Mem0[rsp:word32] = esi
	rax = Mem0[rsp:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rdx + 0x0000000000000008:word64] = rax
	rax = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[rdx + 0x0000000000000010:word64] = rax
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[rdx + 0x0000000000000018:word64] = rax
	rax = Mem0[rsp + 0x0000000000000020:word64]
	Mem0[rdx + 0x0000000000000020:word64] = rax
	rax = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rdx + 0x0000000000000028:word64] = rax
	rax = Mem0[rsp + 0x0000000000000030:word64]
	Mem0[rdx + 0x0000000000000030:word64] = rax
	rax = rdx
	rsp = rsp + 0x0000000000000048
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040D740_exit
l000000000040D7A1:
	abort()
fn000000000040D740_exit:


// fn000000000040D7B0
// Return size: 8
void fn000000000040D7B0()
fn000000000040D7B0_entry:
	// succ:  l000000000040D7B0
l000000000040D7B0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	edx = 0x00000005
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12d = esi
	rsi = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rax = dcgettext(rdi, rsi, rdx)
	SCZO = cond(rax - rbp)
	rbx = rax
	branch Test(EQ,Z) l000000000040D7E8
	// succ:  l000000000040D7D7 l000000000040D7E8
l000000000040D7D7:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rax = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040D7B0_exit
l000000000040D7E8:
	call fn0000000000411900 (retsize: 8;)
	edx = (word32) Mem0[rax:byte]
	edx = edx & 0xFFFFFFDF
	SZO = cond(edx)
	C = false
	SCZO = cond(dl - 0x55)
	branch Test(NE,Z) l000000000040D850
	// succ:  l000000000040D7F8 l000000000040D850
l000000000040D7F8:
	edx = (word32) Mem0[rax + 0x0000000000000001:byte]
	edx = edx & 0xFFFFFFDF
	SZO = cond(edx)
	C = false
	SCZO = cond(dl - 0x54)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D804 l000000000040D838
l000000000040D804:
	edx = (word32) Mem0[rax + 0x0000000000000002:byte]
	edx = edx & 0xFFFFFFDF
	SZO = cond(edx)
	C = false
	SCZO = cond(dl - 0x46)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D810 l000000000040D838
l000000000040D810:
	SCZO = cond(Mem0[rax + 0x0000000000000003:byte] - 0x2D)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D816 l000000000040D838
l000000000040D816:
	SCZO = cond(Mem0[rax + 0x0000000000000004:byte] - 0x38)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D81C l000000000040D838
l000000000040D81C:
	SCZO = cond(Mem0[rax + 0x0000000000000005:byte] - 0x00)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D822 l000000000040D838
l000000000040D822:
	SCZO = cond(Mem0[rbx:byte] - 0x60)
	eax = 0x00415FF1
	ebx = 0x00415FE4
	branch Test(NE,Z) l000000000040D833
	// succ:  l000000000040D82F_1 l000000000040D833
l000000000040D82F_1:
	rbx = rax
	// succ:  l000000000040D833
l000000000040D833:
	goto l000000000040D7D7
	// succ:  l000000000040D7D7
l000000000040D838:
	ebx = 0x00415FEB
	SCZO = cond(r12d - 0x0000000000000007)
	eax = 0x00416DEA
	branch Test(EQ,Z) l000000000040D84A
	// succ:  l000000000040D846_1 l000000000040D84A
l000000000040D846_1:
	rbx = rax
	// succ:  l000000000040D84A
l000000000040D84A:
	goto l000000000040D7D7
	// succ:  l000000000040D7D7
l000000000040D850:
	SCZO = cond(dl - 0x47)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D855 l000000000040D838
l000000000040D855:
	edx = (word32) Mem0[rax + 0x0000000000000001:byte]
	edx = edx & 0xFFFFFFDF
	SZO = cond(edx)
	C = false
	SCZO = cond(dl - 0x42)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D861 l000000000040D838
l000000000040D861:
	SCZO = cond(Mem0[rax + 0x0000000000000002:byte] - 0x31)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D867 l000000000040D838
l000000000040D867:
	SCZO = cond(Mem0[rax + 0x0000000000000003:byte] - 0x38)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D86D l000000000040D838
l000000000040D86D:
	SCZO = cond(Mem0[rax + 0x0000000000000004:byte] - 0x30)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D873 l000000000040D838
l000000000040D873:
	SCZO = cond(Mem0[rax + 0x0000000000000005:byte] - 0x33)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D879 l000000000040D838
l000000000040D879:
	SCZO = cond(Mem0[rax + 0x0000000000000006:byte] - 0x30)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D87F l000000000040D838
l000000000040D87F:
	SCZO = cond(Mem0[rax + 0x0000000000000007:byte] - 0x00)
	branch Test(NE,Z) l000000000040D838
	// succ:  l000000000040D885 l000000000040D838
l000000000040D885:
	r13 = rbx
	eax = 0x00415FE8
	ebx = 0x00415FED
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x60)
	branch Test(EQ,Z) l000000000040D89B
	// succ:  l000000000040D897_1 l000000000040D89B
l000000000040D897_1:
	rbx = rax
	// succ:  l000000000040D89B
l000000000040D89B:
	goto l000000000040D7D7
	// succ:  l000000000040D7D7
fn000000000040D7B0_exit:


// fn000000000040D8A0
// Return size: 8
void fn000000000040D8A0()
fn000000000040D8A0_entry:
	// succ:  l000000000040D8A0
l000000000040D8A0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15 = rcx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14d = r8d
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = r9d
	rsp = rsp - 200
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x0000000000000100:word64]
	Mem0[rsp + 0x0000000000000028:word64] = rdi
	Mem0[rsp + 0x0000000000000020:word64] = rsi
	Mem0[rsp + 0x0000000000000034:word32] = r8d
	Mem0[rsp + 0x0000000000000090:word32] = r9d
	Mem0[rsp + 0x0000000000000058:word64] = rax
	rax = Mem0[rsp + 0x0000000000000108:word64]
	Mem0[rsp + 0x0000000000000070:word64] = rax
	rax = Mem0[rsp + 0x0000000000000110:word64]
	Mem0[rsp + 0x0000000000000068:word64] = rax
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x00000000000000B8:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call __ctype_get_mb_cur_max (retsize: 8;)
	Mem0[rsp + 0x0000000000000078:word64] = rax
	eax = ebx
	eax = eax >>u 0x00000001
	SCZO = cond(eax)
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	SCZO = cond(r14d - 0x0000000000000008)
	Mem0[rsp + 0x0000000000000033:byte] = al
	branch Test(UGT,CZ) l000000000040E280
	// succ:  l000000000040D92D l000000000040E280
l000000000040D92D:
	eax = r14d
	r11 = Mem0[rsp + 0x0000000000000020:word64]
	switch (Mem0[fs:0x00000028:word64]) { l000000000040D940 }
	// succ:  l000000000040D940
l000000000040D940:
	Mem0[rsp + 0x0000000000000033:byte] = 0x00
	Mem0[rsp + 0x0000000000000020:byte] = 0x00
	r14d = r14d ^ r14d
	SZO = cond(r14d)
	C = false
	Mem0[rsp + 0x0000000000000060:word64] = 0x0000000000000000
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	// succ:  l000000000040D960
l000000000040D960:
	eax = (word32) Mem0[rsp + 0x0000000000000033:byte]
	r9 = r14
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	r14 = r11
	r8 = r13
	eax = eax ^ 0x00000001
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x0000000000000038:byte] = al
	eax = (word32) Mem0[rsp + 0x0000000000000020:byte]
	eax = eax ^ 0x00000001
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x0000000000000095:byte] = al
	// succ:  l000000000040D986
l000000000040D986:
	SCZO = cond(rbp - r15)
	al = Test(NE,Z)
	SCZO = cond(r15 - 0xFFFFFFFFFFFFFFFF)
	branch Test(EQ,Z) l000000000040DB76
	// succ:  l000000000040D996 l000000000040DB76
l000000000040D996:
	// succ:  l000000000040D9A0
l000000000040D9A0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040DB86
	// succ:  l000000000040D9A8 l000000000040DB86
l000000000040D9A8:
	SZO = cond(r9 & r9)
	C = false
	cl = Test(NE,Z)
	branch Test(EQ,Z) l000000000040E0A0
	// succ:  l000000000040D9B4 l000000000040E0A0
l000000000040D9B4:
	SCZO = cond(Mem0[rsp + 0x0000000000000020:byte] - 0x00)
	branch Test(EQ,Z) l000000000040E0A0
	// succ:  l000000000040D9BF l000000000040E0A0
l000000000040D9BF:
	rax = rbp + 0x0000000000000000 + r9
	SCZO = cond(r15 - rax)
	branch Test(ULT,C) l000000000040E0A0
	// succ:  l000000000040D9CD l000000000040E0A0
l000000000040D9CD:
	r13 = r8 + rbp
	rsi = Mem0[rsp + 0x0000000000000060:word64]
	rdx = r9
	Mem0[rsp + 0x0000000000000050:word32] = ecx
	Mem0[rsp + 0x0000000000000048:word64] = r8
	rdi = r13
	Mem0[rsp + 0x0000000000000040:word64] = r9
	rax = DPB(rax, memcmp(rdi, rsi, rdx), 0, 32)
	SZO = cond(eax & eax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000040:word64]
	r8 = Mem0[rsp + 0x0000000000000048:word64]
	ecx = Mem0[rsp + 0x0000000000000050:word32]
	branch Test(NE,Z) l000000000040E0B0
	// succ:  l000000000040DA05 l000000000040E0B0
l000000000040DA05:
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(NE,Z) l000000000040DC40
	// succ:  l000000000040DA10 l000000000040DC40
l000000000040DA10:
	ebx = 0x00000001
	// succ:  l000000000040DA20
l000000000040DA20:
	r12d = (word64) Mem0[r13 + 0x0000000000000000:byte]
	SCZO = cond(r12b - 0x7E)
	branch Test(UGT,CZ) l000000000040DE18
	// succ:  l000000000040DA2F l000000000040DE18
l000000000040DA2F:
	eax = (word32) r12b
	switch (rax) { l000000000040DD20 }
	goto l000000000040DD20
	// succ:  l000000000040DD20
l000000000040DAF8:
	SCZO = cond(Mem0[rsp + 0x0000000000000038:byte] - 0x00)
	branch Test(EQ,Z) l000000000040DB09
	// succ:  l000000000040DAFF l000000000040DB09
l000000000040DAFF:
	SCZO = cond(Mem0[rsp + 0x0000000000000095:byte] - 0x00)
	branch Test(NE,Z) l000000000040DB2E
	// succ:  l000000000040DB09 l000000000040DB2E
l000000000040DB09:
	rdi = Mem0[rsp + 0x0000000000000058:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040DB2E
	rdi = Mem0[rsp + 0x0000000000000058:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040DB2E
	// succ:  l000000000040DB13 l000000000040DB2E
l000000000040DB13:
	edx = r12d
	ecx = r12d
	eax = 0x00000001
	dl = dl >>u 0x05
	SCZO = cond(dl)
	ecx = ecx & 0x0000001F
	SZO = cond(ecx)
	C = false
	edx = (word32) dl
	eax = eax << cl
	SCZO = cond(eax)
	SZO = cond(Mem0[rdi + rdx * 0x00000004:word32] & eax)
	C = false
	branch Test(NE,Z) l000000000040DB33
	edx = r12d
	ecx = r12d
	eax = 0x00000001
	dl = dl >>u 0x05
	SCZO = cond(dl)
	ecx = ecx & 0x0000001F
	SZO = cond(ecx)
	C = false
	edx = (word32) dl
	eax = eax << cl
	SCZO = cond(eax)
	SZO = cond(Mem0[rdi + rdx * 0x00000004:word32] & eax)
	C = false
	branch Test(NE,Z) l000000000040DB33
	// succ:  l000000000040DB2E l000000000040DB33
l000000000040DB2E:
	SZO = cond(r11b & r11b)
	C = false
	branch Test(EQ,Z) l000000000040DB50
	SZO = cond(r11b & r11b)
	C = false
	branch Test(EQ,Z) l000000000040DB50
	// succ:  l000000000040DB33 l000000000040DB50
l000000000040DB33:
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(NE,Z) l000000000040DC40
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(NE,Z) l000000000040DC40
	// succ:  l000000000040DB3E l000000000040DC40
l000000000040DB3E:
	SCZO = cond(rbx - r14)
	branch Test(UGE,C) l000000000040DB4C
	SCZO = cond(rbx - r14)
	branch Test(UGE,C) l000000000040DB4C
	// succ:  l000000000040DB43 l000000000040DB4C
l000000000040DB43:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rax + rbx:byte] = 0x5C
	rax = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rax + rbx:byte] = 0x5C
	// succ:  l000000000040DB4C
l000000000040DB4C:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	// succ:  l000000000040DB50
l000000000040DB50:
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	// succ:  l000000000040DB54
l000000000040DB54:
	SCZO = cond(rbx - r14)
	branch Test(UGE,C) l000000000040DB62
	// succ:  l000000000040DB59 l000000000040DB62
l000000000040DB59:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rax + rbx:byte] = r12b
	// succ:  l000000000040DB62
l000000000040DB62:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(rbp - r15)
	al = Test(NE,Z)
	SCZO = cond(r15 - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l000000000040D9A0
	// succ:  l000000000040DB76 l000000000040D9A0
l000000000040DB76:
	SCZO = cond(Mem0[r8 + rbp:byte] - 0x00)
	al = Test(NE,Z)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040D9A8
	SCZO = cond(Mem0[r8 + rbp:byte] - 0x00)
	al = Test(NE,Z)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040D9A8
	// succ:  l000000000040DB86 l000000000040D9A8
l000000000040DB86:
	SZO = cond(rbx & rbx)
	C = false
	r11 = r14
	r13 = r8
	branch Test(NE,Z) l000000000040DBA3
	SZO = cond(rbx & rbx)
	C = false
	r11 = r14
	r13 = r8
	branch Test(NE,Z) l000000000040DBA3
	// succ:  l000000000040DB91 l000000000040DBA3
l000000000040DB91:
	SCZO = cond(Mem0[rsp + 0x0000000000000034:word32] - 0x00000002)
	branch Test(NE,Z) l000000000040DBA3
	SCZO = cond(Mem0[rsp + 0x0000000000000034:word32] - 0x00000002)
	branch Test(NE,Z) l000000000040DBA3
	// succ:  l000000000040DB98 l000000000040DBA3
l000000000040DB98:
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(NE,Z) l000000000040DC46
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(NE,Z) l000000000040DC46
	// succ:  l000000000040DBA3 l000000000040DC46
l000000000040DBA3:
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(NE,Z) l000000000040DBE4
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(NE,Z) l000000000040DBE4
	// succ:  l000000000040DBAA l000000000040DBE4
l000000000040DBAA:
	SCZO = cond(Mem0[rsp + 0x0000000000000060:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l000000000040DBE4
	SCZO = cond(Mem0[rsp + 0x0000000000000060:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l000000000040DBE4
	// succ:  l000000000040DBB2 l000000000040DBE4
l000000000040DBB2:
	rdx = Mem0[rsp + 0x0000000000000060:word64]
	eax = (word32) Mem0[rdx:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040DBE4
	rdx = Mem0[rsp + 0x0000000000000060:word64]
	eax = (word32) Mem0[rdx:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040DBE4
	// succ:  l000000000040DBBE l000000000040DBE4
l000000000040DBBE:
	rcx = Mem0[rsp + 0x0000000000000028:word64]
	rdx = rdx - rbx
	SCZO = cond(rdx)
	rcx = Mem0[rsp + 0x0000000000000028:word64]
	rdx = rdx - rbx
	SCZO = cond(rdx)
	// succ:  l000000000040DBD0
l000000000040DBD0:
	SCZO = cond(r11 - rbx)
	branch Test(ULE,CZ) l000000000040DBD8
	// succ:  l000000000040DBD5 l000000000040DBD8
l000000000040DBD5:
	Mem0[rcx + rbx:byte] = al
	// succ:  l000000000040DBD8
l000000000040DBD8:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	eax = (word32) Mem0[rdx + rbx:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040DBD0
	// succ:  l000000000040DBE4 l000000000040DBD0
l000000000040DBE4:
	SCZO = cond(rbx - r11)
	rax = rbx
	branch Test(UGE,C) l000000000040DC86
	// succ:  l000000000040DBF0 l000000000040DC86
l000000000040DBF0:
	rsi = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rsi + rbx:byte] = 0x00
	goto l000000000040DC86
	// succ:  l000000000040DC86
l000000000040DC40:
	r11 = r14
	r13 = r8
	// succ:  l000000000040DC46
l000000000040DC46:
	rax = Mem0[rsp + 0x0000000000000068:word64]
	r9d = Mem0[rsp + 0x0000000000000090:word64]
	rcx = r15
	r8d = Mem0[rsp + 0x0000000000000034:word64]
	rdi = Mem0[rsp + 0x0000000000000028:word64]
	rdx = r13
	Mem0[rsp:word64] = 0x0000000000000000
	rsi = r11
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rax = Mem0[rsp + 0x0000000000000070:word64]
	r9d = r9d & 0xFFFFFFFFFFFFFFFD
	SZO = cond(r9d)
	C = false
	Mem0[rsp + 0x0000000000000008:word64] = rax
	call fn000000000040D8A0 (retsize: 8;)
	// succ:  l000000000040DC86
l000000000040DC86:
	rsi = Mem0[rsp + 0x00000000000000B8:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	branch Test(NE,Z) l000000000040E423
	// succ:  l000000000040DC9D l000000000040E423
l000000000040DC9D:
	rsp = rsp + 200
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040D8A0_exit
l000000000040DD20:
	SCZO = cond(Mem0[rsp + 0x0000000000000020:byte] - 0x00)
	branch Test(EQ,Z) l000000000040E240
	// succ:  l000000000040DD2B l000000000040E240
l000000000040DD2B:
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(NE,Z) l000000000040DC40
	// succ:  l000000000040DD36 l000000000040DC40
l000000000040DD36:
	SCZO = cond(rbx - r14)
	branch Test(UGE,C) l000000000040DD44
	// succ:  l000000000040DD3B l000000000040DD44
l000000000040DD3B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rax + rbx:byte] = 0x5C
	// succ:  l000000000040DD44
l000000000040DD44:
	rdx = rbp + 0x0000000000000001
	rax = rbx + 0x0000000000000001
	SCZO = cond(r15 - rdx)
	branch Test(ULE,CZ) l000000000040DD80
	// succ:  l000000000040DD51 l000000000040DD80
l000000000040DD51:
	esi = (word32) Mem0[r8 + 0x0000000000000001 + rbp:byte]
	edx = rsi - 0x0000000000000030
	SCZO = cond(dl - 0x09)
	branch Test(UGT,CZ) l000000000040DD80
	// succ:  l000000000040DD5F l000000000040DD80
l000000000040DD5F:
	SCZO = cond(r14 - rax)
	branch Test(UGT,CZ) l000000000040E300
	// succ:  l000000000040DD68 l000000000040E300
l000000000040DD68:
	rax = rbx + 0x0000000000000002
	SCZO = cond(r14 - rax)
	branch Test(ULE,CZ) l000000000040DD7B
	// succ:  l000000000040DD71 l000000000040DD7B
l000000000040DD71:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rax + 0x0000000000000002 + rbx:byte] = 0x30
	// succ:  l000000000040DD7B
l000000000040DD7B:
	rax = rbx + 0x0000000000000003
l000000000040DD80:
	rbx = rax
	esp = 0x00000030
	goto l000000000040DB09
	// succ:  l000000000040DB09
l000000000040DE18:
	SCZO = cond(Mem0[rsp + 0x0000000000000078:word64] - 0x0000000000000001)
	branch Test(NE,Z) l000000000040E0C0
	// succ:  l000000000040DE24 l000000000040E0C0
l000000000040DE24:
	Mem0[rsp + 0x0000000000000050:word64] = r8
	Mem0[rsp + 0x0000000000000048:word64] = r9
	Mem0[rsp + 0x0000000000000040:word32] = r11d
	call __ctype_b_loc (retsize: 8;)
	rax = Mem0[rax:word64]
	edx = (word32) r12b
	r11d = Mem0[rsp + 0x0000000000000040:word64]
	r9 = Mem0[rsp + 0x0000000000000048:word64]
	r8 = Mem0[rsp + 0x0000000000000050:word64]
	edx = (word32) Mem0[rax + rdx * 0x0002:word16]
	eax = 0x00000001
	dx = dx >>u 0x000E
	SCZO = cond(dx)
	edx = edx ^ 0x00000001
	SZO = cond(edx)
	C = false
	edx = edx & 0x00000001
	SZO = cond(edx)
	C = false
	// succ:  l000000000040DE61
l000000000040DE61:
	dl = dl & Mem0[rsp + 0x0000000000000020:byte]
	SZO = cond(dl)
	C = false
	branch Test(EQ,Z) l000000000040DAF8
	// succ:  l000000000040DE6B l000000000040DAF8
l000000000040DE6B:
	rax = rax + rbp
	SCZO = cond(rax)
	edi = (word32) Mem0[rsp + 0x0000000000000033:byte]
	rcx = Mem0[rsp + 0x0000000000000028:word64]
	goto l000000000040DEF0
	// succ:  l000000000040DEF0
l000000000040DE80:
	SZO = cond(dil & dil)
	C = false
	branch Test(NE,Z) l000000000040DC40
	// succ:  l000000000040DE89 l000000000040DC40
l000000000040DE89:
	SCZO = cond(rbx - r14)
	branch Test(UGE,C) l000000000040DE92
	// succ:  l000000000040DE8E l000000000040DE92
l000000000040DE8E:
	Mem0[rcx + rbx:byte] = 0x5C
	// succ:  l000000000040DE92
l000000000040DE92:
	rsi = rbx + 0x0000000000000001
	SCZO = cond(r14 - rsi)
	branch Test(ULE,CZ) l000000000040DEAA
	// succ:  l000000000040DE9B l000000000040DEAA
l000000000040DE9B:
	esi = r12d
	sil = sil >>u 0x06
	SCZO = cond(sil)
	esi = esi + 0x00000030
	SCZO = cond(esi)
	Mem0[rcx + 0x0000000000000001 + rbx:byte] = sil
	// succ:  l000000000040DEAA
l000000000040DEAA:
	rsi = rbx + 0x0000000000000002
	SCZO = cond(r14 - rsi)
	branch Test(ULE,CZ) l000000000040DEC5
	// succ:  l000000000040DEB3 l000000000040DEC5
l000000000040DEB3:
	esi = r12d
	sil = sil >>u 0x03
	SCZO = cond(sil)
	esi = esi & 0x00000007
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000030
	SCZO = cond(esi)
	Mem0[rcx + 0x0000000000000002 + rbx:byte] = sil
	// succ:  l000000000040DEC5
l000000000040DEC5:
	r12d = r12d & 0x0000000000000007
	SZO = cond(r12d)
	C = false
	rbx = rbx + 0x0000000000000003
	SCZO = cond(rbx)
	r12d = r12d + 0x0000000000000030
	SCZO = cond(r12d)
	// succ:  l000000000040DED1
l000000000040DED1:
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	SCZO = cond(rax - rbp)
	branch Test(ULE,CZ) l000000000040DB54
	// succ:  l000000000040DEDE l000000000040DB54
l000000000040DEDE:
	SCZO = cond(rbx - r14)
	branch Test(UGE,C) l000000000040DEE7
	// succ:  l000000000040DEE3 l000000000040DEE7
l000000000040DEE3:
	Mem0[rcx + rbx:byte] = r12b
	// succ:  l000000000040DEE7
l000000000040DEE7:
	r12d = (word64) Mem0[r8 + rbp:byte]
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	// succ:  l000000000040DEF0
l000000000040DEF0:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000040DE80
	// succ:  l000000000040DEF4 l000000000040DE80
l000000000040DEF4:
	SZO = cond(r11b & r11b)
	C = false
	branch Test(EQ,Z) l000000000040DED1
	// succ:  l000000000040DEF9 l000000000040DED1
l000000000040DEF9:
	SCZO = cond(rbx - r14)
	branch Test(UGE,C) l000000000040DF02
	// succ:  l000000000040DEFE l000000000040DF02
l000000000040DEFE:
	Mem0[rcx + rbx:byte] = 0x5C
	// succ:  l000000000040DF02
l000000000040DF02:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	r11d = r11d ^ r11d
	SZO = cond(r11d)
	C = false
	goto l000000000040DED1
	// succ:  l000000000040DED1
l000000000040E0A0:
	r13 = r8 + rbp
	r11d = r11d ^ r11d
	SZO = cond(r11d)
	C = false
	goto l000000000040DA20
	// succ:  l000000000040DA20
l000000000040E0B0:
	r11d = r11d ^ r11d
	SZO = cond(r11d)
	C = false
	goto l000000000040DA20
	// succ:  l000000000040DA20
l000000000040E0C0:
	SCZO = cond(r15 - 0xFFFFFFFFFFFFFFFF)
	Mem0[rsp + 0x00000000000000B0:word64] = 0x0000000000000000
	branch Test(EQ,Z) l000000000040E285
	// succ:  l000000000040E0D6 l000000000040E285
l000000000040E0D6:
	esi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x0000000000000080:word64] = rbx
	Mem0[rsp + 0x0000000000000096:byte] = r12b
	Mem0[rsp + 0x0000000000000098:word64] = r13
	rbx = rax
	Mem0[rsp + 0x0000000000000048:word64] = rbp
	Mem0[rsp + 0x0000000000000088:word64] = r9
	r12d = esi
	Mem0[rsp + 0x0000000000000097:byte] = r11b
	Mem0[rsp + 0x0000000000000050:word64] = r14
	r13 = r8
	Mem0[rsp + 0x0000000000000040:word64] = r15
	// succ:  l000000000040E11D
l000000000040E11D:
	rax = Mem0[rsp + 0x0000000000000048:word64]
	rdx = Mem0[rsp + 0x0000000000000040:word64]
	rcx = rsp + 0x00000000000000B0
	rdi = rsp + 0x00000000000000AC
	r14 = rbx + rax
	r15 = r13 + 0x0000000000000000 + r14
	rdx = rdx - r14
	SCZO = cond(rdx)
	rsi = r15
	call mbrtowc (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l000000000040E30E
	// succ:  l000000000040E157 l000000000040E30E
l000000000040E157:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF)
	branch Test(EQ,Z) l000000000040E350
	// succ:  l000000000040E161 l000000000040E350
l000000000040E161:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFE)
	branch Test(EQ,Z) l000000000040E391
	// succ:  l000000000040E16B l000000000040E391
l000000000040E16B:
	SCZO = cond(Mem0[rsp + 0x0000000000000033:byte] - 0x00)
	branch Test(EQ,Z) l000000000040E1BF
	// succ:  l000000000040E172 l000000000040E1BF
l000000000040E172:
	SCZO = cond(Mem0[rsp + 0x0000000000000034:word32] - 0x00000002)
	branch Test(NE,Z) l000000000040E1BF
	// succ:  l000000000040E179 l000000000040E1BF
l000000000040E179:
	SCZO = cond(rax - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040E1BF
	// succ:  l000000000040E17F l000000000040E1BF
l000000000040E17F:
	edx = 0x00000001
	eax = 0x00000001
	// succ:  l000000000040E190
l000000000040E190:
	edi = (word32) Mem0[r15 + rdx:byte]
	ecx = rdi - 0x000000000000005B
	SCZO = cond(cl - 0x21)
	branch Test(UGT,CZ) l000000000040E1B6
	// succ:  l000000000040E19D l000000000040E1B6
l000000000040E19D:
	rsi = rax
	r15 = 0x000000000000002B
	rsi = rsi << cl
	SCZO = cond(rsi)
	SZO = cond(rsi & rdi)
	C = false
	branch Test(NE,Z) l000000000040E260
	// succ:  l000000000040E1B6 l000000000040E260
l000000000040E1B6:
	rdx = rdx + 0x0000000000000001
	SCZO = cond(rdx)
	SCZO = cond(rdx - rbp)
	branch Test(NE,Z) l000000000040E190
	// succ:  l000000000040E1BF l000000000040E190
l000000000040E1BF:
	edi = Mem0[rsp + 0x00000000000000AC:word32]
	call iswprint (retsize: 8;)
	rdi = rsp + 0x00000000000000B0
	SZO = cond(eax & eax)
	C = false
	eax = 0x00000000
	branch Test(NE,Z) l000000000040E1DE
	// succ:  l000000000040E1DA_1 l000000000040E1DE
l000000000040E1DA_1:
	r12d = eax
	// succ:  l000000000040E1DE
l000000000040E1DE:
	rbx = rbx + rbp
	SCZO = cond(rbx)
	call mbsinit (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040E11D
	// succ:  l000000000040E1EE l000000000040E11D
l000000000040E1EE:
	esi = r12d
	r11d = (word64) Mem0[rsp + 0x0000000000000097:byte]
	r12d = (word64) Mem0[rsp + 0x0000000000000096:byte]
	rax = rbx
	rbp = Mem0[rsp + 0x0000000000000048:word64]
	r9 = Mem0[rsp + 0x0000000000000088:word64]
	rbx = Mem0[rsp + 0x0000000000000080:word64]
	r14 = Mem0[rsp + 0x0000000000000050:word64]
	edx = esi
	r15 = Mem0[rsp + 0x0000000000000040:word64]
	r8 = r13
	edx = edx ^ 0x00000001
	SZO = cond(edx)
	C = false
	// succ:  l000000000040E22D
l000000000040E22D:
	SCZO = cond(rax - 0x0000000000000001)
	branch Test(ULE,CZ) l000000000040DE61
	// succ:  l000000000040E237 l000000000040DE61
l000000000040E237:
	dl = dl & Mem0[rsp + 0x0000000000000020:byte]
	SZO = cond(dl)
	C = false
	goto l000000000040DE6B
	// succ:  l000000000040DE6B
l000000000040E240:
	SZO = cond(Mem0[rsp + 0x0000000000000090:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l000000000040DAF8
	// succ:  l000000000040E24E l000000000040DAF8
l000000000040E24E:
	rbp = rbp + 0x0000000000000001
	SCZO = cond(rbp)
	goto l000000000040D986
	// succ:  l000000000040D986
l000000000040E260:
	r11 = Mem0[rsp + 0x0000000000000050:word64]
	r15 = Mem0[rsp + 0x0000000000000040:word64]
	goto l000000000040DC46
	// succ:  l000000000040DC46
l000000000040E280:
	abort()
l000000000040E285:
	rdi = r8
	Mem0[rsp + 0x0000000000000050:word64] = r9
	Mem0[rsp + 0x0000000000000048:word32] = r11d
	Mem0[rsp + 0x0000000000000040:word64] = r8
	rax = strlen(rdi)
	r9 = Mem0[rsp + 0x0000000000000050:word64]
	r15 = rax
	r11d = Mem0[rsp + 0x0000000000000048:word64]
	r8 = Mem0[rsp + 0x0000000000000040:word64]
	goto l000000000040E0D6
	// succ:  l000000000040E0D6
l000000000040E300:
	rsi = Mem0[rsp + 0x0000000000000028:word64]
	Mem0[rsi + rax:byte] = 0x30
	goto l000000000040DD68
	// succ:  l000000000040DD68
l000000000040E30E:
	edx = r12d
	rax = rbx
	rbp = Mem0[rsp + 0x0000000000000048:word64]
	r9 = Mem0[rsp + 0x0000000000000088:word64]
	r11d = (word64) Mem0[rsp + 0x0000000000000097:byte]
	r8 = r13
	rbx = Mem0[rsp + 0x0000000000000080:word64]
	r12d = (word64) Mem0[rsp + 0x0000000000000096:byte]
	edx = edx ^ 0x00000001
	SZO = cond(edx)
	C = false
	r14 = Mem0[rsp + 0x0000000000000050:word64]
	r15 = Mem0[rsp + 0x0000000000000040:word64]
	goto l000000000040E22D
	// succ:  l000000000040E22D
l000000000040E350:
	rax = rbx
	rbp = Mem0[rsp + 0x0000000000000048:word64]
	r9 = Mem0[rsp + 0x0000000000000088:word64]
	r12d = (word64) Mem0[rsp + 0x0000000000000096:byte]
	r11d = (word64) Mem0[rsp + 0x0000000000000097:byte]
	r8 = r13
	rbx = Mem0[rsp + 0x0000000000000080:word64]
	r14 = Mem0[rsp + 0x0000000000000050:word64]
	edx = 0x00000001
	r15 = Mem0[rsp + 0x0000000000000040:word64]
	goto l000000000040E22D
	// succ:  l000000000040E22D
l000000000040E391:
	r10 = r15
	r15 = Mem0[rsp + 0x0000000000000040:word64]
	rsi = r14
	rax = rbx
	r8 = r13
	rbp = Mem0[rsp + 0x0000000000000048:word64]
	r9 = Mem0[rsp + 0x0000000000000088:word64]
	r12d = (word64) Mem0[rsp + 0x0000000000000096:byte]
	SCZO = cond(r15 - rsi)
	r11d = (word64) Mem0[rsp + 0x0000000000000097:byte]
	rbx = Mem0[rsp + 0x0000000000000080:word64]
	r14 = Mem0[rsp + 0x0000000000000050:word64]
	r13 = Mem0[rsp + 0x0000000000000098:word64]
	branch Test(ULE,CZ) l000000000040E3FE
	// succ:  l000000000040E3DB l000000000040E3FE
l000000000040E3DB:
	SCZO = cond(Mem0[rdx:byte] - 0x00)
	branch Test(NE,Z) l000000000040E3F0
	// succ:  l000000000040E3E1 l000000000040E3F0
l000000000040E3E1:
	goto l000000000040E3FE
	// succ:  l000000000040E3FE
l000000000040E3E8:
	SCZO = cond(Mem0[r13 + 0x0000000000000000 + rax:byte] - 0x00)
	branch Test(EQ,Z) l000000000040E3FE
	// succ:  l000000000040E3F0 l000000000040E3FE
l000000000040E3F0:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	rdx = rbp + 0x0000000000000000 + rax
	SCZO = cond(r15 - rdx)
	branch Test(UGT,CZ) l000000000040E3E8
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	rdx = rbp + 0x0000000000000000 + rax
	SCZO = cond(r15 - rdx)
	branch Test(UGT,CZ) l000000000040E3E8
	// succ:  l000000000040E3FE l000000000040E3E8
l000000000040E3FE:
	edx = 0x00000001
	edx = 0x00000001
	goto l000000000040E22D
	// succ:  l000000000040E22D
l000000000040E423:
	__stack_chk_fail()
	Mem0[rsp + 0x0000000000000020:byte] = 0x01
	esi = 0x00000001
	Mem0[rsp + 0x0000000000000060:word64] = 0x0000000000415FEB
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	goto l000000000040D960
	// succ:  l000000000040D960
fn000000000040D8A0_exit:


// fn000000000040E450
// Return size: 0
void fn000000000040E450()
fn000000000040E450_entry:
	// succ:  l000000000040E450 l000000000040E450
l000000000040E450:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r15 = (int64) edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rcx
	rsp = rsp - 0x0000000000000048
	SCZO = cond(rsp)
	Mem0[rsp + 0x0000000000000020:word64] = rsi
	Mem0[rsp + 0x0000000000000028:word64] = rdx
	rax = __errno_location()
	r13 = rax
	eax = Mem0[rax:word32]
	SZO = cond(r15d & r15d)
	C = false
	r12 = Mem0[0x000000000061A5D8:word64]
	Mem0[rsp + 0x0000000000000034:word32] = eax
	branch Test(SG,S) l000000000040E5F7
	// succ:  l000000000040E48C l000000000040E5F7
l000000000040E48C:
	SCZO = cond(r15d - Mem0[0x000000000061A5F0:word64])
	branch Test(ULT,C) l000000000040E4FA
	// succ:  l000000000040E495 l000000000040E4FA
l000000000040E495:
	ebp = rdi + 0x0000000000000001
	r14d = ebp
	rsi = r14
	rsi = rsi << 0x0000000000000004
	SCZO = cond(rsi)
	SCZO = cond(r12 - 0x000000000061A5E0)
	branch Test(NE,Z) l000000000040E5E0
	// succ:  l000000000040E4B0 l000000000040E5E0
l000000000040E4B0:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	call fn0000000000410C90 (retsize: 8;)
	rsi = Mem0[0x000000000061A5E0:word64]
	rdi = Mem0[0x000000000061A5E8:word64]
	r12 = rax
	Mem0[0x000000000061A5D8:word64] = rax
	Mem0[rax:word64] = rsi
	Mem0[rax + 0x0000000000000008:word64] = rdi
	// succ:  l000000000040E4D6
l000000000040E4D6:
	edi = Mem0[0x000000000061A5F0:word32]
	rdx = r14
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdx = rdx - rdi
	SCZO = cond(rdx)
	rdi = rdi << 0x0000000000000004
	SCZO = cond(rdi)
	rdx = rdx << 0x0000000000000004
	SCZO = cond(rdx)
	rdi = rdi + r12
	SCZO = cond(rdi)
	rax = memset(rdi, rsi, rdx)
	Mem0[0x000000000061A5F0:word32] = ebp
	// succ:  l000000000040E4FA
l000000000040E4FA:
	rax = Mem0[rbx + 0x0000000000000030:word64]
	r15 = r15 << 0x0000000000000004
	SCZO = cond(r15)
	ebp = Mem0[rbx + 0x0000000000000004:word32]
	r12 = r12 + r15
	SCZO = cond(r12)
	r8d = Mem0[r11:word64]
	r15 = r11 + 0x0000000000000008
	r11 = Mem0[r12:word64]
	r14 = Mem0[r12 + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rax = Mem0[rbx + 0x0000000000000028:word64]
	ebp = ebp | 0x00000001
	SZO = cond(ebp)
	C = false
	rcx = Mem0[rsp + 0x0000000000000028:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	r9d = ebp
	rsi = r11
	Mem0[rsp:word64] = r15
	rdi = r14
	Mem0[rsp + 0x0000000000000008:word64] = rax
	Mem0[rsp + 0x0000000000000038:word64] = r11
	call fn000000000040D8A0 (retsize: 8;)
	r11 = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(r11 - rax)
	branch Test(UGT,CZ) l000000000040E5BF
	// succ:  l000000000040E554 l000000000040E5BF
l000000000040E554:
	rsi = rax + 0x0000000000000001
	SCZO = cond(r14 - 0x000000000061B220)
	Mem0[r12:word64] = rsi
	branch Test(EQ,Z) l000000000040E577
	// succ:  l000000000040E565 l000000000040E577
l000000000040E565:
	rdi = r14
	Mem0[rsp + 0x0000000000000038:word64] = rsi
	free(rdi)
	rsi = Mem0[rsp + 0x0000000000000038:word64]
	// succ:  l000000000040E577
l000000000040E577:
	rdi = rsi
	Mem0[rsp + 0x0000000000000038:word64] = rsi
	call fn0000000000410C40 (retsize: 8;)
	Mem0[r12 + 0x0000000000000008:word64] = rax
	r14 = rax
	rax = Mem0[rbx + 0x0000000000000030:word64]
	r8d = Mem0[r11:word64]
	rcx = Mem0[rsp + 0x0000000000000028:word64]
	r9d = ebp
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rsi = Mem0[rsp + 0x0000000000000038:word64]
	rdi = r14
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rax = Mem0[rbx + 0x0000000000000028:word64]
	Mem0[rsp:word64] = r15
	Mem0[rsp + 0x0000000000000008:word64] = rax
	call fn000000000040D8A0 (retsize: 8;)
	// succ:  l000000000040E5BF
l000000000040E5BF:
	eax = Mem0[rsp + 0x0000000000000034:word32]
	Mem0[rbp + 0x0000000000000000:word32] = eax
	rsp = rsp + 0x0000000000000048
	SCZO = cond(rsp)
	rax = r14
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040E450_exit
l000000000040E5E0:
	rdi = r12
	call fn0000000000410C90 (retsize: 8;)
	r12 = rax
	Mem0[0x000000000061A5D8:word64] = rax
	goto l000000000040E4D6
	// succ:  l000000000040E4D6
l000000000040E5F7:
	abort()
fn000000000040E450_exit:


// fn000000000040E600
// Return size: 8
void fn000000000040E600()
fn000000000040E600_entry:
	// succ:  l000000000040E600
l000000000040E600:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rax = __errno_location()
	r12d = Mem0[r8:word64]
	SZO = cond(rbp & rbp)
	C = false
	edi = 0x0061B320
	rbx = rax
	branch Test(EQ,Z) l000000000040E61E
	// succ:  l000000000040E61A_1 l000000000040E61E
l000000000040E61A_1:
	rdi = rbp
	// succ:  l000000000040E61E
l000000000040E61E:
	esi = 0x00000038
	call fn0000000000410E00 (retsize: 8;)
	Mem0[r11:word32] = r12d
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040E600_exit
fn000000000040E600_exit:


// fn000000000040E630
// Return size: 8
void fn000000000040E630()
fn000000000040E630_entry:
	// succ:  l000000000040E630
l000000000040E630:
	rsp = fp
	SZO = cond(rdi & rdi)
	C = false
	eax = 0x0061B320
	branch Test(EQ,Z) l000000000040E63C
	// succ:  l000000000040E638_1 l000000000040E63C
l000000000040E638_1:
	rax = rdi
	// succ:  l000000000040E63C
l000000000040E63C:
	eax = Mem0[rax:word32]
	return
	// succ:  fn000000000040E630_exit
fn000000000040E630_exit:


// fn000000000040E640
// Return size: 8
void fn000000000040E640()
fn000000000040E640_entry:
	// succ:  l000000000040E640
l000000000040E640:
	rsp = fp
	eax = 0x0061B320
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040E64C
	// succ:  l000000000040E648_1 l000000000040E64C
l000000000040E648_1:
	rax = rdi
	// succ:  l000000000040E64C
l000000000040E64C:
	Mem0[rax:word32] = esi
	return
	// succ:  fn000000000040E640_exit
fn000000000040E640_exit:


// fn000000000040E650
// Return size: 8
void fn000000000040E650()
fn000000000040E650_entry:
	// succ:  l000000000040E650
l000000000040E650:
	rsp = fp
	SZO = cond(rdi & rdi)
	C = false
	eax = 0x0061B320
	ecx = esi
	branch Test(EQ,Z) l000000000040E65E
	// succ:  l000000000040E65A_1 l000000000040E65E
l000000000040E65A_1:
	rax = rdi
	// succ:  l000000000040E65E
l000000000040E65E:
	sil = sil >>u 0x05
	SCZO = cond(sil)
	ecx = ecx & 0x0000001F
	SZO = cond(ecx)
	C = false
	esi = (word32) sil
	rsi = rax + rsi * 0x0000000000000004
	edi = Mem0[rsi + 0x0000000000000008:word32]
	eax = edi
	eax = eax >>u cl
	SCZO = cond(eax)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	edx = edx & 0x00000001
	SZO = cond(edx)
	C = false
	edx = edx << cl
	SCZO = cond(edx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	Mem0[rsi + 0x0000000000000008:word32] = edx
	return
	// succ:  fn000000000040E650_exit
fn000000000040E650_exit:


// fn000000000040E6B0
// Return size: 8
void fn000000000040E6B0()
fn000000000040E6B0_entry:
	// succ:  l000000000040E6B0
l000000000040E6B0:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	eax = 0x0061B320
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000040E6C0
	// succ:  l000000000040E6BC_1 l000000000040E6C0
l000000000040E6BC_1:
	rdi = rax
	// succ:  l000000000040E6C0
l000000000040E6C0:
	SZO = cond(rsi & rsi)
	C = false
	Mem0[rdi:word32] = 0x00000008
	branch Test(EQ,Z) l000000000040E6DD
	// succ:  l000000000040E6CB l000000000040E6DD
l000000000040E6CB:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000040E6DD
	// succ:  l000000000040E6D0 l000000000040E6DD
l000000000040E6D0:
	Mem0[rdi + 0x0000000000000028:word64] = rsi
	Mem0[rdi + 0x0000000000000030:word64] = rdx
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040E6B0_exit
l000000000040E6DD:
	abort()
fn000000000040E6B0_exit:


// fn000000000040E6F0
// Return size: 8
void fn000000000040E6F0()
fn000000000040E6F0_entry:
	// succ:  l000000000040E6F0
l000000000040E6F0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	eax = 0x0061B320
	r15 = rcx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14 = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r13 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = r8
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	SZO = cond(r8 & r8)
	C = false
	branch Test(NE,Z) l000000000040E716
	// succ:  l000000000040E712_1 l000000000040E716
l000000000040E712_1:
	rbx = rax
	// succ:  l000000000040E716
l000000000040E716:
	Mem0[rsp + 0x0000000000000018:word64] = rdi
	rax = __errno_location()
	r12d = Mem0[r8:word64]
	rbp = rax
	rax = Mem0[rbx + 0x0000000000000030:word64]
	r9d = Mem0[r11 + 0x0000000000000004:word64]
	rdi = Mem0[rsp + 0x0000000000000018:word64]
	rcx = r15
	rdx = r14
	rsi = r13
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rax = Mem0[rbx + 0x0000000000000028:word64]
	Mem0[rsp + 0x0000000000000008:word64] = rax
	rax = rbx + 0x0000000000000008
	Mem0[rsp:word64] = rax
	r8d = Mem0[r11:word64]
	call fn000000000040D8A0 (retsize: 8;)
	Mem0[r13 + 0x0000000000000000:word32] = r12d
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040E6F0_exit
fn000000000040E6F0_exit:


// fn000000000040E930
// Return size: 8
void fn000000000040E930()
fn000000000040E930_entry:
	// succ:  l000000000040E930
l000000000040E930:
	rsp = fp
	rsi = rdi
	ecx = 0x0061B320
	rdx = 0xFFFFFFFFFFFFFFFF
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	// succ:  l000000000040E93F_thunk_fn000000000040E450
l000000000040E93F_thunk_fn000000000040E450:
	call fn000000000040E450 (retsize: 0;)
	return
	// succ:  fn000000000040E930_exit
fn000000000040E930_exit:


// fn000000000040E970
// Return size: 8
void fn000000000040E970()
fn000000000040E970_entry:
	// succ:  l000000000040E970
l000000000040E970:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	ebx = edi
	rsp = rsp - 0x0000000000000048
	SCZO = cond(rsp)
	rdi = rsp
	call fn000000000040D740 (retsize: 8;)
	rcx = rsp
	rsi = rbp
	edi = ebx
	rdx = 0xFFFFFFFFFFFFFFFF
	call fn000000000040E450 (retsize: 8;)
	rsp = rsp + 0x0000000000000048
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040E970_exit
fn000000000040E970_exit:


// fn000000000040EAB0
// Return size: 8
void fn000000000040EAB0()
fn000000000040EAB0_entry:
	goto l000000000040EAB0
	// succ:  l000000000040EAB0
l000000000040EA00:
	rsp = rsp - 0x0000000000000048
	SCZO = cond(rsp)
	rax = Mem0[0x000000000061B320:word64]
	r8d = edx
	r8b = r8b >>u 0x05
	SCZO = cond(r8b)
	ecx = edx
	rdx = rsi
	r8d = (word64) r8b
	ecx = ecx & 0x0000001F
	SZO = cond(ecx)
	C = false
	rsi = rdi
	Mem0[rsp:word64] = rax
	rax = Mem0[0x000000000061B328:word64]
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	Mem0[rsp + 0x0000000000000008:word64] = rax
	rax = Mem0[0x000000000061B330:word64]
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rax = Mem0[0x000000000061B338:word64]
	Mem0[rsp + 0x0000000000000018:word64] = rax
	rax = Mem0[0x000000000061B340:word64]
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rax = Mem0[0x000000000061B348:word64]
	r9d = Mem0[rsp + 0x0000000000000008 + r8 * 0x00000004:word64]
	Mem0[rsp + 0x0000000000000028:word64] = rax
	rax = Mem0[0x000000000061B350:word64]
	Mem0[rsp + 0x0000000000000030:word64] = rax
	eax = r9d
	eax = eax >>u cl
	SCZO = cond(eax)
	eax = eax ^ 0x00000001
	SZO = cond(eax)
	C = false
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	eax = eax << cl
	SCZO = cond(eax)
	rcx = rsp
	eax = eax ^ r9d
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x0000000000000008 + r8 * 0x00000004:word32] = eax
	call fn000000000040E450 (retsize: 8;)
	rsp = rsp + 0x0000000000000048
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040EAB0_exit
l000000000040EAB0:
	rsp = fp
	edx = 0x0000003A
	rsi = 0xFFFFFFFFFFFFFFFF
	goto l000000000040EA00
	// succ:  l000000000040EA00
fn000000000040EAB0_exit:


// fn000000000040EBF0
// Return size: 0
void fn000000000040EBF0()
fn000000000040EBF0_entry:
	// succ:  l000000000040EBF0
l000000000040EBF0:
	rsp = fp
	ecx = 0x0061A5A0
	rdx = 0xFFFFFFFFFFFFFFFF
	// succ:  l000000000040EBFC_thunk_fn000000000040E450
l000000000040EBFC_thunk_fn000000000040E450:
	call fn000000000040E450 (retsize: 0;)
	return
	// succ:  fn000000000040EBF0_exit
fn000000000040EBF0_exit:


// fn000000000040EC10
// Return size: 0
void fn000000000040EC10()
fn000000000040EC10_entry:
	// succ:  l000000000040EC10
l000000000040EC10:
	rsp = fp
	rsi = rdi
	ecx = 0x0061A5A0
	rdx = 0xFFFFFFFFFFFFFFFF
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	// succ:  l000000000040EC21_thunk_fn000000000040E450
l000000000040EC21_thunk_fn000000000040E450:
	call fn000000000040E450 (retsize: 0;)
	return
	// succ:  fn000000000040EC10_exit
fn000000000040EC10_exit:


// fn000000000040EC30
// Return size: 8
void fn000000000040EC30()
fn000000000040EC30_entry:
	// succ:  l000000000040EC30
l000000000040EC30:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	SZO = cond(rdx & rdx)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdx - 0x0000000000000001
	branch Test(EQ,Z) l000000000040EC69
	// succ:  l000000000040EC40 l000000000040EC69
l000000000040EC40:
	r12 = rsi
	call __ctype_tolower_loc (retsize: 8;)
	// succ:  l000000000040EC50
l000000000040EC50:
	ecx = (word32) Mem0[r12 + rbx:byte]
	rdx = Mem0[rax:word64]
	edx = Mem0[rdx + rcx * 0x00000004:word32]
	Mem0[rbp + 0x0000000000000000 + rbx:byte] = dl
	rbx = rbx - 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l000000000040EC50
	// succ:  l000000000040EC69 l000000000040EC50
l000000000040EC69:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040EC30_exit
fn000000000040EC30_exit:


// fn000000000040EC80
// Return size: 8
void fn000000000040EC80()
fn000000000040EC80_entry:
	// succ:  l000000000040EC80
l000000000040EC80:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	SZO = cond(rdx & rdx)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdx - 0x0000000000000001
	branch Test(EQ,Z) l000000000040ECB9
	// succ:  l000000000040EC90 l000000000040ECB9
l000000000040EC90:
	r12 = rsi
	call __ctype_toupper_loc (retsize: 8;)
	// succ:  l000000000040ECA0
l000000000040ECA0:
	ecx = (word32) Mem0[r12 + rbx:byte]
	rdx = Mem0[rax:word64]
	edx = Mem0[rdx + rcx * 0x00000004:word32]
	Mem0[rbp + 0x0000000000000000 + rbx:byte] = dl
	rbx = rbx - 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l000000000040ECA0
	// succ:  l000000000040ECB9 l000000000040ECA0
l000000000040ECB9:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040EC80_exit
fn000000000040EC80_exit:


// fn000000000040ECD0
// Return size: 8
void fn000000000040ECD0()
fn000000000040ECD0_entry:
	// succ:  l000000000040ECD0
l000000000040ECD0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	r10 = rdx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rcx
	rsp = rsp - 1240
	SCZO = cond(rsp)
	rax = Mem0[rax + 0x0000000000000030:word64]
	rsi = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x00000000000004C8:word64] = rsi
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	esi = Mem0[rax + 0x0000000000000008:word32]
	Mem0[rsp + 0x0000000000000010:word64] = r8
	Mem0[rsp + 0x0000000000000044:word32] = r9d
	Mem0[rsp + 0x000000000000000F:byte] = dil
	Mem0[rsp + 0x0000000000000048:word64] = rax
	SCZO = cond(esi - 0x0000000C)
	Mem0[rsp + 0x0000000000000040:word32] = esi
	branch Test(LE,SZO) l000000000040EEE0
	// succ:  l000000000040ED26 l000000000040EEE0
l000000000040ED26:
	v20 = Mem0[rsp + 0x0000000000000040:word32] - 0x0000000C
	Mem0[rsp + 0x0000000000000040:word32] = v20
	SCZO = cond(v20)
	// succ:  l000000000040ED2B
l000000000040ED2B:
	eax = (word32) Mem0[rbx:byte]
	r13d = r13d ^ r13d
	SZO = cond(r13d)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040F053
	// succ:  l000000000040ED39 l000000000040F053
l000000000040ED39:
	rsi = rsp + 0x00000000000000C1
	r14 = r10
	Mem0[rsp + 0x0000000000000020:word64] = rsi
	goto l000000000040ED85
	// succ:  l000000000040ED85
l000000000040ED50:
	rdx = r14
	rdx = rdx - r13
	SCZO = cond(rdx)
	SCZO = cond(rdx - 0x0000000000000001)
	branch Test(ULE,CZ) l000000000040EE98
	// succ:  l000000000040ED60 l000000000040EE98
l000000000040ED60:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000040ED6D
	// succ:  l000000000040ED65 l000000000040ED6D
l000000000040ED65:
	Mem0[r12:byte] = al
	r12 = r12 + 0x0000000000000001
	SCZO = cond(r12)
	// succ:  l000000000040ED6D
l000000000040ED6D:
	r13 = r13 + 0x0000000000000001
	SCZO = cond(r13)
	r8 = rbx
	// succ:  l000000000040ED74
l000000000040ED74:
	eax = (word32) Mem0[rax + 0x0000000000000001:byte]
	rbx = rax + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040F050
	// succ:  l000000000040ED85 l000000000040F050
l000000000040ED85:
	SCZO = cond(al - 0x25)
	branch Test(NE,Z) l000000000040ED50
	SCZO = cond(al - 0x25)
	branch Test(NE,Z) l000000000040ED50
	// succ:  l000000000040ED89 l000000000040ED50
l000000000040ED89:
	r9d = (word64) Mem0[rsp + 0x000000000000000F:byte]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	r11d = r11d ^ r11d
	SZO = cond(r11d)
	C = false
	r9d = (word64) Mem0[rsp + 0x000000000000000F:byte]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	r11d = r11d ^ r11d
	SZO = cond(r11d)
	C = false
	// succ:  l000000000040ED94
l000000000040ED94:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	edi = (word32) Mem0[rbx:byte]
	SCZO = cond(dil - 0x30)
	branch Test(EQ,Z) l000000000040EDC0
	// succ:  l000000000040EDA1 l000000000040EDC0
l000000000040EDA1:
	branch Test(GT,SZO) l000000000040EDD0
	// succ:  l000000000040EDA3 l000000000040EDD0
l000000000040EDA3:
	SCZO = cond(dil - 0x23)
	branch Test(NE,Z) l000000000040EDE8
	// succ:  l000000000040EDA9 l000000000040EDE8
l000000000040EDA9:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	edi = (word32) Mem0[rbx:byte]
	eax = 0x00000001
	SCZO = cond(dil - 0x30)
	branch Test(NE,Z) l000000000040EDA1
	// succ:  l000000000040EDBB l000000000040EDA1
l000000000040EDBB:
l000000000040EDC0:
	r11d = (int64) dil
	goto l000000000040ED94
	// succ:  l000000000040ED94
l000000000040EDD0:
	SCZO = cond(dil - 0x5E)
	branch Test(NE,Z) l000000000040EE70
	// succ:  l000000000040EDDA l000000000040EE70
l000000000040EDDA:
	ecx = 0x00000001
	goto l000000000040ED94
	// succ:  l000000000040ED94
l000000000040EDE8:
	SCZO = cond(dil - 0x2D)
	branch Test(EQ,Z) l000000000040EDC0
	// succ:  l000000000040EDEE l000000000040EDC0
l000000000040EDEE:
	edx = (int32) dil
	ebp = 0xFFFFFFFF
	edx = edx - 0x00000030
	SCZO = cond(edx)
	SCZO = cond(edx - 0x00000009)
	branch Test(UGT,CZ) l000000000040EE40
	// succ:  l000000000040EDFF l000000000040EE40
l000000000040EDFF:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	goto l000000000040EE28
	// succ:  l000000000040EE28
l000000000040EE08:
	edx = (int32) Mem0[rbx:byte]
	branch Test(EQ,Z) l000000000040EE88
	// succ:  l000000000040EE0D l000000000040EE88
l000000000040EE0D:
	ecx = rbp + 0x0000000000000000 + rbp * 0x00000004
	ebp = rdx - 0x0000000000000030 + rcx * 0x00000002
	// succ:  l000000000040EE15
l000000000040EE15:
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	edi = (word32) Mem0[rbx:byte]
	edx = (int32) dil
	edx = edx - 0x00000030
	SCZO = cond(edx)
	SCZO = cond(edx - 0x00000009)
	branch Test(UGT,CZ) l000000000040EE40
	// succ:  l000000000040EE28 l000000000040EE40
l000000000040EE28:
	SCZO = cond(ebp - 0x0CCCCCCC)
	branch Test(LE,SZO) l000000000040EE08
	SCZO = cond(ebp - 0x0CCCCCCC)
	branch Test(LE,SZO) l000000000040EE08
	// succ:  l000000000040EE30 l000000000040EE08
l000000000040EE30:
	ebp = 0x7FFFFFFF
	ebp = 0x7FFFFFFF
	goto l000000000040EE15
	// succ:  l000000000040EE15
l000000000040EE40:
	SCZO = cond(dil - 0x45)
	branch Test(EQ,Z) l000000000040EEC8
	// succ:  l000000000040EE4A l000000000040EEC8
l000000000040EE4A:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(dil - 0x4F)
	branch Test(EQ,Z) l000000000040EEC8
	// succ:  l000000000040EE52 l000000000040EEC8
l000000000040EE52:
	SCZO = cond(dil - 0x7A)
	esi = (int32) dil
	branch Test(UGT,CZ) l000000000040FF4D
	// succ:  l000000000040EE60 l000000000040FF4D
l000000000040EE60:
	edx = (word32) dil
	switch (rdx) { l000000000040FEFB }
	goto l000000000040FEFB
	// succ:  l000000000040FEFB
l000000000040EE70:
	SCZO = cond(dil - 0x5F)
	branch Test(NE,Z) l000000000040EDEE
	// succ:  l000000000040EE7A l000000000040EDEE
l000000000040EE7A:
	r11d = (int64) dil
	goto l000000000040ED94
	// succ:  l000000000040ED94
l000000000040EE88:
	SCZO = cond(dl - 0x37)
	branch Test(LE,SZO) l000000000040EE0D
	// succ:  l000000000040EE8D l000000000040EE0D
l000000000040EE8D:
	ebp = 0x7FFFFFFF
	goto l000000000040EE15
	// succ:  l000000000040EE15
l000000000040EE98:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l000000000040EE9A
l000000000040EE9A:
	rsi = Mem0[rsp + 0x00000000000004C8:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	branch Test(NE,Z) l00000000004105EA
	// succ:  l000000000040EEB1 l00000000004105EA
l000000000040EEB1:
	rsp = rsp + 1240
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn000000000040ECD0_exit
l000000000040EEC8:
	ecx = (int32) dil
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	edi = (word32) Mem0[rbx:byte]
	goto l000000000040EE52
	// succ:  l000000000040EE52
l000000000040EEE0:
	esi = Mem0[rsp + 0x0000000000000040:word32]
	eax = 0x0000000C
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l000000000040EEEE
	// succ:  l000000000040EEEB_1 l000000000040EEEE
l000000000040EEEB_1:
	eax = esi
	// succ:  l000000000040EEEE
l000000000040EEEE:
	Mem0[rsp + 0x0000000000000040:word32] = eax
	goto l000000000040ED2B
	// succ:  l000000000040ED2B
l000000000040EF37:
	rcx = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[rax:byte] = dil
	rdx = rsp + 0x00000000000000B0
	rdi = rsp + 0x00000000000000C0
	Mem0[rax + 0x0000000000000001:byte] = 0x00
	esi = 0x00000400
	Mem0[rsp + 0x0000000000000038:word32] = r9d
	Mem0[rsp + 0x0000000000000030:word32] = r11d
	Mem0[rsp + 0x0000000000000028:word64] = r8
	call strftime (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r8 = Mem0[rsp + 0x0000000000000028:word64]
	r11d = Mem0[rsp + 0x0000000000000030:word64]
	r9d = Mem0[rsp + 0x0000000000000038:word64]
	branch Test(EQ,Z) l000000000040ED74
	// succ:  l000000000040EF84 l000000000040ED74
l000000000040EF84:
	rbx = rax - 0x0000000000000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(ebp & ebp)
	C = false
	branch Test(SG,S) l000000000040EF8F
	// succ:  l000000000040EF8C_1 l000000000040EF8F
l000000000040EF8C_1:
	eax = ebp
	// succ:  l000000000040EF8F
l000000000040EF8F:
	rdx = r14
	ax = (int16) al
	rcx = rbx
	SCZO = cond(rax - rbx)
	branch Test(ULT,C) l000000000040EF9E
	// succ:  l000000000040EF9A_2 l000000000040EF9E
l000000000040EF9A_2:
	rcx = rax
	// succ:  l000000000040EF9E
l000000000040EF9E:
	rdx = rdx - r13
	SCZO = cond(rdx)
	SCZO = cond(rcx - rdx)
	branch Test(UGE,C) l000000000040EE98
	// succ:  l000000000040EFAA l000000000040EE98
l000000000040EFAA:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000040F03A
	// succ:  l000000000040EFB3 l000000000040F03A
l000000000040EFB3:
	SCZO = cond(rbx - rax)
	branch Test(UGE,C) l000000000040F001
	// succ:  l000000000040EFB8 l000000000040F001
l000000000040EFB8:
	eax = Mem0[rsp + 0x0000000000000018:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040F001
	// succ:  l000000000040EFC0 l000000000040F001
l000000000040EFC0:
	rbp = (int64) ebp
	Mem0[rsp + 0x0000000000000030:word64] = rcx
	Mem0[rsp + 0x0000000000000028:word32] = r9d
	rbp = rbp - rbx
	SCZO = cond(rbp)
	SCZO = cond(r11d - 0x0000000000000030)
	Mem0[rsp + 0x0000000000000018:word64] = r8
	rdx = rbp
	branch Test(EQ,Z) l0000000000410239
	// succ:  l000000000040EFE2 l0000000000410239
l000000000040EFE2:
	rdi = r12
	esi = 0x00000020
	r12 = r12 + rbp
	SCZO = cond(r12)
	rax = memset(rdi, rsi, rdx)
	rcx = Mem0[rsp + 0x0000000000000030:word64]
	r9d = Mem0[rsp + 0x0000000000000028:word64]
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	// succ:  l000000000040F001
l000000000040F001:
	SZO = cond(r15b & r15b)
	C = false
	Mem0[rsp + 0x0000000000000028:word64] = rcx
	Mem0[rsp + 0x0000000000000018:word64] = r8
	rdx = rbx
	rsi = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r12
	branch Test(NE,Z) l000000000040F1AD
	// succ:  l000000000040F01F l000000000040F1AD
l000000000040F01F:
	SZO = cond(r9b & r9b)
	C = false
	branch Test(EQ,Z) l000000000040F199
	// succ:  l000000000040F028 l000000000040F199
l000000000040F028:
	call fn000000000040EC80 (retsize: 8;)
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = Mem0[rsp + 0x0000000000000028:word64]
	// succ:  l000000000040F037
l000000000040F037:
	r12 = r12 + rbx
	SCZO = cond(r12)
	// succ:  l000000000040F03A
l000000000040F03A:
	eax = (word32) Mem0[rax + 0x0000000000000001:byte]
	r13 = r13 + rcx
	SCZO = cond(r13)
	rbx = rax + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040ED85
	// succ:  l000000000040F04E l000000000040ED85
l000000000040F04E:
l000000000040F050:
	r10 = r14
	// succ:  l000000000040F053
l000000000040F053:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000040F191
	// succ:  l000000000040F05C l000000000040F191
l000000000040F05C:
	SZO = cond(r10 & r10)
	C = false
	branch Test(EQ,Z) l000000000040F191
	// succ:  l000000000040F065 l000000000040F191
l000000000040F065:
	Mem0[r12:byte] = 0x00
	rax = r13
	goto l000000000040EE9A
	// succ:  l000000000040EE9A
l000000000040F0B2:
	rbx = r8
	rax = rbx - 0x0000000000000001
	ecx = 0x00000001
	// succ:  l000000000040F0C1
l000000000040F0C1:
	r15 = rax
	rax = rax - 0x0000000000000001
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	SCZO = cond(Mem0[rax + 0x0000000000000001:byte] - 0x25)
	branch Test(NE,Z) l000000000040F0C1
	// succ:  l000000000040F0D1 l000000000040F0C1
l000000000040F0D1:
	rcx = (int64) ecx
	r8 = rbx
	// succ:  l000000000040F0D7
l000000000040F0D7:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(ebp & ebp)
	C = false
	rdx = r14
	branch Test(SG,S) l000000000040F0E1
	// succ:  l000000000040F0DE_1 l000000000040F0E1
l000000000040F0DE_1:
	eax = ebp
	// succ:  l000000000040F0E1
l000000000040F0E1:
	ax = (int16) al
	SCZO = cond(rcx - rax)
	rbx = rax
	branch Test(ULT,C) l000000000040F0ED
	// succ:  l000000000040F0E9_2 l000000000040F0ED
l000000000040F0E9_2:
	rbx = rcx
	// succ:  l000000000040F0ED
l000000000040F0ED:
	rdx = rdx - r13
	SCZO = cond(rdx)
	SCZO = cond(rbx - rdx)
	branch Test(UGE,C) l000000000040EE98
	// succ:  l000000000040F0F9 l000000000040EE98
l000000000040F0F9:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000040F16E
	// succ:  l000000000040F0FE l000000000040F16E
l000000000040F0FE:
	SCZO = cond(rax - rcx)
	branch Test(ULE,CZ) l000000000040F144
	// succ:  l000000000040F103 l000000000040F144
l000000000040F103:
	rbp = (int64) ebp
	Mem0[rsp + 0x0000000000000030:word64] = rcx
	Mem0[rsp + 0x0000000000000028:word32] = r9d
	rbp = rbp - rcx
	SCZO = cond(rbp)
	SCZO = cond(r11d - 0x0000000000000030)
	Mem0[rsp + 0x0000000000000018:word64] = r8
	rdx = rbp
	branch Test(EQ,Z) l000000000040F1C1
	// succ:  l000000000040F125 l000000000040F1C1
l000000000040F125:
	rdi = r12
	esi = 0x00000020
	r12 = r12 + rbp
	SCZO = cond(r12)
	rax = memset(rdi, rsi, rdx)
	rcx = Mem0[rsp + 0x0000000000000030:word64]
	r9d = Mem0[rsp + 0x0000000000000028:word64]
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	// succ:  l000000000040F144
l000000000040F144:
	SZO = cond(r9b & r9b)
	C = false
	Mem0[rsp + 0x0000000000000028:word64] = r8
	rdx = rcx
	Mem0[rsp + 0x0000000000000018:word64] = rcx
	rsi = r15
	rdi = r12
	branch Test(EQ,Z) l000000000040F180
	// succ:  l000000000040F15C l000000000040F180
l000000000040F15C:
	call fn000000000040EC80 (retsize: 8;)
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r8 = Mem0[rsp + 0x0000000000000028:word64]
	// succ:  l000000000040F16B
l000000000040F16B:
	r12 = r12 + rcx
	SCZO = cond(r12)
	// succ:  l000000000040F16E
l000000000040F16E:
	r13 = r13 + rbx
	SCZO = cond(r13)
	goto l000000000040ED74
	// succ:  l000000000040ED74
l000000000040F180:
	rax = memcpy(rdi, rsi, rdx)
	r8 = Mem0[rsp + 0x0000000000000028:word64]
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	goto l000000000040F16B
	// succ:  l000000000040F16B
l000000000040F191:
	rax = r13
	goto l000000000040EE9A
	// succ:  l000000000040EE9A
l000000000040F199:
	rax = memcpy(rdi, rsi, rdx)
	rcx = Mem0[rsp + 0x0000000000000028:word64]
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	goto l000000000040F037
	// succ:  l000000000040F037
l000000000040F1AD:
	call fn000000000040EC30 (retsize: 8;)
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = Mem0[rsp + 0x0000000000000028:word64]
	goto l000000000040F037
	// succ:  l000000000040F037
l000000000040F1C1:
	rdi = r12
	esi = 0x00000030
	r12 = r12 + rbp
	SCZO = cond(r12)
	rax = memset(rdi, rsi, rdx)
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	r9d = Mem0[rsp + 0x0000000000000028:word64]
	rcx = Mem0[rsp + 0x0000000000000030:word64]
	goto l000000000040F144
	// succ:  l000000000040F144
l000000000040F25D:
	Mem0[rsp + 0x00000000000000B2:byte] = cl
	edi = esi
	r8 = rbx
	rax = rsp + 0x00000000000000B3
	goto l000000000040EF37
	// succ:  l000000000040EF37
l000000000040F39F:
	SCZO = cond(dil - 0x25)
	branch Test(NE,Z) l000000000040F0B2
	// succ:  l000000000040F3A9 l000000000040F0B2
l000000000040F3A9:
	r15 = r8
	ecx = 0x00000001
	goto l000000000040F0D7
	// succ:  l000000000040F0D7
l000000000040FEFB:
	r8 = r11 - 0x0000000000000001
	edi = (word32) Mem0[rbx - 0x0000000000000001:byte]
	goto l000000000040F39F
	// succ:  l000000000040F39F
l000000000040FF4D:
	r8 = rbx
	goto l000000000040F39F
	// succ:  l000000000040F39F
l0000000000410239:
	rdi = r12
	esi = 0x00000030
	r12 = r12 + rbp
	SCZO = cond(r12)
	rax = memset(rdi, rsi, rdx)
	r8 = Mem0[rsp + 0x0000000000000018:word64]
	r9d = Mem0[rsp + 0x0000000000000028:word64]
	rcx = Mem0[rsp + 0x0000000000000030:word64]
	goto l000000000040F001
	// succ:  l000000000040F001
l00000000004105EA:
	__stack_chk_fail()
	Mem0[rsp + 0x0000000000000018:word32] = 0x00000000
	goto l000000000040F25D
	// succ:  l000000000040F25D
fn000000000040ECD0_exit:


// fn0000000000410600
// Return size: 8
void fn0000000000410600()
fn0000000000410600_entry:
	// succ:  l0000000000410600
l0000000000410600:
	rsp = fp
	rsp = rsp - 0x0000000000000018
	SCZO = cond(rsp)
	Mem0[rsp:word32] = r9d
	r9d = r8d
	r8 = rcx
	rcx = rdx
	rdx = rsi
	rsi = rdi
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	call fn000000000040ECD0 (retsize: 8;)
	rsp = rsp + 0x0000000000000018
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410600_exit
fn0000000000410600_exit:


// fn0000000000410630
// Return size: 8
void fn0000000000410630()
fn0000000000410630_entry:
	// succ:  l0000000000410630
l0000000000410630:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = r9
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = r8
	rsp = rsp - 0x0000000000000058
	SCZO = cond(rsp)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000410A30
	// succ:  l0000000000410650 l0000000000410A30
l0000000000410650:
	r9 = rcx
	r8 = rdx
	rcx = rsi
	edx = 0x004168C0
	esi = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __fprintf_chk(rdi, rsi, rdx), 0, 32)
	// succ:  l000000000041066A
l000000000041066A:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x004168D3
	rax = dcgettext(rdi, rsi, rdx)
	eax = 0x000007DD
	rcx = rax
	edx = 0x00416BA0
	esi = 0x00000001
	rdi = rbp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __fprintf_chk(rdi, rsi, rdx), 0, 32)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = 0x00000005
	esi = 0x00416930
	rax = dcgettext(rdi, rsi, rdx)
	rsi = rbp
	rdi = rax
	call fputs_unlocked (retsize: 8;)
	SCZO = cond(r12 - 0x0000000000000009)
	branch Test(UGT,CZ) l0000000000410A50
	// succ:  l00000000004106BE l0000000000410A50
l00000000004106BE:
	call Mem0[0x00416B48:word32] (retsize: 4;)
	return
	// succ:  fn0000000000410630_exit
l00000000004107A1:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	r9 = Mem0[rsp + 0x0000000000000040:word64]
	r10 = Mem0[rsp + 0x0000000000000048:word64]
	rcx = rbx
	r8 = Mem0[rsp + 0x0000000000000038:word64]
	Mem0[rsp + 0x0000000000000018:word64] = r13
	rdx = rax
	Mem0[rsp + 0x0000000000000010:word64] = r12
	Mem0[rsp + 0x0000000000000008:word64] = r15
	rdi = rbp
	Mem0[rsp + 0x0000000000000020:word64] = r9
	r9 = Mem0[rsp + 0x0000000000000030:word64]
	esi = 0x00000001
	Mem0[rsp:word64] = r14
	Mem0[rsp + 0x0000000000000028:word64] = r10
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, __fprintf_chk(rdi, rsi, rdx), 0, 32)
	rsp = rsp + 0x0000000000000058
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000410630_exit
l0000000000410A30:
	r8 = rcx
	esi = 0x00000001
	rcx = rdx
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edx = 0x004168CC
	rax = DPB(rax, __fprintf_chk(rdi, rsi, rdx), 0, 32)
	goto l000000000041066A
	// succ:  l000000000041066A
l0000000000410A50:
	r10 = Mem0[r11 + 0x0000000000000040:word64]
	r9 = Mem0[r11 + 0x0000000000000038:word64]
	edx = 0x00000005
	rax = Mem0[rbx + 0x0000000000000010:word64]
	r8 = Mem0[r11 + 0x0000000000000008:word64]
	esi = 0x00416B08
	r13 = Mem0[r11 + 0x0000000000000030:word64]
	r12 = Mem0[r11 + 0x0000000000000028:word64]
	r15 = Mem0[r11 + 0x0000000000000020:word64]
	r14 = Mem0[r11 + 0x0000000000000018:word64]
	Mem0[rsp + 0x0000000000000048:word64] = r10
	Mem0[rsp + 0x0000000000000040:word64] = r9
	Mem0[rsp + 0x0000000000000030:word64] = rax
	Mem0[rsp + 0x0000000000000038:word64] = r8
	rbx = Mem0[rbx:word64]
	goto l00000000004107A1
	// succ:  l00000000004107A1
fn0000000000410630_exit:


// fn0000000000410AC0
// Return size: 8
void fn0000000000410AC0()
fn0000000000410AC0_entry:
	// succ:  l0000000000410AC0
l0000000000410AC0:
	rsp = fp
	rsp = rsp - 0x0000000000000058
	SCZO = cond(rsp)
	r9d = r9d ^ r9d
	SZO = cond(r9d)
	C = false
	goto l0000000000410AF3
	// succ:  l0000000000410AF3
l0000000000410AD0:
	r10d = eax
	r10 = r10 + Mem0[r8 + 0x0000000000000010:word64]
	SCZO = cond(r10)
	eax = eax + 0x00000008
	SCZO = cond(eax)
	Mem0[rax:word32] = eax
	rax = Mem0[rdx:word64]
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + r9 * 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000410B18
	// succ:  l0000000000410AE9 l0000000000410B18
l0000000000410AE9:
	r9 = r9 + 0x0000000000000001
	SCZO = cond(r9)
	SCZO = cond(r9 - 0x000000000000000A)
	branch Test(EQ,Z) l0000000000410B18
	// succ:  l0000000000410AF3 l0000000000410B18
l0000000000410AF3:
	eax = Mem0[rax:word32]
	SCZO = cond(eax - 0x00000030)
	branch Test(ULT,C) l0000000000410AD0
	eax = Mem0[rax:word32]
	SCZO = cond(eax - 0x00000030)
	branch Test(ULT,C) l0000000000410AD0
	// succ:  l0000000000410AFB l0000000000410AD0
l0000000000410AFB:
	r10 = Mem0[r8 + 0x0000000000000008:word64]
	rax = rdx + 0x0000000000000008
	Mem0[rax + 0x0000000000000008:word64] = rax
	rax = Mem0[rdx:word64]
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + r9 * 0x0000000000000008:word64] = rax
	branch Test(NE,Z) l0000000000410AE9
	r10 = Mem0[r8 + 0x0000000000000008:word64]
	rax = rdx + 0x0000000000000008
	Mem0[rax + 0x0000000000000008:word64] = rax
	rax = Mem0[rdx:word64]
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + r9 * 0x0000000000000008:word64] = rax
	branch Test(NE,Z) l0000000000410AE9
	// succ:  l0000000000410B13 l0000000000410AE9
l0000000000410B13:
	// succ:  l0000000000410B18
l0000000000410B18:
	r8 = rsp
	call fn0000000000410630 (retsize: 8;)
	rsp = rsp + 0x0000000000000058
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410AC0_exit
fn0000000000410AC0_exit:


// fn0000000000410C40
// Return size: 8
void fn0000000000410C40()
fn0000000000410C40_entry:
	// succ:  l0000000000410C40
l0000000000410C40:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410C50
	// succ:  l0000000000410C4E l0000000000410C50
l0000000000410C4E:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000410C40_exit
l0000000000410C50:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000410C4E
	// succ:  l0000000000410C55 l0000000000410C4E
l0000000000410C55:
	call fn0000000000410E50 (retsize: 8;)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	SCZO = cond(rax - rdi)
	branch Test(ULT,C) l0000000000410C7A
	// succ:  l0000000000410C71 l0000000000410C7A
l0000000000410C71:
	rdi = rdi *s rsi
	SCZO = cond(rdi)
	goto l0000000000410C40
	// succ:  l0000000000410C40
l0000000000410C7A:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rax
	call fn0000000000410E50 (retsize: 8;)
	goto l0000000000410C40
	// succ:  l0000000000410C40
fn0000000000410C40_exit:


// fn0000000000410C90
// Return size: 8
void fn0000000000410C90()
fn0000000000410C90_entry:
	goto l0000000000410C90
	// succ:  l0000000000410C90
l0000000000402480:
	call Mem0[0x000000000061A188:word32] (retsize: 4;)
	return
	// succ:  fn0000000000410C90_exit
l0000000000410C90:
	rsp = fp
	SZO = cond(rsi & rsi)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rsi
	branch Test(EQ,Z) l0000000000410CB0
	// succ:  l0000000000410C99 l0000000000410CB0
l0000000000410C99:
	rsi = rbx
	rax = realloc(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410CBE
	// succ:  l0000000000410CA6 l0000000000410CBE
l0000000000410CA6:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000410C90_exit
l0000000000410CB0:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000410C99
	// succ:  l0000000000410CB5 l0000000000410C99
l0000000000410CB5:
	free(rdi)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000410C90_exit
l0000000000410CBE:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000410CA6
	// succ:  l0000000000410CC3 l0000000000410CA6
l0000000000410CC3:
	call fn0000000000410E50 (retsize: 8;)
	rcx = rdx
	rax = 0xFFFFFFFFFFFFFFFF
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rdx = rdx_rax % rcx
	rax = rdx_rax /u rcx
	SCZO = cond(rax)
	SCZO = cond(rax - rsi)
	branch Test(ULT,C) l0000000000410CED
	// succ:  l0000000000410CE4 l0000000000410CED
l0000000000410CE4:
	rsi = rsi *s rcx
	SCZO = cond(rsi)
	goto l0000000000410C90
	// succ:  l0000000000410C90
l0000000000410CED:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rax
	call fn0000000000410E50 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	r8 = rdx
	rcx = Mem0[rsi:word64]
	branch Test(EQ,Z) l0000000000410D40
	// succ:  l0000000000410D0B l0000000000410D40
l0000000000410D0B:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	r8 = 0x00000000AAAAAAAA
	rdx = rdx_rax % r8
	rax = rdx_rax /u r8
	SCZO = cond(rax)
	SCZO = cond(rcx - rax)
	branch Test(UGE,C) l0000000000410D5C
	// succ:  l0000000000410D1F l0000000000410D5C
l0000000000410D1F:
	rax = rcx + 0x0000000000000001
	rax = rax >>u 0x0000000000000001
	SCZO = cond(rax)
	rcx = rcx + rax
	SCZO = cond(rcx)
	// succ:  l0000000000410D29
l0000000000410D29:
	Mem0[rsi:word64] = rcx
	rcx = rcx *s r8
	SCZO = cond(rcx)
	rsi = rcx
	goto l0000000000410C90
	// succ:  l0000000000410C90
l0000000000410D40:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000410D29
	// succ:  l0000000000410D45 l0000000000410D29
l0000000000410D45:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	eax = 0x00000080
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	rdx = rdx_rax % r8
	rax = rdx_rax /u r8
	SCZO = cond(rax)
	SZO = cond(rax & rax)
	C = false
	cl = Test(EQ,Z)
	rcx = rcx + rax
	SCZO = cond(rcx)
	goto l0000000000410D29
	// succ:  l0000000000410D29
l0000000000410D5C:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rax
	call fn0000000000410E50 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	rax = Mem0[rsi:word64]
	branch Test(EQ,Z) l0000000000410DA0
	// succ:  l0000000000410D78 l0000000000410DA0
l0000000000410D78:
	r10 = 0x00000000AAAAAAA9
	SCZO = cond(rax - rdx)
	branch Test(UGT,CZ) l0000000000410DB7
	// succ:  l0000000000410D87 l0000000000410DB7
l0000000000410D87:
	rdx = rax + 0x0000000000000001
	rdx = rdx >>u 0x0000000000000001
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	Mem0[rsi:word64] = rax
	rsi = rax
	goto l0000000000410C90
	// succ:  l0000000000410C90
l0000000000410DA0:
	SZO = cond(rax & rax)
	C = false
	edx = 0x00000080
	branch Test(NE,Z) l0000000000410DAC
	// succ:  l0000000000410DA8_1 l0000000000410DAC
l0000000000410DA8_1:
	rax = rdx
	// succ:  l0000000000410DAC
l0000000000410DAC:
	Mem0[rsi:word64] = rax
	rsi = rax
	goto l0000000000410C90
	// succ:  l0000000000410C90
l0000000000410DB7:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rax
	call fn0000000000410E50 (retsize: 8;)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	call fn0000000000410C40 (retsize: 8;)
	rdx = rbx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	rdi = rax
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l0000000000402480
	// succ:  l0000000000402480
fn0000000000410C90_exit:


// fn0000000000410E00
// Return size: 0
void fn0000000000410E00()
fn0000000000410E00_entry:
	goto l0000000000410E00
	// succ:  l0000000000410E00
l00000000004025C0:
	call Mem0[0x000000000061A228:word32] (retsize: 4;)
	return
	// succ:  fn0000000000410E00_exit
l0000000000410E00:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rdi = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rsi
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	call fn0000000000410C40 (retsize: 8;)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdx = rbx
	rsi = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = rax
	goto l00000000004025C0
	// succ:  l00000000004025C0
fn0000000000410E00_exit:


// fn0000000000410E30
// Return size: 0
void fn0000000000410E30()
fn0000000000410E30_entry:
	// succ:  l0000000000410E30
l0000000000410E30:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rax = strlen(rdi)
	rdi = rbx
	rsi = rax + 0x0000000000000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	// succ:  l0000000000410E40_thunk_fn0000000000410E00
l0000000000410E40_thunk_fn0000000000410E00:
	call fn0000000000410E00 (retsize: 0;)
	return
	// succ:  fn0000000000410E30_exit
fn0000000000410E30_exit:


// fn0000000000410E50
// Return size: 0
void fn0000000000410E50()
fn0000000000410E50_entry:
	// succ:  l0000000000410E50
l0000000000410E50:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	edx = 0x00000005
	esi = 0x00416BCF
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	edi = Mem0[0x000000000061A580:word32]
	rcx = rax
	edx = 0x00415E54
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call error (retsize: 8;)
	abort()
fn0000000000410E50_exit:


// fn0000000000410E90
// Return size: 8
void fn0000000000410E90()
fn0000000000410E90_entry:
	// succ:  l0000000000410E90
l0000000000410E90:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14d = edx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	SCZO = cond(edx - 0x00000024)
	branch Test(UGT,CZ) l00000000004112B0
	// succ:  l0000000000410EAA l00000000004112B0
l0000000000410EAA:
	rax = rsp + 0x0000000000000018
	rbp = rdi
	r15 = rsi
	SZO = cond(rsi & rsi)
	C = false
	r13 = rcx
	r12 = r8
	branch Test(NE,Z) l0000000000410EC2
	// succ:  l0000000000410EBE_1 l0000000000410EC2
l0000000000410EBE_1:
	r15 = rax
	// succ:  l0000000000410EC2
l0000000000410EC2:
	ebx = (word32) Mem0[rdi:byte]
	call __ctype_b_loc (retsize: 8;)
	rdx = Mem0[rax:word64]
	rax = rbp
	goto l0000000000410EDF
	// succ:  l0000000000410EDF
l0000000000410ED8:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	ebx = (word32) Mem0[rax:byte]
	// succ:  l0000000000410EDF
l0000000000410EDF:
	r9d = (word64) bl
	SZO = cond(Mem0[rdx + 0x0000000000000001 + r9 * 0x02:byte] & 0x20)
	C = false
	branch Test(NE,Z) l0000000000410ED8
	// succ:  l0000000000410EEB l0000000000410ED8
l0000000000410EEB:
	SCZO = cond(bl - 0x2D)
	branch Test(NE,Z) l0000000000410F08
	// succ:  l0000000000410EF0 l0000000000410F08
l0000000000410EF0:
	eax = 0x00000004
	// succ:  l0000000000410EF5
l0000000000410EF5:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000410E90_exit
l0000000000410F08:
	rax = __errno_location()
	edx = r14d
	Mem0[rax:word32] = 0x00000000
	rsi = r15
	rdi = rbp
	Mem0[rsp + 0x0000000000000008:word64] = rax
	call strtoul (retsize: 8;)
	r14 = Mem0[r15:word64]
	rbx = rax
	rcx = Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(r14 - rbp)
	branch Test(EQ,Z) l0000000000410FE7
	// succ:  l0000000000410F3A l0000000000410FE7
l0000000000410F3A:
	eax = Mem0[rcx:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000410F68
	// succ:  l0000000000410F40 l0000000000410F68
l0000000000410F40:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	// succ:  l0000000000410F42
l0000000000410F42:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000410F4F
	// succ:  l0000000000410F47 l0000000000410F4F
l0000000000410F47:
	edx = (word32) Mem0[rsi:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000410F78
	// succ:  l0000000000410F4F l0000000000410F78
l0000000000410F4F:
	Mem0[rbp + 0x0000000000000000:word64] = rbx
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	eax = ebp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000410E90_exit
l0000000000410F68:
	SCZO = cond(eax - 0x00000022)
	ebp = 0x00000001
	branch Test(NE,Z) l0000000000410EF0
	// succ:  l0000000000410F76 l0000000000410EF0
l0000000000410F76:
	goto l0000000000410F42
	// succ:  l0000000000410F42
l0000000000410F78:
	esi = (int32) dl
	rdi = r12
	Mem0[rsp + 0x0000000000000008:word32] = edx
	rax = strchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	edx = Mem0[rsp + 0x0000000000000008:word32]
	branch Test(EQ,Z) l0000000000411028
	// succ:  l0000000000410F94 l0000000000411028
l0000000000410F94:
	esi = 0x00000030
	rdi = r12
	Mem0[rsp + 0x0000000000000008:word32] = edx
	rax = strchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	edx = Mem0[rsp + 0x0000000000000008:word32]
	branch Test(EQ,Z) l0000000000410FCB
	// succ:  l0000000000410FAE l0000000000410FCB
l0000000000410FAE:
	eax = (word32) Mem0[rsi + 0x0000000000000001:byte]
	SCZO = cond(al - 0x44)
	branch Test(EQ,Z) l0000000000411262
	// succ:  l0000000000410FBB l0000000000411262
l0000000000410FBB:
	SCZO = cond(al - 0x69)
	branch Test(EQ,Z) l000000000041124A
	// succ:  l0000000000410FC3 l000000000041124A
l0000000000410FC3:
	SCZO = cond(al - 0x42)
	branch Test(EQ,Z) l0000000000411262
	// succ:  l0000000000410FCB l0000000000411262
l0000000000410FCB:
	ecx = 0x00000001
	eax = 0x00000400
	// succ:  l0000000000410FD5
l0000000000410FD5:
	edx = edx - 0x00000042
	SCZO = cond(edx)
	SCZO = cond(dl - 0x35)
	branch Test(UGT,CZ) l0000000000411028
	// succ:  l0000000000410FDD l0000000000411028
l0000000000410FDD:
	edx = (word32) dl
	switch (rdx) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
	// succ:  l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054
l0000000000410FE7:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000410EF0
	// succ:  l0000000000410FF0 l0000000000410EF0
l0000000000410FF0:
	edx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000410EF0
	// succ:  l0000000000410FFC l0000000000410EF0
l0000000000410FFC:
	esi = (int32) dl
	rdi = r12
	Mem0[rsp + 0x0000000000000008:word32] = edx
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	ebx = 0x00000001
	rax = strchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	edx = Mem0[rsp + 0x0000000000000008:word32]
	branch Test(NE,Z) l0000000000410F94
	// succ:  l000000000041101F l0000000000410F94
l000000000041101F:
	goto l0000000000410EF0
	// succ:  l0000000000410EF0
l0000000000411028:
	eax = ebp
	Mem0[rbp + 0x0000000000000000:word64] = rbx
	eax = eax | 0x00000002
	SZO = cond(eax)
	C = false
	goto l0000000000410EF5
	// succ:  l0000000000410EF5
l0000000000411036:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	// succ:  l0000000000411038
l0000000000411038:
	ebp = ebp | edx
	SZO = cond(ebp)
	C = false
	rcx = (int64) ecx
	r14 = r14 + rcx
	SCZO = cond(r14)
	eax = ebp
	eax = eax | 0x00000002
	SZO = cond(eax)
	C = false
	Mem0[r15:word64] = r14
	SCZO = cond(Mem0[rsi:byte] - 0x00)
	branch Test(EQ,Z) l000000000041104F
	// succ:  l000000000041104C_1 l000000000041104F
l000000000041104C_1:
	ebp = eax
	// succ:  l000000000041104F
l000000000041104F:
	goto l0000000000410F4F
	// succ:  l0000000000410F4F
l0000000000411054:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(SG,S) l0000000000411283
	// succ:  l000000000041105D l0000000000411283
l000000000041105D:
	rbx = rbx + rbx
	SCZO = cond(rbx)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411038
	// succ:  l0000000000411038
l0000000000411064:
	r8 = 0x00000000FFFFFFFF
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l0000000000411283
	// succ:  l0000000000411077 l0000000000411283
l0000000000411077:
	rbx = rbx << 0x0000000000000009
	SCZO = cond(rbx)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411038
	// succ:  l0000000000411038
l000000000041107F:
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	esi = 0x00000007
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l00000000004110A6
	// succ:  l00000000004110A6
l0000000000411097:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l000000000041109E
l000000000041109E:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(EQ,Z) l0000000000411038
	// succ:  l00000000004110A6 l0000000000411038
l00000000004110A6:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l0000000000411097
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l0000000000411097
	// succ:  l00000000004110AB l0000000000411097
l00000000004110AB:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l000000000041109E
	// succ:  l000000000041109E
l00000000004110BA:
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	esi = 0x00000008
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l00000000004110E5
	// succ:  l00000000004110E5
l00000000004110D2:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l00000000004110D9
l00000000004110D9:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(EQ,Z) l0000000000411038
	// succ:  l00000000004110E5 l0000000000411038
l00000000004110E5:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004110D2
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004110D2
	// succ:  l00000000004110EA l00000000004110D2
l00000000004110EA:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l00000000004110D9
	// succ:  l00000000004110D9
l00000000004110F9:
	rsi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	edi = 0x00000004
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	// succ:  l000000000041110F
l000000000041110F:
	SCZO = cond(rax - rbx)
	branch Test(ULT,C) l0000000000411271
	// succ:  l0000000000411118 l0000000000411271
l0000000000411118:
	rbx = rbx *s rsi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l000000000041111F
l000000000041111F:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000041110F
	// succ:  l0000000000411127 l000000000041110F
l0000000000411127:
	goto l0000000000411038
	// succ:  l0000000000411038
l000000000041112C:
	rsi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	edi = 0x00000005
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411157
	// succ:  l0000000000411157
l0000000000411144:
	rbx = rbx *s rsi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l000000000041114B
l000000000041114B:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(EQ,Z) l0000000000411038
	// succ:  l0000000000411157 l0000000000411038
l0000000000411157:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l0000000000411144
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l0000000000411144
	// succ:  l000000000041115C l0000000000411144
l000000000041115C:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l000000000041114B
	// succ:  l000000000041114B
l000000000041116B:
	rsi = 0xFFFFFFFFFFFFFFFF
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rsi
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l00000000004112A3
	// succ:  l0000000000411186 l00000000004112A3
l0000000000411186:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	SCZO = cond(rax - rbx)
	branch Test(ULT,C) l00000000004112A3
	// succ:  l0000000000411193 l00000000004112A3
l0000000000411193:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411038
	// succ:  l0000000000411038
l000000000041119E:
	rsi = 0xFFFFFFFFFFFFFFFF
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rsi
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	SCZO = cond(rbx - rax)
	branch Test(ULE,CZ) l0000000000411193
	// succ:  l00000000004111B5 l0000000000411193
l00000000004111B5:
	rbx = rsi
	edx = 0x00000001
	goto l0000000000411038
	// succ:  l0000000000411038
l00000000004111C2:
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	esi = 0x00000006
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l00000000004111ED
	// succ:  l00000000004111ED
l00000000004111DA:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l00000000004111E1
l00000000004111E1:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(EQ,Z) l0000000000411038
	// succ:  l00000000004111ED l0000000000411038
l00000000004111ED:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004111DA
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004111DA
	// succ:  l00000000004111F2 l00000000004111DA
l00000000004111F2:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l00000000004111E1
	// succ:  l00000000004111E1
l0000000000411201:
	r8 = 0x00000000FFFFFFFF
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l0000000000411283
	// succ:  l0000000000411210 l0000000000411283
l0000000000411210:
	rbx = rbx << 0x000000000000000A
	SCZO = cond(rbx)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411038
	// succ:  l0000000000411038
l000000000041121B:
	rsi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	edi = 0x00000003
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	// succ:  l0000000000411231
l0000000000411231:
	SCZO = cond(rax - rbx)
	branch Test(ULT,C) l0000000000411294
	// succ:  l0000000000411236 l0000000000411294
l0000000000411236:
	rbx = rbx *s rsi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l000000000041123D
l000000000041123D:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0000000000411231
	// succ:  l0000000000411245 l0000000000411231
l0000000000411245:
	goto l0000000000411038
	// succ:  l0000000000411038
l000000000041124A:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(Mem0[rsi + 0x0000000000000002:byte] - 0x42)
	eax = 0x00000400
	cl = Test(EQ,Z)
	ecx = rcx + 0x0000000000000001 + rcx
	goto l0000000000410FD5
	// succ:  l0000000000410FD5
l0000000000411262:
	ecx = 0x00000002
	eax = 0x000003E8
	goto l0000000000410FD5
	// succ:  l0000000000410FD5
l0000000000411271:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l000000000041111F
	// succ:  l000000000041111F
l0000000000411283:
	rbx = 0xFFFFFFFFFFFFFFFF
	edx = 0x00000001
	goto l0000000000411038
	// succ:  l0000000000411038
l0000000000411294:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l000000000041123D
	// succ:  l000000000041123D
l00000000004112A3:
	edx = 0x00000001
	rbx = rsi
	goto l0000000000411038
	// succ:  l0000000000411038
l00000000004112B0:
	ecx = 0x00416DC8
	edx = 0x00000060
	esi = 0x00416BE0
	edi = 0x00416BF0
	__assert_fail(rdi, rsi, rdx, rcx)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r10 = (int64) esi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = r8
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000018
	SCZO = cond(rsp)
	SCZO = cond(edi - 0x00000003)
	ebp = Mem0[0x000000000061A580:word32]
	branch Test(UGT,CZ) l000000000041133B
	// succ:  l00000000004112E9_thunk_fn00000000004112EB l00000000004112E9_thunk_fn000000000041133B
l00000000004112E9_thunk_fn00000000004112EB:
	call fn00000000004112EB (retsize: 0;)
	return
	// succ:  fn0000000000410E90_exit
l00000000004112E9_thunk_fn000000000041133B:
	call fn000000000041133B (retsize: 0;)
	return
	// succ:  fn0000000000410E90_exit
fn0000000000410E90_exit:


// fn00000000004112D0
// Return size: 0
void fn00000000004112D0()
fn00000000004112D0_entry:
	// succ:  l00000000004112D0
l00000000004112D0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r10 = (int64) esi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	r12 = r8
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000018
	SCZO = cond(rsp)
	SCZO = cond(edi - 0x00000003)
	ebp = Mem0[0x000000000061A580:word32]
	branch Test(UGT,CZ) l00000000004112E9_thunk_fn000000000041133B
	// succ:  l00000000004112E9_thunk_fn00000000004112EB l00000000004112E9_thunk_fn000000000041133B
l00000000004112E9_thunk_fn00000000004112EB:
	call fn00000000004112EB (retsize: 0;)
	return
	// succ:  fn00000000004112D0_exit l00000000004112E9_thunk_fn00000000004112EB
l00000000004112E9_thunk_fn00000000004112EB:
	call fn00000000004112EB (retsize: 0;)
	return
	// succ:  fn00000000004112D0_exit
l00000000004112E9_thunk_fn000000000041133B:
	call fn000000000041133B (retsize: 0;)
	return
	// succ:  fn00000000004112D0_exit
fn00000000004112D0_exit:


// fn00000000004112EB
// Return size: 0
void fn00000000004112EB()
fn00000000004112EB_entry:
	// succ:  l00000000004112EB
l00000000004112EB:
	SCZO = cond(edi - 0x00000002)
	branch Test(UGE,C) l0000000000411334
	// succ:  l00000000004112F0 l0000000000411334
l00000000004112F0:
	edi = edi - 0x00000001
	SCZO = cond(edi)
	esi = 0x00416DEC
	branch Test(NE,Z) l000000000041132F
	// succ:  l00000000004112F8_thunk_fn000000000041133B l00000000004112F8_thunk_fn000000000041133B
l00000000004112F8_thunk_fn000000000041133B:
	call fn000000000041133B (retsize: 0;)
	return
	// succ:  fn00000000004112EB_exit
l00000000004112F8_thunk_fn000000000041133B:
	call fn000000000041133B (retsize: 0;)
	return
	// succ:  fn00000000004112EB_exit
l0000000000411334:
	esi = 0x00416E10
	// succ:  l0000000000411334_thunk_fn000000000041133B
l0000000000411334_thunk_fn000000000041133B:
	call fn000000000041133B (retsize: 0;)
	return
	// succ:  fn00000000004112EB_exit
fn00000000004112EB_exit:


// fn000000000041133B
// Return size: 0
void fn000000000041133B()
fn000000000041133B_entry:
	goto l000000000041133B
	// succ:  l000000000041133B
l00000000004112FA:
	SZO = cond(r10d & r10d)
	C = false
	branch Test(SG,S) l0000000000411347
	// succ:  l00000000004112FF l0000000000411347
l00000000004112FF:
	r10 = r10 << 0x0000000000000005
	SCZO = cond(r10)
	ebx = 0x00416E09
	r13 = Mem0[rcx + r10:word64]
	// succ:  l000000000041130C
l000000000041130C:
	edx = 0x00000005
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rax = dcgettext(rdi, rsi, rdx)
	r9 = r12
	rdx = rax
	r8 = r13
	rcx = rbx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = ebp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call error (retsize: 8;)
	// succ:  l000000000041132F
l000000000041132F:
	abort()
l000000000041133B:
	SCZO = cond(edi - 0x00000004)
	esi = 0x00416DD1
	branch Test(EQ,Z) l00000000004112FA
	// succ:  l0000000000411345 l00000000004112FA
l0000000000411345:
	goto l000000000041132F
	// succ:  l000000000041132F
l0000000000411347:
	ebx = 0x00416E09
	Mem0[rsp:byte] = dl
	Mem0[rsp + 0x0000000000000001:byte] = 0x00
	rbx = rbx - r10
	SCZO = cond(rbx)
	r13 = rsp
	goto l000000000041130C
	// succ:  l000000000041130C
fn000000000041133B_exit:


// fn0000000000411360
// Return size: 8
void fn0000000000411360()
fn0000000000411360_entry:
	// succ:  l0000000000411360
l0000000000411360:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r14d = edx
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000028
	SCZO = cond(rsp)
	SCZO = cond(edx - 0x00000024)
	branch Test(UGT,CZ) l0000000000411788
	// succ:  l000000000041137A l0000000000411788
l000000000041137A:
	rax = rsp + 0x0000000000000018
	rbp = rdi
	r15 = rsi
	SZO = cond(rsi & rsi)
	C = false
	r13 = rcx
	r12 = r8
	branch Test(NE,Z) l0000000000411392
	// succ:  l000000000041138E_1 l0000000000411392
l000000000041138E_1:
	r15 = rax
	// succ:  l0000000000411392
l0000000000411392:
	ebx = (word32) Mem0[rdi:byte]
	call __ctype_b_loc (retsize: 8;)
	rdx = Mem0[rax:word64]
	rax = rbp
	goto l00000000004113AF
	// succ:  l00000000004113AF
l00000000004113A8:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	ebx = (word32) Mem0[rax:byte]
	// succ:  l00000000004113AF
l00000000004113AF:
	r9d = (word64) bl
	SZO = cond(Mem0[rdx + 0x0000000000000001 + r9 * 0x02:byte] & 0x20)
	C = false
	branch Test(NE,Z) l00000000004113A8
	// succ:  l00000000004113BB l00000000004113A8
l00000000004113BB:
	SCZO = cond(bl - 0x2D)
	branch Test(NE,Z) l00000000004113D8
	// succ:  l00000000004113C0 l00000000004113D8
l00000000004113C0:
	eax = 0x00000004
	// succ:  l00000000004113C5
l00000000004113C5:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000411360_exit
l00000000004113D8:
	rax = __errno_location()
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edx = r14d
	Mem0[rax:word32] = 0x00000000
	rsi = r15
	rdi = rbp
	Mem0[rsp + 0x0000000000000008:word64] = rax
	call __strtoul_internal (retsize: 8;)
	r14 = Mem0[r15:word64]
	rbx = rax
	r8 = Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(r14 - rbp)
	branch Test(EQ,Z) l00000000004114BF
	// succ:  l000000000041140C l00000000004114BF
l000000000041140C:
	eax = Mem0[rax:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000411440
	// succ:  l0000000000411413 l0000000000411440
l0000000000411413:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	// succ:  l0000000000411415
l0000000000411415:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000411422
	// succ:  l000000000041141A l0000000000411422
l000000000041141A:
	edx = (word32) Mem0[rsi:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000411450
	// succ:  l0000000000411422 l0000000000411450
l0000000000411422:
	Mem0[rbp + 0x0000000000000000:word64] = rbx
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	eax = ebp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000411360_exit
l0000000000411440:
	SCZO = cond(eax - 0x00000022)
	ebp = 0x00000001
	branch Test(NE,Z) l00000000004113C0
	// succ:  l000000000041144E l00000000004113C0
l000000000041144E:
	goto l0000000000411415
	// succ:  l0000000000411415
l0000000000411450:
	esi = (int32) dl
	rdi = r12
	Mem0[rsp + 0x0000000000000008:word32] = edx
	rax = strchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	edx = Mem0[rsp + 0x0000000000000008:word32]
	branch Test(EQ,Z) l0000000000411500
	// succ:  l000000000041146C l0000000000411500
l000000000041146C:
	esi = 0x00000030
	rdi = r12
	Mem0[rsp + 0x0000000000000008:word32] = edx
	rax = strchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	edx = Mem0[rsp + 0x0000000000000008:word32]
	branch Test(EQ,Z) l00000000004114A3
	// succ:  l0000000000411486 l00000000004114A3
l0000000000411486:
	eax = (word32) Mem0[rsi + 0x0000000000000001:byte]
	SCZO = cond(al - 0x44)
	branch Test(EQ,Z) l000000000041173A
	// succ:  l0000000000411493 l000000000041173A
l0000000000411493:
	SCZO = cond(al - 0x69)
	branch Test(EQ,Z) l0000000000411722
	// succ:  l000000000041149B l0000000000411722
l000000000041149B:
	SCZO = cond(al - 0x42)
	branch Test(EQ,Z) l000000000041173A
	// succ:  l00000000004114A3 l000000000041173A
l00000000004114A3:
	ecx = 0x00000001
	eax = 0x00000400
	// succ:  l00000000004114AD
l00000000004114AD:
	edx = edx - 0x00000042
	SCZO = cond(edx)
	SCZO = cond(dl - 0x35)
	branch Test(UGT,CZ) l0000000000411500
	// succ:  l00000000004114B5 l0000000000411500
l00000000004114B5:
	edx = (word32) dl
	switch (rdx) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
	// succ:  l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C
l00000000004114BF:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l00000000004113C0
	// succ:  l00000000004114C8 l00000000004113C0
l00000000004114C8:
	edx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004113C0
	// succ:  l00000000004114D4 l00000000004113C0
l00000000004114D4:
	esi = (int32) dl
	rdi = r12
	Mem0[rsp + 0x0000000000000008:word32] = edx
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	ebx = 0x00000001
	rax = strchr(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	edx = Mem0[rsp + 0x0000000000000008:word32]
	branch Test(NE,Z) l000000000041146C
	// succ:  l00000000004114F7 l000000000041146C
l00000000004114F7:
	goto l00000000004113C0
	// succ:  l00000000004113C0
l0000000000411500:
	eax = ebp
	Mem0[rbp + 0x0000000000000000:word64] = rbx
	eax = eax | 0x00000002
	SZO = cond(eax)
	C = false
	goto l00000000004113C5
	// succ:  l00000000004113C5
l000000000041150E:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	// succ:  l0000000000411510
l0000000000411510:
	ebp = ebp | edx
	SZO = cond(ebp)
	C = false
	rcx = (int64) ecx
	r14 = r14 + rcx
	SCZO = cond(r14)
	eax = ebp
	eax = eax | 0x00000002
	SZO = cond(eax)
	C = false
	Mem0[r15:word64] = r14
	SCZO = cond(Mem0[rsi:byte] - 0x00)
	branch Test(EQ,Z) l0000000000411527
	// succ:  l0000000000411524_1 l0000000000411527
l0000000000411524_1:
	ebp = eax
	// succ:  l0000000000411527
l0000000000411527:
	goto l0000000000411422
	// succ:  l0000000000411422
l000000000041152C:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(SG,S) l000000000041175B
	// succ:  l0000000000411535 l000000000041175B
l0000000000411535:
	rbx = rbx + rbx
	SCZO = cond(rbx)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411510
	// succ:  l0000000000411510
l000000000041153C:
	r8 = 0x00000000FFFFFFFF
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l000000000041175B
	// succ:  l000000000041154F l000000000041175B
l000000000041154F:
	rbx = rbx << 0x0000000000000009
	SCZO = cond(rbx)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411510
	// succ:  l0000000000411510
l0000000000411557:
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	esi = 0x00000007
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l000000000041157E
	// succ:  l000000000041157E
l000000000041156F:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000411576
l0000000000411576:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(EQ,Z) l0000000000411510
	// succ:  l000000000041157E l0000000000411510
l000000000041157E:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l000000000041156F
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l000000000041156F
	// succ:  l0000000000411583 l000000000041156F
l0000000000411583:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l0000000000411576
	// succ:  l0000000000411576
l0000000000411592:
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	esi = 0x00000008
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l00000000004115BD
	// succ:  l00000000004115BD
l00000000004115AA:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l00000000004115B1
l00000000004115B1:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(EQ,Z) l0000000000411510
	// succ:  l00000000004115BD l0000000000411510
l00000000004115BD:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004115AA
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004115AA
	// succ:  l00000000004115C2 l00000000004115AA
l00000000004115C2:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l00000000004115B1
	// succ:  l00000000004115B1
l00000000004115D1:
	rsi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	edi = 0x00000004
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	// succ:  l00000000004115E7
l00000000004115E7:
	SCZO = cond(rax - rbx)
	branch Test(ULT,C) l0000000000411749
	// succ:  l00000000004115F0 l0000000000411749
l00000000004115F0:
	rbx = rbx *s rsi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l00000000004115F7
l00000000004115F7:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l00000000004115E7
	// succ:  l00000000004115FF l00000000004115E7
l00000000004115FF:
	goto l0000000000411510
	// succ:  l0000000000411510
l0000000000411604:
	rsi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	edi = 0x00000005
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l000000000041162F
	// succ:  l000000000041162F
l000000000041161C:
	rbx = rbx *s rsi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000411623
l0000000000411623:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(EQ,Z) l0000000000411510
	// succ:  l000000000041162F l0000000000411510
l000000000041162F:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l000000000041161C
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l000000000041161C
	// succ:  l0000000000411634 l000000000041161C
l0000000000411634:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l0000000000411623
	// succ:  l0000000000411623
l0000000000411643:
	rsi = 0xFFFFFFFFFFFFFFFF
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rsi
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l000000000041177B
	// succ:  l000000000041165E l000000000041177B
l000000000041165E:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	SCZO = cond(rax - rbx)
	branch Test(ULT,C) l000000000041177B
	// succ:  l000000000041166B l000000000041177B
l000000000041166B:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411510
	// succ:  l0000000000411510
l0000000000411676:
	rsi = 0xFFFFFFFFFFFFFFFF
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = rsi
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	SCZO = cond(rbx - rax)
	branch Test(ULE,CZ) l000000000041166B
	// succ:  l000000000041168D l000000000041166B
l000000000041168D:
	rbx = rsi
	edx = 0x00000001
	goto l0000000000411510
	// succ:  l0000000000411510
l000000000041169A:
	rdi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rdi
	rax = rdx_rax /u rdi
	SCZO = cond(rax)
	esi = 0x00000006
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l00000000004116C5
	// succ:  l00000000004116C5
l00000000004116B2:
	rbx = rbx *s rdi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l00000000004116B9
l00000000004116B9:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(EQ,Z) l0000000000411510
	// succ:  l00000000004116C5 l0000000000411510
l00000000004116C5:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004116B2
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004116B2
	// succ:  l00000000004116CA l00000000004116B2
l00000000004116CA:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l00000000004116B9
	// succ:  l00000000004116B9
l00000000004116D9:
	r8 = 0x00000000FFFFFFFF
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l000000000041175B
	// succ:  l00000000004116E8 l000000000041175B
l00000000004116E8:
	rbx = rbx << 0x000000000000000A
	SCZO = cond(rbx)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411510
	// succ:  l0000000000411510
l00000000004116F3:
	rsi = (int64) eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF
	rdx = rdx_rax % rsi
	rax = rdx_rax /u rsi
	SCZO = cond(rax)
	edi = 0x00000003
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	// succ:  l0000000000411709
l0000000000411709:
	SCZO = cond(rax - rbx)
	branch Test(ULT,C) l000000000041176C
	// succ:  l000000000041170E l000000000041176C
l000000000041170E:
	rbx = rbx *s rsi
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000411715
l0000000000411715:
	edx = edx | r8d
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0000000000411709
	// succ:  l000000000041171D l0000000000411709
l000000000041171D:
	goto l0000000000411510
	// succ:  l0000000000411510
l0000000000411722:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(Mem0[rsi + 0x0000000000000002:byte] - 0x42)
	eax = 0x00000400
	cl = Test(EQ,Z)
	ecx = rcx + 0x0000000000000001 + rcx
	goto l00000000004114AD
	// succ:  l00000000004114AD
l000000000041173A:
	ecx = 0x00000002
	eax = 0x000003E8
	goto l00000000004114AD
	// succ:  l00000000004114AD
l0000000000411749:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l00000000004115F7
	// succ:  l00000000004115F7
l000000000041175B:
	rbx = 0xFFFFFFFFFFFFFFFF
	edx = 0x00000001
	goto l0000000000411510
	// succ:  l0000000000411510
l000000000041176C:
	rbx = 0xFFFFFFFFFFFFFFFF
	eax = 0x00000001
	goto l0000000000411715
	// succ:  l0000000000411715
l000000000041177B:
	edx = 0x00000001
	rbx = rsi
	goto l0000000000411510
	// succ:  l0000000000411510
l0000000000411788:
	ecx = 0x00416FE8
	edx = 0x00000060
	esi = 0x00416BE0
	edi = 0x00416BF0
	__assert_fail(rdi, rsi, rdx, rcx)
fn0000000000411360_exit:


// fn00000000004117B0
// Return size: 0
void fn00000000004117B0()
fn00000000004117B0_entry:
	// succ:  l00000000004117B0
l00000000004117B0:
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000411800
	// succ:  l00000000004117B8 l0000000000411800
l00000000004117B8:
	SCZO = cond(edi - 0x0000000A)
	eax = edi
	branch Test(EQ,Z) l00000000004117C8
	// succ:  l00000000004117BF l00000000004117C8
l00000000004117BF:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004117B0_exit
l00000000004117C8:
	rdx = Mem0[rsi:word64]
	edi = 0x004137B1
	ecx = 0x0000000A
	rsi = rdx
	// succ:  l00000000004117D8
l00000000004117D8:
	branch rcx == 0x0000000000000000 l00000000004117DA
	// succ:  l00000000004117D8_1 l00000000004117DA
l00000000004117D8_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004117D8
	// succ:  l00000000004117DA l00000000004117D8
l00000000004117DA:
	branch Test(NE,Z) l00000000004117BF
	// succ:  l00000000004117DC l00000000004117BF
l00000000004117DC:
	rdi = rdx
	call freecon (retsize: 8;)
	rax = __errno_location()
	Mem0[rax:word32] = 0x0000003D
	eax = 0xFFFFFFFF
	goto l00000000004117BF
	// succ:  l00000000004117BF
l0000000000411800:
	rax = __errno_location()
	Mem0[rax:word32] = 0x0000005F
	eax = 0xFFFFFFFF
	goto l00000000004117BF
	// succ:  l00000000004117BF
fn00000000004117B0_exit:


// fn0000000000411820
// Return size: 8
void fn0000000000411820()
fn0000000000411820_entry:
	// succ:  l0000000000411820
l0000000000411820:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rsi
	call getfilecon (retsize: 8;)
	rsi = rbx
	edi = eax
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	// succ:  l000000000041182E_thunk_fn00000000004117B0
l000000000041182E_thunk_fn00000000004117B0:
	call fn00000000004117B0 (retsize: 0;)
	return
	// succ:  fn0000000000411820_exit
fn0000000000411820_exit:


// fn0000000000411840
// Return size: 0
void fn0000000000411840()
fn0000000000411840_entry:
	// succ:  l0000000000411840
l0000000000411840:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rsi
	call lgetfilecon (retsize: 8;)
	rsi = rbx
	edi = eax
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	// succ:  l000000000041184F_thunk_fn00000000004117B0
l000000000041184F_thunk_fn00000000004117B0:
	call fn00000000004117B0 (retsize: 0;)
	return
	// succ:  fn0000000000411840_exit
fn0000000000411840_exit:


// fn0000000000411880
// Return size: 8
void fn0000000000411880()
fn0000000000411880_entry:
	// succ:  l0000000000411880
l0000000000411880:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	call __fpending (retsize: 8;)
	ebx = Mem0[rbp + 0x0000000000000000:word32]
	rdi = rbp
	r12 = rax
	call fn0000000000411D30 (retsize: 8;)
	ebx = ebx & 0x00000020
	SZO = cond(ebx)
	C = false
	SZO = cond(eax & eax)
	C = false
	dl = Test(NE,Z)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l00000000004118C0
	// succ:  l00000000004118A6 l00000000004118C0
l00000000004118A6:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004118B4
	// succ:  l00000000004118AA l00000000004118B4
l00000000004118AA:
	SZO = cond(r12 & r12)
	C = false
	ebx = 0xFFFFFFFF
	branch Test(EQ,Z) l00000000004118E0
	// succ:  l00000000004118B4 l00000000004118E0
l00000000004118B4:
	eax = ebx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000411880_exit
l00000000004118C0:
	SZO = cond(dl & dl)
	C = false
	ebx = 0xFFFFFFFF
	branch Test(NE,Z) l00000000004118B4
	// succ:  l00000000004118C9 l00000000004118B4
l00000000004118C9:
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	eax = ebx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000411880_exit
l00000000004118E0:
	rax = __errno_location()
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SCZO = cond(Mem0[rax:word32] - 0x00000009)
	bl = Test(NE,Z)
	ebx = -ebx
	SCZO = cond(ebx)
	C = ebx == 0x00000000
	eax = ebx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000411880_exit
fn0000000000411880_exit:


// fn0000000000411900
// Return size: 8
void fn0000000000411900()
fn0000000000411900_entry:
	// succ:  l0000000000411900
l0000000000411900:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	edi = 0x0000000E
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 168
	SCZO = cond(rsp)
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rsp + 0x0000000000000098:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call nl_langinfo (retsize: 8;)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	eax = 0x00416919
	branch Test(NE,Z) l0000000000411944
	// succ:  l0000000000411940_1 l0000000000411944
l0000000000411940_1:
	rbx = rax
	// succ:  l0000000000411944
l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
	// succ:  l0000000000411949 l000000000041196A
l0000000000411949:
	goto l00000000004119D4
	// succ:  l00000000004119D4
l0000000000411950:
	rdi = r14
	rax = strlen(rdi)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	rax = strlen(rdi)
	r14 = rbp + 0x0000000000000001 + rax
	// succ:  l000000000041196A
l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
	// succ:  l0000000000411973 l000000000041199C
l0000000000411973:
	rsi = r14
	rdi = rbx
	rax = DPB(rax, strcmp(rdi, rsi), 0, 32)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
	// succ:  l0000000000411982 l000000000041198F
l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
	// succ:  l0000000000411988 l0000000000411950
l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
	// succ:  l000000000041198F l0000000000411950
l000000000041198F:
	rdi = r14
	rax = strlen(rdi)
	rbx = r14 + 0x0000000000000001 + rax
	// succ:  l000000000041199C
l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	eax = 0x00416FFC
	branch Test(NE,Z) l00000000004119A8
	// succ:  l00000000004119A4_1 l00000000004119A8
l00000000004119A4_1:
	rbx = rax
	// succ:  l00000000004119A8
l00000000004119A8:
	rcx = Mem0[rsp + 0x0000000000000098:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
	// succ:  l00000000004119C2 l0000000000411CFD
l00000000004119C2:
	rsp = rsp + 168
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000411900_exit
l00000000004119D4:
	edi = 0x00417002
	rax = getenv(rdi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
	// succ:  l00000000004119E6 l00000000004119EF
l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
	// succ:  l00000000004119EF l0000000000411C52
l00000000004119EF:
	eax = 0x00000007
	esp = 0x00000008
	edi = 0x00416FF3
	// succ:  l0000000000411A00
l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	ebp = 0x00000001
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
	// succ:  l0000000000411A19 l0000000000411C42
l0000000000411A19:
	r13 = r13 + r12
	SCZO = cond(r13)
	rdi = rbp + 0x000000000000000E
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
	// succ:  l0000000000411A31 l0000000000411CF2
l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	edx = Mem0[rsp + 0x0000000000000008:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
	// succ:  l0000000000411A47 l0000000000411A4D
l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
	// succ:  l0000000000411A4D
l0000000000411A4D:
	r13 = r13 + rbp
	SCZO = cond(r13)
	r8 = 0x0000000072616863
	esi = 0x00020000
	Mem0[rbp + 0x0000000000000000:word64] = rax
	eax = 0x00000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rax = DPB(rax, open(rdi, rsi), 0, 32)
	SZO = cond(eax & eax)
	C = false
	r12d = eax
	branch Test(SG,S) l0000000000411C28
	// succ:  l0000000000411A8A l0000000000411C28
l0000000000411A8A:
	esi = 0x00413A21
	edi = eax
	rax = fdopen(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
	// succ:  l0000000000411AA2 l0000000000411C20
l0000000000411AA2:
	r12 = rsp + 0x0000000000000020
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
	// succ:  l0000000000411AB0
l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
	// succ:  l0000000000411ABE l0000000000411C01
l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
	// succ:  l0000000000411AC9
l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
	// succ:  l0000000000411ACE l0000000000411AB0
l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
	// succ:  l0000000000411AD6 l0000000000411AB0
l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
	// succ:  l0000000000411ADF l0000000000411C75
l0000000000411ADF:
	rsi = r15
	call ungetc (retsize: 8;)
	rcx = rsp + 0x0000000000000060
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	rdx = r12
	esi = 0x00417012
	rdi = r15
	call fscanf (retsize: 8;)
	SCZO = cond(eax - 0x00000001)
	branch Test(LE,SZO) l0000000000411C9C
	// succ:  l0000000000411B07 l0000000000411C9C
l0000000000411B07:
	rdx = r12
	// succ:  l0000000000411B0A
l0000000000411B0A:
	ecx = Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	SCZO = cond(rdx)
	eax = rcx + 0x00000000FEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	SZO = cond(eax)
	C = false
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
	// succ:  l0000000000411B21 l0000000000411B0A
l0000000000411B21:
	ecx = eax
	r10 = rsp + 0x0000000000000060
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
	// succ:  l0000000000411B30_1 l0000000000411B33
l0000000000411B30_1:
	eax = ecx
	// succ:  l0000000000411B33
l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
	// succ:  l0000000000411B37_2 l0000000000411B3B
l0000000000411B37_2:
	rdx = rcx
	// succ:  l0000000000411B3B
l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	SCZO = cond(rdx)
	rdx = rdx - r12
	SCZO = cond(rdx)
	// succ:  l0000000000411B44
l0000000000411B44:
	ecx = Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	SCZO = cond(r10)
	eax = rcx + 0x00000000FEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	SZO = cond(eax)
	C = false
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
	// succ:  l0000000000411B5C l0000000000411B44
l0000000000411B5C:
	ecx = eax
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
	// succ:  l0000000000411B66_3 l0000000000411B69
l0000000000411B66_3:
	eax = ecx
	// succ:  l0000000000411B69
l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
	// succ:  l0000000000411B6D_4 l0000000000411B71
l0000000000411B6D_4:
	r10 = rcx
	// succ:  l0000000000411B71
l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = rsp + 0x0000000000000060
	r10 = r10 - 0x03 - C
	SCZO = cond(r10)
	r10 = r10 - rax
	SCZO = cond(r10)
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
	// succ:  l0000000000411B8F l0000000000411CBC
l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	Mem0[rsp + 0x0000000000000010:word64] = r10
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = malloc(rdi)
	r10 = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
	// succ:  l0000000000411BB8
l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
	// succ:  l0000000000411BC1 l0000000000411D02
l0000000000411BC1:
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = r12
	rdi = rdi - rdx
	SCZO = cond(rdi)
	r14 = r14 - r10
	SCZO = cond(r14)
	rdi = rdi + r14
	SCZO = cond(rdi)
	rdi = rdi + r13
	SCZO = cond(rdi)
	rax = strcpy(rdi, rsi)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = rsp + 0x0000000000000060
	r14 = r13
	rax = strcpy(rdi, rsi)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
	// succ:  l0000000000411C01 l0000000000411ABE
l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF)
	edi = eax
	branch Test(EQ,Z) l0000000000411C9C
	// succ:  l0000000000411C14 l0000000000411C9C
l0000000000411C14:
	goto l0000000000411AC9
	// succ:  l0000000000411AC9
l0000000000411C20:
	edi = r12d
	rax = DPB(rax, close(rdi), 0, 32)
	// succ:  l0000000000411C28
l0000000000411C28:
	esi = 0x00416919
	// succ:  l0000000000411C2E
l0000000000411C2E:
	rdi = rbp
	free(rdi)
	// succ:  l0000000000411C36
l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
	goto l000000000041196A
	// succ:  l000000000041196A
l0000000000411C42:
	r13d = r13d ^ r13d
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000000
	goto l0000000000411A19
	// succ:  l0000000000411A19
l0000000000411C52:
	rdi = rax
	rax = strlen(rdi)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
	// succ:  l0000000000411C62 l0000000000411C42
l0000000000411C62:
	rax = rax - 0x0000000000000001
	goto l0000000000411A00
	// succ:  l0000000000411A00
l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
	// succ:  l0000000000411C75 l0000000000411C93
l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
	// succ:  l0000000000411C83 l0000000000411D1D
l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
	// succ:  l0000000000411C8E
l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
	// succ:  l0000000000411C93 l0000000000411C70
l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
	// succ:  l0000000000411C9C l0000000000411AB0
l0000000000411C9C:
	rdi = r15
	call fn0000000000411D30 (retsize: 8;)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
	rdi = r15
	call fn0000000000411D30 (retsize: 8;)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
	// succ:  l0000000000411CB2 l0000000000411C28
l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
	Mem0[r14 + rax:byte] = 0x00
	goto l0000000000411C2E
	// succ:  l0000000000411C2E
l0000000000411CBC:
	rax = rax + Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rax)
	rdi = r14
	Mem0[rsp + 0x0000000000000018:word64] = r10
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = realloc(rdi, rsi)
	r10 = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
	rdx = Mem0[rsp + 0x0000000000000010:word64]
	goto l0000000000411BB8
	// succ:  l0000000000411BB8
l0000000000411CF2:
	esi = 0x00416919
	goto l0000000000411C36
	// succ:  l0000000000411C36
l0000000000411CFD:
	__stack_chk_fail()
	// succ:  l0000000000411D02
l0000000000411D02:
	rdi = r14
	esi = 0x00416919
	free(rdi)
	rdi = r15
	call fn0000000000411D30 (retsize: 8;)
	goto l0000000000411C2E
	// succ:  l0000000000411C2E
l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8;)
	goto l0000000000411C8E
	// succ:  l0000000000411C8E
fn0000000000411900_exit:


// fn0000000000411D30
// Return size: 8
void fn0000000000411D30()
fn0000000000411D30_entry:
	goto l0000000000411D30
	// succ:  l0000000000411D30
l0000000000402310:
	call Mem0[0x000000000061A0D0:word32] (retsize: 4;)
	return
	// succ:  fn0000000000411D30_exit
l0000000000411D30:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rax = DPB(rax, fileno(rdi), 0, 32)
	SZO = cond(eax & eax)
	C = false
	rdi = rbx
	branch Test(SG,S) l0000000000411D9F
	// succ:  l0000000000411D43 l0000000000411D9F
l0000000000411D43:
	call __freading (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000411D80
	// succ:  l0000000000411D4C l0000000000411D80
l0000000000411D4C:
	rdi = rbx
	call fn0000000000411DB0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000411D9C
	// succ:  l0000000000411D58 l0000000000411D9C
l0000000000411D58:
	rax = __errno_location()
	r12d = Mem0[r8:word64]
	rdi = rbx
	rbp = rax
	rax = DPB(rax, fclose(rdi), 0, 32)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(EQ,Z) l0000000000411D79
	// succ:  l0000000000411D70 l0000000000411D79
l0000000000411D70:
	Mem0[r13 + 0x0000000000000000:word32] = r12d
	eax = 0xFFFFFFFF
	// succ:  l0000000000411D79
l0000000000411D79:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000411D30_exit
l0000000000411D80:
	rdi = rbx
	rax = DPB(rax, fileno(rdi), 0, 32)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edx = 0x00000001
	edi = eax
	call lseek (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF)
	branch Test(NE,Z) l0000000000411D4C
	// succ:  l0000000000411D9C l0000000000411D4C
l0000000000411D9C:
	rdi = rbx
	rdi = rbx
	// succ:  l0000000000411D9F
l0000000000411D9F:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l0000000000402310
	// succ:  l0000000000402310
fn0000000000411D30_exit:


// fn0000000000411DB0
// Return size: 0
void fn0000000000411DB0()
fn0000000000411DB0_entry:
	goto l0000000000411DB0
	// succ:  l0000000000411DB0
l0000000000402650:
	call Mem0[0x000000000061A270:word32] (retsize: 4;)
	return
	// succ:  fn0000000000411DB0_exit
l0000000000411DB0:
	rsp = fp
	SZO = cond(rdi & rdi)
	C = false
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	branch Test(EQ,Z) l0000000000411DC2
	// succ:  l0000000000411DB9 l0000000000411DC2
l0000000000411DB9:
	call __freading (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000411DD0
	// succ:  l0000000000411DC2 l0000000000411DD0
l0000000000411DC2:
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l0000000000402650
	// succ:  l0000000000402650
l0000000000411DD0:
	SZO = cond(Mem0[rbx:word32] & 0x00000100)
	C = false
	branch Test(EQ,Z) l0000000000411DC2
	// succ:  l0000000000411DD8 l0000000000411DC2
l0000000000411DD8:
	rdi = rbx
	edx = 0x00000001
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	call fn0000000000411DF0 (retsize: 8;)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l0000000000402650
	// succ:  l0000000000402650
fn0000000000411DB0_exit:


// fn0000000000411DF0
// Return size: 8
void fn0000000000411DF0()
fn0000000000411DF0_entry:
	goto l0000000000411DF0
	// succ:  l0000000000411DF0
l0000000000402790:
	call Mem0[0x000000000061A310:word32] (retsize: 4;)
	return
	// succ:  fn0000000000411DF0_exit
l0000000000411DF0:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	SCZO = cond(rsp)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000411E10
	// succ:  l0000000000411E02 l0000000000411E10
l0000000000411E02:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	goto l0000000000402790
	// succ:  l0000000000402790
l0000000000411E10:
	rax = Mem0[rdi + 0x0000000000000020:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000028:word64] - rax)
	branch Test(NE,Z) l0000000000411E02
	// succ:  l0000000000411E1A l0000000000411E02
l0000000000411E1A:
	SCZO = cond(Mem0[rdi + 0x0000000000000048:word64] - 0x0000000000000000)
	branch Test(NE,Z) l0000000000411E02
	// succ:  l0000000000411E21 l0000000000411E02
l0000000000411E21:
	Mem0[rsp + 0x000000000000000C:word32] = edx
	Mem0[rsp:word64] = rsi
	rax = DPB(rax, fileno(rdi), 0, 32)
	edx = Mem0[rsp + 0x000000000000000C:word32]
	rsi = Mem0[rsp:word64]
	edi = eax
	call lseek (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF)
	branch Test(EQ,Z) l0000000000411E4F
	// succ:  l0000000000411E43 l0000000000411E4F
l0000000000411E43:
	v12 = Mem0[rbx:word32] & 0xFFFFFFEF
	Mem0[rbx:word32] = v12
	SZO = cond(Mem0[rbx:word32])
	C = false
	Mem0[rbx + 0x0000000000000090:word64] = rax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0000000000411E4F
l0000000000411E4F:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  fn0000000000411DF0_exit
fn0000000000411DF0_exit:


// fn0000000000411EE0
// Return size: 0
void fn0000000000411EE0()
fn0000000000411EE0_entry:
	goto l0000000000411EE0
	// succ:  l0000000000411EE0
l00000000004027B0:
	call Mem0[0x000000000061A320:word32] (retsize: 4;)
	return
	// succ:  fn0000000000411EE0_exit
l0000000000411EE0:
	rsp = fp
	rax = 0x000000000061A3A8
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411EF6
	// succ:  l0000000000411EEC l0000000000411EF6
l0000000000411EEC:
	rdx = Mem0[rax:word64]
	// succ:  l0000000000411EEF
l0000000000411EEF:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	goto l00000000004027B0
	// succ:  l00000000004027B0
l0000000000411EF6:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l0000000000411EEF
	// succ:  l0000000000411EEF
fn0000000000411EE0_exit:


